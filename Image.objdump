
Image.out:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:

const piniod_t __input_pins [] = INPUT_PIN_LIST;

void pin_sensor_init () { __pinsen_setedge_irq; }

void pin_sensor_read (word st, const byte *junk, address val) {
       0:	20005000 	andcs	r5, r0, r0

	const piniod_t *p;
	word i;
	byte v;

	if (val == NULL) {
       4:	00001d8d 	andeq	r1, r0, sp, lsl #27
		// Called to issue a wait request
		if (st == WNONE)
       8:	00001d87 	andeq	r1, r0, r7, lsl #27
       c:	00001d89 	andeq	r1, r0, r9, lsl #27
			// Make sure this is not WNONE
			return;
		cli;
		__pinsen_clear_and_enable;
      10:	00001d8b 	andeq	r1, r0, fp, lsl #27
      14:	00001d8b 	andeq	r1, r0, fp, lsl #27
		when (&__input_pins, st);
      18:	00001d8b 	andeq	r1, r0, fp, lsl #27
	...
	}

	*val = 0;
	for (i = 0, p = __input_pins;
	    	    i < sizeof (__input_pins) / sizeof (piniod_t); i++, p++)
		*val |= __port_in_value (p) << i;
      2c:	00001d8b 	andeq	r1, r0, fp, lsl #27
      30:	00001d8b 	andeq	r1, r0, fp, lsl #27
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Return the input value from the specified DIO.
    //
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
      34:	00000000 	andeq	r0, r0, r0
      38:	00001d8b 	andeq	r1, r0, fp, lsl #27
      3c:	00001d8b 	andeq	r1, r0, fp, lsl #27
      40:	00000b49 	andeq	r0, r0, r9, asr #22
      44:	00001d8b 	andeq	r1, r0, fp, lsl #27
      48:	00001d8b 	andeq	r1, r0, fp, lsl #27
}
      4c:	00001d8b 	andeq	r1, r0, fp, lsl #27
      50:	00000709 	andeq	r0, r0, r9, lsl #14
      54:	00000a09 	andeq	r0, r0, r9, lsl #20
	if (!button_still_pressed (__button_list [pbutton]))
		goto Done;

	if (BUTTON_REPEAT (__button_list [pbutton])) {
		// Wait for repeat
		delay (BUTTON_REPEAT_DELAY, BU_LOOP);
      58:	00001d8b 	andeq	r1, r0, fp, lsl #27
	    pbutton++) {
      5c:	00001d8b 	andeq	r1, r0, fp, lsl #27
      60:	00001d8b 	andeq	r1, r0, fp, lsl #27
	if (!button_still_pressed (__button_list [pbutton]))
      64:	00002751 	andeq	r2, r0, r1, asr r7
      68:	00001d8b 	andeq	r1, r0, fp, lsl #27
      6c:	00001d8b 	andeq	r1, r0, fp, lsl #27
      70:	00001d8b 	andeq	r1, r0, fp, lsl #27
      74:	00001d8b 	andeq	r1, r0, fp, lsl #27
	if (BUTTON_REPEAT (__button_list [pbutton])) {
      78:	00001d8b 	andeq	r1, r0, fp, lsl #27
      7c:	00001d8b 	andeq	r1, r0, fp, lsl #27
		delay (BUTTON_REPEAT_DELAY, BU_LOOP);
      80:	00001d8b 	andeq	r1, r0, fp, lsl #27
      84:	00001d8b 	andeq	r1, r0, fp, lsl #27
	} else
		goto Debounce;

  entry (BU_LOOP)

	if (!button_still_pressed (__button_list [pbutton]))
      88:	00001d8b 	andeq	r1, r0, fp, lsl #27
      8c:	00001d8b 	andeq	r1, r0, fp, lsl #27
      90:	00001d8b 	andeq	r1, r0, fp, lsl #27
      94:	00001d8b 	andeq	r1, r0, fp, lsl #27
      98:	00001d8b 	andeq	r1, r0, fp, lsl #27
		goto Done;

	if (baction == NULL)
      9c:	00001d8b 	andeq	r1, r0, fp, lsl #27
      a0:	00001d8b 	andeq	r1, r0, fp, lsl #27
		goto Term;

	(*baction) (pbutton);
      a4:	00001d8b 	andeq	r1, r0, fp, lsl #27

	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);

endthread
      a8:	00001d8b 	andeq	r1, r0, fp, lsl #27
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	00001d8b 	andeq	r1, r0, fp, lsl #27
      b0:	00001d8b 	andeq	r1, r0, fp, lsl #27
endthread
      b4:	00001d8b 	andeq	r1, r0, fp, lsl #27
      b8:	00001d8b 	andeq	r1, r0, fp, lsl #27
      bc:	00001d8b 	andeq	r1, r0, fp, lsl #27
      c0:	00001d8b 	andeq	r1, r0, fp, lsl #27
      c4:	00001d8b 	andeq	r1, r0, fp, lsl #27

000000c8 <assembleMessage>:
 *      messagePtr: a pointer to a message struct
 * 
 * Return:
 *      Returns a character array that holds the required message to be sent
*/
char * assembleMessage(message * messagePtr) {
      c8:	b538      	push	{r3, r4, r5, lr}
      ca:	7883      	ldrb	r3, [r0, #2]
      cc:	4605      	mov	r5, r0
      ce:	2b05      	cmp	r3, #5
      d0:	d808      	bhi.n	e4 <assembleMessage+0x1c>
      d2:	e8df f003 	tbb	[pc, r3]
      d6:	131c0303 	tstne	ip, #201326592	; 0xc000000
      da:	20062513 	andcs	r2, r6, r3, lsl r5
    
    switch(messagePtr->messageType) 
    {
    case DISCOVERY_REQUEST:
    case DISCOVERY_RESPONSE:
        p = (char*)umalloc(6);
      de:	f001 fa4b 	bl	1578 <__pi_malloc>
      e2:	4604      	mov	r4, r0
        p[7] = 0x00;
        strcpy(p + 8, messagePtr->messageRecord);
        break;
    } 

    p[0] = messagePtr->senderGroupId;
      e4:	882b      	ldrh	r3, [r5, #0]
    p[3] = messagePtr->requestNumber;
    p[4] = messagePtr->senderId;
    p[5] = messagePtr->destinationId;

    return p;
}
      e6:	4620      	mov	r0, r4
    p[0] = messagePtr->senderGroupId;
      e8:	7023      	strb	r3, [r4, #0]
    p[2] = messagePtr->messageType;
      ea:	78ab      	ldrb	r3, [r5, #2]
      ec:	70a3      	strb	r3, [r4, #2]
    p[3] = messagePtr->requestNumber;
      ee:	78eb      	ldrb	r3, [r5, #3]
      f0:	70e3      	strb	r3, [r4, #3]
    p[4] = messagePtr->senderId;
      f2:	792b      	ldrb	r3, [r5, #4]
      f4:	7123      	strb	r3, [r4, #4]
    p[5] = messagePtr->destinationId;
      f6:	796b      	ldrb	r3, [r5, #5]
      f8:	7163      	strb	r3, [r4, #5]
}
      fa:	bd38      	pop	{r3, r4, r5, pc}
        p = (char*)umalloc(8);
      fc:	2008      	movs	r0, #8
      fe:	f001 fa3b 	bl	1578 <__pi_malloc>
        p[6] = messagePtr->recordIndex;
     102:	7eab      	ldrb	r3, [r5, #26]
        p = (char*)umalloc(8);
     104:	4604      	mov	r4, r0
        p[6] = messagePtr->recordIndex;
     106:	7183      	strb	r3, [r0, #6]
        p[7] = 0x00;
     108:	2300      	movs	r3, #0
     10a:	71c3      	strb	r3, [r0, #7]
        break;
     10c:	e7ea      	b.n	e4 <assembleMessage+0x1c>
        p = (char*)umalloc(26);
     10e:	201a      	movs	r0, #26
     110:	f001 fa32 	bl	1578 <__pi_malloc>
        strcpy(p + 6, messagePtr->messageRecord);
     114:	1da9      	adds	r1, r5, #6
        p = (char*)umalloc(26);
     116:	4604      	mov	r4, r0
        strcpy(p + 6, messagePtr->messageRecord);
     118:	3006      	adds	r0, #6
        strcpy(p + 8, messagePtr->messageRecord);
     11a:	f001 f940 	bl	139e <__pi_strcpy>
        break;
     11e:	e7e1      	b.n	e4 <assembleMessage+0x1c>
        p = (char*)umalloc(28);
     120:	201c      	movs	r0, #28
     122:	f001 fa29 	bl	1578 <__pi_malloc>
        p[6] = messagePtr->status;
     126:	7eeb      	ldrb	r3, [r5, #27]
        p = (char*)umalloc(28);
     128:	4604      	mov	r4, r0
        p[6] = messagePtr->status;
     12a:	7183      	strb	r3, [r0, #6]
        p[7] = 0x00;
     12c:	2300      	movs	r3, #0
        strcpy(p + 8, messagePtr->messageRecord);
     12e:	1da9      	adds	r1, r5, #6
        p[7] = 0x00;
     130:	71c3      	strb	r3, [r0, #7]
        strcpy(p + 8, messagePtr->messageRecord);
     132:	3008      	adds	r0, #8
     134:	e7f1      	b.n	11a <_Min_Stack_Size+0x1a>
	...

00000138 <getPacketSize>:
 *      an integer of how big the packet needs to be
*/
int getPacketSize(char messageType) {
    int size = 0;
    
    switch(messageType) 
     138:	2805      	cmp	r0, #5
int getPacketSize(char messageType) {
     13a:	bf8e      	itee	hi
     13c:	2000      	movhi	r0, #0
     13e:	4b02      	ldrls	r3, [pc, #8]	; (148 <getPacketSize+0x10>)
     140:	5618      	ldrsbls	r0, [r3, r0]
        size = 28;
        break;
    }

    return size + 4; // add four bytes for the two bytes before and after the payload
}
     142:	3004      	adds	r0, #4
     144:	4770      	bx	lr
     146:	bf00      	nop
     148:	00004507 	andeq	r4, r0, r7, lsl #10

0000014c <transmitter>:

/**
 * State machine for handling transmitting messages
*/
fsm transmitter (message * messagePtr) {
     14c:	b570      	push	{r4, r5, r6, lr}
     14e:	4604      	mov	r4, r0
     150:	b128      	cbz	r0, 15e <transmitter+0x12>
     152:	2801      	cmp	r0, #1
     154:	d01d      	beq.n	192 <transmitter+0x46>

        tcv_endp (spkt);

    state Confirm_Transmission:
        finish;
}
     156:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     15a:	f001 b813 	b.w	1184 <__pi_badstate>
fsm transmitter (message * messagePtr) {
     15e:	4b0f      	ldr	r3, [pc, #60]	; (19c <transmitter+0x50>)
     160:	681b      	ldr	r3, [r3, #0]
     162:	689d      	ldr	r5, [r3, #8]
        char * assembledMessage = assembleMessage(messagePtr);
     164:	4628      	mov	r0, r5
     166:	f7ff ffaf 	bl	c8 <assembleMessage>
        spkt = tcv_wnp (Transmit_Message, sfd,  getPacketSize(messagePtr->messageType));
     16a:	4b0d      	ldr	r3, [pc, #52]	; (1a0 <transmitter+0x54>)
        char * assembledMessage = assembleMessage(messagePtr);
     16c:	4606      	mov	r6, r0
        spkt = tcv_wnp (Transmit_Message, sfd,  getPacketSize(messagePtr->messageType));
     16e:	78a8      	ldrb	r0, [r5, #2]
     170:	6819      	ldr	r1, [r3, #0]
     172:	f7ff ffe1 	bl	138 <getPacketSize>
     176:	4623      	mov	r3, r4
     178:	4602      	mov	r2, r0
     17a:	4620      	mov	r0, r4
     17c:	f001 fc5c 	bl	1a38 <tcv_wnps>
     180:	4605      	mov	r5, r0
        strcpy(p, assembledMessage);
     182:	4631      	mov	r1, r6
        spkt [0] = 0;
     184:	f820 4b02 	strh.w	r4, [r0], #2
        strcpy(p, assembledMessage);
     188:	f001 f909 	bl	139e <__pi_strcpy>
        tcv_endp (spkt);
     18c:	4628      	mov	r0, r5
     18e:	f001 fba9 	bl	18e4 <tcv_endp>
}
     192:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        finish;
     196:	2000      	movs	r0, #0
     198:	f001 b9c6 	b.w	1528 <kill>
     19c:	20000b98 	mulcs	r0, r8, fp
     1a0:	20000000 	andcs	r0, r0, r0

000001a4 <randomNumber>:
 * Generates a random number
 * 
 *  Return:
 *      returns a random 1 byte number
*/
char randomNumber() {
     1a4:	b507      	push	{r0, r1, r2, lr}
   time_t t;
   
   /* Intializes random number generator */
   srand((unsigned) time(&t));
     1a6:	4668      	mov	r0, sp
     1a8:	f004 f858 	bl	425c <time>
     1ac:	f004 f830 	bl	4210 <srand>

   return (char)rand();
     1b0:	f004 f838 	bl	4224 <rand>
}
     1b4:	b2c0      	uxtb	r0, r0
     1b6:	b003      	add	sp, #12
     1b8:	f85d fb04 	ldr.w	pc, [sp], #4

000001bc <find>:
}

/**
 * State machine for sending a discovery request
*/
fsm find {
     1bc:	b510      	push	{r4, lr}
     1be:	2804      	cmp	r0, #4
     1c0:	d852      	bhi.n	268 <find+0xac>
     1c2:	e8df f000 	tbb	[pc, r0]
     1c6:	36311c03 	ldrtcc	r1, [r1], -r3, lsl #24
     1ca:	2400003a 	strcs	r0, [r0], #-58	; 0xffffffc6
    int sendCount;
    int i;

    state Initialize:
        i = 0;
     1ce:	4b28      	ldr	r3, [pc, #160]	; (270 <find+0xb4>)
     1d0:	601c      	str	r4, [r3, #0]
        sendCount = 0;
     1d2:	4b28      	ldr	r3, [pc, #160]	; (274 <find+0xb8>)
     1d4:	601c      	str	r4, [r3, #0]
        currentRequestNumber = randomNumber();
     1d6:	f7ff ffe5 	bl	1a4 <randomNumber>
     1da:	4a27      	ldr	r2, [pc, #156]	; (278 <find+0xbc>)

        messagePtr -> senderGroupId = groupId;
     1dc:	4b27      	ldr	r3, [pc, #156]	; (27c <find+0xc0>)
        currentRequestNumber = randomNumber();
     1de:	7010      	strb	r0, [r2, #0]
        messagePtr -> senderGroupId = groupId;
     1e0:	4827      	ldr	r0, [pc, #156]	; (280 <find+0xc4>)
     1e2:	6819      	ldr	r1, [r3, #0]
     1e4:	f9b0 0000 	ldrsh.w	r0, [r0]
     1e8:	8008      	strh	r0, [r1, #0]
        messagePtr -> messageType = 0;
     1ea:	6819      	ldr	r1, [r3, #0]
        messagePtr -> requestNumber = currentRequestNumber;
     1ec:	7812      	ldrb	r2, [r2, #0]
        messagePtr -> messageType = 0;
     1ee:	708c      	strb	r4, [r1, #2]
        messagePtr -> requestNumber = currentRequestNumber;
     1f0:	6819      	ldr	r1, [r3, #0]
     1f2:	70ca      	strb	r2, [r1, #3]
        messagePtr -> senderId = nodeId;
     1f4:	4a23      	ldr	r2, [pc, #140]	; (284 <find+0xc8>)
     1f6:	681b      	ldr	r3, [r3, #0]
     1f8:	7812      	ldrb	r2, [r2, #0]
        messagePtr -> destinationId = 0;
     1fa:	715c      	strb	r4, [r3, #5]
        messagePtr -> senderId = nodeId;
     1fc:	711a      	strb	r2, [r3, #4]

    state Send_Discovery_Request:
        if(sendCount == 2) {
     1fe:	4c1d      	ldr	r4, [pc, #116]	; (274 <find+0xb8>)
     200:	6823      	ldr	r3, [r4, #0]
     202:	2b02      	cmp	r3, #2
     204:	d102      	bne.n	20c <find+0x50>
            proceed Display_Neighbours;
     206:	2003      	movs	r0, #3
     208:	f001 f844 	bl	1294 <proceed>
        }

        call transmitter(messagePtr, Wait);
     20c:	4b1b      	ldr	r3, [pc, #108]	; (27c <find+0xc0>)
     20e:	481e      	ldr	r0, [pc, #120]	; (288 <find+0xcc>)
     210:	6819      	ldr	r1, [r3, #0]
     212:	f001 fa05 	bl	1620 <__pi_fork>
     216:	2102      	movs	r1, #2
     218:	f001 f87a 	bl	1310 <__pi_join>
     21c:	b108      	cbz	r0, 222 <find+0x66>
     21e:	f000 fdd3 	bl	dc8 <__pi_release>
        sendCount++;
     222:	6823      	ldr	r3, [r4, #0]
     224:	3301      	adds	r3, #1
     226:	6023      	str	r3, [r4, #0]

    state Wait:
        delay(3*1024, Send_Discovery_Request);
     228:	2101      	movs	r1, #1
     22a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
     22e:	f001 f881 	bl	1334 <delay>
        
    state Display_Neighbours:
        ser_outf(Display_Neighbours, "Neighbours:");
     232:	2003      	movs	r0, #3
     234:	4915      	ldr	r1, [pc, #84]	; (28c <find+0xd0>)
     236:	f001 feb9 	bl	1fac <ser_outf>
    
    state Display_Neighbour:
        if (neighbours[i] == 1) {
     23a:	4c0d      	ldr	r4, [pc, #52]	; (270 <find+0xb4>)
     23c:	4b14      	ldr	r3, [pc, #80]	; (290 <find+0xd4>)
     23e:	6822      	ldr	r2, [r4, #0]
     240:	5c9b      	ldrb	r3, [r3, r2]
     242:	2b01      	cmp	r3, #1
     244:	d103      	bne.n	24e <find+0x92>
            ser_outf(Display_Neighbour, " %d", i);
     246:	2004      	movs	r0, #4
     248:	4912      	ldr	r1, [pc, #72]	; (294 <find+0xd8>)
     24a:	f001 feaf 	bl	1fac <ser_outf>
        }

        i++;
     24e:	6823      	ldr	r3, [r4, #0]
     250:	3301      	adds	r3, #1

        if(i < MAX_NEIGHBOURS) {
     252:	2b19      	cmp	r3, #25
        i++;
     254:	6023      	str	r3, [r4, #0]
        if(i < MAX_NEIGHBOURS) {
     256:	dc02      	bgt.n	25e <find+0xa2>
            proceed Display_Neighbour;
     258:	2004      	movs	r0, #4
     25a:	f001 f81b 	bl	1294 <proceed>
        }

        finish;

}
     25e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        finish;
     262:	2000      	movs	r0, #0
     264:	f001 b960 	b.w	1528 <kill>
}
     268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     26c:	f000 bf8a 	b.w	1184 <__pi_badstate>
     270:	20000540 	andcs	r0, r0, r0, asr #10
     274:	20000548 	andcs	r0, r0, r8, asr #10
     278:	20000b38 	andcs	r0, r0, r8, lsr fp
     27c:	20000b3c 	andcs	r0, r0, ip, lsr fp
     280:	20000b42 	andcs	r0, r0, r2, asr #22
     284:	20000630 	andcs	r0, r0, r0, lsr r6
     288:	0000014d 	andeq	r0, r0, sp, asr #2
     28c:	00004324 	andeq	r4, r0, r4, lsr #6
     290:	20000b48 	andcs	r0, r0, r8, asr #22
     294:	0000470e 	andeq	r4, r0, lr, lsl #14

00000298 <root>:
    }

    return YES;
}

fsm root {
     298:	b530      	push	{r4, r5, lr}
     29a:	b085      	sub	sp, #20
     29c:	2812      	cmp	r0, #18
     29e:	f200 8132 	bhi.w	506 <root+0x26e>
     2a2:	e8df f010 	tbh	[pc, r0, lsl #1]
     2a6:	003c0013 	eorseq	r0, ip, r3, lsl r0
     2aa:	0051004d 	subseq	r0, r1, sp, asr #32
     2ae:	00760072 	rsbseq	r0, r6, r2, ror r0
     2b2:	0082007e 	addeq	r0, r2, lr, ror r0
     2b6:	00b00092 	umlalseq	r0, r0, r2, r0	; <UNPREDICTABLE>
     2ba:	00c400b7 	strheq	r0, [r4], #7
     2be:	00e300d9 	ldrdeq	r0, [r3], #9	; <UNPREDICTABLE>
     2c2:	00ee00ea 	rsceq	r0, lr, sl, ror #1
     2c6:	00ff00fb 	ldrshteq	r0, [pc], #11
     2ca:	24000110 	strcs	r0, [r0], #-272	; 0xfffffef0
"Selection: ";

    char receiverId;

    state Initialize:
        recordCount = 0;
     2ce:	4b8f      	ldr	r3, [pc, #572]	; (50c <root+0x274>)

        nodeId = 1;
     2d0:	4a8f      	ldr	r2, [pc, #572]	; (510 <root+0x278>)
        recordCount = 0;
     2d2:	601c      	str	r4, [r3, #0]
        nodeId = 1;
     2d4:	2301      	movs	r3, #1
     2d6:	7013      	strb	r3, [r2, #0]
        groupId = 1;
     2d8:	4a8e      	ldr	r2, [pc, #568]	; (514 <root+0x27c>)

        messagePtr = (message *) umalloc(sizeof(message));
     2da:	201c      	movs	r0, #28
        groupId = 1;
     2dc:	8013      	strh	r3, [r2, #0]
        messagePtr = (message *) umalloc(sizeof(message));
     2de:	f001 f94b 	bl	1578 <__pi_malloc>
     2e2:	4b8d      	ldr	r3, [pc, #564]	; (518 <root+0x280>)

        // Set up cc1350 board
        phys_cc1350(0, MAX_PACKET_LENGTH);
     2e4:	21fa      	movs	r1, #250	; 0xfa
        messagePtr = (message *) umalloc(sizeof(message));
     2e6:	6018      	str	r0, [r3, #0]
        phys_cc1350(0, MAX_PACKET_LENGTH);
     2e8:	4620      	mov	r0, r4
     2ea:	f002 fa69 	bl	27c0 <phys_cc1350>

        // Load null plug in
        tcv_plug(0, &plug_null);
     2ee:	498b      	ldr	r1, [pc, #556]	; (51c <root+0x284>)
     2f0:	4620      	mov	r0, r4
     2f2:	f001 fb8f 	bl	1a14 <tcv_plug>

        // Open the session
        sfd = tcv_open(WNONE, 0, 0);
     2f6:	4622      	mov	r2, r4
     2f8:	4621      	mov	r1, r4
     2fa:	f64f 70ff 	movw	r0, #65535	; 0xffff
     2fe:	f001 fb29 	bl	1954 <tcv_open>
     302:	4d87      	ldr	r5, [pc, #540]	; (520 <root+0x288>)
		tcv_control(sfd, PHYSOPT_ON, NULL);
     304:	4622      	mov	r2, r4
     306:	2104      	movs	r1, #4
        sfd = tcv_open(WNONE, 0, 0);
     308:	6028      	str	r0, [r5, #0]
		tcv_control(sfd, PHYSOPT_ON, NULL);
     30a:	f001 fc09 	bl	1b20 <tcv_control>

        // Ensure session opened properly
		if (sfd < 0) {
     30e:	682b      	ldr	r3, [r5, #0]
     310:	42a3      	cmp	r3, r4
     312:	da04      	bge.n	31e <root+0x86>
			diag("Cannot open tcv interface");
     314:	4883      	ldr	r0, [pc, #524]	; (524 <root+0x28c>)
     316:	f001 f9a9 	bl	166c <diag>
			halt();
     31a:	f000 fe81 	bl	1020 <halt>
		}

    state Menu_Header:
        currentProtocol = IDLE;
     31e:	22ff      	movs	r2, #255	; 0xff
     320:	4b81      	ldr	r3, [pc, #516]	; (528 <root+0x290>)
        ser_outf(Menu_Header, "\r\nGroup %d Device #%d (%d/%d records)\r\n", groupId, nodeId, recordCount, MAX_RECORDS);
     322:	2001      	movs	r0, #1
        currentProtocol = IDLE;
     324:	701a      	strb	r2, [r3, #0]
        ser_outf(Menu_Header, "\r\nGroup %d Device #%d (%d/%d records)\r\n", groupId, nodeId, recordCount, MAX_RECORDS);
     326:	2328      	movs	r3, #40	; 0x28
     328:	9301      	str	r3, [sp, #4]
     32a:	4b78      	ldr	r3, [pc, #480]	; (50c <root+0x274>)
     32c:	4a79      	ldr	r2, [pc, #484]	; (514 <root+0x27c>)
     32e:	681b      	ldr	r3, [r3, #0]
     330:	497e      	ldr	r1, [pc, #504]	; (52c <root+0x294>)
     332:	9300      	str	r3, [sp, #0]
     334:	4b76      	ldr	r3, [pc, #472]	; (510 <root+0x278>)
     336:	f9b2 2000 	ldrsh.w	r2, [r2]
     33a:	781b      	ldrb	r3, [r3, #0]
     33c:	f001 fe36 	bl	1fac <ser_outf>
    
    state Options:
        ser_outf(Options, menu);
     340:	2002      	movs	r0, #2
     342:	497b      	ldr	r1, [pc, #492]	; (530 <root+0x298>)
     344:	f001 fe32 	bl	1fac <ser_outf>

    state Get_Choice:
        char choice;

        ser_inf(Get_Choice, "%c", &choice);
     348:	2003      	movs	r0, #3
     34a:	497a      	ldr	r1, [pc, #488]	; (534 <root+0x29c>)
     34c:	f10d 020f 	add.w	r2, sp, #15
     350:	f001 fe56 	bl	2000 <ser_inf>

        switch (choice)
     354:	f89d 300f 	ldrb.w	r3, [sp, #15]
     358:	2b53      	cmp	r3, #83	; 0x53
     35a:	d80f      	bhi.n	37c <root+0xe4>
     35c:	2b42      	cmp	r3, #66	; 0x42
     35e:	d911      	bls.n	384 <root+0xec>
     360:	3b43      	subs	r3, #67	; 0x43
     362:	2b10      	cmp	r3, #16
     364:	d80e      	bhi.n	384 <root+0xec>
     366:	e8df f003 	tbb	[pc, r3]
     36a:	404c4442 	submi	r4, ip, r2, asr #8
     36e:	0d0d0d3a 	stceq	13, cr0, [sp, #-232]	; 0xffffff18
     372:	3e0d0d0d 	cdpcc	13, 0, cr0, cr13, cr13, {0}
     376:	460d0d0d 	strmi	r0, [sp], -sp, lsl #26
     37a:	3b630048 	blcc	18c04a2 <__ccfg+0x18a04fa>
     37e:	b2da      	uxtb	r2, r3
     380:	2a10      	cmp	r2, #16
     382:	d9ee      	bls.n	362 <root+0xca>
            diag("Reset Local Storage");
            break;

        }
        
        proceed Menu_Header;
     384:	2001      	movs	r0, #1
     386:	f000 ff85 	bl	1294 <proceed>

// - - - - - - - - - - - Set Group ID - - - - - - - - - - - - //
    state Set_Group_ID:
        ser_outf(Set_Group_ID, "New Group ID: ");
     38a:	2004      	movs	r0, #4
     38c:	496a      	ldr	r1, [pc, #424]	; (538 <root+0x2a0>)
     38e:	f001 fe0d 	bl	1fac <ser_outf>
    state Get_Group_ID:
        ser_inf(Get_Group_ID, "%d", &groupId);
     392:	2005      	movs	r0, #5
     394:	4a5f      	ldr	r2, [pc, #380]	; (514 <root+0x27c>)
     396:	4969      	ldr	r1, [pc, #420]	; (53c <root+0x2a4>)
     398:	f001 fe32 	bl	2000 <ser_inf>

        proceed Menu_Header;
     39c:	2001      	movs	r0, #1
     39e:	f000 ff79 	bl	1294 <proceed>

// - - - - - - - - - - - Set Node ID - - - - - - - - - - - - //    
    state Set_Node_ID:
        ser_outf(Set_Node_ID, "New node ID (1-25):");
     3a2:	2006      	movs	r0, #6
     3a4:	4966      	ldr	r1, [pc, #408]	; (540 <root+0x2a8>)
     3a6:	f001 fe01 	bl	1fac <ser_outf>
    
    state Get_Node_ID:
        ser_inf(Get_Node_ID, "%d", &nodeId);
     3aa:	4c59      	ldr	r4, [pc, #356]	; (510 <root+0x278>)
     3ac:	2007      	movs	r0, #7
     3ae:	4622      	mov	r2, r4
     3b0:	4962      	ldr	r1, [pc, #392]	; (53c <root+0x2a4>)
     3b2:	f001 fe25 	bl	2000 <ser_inf>
    if (node < 1 || node > 25) {
     3b6:	7823      	ldrb	r3, [r4, #0]
     3b8:	3b01      	subs	r3, #1
     3ba:	2b18      	cmp	r3, #24
     3bc:	d902      	bls.n	3c4 <root+0x12c>

        if (!isValidNodeId(nodeId)) {
            proceed Set_Node_ID;
     3be:	2006      	movs	r0, #6
     3c0:	f000 ff68 	bl	1294 <proceed>
        }

        proceed Menu_Header;
     3c4:	2001      	movs	r0, #1
     3c6:	f000 ff65 	bl	1294 <proceed>

// - - - - - - - - - - - - Find Neighbour - - - - - - - - - - - - - //
    state Find_Neighbours:
        call find(Menu_Header);
     3ca:	2100      	movs	r1, #0
     3cc:	485d      	ldr	r0, [pc, #372]	; (544 <root+0x2ac>)
     3ce:	f001 f927 	bl	1620 <__pi_fork>
     3d2:	2101      	movs	r1, #1
     3d4:	f000 ff9c 	bl	1310 <__pi_join>
     3d8:	b1a8      	cbz	r0, 406 <root+0x16e>
     3da:	f000 fcf5 	bl	dc8 <__pi_release>
            proceed Set_Group_ID;
     3de:	2004      	movs	r0, #4
            proceed Set_Node_ID;
     3e0:	f000 ff58 	bl	1294 <proceed>
            break;
     3e4:	e7ce      	b.n	384 <root+0xec>
            proceed Set_Node_ID;
     3e6:	2006      	movs	r0, #6
     3e8:	e7fa      	b.n	3e0 <root+0x148>
            proceed Find_Neighbours;
     3ea:	2008      	movs	r0, #8
     3ec:	e7f8      	b.n	3e0 <root+0x148>
            proceed Create_Record;
     3ee:	2009      	movs	r0, #9
     3f0:	e7f6      	b.n	3e0 <root+0x148>
            proceed Delete_Record;
     3f2:	200c      	movs	r0, #12
     3f4:	e7f4      	b.n	3e0 <root+0x148>
            proceed Retrieve_Record;
     3f6:	200d      	movs	r0, #13
     3f8:	e7f2      	b.n	3e0 <root+0x148>
            diag("Show Local Records");
     3fa:	4853      	ldr	r0, [pc, #332]	; (548 <root+0x2b0>)
            diag("Reset Local Storage");
     3fc:	f001 f936 	bl	166c <diag>
            break;
     400:	e7c0      	b.n	384 <root+0xec>
            diag("Reset Local Storage");
     402:	4852      	ldr	r0, [pc, #328]	; (54c <root+0x2b4>)
     404:	e7fa      	b.n	3fc <root+0x164>
        // receiverId = 0;
        // proceed Transmit_Message;

// - - - - - - - - - - - - Create Recrods - - - - - - - - - - - - - //    
    state Create_Record:
        currentProtocol = CREATE_RECORD;
     406:	2202      	movs	r2, #2
     408:	4b47      	ldr	r3, [pc, #284]	; (528 <root+0x290>)
        ser_outf(Create_Record, "Receiver node ID (1-25):");
     40a:	2009      	movs	r0, #9
     40c:	4950      	ldr	r1, [pc, #320]	; (550 <root+0x2b8>)
        currentProtocol = CREATE_RECORD;
     40e:	701a      	strb	r2, [r3, #0]
        ser_outf(Create_Record, "Receiver node ID (1-25):");
     410:	f001 fdcc 	bl	1fac <ser_outf>
    
    state Get_Receiver_Node:
        ser_inf(Get_Receiver_Node, "%d", &receiverId);
     414:	4c4f      	ldr	r4, [pc, #316]	; (554 <root+0x2bc>)
     416:	200a      	movs	r0, #10
     418:	4622      	mov	r2, r4
     41a:	4948      	ldr	r1, [pc, #288]	; (53c <root+0x2a4>)
     41c:	f001 fdf0 	bl	2000 <ser_inf>
    if (node < 1 || node > 25) {
     420:	7823      	ldrb	r3, [r4, #0]
     422:	3b01      	subs	r3, #1
     424:	2b18      	cmp	r3, #24
     426:	d902      	bls.n	42e <root+0x196>

        if(!isValidNodeId(receiverId)) {
            proceed Create_Record;
     428:	2009      	movs	r0, #9
     42a:	f000 ff33 	bl	1294 <proceed>
        }

    state Get_Message:
        ser_in(Get_Message, messagePtr->messageRecord, RECORD_LENGTH);
     42e:	4c3a      	ldr	r4, [pc, #232]	; (518 <root+0x280>)
     430:	2214      	movs	r2, #20
     432:	6821      	ldr	r1, [r4, #0]
     434:	200b      	movs	r0, #11
     436:	3106      	adds	r1, #6
     438:	f001 fd7c 	bl	1f34 <ser_in>

        if(strlen(messagePtr->messageRecord) >= RECORD_LENGTH) {
     43c:	6820      	ldr	r0, [r4, #0]
     43e:	3006      	adds	r0, #6
     440:	f000 ffa6 	bl	1390 <__pi_strlen>
     444:	2813      	cmp	r0, #19
            // ensures that the last byte in the payload message is a null character
            messagePtr->messageRecord[RECORD_LENGTH - 1] = '/0';
     446:	bfc4      	itt	gt
     448:	2230      	movgt	r2, #48	; 0x30
     44a:	6823      	ldrgt	r3, [r4, #0]
        }

        proceed Transmit_Message;
     44c:	f04f 0012 	mov.w	r0, #18
            messagePtr->messageRecord[RECORD_LENGTH - 1] = '/0';
     450:	bfc8      	it	gt
     452:	765a      	strbgt	r2, [r3, #25]
        proceed Transmit_Message;
     454:	f000 ff1e 	bl	1294 <proceed>

// - - - - - - - - Deleting and Retreiving Records - - - - - - - - //

    state Delete_Record:
        currentProtocol = DELETE_RECORD;
     458:	2203      	movs	r2, #3
     45a:	4b33      	ldr	r3, [pc, #204]	; (528 <root+0x290>)
        ser_outf(Retrieve_Record, "Delete Record from Neighbour:\n\r");
     45c:	200d      	movs	r0, #13
     45e:	493e      	ldr	r1, [pc, #248]	; (558 <root+0x2c0>)
        currentProtocol = DELETE_RECORD;
     460:	701a      	strb	r2, [r3, #0]
        ser_outf(Retrieve_Record, "Delete Record from Neighbour:\n\r");
     462:	f001 fda3 	bl	1fac <ser_outf>
        proceed Get_Receiving_Node;
     466:	200f      	movs	r0, #15
     468:	f000 ff14 	bl	1294 <proceed>

    state Retrieve_Record:
        currentProtocol = RETRIEVE_RECORD;
     46c:	2204      	movs	r2, #4
     46e:	4b2e      	ldr	r3, [pc, #184]	; (528 <root+0x290>)
        ser_outf(Retrieve_Record, "Retrieve Record from Neighbour:\n\r");
     470:	200d      	movs	r0, #13
     472:	493a      	ldr	r1, [pc, #232]	; (55c <root+0x2c4>)
        currentProtocol = RETRIEVE_RECORD;
     474:	701a      	strb	r2, [r3, #0]
        ser_outf(Retrieve_Record, "Retrieve Record from Neighbour:\n\r");
     476:	f001 fd99 	bl	1fac <ser_outf>

    state Prompt_Recieving_Node:
        ser_outf(Prompt_Recieving_Node, "Neighbour node ID (1-25):");
     47a:	200e      	movs	r0, #14
     47c:	4938      	ldr	r1, [pc, #224]	; (560 <root+0x2c8>)
     47e:	f001 fd95 	bl	1fac <ser_outf>
    
    state Get_Receiving_Node:
        ser_inf(Get_Receiving_Node, "%d", &receiverId);
     482:	4c34      	ldr	r4, [pc, #208]	; (554 <root+0x2bc>)
     484:	200f      	movs	r0, #15
     486:	4622      	mov	r2, r4
     488:	492c      	ldr	r1, [pc, #176]	; (53c <root+0x2a4>)
     48a:	f001 fdb9 	bl	2000 <ser_inf>
    if (node < 1 || node > 25) {
     48e:	7823      	ldrb	r3, [r4, #0]
     490:	3b01      	subs	r3, #1
     492:	2b18      	cmp	r3, #24
     494:	d902      	bls.n	49c <root+0x204>

        if(!isValidNodeId(receiverId)) {
            proceed Prompt_Recieving_Node;
     496:	200e      	movs	r0, #14
     498:	f000 fefc 	bl	1294 <proceed>
        }
    
    state Prompt_Record_Index:
        ser_outf(Prompt_Record_Index, "Record index:");
     49c:	2010      	movs	r0, #16
     49e:	4931      	ldr	r1, [pc, #196]	; (564 <root+0x2cc>)
     4a0:	f001 fd84 	bl	1fac <ser_outf>
    
    state Get_Record_Index:
        char desiredRecordIndex = -1;
     4a4:	23ff      	movs	r3, #255	; 0xff
        ser_inf(Get_Record_Index, "%d", &desiredRecordIndex);
     4a6:	f10d 020f 	add.w	r2, sp, #15
     4aa:	2011      	movs	r0, #17
     4ac:	4923      	ldr	r1, [pc, #140]	; (53c <root+0x2a4>)
        char desiredRecordIndex = -1;
     4ae:	f88d 300f 	strb.w	r3, [sp, #15]
        ser_inf(Get_Record_Index, "%d", &desiredRecordIndex);
     4b2:	f001 fda5 	bl	2000 <ser_inf>
        messagePtr->recordIndex = desiredRecordIndex;
     4b6:	4b18      	ldr	r3, [pc, #96]	; (518 <root+0x280>)
     4b8:	f89d 200f 	ldrb.w	r2, [sp, #15]
     4bc:	681b      	ldr	r3, [r3, #0]

        proceed Transmit_Message;
     4be:	2012      	movs	r0, #18
        messagePtr->recordIndex = desiredRecordIndex;
     4c0:	769a      	strb	r2, [r3, #26]
        proceed Transmit_Message;
     4c2:	f000 fee7 	bl	1294 <proceed>

// - - - - - - Assemble Common Parts and Send Message - - - - - - - //
    state Transmit_Message:
        messagePtr -> senderGroupId = groupId;
     4c6:	4c14      	ldr	r4, [pc, #80]	; (518 <root+0x280>)
     4c8:	4a12      	ldr	r2, [pc, #72]	; (514 <root+0x27c>)
     4ca:	6823      	ldr	r3, [r4, #0]
     4cc:	f9b2 2000 	ldrsh.w	r2, [r2]
     4d0:	801a      	strh	r2, [r3, #0]
        messagePtr -> messageType = currentProtocol;
     4d2:	4a15      	ldr	r2, [pc, #84]	; (528 <root+0x290>)
     4d4:	6823      	ldr	r3, [r4, #0]
     4d6:	7812      	ldrb	r2, [r2, #0]
     4d8:	709a      	strb	r2, [r3, #2]
        messagePtr -> requestNumber = randomNumber();
     4da:	6825      	ldr	r5, [r4, #0]
     4dc:	f7ff fe62 	bl	1a4 <randomNumber>
        messagePtr -> senderId = nodeId;
     4e0:	4b0b      	ldr	r3, [pc, #44]	; (510 <root+0x278>)
        messagePtr -> requestNumber = randomNumber();
     4e2:	70e8      	strb	r0, [r5, #3]
        messagePtr -> senderId = nodeId;
     4e4:	6821      	ldr	r1, [r4, #0]
     4e6:	781b      	ldrb	r3, [r3, #0]
        messagePtr -> destinationId = receiverId;

        call transmitter(messagePtr, Menu_Header);
     4e8:	481f      	ldr	r0, [pc, #124]	; (568 <root+0x2d0>)
        messagePtr -> senderId = nodeId;
     4ea:	710b      	strb	r3, [r1, #4]
        messagePtr -> destinationId = receiverId;
     4ec:	4b19      	ldr	r3, [pc, #100]	; (554 <root+0x2bc>)
     4ee:	781b      	ldrb	r3, [r3, #0]
     4f0:	714b      	strb	r3, [r1, #5]
        call transmitter(messagePtr, Menu_Header);
     4f2:	f001 f895 	bl	1620 <__pi_fork>
     4f6:	2101      	movs	r1, #1
     4f8:	f000 ff0a 	bl	1310 <__pi_join>
     4fc:	2800      	cmp	r0, #0
     4fe:	f47f af6c 	bne.w	3da <root+0x142>
     502:	b005      	add	sp, #20
     504:	bd30      	pop	{r4, r5, pc}
     506:	f000 fe3d 	bl	1184 <__pi_badstate>
     50a:	e7fa      	b.n	502 <root+0x26a>
     50c:	20000b44 	andcs	r0, r0, r4, asr #22
     510:	20000630 	andcs	r0, r0, r0, lsr r6
     514:	20000b42 	andcs	r0, r0, r2, asr #22
     518:	20000b3c 	andcs	r0, r0, ip, lsr fp
     51c:	00005088 	andeq	r5, r0, r8, lsl #1
     520:	20000000 	andcs	r0, r0, r0
     524:	00004330 	andeq	r4, r0, r0, lsr r3
     528:	20000b40 	andcs	r0, r0, r0, asr #22
     52c:	0000434a 	andeq	r4, r0, sl, asr #6
     530:	00004372 	andeq	r4, r0, r2, ror r3
     534:	00004437 	andeq	r4, r0, r7, lsr r4
     538:	00004461 	andeq	r4, r0, r1, ror #8
     53c:	0000470f 	andeq	r4, r0, pc, lsl #14
     540:	00004470 	andeq	r4, r0, r0, ror r4
     544:	000001bd 			; <UNDEFINED> instruction: 0x000001bd
     548:	0000443a 	andeq	r4, r0, sl, lsr r4
     54c:	0000444d 	andeq	r4, r0, sp, asr #8
     550:	00004484 	andeq	r4, r0, r4, lsl #9
     554:	20000544 	andcs	r0, r0, r4, asr #10
     558:	0000449d 	muleq	r0, sp, r4
     55c:	000044bd 			; <UNDEFINED> instruction: 0x000044bd
     560:	000044df 	ldrdeq	r4, [r0], -pc	; <UNPREDICTABLE>
     564:	000044f9 	strdeq	r4, [r0], -r9
     568:	0000014d 	andeq	r0, r0, sp, asr #2

0000056c <devinit_uart>:
			/* No return */
			return 0;
	}
}

static void devinit_uart (int devnum) {
     56c:	4601      	mov	r1, r0

	adddevfunc (ioreq_uart_a, devnum);
     56e:	4801      	ldr	r0, [pc, #4]	; (574 <devinit_uart+0x8>)
     570:	f000 bf2e 	b.w	13d0 <adddevfunc>
     574:	000008f9 	strdeq	r0, [r0], -r9

00000578 <udelay>:
void udelay (volatile word n) {
     578:	b082      	sub	sp, #8
     57a:	f8ad 0006 	strh.w	r0, [sp, #6]
	while (n) {
     57e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     582:	b29b      	uxth	r3, r3
     584:	b90b      	cbnz	r3, 58a <udelay+0x12>
}
     586:	b002      	add	sp, #8
     588:	4770      	bx	lr
		_gdelay (__USEC_DELAY);
     58a:	2304      	movs	r3, #4
	while (n--);
     58c:	461a      	mov	r2, r3
     58e:	3b01      	subs	r3, #1
     590:	b29b      	uxth	r3, r3
     592:	2a00      	cmp	r2, #0
     594:	d1fa      	bne.n	58c <udelay+0x14>
		n--;
     596:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     59a:	3b01      	subs	r3, #1
     59c:	b29b      	uxth	r3, r3
     59e:	f8ad 3006 	strh.w	r3, [sp, #6]
     5a2:	e7ec      	b.n	57e <udelay+0x6>

000005a4 <mdelay>:
void mdelay (volatile word n) {
     5a4:	b507      	push	{r0, r1, r2, lr}
     5a6:	f8ad 0006 	strh.w	r0, [sp, #6]
	while (n) {
     5aa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     5ae:	b29b      	uxth	r3, r3
     5b0:	b913      	cbnz	r3, 5b8 <mdelay+0x14>
}
     5b2:	b003      	add	sp, #12
     5b4:	f85d fb04 	ldr.w	pc, [sp], #4
		udelay (999);
     5b8:	f240 30e7 	movw	r0, #999	; 0x3e7
     5bc:	f7ff ffdc 	bl	578 <udelay>
		n--;
     5c0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     5c4:	3b01      	subs	r3, #1
     5c6:	b29b      	uxth	r3, r3
     5c8:	f8ad 3006 	strh.w	r3, [sp, #6]
     5cc:	e7ed      	b.n	5aa <mdelay+0x6>
	...

000005d0 <__pi_ondomain>:
void __pi_ondomain (lword d) {
     5d0:	b538      	push	{r3, r4, r5, lr}
	if (d & PRCM_DOMAIN_RFCORE) {
     5d2:	07c3      	lsls	r3, r0, #31
void __pi_ondomain (lword d) {
     5d4:	4604      	mov	r4, r0
	if (d & PRCM_DOMAIN_RFCORE) {
     5d6:	d505      	bpl.n	5e4 <__pi_ondomain+0x14>
		if (__pi_systat.effpdm > 1)
     5d8:	4b0a      	ldr	r3, [pc, #40]	; (604 <__pi_ondomain+0x34>)
     5da:	78da      	ldrb	r2, [r3, #3]
     5dc:	2a01      	cmp	r2, #1
			__pi_systat.effpdm = 1;
     5de:	bf84      	itt	hi
     5e0:	2201      	movhi	r2, #1
     5e2:	70da      	strbhi	r2, [r3, #3]
	PRCMPowerDomainOn (d);
     5e4:	4d08      	ldr	r5, [pc, #32]	; (608 <__pi_ondomain+0x38>)
     5e6:	4620      	mov	r0, r4
     5e8:	682b      	ldr	r3, [r5, #0]
     5ea:	695b      	ldr	r3, [r3, #20]
     5ec:	4798      	blx	r3
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     5ee:	682b      	ldr	r3, [r5, #0]
     5f0:	4620      	mov	r0, r4
     5f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     5f4:	4798      	blx	r3
     5f6:	2801      	cmp	r0, #1
     5f8:	d1f9      	bne.n	5ee <__pi_ondomain+0x1e>
	__pi_systat.ondmns |= d;
     5fa:	4b02      	ldr	r3, [pc, #8]	; (604 <__pi_ondomain+0x34>)
     5fc:	6858      	ldr	r0, [r3, #4]
     5fe:	4304      	orrs	r4, r0
     600:	605c      	str	r4, [r3, #4]
}
     602:	bd38      	pop	{r3, r4, r5, pc}
     604:	20000b7c 	andcs	r0, r0, ip, ror fp
     608:	100001b8 			; <UNDEFINED> instruction: 0x100001b8

0000060c <__pi_offdomain>:
void __pi_offdomain (lword d) {
     60c:	b538      	push	{r3, r4, r5, lr}
	PRCMPowerDomainOff (d);
     60e:	4d0d      	ldr	r5, [pc, #52]	; (644 <__pi_offdomain+0x38>)
void __pi_offdomain (lword d) {
     610:	4604      	mov	r4, r0
	PRCMPowerDomainOff (d);
     612:	682b      	ldr	r3, [r5, #0]
     614:	699b      	ldr	r3, [r3, #24]
     616:	4798      	blx	r3
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     618:	682b      	ldr	r3, [r5, #0]
     61a:	4620      	mov	r0, r4
     61c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     61e:	4798      	blx	r3
     620:	2802      	cmp	r0, #2
     622:	d1f9      	bne.n	618 <__pi_offdomain+0xc>
	if (d & PRCM_DOMAIN_RFCORE) {
     624:	f014 0f01 	tst.w	r4, #1
     628:	4b07      	ldr	r3, [pc, #28]	; (648 <__pi_offdomain+0x3c>)
     62a:	d006      	beq.n	63a <__pi_offdomain+0x2e>
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     62c:	7899      	ldrb	r1, [r3, #2]
     62e:	78da      	ldrb	r2, [r3, #3]
     630:	4291      	cmp	r1, r2
			__pi_systat.effpdm = __pi_systat.reqpdm;
     632:	bf82      	ittt	hi
     634:	789a      	ldrbhi	r2, [r3, #2]
     636:	b2d2      	uxtbhi	r2, r2
     638:	70da      	strbhi	r2, [r3, #3]
	__pi_systat.ondmns &= ~d;
     63a:	6858      	ldr	r0, [r3, #4]
     63c:	ea20 0404 	bic.w	r4, r0, r4
     640:	605c      	str	r4, [r3, #4]
}
     642:	bd38      	pop	{r3, r4, r5, pc}
     644:	100001b8 			; <UNDEFINED> instruction: 0x100001b8
     648:	20000b7c 	andcs	r0, r0, ip, ror fp

0000064c <__pi_syserror>:
void __pi_syserror (word ec, const char *m) {
     64c:	460a      	mov	r2, r1
     64e:	b580      	push	{r7, lr}
	diag ("SYSERR: %x, %s", ec, m);
     650:	4601      	mov	r1, r0
     652:	480f      	ldr	r0, [pc, #60]	; (690 <__pi_syserror+0x44>)
     654:	f001 f80a 	bl	166c <diag>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     658:	b672      	cpsid	i
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Set the specified DIO.
    //
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     65a:	2540      	movs	r5, #64	; 0x40
     65c:	462f      	mov	r7, r5
     65e:	4e0d      	ldr	r6, [pc, #52]	; (694 <__pi_syserror+0x48>)
     660:	2480      	movs	r4, #128	; 0x80
		all_leds_blink;
     662:	490d      	ldr	r1, [pc, #52]	; (698 <__pi_syserror+0x4c>)
     664:	6037      	str	r7, [r6, #0]
     666:	6034      	str	r4, [r6, #0]
     668:	780b      	ldrb	r3, [r1, #0]
     66a:	780b      	ldrb	r3, [r1, #0]
     66c:	20c8      	movs	r0, #200	; 0xc8
     66e:	f36f 1307 	bfc	r3, #4, #4
     672:	700b      	strb	r3, [r1, #0]
     674:	f7ff ff96 	bl	5a4 <mdelay>
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Clear the specified DIO.
    //
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     678:	4b08      	ldr	r3, [pc, #32]	; (69c <__pi_syserror+0x50>)
     67a:	20c8      	movs	r0, #200	; 0xc8
     67c:	601d      	str	r5, [r3, #0]
     67e:	601c      	str	r4, [r3, #0]
     680:	780b      	ldrb	r3, [r1, #0]
     682:	780b      	ldrb	r3, [r1, #0]
     684:	f36f 1307 	bfc	r3, #4, #4
     688:	700b      	strb	r3, [r1, #0]
     68a:	f7ff ff8b 	bl	5a4 <mdelay>
	while (1) {
     68e:	e7e7      	b.n	660 <__pi_syserror+0x14>
     690:	0000450d 	andeq	r4, r0, sp, lsl #10
     694:	40022090 	mulmi	r2, r0, r0
     698:	20000b7c 	andcs	r0, r0, ip, ror fp
     69c:	400220a0 	andmi	r2, r2, r0, lsr #1

000006a0 <tci_run_delay_timer>:
void tci_run_delay_timer () {
     6a0:	b510      	push	{r4, lr}
	setdel = __pi_mintk - __pi_old;
     6a2:	4b0a      	ldr	r3, [pc, #40]	; (6cc <tci_run_delay_timer+0x2c>)
     6a4:	881c      	ldrh	r4, [r3, #0]
     6a6:	4b0a      	ldr	r3, [pc, #40]	; (6d0 <tci_run_delay_timer+0x30>)
     6a8:	8818      	ldrh	r0, [r3, #0]
     6aa:	4b0a      	ldr	r3, [pc, #40]	; (6d4 <tci_run_delay_timer+0x34>)
     6ac:	1b00      	subs	r0, r0, r4
     6ae:	b284      	uxth	r4, r0
     6b0:	801c      	strh	r4, [r3, #0]
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     6b2:	f002 fda9 	bl	3208 <NOROM_AONRTCCurrent64BitValueGet>
	sti_tim;
     6b6:	2201      	movs	r2, #1
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     6b8:	0c00      	lsrs	r0, r0, #16
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     6ba:	4b07      	ldr	r3, [pc, #28]	; (6d8 <tci_run_delay_timer+0x38>)
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     6bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
     6c0:	eb00 1084 	add.w	r0, r0, r4, lsl #6
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     6c4:	6018      	str	r0, [r3, #0]
	sti_tim;
     6c6:	4b05      	ldr	r3, [pc, #20]	; (6dc <tci_run_delay_timer+0x3c>)
     6c8:	601a      	str	r2, [r3, #0]
}
     6ca:	bd10      	pop	{r4, pc}
     6cc:	20000b7a 	andcs	r0, r0, sl, ror fp
     6d0:	20000b78 	andcs	r0, r0, r8, ror fp
     6d4:	2000054c 	andcs	r0, r0, ip, asr #10
     6d8:	40092018 	andmi	r2, r9, r8, lsl r0
     6dc:	43240280 			; <UNDEFINED> instruction: 0x43240280

000006e0 <tci_run_auxiliary_timer>:
	cli_aux;
     6e0:	2300      	movs	r3, #0
void tci_run_auxiliary_timer () {
     6e2:	b510      	push	{r4, lr}
	cli_aux;
     6e4:	4c06      	ldr	r4, [pc, #24]	; (700 <tci_run_auxiliary_timer+0x20>)
     6e6:	6023      	str	r3, [r4, #0]
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     6e8:	f002 fd8e 	bl	3208 <NOROM_AONRTCCurrent64BitValueGet>
     6ec:	0c00      	lsrs	r0, r0, #16
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
     6ee:	4b05      	ldr	r3, [pc, #20]	; (704 <tci_run_auxiliary_timer+0x24>)
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     6f0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
     6f4:	3040      	adds	r0, #64	; 0x40
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
     6f6:	6018      	str	r0, [r3, #0]
	sti_aux;
     6f8:	2301      	movs	r3, #1
     6fa:	6023      	str	r3, [r4, #0]
}
     6fc:	bd10      	pop	{r4, pc}
     6fe:	bf00      	nop
     700:	432402c0 			; <UNDEFINED> instruction: 0x432402c0
     704:	40092020 	andmi	r2, r9, r0, lsr #32

00000708 <AONRTCIntHandler>:
void AONRTCIntHandler () {
     708:	b510      	push	{r4, lr}
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     70a:	4b3b      	ldr	r3, [pc, #236]	; (7f8 <AONRTCIntHandler+0xf0>)
     70c:	6818      	ldr	r0, [r3, #0]
     70e:	f000 1201 	and.w	r2, r0, #65537	; 0x10001
	if (events & AON_RTC_EVFLAGS_CH2) {
     712:	03c4      	lsls	r4, r0, #15
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     714:	601a      	str	r2, [r3, #0]
	if (events & AON_RTC_EVFLAGS_CH2) {
     716:	d542      	bpl.n	79e <AONRTCIntHandler+0x96>
		if (__pi_utims [0] == 0)
     718:	4b38      	ldr	r3, [pc, #224]	; (7fc <AONRTCIntHandler+0xf4>)
     71a:	6819      	ldr	r1, [r3, #0]
     71c:	2900      	cmp	r1, #0
     71e:	d053      	beq.n	7c8 <AONRTCIntHandler+0xc0>
		if (*(__pi_utims [0])) {
     720:	880a      	ldrh	r2, [r1, #0]
     722:	2a00      	cmp	r2, #0
     724:	d04e      	beq.n	7c4 <AONRTCIntHandler+0xbc>
			(*(__pi_utims [0]))--;
     726:	3a01      	subs	r2, #1
     728:	800a      	strh	r2, [r1, #0]
			aux_timer_inactive = 0;
     72a:	2200      	movs	r2, #0
		if (__pi_utims [1] == 0)
     72c:	685c      	ldr	r4, [r3, #4]
     72e:	b194      	cbz	r4, 756 <AONRTCIntHandler+0x4e>
		if (*(__pi_utims [1])) {
     730:	8821      	ldrh	r1, [r4, #0]
     732:	b111      	cbz	r1, 73a <AONRTCIntHandler+0x32>
			aux_timer_inactive = 0;
     734:	2200      	movs	r2, #0
			(*(__pi_utims [1]))--;
     736:	3901      	subs	r1, #1
     738:	8021      	strh	r1, [r4, #0]
		if (__pi_utims [2] == 0)
     73a:	689c      	ldr	r4, [r3, #8]
     73c:	b15c      	cbz	r4, 756 <AONRTCIntHandler+0x4e>
		if (*(__pi_utims [2])) {
     73e:	8821      	ldrh	r1, [r4, #0]
     740:	b111      	cbz	r1, 748 <AONRTCIntHandler+0x40>
			aux_timer_inactive = 0;
     742:	2200      	movs	r2, #0
			(*(__pi_utims [2]))--;
     744:	3901      	subs	r1, #1
     746:	8021      	strh	r1, [r4, #0]
		if (__pi_utims [3] != 0) {
     748:	68d9      	ldr	r1, [r3, #12]
     74a:	b121      	cbz	r1, 756 <AONRTCIntHandler+0x4e>
			if (*(__pi_utims [3])) {
     74c:	880b      	ldrh	r3, [r1, #0]
     74e:	b113      	cbz	r3, 756 <AONRTCIntHandler+0x4e>
				aux_timer_inactive = 0;
     750:	2200      	movs	r2, #0
				(*(__pi_utims [3]))--;
     752:	3b01      	subs	r3, #1
     754:	800b      	strh	r3, [r1, #0]
/* ==================================================================== */
/* Copyright (C) Olsonet Communications, 2002 - 2006                    */
/* All rights reserved.                                                 */
/* ==================================================================== */

	if (__pi_systat.ledsts) {
     756:	4b2a      	ldr	r3, [pc, #168]	; (800 <AONRTCIntHandler+0xf8>)
     758:	7819      	ldrb	r1, [r3, #0]
     75a:	0909      	lsrs	r1, r1, #4
     75c:	d047      	beq.n	7ee <AONRTCIntHandler+0xe6>
		// Some leds are supposed to blink
		if (__pi_systat.ledblc++ == 0) {
     75e:	7859      	ldrb	r1, [r3, #1]
     760:	1c4a      	adds	r2, r1, #1
     762:	b2d2      	uxtb	r2, r2
     764:	705a      	strb	r2, [r3, #1]
     766:	b9d1      	cbnz	r1, 79e <AONRTCIntHandler+0x96>
			if (__pi_systat.ledblk) {
     768:	781a      	ldrb	r2, [r3, #0]
     76a:	f012 0f08 	tst.w	r2, #8
				if (__pi_systat.ledsts & 0x1)
     76e:	781a      	ldrb	r2, [r3, #0]
			if (__pi_systat.ledblk) {
     770:	d02c      	beq.n	7cc <AONRTCIntHandler+0xc4>
				if (__pi_systat.ledsts & 0x1)
     772:	06d1      	lsls	r1, r2, #27
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     774:	bf42      	ittt	mi
     776:	2140      	movmi	r1, #64	; 0x40
     778:	4a22      	ldrmi	r2, [pc, #136]	; (804 <AONRTCIntHandler+0xfc>)
     77a:	6011      	strmi	r1, [r2, #0]
					LED0_ON;
				if (__pi_systat.ledsts & 0x2)
     77c:	781a      	ldrb	r2, [r3, #0]
     77e:	0692      	lsls	r2, r2, #26
     780:	bf42      	ittt	mi
     782:	2180      	movmi	r1, #128	; 0x80
     784:	4a1f      	ldrmi	r2, [pc, #124]	; (804 <AONRTCIntHandler+0xfc>)
     786:	6011      	strmi	r1, [r2, #0]
					LED1_ON;
				if (__pi_systat.ledsts & 0x4)
     788:	781a      	ldrb	r2, [r3, #0]
					LED2_ON;
				if (__pi_systat.ledsts & 0x8)
     78a:	781a      	ldrb	r2, [r3, #0]
					LED3_ON;
				__pi_systat.ledblk = 0;
     78c:	781a      	ldrb	r2, [r3, #0]
     78e:	f36f 02c3 	bfc	r2, #3, #1
					LED1_OFF;
				if (__pi_systat.ledsts & 0x4)
					LED2_OFF;
				if (__pi_systat.ledsts & 0x8)
					LED3_OFF;
				__pi_systat.ledblk = 1;
     792:	701a      	strb	r2, [r3, #0]
			}
			if (__pi_systat.fstblk)
     794:	781a      	ldrb	r2, [r3, #0]
     796:	0752      	lsls	r2, r2, #29
     798:	d501      	bpl.n	79e <AONRTCIntHandler+0x96>
				__pi_systat.ledblc = 200;
     79a:	22c8      	movs	r2, #200	; 0xc8
     79c:	705a      	strb	r2, [r3, #1]
	if (events & AON_RTC_EVFLAGS_CH0) {
     79e:	07c3      	lsls	r3, r0, #31
     7a0:	d50f      	bpl.n	7c2 <AONRTCIntHandler+0xba>
		cli_tim;
     7a2:	2100      	movs	r1, #0
     7a4:	4b18      	ldr	r3, [pc, #96]	; (808 <AONRTCIntHandler+0x100>)
		__pi_new += setdel;
     7a6:	4a19      	ldr	r2, [pc, #100]	; (80c <AONRTCIntHandler+0x104>)
     7a8:	4819      	ldr	r0, [pc, #100]	; (810 <AONRTCIntHandler+0x108>)
		cli_tim;
     7aa:	6019      	str	r1, [r3, #0]
		__pi_new += setdel;
     7ac:	8803      	ldrh	r3, [r0, #0]
     7ae:	8814      	ldrh	r4, [r2, #0]
		setdel = 0;
     7b0:	8011      	strh	r1, [r2, #0]
		__pi_new += setdel;
     7b2:	4423      	add	r3, r4
		RISE_N_SHINE;
     7b4:	4a12      	ldr	r2, [pc, #72]	; (800 <AONRTCIntHandler+0xf8>)
		__pi_new += setdel;
     7b6:	b29b      	uxth	r3, r3
     7b8:	8003      	strh	r3, [r0, #0]
		RISE_N_SHINE;
     7ba:	7813      	ldrb	r3, [r2, #0]
     7bc:	f043 0302 	orr.w	r3, r3, #2
     7c0:	7013      	strb	r3, [r2, #0]
}
     7c2:	bd10      	pop	{r4, pc}
		aux_timer_inactive = 1;
     7c4:	2201      	movs	r2, #1
     7c6:	e7b1      	b.n	72c <AONRTCIntHandler+0x24>
     7c8:	2201      	movs	r2, #1
     7ca:	e7c4      	b.n	756 <AONRTCIntHandler+0x4e>
				if (__pi_systat.ledsts & 0x1)
     7cc:	06d4      	lsls	r4, r2, #27
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     7ce:	bf42      	ittt	mi
     7d0:	2140      	movmi	r1, #64	; 0x40
     7d2:	4a10      	ldrmi	r2, [pc, #64]	; (814 <AONRTCIntHandler+0x10c>)
     7d4:	6011      	strmi	r1, [r2, #0]
				if (__pi_systat.ledsts & 0x2)
     7d6:	781a      	ldrb	r2, [r3, #0]
     7d8:	0691      	lsls	r1, r2, #26
     7da:	bf42      	ittt	mi
     7dc:	2180      	movmi	r1, #128	; 0x80
     7de:	4a0d      	ldrmi	r2, [pc, #52]	; (814 <AONRTCIntHandler+0x10c>)
     7e0:	6011      	strmi	r1, [r2, #0]
				if (__pi_systat.ledsts & 0x4)
     7e2:	781a      	ldrb	r2, [r3, #0]
				if (__pi_systat.ledsts & 0x8)
     7e4:	781a      	ldrb	r2, [r3, #0]
				__pi_systat.ledblk = 1;
     7e6:	781a      	ldrb	r2, [r3, #0]
     7e8:	f042 0208 	orr.w	r2, r2, #8
     7ec:	e7d1      	b.n	792 <AONRTCIntHandler+0x8a>
		if (aux_timer_inactive) {
     7ee:	2a00      	cmp	r2, #0
     7f0:	d0d5      	beq.n	79e <AONRTCIntHandler+0x96>
			cli_aux;
     7f2:	4b09      	ldr	r3, [pc, #36]	; (818 <AONRTCIntHandler+0x110>)
     7f4:	6019      	str	r1, [r3, #0]
     7f6:	e7d2      	b.n	79e <AONRTCIntHandler+0x96>
     7f8:	40092004 	andmi	r2, r9, r4
     7fc:	20000b88 	andcs	r0, r0, r8, lsl #23
     800:	20000b7c 	andcs	r0, r0, ip, ror fp
     804:	40022090 	mulmi	r2, r0, r0
     808:	43240280 			; <UNDEFINED> instruction: 0x43240280
     80c:	2000054c 	andcs	r0, r0, ip, asr #10
     810:	20000b84 	andcs	r0, r0, r4, lsl #23
     814:	400220a0 	andmi	r2, r2, r0, lsr #1
     818:	432402c0 			; <UNDEFINED> instruction: 0x432402c0

0000081c <tci_update_delay_ticks>:
word tci_update_delay_ticks (Boolean force) {
     81c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	cli_tim;
     81e:	2600      	movs	r6, #0
     820:	4b0e      	ldr	r3, [pc, #56]	; (85c <tci_update_delay_ticks+0x40>)
	if (setdel) {
     822:	4f0f      	ldr	r7, [pc, #60]	; (860 <tci_update_delay_ticks+0x44>)
	cli_tim;
     824:	601e      	str	r6, [r3, #0]
	if (setdel) {
     826:	883d      	ldrh	r5, [r7, #0]
     828:	b19d      	cbz	r5, 852 <tci_update_delay_ticks+0x36>
		if (force) {
     82a:	b1a0      	cbz	r0, 856 <tci_update_delay_ticks+0x3a>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     82c:	4b0d      	ldr	r3, [pc, #52]	; (864 <tci_update_delay_ticks+0x48>)
     82e:	681c      	ldr	r4, [r3, #0]
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     830:	f002 fcea 	bl	3208 <NOROM_AONRTCCurrent64BitValueGet>
     834:	0d80      	lsrs	r0, r0, #22
     836:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     83a:	f3c4 148f 	ubfx	r4, r4, #6, #16
				AON_RTC_O_CH0CMP)) - gettav ());
     83e:	b280      	uxth	r0, r0
     840:	1a24      	subs	r4, r4, r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     842:	1b2c      	subs	r4, r5, r4
	return NO;
     844:	4635      	mov	r5, r6
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     846:	4b08      	ldr	r3, [pc, #32]	; (868 <tci_update_delay_ticks+0x4c>)
			setdel = 0;
     848:	803e      	strh	r6, [r7, #0]
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     84a:	881a      	ldrh	r2, [r3, #0]
     84c:	4414      	add	r4, r2
     84e:	b2a4      	uxth	r4, r4
     850:	801c      	strh	r4, [r3, #0]
}
     852:	4628      	mov	r0, r5
     854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sti_tim;
     856:	2501      	movs	r5, #1
     858:	601d      	str	r5, [r3, #0]
		return YES;
     85a:	e7fa      	b.n	852 <tci_update_delay_ticks+0x36>
     85c:	43240280 			; <UNDEFINED> instruction: 0x43240280
     860:	2000054c 	andcs	r0, r0, ip, asr #10
     864:	40092018 	andmi	r2, r9, r8, lsl r0
     868:	20000b84 	andcs	r0, r0, r4, lsl #23

0000086c <__pi_uart_setrate>:
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     86c:	b570      	push	{r4, r5, r6, lr}
	UARTDisable (UART0_BASE);
     86e:	4e0f      	ldr	r6, [pc, #60]	; (8ac <__pi_uart_setrate+0x40>)
     870:	4d0f      	ldr	r5, [pc, #60]	; (8b0 <__pi_uart_setrate+0x44>)
     872:	6833      	ldr	r3, [r6, #0]
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     874:	4604      	mov	r4, r0
	UARTDisable (UART0_BASE);
     876:	68db      	ldr	r3, [r3, #12]
     878:	4628      	mov	r0, r5
     87a:	4798      	blx	r3
	UARTConfigSetExpClk (UART0_BASE,
     87c:	2264      	movs	r2, #100	; 0x64
     87e:	6833      	ldr	r3, [r6, #0]
     880:	4628      	mov	r0, r5
     882:	4362      	muls	r2, r4
     884:	685e      	ldr	r6, [r3, #4]
     886:	490b      	ldr	r1, [pc, #44]	; (8b4 <__pi_uart_setrate+0x48>)
     888:	2360      	movs	r3, #96	; 0x60
     88a:	47b0      	blx	r6
    ASSERT(UARTBaseValid(ui32Base));

    //
    // Enable the FIFO.
    //
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     88c:	4a0a      	ldr	r2, [pc, #40]	; (8b8 <__pi_uart_setrate+0x4c>)
}
     88e:	2001      	movs	r0, #1
     890:	6813      	ldr	r3, [r2, #0]
     892:	f043 0310 	orr.w	r3, r3, #16
     896:	6013      	str	r3, [r2, #0]

    //
    // Enable RX, TX, and the UART.
    //
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     898:	6853      	ldr	r3, [r2, #4]
     89a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     89e:	f043 0301 	orr.w	r3, r3, #1
     8a2:	6053      	str	r3, [r2, #4]
	urates [0] = rate;
     8a4:	4b05      	ldr	r3, [pc, #20]	; (8bc <__pi_uart_setrate+0x50>)
     8a6:	801c      	strh	r4, [r3, #0]
}
     8a8:	bd70      	pop	{r4, r5, r6, pc}
     8aa:	bf00      	nop
     8ac:	100001d0 	ldrdne	r0, [r0], -r0	; <UNPREDICTABLE>
     8b0:	40001000 	andmi	r1, r0, r0
     8b4:	02dc6c00 	sbcseq	r6, ip, #0, 24
     8b8:	4000102c 	andmi	r1, r0, ip, lsr #32
     8bc:	2000054e 	andcs	r0, r0, lr, asr #10

000008c0 <reinit_uart>:
    ASSERT(UARTBaseValid(ui32Base));

    //
    // Enable the FIFO.
    //
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     8c0:	4a08      	ldr	r2, [pc, #32]	; (8e4 <reinit_uart+0x24>)
	__pi_uart_setrate (urates [0], __pi_uart);
     8c2:	4909      	ldr	r1, [pc, #36]	; (8e8 <reinit_uart+0x28>)
     8c4:	6813      	ldr	r3, [r2, #0]
     8c6:	f043 0310 	orr.w	r3, r3, #16
     8ca:	6013      	str	r3, [r2, #0]
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     8cc:	2212      	movs	r2, #18
     8ce:	4b07      	ldr	r3, [pc, #28]	; (8ec <reinit_uart+0x2c>)
     8d0:	601a      	str	r2, [r3, #0]
    //
    // Check the arguments.
    //
    ASSERT( UARTBaseValid( ui32Base ));

    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     8d2:	4a07      	ldr	r2, [pc, #28]	; (8f0 <reinit_uart+0x30>)
     8d4:	6813      	ldr	r3, [r2, #0]
     8d6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     8da:	6013      	str	r3, [r2, #0]
     8dc:	4b05      	ldr	r3, [pc, #20]	; (8f4 <reinit_uart+0x34>)
     8de:	8818      	ldrh	r0, [r3, #0]
     8e0:	f7ff bfc4 	b.w	86c <__pi_uart_setrate>
     8e4:	4000102c 	andmi	r1, r0, ip, lsr #32
     8e8:	20000b68 	andcs	r0, r0, r8, ror #22
     8ec:	40001034 	andmi	r1, r0, r4, lsr r0
     8f0:	40001030 	andmi	r1, r0, r0, lsr r0
     8f4:	2000054e 	andcs	r0, r0, lr, asr #10

000008f8 <ioreq_uart_a>:
	switch (operation) {
     8f8:	3001      	adds	r0, #1
static int ioreq_uart_a (int operation, char *buf, int len) {
     8fa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     8fe:	460d      	mov	r5, r1
     900:	4614      	mov	r4, r2
     902:	2803      	cmp	r0, #3
     904:	d86e      	bhi.n	9e4 <ioreq_uart_a+0xec>
     906:	e8df f000 	tbb	[pc, r0]
     90a:	5a471253 	bpl	11c525e <__ccfg+0x11a52b6>
				*buf++ = uart_a_read;
     90e:	f8d9 3000 	ldr.w	r3, [r9]
				len--;
     912:	3e01      	subs	r6, #1
				*buf++ = uart_a_read;
     914:	f805 3b01 	strb.w	r3, [r5], #1
			while (len && uart_a_char_available) {
     918:	b11e      	cbz	r6, 922 <ioreq_uart_a+0x2a>
     91a:	f8d8 3000 	ldr.w	r3, [r8]
     91e:	06d8      	lsls	r0, r3, #27
     920:	d5f5      	bpl.n	90e <ioreq_uart_a+0x16>
			if (len != operation) {
     922:	42a6      	cmp	r6, r4
     924:	d00a      	beq.n	93c <ioreq_uart_a+0x44>
				return operation - len;
     926:	1ba4      	subs	r4, r4, r6
}
     928:	4620      	mov	r0, r4
     92a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				*buf++ = uart_a_read;
     92e:	4616      	mov	r6, r2
			uart_a_disable_int;
     930:	4f2e      	ldr	r7, [pc, #184]	; (9ec <ioreq_uart_a+0xf4>)
			if (uart_a_char_available) {
     932:	f8df 80cc 	ldr.w	r8, [pc, #204]	; a00 <ioreq_uart_a+0x108>
				*buf++ = uart_a_read;
     936:	f8df 90cc 	ldr.w	r9, [pc, #204]	; a04 <ioreq_uart_a+0x10c>
     93a:	e7ed      	b.n	918 <ioreq_uart_a+0x20>
			uart_a_disable_int;
     93c:	683b      	ldr	r3, [r7, #0]
     93e:	2015      	movs	r0, #21
     940:	695b      	ldr	r3, [r3, #20]
     942:	4798      	blx	r3
			if (uart_a_char_available) {
     944:	f8d8 3000 	ldr.w	r3, [r8]
     948:	06d9      	lsls	r1, r3, #27
     94a:	d404      	bmi.n	956 <ioreq_uart_a+0x5e>
				uart_a_enable_int;
     94c:	683b      	ldr	r3, [r7, #0]
     94e:	2015      	movs	r0, #21
     950:	691b      	ldr	r3, [r3, #16]
     952:	4798      	blx	r3
				goto Redo_rx;
     954:	e7e0      	b.n	918 <ioreq_uart_a+0x20>
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     956:	4a26      	ldr	r2, [pc, #152]	; (9f0 <ioreq_uart_a+0xf8>)
     958:	7993      	ldrb	r3, [r2, #6]
     95a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
			return -2;
     95e:	f06f 0401 	mvn.w	r4, #1
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     962:	7193      	strb	r3, [r2, #6]
			return -2;
     964:	e7e0      	b.n	928 <ioreq_uart_a+0x30>
				uart_a_write (*buf);
     966:	f815 3b01 	ldrb.w	r3, [r5], #1
				len--;
     96a:	3e01      	subs	r6, #1
				uart_a_write (*buf);
     96c:	f8c9 3000 	str.w	r3, [r9]
			while (len && uart_a_room_in_tx) {
     970:	b11e      	cbz	r6, 97a <ioreq_uart_a+0x82>
     972:	f8d8 3000 	ldr.w	r3, [r8]
     976:	069a      	lsls	r2, r3, #26
     978:	d5f5      	bpl.n	966 <ioreq_uart_a+0x6e>
			if (len != operation) {
     97a:	42a6      	cmp	r6, r4
     97c:	d1d3      	bne.n	926 <ioreq_uart_a+0x2e>
			uart_a_disable_int;
     97e:	683b      	ldr	r3, [r7, #0]
     980:	2015      	movs	r0, #21
     982:	695b      	ldr	r3, [r3, #20]
     984:	4798      	blx	r3
			if (uart_a_room_in_tx) {
     986:	f8d8 3000 	ldr.w	r3, [r8]
     98a:	069b      	lsls	r3, r3, #26
     98c:	d40b      	bmi.n	9a6 <ioreq_uart_a+0xae>
				uart_a_enable_int;
     98e:	683b      	ldr	r3, [r7, #0]
     990:	2015      	movs	r0, #21
     992:	691b      	ldr	r3, [r3, #16]
     994:	4798      	blx	r3
				goto Redo_tx;
     996:	e7eb      	b.n	970 <ioreq_uart_a+0x78>
				*buf++ = uart_a_read;
     998:	4616      	mov	r6, r2
			uart_a_disable_int;
     99a:	4f14      	ldr	r7, [pc, #80]	; (9ec <ioreq_uart_a+0xf4>)
			if (uart_a_room_in_tx) {
     99c:	f8df 8060 	ldr.w	r8, [pc, #96]	; a00 <ioreq_uart_a+0x108>
				uart_a_write (*buf);
     9a0:	f8df 9060 	ldr.w	r9, [pc, #96]	; a04 <ioreq_uart_a+0x10c>
     9a4:	e7e4      	b.n	970 <ioreq_uart_a+0x78>
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     9a6:	4a12      	ldr	r2, [pc, #72]	; (9f0 <ioreq_uart_a+0xf8>)
     9a8:	7993      	ldrb	r3, [r2, #6]
     9aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     9ae:	e7d6      	b.n	95e <ioreq_uart_a+0x66>
			uart_a_enable_int;
     9b0:	4b0e      	ldr	r3, [pc, #56]	; (9ec <ioreq_uart_a+0xf4>)
     9b2:	2015      	movs	r0, #21
     9b4:	681b      	ldr	r3, [r3, #0]
			return 0;
     9b6:	2400      	movs	r4, #0
			uart_a_enable_int;
     9b8:	691b      	ldr	r3, [r3, #16]
     9ba:	4798      	blx	r3
			return 0;
     9bc:	e7b4      	b.n	928 <ioreq_uart_a+0x30>
			if (len == UART_CNTRL_SETRATE) {
     9be:	2a01      	cmp	r2, #1
     9c0:	d109      	bne.n	9d6 <ioreq_uart_a+0xde>
				if (__pi_uart_setrate (*((word*)buf),
     9c2:	490b      	ldr	r1, [pc, #44]	; (9f0 <ioreq_uart_a+0xf8>)
     9c4:	8828      	ldrh	r0, [r5, #0]
     9c6:	f7ff ff51 	bl	86c <__pi_uart_setrate>
     9ca:	2800      	cmp	r0, #0
     9cc:	d1ac      	bne.n	928 <ioreq_uart_a+0x30>
				syserror (EREQPAR, "uar");
     9ce:	2003      	movs	r0, #3
     9d0:	4908      	ldr	r1, [pc, #32]	; (9f4 <ioreq_uart_a+0xfc>)
			syserror (ENOOPER, "uai");
     9d2:	f7ff fe3b 	bl	64c <__pi_syserror>
			if (len == UART_CNTRL_GETRATE) {
     9d6:	2a02      	cmp	r2, #2
     9d8:	d104      	bne.n	9e4 <ioreq_uart_a+0xec>
	return urates [0];
     9da:	4b07      	ldr	r3, [pc, #28]	; (9f8 <ioreq_uart_a+0x100>)
				return 1;
     9dc:	2401      	movs	r4, #1
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     9de:	881b      	ldrh	r3, [r3, #0]
     9e0:	800b      	strh	r3, [r1, #0]
				return 1;
     9e2:	e7a1      	b.n	928 <ioreq_uart_a+0x30>
			syserror (ENOOPER, "uai");
     9e4:	2002      	movs	r0, #2
     9e6:	4905      	ldr	r1, [pc, #20]	; (9fc <ioreq_uart_a+0x104>)
     9e8:	e7f3      	b.n	9d2 <ioreq_uart_a+0xda>
     9ea:	bf00      	nop
     9ec:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
     9f0:	20000b68 	andcs	r0, r0, r8, ror #22
     9f4:	0000451c 	andeq	r4, r0, ip, lsl r5
     9f8:	2000054e 	andcs	r0, r0, lr, asr #10
     9fc:	00004520 	andeq	r4, r0, r0, lsr #10
     a00:	40001018 	andmi	r1, r0, r8, lsl r0
     a04:	40001000 	andmi	r1, r0, r0

00000a08 <UART0IntHandler>:
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     a08:	f240 72f2 	movw	r2, #2034	; 0x7f2
}

void UART0IntHandler () {
     a0c:	b530      	push	{r4, r5, lr}
     a0e:	4b29      	ldr	r3, [pc, #164]	; (ab4 <UART0IntHandler+0xac>)

	uart_a_clear_interrupts;

	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     a10:	4c29      	ldr	r4, [pc, #164]	; (ab8 <UART0IntHandler+0xb0>)
     a12:	601a      	str	r2, [r3, #0]
     a14:	6822      	ldr	r2, [r4, #0]
     a16:	06d5      	lsls	r5, r2, #27
     a18:	d423      	bmi.n	a62 <UART0IntHandler+0x5a>
     a1a:	4b28      	ldr	r3, [pc, #160]	; (abc <UART0IntHandler+0xb4>)
     a1c:	799a      	ldrb	r2, [r3, #6]
     a1e:	0610      	lsls	r0, r2, #24
     a20:	d51f      	bpl.n	a62 <UART0IntHandler+0x5a>
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     a22:	799a      	ldrb	r2, [r3, #6]
     a24:	f002 027f 	and.w	r2, r2, #127	; 0x7f
     a28:	719a      	strb	r2, [r3, #6]
		RISE_N_SHINE;
     a2a:	4a25      	ldr	r2, [pc, #148]	; (ac0 <UART0IntHandler+0xb8>)
     a2c:	7813      	ldrb	r3, [r2, #0]
     a2e:	f043 0302 	orr.w	r3, r3, #2
     a32:	7013      	strb	r3, [r2, #0]
		i_trigger (devevent (UART_A, READ));
     a34:	4b23      	ldr	r3, [pc, #140]	; (ac4 <UART0IntHandler+0xbc>)
     a36:	681a      	ldr	r2, [r3, #0]
     a38:	b19a      	cbz	r2, a62 <UART0IntHandler+0x5a>
     a3a:	4610      	mov	r0, r2
     a3c:	2300      	movs	r3, #0
     a3e:	f830 1b10 	ldrh.w	r1, [r0], #16
     a42:	f001 0107 	and.w	r1, r1, #7
     a46:	4299      	cmp	r1, r3
     a48:	dd09      	ble.n	a5e <UART0IntHandler+0x56>
     a4a:	f850 5033 	ldr.w	r5, [r0, r3, lsl #3]
     a4e:	3301      	adds	r3, #1
     a50:	f515 7f81 	cmn.w	r5, #258	; 0x102
     a54:	d1f7      	bne.n	a46 <UART0IntHandler+0x3e>
     a56:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     a5a:	889b      	ldrh	r3, [r3, #4]
     a5c:	8013      	strh	r3, [r2, #0]
     a5e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     a60:	e7ea      	b.n	a38 <UART0IntHandler+0x30>
	}

	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     a62:	6823      	ldr	r3, [r4, #0]
     a64:	0699      	lsls	r1, r3, #26
     a66:	d424      	bmi.n	ab2 <UART0IntHandler+0xaa>
     a68:	4b14      	ldr	r3, [pc, #80]	; (abc <UART0IntHandler+0xb4>)
     a6a:	799a      	ldrb	r2, [r3, #6]
     a6c:	0652      	lsls	r2, r2, #25
     a6e:	d520      	bpl.n	ab2 <UART0IntHandler+0xaa>
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
		RISE_N_SHINE;
		i_trigger (devevent (UART_A, WRITE));
     a70:	f46f 7480 	mvn.w	r4, #256	; 0x100
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     a74:	799a      	ldrb	r2, [r3, #6]
     a76:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
     a7a:	719a      	strb	r2, [r3, #6]
		RISE_N_SHINE;
     a7c:	4a10      	ldr	r2, [pc, #64]	; (ac0 <UART0IntHandler+0xb8>)
     a7e:	7813      	ldrb	r3, [r2, #0]
     a80:	f043 0302 	orr.w	r3, r3, #2
     a84:	7013      	strb	r3, [r2, #0]
		i_trigger (devevent (UART_A, WRITE));
     a86:	4b0f      	ldr	r3, [pc, #60]	; (ac4 <UART0IntHandler+0xbc>)
     a88:	681a      	ldr	r2, [r3, #0]
     a8a:	b192      	cbz	r2, ab2 <UART0IntHandler+0xaa>
     a8c:	4610      	mov	r0, r2
     a8e:	2300      	movs	r3, #0
     a90:	f830 1b10 	ldrh.w	r1, [r0], #16
     a94:	f001 0107 	and.w	r1, r1, #7
     a98:	4299      	cmp	r1, r3
     a9a:	dd08      	ble.n	aae <UART0IntHandler+0xa6>
     a9c:	f850 5033 	ldr.w	r5, [r0, r3, lsl #3]
     aa0:	3301      	adds	r3, #1
     aa2:	42a5      	cmp	r5, r4
     aa4:	d1f8      	bne.n	a98 <UART0IntHandler+0x90>
     aa6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     aaa:	889b      	ldrh	r3, [r3, #4]
     aac:	8013      	strh	r3, [r2, #0]
     aae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     ab0:	e7eb      	b.n	a8a <UART0IntHandler+0x82>
	}

	RTNI;
}
     ab2:	bd30      	pop	{r4, r5, pc}
     ab4:	40001044 	andmi	r1, r0, r4, asr #32
     ab8:	40001018 	andmi	r1, r0, r8, lsl r0
     abc:	20000b68 	andcs	r0, r0, r8, ror #22
     ac0:	20000b7c 	andcs	r0, r0, ip, ror fp
     ac4:	20000550 	andcs	r0, r0, r0, asr r5

00000ac8 <__buttons_setirq>:

// ============================================================================

#ifdef	BUTTON_LIST

void __buttons_setirq (int val) {
     ac8:	b570      	push	{r4, r5, r6, lr}
     aca:	b672      	cpsid	i
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Clear the event status for the specified DIO.
    //
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     acc:	2101      	movs	r1, #1
	int i;
	lword bn;

	cli;
	for (i = 0; i < N_BUTTONS; i++) {
		bn = BUTTON_GPIO (__button_list [i]);
     ace:	4e0c      	ldr	r6, [pc, #48]	; (b00 <__buttons_setirq+0x38>)
     ad0:	4d0c      	ldr	r5, [pc, #48]	; (b04 <__buttons_setirq+0x3c>)
     ad2:	8833      	ldrh	r3, [r6, #0]
		GPIO_clearEventDio (bn);
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     ad4:	4c0c      	ldr	r4, [pc, #48]	; (b08 <__buttons_setirq+0x40>)
		bn = BUTTON_GPIO (__button_list [i]);
     ad6:	0a1b      	lsrs	r3, r3, #8
     ad8:	fa01 f203 	lsl.w	r2, r1, r3
     adc:	602a      	str	r2, [r5, #0]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     ade:	01da      	lsls	r2, r3, #7
		bn = BUTTON_GPIO (__button_list [i]);
     ae0:	8873      	ldrh	r3, [r6, #2]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     ae2:	f102 7281 	add.w	r2, r2, #16908288	; 0x1020000
		bn = BUTTON_GPIO (__button_list [i]);
     ae6:	0a1b      	lsrs	r3, r3, #8
     ae8:	4099      	lsls	r1, r3
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     aea:	01db      	lsls	r3, r3, #7
     aec:	f103 7381 	add.w	r3, r3, #16908288	; 0x1020000
     af0:	4322      	orrs	r2, r4
     af2:	4323      	orrs	r3, r4
     af4:	6010      	str	r0, [r2, #0]
     af6:	6029      	str	r1, [r5, #0]
     af8:	6018      	str	r0, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
     afa:	b662      	cpsie	i
			val;
	}
	sti;
}
     afc:	bd70      	pop	{r4, r5, r6, pc}
     afe:	bf00      	nop
     b00:	000046aa 	andeq	r4, r0, sl, lsr #13
     b04:	400220e0 	andmi	r2, r2, r0, ror #1
     b08:	42000048 	andmi	r0, r0, #72	; 0x48

00000b0c <__pinlist_setirq>:

#endif

#ifdef	INPUT_PIN_LIST

void __pinlist_setirq (int val) {
     b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __ASM volatile ("cpsid i" : : : "memory");
     b0e:	b672      	cpsid	i

	int i;
	lword bn;

	cli;
	for (i = 0; i < N_PINLIST; i++) {
     b10:	2200      	movs	r2, #0
     b12:	2601      	movs	r6, #1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     b14:	4f09      	ldr	r7, [pc, #36]	; (b3c <__pinlist_setirq+0x30>)
     b16:	4c0a      	ldr	r4, [pc, #40]	; (b40 <__pinlist_setirq+0x34>)
		GPIO_clearEventDio (bn);
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     b18:	490a      	ldr	r1, [pc, #40]	; (b44 <__pinlist_setirq+0x38>)
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     b1a:	5cbb      	ldrb	r3, [r7, r2]
	for (i = 0; i < N_PINLIST; i++) {
     b1c:	3201      	adds	r2, #1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     b1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     b22:	fa06 f503 	lsl.w	r5, r6, r3
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     b26:	01db      	lsls	r3, r3, #7
     b28:	f103 7381 	add.w	r3, r3, #16908288	; 0x1020000
     b2c:	430b      	orrs	r3, r1
	for (i = 0; i < N_PINLIST; i++) {
     b2e:	2a04      	cmp	r2, #4
     b30:	6025      	str	r5, [r4, #0]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     b32:	6018      	str	r0, [r3, #0]
	for (i = 0; i < N_PINLIST; i++) {
     b34:	d1f1      	bne.n	b1a <__pinlist_setirq+0xe>
  __ASM volatile ("cpsie i" : : : "memory");
     b36:	b662      	cpsie	i
			val;
	}
	sti;
}
     b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b3a:	bf00      	nop
     b3c:	000046a5 	andeq	r4, r0, r5, lsr #13
     b40:	400220e0 	andmi	r2, r2, r0, ror #1
     b44:	42000048 	andmi	r0, r0, #72	; 0x48

00000b48 <GPIOIntHandler>:
void GPIOIntHandler () {
     b48:	b570      	push	{r4, r5, r6, lr}
if (buttons_int) {
     b4a:	4c23      	ldr	r4, [pc, #140]	; (bd8 <GPIOIntHandler+0x90>)
     b4c:	6822      	ldr	r2, [r4, #0]
     b4e:	f412 4fc0 	tst.w	r2, #24576	; 0x6000
     b52:	d01e      	beq.n	b92 <GPIOIntHandler+0x4a>
	buttons_disable ();
     b54:	2000      	movs	r0, #0
     b56:	f7ff ffb7 	bl	ac8 <__buttons_setirq>
	i_trigger ((aword)&__button_list);
     b5a:	4b20      	ldr	r3, [pc, #128]	; (bdc <GPIOIntHandler+0x94>)
     b5c:	4d20      	ldr	r5, [pc, #128]	; (be0 <GPIOIntHandler+0x98>)
     b5e:	681a      	ldr	r2, [r3, #0]
     b60:	b192      	cbz	r2, b88 <GPIOIntHandler+0x40>
     b62:	4610      	mov	r0, r2
     b64:	2300      	movs	r3, #0
     b66:	f830 1b10 	ldrh.w	r1, [r0], #16
     b6a:	f001 0107 	and.w	r1, r1, #7
     b6e:	4299      	cmp	r1, r3
     b70:	dd08      	ble.n	b84 <GPIOIntHandler+0x3c>
     b72:	f850 6033 	ldr.w	r6, [r0, r3, lsl #3]
     b76:	3301      	adds	r3, #1
     b78:	42ae      	cmp	r6, r5
     b7a:	d1f8      	bne.n	b6e <GPIOIntHandler+0x26>
     b7c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     b80:	889b      	ldrh	r3, [r3, #4]
     b82:	8013      	strh	r3, [r2, #0]
     b84:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     b86:	e7eb      	b.n	b60 <GPIOIntHandler+0x18>
	RISE_N_SHINE;
     b88:	4a16      	ldr	r2, [pc, #88]	; (be4 <GPIOIntHandler+0x9c>)
     b8a:	7813      	ldrb	r3, [r2, #0]
     b8c:	f043 0302 	orr.w	r3, r3, #2
     b90:	7013      	strb	r3, [r2, #0]
if (pin_sensor_int) {
     b92:	6823      	ldr	r3, [r4, #0]
     b94:	f013 5ff0 	tst.w	r3, #503316480	; 0x1e000000
     b98:	d01d      	beq.n	bd6 <GPIOIntHandler+0x8e>
	i_trigger ((aword)(&__input_pins));
     b9a:	4b10      	ldr	r3, [pc, #64]	; (bdc <GPIOIntHandler+0x94>)
     b9c:	4c12      	ldr	r4, [pc, #72]	; (be8 <GPIOIntHandler+0xa0>)
     b9e:	6818      	ldr	r0, [r3, #0]
     ba0:	b190      	cbz	r0, bc8 <GPIOIntHandler+0x80>
     ba2:	4601      	mov	r1, r0
     ba4:	2300      	movs	r3, #0
     ba6:	f831 2b10 	ldrh.w	r2, [r1], #16
     baa:	f002 0207 	and.w	r2, r2, #7
     bae:	429a      	cmp	r2, r3
     bb0:	dd08      	ble.n	bc4 <GPIOIntHandler+0x7c>
     bb2:	f851 5033 	ldr.w	r5, [r1, r3, lsl #3]
     bb6:	3301      	adds	r3, #1
     bb8:	42a5      	cmp	r5, r4
     bba:	d1f8      	bne.n	bae <GPIOIntHandler+0x66>
     bbc:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
     bc0:	889b      	ldrh	r3, [r3, #4]
     bc2:	8003      	strh	r3, [r0, #0]
     bc4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
     bc6:	e7eb      	b.n	ba0 <GPIOIntHandler+0x58>
	__pinsen_disable_and_clear;
     bc8:	f7ff ffa0 	bl	b0c <__pinlist_setirq>
	RISE_N_SHINE;
     bcc:	4a05      	ldr	r2, [pc, #20]	; (be4 <GPIOIntHandler+0x9c>)
     bce:	7813      	ldrb	r3, [r2, #0]
     bd0:	f043 0302 	orr.w	r3, r3, #2
     bd4:	7013      	strb	r3, [r2, #0]
}
     bd6:	bd70      	pop	{r4, r5, r6, pc}
     bd8:	400220e0 	andmi	r2, r2, r0, ror #1
     bdc:	20000550 	andcs	r0, r0, r0, asr r5
     be0:	000046aa 	andeq	r4, r0, sl, lsr #13
     be4:	20000b7c 	andcs	r0, r0, ip, ror fp
     be8:	000046a5 	andeq	r4, r0, r5, lsr #13

00000bec <system_init>:
#endif

// ============================================================================
// ============================================================================

void system_init () {
     bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	__pi_ondomain (PRCM_DOMAIN_PERIPH);

	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     bf0:	4c58      	ldr	r4, [pc, #352]	; (d54 <system_init+0x168>)
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     bf2:	2004      	movs	r0, #4
     bf4:	f7ff fcec 	bl	5d0 <__pi_ondomain>
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     bf8:	6823      	ldr	r3, [r4, #0]
     bfa:	f44f 60a0 	mov.w	r0, #1280	; 0x500
     bfe:	69db      	ldr	r3, [r3, #28]
     c00:	4798      	blx	r3
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     c02:	6823      	ldr	r3, [r4, #0]
     c04:	f44f 60a0 	mov.w	r0, #1280	; 0x500
     c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     c0a:	4798      	blx	r3
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     c0c:	6823      	ldr	r3, [r4, #0]
     c0e:	f44f 60a0 	mov.w	r0, #1280	; 0x500
     c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     c14:	4798      	blx	r3
PRCMLoadSet(void)
{
    //
    // Enable the update of all load related registers.
    //
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     c16:	2301      	movs	r3, #1
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     c18:	2600      	movs	r6, #0
     c1a:	4c4f      	ldr	r4, [pc, #316]	; (d58 <system_init+0x16c>)
     c1c:	4f4f      	ldr	r7, [pc, #316]	; (d5c <system_init+0x170>)
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     c1e:	f8df c17c 	ldr.w	ip, [pc, #380]	; d9c <system_init+0x1b0>
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     c22:	f8df e17c 	ldr.w	lr, [pc, #380]	; da0 <system_init+0x1b4>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     c26:	f8df 8140 	ldr.w	r8, [pc, #320]	; d68 <system_init+0x17c>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     c2a:	f8df 9134 	ldr.w	r9, [pc, #308]	; d60 <system_init+0x174>
     c2e:	6023      	str	r3, [r4, #0]
		pin = (port_confs [i] >> 19) & 0x1f;
     c30:	f857 5b04 	ldr.w	r5, [r7], #4
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     c34:	3601      	adds	r6, #1
		pin = (port_confs [i] >> 19) & 0x1f;
     c36:	f3c5 42c4 	ubfx	r2, r5, #19, #5
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     c3a:	0091      	lsls	r1, r2, #2
     c3c:	f101 4080 	add.w	r0, r1, #1073741824	; 0x40000000
     c40:	f500 2001 	add.w	r0, r0, #528384	; 0x81000
     c44:	ea05 0a0c 	and.w	sl, r5, ip
     c48:	f8c0 a000 	str.w	sl, [r0]
		if (port_confs [i] & 0x80)
     c4c:	0628      	lsls	r0, r5, #24
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     c4e:	bf44      	itt	mi
     c50:	ea41 010e 	orrmi.w	r1, r1, lr
     c54:	600b      	strmi	r3, [r1, #0]
		if (port_confs [i] & 0x40)
     c56:	fa03 f202 	lsl.w	r2, r3, r2
     c5a:	0669      	lsls	r1, r5, #25
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     c5c:	bf4c      	ite	mi
     c5e:	f8c9 2000 	strmi.w	r2, [r9]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     c62:	f8c8 2000 	strpl.w	r2, [r8]
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     c66:	2e11      	cmp	r6, #17
     c68:	d1e2      	bne.n	c30 <system_init+0x44>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     c6a:	2540      	movs	r5, #64	; 0x40
     c6c:	2680      	movs	r6, #128	; 0x80
     c6e:	4b3c      	ldr	r3, [pc, #240]	; (d60 <system_init+0x174>)

	// Initialize DIO ports
	port_config ();

#if	LEDS_DRIVER
	all_leds_blink;
     c70:	493c      	ldr	r1, [pc, #240]	; (d64 <system_init+0x178>)
     c72:	601d      	str	r5, [r3, #0]
     c74:	601e      	str	r6, [r3, #0]
     c76:	780b      	ldrb	r3, [r1, #0]
     c78:	780b      	ldrb	r3, [r1, #0]
     c7a:	20c8      	movs	r0, #200	; 0xc8
     c7c:	f36f 1307 	bfc	r3, #4, #4
     c80:	700b      	strb	r3, [r1, #0]
     c82:	f7ff fc8f 	bl	5a4 <mdelay>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     c86:	4b38      	ldr	r3, [pc, #224]	; (d68 <system_init+0x17c>)
     c88:	20c8      	movs	r0, #200	; 0xc8
     c8a:	601d      	str	r5, [r3, #0]
     c8c:	601e      	str	r6, [r3, #0]

	// The autoincrement value on channel 2 set to 1 msec
	AONRTCIncValueCh2Set (TCI_TINCR (1));
	// Enable continuous operation of channel 2
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CHCTL,
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     c8e:	2601      	movs	r6, #1
	all_leds_blink;
     c90:	780b      	ldrb	r3, [r1, #0]
     c92:	780b      	ldrb	r3, [r1, #0]
     c94:	f36f 1307 	bfc	r3, #4, #4
     c98:	700b      	strb	r3, [r1, #0]
     c9a:	f7ff fc83 	bl	5a4 <mdelay>
//
//*****************************************************************************
__STATIC_INLINE void
AONRTCIncValueCh2Set(uint32_t ui32IncValue)
{
    HWREG(AON_RTC_BASE + AON_RTC_O_CH2CMPINC) = ui32IncValue;
     c9e:	4b33      	ldr	r3, [pc, #204]	; (d6c <system_init+0x180>)

	// Define the combined event as consisting of channels 0 and 2 and
	// enable the clock
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     ca0:	4a33      	ldr	r2, [pc, #204]	; (d70 <system_init+0x184>)
     ca2:	601d      	str	r5, [r3, #0]
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     ca4:	4b33      	ldr	r3, [pc, #204]	; (d74 <system_init+0x188>)
		// For the radio
		AON_RTC_CTL_RTC_UPD_EN |
		AON_RTC_CTL_EN;

	// Enable RTC interrupts
	IntEnable (INT_AON_RTC_COMB);
     ca6:	4d34      	ldr	r5, [pc, #208]	; (d78 <system_init+0x18c>)
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     ca8:	601e      	str	r6, [r3, #0]
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     caa:	4b34      	ldr	r3, [pc, #208]	; (d7c <system_init+0x190>)
	IntEnable (INT_AON_RTC_COMB);
     cac:	2014      	movs	r0, #20
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     cae:	601a      	str	r2, [r3, #0]
	IntEnable (INT_AON_RTC_COMB);
     cb0:	682b      	ldr	r3, [r5, #0]
     cb2:	691b      	ldr	r3, [r3, #16]
     cb4:	4798      	blx	r3

	// Initialize the memory allocator
	__pi_malloc_init ();
     cb6:	f000 fbeb 	bl	1490 <__pi_malloc_init>

	// Enable GPIO interrupts
	IntEnable (INT_AON_GPIO_EDGE);
     cba:	682b      	ldr	r3, [r5, #0]
     cbc:	2010      	movs	r0, #16
     cbe:	691b      	ldr	r3, [r3, #16]
     cc0:	4798      	blx	r3
		EMERGENCY_STARTUP_ACTION;
	}
#endif

#ifdef	NEED_SERIAL_DOMAIN
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     cc2:	2002      	movs	r0, #2
     cc4:	f7ff fc84 	bl	5d0 <__pi_ondomain>
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     cc8:	68ab      	ldr	r3, [r5, #8]
     cca:	f44f 7000 	mov.w	r0, #512	; 0x200
     cce:	69db      	ldr	r3, [r3, #28]
     cd0:	4798      	blx	r3
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     cd2:	68ab      	ldr	r3, [r5, #8]
     cd4:	f44f 7000 	mov.w	r0, #512	; 0x200
     cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     cda:	4798      	blx	r3
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     cdc:	68ab      	ldr	r3, [r5, #8]
     cde:	f44f 7000 	mov.w	r0, #512	; 0x200
     ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     ce4:	4798      	blx	r3
	urates [0] = UART_RATE / 100;
     ce6:	2260      	movs	r2, #96	; 0x60
     ce8:	4b25      	ldr	r3, [pc, #148]	; (d80 <system_init+0x194>)
     cea:	6026      	str	r6, [r4, #0]
     cec:	801a      	strh	r2, [r3, #0]
	reinit_uart ();
     cee:	f7ff fde7 	bl	8c0 <reinit_uart>
	__pi_init_actuators ();
#endif

#ifdef	EXTRA_INITIALIZERS
	// Extra initialization
	EXTRA_INITIALIZERS;
     cf2:	f001 f90b 	bl	1f0c <ee_open>
     cf6:	f001 f913 	bl	1f20 <ee_close>
#endif
	// If waking from shutdown, unfreeze the I/O
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     cfa:	f003 f9a7 	bl	404c <NOROM_SysCtrlResetSourceGet>
     cfe:	2808      	cmp	r0, #8
     d00:	d11a      	bne.n	d38 <system_init+0x14c>
AONIOCFreezeDisable(void)
{
    //
    // Set the AON IOC latches as transparent.
    //
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     d02:	4b20      	ldr	r3, [pc, #128]	; (d84 <system_init+0x198>)
     d04:	601e      	str	r6, [r3, #0]
{
    //
    // Open the IO latches at AON_IOC level and in the padring
    //
    AONIOCFreezeDisable();
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     d06:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
     d0a:	3b04      	subs	r3, #4
     d0c:	601e      	str	r6, [r3, #0]
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     d0e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
     d12:	3324      	adds	r3, #36	; 0x24
     d14:	681b      	ldr	r3, [r3, #0]
	}

#if	MAX_DEVICES
	for (int i = UART; i < MAX_DEVICES; i++)
		if (devinit [i] . init != NULL)
			devinit [i] . init (devinit [i] . param);
     d16:	2000      	movs	r0, #0
     d18:	f7ff fc28 	bl	56c <devinit_uart>
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     d1c:	4a1a      	ldr	r2, [pc, #104]	; (d88 <system_init+0x19c>)
#endif

#ifdef	N_UARTS
	// The same for UART_DRIVER and UART_TCV
	enable_uart_interrupts ();
	IntEnable (INT_UART0_COMB);
     d1e:	2015      	movs	r0, #21
     d20:	6813      	ldr	r3, [r2, #0]
     d22:	f043 0370 	orr.w	r3, r3, #112	; 0x70
     d26:	6013      	str	r3, [r2, #0]
     d28:	4b13      	ldr	r3, [pc, #76]	; (d78 <system_init+0x18c>)
     d2a:	681b      	ldr	r3, [r3, #0]
     d2c:	691b      	ldr	r3, [r3, #16]
     d2e:	4798      	blx	r3
#endif
	// Kick the auxiliary timer in case something is needed by the
	// drivers
	tci_run_auxiliary_timer ();
}
     d30:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	tci_run_auxiliary_timer ();
     d34:	f7ff bcd4 	b.w	6e0 <tci_run_auxiliary_timer>
		diag ("");
     d38:	4814      	ldr	r0, [pc, #80]	; (d8c <system_init+0x1a0>)
     d3a:	f000 fc97 	bl	166c <diag>
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     d3e:	4814      	ldr	r0, [pc, #80]	; (d90 <system_init+0x1a4>)
     d40:	f000 fc94 	bl	166c <diag>
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     d44:	4913      	ldr	r1, [pc, #76]	; (d94 <system_init+0x1a8>)
		diag ("Leftover RAM: %d bytes",
     d46:	4814      	ldr	r0, [pc, #80]	; (d98 <system_init+0x1ac>)
     d48:	f5c1 4198 	rsb	r1, r1, #19456	; 0x4c00
     d4c:	b289      	uxth	r1, r1
     d4e:	f000 fc8d 	bl	166c <diag>
     d52:	e7e0      	b.n	d16 <system_init+0x12a>
     d54:	100001b8 			; <UNDEFINED> instruction: 0x100001b8
     d58:	60082028 	andvs	r2, r8, r8, lsr #32
     d5c:	00004598 	muleq	r0, r8, r5
     d60:	40022090 	mulmi	r2, r0, r0
     d64:	20000b7c 	andcs	r0, r0, ip, ror fp
     d68:	400220a0 	andmi	r2, r2, r0, lsr #1
     d6c:	40092024 	andmi	r2, r9, r4, lsr #32
     d70:	00050003 	andeq	r0, r5, r3
     d74:	432402c8 			; <UNDEFINED> instruction: 0x432402c8
     d78:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
     d7c:	40092000 	andmi	r2, r9, r0
     d80:	2000054e 	andcs	r0, r0, lr, asr #10
     d84:	4009400c 	andmi	r4, r9, ip
     d88:	40001038 	andmi	r1, r0, r8, lsr r0
     d8c:	00004371 	andeq	r4, r0, r1, ror r3
     d90:	00004524 	andeq	r4, r0, r4, lsr #10
     d94:	20000ba0 	andcs	r0, r0, r0, lsr #23
     d98:	00004570 	andeq	r4, r0, r0, ror r5
     d9c:	7f077f3f 	svcvc	0x00077f3f
     da0:	42441a00 	submi	r1, r4, #0, 20

00000da4 <setpowermode>:
//
	if (mode > 3)
		// This is the maximum
		mode = 3;

	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
     da4:	2803      	cmp	r0, #3
     da6:	4603      	mov	r3, r0
     da8:	bf28      	it	cs
     daa:	2303      	movcs	r3, #3
     dac:	4a05      	ldr	r2, [pc, #20]	; (dc4 <setpowermode+0x20>)
     dae:	b2db      	uxtb	r3, r3
     db0:	2801      	cmp	r0, #1
     db2:	7093      	strb	r3, [r2, #2]
     db4:	d904      	bls.n	dc0 <setpowermode+0x1c>
	    (__pi_systat.ondmns & PRCM_DOMAIN_RFCORE) == 0) ?
     db6:	6851      	ldr	r1, [r2, #4]
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
     db8:	f011 0f01 	tst.w	r1, #1
     dbc:	bf18      	it	ne
     dbe:	2301      	movne	r3, #1
     dc0:	70d3      	strb	r3, [r2, #3]
		mode : 1;
}
     dc2:	4770      	bx	lr
     dc4:	20000b7c 	andcs	r0, r0, ip, ror fp

00000dc8 <__pi_release>:
	return sc;
}

#endif

__attribute__ ((noreturn)) void __pi_release () {
     dc8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
     dcc:	b083      	sub	sp, #12
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     dce:	4b79      	ldr	r3, [pc, #484]	; (fb4 <__pi_release+0x1ec>)
     dd0:	af00      	add	r7, sp, #0
     dd2:	f383 8808 	msr	MSP, r3

	__set_MSP ((lword)(STACK_START));

	check_stack_overflow;
     dd6:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
     dda:	681a      	ldr	r2, [r3, #0]
     ddc:	4b76      	ldr	r3, [pc, #472]	; (fb8 <__pi_release+0x1f0>)
     dde:	429a      	cmp	r2, r3
     de0:	d127      	bne.n	e32 <__pi_release+0x6a>
SysCtrlAonSync(void)
{
    //
    // Sync the AON interface
    //
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     de2:	4e76      	ldr	r6, [pc, #472]	; (fbc <__pi_release+0x1f4>)

#ifdef	MONITOR_PIN_SCHED
	_PVS (MONITOR_PIN_SCHED, 1);
#endif
	// Catch up with time
	update_n_wake (MAX_WORD, NO);
     de4:	2100      	movs	r1, #0
     de6:	f64f 70ff 	movw	r0, #65535	; 0xffff
     dea:	f000 f9ed 	bl	11c8 <update_n_wake>

	// Run the first ready process
	for_all_tasks (__pi_curr) {
     dee:	4a74      	ldr	r2, [pc, #464]	; (fc0 <__pi_release+0x1f8>)
     df0:	4b74      	ldr	r3, [pc, #464]	; (fc4 <__pi_release+0x1fc>)
     df2:	6812      	ldr	r2, [r2, #0]
     df4:	601a      	str	r2, [r3, #0]
     df6:	681a      	ldr	r2, [r3, #0]
     df8:	b9fa      	cbnz	r2, e3a <__pi_release+0x72>
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     dfa:	4c73      	ldr	r4, [pc, #460]	; (fc8 <__pi_release+0x200>)
  __ASM volatile ("cpsid i" : : : "memory");
     dfc:	b672      	cpsid	i
	entropy++;
#endif

#else	/* NOT SPIN_WHEN_HALTED */

	__SLEEP;
     dfe:	4d73      	ldr	r5, [pc, #460]	; (fcc <__pi_release+0x204>)
     e00:	782b      	ldrb	r3, [r5, #0]
     e02:	f3c3 0240 	ubfx	r2, r3, #1, #1
     e06:	0798      	lsls	r0, r3, #30
     e08:	607a      	str	r2, [r7, #4]
     e0a:	f100 80cd 	bmi.w	fa8 <__pi_release+0x1e0>
	system_event_count ++;
     e0e:	4a70      	ldr	r2, [pc, #448]	; (fd0 <__pi_release+0x208>)
     e10:	6813      	ldr	r3, [r2, #0]
     e12:	3301      	adds	r3, #1
     e14:	6013      	str	r3, [r2, #0]
	switch (__pi_systat.effpdm) {
     e16:	78ea      	ldrb	r2, [r5, #3]
     e18:	2a01      	cmp	r2, #1
     e1a:	b2d3      	uxtb	r3, r2
     e1c:	d017      	beq.n	e4e <__pi_release+0x86>
     e1e:	2b02      	cmp	r3, #2
     e20:	d031      	beq.n	e86 <__pi_release+0xbe>
     e22:	2b00      	cmp	r3, #0
     e24:	f040 8095 	bne.w	f52 <__pi_release+0x18a>
			__WFI ();
     e28:	bf30      	wfi
  __ASM volatile ("cpsie i" : : : "memory");
     e2a:	b662      	cpsie	i
     e2c:	bf00      	nop
     e2e:	bf00      	nop
     e30:	e7e4      	b.n	dfc <__pi_release+0x34>
	check_stack_overflow;
     e32:	200b      	movs	r0, #11
     e34:	4967      	ldr	r1, [pc, #412]	; (fd4 <__pi_release+0x20c>)
     e36:	f7ff fc09 	bl	64c <__pi_syserror>
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     e3a:	6851      	ldr	r1, [r2, #4]
     e3c:	b129      	cbz	r1, e4a <__pi_release+0x82>
     e3e:	8810      	ldrh	r0, [r2, #0]
     e40:	0704      	lsls	r4, r0, #28
     e42:	d102      	bne.n	e4a <__pi_release+0x82>
			(__pi_curr->code) (tstate (__pi_curr));
     e44:	0900      	lsrs	r0, r0, #4
     e46:	4788      	blx	r1
			goto Redo;
     e48:	e7cc      	b.n	de4 <__pi_release+0x1c>
	for_all_tasks (__pi_curr) {
     e4a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     e4c:	e7d2      	b.n	df4 <__pi_release+0x2c>
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     e4e:	4a62      	ldr	r2, [pc, #392]	; (fd8 <__pi_release+0x210>)
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     e50:	2020      	movs	r0, #32
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     e52:	6813      	ldr	r3, [r2, #0]
     e54:	f043 0301 	orr.w	r3, r3, #1
     e58:	6013      	str	r3, [r2, #0]
//
//*****************************************************************************
__STATIC_INLINE void
PRCMCacheRetentionEnable( void )
{
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     e5a:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
     e5e:	f043 0303 	orr.w	r3, r3, #3
     e62:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     e66:	4b5d      	ldr	r3, [pc, #372]	; (fdc <__pi_release+0x214>)
     e68:	681b      	ldr	r3, [r3, #0]
     e6a:	699b      	ldr	r3, [r3, #24]
     e6c:	4798      	blx	r3
     e6e:	6833      	ldr	r3, [r6, #0]
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     e70:	6823      	ldr	r3, [r4, #0]
     e72:	f043 0304 	orr.w	r3, r3, #4
     e76:	6023      	str	r3, [r4, #0]
			__WFI ();
     e78:	bf30      	wfi
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     e7a:	6823      	ldr	r3, [r4, #0]
     e7c:	f023 0304 	bic.w	r3, r3, #4
     e80:	6023      	str	r3, [r4, #0]
     e82:	6833      	ldr	r3, [r6, #0]
}
     e84:	e7d1      	b.n	e2a <__pi_release+0x62>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     e86:	f04f 0801 	mov.w	r8, #1
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     e8a:	687a      	ldr	r2, [r7, #4]
     e8c:	4b54      	ldr	r3, [pc, #336]	; (fe0 <__pi_release+0x218>)
    // Check the arguments.
    ASSERT((ui32Mode == AONWUC_AUX_WAKEUP) ||
           (ui32Mode == AONWUC_AUX_ALLOW_SLEEP));

    // Wake up the AUX domain.
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     e8e:	f8df b188 	ldr.w	fp, [pc, #392]	; 1018 <__pi_release+0x250>
     e92:	601a      	str	r2, [r3, #0]
     e94:	687b      	ldr	r3, [r7, #4]
			PRCMPowerDomainOff (__pi_systat.ondmns |
     e96:	f8df a144 	ldr.w	sl, [pc, #324]	; fdc <__pi_release+0x214>
     e9a:	f8cb 3000 	str.w	r3, [fp]
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     e9e:	6833      	ldr	r3, [r6, #0]
     ea0:	4b50      	ldr	r3, [pc, #320]	; (fe4 <__pi_release+0x21c>)
//
//*****************************************************************************
__STATIC_INLINE void
PRCMCacheRetentionDisable( void )
{
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     ea2:	f8df 9178 	ldr.w	r9, [pc, #376]	; 101c <__pi_release+0x254>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ea6:	f8c3 8000 	str.w	r8, [r3]
     eaa:	6868      	ldr	r0, [r5, #4]
     eac:	f8da 3000 	ldr.w	r3, [sl]
     eb0:	f040 0020 	orr.w	r0, r0, #32
     eb4:	699b      	ldr	r3, [r3, #24]
     eb6:	4798      	blx	r3
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     eb8:	4b4b      	ldr	r3, [pc, #300]	; (fe8 <__pi_release+0x220>)
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     eba:	2103      	movs	r1, #3
     ebc:	f8c3 8000 	str.w	r8, [r3]
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     ec0:	f8d9 3000 	ldr.w	r3, [r9]
     ec4:	4849      	ldr	r0, [pc, #292]	; (fec <__pi_release+0x224>)
     ec6:	f023 0303 	bic.w	r3, r3, #3
     eca:	f8c9 3000 	str.w	r3, [r9]
     ece:	4b48      	ldr	r3, [pc, #288]	; (ff0 <__pi_release+0x228>)
     ed0:	681a      	ldr	r2, [r3, #0]
     ed2:	6852      	ldr	r2, [r2, #4]
     ed4:	4790      	blx	r2
			SysCtrlSetRechargeBeforePowerDown
     ed6:	6878      	ldr	r0, [r7, #4]
     ed8:	f002 ff78 	bl	3dcc <NOROM_SysCtrlSetRechargeBeforePowerDown>
     edc:	6832      	ldr	r2, [r6, #0]
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     ede:	6822      	ldr	r2, [r4, #0]
     ee0:	f042 0204 	orr.w	r2, r2, #4
     ee4:	6022      	str	r2, [r4, #0]
			__WFI ();
     ee6:	bf30      	wfi
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     ee8:	6822      	ldr	r2, [r4, #0]
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     eea:	4b41      	ldr	r3, [pc, #260]	; (ff0 <__pi_release+0x228>)
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     eec:	f022 0204 	bic.w	r2, r2, #4
     ef0:	6022      	str	r2, [r4, #0]
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     ef2:	681b      	ldr	r3, [r3, #0]
     ef4:	4641      	mov	r1, r8
     ef6:	685b      	ldr	r3, [r3, #4]
     ef8:	483c      	ldr	r0, [pc, #240]	; (fec <__pi_release+0x224>)
     efa:	4798      	blx	r3
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     efc:	f8d9 3000 	ldr.w	r3, [r9]
AONWUCPowerStatusGet(void)
{
    //
    // Return the power status.
    //
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     f00:	4a3c      	ldr	r2, [pc, #240]	; (ff4 <__pi_release+0x22c>)
     f02:	f043 0303 	orr.w	r3, r3, #3
     f06:	f8c9 3000 	str.w	r3, [r9]
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     f0a:	f8cb 8000 	str.w	r8, [fp]
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     f0e:	6813      	ldr	r3, [r2, #0]
			while (!(AONWUCPowerStatusGet () &
     f10:	0699      	lsls	r1, r3, #26
     f12:	d5fc      	bpl.n	f0e <__pi_release+0x146>
			PRCMPowerDomainOn (__pi_systat.ondmns);
     f14:	f8da 3000 	ldr.w	r3, [sl]
     f18:	6868      	ldr	r0, [r5, #4]
     f1a:	695b      	ldr	r3, [r3, #20]
     f1c:	4798      	blx	r3
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     f1e:	4d2f      	ldr	r5, [pc, #188]	; (fdc <__pi_release+0x214>)
     f20:	4b2a      	ldr	r3, [pc, #168]	; (fcc <__pi_release+0x204>)
     f22:	6858      	ldr	r0, [r3, #4]
     f24:	682b      	ldr	r3, [r5, #0]
     f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     f28:	4798      	blx	r3
     f2a:	2801      	cmp	r0, #1
     f2c:	d1f8      	bne.n	f20 <__pi_release+0x158>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     f2e:	4b2d      	ldr	r3, [pc, #180]	; (fe4 <__pi_release+0x21c>)
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     f30:	4a2d      	ldr	r2, [pc, #180]	; (fe8 <__pi_release+0x220>)
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     f32:	6018      	str	r0, [r3, #0]
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     f34:	2300      	movs	r3, #0
     f36:	6013      	str	r3, [r2, #0]
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     f38:	4b29      	ldr	r3, [pc, #164]	; (fe0 <__pi_release+0x218>)
     f3a:	6018      	str	r0, [r3, #0]
     f3c:	6833      	ldr	r3, [r6, #0]
			SysCtrlAdjustRechargeAfterPowerDown ();
     f3e:	f003 f855 	bl	3fec <NOROM_SysCtrlAdjustRechargeAfterPowerDown>
			reinit_uart ();
     f42:	f7ff fcbd 	bl	8c0 <reinit_uart>
     f46:	4a2c      	ldr	r2, [pc, #176]	; (ff8 <__pi_release+0x230>)
     f48:	6813      	ldr	r3, [r2, #0]
     f4a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
     f4e:	6013      	str	r3, [r2, #0]
}
     f50:	e76b      	b.n	e2a <__pi_release+0x62>
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     f52:	4b2a      	ldr	r3, [pc, #168]	; (ffc <__pi_release+0x234>)
     f54:	2001      	movs	r0, #1
     f56:	681b      	ldr	r3, [r3, #0]
     f58:	68db      	ldr	r3, [r3, #12]
     f5a:	4798      	blx	r3
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     f5c:	4a28      	ldr	r2, [pc, #160]	; (1000 <__pi_release+0x238>)
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     f5e:	4929      	ldr	r1, [pc, #164]	; (1004 <__pi_release+0x23c>)
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     f60:	6813      	ldr	r3, [r2, #0]
     f62:	f023 0301 	bic.w	r3, r3, #1
     f66:	6013      	str	r3, [r2, #0]
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     f68:	4b27      	ldr	r3, [pc, #156]	; (1008 <__pi_release+0x240>)
     f6a:	681a      	ldr	r2, [r3, #0]
     f6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
     f70:	601a      	str	r2, [r3, #0]
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     f72:	f04f 323f 	mov.w	r2, #1061109567	; 0x3f3f3f3f
     f76:	600a      	str	r2, [r1, #0]
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     f78:	604a      	str	r2, [r1, #4]
     f7a:	6832      	ldr	r2, [r6, #0]
__STATIC_INLINE void
AONWUCShutDownEnable(void)
{
    // Ensure the JTAG domain is turned off;
    // otherwise MCU domain can't be turned off.
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     f7c:	687a      	ldr	r2, [r7, #4]
     f7e:	601a      	str	r2, [r3, #0]

    // Enable shutdown of the device.
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     f80:	687a      	ldr	r2, [r7, #4]
     f82:	4b22      	ldr	r3, [pc, #136]	; (100c <__pi_release+0x244>)
     f84:	601a      	str	r2, [r3, #0]
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     f86:	2201      	movs	r2, #1
     f88:	4b21      	ldr	r3, [pc, #132]	; (1010 <__pi_release+0x248>)
     f8a:	601a      	str	r2, [r3, #0]
     f8c:	6833      	ldr	r3, [r6, #0]
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     f8e:	4a19      	ldr	r2, [pc, #100]	; (ff4 <__pi_release+0x22c>)
     f90:	6813      	ldr	r3, [r2, #0]
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     f92:	069b      	lsls	r3, r3, #26
     f94:	d4fc      	bmi.n	f90 <__pi_release+0x1c8>
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     f96:	2201      	movs	r2, #1
     f98:	4b1e      	ldr	r3, [pc, #120]	; (1014 <__pi_release+0x24c>)
			PRCMPowerDomainOff (
     f9a:	2037      	movs	r0, #55	; 0x37
     f9c:	601a      	str	r2, [r3, #0]
     f9e:	4b0f      	ldr	r3, [pc, #60]	; (fdc <__pi_release+0x214>)
     fa0:	681b      	ldr	r3, [r3, #0]
     fa2:	699b      	ldr	r3, [r3, #24]
     fa4:	4798      	blx	r3
			goto DeepSleep;
     fa6:	e763      	b.n	e70 <__pi_release+0xa8>
	__SLEEP;
     fa8:	782b      	ldrb	r3, [r5, #0]
     faa:	f36f 0341 	bfc	r3, #1, #1
     fae:	702b      	strb	r3, [r5, #0]
     fb0:	b662      	cpsie	i

#endif	/* SPIN_WHEN_HALTED */

	goto Redo;
     fb2:	e717      	b.n	de4 <__pi_release+0x1c>
     fb4:	20005000 	andcs	r5, r0, r0
     fb8:	a778b779 			; <UNDEFINED> instruction: 0xa778b779
     fbc:	4009202c 	andmi	r2, r9, ip, lsr #32
     fc0:	20000550 	andcs	r0, r0, r0, asr r5
     fc4:	20000b98 	mulcs	r0, r8, fp
     fc8:	e000ed10 	and	lr, r0, r0, lsl sp
     fcc:	20000b7c 	andcs	r0, r0, ip, ror fp
     fd0:	20000b70 	andcs	r0, r0, r0, ror fp
     fd4:	00004587 	andeq	r4, r0, r7, lsl #11
     fd8:	4008218c 	andmi	r2, r8, ip, lsl #3
     fdc:	100001b8 			; <UNDEFINED> instruction: 0x100001b8
     fe0:	4009400c 	andmi	r4, r9, ip
     fe4:	60082028 	andvs	r2, r8, r8, lsr #32
     fe8:	43040180 	movwmi	r0, #16768	; 0x4180
     fec:	40034000 	andmi	r4, r3, r0
     ff0:	100001d8 	ldrdne	r0, [r0], -r8
     ff4:	40091014 	andmi	r1, r9, r4, lsl r0
     ff8:	40001038 	andmi	r1, r0, r8, lsr r0
     ffc:	100001a0 	andne	r0, r0, r0, lsr #3
    1000:	40091010 	andmi	r1, r9, r0, lsl r0
    1004:	40093000 	andmi	r3, r9, r0
    1008:	40091040 	andmi	r1, r9, r0, asr #32
    100c:	43220420 			; <UNDEFINED> instruction: 0x43220420
    1010:	40091018 	andmi	r1, r9, r8, lsl r0
    1014:	43040188 	movwmi	r0, #16776	; 0x4188
    1018:	43220200 			; <UNDEFINED> instruction: 0x43220200
    101c:	40082224 	andmi	r2, r8, r4, lsr #4

00001020 <halt>:
	cli_tim;
    1020:	2400      	movs	r4, #0
void halt (void) {
    1022:	b508      	push	{r3, lr}
	cli_tim;
    1024:	4b07      	ldr	r3, [pc, #28]	; (1044 <halt+0x24>)
	diag ("PicOS halted");
    1026:	4808      	ldr	r0, [pc, #32]	; (1048 <halt+0x28>)
	cli_tim;
    1028:	601c      	str	r4, [r3, #0]
	diag ("PicOS halted");
    102a:	f000 fb1f 	bl	166c <diag>
	mdelay (500);
    102e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1032:	f7ff fab7 	bl	5a4 <mdelay>
	setpowermode (2);
    1036:	2002      	movs	r0, #2
    1038:	f7ff feb4 	bl	da4 <setpowermode>
	__PCB = NULL;
    103c:	4b03      	ldr	r3, [pc, #12]	; (104c <halt+0x2c>)
    103e:	601c      	str	r4, [r3, #0]
	release;
    1040:	f7ff fec2 	bl	dc8 <__pi_release>
    1044:	43240280 			; <UNDEFINED> instruction: 0x43240280
    1048:	0000458a 	andeq	r4, r0, sl, lsl #11
    104c:	20000550 	andcs	r0, r0, r0, asr r5

00001050 <main>:

#include "scheduler.h"

}

int main (void) {
    1050:	b510      	push	{r4, lr}
    1052:	4b11      	ldr	r3, [pc, #68]	; (1098 <main+0x48>)

#if	STACK_GUARD
	{
		register sint i;
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    1054:	4911      	ldr	r1, [pc, #68]	; (109c <main+0x4c>)
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    1056:	4a12      	ldr	r2, [pc, #72]	; (10a0 <main+0x50>)
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    1058:	f843 1b04 	str.w	r1, [r3], #4
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    105c:	4293      	cmp	r3, r2
    105e:	d1fb      	bne.n	1058 <main+0x8>
#if	TCV_PRESENT
	tcv_init ();
#endif

	// For standby mode wakeup on timer
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    1060:	4c10      	ldr	r4, [pc, #64]	; (10a4 <main+0x54>)
	system_init ();
    1062:	f7ff fdc3 	bl	bec <system_init>
	tcv_init ();
    1066:	f000 fe8d 	bl	1d84 <tcv_init>
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    106a:	6823      	ldr	r3, [r4, #0]
    106c:	2129      	movs	r1, #41	; 0x29
    106e:	2000      	movs	r0, #0
    1070:	681b      	ldr	r3, [r3, #0]
    1072:	4798      	blx	r3
	// Edge on any I/O, will it take care of UART? No, of course not!
	// But it does work for buttons.
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
    1074:	6823      	ldr	r3, [r4, #0]
    1076:	2120      	movs	r1, #32
    1078:	681b      	ldr	r3, [r3, #0]
    107a:	2001      	movs	r0, #1
    107c:	4798      	blx	r3

	// Assume root process identity
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    107e:	2100      	movs	r1, #0
    1080:	4809      	ldr	r0, [pc, #36]	; (10a8 <main+0x58>)
    1082:	f000 facd 	bl	1620 <__pi_fork>
    1086:	4b09      	ldr	r3, [pc, #36]	; (10ac <main+0x5c>)
	// Delay root startup for 16 msec to make sure that the drivers go
	// first
	delay (16, 0);
    1088:	2100      	movs	r1, #0
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    108a:	6018      	str	r0, [r3, #0]
	delay (16, 0);
    108c:	2010      	movs	r0, #16
    108e:	f000 f951 	bl	1334 <delay>
    1092:	b662      	cpsie	i

	sti;

	__pi_release ();
    1094:	f7ff fe98 	bl	dc8 <__pi_release>
    1098:	20004bfc 	strdcs	r4, [r0], -ip
    109c:	a778b779 			; <UNDEFINED> instruction: 0xa778b779
    10a0:	20004fbc 			; <UNDEFINED> instruction: 0x20004fbc
    10a4:	10000184 	andne	r0, r0, r4, lsl #3
    10a8:	00000299 	muleq	r0, r9, r2
    10ac:	20000b98 	mulcs	r0, r8, fp

000010b0 <killev>:
	}

	return i->Timer - __pi_old;
}

static void killev (__pi_pcb_t *pid) {
    10b0:	b570      	push	{r4, r5, r6, lr}
	aword wfun;
	int j;
	__pi_pcb_t *i;

	wfun = (aword)(pid->code);
	for_all_tasks (i) {
    10b2:	4b0d      	ldr	r3, [pc, #52]	; (10e8 <killev+0x38>)
	wfun = (aword)(pid->code);
    10b4:	6846      	ldr	r6, [r0, #4]
	for_all_tasks (i) {
    10b6:	681a      	ldr	r2, [r3, #0]
    10b8:	b1aa      	cbz	r2, 10e6 <killev+0x36>
		for (j = 0; j < nevents (i); j++) {
    10ba:	4614      	mov	r4, r2
    10bc:	f834 1b10 	ldrh.w	r1, [r4], #16
    10c0:	2300      	movs	r3, #0
    10c2:	f001 0107 	and.w	r1, r1, #7
    10c6:	e001      	b.n	10cc <killev+0x1c>
			if (i->Events [j] . Event == (aword)pid
			    || i->Events [j] . Event == wfun
    10c8:	42b5      	cmp	r5, r6
    10ca:	d006      	beq.n	10da <killev+0x2a>
		for (j = 0; j < nevents (i); j++) {
    10cc:	4299      	cmp	r1, r3
    10ce:	dd08      	ble.n	10e2 <killev+0x32>
			if (i->Events [j] . Event == (aword)pid
    10d0:	f854 5033 	ldr.w	r5, [r4, r3, lsl #3]
    10d4:	3301      	adds	r3, #1
    10d6:	42a8      	cmp	r0, r5
    10d8:	d1f6      	bne.n	10c8 <killev+0x18>
			    ) {
				wakeupev (i, j);
    10da:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    10de:	889b      	ldrh	r3, [r3, #4]
    10e0:	8013      	strh	r3, [r2, #0]
	for_all_tasks (i) {
    10e2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    10e4:	e7e8      	b.n	10b8 <killev+0x8>
				break;
			}
		}
	}
}
    10e6:	bd70      	pop	{r4, r5, r6, pc}
    10e8:	20000550 	andcs	r0, r0, r0, asr r5

000010ec <qfree>:
	// volatile
#endif
	aword *chunk, *cc;

	cc = (aword*)(mpools + MA_NP);
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    10ec:	4a1d      	ldr	r2, [pc, #116]	; (1164 <qfree+0x78>)
static void qfree (aword *ch) {
    10ee:	b530      	push	{r4, r5, lr}
    10f0:	4614      	mov	r4, r2
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    10f2:	6813      	ldr	r3, [r2, #0]
    10f4:	b93b      	cbnz	r3, 1106 <qfree+0x1a>
		}
	}

	/* Insert */
	cc = (aword*)(mpools + MA_NP);
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    10f6:	6823      	ldr	r3, [r4, #0]
	cc = (aword*)(mpools + MA_NP);
    10f8:	4a1a      	ldr	r2, [pc, #104]	; (1164 <qfree+0x78>)
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    10fa:	bb53      	cbnz	r3, 1152 <qfree+0x66>
		chunk = m_nextp (chunk))
			if (m_size (chunk) >= m_size (ch))
				break;

	m_setnextp (ch, chunk);
    10fc:	6003      	str	r3, [r0, #0]
	m_setnextp (cc, ch);

#if	MALLOC_SAFE
	m_magic (ch) = MALLOC_MAGIC;
    10fe:	4b1a      	ldr	r3, [pc, #104]	; (1168 <qfree+0x7c>)
	m_setnextp (cc, ch);
    1100:	6010      	str	r0, [r2, #0]
	m_magic (ch) = MALLOC_MAGIC;
    1102:	6043      	str	r3, [r0, #4]
#endif

#undef	MA_NP
}
    1104:	bd30      	pop	{r4, r5, pc}
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    1106:	e953 1501 	ldrd	r1, r5, [r3, #-4]
    110a:	3101      	adds	r1, #1
    110c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    1110:	4288      	cmp	r0, r1
    1112:	d10b      	bne.n	112c <qfree+0x40>
			m_setnextp (cc, m_nextp (chunk));
    1114:	6015      	str	r5, [r2, #0]
			m_size (chunk) += m_hdrlen + m_size (ch);
    1116:	f850 0c04 	ldr.w	r0, [r0, #-4]
    111a:	f853 1c04 	ldr.w	r1, [r3, #-4]
    111e:	4401      	add	r1, r0
    1120:	4618      	mov	r0, r3
    1122:	3101      	adds	r1, #1
    1124:	f843 1c04 	str.w	r1, [r3, #-4]
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    1128:	681b      	ldr	r3, [r3, #0]
    112a:	e7e3      	b.n	10f4 <qfree+0x8>
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    112c:	f850 1c04 	ldr.w	r1, [r0, #-4]
    1130:	3101      	adds	r1, #1
    1132:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    1136:	428b      	cmp	r3, r1
			m_setnextp (cc, m_nextp (chunk));
    1138:	bf03      	ittte	eq
    113a:	6015      	streq	r5, [r2, #0]
			m_size (ch) += m_hdrlen + m_size (chunk);
    113c:	f850 1c04 	ldreq.w	r1, [r0, #-4]
    1140:	f853 5c04 	ldreq.w	r5, [r3, #-4]
    1144:	461a      	movne	r2, r3
    1146:	bf02      	ittt	eq
    1148:	1949      	addeq	r1, r1, r5
    114a:	3101      	addeq	r1, #1
    114c:	f840 1c04 	streq.w	r1, [r0, #-4]
    1150:	e7ea      	b.n	1128 <qfree+0x3c>
			if (m_size (chunk) >= m_size (ch))
    1152:	f853 4c04 	ldr.w	r4, [r3, #-4]
    1156:	f850 1c04 	ldr.w	r1, [r0, #-4]
    115a:	428c      	cmp	r4, r1
    115c:	d2ce      	bcs.n	10fc <qfree+0x10>
		chunk = m_nextp (chunk))
    115e:	461a      	mov	r2, r3
    1160:	681b      	ldr	r3, [r3, #0]
    1162:	e7ca      	b.n	10fa <qfree+0xe>
    1164:	20000564 	andcs	r0, r0, r4, ror #10
    1168:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}

0000116c <dgout>:
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    116c:	4a03      	ldr	r2, [pc, #12]	; (117c <dgout+0x10>)
    116e:	6813      	ldr	r3, [r2, #0]

#if	dbg_level != 0 || DIAG_MESSAGES

static void dgout (word c) {

	diag_wait (a);
    1170:	071b      	lsls	r3, r3, #28
    1172:	d4fc      	bmi.n	116e <dgout+0x2>
	diag_wchar (c, a);
    1174:	4b02      	ldr	r3, [pc, #8]	; (1180 <dgout+0x14>)
    1176:	b2c0      	uxtb	r0, r0
    1178:	6018      	str	r0, [r3, #0]
}
    117a:	4770      	bx	lr
    117c:	40001018 	andmi	r1, r0, r8, lsl r0
    1180:	40001000 	andmi	r1, r0, r0

00001184 <__pi_badstate>:
	syserror (ESTATE, "state");
    1184:	2007      	movs	r0, #7
void __pi_badstate (void) {
    1186:	b508      	push	{r3, lr}
	syserror (ESTATE, "state");
    1188:	4901      	ldr	r1, [pc, #4]	; (1190 <__pi_badstate+0xc>)
    118a:	f7ff fa5f 	bl	64c <__pi_syserror>
    118e:	bf00      	nop
    1190:	000045dc 	ldrdeq	r4, [r0], -ip

00001194 <utimer_add>:
	for (i = 0; i < MAX_UTIMERS; i++)
    1194:	4a08      	ldr	r2, [pc, #32]	; (11b8 <utimer_add+0x24>)
void utimer_add (address ut) {
    1196:	4603      	mov	r3, r0
    1198:	4611      	mov	r1, r2
	for (i = 0; i < MAX_UTIMERS; i++)
    119a:	2000      	movs	r0, #0
void utimer_add (address ut) {
    119c:	b510      	push	{r4, lr}
		if (__pi_utims [i] == NULL)
    119e:	f852 4b04 	ldr.w	r4, [r2], #4
    11a2:	b12c      	cbz	r4, 11b0 <utimer_add+0x1c>
	for (i = 0; i < MAX_UTIMERS; i++)
    11a4:	3001      	adds	r0, #1
    11a6:	2804      	cmp	r0, #4
    11a8:	d1f9      	bne.n	119e <utimer_add+0xa>
		syserror (ERESOURCE, "ut a");
    11aa:	4904      	ldr	r1, [pc, #16]	; (11bc <utimer_add+0x28>)
    11ac:	f7ff fa4e 	bl	64c <__pi_syserror>
	__pi_utims [i] = ut;
    11b0:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
}
    11b4:	bd10      	pop	{r4, pc}
    11b6:	bf00      	nop
    11b8:	20000b88 	andcs	r0, r0, r8, lsl #23
    11bc:	000045e2 	andeq	r4, r0, r2, ror #11

000011c0 <__pi_utimer_set>:
	*t = v;
    11c0:	8001      	strh	r1, [r0, #0]
	TCI_RUN_AUXILIARY_TIMER;
    11c2:	f7ff ba8d 	b.w	6e0 <tci_run_auxiliary_timer>
	...

000011c8 <update_n_wake>:
void update_n_wake (word min, Boolean force) {
    11c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11ca:	4604      	mov	r4, r0
	if (TCI_UPDATE_DELAY_TICKS (force))
    11cc:	4608      	mov	r0, r1
    11ce:	f7ff fb25 	bl	81c <tci_update_delay_ticks>
    11d2:	2800      	cmp	r0, #0
    11d4:	d154      	bne.n	1280 <update_n_wake+0xb8>
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    11d6:	4b2b      	ldr	r3, [pc, #172]	; (1284 <update_n_wake+0xbc>)
    11d8:	4d2b      	ldr	r5, [pc, #172]	; (1288 <update_n_wake+0xc0>)
    11da:	8819      	ldrh	r1, [r3, #0]
    11dc:	882a      	ldrh	r2, [r5, #0]
    11de:	b289      	uxth	r1, r1
    11e0:	428a      	cmp	r2, r1
    11e2:	492a      	ldr	r1, [pc, #168]	; (128c <update_n_wake+0xc4>)
    11e4:	d803      	bhi.n	11ee <update_n_wake+0x26>
    11e6:	8808      	ldrh	r0, [r1, #0]
    11e8:	b280      	uxth	r0, r0
    11ea:	4282      	cmp	r2, r0
    11ec:	d20d      	bcs.n	120a <update_n_wake+0x42>
    11ee:	881e      	ldrh	r6, [r3, #0]
    11f0:	8808      	ldrh	r0, [r1, #0]
    11f2:	b2b6      	uxth	r6, r6
    11f4:	b280      	uxth	r0, r0
    11f6:	4286      	cmp	r6, r0
    11f8:	d236      	bcs.n	1268 <update_n_wake+0xa0>
    11fa:	8818      	ldrh	r0, [r3, #0]
    11fc:	b280      	uxth	r0, r0
    11fe:	4282      	cmp	r2, r0
    1200:	d903      	bls.n	120a <update_n_wake+0x42>
    1202:	8808      	ldrh	r0, [r1, #0]
    1204:	b280      	uxth	r0, r0
    1206:	4282      	cmp	r2, r0
    1208:	d32e      	bcc.n	1268 <update_n_wake+0xa0>
		for_all_tasks (i) {
    120a:	4a21      	ldr	r2, [pc, #132]	; (1290 <update_n_wake+0xc8>)
    120c:	6810      	ldr	r0, [r2, #0]
    120e:	b918      	cbnz	r0, 1218 <update_n_wake+0x50>
	__pi_mintk = znew + min;
    1210:	8818      	ldrh	r0, [r3, #0]
    1212:	4404      	add	r4, r0
    1214:	802c      	strh	r4, [r5, #0]
    1216:	e02c      	b.n	1272 <update_n_wake+0xaa>
			if (!twaiting (i))
    1218:	8806      	ldrh	r6, [r0, #0]
    121a:	0732      	lsls	r2, r6, #28
    121c:	d51b      	bpl.n	1256 <update_n_wake+0x8e>
			if (twakecnd (__pi_old, znew, i->Timer)) {
    121e:	881f      	ldrh	r7, [r3, #0]
    1220:	8842      	ldrh	r2, [r0, #2]
    1222:	b2bf      	uxth	r7, r7
    1224:	42ba      	cmp	r2, r7
    1226:	d803      	bhi.n	1230 <update_n_wake+0x68>
    1228:	880f      	ldrh	r7, [r1, #0]
    122a:	b2bf      	uxth	r7, r7
    122c:	42ba      	cmp	r2, r7
    122e:	d20f      	bcs.n	1250 <update_n_wake+0x88>
    1230:	f8b3 c000 	ldrh.w	ip, [r3]
    1234:	880f      	ldrh	r7, [r1, #0]
    1236:	fa1f fc8c 	uxth.w	ip, ip
    123a:	b2bf      	uxth	r7, r7
    123c:	45bc      	cmp	ip, r7
    123e:	d20c      	bcs.n	125a <update_n_wake+0x92>
    1240:	881f      	ldrh	r7, [r3, #0]
    1242:	b2bf      	uxth	r7, r7
    1244:	42ba      	cmp	r2, r7
    1246:	d903      	bls.n	1250 <update_n_wake+0x88>
    1248:	880f      	ldrh	r7, [r1, #0]
    124a:	b2bf      	uxth	r7, r7
    124c:	42ba      	cmp	r2, r7
    124e:	d304      	bcc.n	125a <update_n_wake+0x92>
				wakeuptm (i);
    1250:	f026 060f 	bic.w	r6, r6, #15
    1254:	8006      	strh	r6, [r0, #0]
		for_all_tasks (i) {
    1256:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    1258:	e7d9      	b.n	120e <update_n_wake+0x46>
				d = i->Timer - znew;
    125a:	881e      	ldrh	r6, [r3, #0]
    125c:	1b92      	subs	r2, r2, r6
    125e:	b292      	uxth	r2, r2
    1260:	4294      	cmp	r4, r2
    1262:	bf28      	it	cs
    1264:	4614      	movcs	r4, r2
    1266:	e7f6      	b.n	1256 <update_n_wake+0x8e>
		if ((word)(__pi_mintk - znew) < min) 
    1268:	8818      	ldrh	r0, [r3, #0]
    126a:	1a12      	subs	r2, r2, r0
    126c:	b292      	uxth	r2, r2
    126e:	4294      	cmp	r4, r2
    1270:	d9ce      	bls.n	1210 <update_n_wake+0x48>
	__pi_old = znew;
    1272:	881b      	ldrh	r3, [r3, #0]
    1274:	b29b      	uxth	r3, r3
    1276:	800b      	strh	r3, [r1, #0]
}
    1278:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TCI_RUN_DELAY_TIMER;
    127c:	f7ff ba10 	b.w	6a0 <tci_run_delay_timer>
}
    1280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1282:	bf00      	nop
    1284:	20000b84 	andcs	r0, r0, r4, lsl #23
    1288:	20000b78 	andcs	r0, r0, r8, ror fp
    128c:	20000b7a 	andcs	r0, r0, sl, ror fp
    1290:	20000550 	andcs	r0, r0, r0, asr r5

00001294 <proceed>:
void proceed (word state) {
    1294:	b508      	push	{r3, lr}
	prcdstate (__pi_curr, state);
    1296:	4b03      	ldr	r3, [pc, #12]	; (12a4 <proceed+0x10>)
    1298:	0100      	lsls	r0, r0, #4
    129a:	681b      	ldr	r3, [r3, #0]
    129c:	8018      	strh	r0, [r3, #0]
	release;
    129e:	f7ff fd93 	bl	dc8 <__pi_release>
    12a2:	bf00      	nop
    12a4:	20000b98 	mulcs	r0, r8, fp

000012a8 <__pi_wait>:
void __pi_wait (aword event, word state) {
    12a8:	b510      	push	{r4, lr}
	sint j = nevents (__pi_curr);
    12aa:	4b0a      	ldr	r3, [pc, #40]	; (12d4 <__pi_wait+0x2c>)
    12ac:	681c      	ldr	r4, [r3, #0]
    12ae:	8823      	ldrh	r3, [r4, #0]
	if (j >= MAX_EVENTS_PER_TASK)
    12b0:	f013 0f04 	tst.w	r3, #4
    12b4:	f003 0207 	and.w	r2, r3, #7
    12b8:	d003      	beq.n	12c2 <__pi_wait+0x1a>
		syserror (ENEVENTS, "sw");
    12ba:	2005      	movs	r0, #5
    12bc:	4906      	ldr	r1, [pc, #24]	; (12d8 <__pi_wait+0x30>)
    12be:	f7ff f9c5 	bl	64c <__pi_syserror>
	setestate (__pi_curr->Events [j], state, event);
    12c2:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    12c6:	0109      	lsls	r1, r1, #4
	incwait (__pi_curr);
    12c8:	3301      	adds	r3, #1
	setestate (__pi_curr->Events [j], state, event);
    12ca:	8191      	strh	r1, [r2, #12]
    12cc:	6110      	str	r0, [r2, #16]
	incwait (__pi_curr);
    12ce:	8023      	strh	r3, [r4, #0]
}
    12d0:	bd10      	pop	{r4, pc}
    12d2:	bf00      	nop
    12d4:	20000b98 	mulcs	r0, r8, fp
    12d8:	000045e7 	andeq	r4, r0, r7, ror #11

000012dc <__pi_trigger>:
void __pi_trigger (aword event) {
    12dc:	b530      	push	{r4, r5, lr}
	for_all_tasks (i) {
    12de:	4b0b      	ldr	r3, [pc, #44]	; (130c <__pi_trigger+0x30>)
    12e0:	681a      	ldr	r2, [r3, #0]
    12e2:	b192      	cbz	r2, 130a <__pi_trigger+0x2e>
		for (j = 0; j < nevents (i); j++) {
    12e4:	4614      	mov	r4, r2
    12e6:	2300      	movs	r3, #0
    12e8:	f834 1b10 	ldrh.w	r1, [r4], #16
    12ec:	f001 0107 	and.w	r1, r1, #7
    12f0:	4299      	cmp	r1, r3
    12f2:	dd08      	ble.n	1306 <__pi_trigger+0x2a>
			if (i->Events [j] . Event == event) {
    12f4:	f854 5033 	ldr.w	r5, [r4, r3, lsl #3]
    12f8:	3301      	adds	r3, #1
    12fa:	4285      	cmp	r5, r0
    12fc:	d1f8      	bne.n	12f0 <__pi_trigger+0x14>
				wakeupev (i, j);
    12fe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1302:	889b      	ldrh	r3, [r3, #4]
    1304:	8013      	strh	r3, [r2, #0]
	for_all_tasks (i) {
    1306:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    1308:	e7eb      	b.n	12e2 <__pi_trigger+0x6>
}
    130a:	bd30      	pop	{r4, r5, pc}
    130c:	20000550 	andcs	r0, r0, r0, asr r5

00001310 <__pi_join>:
aword __pi_join (aword pid, word st) {
    1310:	b510      	push	{r4, lr}
    1312:	4604      	mov	r4, r0
	for_all_tasks (i) {
    1314:	4b06      	ldr	r3, [pc, #24]	; (1330 <__pi_join+0x20>)
    1316:	681b      	ldr	r3, [r3, #0]
    1318:	b90b      	cbnz	r3, 131e <__pi_join+0xe>
	return 0;
    131a:	461c      	mov	r4, r3
    131c:	e004      	b.n	1328 <__pi_join+0x18>
		if ((aword)i == pid) {
    131e:	42a3      	cmp	r3, r4
    1320:	d104      	bne.n	132c <__pi_join+0x1c>
			__pi_wait (pid, st);
    1322:	4620      	mov	r0, r4
    1324:	f7ff ffc0 	bl	12a8 <__pi_wait>
}
    1328:	4620      	mov	r0, r4
    132a:	bd10      	pop	{r4, pc}
	for_all_tasks (i) {
    132c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    132e:	e7f3      	b.n	1318 <__pi_join+0x8>
    1330:	20000550 	andcs	r0, r0, r0, asr r5

00001334 <delay>:
void delay (word d, word state) {
    1334:	b538      	push	{r3, r4, r5, lr}
    1336:	4604      	mov	r4, r0
	settstate (__pi_curr, state);
    1338:	4d0a      	ldr	r5, [pc, #40]	; (1364 <delay+0x30>)
    133a:	682a      	ldr	r2, [r5, #0]
    133c:	8813      	ldrh	r3, [r2, #0]
    133e:	f003 0307 	and.w	r3, r3, #7
    1342:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    1346:	8013      	strh	r3, [r2, #0]
	update_n_wake (d, YES);
    1348:	2101      	movs	r1, #1
    134a:	f7ff ff3d 	bl	11c8 <update_n_wake>
	__pi_curr->Timer = __pi_old + d;
    134e:	4b06      	ldr	r3, [pc, #24]	; (1368 <delay+0x34>)
    1350:	8818      	ldrh	r0, [r3, #0]
    1352:	682b      	ldr	r3, [r5, #0]
    1354:	4404      	add	r4, r0
    1356:	805c      	strh	r4, [r3, #2]
	inctimer (__pi_curr);
    1358:	682a      	ldr	r2, [r5, #0]
    135a:	8813      	ldrh	r3, [r2, #0]
    135c:	f043 0308 	orr.w	r3, r3, #8
    1360:	8013      	strh	r3, [r2, #0]
}
    1362:	bd38      	pop	{r3, r4, r5, pc}
    1364:	20000b98 	mulcs	r0, r8, fp
    1368:	20000b7a 	andcs	r0, r0, sl, ror fp

0000136c <running>:
	if (fun == NULL)
    136c:	4603      	mov	r3, r0
    136e:	b910      	cbnz	r0, 1376 <running+0xa>
		return (int) __pi_curr;
    1370:	4b05      	ldr	r3, [pc, #20]	; (1388 <running+0x1c>)
    1372:	6818      	ldr	r0, [r3, #0]
    1374:	4770      	bx	lr
	for_all_tasks (i)
    1376:	4a05      	ldr	r2, [pc, #20]	; (138c <running+0x20>)
    1378:	6810      	ldr	r0, [r2, #0]
    137a:	b900      	cbnz	r0, 137e <running+0x12>
}
    137c:	4770      	bx	lr
		if (i->code == fun)
    137e:	6842      	ldr	r2, [r0, #4]
    1380:	429a      	cmp	r2, r3
    1382:	d0fb      	beq.n	137c <running+0x10>
	for_all_tasks (i)
    1384:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    1386:	e7f8      	b.n	137a <running+0xe>
    1388:	20000b98 	mulcs	r0, r8, fp
    138c:	20000550 	andcs	r0, r0, r0, asr r5

00001390 <__pi_strlen>:
int __pi_strlen (const char *s) {
    1390:	4603      	mov	r3, r0
	for (i = 0; *(s+i) != '\0'; i++);
    1392:	2000      	movs	r0, #0
    1394:	5c1a      	ldrb	r2, [r3, r0]
    1396:	b902      	cbnz	r2, 139a <__pi_strlen+0xa>
}
    1398:	4770      	bx	lr
	for (i = 0; *(s+i) != '\0'; i++);
    139a:	3001      	adds	r0, #1
    139c:	e7fa      	b.n	1394 <__pi_strlen+0x4>

0000139e <__pi_strcpy>:
	while ((Boolean)(*d++ = *s++));
    139e:	3801      	subs	r0, #1
    13a0:	f811 3b01 	ldrb.w	r3, [r1], #1
    13a4:	f800 3f01 	strb.w	r3, [r0, #1]!
    13a8:	2b00      	cmp	r3, #0
    13aa:	d1f9      	bne.n	13a0 <__pi_strcpy+0x2>
}
    13ac:	4770      	bx	lr

000013ae <__pi_memcpy>:
	while (n--)
    13ae:	3801      	subs	r0, #1
    13b0:	440a      	add	r2, r1
    13b2:	4291      	cmp	r1, r2
    13b4:	d100      	bne.n	13b8 <__pi_memcpy+0xa>
}
    13b6:	4770      	bx	lr
		*dest++ = *src++;
    13b8:	f811 3b01 	ldrb.w	r3, [r1], #1
    13bc:	f800 3f01 	strb.w	r3, [r0, #1]!
    13c0:	e7f7      	b.n	13b2 <__pi_memcpy+0x4>

000013c2 <__pi_memset>:
	while (n--)
    13c2:	4402      	add	r2, r0
    13c4:	4290      	cmp	r0, r2
    13c6:	d100      	bne.n	13ca <__pi_memset+0x8>
}
    13c8:	4770      	bx	lr
		*dest++ = c;
    13ca:	f800 1b01 	strb.w	r1, [r0], #1
    13ce:	e7f9      	b.n	13c4 <__pi_memset+0x2>

000013d0 <adddevfunc>:
void adddevfunc (devreqfun_t rf, int loc) {
    13d0:	b508      	push	{r3, lr}
	if (loc < 0 || loc >= MAX_DEVICES)
    13d2:	b119      	cbz	r1, 13dc <adddevfunc+0xc>
		syserror (EREQPAR, "addv");
    13d4:	2003      	movs	r0, #3
    13d6:	4905      	ldr	r1, [pc, #20]	; (13ec <adddevfunc+0x1c>)
		syserror (ERESOURCE, "addv");
    13d8:	f7ff f938 	bl	64c <__pi_syserror>
	if (ioreq [loc] != NULL)
    13dc:	4b04      	ldr	r3, [pc, #16]	; (13f0 <adddevfunc+0x20>)
    13de:	681a      	ldr	r2, [r3, #0]
    13e0:	b112      	cbz	r2, 13e8 <adddevfunc+0x18>
		syserror (ERESOURCE, "addv");
    13e2:	2004      	movs	r0, #4
    13e4:	4901      	ldr	r1, [pc, #4]	; (13ec <adddevfunc+0x1c>)
    13e6:	e7f7      	b.n	13d8 <adddevfunc+0x8>
	ioreq [loc] = rf;
    13e8:	6018      	str	r0, [r3, #0]
}
    13ea:	bd08      	pop	{r3, pc}
    13ec:	000045ea 	andeq	r4, r0, sl, ror #11
    13f0:	20000554 	andcs	r0, r0, r4, asr r5

000013f4 <io>:
sint io (word retry, word dev, word operation, char *buf, word len) {
    13f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    13f8:	4604      	mov	r4, r0
    13fa:	4616      	mov	r6, r2
    13fc:	461d      	mov	r5, r3
    13fe:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1402:	b921      	cbnz	r1, 140e <io+0x1a>
    1404:	f8df 9084 	ldr.w	r9, [pc, #132]	; 148c <io+0x98>
    1408:	f8d9 3000 	ldr.w	r3, [r9]
    140c:	b91b      	cbnz	r3, 1416 <io+0x22>
		syserror (ENODEVICE, "io");
    140e:	2001      	movs	r0, #1
    1410:	491d      	ldr	r1, [pc, #116]	; (1488 <io+0x94>)
    1412:	f7ff f91b 	bl	64c <__pi_syserror>
	if (len == 0)
    1416:	f1b8 0f00 	cmp.w	r8, #0
    141a:	d028      	beq.n	146e <io+0x7a>
	ret = (ioreq [dev]) (operation, buf, len);
    141c:	4642      	mov	r2, r8
    141e:	4629      	mov	r1, r5
    1420:	4630      	mov	r0, r6
    1422:	4798      	blx	r3
	if (ret >= 0)
    1424:	2800      	cmp	r0, #0
    1426:	da23      	bge.n	1470 <io+0x7c>
	if (ret == -1) {
    1428:	1c41      	adds	r1, r0, #1
    142a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    142e:	d108      	bne.n	1442 <io+0x4e>
		if (retry == WNONE)
    1430:	429c      	cmp	r4, r3
    1432:	d01c      	beq.n	146e <io+0x7a>
		iowait (dev, operation, retry);
    1434:	4621      	mov	r1, r4
    1436:	f5a6 7081 	sub.w	r0, r6, #258	; 0x102
    143a:	f7ff ff35 	bl	12a8 <__pi_wait>
			release;
    143e:	f7ff fcc3 	bl	dc8 <__pi_release>
	if (ret == -2) {
    1442:	1c82      	adds	r2, r0, #2
    1444:	d116      	bne.n	1474 <io+0x80>
		if (retry != WNONE) {
    1446:	429c      	cmp	r4, r3
    1448:	f8d9 9000 	ldr.w	r9, [r9]
    144c:	d00a      	beq.n	1464 <io+0x70>
			iowait (dev, operation, retry);
    144e:	4621      	mov	r1, r4
    1450:	f5a6 7081 	sub.w	r0, r6, #258	; 0x102
    1454:	f7ff ff28 	bl	12a8 <__pi_wait>
			(ioreq [dev]) (NONE, buf, len);
    1458:	4642      	mov	r2, r8
    145a:	4629      	mov	r1, r5
    145c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1460:	47c8      	blx	r9
    1462:	e7ec      	b.n	143e <io+0x4a>
		(ioreq [dev]) (NONE, buf, len);
    1464:	4642      	mov	r2, r8
    1466:	4629      	mov	r1, r5
    1468:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    146c:	47c8      	blx	r9
		return 0;
    146e:	2000      	movs	r0, #0
}
    1470:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (retry != WNONE) {
    1474:	429c      	cmp	r4, r3
    1476:	d0fa      	beq.n	146e <io+0x7a>
		delay (-ret - 2, retry);
    1478:	f5c0 407f 	rsb	r0, r0, #65280	; 0xff00
    147c:	30fe      	adds	r0, #254	; 0xfe
    147e:	4621      	mov	r1, r4
    1480:	b280      	uxth	r0, r0
    1482:	f7ff ff57 	bl	1334 <delay>
		release;
    1486:	e7da      	b.n	143e <io+0x4a>
    1488:	000045ef 	andeq	r4, r0, pc, ror #11
    148c:	20000554 	andcs	r0, r0, r4, asr r5

00001490 <__pi_malloc_init>:
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1490:	4a0d      	ldr	r2, [pc, #52]	; (14c8 <__pi_malloc_init+0x38>)
void __pi_malloc_init () {
    1492:	b508      	push	{r3, lr}
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1494:	f1c2 5300 	rsb	r3, r2, #536870912	; 0x20000000
    1498:	f503 4398 	add.w	r3, r3, #19456	; 0x4c00
    149c:	089b      	lsrs	r3, r3, #2
    149e:	1e59      	subs	r1, r3, #1
    14a0:	29ff      	cmp	r1, #255	; 0xff
    14a2:	d803      	bhi.n	14ac <__pi_malloc_init+0x1c>
		syserror (ERESOURCE, "mal1");
    14a4:	2004      	movs	r0, #4
    14a6:	4909      	ldr	r1, [pc, #36]	; (14cc <__pi_malloc_init+0x3c>)
    14a8:	f7ff f8d0 	bl	64c <__pi_syserror>
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    14ac:	4908      	ldr	r1, [pc, #32]	; (14d0 <__pi_malloc_init+0x40>)
    14ae:	1d10      	adds	r0, r2, #4
    14b0:	6008      	str	r0, [r1, #0]
	m_magic (mpools [0]) = MALLOC_MAGIC;
    14b2:	2000      	movs	r0, #0
    14b4:	4907      	ldr	r1, [pc, #28]	; (14d4 <__pi_malloc_init+0x44>)
	m_size (mpools [0]) = mlen - m_hdrlen;
    14b6:	3b02      	subs	r3, #2
    14b8:	6013      	str	r3, [r2, #0]
	m_magic (mpools [0]) = MALLOC_MAGIC;
    14ba:	e9c2 0101 	strd	r0, r1, [r2, #4]
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    14be:	4a06      	ldr	r2, [pc, #24]	; (14d8 <__pi_malloc_init+0x48>)
    14c0:	6013      	str	r3, [r2, #0]
    14c2:	4a06      	ldr	r2, [pc, #24]	; (14dc <__pi_malloc_init+0x4c>)
    14c4:	6013      	str	r3, [r2, #0]
}
    14c6:	bd08      	pop	{r3, pc}
    14c8:	20000ba0 	andcs	r0, r0, r0, lsr #23
    14cc:	000045f2 	strdeq	r4, [r0], -r2
    14d0:	20000564 	andcs	r0, r0, r4, ror #10
    14d4:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}
    14d8:	20000558 	andcs	r0, r0, r8, asr r5
    14dc:	20000560 	andcs	r0, r0, r0, ror #10

000014e0 <__pi_free>:
void __pi_free (aword *ch) {
    14e0:	b508      	push	{r3, lr}
	if (ch == NULL)
    14e2:	b1c8      	cbz	r0, 1518 <__pi_free+0x38>
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    14e4:	f850 3c04 	ldr.w	r3, [r0, #-4]
    14e8:	2b00      	cmp	r3, #0
    14ea:	db03      	blt.n	14f4 <__pi_free+0x14>
		syserror (EMALLOC, "malg");
    14ec:	2006      	movs	r0, #6
    14ee:	490b      	ldr	r1, [pc, #44]	; (151c <__pi_free+0x3c>)
    14f0:	f7ff f8ac 	bl	64c <__pi_syserror>
	mcfree [MA_NP] += m_size (ch);
    14f4:	490a      	ldr	r1, [pc, #40]	; (1520 <__pi_free+0x40>)
		m_size (ch) ^= MALLOC_UMASK;
    14f6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
	mcfree [MA_NP] += m_size (ch);
    14fa:	680a      	ldr	r2, [r1, #0]
		m_size (ch) ^= MALLOC_UMASK;
    14fc:	f840 3c04 	str.w	r3, [r0, #-4]
	mcfree [MA_NP] += m_size (ch);
    1500:	4413      	add	r3, r2
    1502:	600b      	str	r3, [r1, #0]
	QFREE;
    1504:	f7ff fdf2 	bl	10ec <qfree>
	if (mevent [MA_NP] . nwait) {
    1508:	4806      	ldr	r0, [pc, #24]	; (1524 <__pi_free+0x44>)
    150a:	7803      	ldrb	r3, [r0, #0]
    150c:	b123      	cbz	r3, 1518 <__pi_free+0x38>
		trigger ((aword)(&(mevent [MA_NP])));
    150e:	f7ff fee5 	bl	12dc <__pi_trigger>
		mevent [MA_NP] . nwait --;
    1512:	7803      	ldrb	r3, [r0, #0]
    1514:	3b01      	subs	r3, #1
    1516:	7003      	strb	r3, [r0, #0]
}
    1518:	bd08      	pop	{r3, pc}
    151a:	bf00      	nop
    151c:	000045f7 	strdeq	r4, [r0], -r7
    1520:	20000558 	andcs	r0, r0, r8, asr r5
    1524:	2000055c 	andcs	r0, r0, ip, asr r5

00001528 <kill>:
void kill (aword pid) {
    1528:	b510      	push	{r4, lr}
	if (pid == 0)
    152a:	b908      	cbnz	r0, 1530 <kill+0x8>
		pid = (aword) __pi_curr;
    152c:	4b0f      	ldr	r3, [pc, #60]	; (156c <kill+0x44>)
    152e:	6818      	ldr	r0, [r3, #0]
	j = NULL;
    1530:	2200      	movs	r2, #0
	for_all_tasks (i) {
    1532:	4b0f      	ldr	r3, [pc, #60]	; (1570 <kill+0x48>)
    1534:	681c      	ldr	r4, [r3, #0]
    1536:	b91c      	cbnz	r4, 1540 <kill+0x18>
	syserror (EREQPAR, "kpi");
    1538:	2003      	movs	r0, #3
    153a:	490e      	ldr	r1, [pc, #56]	; (1574 <kill+0x4c>)
    153c:	f7ff f886 	bl	64c <__pi_syserror>
		if ((aword)i == pid) {
    1540:	4284      	cmp	r4, r0
    1542:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    1544:	d10e      	bne.n	1564 <kill+0x3c>
			if (j == NULL)
    1546:	b95a      	cbnz	r2, 1560 <kill+0x38>
				__PCB = i->Next;
    1548:	6019      	str	r1, [r3, #0]
			killev (i);
    154a:	4620      	mov	r0, r4
    154c:	f7ff fdb0 	bl	10b0 <killev>
			ufree (i);
    1550:	f7ff ffc6 	bl	14e0 <__pi_free>
			if (i == __pi_curr)
    1554:	4b05      	ldr	r3, [pc, #20]	; (156c <kill+0x44>)
    1556:	681b      	ldr	r3, [r3, #0]
    1558:	42a3      	cmp	r3, r4
    155a:	d106      	bne.n	156a <kill+0x42>
				release;
    155c:	f7ff fc34 	bl	dc8 <__pi_release>
				j->Next = i->Next;
    1560:	62d1      	str	r1, [r2, #44]	; 0x2c
    1562:	e7f2      	b.n	154a <kill+0x22>
    1564:	4622      	mov	r2, r4
    1566:	460c      	mov	r4, r1
    1568:	e7e5      	b.n	1536 <kill+0xe>
}
    156a:	bd10      	pop	{r4, pc}
    156c:	20000b98 	mulcs	r0, r8, fp
    1570:	20000550 	andcs	r0, r0, r0, asr r5
    1574:	000045fc 	strdeq	r4, [r0], -ip

00001578 <__pi_malloc>:
	if (size < 8)
    1578:	2807      	cmp	r0, #7
		_size = 2;
    157a:	bf98      	it	ls
    157c:	2002      	movls	r0, #2
aword *__pi_malloc (word size) {
    157e:	b538      	push	{r3, r4, r5, lr}
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1580:	4b21      	ldr	r3, [pc, #132]	; (1608 <__pi_malloc+0x90>)
		_size = (((aword)size) + 3) >> 2;
    1582:	bf88      	it	hi
    1584:	3003      	addhi	r0, #3
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1586:	681c      	ldr	r4, [r3, #0]
		if (m_magic (chunk) != MALLOC_MAGIC)
    1588:	4920      	ldr	r1, [pc, #128]	; (160c <__pi_malloc+0x94>)
		_size = (((aword)size) + 3) >> 2;
    158a:	bf88      	it	hi
    158c:	0880      	lsrhi	r0, r0, #2
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    158e:	b94c      	cbnz	r4, 15a4 <__pi_malloc+0x2c>
		if (mevent [MA_NP] . nfail != 255)
    1590:	4a1f      	ldr	r2, [pc, #124]	; (1610 <__pi_malloc+0x98>)
    1592:	7853      	ldrb	r3, [r2, #1]
    1594:	2bff      	cmp	r3, #255	; 0xff
    1596:	d001      	beq.n	159c <__pi_malloc+0x24>
			mevent [MA_NP] . nfail ++;
    1598:	3301      	adds	r3, #1
    159a:	7053      	strb	r3, [r2, #1]
		mnfree [MA_NP] = 0;
    159c:	2200      	movs	r2, #0
    159e:	4b1d      	ldr	r3, [pc, #116]	; (1614 <__pi_malloc+0x9c>)
    15a0:	601a      	str	r2, [r3, #0]
	return chunk;
    15a2:	e02f      	b.n	1604 <__pi_malloc+0x8c>
		if (m_magic (chunk) != MALLOC_MAGIC)
    15a4:	6862      	ldr	r2, [r4, #4]
    15a6:	428a      	cmp	r2, r1
    15a8:	d003      	beq.n	15b2 <__pi_malloc+0x3a>
			syserror (EMALLOC, "malc");
    15aa:	2006      	movs	r0, #6
    15ac:	491a      	ldr	r1, [pc, #104]	; (1618 <__pi_malloc+0xa0>)
    15ae:	f7ff f84d 	bl	64c <__pi_syserror>
		if (m_size (chunk) >= _size)
    15b2:	e954 5201 	ldrd	r5, r2, [r4, #-4]
    15b6:	4285      	cmp	r5, r0
    15b8:	d202      	bcs.n	15c0 <__pi_malloc+0x48>
		chunk = m_nextp (chunk)) {
    15ba:	4623      	mov	r3, r4
    15bc:	4614      	mov	r4, r2
    15be:	e7e6      	b.n	158e <__pi_malloc+0x16>
		m_setnextp (cc, m_nextp (chunk));
    15c0:	601a      	str	r2, [r3, #0]
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    15c2:	f854 3c04 	ldr.w	r3, [r4, #-4]
    15c6:	1a1b      	subs	r3, r3, r0
    15c8:	2b08      	cmp	r3, #8
    15ca:	d909      	bls.n	15e0 <__pi_malloc+0x68>
			m_size (chunk) = _size;
    15cc:	f844 0c04 	str.w	r0, [r4, #-4]
			cc = chunk + _size + m_hdrlen;
    15d0:	3001      	adds	r0, #1
    15d2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
			m_size (cc) = waste - m_hdrlen;
    15d6:	3b01      	subs	r3, #1
    15d8:	f840 3c04 	str.w	r3, [r0, #-4]
			QFREE;
    15dc:	f7ff fd86 	bl	10ec <qfree>
		mevent [MA_NP] . nfail = 0;
    15e0:	2200      	movs	r2, #0
    15e2:	4b0b      	ldr	r3, [pc, #44]	; (1610 <__pi_malloc+0x98>)
		mcfree [MA_NP] -= m_size (chunk);
    15e4:	490d      	ldr	r1, [pc, #52]	; (161c <__pi_malloc+0xa4>)
		mevent [MA_NP] . nfail = 0;
    15e6:	705a      	strb	r2, [r3, #1]
		mcfree [MA_NP] -= m_size (chunk);
    15e8:	f854 2c04 	ldr.w	r2, [r4, #-4]
    15ec:	680b      	ldr	r3, [r1, #0]
    15ee:	1a9b      	subs	r3, r3, r2
    15f0:	600b      	str	r3, [r1, #0]
		if (mnfree [MA_NP] > mcfree [MA_NP])
    15f2:	4908      	ldr	r1, [pc, #32]	; (1614 <__pi_malloc+0x9c>)
		m_size (chunk) |= MALLOC_UMASK;
    15f4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
		if (mnfree [MA_NP] > mcfree [MA_NP])
    15f8:	6808      	ldr	r0, [r1, #0]
		m_size (chunk) |= MALLOC_UMASK;
    15fa:	f844 2c04 	str.w	r2, [r4, #-4]
		if (mnfree [MA_NP] > mcfree [MA_NP])
    15fe:	4283      	cmp	r3, r0
			mnfree [MA_NP] = mcfree [MA_NP];
    1600:	bf38      	it	cc
    1602:	600b      	strcc	r3, [r1, #0]
}
    1604:	4620      	mov	r0, r4
    1606:	bd38      	pop	{r3, r4, r5, pc}
    1608:	20000564 	andcs	r0, r0, r4, ror #10
    160c:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}
    1610:	2000055c 	andcs	r0, r0, ip, asr r5
    1614:	20000560 	andcs	r0, r0, r0, ror #10
    1618:	00004600 	andeq	r4, r0, r0, lsl #12
    161c:	20000558 	andcs	r0, r0, r8, asr r5

00001620 <__pi_fork>:
aword __pi_fork (fsmcode func, aword data) {
    1620:	b538      	push	{r3, r4, r5, lr}
    1622:	4605      	mov	r5, r0
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1624:	2030      	movs	r0, #48	; 0x30
aword __pi_fork (fsmcode func, aword data) {
    1626:	460c      	mov	r4, r1
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1628:	f7ff ffa6 	bl	1578 <__pi_malloc>
    162c:	2300      	movs	r3, #0
    162e:	b138      	cbz	r0, 1640 <__pi_fork+0x20>
		if ((j = __PCB) == NULL)
    1630:	4a07      	ldr	r2, [pc, #28]	; (1650 <__pi_fork+0x30>)
	i->Status = 0;
    1632:	8003      	strh	r3, [r0, #0]
	i->Next = NULL;
    1634:	62c3      	str	r3, [r0, #44]	; 0x2c
		if ((j = __PCB) == NULL)
    1636:	6813      	ldr	r3, [r2, #0]
	i->data = data;
    1638:	e9c0 5401 	strd	r5, r4, [r0, #4]
		if ((j = __PCB) == NULL)
    163c:	b90b      	cbnz	r3, 1642 <__pi_fork+0x22>
			__PCB = i;
    163e:	6010      	str	r0, [r2, #0]
}
    1640:	bd38      	pop	{r3, r4, r5, pc}
			for (; j->Next != NULL; j = j->Next);
    1642:	461a      	mov	r2, r3
    1644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1646:	2b00      	cmp	r3, #0
    1648:	d1fb      	bne.n	1642 <__pi_fork+0x22>
			j->Next = i;
    164a:	62d0      	str	r0, [r2, #44]	; 0x2c
	return (aword) i;
    164c:	e7f8      	b.n	1640 <__pi_fork+0x20>
    164e:	bf00      	nop
    1650:	20000550 	andcs	r0, r0, r0, asr r5

00001654 <__pi_waitmem>:
	if (mevent [MA_NP] . nwait != 255)
    1654:	4a04      	ldr	r2, [pc, #16]	; (1668 <__pi_waitmem+0x14>)
void __pi_waitmem (word state) {
    1656:	4601      	mov	r1, r0
	if (mevent [MA_NP] . nwait != 255)
    1658:	7813      	ldrb	r3, [r2, #0]
	wait ((aword)(&(mevent [MA_NP])), state);
    165a:	4803      	ldr	r0, [pc, #12]	; (1668 <__pi_waitmem+0x14>)
	if (mevent [MA_NP] . nwait != 255)
    165c:	2bff      	cmp	r3, #255	; 0xff
		mevent [MA_NP] . nwait ++;
    165e:	bf1c      	itt	ne
    1660:	3301      	addne	r3, #1
    1662:	7013      	strbne	r3, [r2, #0]
	wait ((aword)(&(mevent [MA_NP])), state);
    1664:	f7ff be20 	b.w	12a8 <__pi_wait>
    1668:	2000055c 	andcs	r0, r0, ip, asr r5

0000166c <diag>:

#endif	/* dbg_level */

#if	DIAG_MESSAGES

void diag (const char *mess, ...) {
    166c:	b40f      	push	{r0, r1, r2, r3}
    166e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    1672:	ab0a      	add	r3, sp, #40	; 0x28
    1674:	f853 4b04 	ldr.w	r4, [r3], #4
	sint bc;
	word v;
	byte is;

	va_start (ap, mess);
	diag_disable_int (a, is);
    1678:	2015      	movs	r0, #21
	va_start (ap, mess);
    167a:	9301      	str	r3, [sp, #4]
	diag_disable_int (a, is);
    167c:	4b46      	ldr	r3, [pc, #280]	; (1798 <diag+0x12c>)
				d = (bc == 16) ? 10000 : 1000000000;
				while (1) {
					// Strip initial zeros
					v = (word) (val / d);
					if (v || d == 1) break;
					d /= 10;
    167e:	270a      	movs	r7, #10
	diag_disable_int (a, is);
    1680:	681b      	ldr	r3, [r3, #0]
				d = (bc == 16) ? 10000 : 1000000000;
    1682:	f8df 811c 	ldr.w	r8, [pc, #284]	; 17a0 <diag+0x134>
	diag_disable_int (a, is);
    1686:	695b      	ldr	r3, [r3, #20]
    1688:	4798      	blx	r3
	while (*mess != '\0') {
    168a:	7820      	ldrb	r0, [r4, #0]
    168c:	b998      	cbnz	r0, 16b6 <diag+0x4a>
		} else {
			dgout (*mess++);
		}
	}

	dgout ('\r');
    168e:	200d      	movs	r0, #13
    1690:	f7ff fd6c 	bl	116c <dgout>
	dgout ('\n');
    1694:	200a      	movs	r0, #10
    1696:	f7ff fd69 	bl	116c <dgout>
    169a:	4a40      	ldr	r2, [pc, #256]	; (179c <diag+0x130>)
    169c:	6813      	ldr	r3, [r2, #0]
	diag_wait (a);
    169e:	071b      	lsls	r3, r3, #28
    16a0:	d4fc      	bmi.n	169c <diag+0x30>
	diag_enable_int (a, is);
    16a2:	4b3d      	ldr	r3, [pc, #244]	; (1798 <diag+0x12c>)
    16a4:	2015      	movs	r0, #21
    16a6:	681b      	ldr	r3, [r3, #0]
    16a8:	691b      	ldr	r3, [r3, #16]
    16aa:	4798      	blx	r3
}
    16ac:	b003      	add	sp, #12
    16ae:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    16b2:	b004      	add	sp, #16
    16b4:	4770      	bx	lr
		if (*mess == '%') {
    16b6:	2825      	cmp	r0, #37	; 0x25
    16b8:	f104 0601 	add.w	r6, r4, #1
    16bc:	d169      	bne.n	1792 <diag+0x126>
			if (*mess == 'l') {
    16be:	9b01      	ldr	r3, [sp, #4]
    16c0:	7862      	ldrb	r2, [r4, #1]
    16c2:	f853 1b04 	ldr.w	r1, [r3], #4
    16c6:	2a6c      	cmp	r2, #108	; 0x6c
				mess++;
    16c8:	bf08      	it	eq
    16ca:	1ca6      	addeq	r6, r4, #2
				val = va_arg (ap, lword);
    16cc:	9301      	str	r3, [sp, #4]
			switch (*mess) {
    16ce:	7833      	ldrb	r3, [r6, #0]
				bc = 32;
    16d0:	bf0c      	ite	eq
    16d2:	2520      	moveq	r5, #32
				bc = 16;
    16d4:	2510      	movne	r5, #16
			switch (*mess) {
    16d6:	2b75      	cmp	r3, #117	; 0x75
    16d8:	d04e      	beq.n	1778 <diag+0x10c>
    16da:	d80a      	bhi.n	16f2 <diag+0x86>
    16dc:	2b64      	cmp	r3, #100	; 0x64
    16de:	d01c      	beq.n	171a <diag+0xae>
    16e0:	2b73      	cmp	r3, #115	; 0x73
    16e2:	d052      	beq.n	178a <diag+0x11e>
				dgout ('%');
    16e4:	2025      	movs	r0, #37	; 0x25
    16e6:	f7ff fd41 	bl	116c <dgout>
				dgout (*mess);
    16ea:	7830      	ldrb	r0, [r6, #0]
    16ec:	f7ff fd3e 	bl	116c <dgout>
    16f0:	e010      	b.n	1714 <diag+0xa8>
			switch (*mess) {
    16f2:	2b78      	cmp	r3, #120	; 0x78
    16f4:	d1f6      	bne.n	16e4 <diag+0x78>
    16f6:	2400      	movs	r4, #0
					v = __pi_hex_enc_table [
    16f8:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 17a4 <diag+0x138>
					i += 4;
    16fc:	3404      	adds	r4, #4
					(val >> (bc - i)) & 0xf];
    16fe:	1b2b      	subs	r3, r5, r4
    1700:	fa21 f303 	lsr.w	r3, r1, r3
    1704:	f003 030f 	and.w	r3, r3, #15
					dgout (v);
    1708:	f819 0003 	ldrb.w	r0, [r9, r3]
    170c:	f7ff fd2e 	bl	116c <dgout>
				while (i < bc) {
    1710:	42a5      	cmp	r5, r4
    1712:	dcf3      	bgt.n	16fc <diag+0x90>
			mess++;
    1714:	3601      	adds	r6, #1
					d /= 10;
    1716:	4634      	mov	r4, r6
    1718:	e7b7      	b.n	168a <diag+0x1e>
				if ((val >> (bc - 1)) & 1) {
    171a:	1e6b      	subs	r3, r5, #1
    171c:	fa21 f303 	lsr.w	r3, r1, r3
    1720:	07da      	lsls	r2, r3, #31
    1722:	d509      	bpl.n	1738 <diag+0xcc>
					dgout ('-');
    1724:	202d      	movs	r0, #45	; 0x2d
    1726:	f7ff fd21 	bl	116c <dgout>
					if (bc == 16)
    172a:	2d10      	cmp	r5, #16
						val |= 0xffff0000;
    172c:	bf04      	itt	eq
    172e:	ea6f 4101 	mvneq.w	r1, r1, lsl #16
    1732:	ea6f 4111 	mvneq.w	r1, r1, lsr #16
					val = ~val + 1;
    1736:	4249      	negs	r1, r1
				d = (bc == 16) ? 10000 : 1000000000;
    1738:	f242 7410 	movw	r4, #10000	; 0x2710
    173c:	2d10      	cmp	r5, #16
    173e:	bf18      	it	ne
    1740:	4644      	movne	r4, r8
					v = (word) (val / d);
    1742:	fbb1 f5f4 	udiv	r5, r1, r4
    1746:	b2ad      	uxth	r5, r5
					if (v || d == 1) break;
    1748:	b935      	cbnz	r5, 1758 <diag+0xec>
    174a:	2c01      	cmp	r4, #1
    174c:	d004      	beq.n	1758 <diag+0xec>
					d /= 10;
    174e:	fbb4 f4f7 	udiv	r4, r4, r7
					v = (word) (val / d);
    1752:	e7f6      	b.n	1742 <diag+0xd6>
				d = (bc == 16) ? 10000 : 1000000000;
    1754:	4c12      	ldr	r4, [pc, #72]	; (17a0 <diag+0x134>)
    1756:	e7f4      	b.n	1742 <diag+0xd6>
					dgout (v + '0');
    1758:	f105 0030 	add.w	r0, r5, #48	; 0x30
    175c:	b280      	uxth	r0, r0
    175e:	f7ff fd05 	bl	116c <dgout>
					if (d == 0) break;
    1762:	2c09      	cmp	r4, #9
					d /= 10;
    1764:	fbb4 f3f7 	udiv	r3, r4, r7
					val = val - (v * d);
    1768:	fb04 1115 	mls	r1, r4, r5, r1
					if (d == 0) break;
    176c:	d9d2      	bls.n	1714 <diag+0xa8>
					v = (word) (val / d);
    176e:	fbb1 f5f3 	udiv	r5, r1, r3
					d /= 10;
    1772:	461c      	mov	r4, r3
					v = (word) (val / d);
    1774:	b2ad      	uxth	r5, r5
					dgout (v + '0');
    1776:	e7ef      	b.n	1758 <diag+0xec>
				if (bc == 16)
    1778:	2d10      	cmp	r5, #16
    177a:	d1eb      	bne.n	1754 <diag+0xe8>
				d = (bc == 16) ? 10000 : 1000000000;
    177c:	f242 7410 	movw	r4, #10000	; 0x2710
					val &= 0xffff;
    1780:	b289      	uxth	r1, r1
				d = (bc == 16) ? 10000 : 1000000000;
    1782:	e7de      	b.n	1742 <diag+0xd6>
					dgout (*s);
    1784:	f7ff fcf2 	bl	116c <dgout>
					s++;
    1788:	3101      	adds	r1, #1
				while (*s != '\0') {
    178a:	7808      	ldrb	r0, [r1, #0]
    178c:	2800      	cmp	r0, #0
    178e:	d1f9      	bne.n	1784 <diag+0x118>
    1790:	e7c0      	b.n	1714 <diag+0xa8>
			dgout (*mess++);
    1792:	f7ff fceb 	bl	116c <dgout>
    1796:	e7be      	b.n	1716 <diag+0xaa>
    1798:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
    179c:	40001018 	andmi	r1, r0, r8, lsl r0
    17a0:	3b9aca00 	blcc	fe6b3fa8 <_estack+0xde6aefa8>
    17a4:	00004605 	andeq	r4, r0, r5, lsl #12

000017a8 <lrnd>:
// ============================================================================
// High-quality RNG (oh, well, as high as we can afford) ======================
// ============================================================================
#if RANDOM_NUMBER_GENERATOR > 1
lword lrnd () {
	__pi_seed = __pi_seed * 1103515245 + 12345;
    17a8:	f243 0039 	movw	r0, #12345	; 0x3039
    17ac:	4a04      	ldr	r2, [pc, #16]	; (17c0 <lrnd+0x18>)
    17ae:	4905      	ldr	r1, [pc, #20]	; (17c4 <lrnd+0x1c>)
    17b0:	6813      	ldr	r3, [r2, #0]
    17b2:	fb01 0303 	mla	r3, r1, r3, r0
    17b6:	6013      	str	r3, [r2, #0]
	return __pi_seed
#if ENTROPY_COLLECTION
	^ entropy
    17b8:	4a03      	ldr	r2, [pc, #12]	; (17c8 <lrnd+0x20>)
    17ba:	6810      	ldr	r0, [r2, #0]
#endif
	;
}
    17bc:	4058      	eors	r0, r3
    17be:	4770      	bx	lr
    17c0:	20000004 	andcs	r0, r0, r4
    17c4:	41c64e6d 	bicmi	r4, r6, sp, ror #28
    17c8:	20000b74 	andcs	r0, r0, r4, ror fp

000017cc <apb>:
/*
 * Forced implicit packet dropping removed. Plugins will have to drop
 * packets explicitly (if they really want to).
 */

__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    17cc:	b510      	push	{r4, lr}
    17ce:	4604      	mov	r4, r0
/* ========================================= */
/* Allocates a packet buffer size bytes long */
/* ========================================= */

	hblock_t *p;
	word cs = size + hblenb;
    17d0:	300c      	adds	r0, #12

	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    17d2:	b280      	uxth	r0, r0
    17d4:	f7ff fed0 	bl	1578 <__pi_malloc>
    17d8:	b110      	cbz	r0, 17e0 <apb+0x14>

#if	TCV_HOOKS
	p -> hptr = NULL;
#endif
	p -> length = size;
	p -> attributes . value = 0;
    17da:	2300      	movs	r3, #0
	p -> length = size;
    17dc:	8104      	strh	r4, [r0, #8]
	p -> attributes . value = 0;
    17de:	8143      	strh	r3, [r0, #10]
#endif
	return p;
	/*
	 * Note that this doesn't initialize the plugin/phys/session stuff.
	 */
}
    17e0:	bd10      	pop	{r4, pc}

000017e2 <deq>:
	if (p->attributes.b.queued) {
    17e2:	7a83      	ldrb	r3, [r0, #10]
    17e4:	07db      	lsls	r3, r3, #31
    17e6:	d508      	bpl.n	17fa <deq+0x18>
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    17e8:	e9d0 2300 	ldrd	r2, r3, [r0]
    17ec:	6053      	str	r3, [r2, #4]
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    17ee:	6802      	ldr	r2, [r0, #0]
    17f0:	601a      	str	r2, [r3, #0]
		p->attributes.b.queued = 0;
    17f2:	7a83      	ldrb	r3, [r0, #10]
    17f4:	f36f 0300 	bfc	r3, #0, #1
    17f8:	7283      	strb	r3, [r0, #10]
}
    17fa:	4770      	bx	lr

000017fc <rlp>:
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    17fc:	b508      	push	{r3, lr}
	deq (p);	// Remove from queue
    17fe:	f7ff fff0 	bl	17e2 <deq>
}
    1802:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tfree ((address)p);
    1806:	f7ff be6b 	b.w	14e0 <__pi_free>
	...

0000180c <enq>:
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    180c:	b538      	push	{r3, r4, r5, lr}
	sysassert (p->attributes.b.queued == 0, "tcv01");
    180e:	7a8b      	ldrb	r3, [r1, #10]
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1810:	4605      	mov	r5, r0
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1812:	07da      	lsls	r2, r3, #31
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1814:	460c      	mov	r4, r1
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1816:	d503      	bpl.n	1820 <enq+0x14>
    1818:	200a      	movs	r0, #10
    181a:	490e      	ldr	r1, [pc, #56]	; (1854 <enq+0x48>)
    181c:	f7fe ff16 	bl	64c <__pi_syserror>
	if (q_empty (q))
    1820:	6803      	ldr	r3, [r0, #0]
    1822:	4283      	cmp	r3, r0
    1824:	d101      	bne.n	182a <enq+0x1e>
		trigger (q);
    1826:	f7ff fd59 	bl	12dc <__pi_trigger>
	if (p->attributes.b.urgent) {
    182a:	7aa3      	ldrb	r3, [r4, #10]
    182c:	075b      	lsls	r3, r3, #29
    182e:	d50a      	bpl.n	1846 <enq+0x3a>
		p->u.bqueue.next = q->next;
    1830:	682b      	ldr	r3, [r5, #0]
		p->u.bqueue.prev = q;
    1832:	e9c4 3500 	strd	r3, r5, [r4]
		q->next->prev = (qitem_t*) p;
    1836:	682b      	ldr	r3, [r5, #0]
    1838:	605c      	str	r4, [r3, #4]
		q->next = (qitem_t*) p;
    183a:	602c      	str	r4, [r5, #0]
	p->attributes.b.queued = 1;
    183c:	7aa3      	ldrb	r3, [r4, #10]
    183e:	f043 0301 	orr.w	r3, r3, #1
    1842:	72a3      	strb	r3, [r4, #10]
}
    1844:	bd38      	pop	{r3, r4, r5, pc}
		p->u.bqueue.next = q;
    1846:	6025      	str	r5, [r4, #0]
		p->u.bqueue.prev = q->prev;
    1848:	686b      	ldr	r3, [r5, #4]
    184a:	6063      	str	r3, [r4, #4]
		q->prev->next = (qitem_t*) p;
    184c:	601c      	str	r4, [r3, #0]
		q->prev = (qitem_t*) p;
    184e:	606c      	str	r4, [r5, #4]
    1850:	e7f4      	b.n	183c <enq+0x30>
    1852:	bf00      	nop
    1854:	00004615 	andeq	r4, r0, r5, lsl r6

00001858 <dispose>:
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    1858:	b510      	push	{r4, lr}
    185a:	4604      	mov	r4, r0
	deq (p);	// Soft dequeue, timer and hook left intact
    185c:	f7ff ffc1 	bl	17e2 <deq>
	switch (dv) {
    1860:	3901      	subs	r1, #1
    1862:	2904      	cmp	r1, #4
    1864:	d832      	bhi.n	18cc <dispose+0x74>
    1866:	e8df f001 	tbb	[pc, r1]
    186a:	1d03072d 	stcne	7, cr0, [r3, #-180]	; 0xffffff4c
    186e:	7a830019 	bvc	fe0c18da <_estack+0xde0bc8da>
			p->attributes.b.urgent = 1;
    1872:	f043 0304 	orr.w	r3, r3, #4
    1876:	7283      	strb	r3, [r0, #10]
			verify_ses (p, "dispose ses");
    1878:	8963      	ldrh	r3, [r4, #10]
    187a:	f3c3 03c6 	ubfx	r3, r3, #3, #7
    187e:	2b07      	cmp	r3, #7
    1880:	d803      	bhi.n	188a <dispose+0x32>
    1882:	4a13      	ldr	r2, [pc, #76]	; (18d0 <dispose+0x78>)
    1884:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    1888:	b918      	cbnz	r0, 1892 <dispose+0x3a>
    188a:	4912      	ldr	r1, [pc, #72]	; (18d4 <dispose+0x7c>)
			verify_phy (p, "dispose phy");
    188c:	200a      	movs	r0, #10
    188e:	f7fe fedd 	bl	64c <__pi_syserror>
			enq (&(descriptors [p->attributes.b.session]->rqueue),
    1892:	4621      	mov	r1, r4
}
    1894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			enq (oqueues [p->attributes.b.phys], p);
    1898:	f7ff bfb8 	b.w	180c <enq>
			p->attributes.b.urgent = 1;
    189c:	7a83      	ldrb	r3, [r0, #10]
    189e:	f043 0304 	orr.w	r3, r3, #4
    18a2:	7283      	strb	r3, [r0, #10]
			verify_phy (p, "dispose phy");
    18a4:	7ae2      	ldrb	r2, [r4, #11]
    18a6:	2a5f      	cmp	r2, #95	; 0x5f
    18a8:	ea4f 1352 	mov.w	r3, r2, lsr #5
    18ac:	d803      	bhi.n	18b6 <dispose+0x5e>
    18ae:	4a0a      	ldr	r2, [pc, #40]	; (18d8 <dispose+0x80>)
    18b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    18b4:	b90a      	cbnz	r2, 18ba <dispose+0x62>
    18b6:	4909      	ldr	r1, [pc, #36]	; (18dc <dispose+0x84>)
    18b8:	e7e8      	b.n	188c <dispose+0x34>
			enq (oqueues [p->attributes.b.phys], p);
    18ba:	4a09      	ldr	r2, [pc, #36]	; (18e0 <dispose+0x88>)
    18bc:	4621      	mov	r1, r4
    18be:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    18c2:	e7e7      	b.n	1894 <dispose+0x3c>
}
    18c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			rlp (p);
    18c8:	f7ff bf98 	b.w	17fc <rlp>
}
    18cc:	bd10      	pop	{r4, pc}
    18ce:	bf00      	nop
    18d0:	20000568 	andcs	r0, r0, r8, ror #10
    18d4:	0000461b 	andeq	r4, r0, fp, lsl r6
    18d8:	20000594 	mulcs	r0, r4, r5
    18dc:	00004627 	andeq	r4, r0, r7, lsr #12
    18e0:	20000588 	andcs	r0, r0, r8, lsl #11

000018e4 <tcv_endp>:
		/* ===================================== */
		/* Functions callable by the application */
		/* ===================================== */
/* ---------------------------------------------------------------------- */

__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    18e4:	b510      	push	{r4, lr}
 * somewhere or deallocated.
 */
	hblock_t *b;

	b = header (p);
	if (b->attributes.b.outgoing) {
    18e6:	f810 2c02 	ldrb.w	r2, [r0, #-2]
	b = header (p);
    18ea:	f1a0 040c 	sub.w	r4, r0, #12
	if (b->attributes.b.outgoing) {
    18ee:	0792      	lsls	r2, r2, #30
    18f0:	d522      	bpl.n	1938 <tcv_endp+0x54>
		verify_ses (b, "tcv02");
    18f2:	f830 2c02 	ldrh.w	r2, [r0, #-2]
    18f6:	f3c2 02c6 	ubfx	r2, r2, #3, #7
    18fa:	2a07      	cmp	r2, #7
    18fc:	d803      	bhi.n	1906 <tcv_endp+0x22>
    18fe:	4911      	ldr	r1, [pc, #68]	; (1944 <tcv_endp+0x60>)
    1900:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    1904:	b91a      	cbnz	r2, 190e <tcv_endp+0x2a>
    1906:	4910      	ldr	r1, [pc, #64]	; (1948 <tcv_endp+0x64>)
		verify_plg (b, tcv_out, "tcv03");
    1908:	200a      	movs	r0, #10
    190a:	f7fe fe9f 	bl	64c <__pi_syserror>
    190e:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    1912:	f3c3 0382 	ubfx	r3, r3, #2, #3
    1916:	2b02      	cmp	r3, #2
    1918:	d805      	bhi.n	1926 <tcv_endp+0x42>
    191a:	4a0c      	ldr	r2, [pc, #48]	; (194c <tcv_endp+0x68>)
    191c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1920:	b10b      	cbz	r3, 1926 <tcv_endp+0x42>
    1922:	691b      	ldr	r3, [r3, #16]
    1924:	b90b      	cbnz	r3, 192a <tcv_endp+0x46>
    1926:	490a      	ldr	r1, [pc, #40]	; (1950 <tcv_endp+0x6c>)
    1928:	e7ee      	b.n	1908 <tcv_endp+0x24>
		dispose (b, plugins [b->attributes.b.plugin] ->
    192a:	4798      	blx	r3
    192c:	4601      	mov	r1, r0
    192e:	4620      	mov	r0, r4
		 * This is a received packet - just drop it, no need to verify
		 * session, can be legitimately invoked after the session has
		 * been closed,
		 */
		rlp (b);
}
    1930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		dispose (b, plugins [b->attributes.b.plugin] ->
    1934:	f7ff bf90 	b.w	1858 <dispose>
		rlp (b);
    1938:	4620      	mov	r0, r4
}
    193a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rlp (b);
    193e:	f7ff bf5d 	b.w	17fc <rlp>
    1942:	bf00      	nop
    1944:	20000568 	andcs	r0, r0, r8, ror #10
    1948:	00004633 	andeq	r4, r0, r3, lsr r6
    194c:	200005ac 	andcs	r0, r0, ip, lsr #11
    1950:	00004639 	andeq	r4, r0, r9, lsr r6

00001954 <tcv_open>:
#else
// ============================================================================

// Non-blocking open and close

__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    1954:	b40c      	push	{r2, r3}
    1956:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    195a:	ab0a      	add	r3, sp, #40	; 0x28
    195c:	f853 8b04 	ldr.w	r8, [r3], #4
	va_list		ap;
	va_start (ap, plid);

#if DIAG_MESSAGES > 1
	/* Check if we have the plugin and the phy */
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1960:	2902      	cmp	r1, #2
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    1962:	460f      	mov	r7, r1
	va_start (ap, plid);
    1964:	9301      	str	r3, [sp, #4]
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1966:	d80b      	bhi.n	1980 <tcv_open+0x2c>
    1968:	4b24      	ldr	r3, [pc, #144]	; (19fc <tcv_open+0xa8>)
    196a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    196e:	b13b      	cbz	r3, 1980 <tcv_open+0x2c>
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    1970:	f1b8 0f02 	cmp.w	r8, #2
    1974:	d804      	bhi.n	1980 <tcv_open+0x2c>
    1976:	4b22      	ldr	r3, [pc, #136]	; (1a00 <tcv_open+0xac>)
    1978:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
    197c:	4699      	mov	r9, r3
    197e:	b91a      	cbnz	r2, 1988 <tcv_open+0x34>
			syserror (ENODEVICE, "tcv04");
    1980:	2001      	movs	r0, #1
    1982:	4920      	ldr	r1, [pc, #128]	; (1a04 <tcv_open+0xb0>)
	if (fd == TCV_MAX_DESC)
		return ERROR;

	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
	if (s == NULL)
		syserror (EMALLOC, "tcv05");
    1984:	f7fe fe62 	bl	64c <__pi_syserror>
	attp.b.outgoing = 1;
    1988:	f008 0307 	and.w	r3, r8, #7
    198c:	029b      	lsls	r3, r3, #10
    198e:	f043 0302 	orr.w	r3, r3, #2
    1992:	ea43 3541 	orr.w	r5, r3, r1, lsl #13
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1996:	4b1c      	ldr	r3, [pc, #112]	; (1a08 <tcv_open+0xb4>)
    1998:	2600      	movs	r6, #0
    199a:	469a      	mov	sl, r3
		if (descriptors [fd] == NULL)
    199c:	f853 2b04 	ldr.w	r2, [r3], #4
    19a0:	b312      	cbz	r2, 19e8 <tcv_open+0x94>
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    19a2:	3601      	adds	r6, #1
    19a4:	2e08      	cmp	r6, #8
    19a6:	d1f9      	bne.n	199c <tcv_open+0x48>
		return ERROR;
    19a8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
		return ERROR;
	}

	descriptors [fd] = s;
	return fd;
}
    19ac:	4630      	mov	r0, r6
    19ae:	b002      	add	sp, #8
    19b0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    19b4:	b002      	add	sp, #8
    19b6:	4770      	bx	lr
	s->attpattern.b.session = fd;
    19b8:	462b      	mov	r3, r5
    19ba:	f366 03c9 	bfi	r3, r6, #3, #7
	descriptors [fd] = s;
    19be:	f84a 4026 	str.w	r4, [sl, r6, lsl #2]
	s->attpattern.b.session = fd;
    19c2:	8123      	strh	r3, [r4, #8]
	q_init (&(s->rqueue));
    19c4:	e9c4 4400 	strd	r4, r4, [r4]
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    19c8:	f859 3028 	ldr.w	r3, [r9, r8, lsl #2]
    19cc:	681b      	ldr	r3, [r3, #0]
    19ce:	b913      	cbnz	r3, 19d6 <tcv_open+0x82>
    19d0:	200a      	movs	r0, #10
    19d2:	490e      	ldr	r1, [pc, #56]	; (1a0c <tcv_open+0xb8>)
    19d4:	e7d6      	b.n	1984 <tcv_open+0x30>
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    19d6:	4631      	mov	r1, r6
    19d8:	4638      	mov	r0, r7
    19da:	9a01      	ldr	r2, [sp, #4]
    19dc:	4798      	blx	r3
    19de:	2800      	cmp	r0, #0
    19e0:	d1e2      	bne.n	19a8 <tcv_open+0x54>
	descriptors [fd] = s;
    19e2:	f84a 4026 	str.w	r4, [sl, r6, lsl #2]
	return fd;
    19e6:	e7e1      	b.n	19ac <tcv_open+0x58>
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    19e8:	200c      	movs	r0, #12
    19ea:	f7ff fdc5 	bl	1578 <__pi_malloc>
	if (s == NULL)
    19ee:	4604      	mov	r4, r0
    19f0:	2800      	cmp	r0, #0
    19f2:	d1e1      	bne.n	19b8 <tcv_open+0x64>
		syserror (EMALLOC, "tcv05");
    19f4:	2006      	movs	r0, #6
    19f6:	4906      	ldr	r1, [pc, #24]	; (1a10 <tcv_open+0xbc>)
    19f8:	e7c4      	b.n	1984 <tcv_open+0x30>
    19fa:	bf00      	nop
    19fc:	20000588 	andcs	r0, r0, r8, lsl #11
    1a00:	200005ac 	andcs	r0, r0, ip, lsr #11
    1a04:	0000463f 	andeq	r4, r0, pc, lsr r6
    1a08:	20000568 	andcs	r0, r0, r8, ror #10
    1a0c:	0000464b 	andeq	r4, r0, fp, asr #12
    1a10:	00004645 	andeq	r4, r0, r5, asr #12

00001a14 <tcv_plug>:

__PUBLF (PicOSNode, int, tcv_plug) (int ord, const tcvplug_t *pl) {
/*
 * This is one way now. Later we may implement switching plugs on the fly.
 */
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    1a14:	2802      	cmp	r0, #2
    1a16:	d809      	bhi.n	1a2c <tcv_plug+0x18>
	    (plugins [ord] != NULL && plugins [ord] != pl))
    1a18:	4b06      	ldr	r3, [pc, #24]	; (1a34 <tcv_plug+0x20>)
    1a1a:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    1a1e:	b10a      	cbz	r2, 1a24 <tcv_plug+0x10>
	    (plugins [ord] != NULL && plugins [ord] != pl))
    1a20:	428a      	cmp	r2, r1
    1a22:	d103      	bne.n	1a2c <tcv_plug+0x18>
		return ERROR;

	plugins [ord] = pl;
    1a24:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
	return 0;
    1a28:	2000      	movs	r0, #0
    1a2a:	4770      	bx	lr
		return ERROR;
    1a2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    1a30:	4770      	bx	lr
    1a32:	bf00      	nop
    1a34:	200005ac 	andcs	r0, r0, ip, lsr #11

00001a38 <tcv_wnps>:
	hblock_t *b;
	tcvadp_t ptrs;
	sesdesc_t *s;
	int eid;

	verify_fds (fd, "tcv16");
    1a38:	2908      	cmp	r1, #8
								Boolean urg) {
    1a3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1a3c:	4605      	mov	r5, r0
    1a3e:	4614      	mov	r4, r2
    1a40:	461e      	mov	r6, r3
	verify_fds (fd, "tcv16");
    1a42:	d803      	bhi.n	1a4c <tcv_wnps+0x14>
    1a44:	4b26      	ldr	r3, [pc, #152]	; (1ae0 <tcv_wnps+0xa8>)
    1a46:	f853 7021 	ldr.w	r7, [r3, r1, lsl #2]
    1a4a:	b91f      	cbnz	r7, 1a54 <tcv_wnps+0x1c>
    1a4c:	4925      	ldr	r1, [pc, #148]	; (1ae4 <tcv_wnps+0xac>)

	s = descriptors [fd];

	verify_pld (s, tcv_frm, "tcv17");
    1a4e:	200a      	movs	r0, #10
    1a50:	f7fe fdfc 	bl	64c <__pi_syserror>
    1a54:	7a7b      	ldrb	r3, [r7, #9]
    1a56:	f3c3 0382 	ubfx	r3, r3, #2, #3
    1a5a:	2b02      	cmp	r3, #2
    1a5c:	d805      	bhi.n	1a6a <tcv_wnps+0x32>
    1a5e:	4a22      	ldr	r2, [pc, #136]	; (1ae8 <tcv_wnps+0xb0>)
    1a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1a64:	b10b      	cbz	r3, 1a6a <tcv_wnps+0x32>
    1a66:	68db      	ldr	r3, [r3, #12]
    1a68:	b90b      	cbnz	r3, 1a6e <tcv_wnps+0x36>
    1a6a:	4920      	ldr	r1, [pc, #128]	; (1aec <tcv_wnps+0xb4>)
    1a6c:	e7ef      	b.n	1a4e <tcv_wnps+0x16>

	// tcv_frm invoked with packet == NULL, pass in the frame parameters
	// the session and urgent flag
	ptrs.head = (word) fd;
    1a6e:	f8ad 1004 	strh.w	r1, [sp, #4]
	ptrs.tail = (word) urg;

	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    1a72:	2000      	movs	r0, #0
	ptrs.tail = (word) urg;
    1a74:	f8ad 6006 	strh.w	r6, [sp, #6]
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    1a78:	a901      	add	r1, sp, #4
    1a7a:	4798      	blx	r3
    1a7c:	b158      	cbz	r0, 1a96 <tcv_wnps+0x5e>
		// Blocked by the plugin
		if (state != WNONE) {
    1a7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1a82:	429d      	cmp	r5, r3
    1a84:	d102      	bne.n	1a8c <tcv_wnps+0x54>
			when (eid, state);
			release;
		}
		return NULL;
    1a86:	2000      	movs	r0, #0
		b->attributes.b.urgent = 1;
	b->u.pointers.head = ptrs.head;
	b->u.pointers.tail = length;

	return (address) (b + 1);
}
    1a88:	b003      	add	sp, #12
    1a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			when (eid, state);
    1a8c:	4629      	mov	r1, r5
    1a8e:	f7ff fc0b 	bl	12a8 <__pi_wait>
			release;
    1a92:	f7ff f999 	bl	dc8 <__pi_release>
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    1a96:	7a3b      	ldrb	r3, [r7, #8]
    1a98:	07db      	lsls	r3, r3, #31
    1a9a:	d501      	bpl.n	1aa0 <tcv_wnps+0x68>
    1a9c:	4914      	ldr	r1, [pc, #80]	; (1af0 <tcv_wnps+0xb8>)
    1a9e:	e7d6      	b.n	1a4e <tcv_wnps+0x16>
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    1aa0:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    1aa4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    1aa8:	b2a4      	uxth	r4, r4
    1aaa:	4418      	add	r0, r3
    1aac:	4420      	add	r0, r4
    1aae:	b280      	uxth	r0, r0
    1ab0:	f7ff fe8c 	bl	17cc <apb>
    1ab4:	b938      	cbnz	r0, 1ac6 <tcv_wnps+0x8e>
		if (state != WNONE) {
    1ab6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1aba:	429d      	cmp	r5, r3
    1abc:	d0e3      	beq.n	1a86 <tcv_wnps+0x4e>
			tmwait (state);
    1abe:	4628      	mov	r0, r5
    1ac0:	f7ff fdc8 	bl	1654 <__pi_waitmem>
    1ac4:	e7e5      	b.n	1a92 <tcv_wnps+0x5a>
	b->attributes = s->attpattern;
    1ac6:	893b      	ldrh	r3, [r7, #8]
    1ac8:	8143      	strh	r3, [r0, #10]
	if (urg)
    1aca:	b11e      	cbz	r6, 1ad4 <tcv_wnps+0x9c>
		b->attributes.b.urgent = 1;
    1acc:	7a83      	ldrb	r3, [r0, #10]
    1ace:	f043 0304 	orr.w	r3, r3, #4
    1ad2:	7283      	strb	r3, [r0, #10]
	b->u.pointers.head = ptrs.head;
    1ad4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
	b->u.pointers.tail = length;
    1ad8:	8044      	strh	r4, [r0, #2]
	b->u.pointers.head = ptrs.head;
    1ada:	8003      	strh	r3, [r0, #0]
	return (address) (b + 1);
    1adc:	300c      	adds	r0, #12
    1ade:	e7d3      	b.n	1a88 <tcv_wnps+0x50>
    1ae0:	20000568 	andcs	r0, r0, r8, ror #10
    1ae4:	00004651 	andeq	r4, r0, r1, asr r6
    1ae8:	200005ac 	andcs	r0, r0, ip, lsr #11
    1aec:	00004657 	andeq	r4, r0, r7, asr r6
    1af0:	0000465d 	andeq	r4, r0, sp, asr r6

00001af4 <tcvp_control>:
	           /* ================================ */
	           /* Functions callable by the plugin */
	           /* ================================ */
/* ---------------------------------------------------------------------- */

__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    1af4:	4603      	mov	r3, r0
/*
 * Plugin version of interface control
 */
	verify_fph (phy, "tcv23");
    1af6:	2b03      	cmp	r3, #3
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    1af8:	4608      	mov	r0, r1
    1afa:	b510      	push	{r4, lr}
    1afc:	4611      	mov	r1, r2
	verify_fph (phy, "tcv23");
    1afe:	d803      	bhi.n	1b08 <tcvp_control+0x14>
    1b00:	4a05      	ldr	r2, [pc, #20]	; (1b18 <tcvp_control+0x24>)
    1b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1b06:	b91b      	cbnz	r3, 1b10 <tcvp_control+0x1c>
    1b08:	200a      	movs	r0, #10
    1b0a:	4904      	ldr	r1, [pc, #16]	; (1b1c <tcvp_control+0x28>)
    1b0c:	f7fe fd9e 	bl	64c <__pi_syserror>
	return (physical [phy]) (opt, arg);
}
    1b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return (physical [phy]) (opt, arg);
    1b14:	4718      	bx	r3
    1b16:	bf00      	nop
    1b18:	20000594 	mulcs	r0, r4, r5
    1b1c:	00004663 	andeq	r4, r0, r3, ror #12

00001b20 <tcv_control>:
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    1b20:	b508      	push	{r3, lr}
	if (opt < 0) {
    1b22:	1e0b      	subs	r3, r1, #0
    1b24:	da11      	bge.n	1b4a <tcv_control+0x2a>
		if (fd < 0)
    1b26:	2800      	cmp	r0, #0
    1b28:	db1f      	blt.n	1b6a <tcv_control+0x4a>
		if (opt == PHYSOPT_PLUGINFO) {
    1b2a:	3301      	adds	r3, #1
    1b2c:	d107      	bne.n	1b3e <tcv_control+0x1e>
			if (fd >= TCV_MAX_PLUGS)
    1b2e:	2802      	cmp	r0, #2
    1b30:	dc1b      	bgt.n	1b6a <tcv_control+0x4a>
			if ((p = plugins [fd]) == NULL)
    1b32:	4b0f      	ldr	r3, [pc, #60]	; (1b70 <tcv_control+0x50>)
    1b34:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    1b38:	b100      	cbz	r0, 1b3c <tcv_control+0x1c>
			return p->tcv_info;
    1b3a:	69c0      	ldr	r0, [r0, #28]
}
    1b3c:	bd08      	pop	{r3, pc}
		if (fd >= TCV_MAX_PHYS)
    1b3e:	2802      	cmp	r0, #2
    1b40:	dc13      	bgt.n	1b6a <tcv_control+0x4a>
		return physinfo [fd];
    1b42:	4b0c      	ldr	r3, [pc, #48]	; (1b74 <tcv_control+0x54>)
    1b44:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    1b48:	e7f8      	b.n	1b3c <tcv_control+0x1c>
	verify_fds (fd, "tcv22");
    1b4a:	2808      	cmp	r0, #8
    1b4c:	d803      	bhi.n	1b56 <tcv_control+0x36>
    1b4e:	4b0a      	ldr	r3, [pc, #40]	; (1b78 <tcv_control+0x58>)
    1b50:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1b54:	b91b      	cbnz	r3, 1b5e <tcv_control+0x3e>
    1b56:	200a      	movs	r0, #10
    1b58:	4908      	ldr	r1, [pc, #32]	; (1b7c <tcv_control+0x5c>)
    1b5a:	f7fe fd77 	bl	64c <__pi_syserror>
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    1b5e:	7a58      	ldrb	r0, [r3, #9]
}
    1b60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    1b64:	0940      	lsrs	r0, r0, #5
    1b66:	f7ff bfc5 	b.w	1af4 <tcvp_control>
			return 0;
    1b6a:	2000      	movs	r0, #0
    1b6c:	e7e6      	b.n	1b3c <tcv_control+0x1c>
    1b6e:	bf00      	nop
    1b70:	200005ac 	andcs	r0, r0, ip, lsr #11
    1b74:	200005a0 	andcs	r0, r0, r0, lsr #11
    1b78:	20000568 	andcs	r0, r0, r8, ror #10
    1b7c:	00004669 	andeq	r4, r0, r9, ror #12

00001b80 <tcvp_new>:
 * Plugin-visible dispose
 */
	dispose (header (p), dsp);
}

__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    1b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b82:	b280      	uxth	r0, r0
    1b84:	4615      	mov	r5, r2
/*
 * Create a new packet with attributes inherited from the session
 */
	hblock_t *p;

	if (dsp != TCV_DSP_PASS) {
    1b86:	460e      	mov	r6, r1
    1b88:	b309      	cbz	r1, 1bce <tcvp_new+0x4e>

		/* Session must be defined for that */
		if (ses == NONE)
    1b8a:	1c53      	adds	r3, r2, #1
    1b8c:	d103      	bne.n	1b96 <tcvp_new+0x16>
			syserror (EREQPAR, "tcv26");
    1b8e:	2003      	movs	r0, #3
    1b90:	4912      	ldr	r1, [pc, #72]	; (1bdc <tcvp_new+0x5c>)
		verify_fds (ses, "tcv27");
    1b92:	f7fe fd5b 	bl	64c <__pi_syserror>
    1b96:	2a08      	cmp	r2, #8
    1b98:	d803      	bhi.n	1ba2 <tcvp_new+0x22>
    1b9a:	4f11      	ldr	r7, [pc, #68]	; (1be0 <tcvp_new+0x60>)
    1b9c:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
    1ba0:	b913      	cbnz	r3, 1ba8 <tcvp_new+0x28>
    1ba2:	200a      	movs	r0, #10
    1ba4:	490f      	ldr	r1, [pc, #60]	; (1be4 <tcvp_new+0x64>)
    1ba6:	e7f4      	b.n	1b92 <tcvp_new+0x12>
			TCV_LIMIT_XMT)) {
		       		// Drop
		    	   	return NULL;
		}
#endif
		if ((p = apb (size)) != NULL) {
    1ba8:	f7ff fe10 	bl	17cc <apb>
    1bac:	4604      	mov	r4, r0
    1bae:	b908      	cbnz	r0, 1bb4 <tcvp_new+0x34>
			/* If you accidentally call tcv_endp on it */
			p->attributes.b.outgoing = 0;
			dispose (p, dsp);
			return (address)(p + 1);
		}
		return NULL;
    1bb0:	2000      	movs	r0, #0

	if ((p = apb (size)) != NULL)
		return (address)(p + 1);
	else
		return NULL;
}
    1bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			p->attributes = descriptors [ses] -> attpattern;
    1bb4:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
			dispose (p, dsp);
    1bb8:	4631      	mov	r1, r6
			p->attributes = descriptors [ses] -> attpattern;
    1bba:	891b      	ldrh	r3, [r3, #8]
    1bbc:	8143      	strh	r3, [r0, #10]
			p->attributes.b.outgoing = 0;
    1bbe:	f36f 0341 	bfc	r3, #1, #1
    1bc2:	7283      	strb	r3, [r0, #10]
			dispose (p, dsp);
    1bc4:	f7ff fe48 	bl	1858 <dispose>
			return (address)(p + 1);
    1bc8:	f104 000c 	add.w	r0, r4, #12
    1bcc:	e7f1      	b.n	1bb2 <tcvp_new+0x32>
	if ((p = apb (size)) != NULL)
    1bce:	f7ff fdfd 	bl	17cc <apb>
    1bd2:	2800      	cmp	r0, #0
    1bd4:	d0ec      	beq.n	1bb0 <tcvp_new+0x30>
		return (address)(p + 1);
    1bd6:	300c      	adds	r0, #12
    1bd8:	e7eb      	b.n	1bb2 <tcvp_new+0x32>
    1bda:	bf00      	nop
    1bdc:	0000466f 	andeq	r4, r0, pc, ror #12
    1be0:	20000568 	andcs	r0, r0, r8, ror #10
    1be4:	00004675 	andeq	r4, r0, r5, ror r6

00001be8 <tcvphy_reg>:
 * points to a function that controls (i.e., changes the options of) the
 * interface.
 */
	qhead_t *q;

	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1be8:	2802      	cmp	r0, #2
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    1bea:	b510      	push	{r4, lr}
    1bec:	4604      	mov	r4, r0
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1bee:	d803      	bhi.n	1bf8 <tcvphy_reg+0x10>
    1bf0:	4b0c      	ldr	r3, [pc, #48]	; (1c24 <tcvphy_reg+0x3c>)
    1bf2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    1bf6:	b118      	cbz	r0, 1c00 <tcvphy_reg+0x18>
		syserror (EREQPAR, "tcv28");
    1bf8:	2003      	movs	r0, #3
    1bfa:	490b      	ldr	r1, [pc, #44]	; (1c28 <tcvphy_reg+0x40>)
	physical [phy] = ps;
	physinfo [phy] = info;

	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
	if (q == NULL)
		syserror (EMALLOC, "tcv29");
    1bfc:	f7fe fd26 	bl	64c <__pi_syserror>
	physical [phy] = ps;
    1c00:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
	physinfo [phy] = info;
    1c04:	4b09      	ldr	r3, [pc, #36]	; (1c2c <tcvphy_reg+0x44>)
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    1c06:	2008      	movs	r0, #8
	physinfo [phy] = info;
    1c08:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    1c0c:	f7ff fcb4 	bl	1578 <__pi_malloc>
    1c10:	4a07      	ldr	r2, [pc, #28]	; (1c30 <tcvphy_reg+0x48>)
    1c12:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
	if (q == NULL)
    1c16:	b910      	cbnz	r0, 1c1e <tcvphy_reg+0x36>
		syserror (EMALLOC, "tcv29");
    1c18:	2006      	movs	r0, #6
    1c1a:	4906      	ldr	r1, [pc, #24]	; (1c34 <tcvphy_reg+0x4c>)
    1c1c:	e7ee      	b.n	1bfc <tcvphy_reg+0x14>
	q_init (q);
    1c1e:	e9c0 0000 	strd	r0, r0, [r0]
	/*
	 * Queue event identifier (which happens to be the queue pointer
	 * in disguise).
	 */
	return ptrtoint (q);
}
    1c22:	bd10      	pop	{r4, pc}
    1c24:	20000594 	mulcs	r0, r4, r5
    1c28:	0000467b 	andeq	r4, r0, fp, ror r6
    1c2c:	200005a0 	andcs	r0, r0, r0, lsr #11
    1c30:	20000588 	andcs	r0, r0, r8, lsl #11
    1c34:	00004681 	andeq	r4, r0, r1, lsl #13

00001c38 <tcvphy_rcv>:

__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
	int plg, dsp, ses;
	tcvadp_t ap;
	address c;

	verify_fph (phy, "tcv30");
    1c3c:	2803      	cmp	r0, #3
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1c3e:	4605      	mov	r5, r0
    1c40:	460f      	mov	r7, r1
    1c42:	4614      	mov	r4, r2
    1c44:	b085      	sub	sp, #20
	verify_fph (phy, "tcv30");
    1c46:	d803      	bhi.n	1c50 <tcvphy_rcv+0x18>
    1c48:	4b1e      	ldr	r3, [pc, #120]	; (1cc4 <tcvphy_rcv+0x8c>)
    1c4a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1c4e:	b91b      	cbnz	r3, 1c58 <tcvphy_rcv+0x20>
    1c50:	491d      	ldr	r1, [pc, #116]	; (1cc8 <tcvphy_rcv+0x90>)
		 * (or fall back) plugins to be used when none of the
		 * "specific" plugins claims the packet.
		 */
		if (plugins [plg] == NULL)
			continue;
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1c52:	200a      	movs	r0, #10
    1c54:	f7fe fcfa 	bl	64c <__pi_syserror>
    1c58:	4e1c      	ldr	r6, [pc, #112]	; (1ccc <tcvphy_rcv+0x94>)
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1c5a:	f10d 080c 	add.w	r8, sp, #12
    1c5e:	f1a6 0a08 	sub.w	sl, r6, #8
		if (plugins [plg] == NULL)
    1c62:	6833      	ldr	r3, [r6, #0]
    1c64:	46b1      	mov	r9, r6
    1c66:	3e04      	subs	r6, #4
    1c68:	b92b      	cbnz	r3, 1c76 <tcvphy_rcv+0x3e>
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    1c6a:	45ca      	cmp	sl, r9
    1c6c:	d1f9      	bne.n	1c62 <tcvphy_rcv+0x2a>
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
		/*
		 * Either no one is claiming the packet or the claimant says
		 * we should drop it.
		 */
		return 0;
    1c6e:	2000      	movs	r0, #0
		return 0;

	memcpy ((char*)c, ((char*)p) + ap.head, len);

	return 1;
}
    1c70:	b005      	add	sp, #20
    1c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1c76:	f8d3 b008 	ldr.w	fp, [r3, #8]
    1c7a:	f1bb 0f00 	cmp.w	fp, #0
    1c7e:	d101      	bne.n	1c84 <tcvphy_rcv+0x4c>
    1c80:	4913      	ldr	r1, [pc, #76]	; (1cd0 <tcvphy_rcv+0x98>)
    1c82:	e7e6      	b.n	1c52 <tcvphy_rcv+0x1a>
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1c84:	4639      	mov	r1, r7
    1c86:	4622      	mov	r2, r4
    1c88:	4628      	mov	r0, r5
    1c8a:	f8cd 8000 	str.w	r8, [sp]
    1c8e:	ab02      	add	r3, sp, #8
    1c90:	47d8      	blx	fp
    1c92:	4601      	mov	r1, r0
    1c94:	2800      	cmp	r0, #0
    1c96:	d0e8      	beq.n	1c6a <tcvphy_rcv+0x32>
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    1c98:	2801      	cmp	r0, #1
    1c9a:	d0e8      	beq.n	1c6e <tcvphy_rcv+0x36>
	len -= (ap.head + ap.tail);
    1c9c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    1ca0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    1ca4:	441a      	add	r2, r3
    1ca6:	1aa4      	subs	r4, r4, r2
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    1ca8:	4620      	mov	r0, r4
    1caa:	9a02      	ldr	r2, [sp, #8]
    1cac:	f7ff ff68 	bl	1b80 <tcvp_new>
    1cb0:	2800      	cmp	r0, #0
    1cb2:	d0dc      	beq.n	1c6e <tcvphy_rcv+0x36>
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    1cb4:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    1cb8:	4622      	mov	r2, r4
    1cba:	4439      	add	r1, r7
    1cbc:	f7ff fb77 	bl	13ae <__pi_memcpy>
	return 1;
    1cc0:	2001      	movs	r0, #1
    1cc2:	e7d5      	b.n	1c70 <tcvphy_rcv+0x38>
    1cc4:	20000594 	mulcs	r0, r4, r5
    1cc8:	00004687 	andeq	r4, r0, r7, lsl #13
    1ccc:	200005b4 			; <UNDEFINED> instruction: 0x200005b4
    1cd0:	0000468d 	andeq	r4, r0, sp, lsl #13

00001cd4 <tcvphy_get>:
 * Returns the packet pointer and its length.
 */
	qhead_t	*oq;
	hblock_t *b;

	verify_fph (phy, "tcv32");
    1cd4:	2803      	cmp	r0, #3
__PUBLF (PicOSNode, address, tcvphy_get) (int phy, int *len) {
    1cd6:	b508      	push	{r3, lr}
	verify_fph (phy, "tcv32");
    1cd8:	d803      	bhi.n	1ce2 <tcvphy_get+0xe>
    1cda:	4b0b      	ldr	r3, [pc, #44]	; (1d08 <tcvphy_get+0x34>)
    1cdc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1ce0:	b91b      	cbnz	r3, 1cea <tcvphy_get+0x16>
    1ce2:	200a      	movs	r0, #10
    1ce4:	4909      	ldr	r1, [pc, #36]	; (1d0c <tcvphy_get+0x38>)
    1ce6:	f7fe fcb1 	bl	64c <__pi_syserror>

	oq = oqueues [phy];
    1cea:	4b09      	ldr	r3, [pc, #36]	; (1d10 <tcvphy_get+0x3c>)
    1cec:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	b = q_first (oq);
    1cf0:	6818      	ldr	r0, [r3, #0]
	if (q_end (b, oq)) {
    1cf2:	4283      	cmp	r3, r0
    1cf4:	d005      	beq.n	1d02 <tcvphy_get+0x2e>
		/* The queue is empty */
		return NULL;
	}

	*len = b->length;
    1cf6:	8903      	ldrh	r3, [r0, #8]
    1cf8:	600b      	str	r3, [r1, #0]
	deq (b);	// Dequeue the packet ...
    1cfa:	f7ff fd72 	bl	17e2 <deq>
	deqtm (b);	// ... and clear its timer
	return (address) (b + 1);
    1cfe:	300c      	adds	r0, #12
}
    1d00:	bd08      	pop	{r3, pc}
		return NULL;
    1d02:	2000      	movs	r0, #0
    1d04:	e7fc      	b.n	1d00 <tcvphy_get+0x2c>
    1d06:	bf00      	nop
    1d08:	20000594 	mulcs	r0, r4, r5
    1d0c:	00004693 	muleq	r0, r3, r6
    1d10:	20000588 	andcs	r0, r0, r8, lsl #11

00001d14 <tcvphy_top>:
 * Returns the pointer to the first outgoing packet.
 */
	qhead_t *oq;
	hblock_t *b;

	verify_fph (phy, "tcv33");
    1d14:	2803      	cmp	r0, #3
__PUBLF (PicOSNode, address, tcvphy_top) (int phy) {
    1d16:	b508      	push	{r3, lr}
	verify_fph (phy, "tcv33");
    1d18:	d803      	bhi.n	1d22 <tcvphy_top+0xe>
    1d1a:	4b08      	ldr	r3, [pc, #32]	; (1d3c <tcvphy_top+0x28>)
    1d1c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1d20:	b91b      	cbnz	r3, 1d2a <tcvphy_top+0x16>
    1d22:	200a      	movs	r0, #10
    1d24:	4906      	ldr	r1, [pc, #24]	; (1d40 <tcvphy_top+0x2c>)
    1d26:	f7fe fc91 	bl	64c <__pi_syserror>

	oq = oqueues [phy];
    1d2a:	4b06      	ldr	r3, [pc, #24]	; (1d44 <tcvphy_top+0x30>)
    1d2c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	b = q_first (oq);
    1d30:	6818      	ldr	r0, [r3, #0]
	if (q_end (b, oq))
    1d32:	4283      	cmp	r3, r0
		return NULL;
    1d34:	bf0c      	ite	eq
    1d36:	2000      	moveq	r0, #0

	return (address)(b + 1);
    1d38:	300c      	addne	r0, #12
}
    1d3a:	bd08      	pop	{r3, pc}
    1d3c:	20000594 	mulcs	r0, r4, r5
    1d40:	00004699 	muleq	r0, r9, r6
    1d44:	20000588 	andcs	r0, r0, r8, lsl #11

00001d48 <tcvphy_end>:

__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    1d48:	b510      	push	{r4, lr}
/*
 * Marks the end of packet transmission
 */
	hblock_t *b = header (pkt);

	verify_plg (b, tcv_xmt, "tcv34");
    1d4a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
	hblock_t *b = header (pkt);
    1d4e:	f1a0 040c 	sub.w	r4, r0, #12
	verify_plg (b, tcv_xmt, "tcv34");
    1d52:	f3c3 0382 	ubfx	r3, r3, #2, #3
    1d56:	2b02      	cmp	r3, #2
    1d58:	d805      	bhi.n	1d66 <tcvphy_end+0x1e>
    1d5a:	4a08      	ldr	r2, [pc, #32]	; (1d7c <tcvphy_end+0x34>)
    1d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1d60:	b10b      	cbz	r3, 1d66 <tcvphy_end+0x1e>
    1d62:	695b      	ldr	r3, [r3, #20]
    1d64:	b91b      	cbnz	r3, 1d6e <tcvphy_end+0x26>
    1d66:	200a      	movs	r0, #10
    1d68:	4905      	ldr	r1, [pc, #20]	; (1d80 <tcvphy_end+0x38>)
    1d6a:	f7fe fc6f 	bl	64c <__pi_syserror>
	dispose (b, plugins [b->attributes.b.plugin] ->
    1d6e:	4798      	blx	r3
    1d70:	4601      	mov	r1, r0
    1d72:	4620      	mov	r0, r4
		tcv_xmt (pkt));
}
    1d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	dispose (b, plugins [b->attributes.b.plugin] ->
    1d78:	f7ff bd6e 	b.w	1858 <dispose>
    1d7c:	200005ac 	andcs	r0, r0, ip, lsr #11
    1d80:	0000469f 	muleq	r0, pc, r6	; <UNPREDICTABLE>

00001d84 <tcv_init>:
	tcv_tservice = create TCVTimerService;
	tcv_tservice -> _pp_apid_ ();
#endif	/* __SMURPH__ */

#endif	/* TCV_TIMERS */
}
    1d84:	4770      	bx	lr

00001d86 <NmiSR>:
NmiSRHandler(void)
{
    //
    // Enter an infinite loop.
    //
    while(1)
    1d86:	e7fe      	b.n	1d86 <NmiSR>

00001d88 <FaultISR>:
FaultISRHandler(void)
{
    //
    // Enter an infinite loop.
    //
    while(1)
    1d88:	e7fe      	b.n	1d88 <FaultISR>

00001d8a <AONIntHandler>:
IntDefaultHandler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    1d8a:	e7fe      	b.n	1d8a <AONIntHandler>

00001d8c <ResetISR>:
{
    1d8c:	b508      	push	{r3, lr}
    SetupTrimDevice();
    1d8e:	f001 fcdf 	bl	3750 <NOROM_SetupTrimDevice>
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1d92:	4b0c      	ldr	r3, [pc, #48]	; (1dc4 <zero_loop+0x20>)
    pui32Src = &_etext;
    1d94:	4a0c      	ldr	r2, [pc, #48]	; (1dc8 <zero_loop+0x24>)
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1d96:	490d      	ldr	r1, [pc, #52]	; (1dcc <zero_loop+0x28>)
    1d98:	428b      	cmp	r3, r1
    1d9a:	d30d      	bcc.n	1db8 <zero_loop+0x14>
    __asm("    ldr     r0, =_bss\n"
    1d9c:	480c      	ldr	r0, [pc, #48]	; (1dd0 <zero_loop+0x2c>)
    1d9e:	490d      	ldr	r1, [pc, #52]	; (1dd4 <zero_loop+0x30>)
    1da0:	f04f 0200 	mov.w	r2, #0

00001da4 <zero_loop>:
    1da4:	4288      	cmp	r0, r1
    1da6:	bfb8      	it	lt
    1da8:	f840 2b04 	strlt.w	r2, [r0], #4
    1dac:	dbfa      	blt.n	1da4 <zero_loop>
   main();
    1dae:	f7ff f94f 	bl	1050 <main>
    FaultISR();
    1db2:	f7ff ffe9 	bl	1d88 <FaultISR>
}
    1db6:	bd08      	pop	{r3, pc}
        *pui32Dest++ = *pui32Src++;
    1db8:	f852 0b04 	ldr.w	r0, [r2], #4
    1dbc:	f843 0b04 	str.w	r0, [r3], #4
    1dc0:	e7ea      	b.n	1d98 <ResetISR+0xc>
    1dc2:	bf00      	nop
    1dc4:	20000000 	andcs	r0, r0, r0
    1dc8:	000050a8 	andeq	r5, r0, r8, lsr #1
    1dcc:	20000540 	andcs	r0, r0, r0, asr #10
    1dd0:	20000540 	andcs	r0, r0, r0, asr #10
    1dd4:	20000ba0 	andcs	r0, r0, r0, lsr #23

00001dd8 <get_byte>:

static word	left;

// ============================================================================

static byte get_byte () {
    1dd8:	2308      	movs	r3, #8

	int i;
	byte b;

	for (b = 0, i = 0; i < 8; i++) {
    1dda:	2000      	movs	r0, #0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1ddc:	f44f 6280 	mov.w	r2, #1024	; 0x400
static byte get_byte () {
    1de0:	b570      	push	{r4, r5, r6, lr}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1de2:	4907      	ldr	r1, [pc, #28]	; (1e00 <get_byte+0x28>)
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1de4:	4d07      	ldr	r5, [pc, #28]	; (1e04 <get_byte+0x2c>)
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1de6:	4c08      	ldr	r4, [pc, #32]	; (1e08 <get_byte+0x30>)
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1de8:	682e      	ldr	r6, [r5, #0]
		b <<= 1;
    1dea:	0040      	lsls	r0, r0, #1
		if (ee_inp)
    1dec:	05f6      	lsls	r6, r6, #23
		b <<= 1;
    1dee:	b2c0      	uxtb	r0, r0
			b |= 1;
    1df0:	bf48      	it	mi
    1df2:	f040 0001 	orrmi.w	r0, r0, #1
	for (b = 0, i = 0; i < 8; i++) {
    1df6:	3b01      	subs	r3, #1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1df8:	6022      	str	r2, [r4, #0]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1dfa:	600a      	str	r2, [r1, #0]
    1dfc:	d1f4      	bne.n	1de8 <get_byte+0x10>
		ee_clkh;
		ee_clkl;
	}

	return b;
}
    1dfe:	bd70      	pop	{r4, r5, r6, pc}
    1e00:	400220a0 	andmi	r2, r2, r0, lsr #1
    1e04:	400220c0 	andmi	r2, r2, r0, asr #1
    1e08:	40022090 	mulmi	r2, r0, r0

00001e0c <put_byte>:

static void put_byte (byte b) {
    1e0c:	b530      	push	{r4, r5, lr}
    1e0e:	2308      	movs	r3, #8
    1e10:	f44f 7500 	mov.w	r5, #512	; 0x200
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1e14:	f44f 6180 	mov.w	r1, #1024	; 0x400
    1e18:	4c06      	ldr	r4, [pc, #24]	; (1e34 <put_byte+0x28>)
    1e1a:	4a07      	ldr	r2, [pc, #28]	; (1e38 <put_byte+0x2c>)

	int i;

	for (i = 0; i < 8; i++) {
		if (b & 0x80)
    1e1c:	f010 0f80 	tst.w	r0, #128	; 0x80
    1e20:	bf14      	ite	ne
    1e22:	6025      	strne	r5, [r4, #0]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1e24:	6015      	streq	r5, [r2, #0]
			ee_outh;
		else
			ee_outl;
		ee_clkh;
		ee_clkl;
		b <<= 1;
    1e26:	0040      	lsls	r0, r0, #1
	for (i = 0; i < 8; i++) {
    1e28:	3b01      	subs	r3, #1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1e2a:	6021      	str	r1, [r4, #0]
		b <<= 1;
    1e2c:	b2c0      	uxtb	r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1e2e:	6011      	str	r1, [r2, #0]
	for (i = 0; i < 8; i++) {
    1e30:	d1f4      	bne.n	1e1c <put_byte+0x10>
	}
}
    1e32:	bd30      	pop	{r4, r5, pc}
    1e34:	40022090 	mulmi	r2, r0, r0
    1e38:	400220a0 	andmi	r2, r2, r0, lsr #1

00001e3c <cmd_0>:
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1e3c:	2301      	movs	r3, #1

// ============================================================================

static void cmd_0 (byte cmd) {
    1e3e:	b510      	push	{r4, lr}
    1e40:	4c03      	ldr	r4, [pc, #12]	; (1e50 <cmd_0+0x14>)
    1e42:	6023      	str	r3, [r4, #0]

	ee_start;
	put_byte (cmd);
    1e44:	f7ff ffe2 	bl	1e0c <put_byte>
    1e48:	2300      	movs	r3, #0
    1e4a:	6023      	str	r3, [r4, #0]
	ee_stop;
}
    1e4c:	bd10      	pop	{r4, pc}
    1e4e:	bf00      	nop
    1e50:	42441a50 	submi	r1, r4, #80, 20	; 0x50000

00001e54 <wwait>:
	r = get_byte ();
	ee_stop;
	return r;
}

static void wwait (word st, word del) {
    1e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1e58:	4604      	mov	r4, r0
    1e5a:	460d      	mov	r5, r1
    1e5c:	2701      	movs	r7, #1
//
// Wait for write to complete
//
	while (dopen && (rdsr () & 1)) {
    1e5e:	f8df 8044 	ldr.w	r8, [pc, #68]	; 1ea4 <wwait+0x50>
    1e62:	4e0f      	ldr	r6, [pc, #60]	; (1ea0 <wwait+0x4c>)
    1e64:	f898 3000 	ldrb.w	r3, [r8]
    1e68:	b14b      	cbz	r3, 1e7e <wwait+0x2a>
	put_byte (CMD_RDSR);
    1e6a:	2005      	movs	r0, #5
    1e6c:	6037      	str	r7, [r6, #0]
    1e6e:	f7ff ffcd 	bl	1e0c <put_byte>
	r = get_byte ();
    1e72:	f7ff ffb1 	bl	1dd8 <get_byte>
    1e76:	2300      	movs	r3, #0
    1e78:	6033      	str	r3, [r6, #0]
	while (dopen && (rdsr () & 1)) {
    1e7a:	07c3      	lsls	r3, r0, #31
    1e7c:	d401      	bmi.n	1e82 <wwait+0x2e>
		else {
			delay (del, st);
			release;
		}
	}
}
    1e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (st == WNONE)
    1e82:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1e86:	429c      	cmp	r4, r3
    1e88:	d103      	bne.n	1e92 <wwait+0x3e>
			mdelay (1);
    1e8a:	2001      	movs	r0, #1
    1e8c:	f7fe fb8a 	bl	5a4 <mdelay>
    1e90:	e7e8      	b.n	1e64 <wwait+0x10>
			delay (del, st);
    1e92:	4621      	mov	r1, r4
    1e94:	4628      	mov	r0, r5
    1e96:	f7ff fa4d 	bl	1334 <delay>
			release;
    1e9a:	f7fe ff95 	bl	dc8 <__pi_release>
    1e9e:	bf00      	nop
    1ea0:	42441a50 	submi	r1, r4, #80, 20	; 0x50000
    1ea4:	200005b8 			; <UNDEFINED> instruction: 0x200005b8

00001ea8 <ready>:
		dopen = 0;
		ee_bring_down;
	}
}

static void ready () {
    1ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
//
// Called before a new operation to make sure the chip is ready
//
	if (dopen) {
    1eaa:	4d0c      	ldr	r5, [pc, #48]	; (1edc <ready+0x34>)
    1eac:	782f      	ldrb	r7, [r5, #0]
    1eae:	b147      	cbz	r7, 1ec2 <ready+0x1a>
		// The device is open
		wwait (WNONE, 1);
    1eb0:	2101      	movs	r1, #1
    1eb2:	f64f 70ff 	movw	r0, #65535	; 0xffff
    1eb6:	f7ff ffcd 	bl	1e54 <wwait>
	} else {
		copen ();
		dopen = DOPEN_TEMP;
	}

	dstat = 0;
    1eba:	2200      	movs	r2, #0
    1ebc:	4b08      	ldr	r3, [pc, #32]	; (1ee0 <ready+0x38>)
    1ebe:	701a      	strb	r2, [r3, #0]
}
    1ec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1ec2:	2401      	movs	r4, #1
    1ec4:	4e07      	ldr	r6, [pc, #28]	; (1ee4 <ready+0x3c>)
	udelay (1);
    1ec6:	4620      	mov	r0, r4
    1ec8:	6034      	str	r4, [r6, #0]
    1eca:	f7fe fb55 	bl	578 <udelay>
	udelay (1);
    1ece:	4620      	mov	r0, r4
    1ed0:	6037      	str	r7, [r6, #0]
    1ed2:	f7fe fb51 	bl	578 <udelay>
		dopen = DOPEN_TEMP;
    1ed6:	2302      	movs	r3, #2
    1ed8:	702b      	strb	r3, [r5, #0]
    1eda:	e7ee      	b.n	1eba <ready+0x12>
    1edc:	200005b8 			; <UNDEFINED> instruction: 0x200005b8
    1ee0:	200005b9 			; <UNDEFINED> instruction: 0x200005b9
    1ee4:	42441a50 	submi	r1, r4, #80, 20	; 0x50000

00001ee8 <cclose>:
static void cclose () {
    1ee8:	b510      	push	{r4, lr}
	if (dopen == DOPEN_TEMP) {
    1eea:	4c07      	ldr	r4, [pc, #28]	; (1f08 <cclose+0x20>)
    1eec:	7823      	ldrb	r3, [r4, #0]
    1eee:	2b02      	cmp	r3, #2
    1ef0:	d109      	bne.n	1f06 <cclose+0x1e>
		wwait (WNONE, 1);
    1ef2:	2101      	movs	r1, #1
    1ef4:	f64f 70ff 	movw	r0, #65535	; 0xffff
    1ef8:	f7ff ffac 	bl	1e54 <wwait>
	cmd_0 (CMD_DP);
    1efc:	20b9      	movs	r0, #185	; 0xb9
    1efe:	f7ff ff9d 	bl	1e3c <cmd_0>
		dopen = 0;
    1f02:	2300      	movs	r3, #0
    1f04:	7023      	strb	r3, [r4, #0]
}
    1f06:	bd10      	pop	{r4, pc}
    1f08:	200005b8 			; <UNDEFINED> instruction: 0x200005b8

00001f0c <ee_open>:

// ============================================================================

word ee_open () {
    1f0c:	b508      	push	{r3, lr}
//
// Open (for more than one operation)
//
	ready ();
    1f0e:	f7ff ffcb 	bl	1ea8 <ready>
	dopen = DOPEN_PERM;
    1f12:	2201      	movs	r2, #1
    1f14:	4b01      	ldr	r3, [pc, #4]	; (1f1c <ee_open+0x10>)
		ee_stop;
		diag ("ID: %x %x %x", r [0], r [1], r [2]);
	}
#endif
	return 0;
}
    1f16:	2000      	movs	r0, #0
	dopen = DOPEN_PERM;
    1f18:	701a      	strb	r2, [r3, #0]
}
    1f1a:	bd08      	pop	{r3, pc}
    1f1c:	200005b8 			; <UNDEFINED> instruction: 0x200005b8

00001f20 <ee_close>:

void ee_close () {

	if (dopen) {
    1f20:	4b03      	ldr	r3, [pc, #12]	; (1f30 <ee_close+0x10>)
    1f22:	781a      	ldrb	r2, [r3, #0]
    1f24:	b11a      	cbz	r2, 1f2e <ee_close+0xe>
		dopen = DOPEN_TEMP;
    1f26:	2202      	movs	r2, #2
    1f28:	701a      	strb	r2, [r3, #0]
		cclose ();
    1f2a:	f7ff bfdd 	b.w	1ee8 <cclose>
	}
}
    1f2e:	4770      	bx	lr
    1f30:	200005b8 			; <UNDEFINED> instruction: 0x200005b8

00001f34 <ser_in>:

extern char *__inpline;

procname (__inserial);

int ser_in (word st, char *buf, int len) {
    1f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f36:	4604      	mov	r4, r0
    1f38:	460f      	mov	r7, r1
/* ======= */
/* Direct */
/* ====== */
	int prcs;

	if (len == 0)
    1f3a:	4615      	mov	r5, r2
    1f3c:	b37a      	cbz	r2, 1f9e <ser_in+0x6a>
		// Just in case
		return 0;

	if (__inpline == NULL) {
    1f3e:	4e19      	ldr	r6, [pc, #100]	; (1fa4 <ser_in+0x70>)
    1f40:	6830      	ldr	r0, [r6, #0]
    1f42:	b988      	cbnz	r0, 1f68 <ser_in+0x34>
		if ((prcs = running (__inserial)) == 0) {
    1f44:	4818      	ldr	r0, [pc, #96]	; (1fa8 <ser_in+0x74>)
    1f46:	f7ff fa11 	bl	136c <running>
    1f4a:	b948      	cbnz	r0, 1f60 <ser_in+0x2c>
			prcs = runthread (__inserial);
    1f4c:	4601      	mov	r1, r0
    1f4e:	4816      	ldr	r0, [pc, #88]	; (1fa8 <ser_in+0x74>)
    1f50:	f7ff fb66 	bl	1620 <__pi_fork>
			if (prcs == 0) {
    1f54:	b920      	cbnz	r0, 1f60 <ser_in+0x2c>
				npwait (st);
    1f56:	4620      	mov	r0, r4
    1f58:	f7ff fb7c 	bl	1654 <__pi_waitmem>
				release;
			}
		}
		join (prcs, st);
		release;
    1f5c:	f7fe ff34 	bl	dc8 <__pi_release>
		join (prcs, st);
    1f60:	4621      	mov	r1, r4
    1f62:	f7ff f9d5 	bl	1310 <__pi_join>
    1f66:	e7f9      	b.n	1f5c <ser_in+0x28>
	}

	/* Input available */
	if (*__inpline == NULL) // bin cmd
    1f68:	7803      	ldrb	r3, [r0, #0]
    1f6a:	b9a3      	cbnz	r3, 1f96 <ser_in+0x62>
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    1f6c:	7844      	ldrb	r4, [r0, #1]
    1f6e:	3403      	adds	r4, #3
	else
		prcs = strlen (__inpline);

	if (prcs >= len)
    1f70:	42ac      	cmp	r4, r5
		prcs = len-1;
    1f72:	bfa8      	it	ge
    1f74:	f105 34ff 	addge.w	r4, r5, #4294967295	; 0xffffffff

	memcpy (buf, __inpline, prcs);
    1f78:	4622      	mov	r2, r4
    1f7a:	4638      	mov	r0, r7
    1f7c:	6831      	ldr	r1, [r6, #0]
    1f7e:	f7ff fa16 	bl	13ae <__pi_memcpy>
	ufree (__inpline);
    1f82:	6830      	ldr	r0, [r6, #0]
    1f84:	f7ff faac 	bl	14e0 <__pi_free>
	__inpline = NULL;
    1f88:	2300      	movs	r3, #0
    1f8a:	6033      	str	r3, [r6, #0]
	if (*buf) // if it's NULL, it's a bin cmd
    1f8c:	783a      	ldrb	r2, [r7, #0]
    1f8e:	b102      	cbz	r2, 1f92 <ser_in+0x5e>
		buf [prcs] = '\0';
    1f90:	553b      	strb	r3, [r7, r4]
	return prcs;
}
    1f92:	4620      	mov	r0, r4
    1f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		prcs = strlen (__inpline);
    1f96:	f7ff f9fb 	bl	1390 <__pi_strlen>
    1f9a:	4604      	mov	r4, r0
    1f9c:	e7e8      	b.n	1f70 <ser_in+0x3c>
		return 0;
    1f9e:	4614      	mov	r4, r2
    1fa0:	e7f7      	b.n	1f92 <ser_in+0x5e>
    1fa2:	bf00      	nop
    1fa4:	20000604 	andcs	r0, r0, r4, lsl #12
    1fa8:	00002a45 	andeq	r2, r0, r5, asr #20

00001fac <ser_outf>:

//+++ "__outserial.c"

procname (__outserial);

int ser_outf (word st, const char *m, ...) {
    1fac:	b40e      	push	{r1, r2, r3}
    1fae:	b577      	push	{r0, r1, r2, r4, r5, r6, lr}
    1fb0:	4604      	mov	r4, r0

	int prcs;
	char *buf;
	va_list ap;

	if ((prcs = running (__outserial)) != 0) {
    1fb2:	4812      	ldr	r0, [pc, #72]	; (1ffc <ser_outf+0x50>)
    1fb4:	f7ff f9da 	bl	136c <running>
    1fb8:	4606      	mov	r6, r0
    1fba:	b120      	cbz	r0, 1fc6 <ser_outf+0x1a>
		/* We have to wait */
		join (prcs, st);
    1fbc:	4621      	mov	r1, r4
    1fbe:	f7ff f9a7 	bl	1310 <__pi_join>
	if ((buf = vform (NULL, m, ap)) == NULL) {
		/*
		 * This means that we are out of memory
		 */
		umwait (st);
		release;
    1fc2:	f7fe ff01 	bl	dc8 <__pi_release>
	va_start (ap, m);
    1fc6:	aa08      	add	r2, sp, #32
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1fc8:	9907      	ldr	r1, [sp, #28]
	va_start (ap, m);
    1fca:	9201      	str	r2, [sp, #4]
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1fcc:	f000 fef0 	bl	2db0 <vform>
    1fd0:	4605      	mov	r5, r0
    1fd2:	b918      	cbnz	r0, 1fdc <ser_outf+0x30>
		umwait (st);
    1fd4:	4620      	mov	r0, r4
    1fd6:	f7ff fb3d 	bl	1654 <__pi_waitmem>
    1fda:	e7f2      	b.n	1fc2 <ser_outf+0x16>
	}

	if (runstrand (__outserial, buf) == 0) {
    1fdc:	4601      	mov	r1, r0
    1fde:	4807      	ldr	r0, [pc, #28]	; (1ffc <ser_outf+0x50>)
    1fe0:	f7ff fb1e 	bl	1620 <__pi_fork>
    1fe4:	b918      	cbnz	r0, 1fee <ser_outf+0x42>
		ufree (buf);
    1fe6:	4628      	mov	r0, r5
    1fe8:	f7ff fa7a 	bl	14e0 <__pi_free>
		npwait (st);
    1fec:	e7f2      	b.n	1fd4 <ser_outf+0x28>
		release;
	}

	return 0;
}
    1fee:	4630      	mov	r0, r6
    1ff0:	b003      	add	sp, #12
    1ff2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1ff6:	b003      	add	sp, #12
    1ff8:	4770      	bx	lr
    1ffa:	bf00      	nop
    1ffc:	000029d5 	ldrdeq	r2, [r0], -r5

00002000 <ser_inf>:

extern char *__inpline;

procname (__inserial);

int ser_inf (word st, const char *fmt, ...) {
    2000:	b40e      	push	{r1, r2, r3}
    2002:	b533      	push	{r0, r1, r4, r5, lr}
    2004:	9905      	ldr	r1, [sp, #20]
    2006:	4604      	mov	r4, r0
/* ========= */

	int prcs;
	va_list	ap;

	if (fmt == NULL)
    2008:	b321      	cbz	r1, 2054 <ser_inf+0x54>
		return 0;

	if (__inpline == NULL) {
    200a:	4d13      	ldr	r5, [pc, #76]	; (2058 <ser_inf+0x58>)
    200c:	6828      	ldr	r0, [r5, #0]
    200e:	b988      	cbnz	r0, 2034 <ser_inf+0x34>
		if ((prcs = running (__inserial)) == 0) {
    2010:	4812      	ldr	r0, [pc, #72]	; (205c <ser_inf+0x5c>)
    2012:	f7ff f9ab 	bl	136c <running>
    2016:	b948      	cbnz	r0, 202c <ser_inf+0x2c>
			prcs = runthread (__inserial);
    2018:	4601      	mov	r1, r0
    201a:	4810      	ldr	r0, [pc, #64]	; (205c <ser_inf+0x5c>)
    201c:	f7ff fb00 	bl	1620 <__pi_fork>
			if (prcs == 0) {
    2020:	b920      	cbnz	r0, 202c <ser_inf+0x2c>
				npwait (st);
    2022:	4620      	mov	r0, r4
    2024:	f7ff fb16 	bl	1654 <__pi_waitmem>
				release;
			}
		}
		join (prcs, st);
		release;
    2028:	f7fe fece 	bl	dc8 <__pi_release>
		join (prcs, st);
    202c:	4621      	mov	r1, r4
    202e:	f7ff f96f 	bl	1310 <__pi_join>
    2032:	e7f9      	b.n	2028 <ser_inf+0x28>
	}

	/* Input available */
	va_start (ap, fmt);
    2034:	aa06      	add	r2, sp, #24
    2036:	9201      	str	r2, [sp, #4]

	prcs = vscan (__inpline, fmt, ap);
    2038:	f000 fee2 	bl	2e00 <vscan>
    203c:	4604      	mov	r4, r0

	ufree (__inpline);
    203e:	6828      	ldr	r0, [r5, #0]
    2040:	f7ff fa4e 	bl	14e0 <__pi_free>
	__inpline = NULL;
    2044:	2300      	movs	r3, #0
    2046:	602b      	str	r3, [r5, #0]

	return prcs;
}
    2048:	4620      	mov	r0, r4
    204a:	b002      	add	sp, #8
    204c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    2050:	b003      	add	sp, #12
    2052:	4770      	bx	lr
		return 0;
    2054:	460c      	mov	r4, r1
    2056:	e7f7      	b.n	2048 <ser_inf+0x48>
    2058:	20000604 	andcs	r0, r0, r4, lsl #12
    205c:	00002a45 	andeq	r2, r0, r5, asr #20

00002060 <plugch>:
//
// Insert the channel number as the right frequency in the proper place
//
	RF_cmdFs.frequency = 
		// Channel number is just the megahertz increment
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    2060:	4b04      	ldr	r3, [pc, #16]	; (2074 <plugch+0x14>)
    2062:	4a05      	ldr	r2, [pc, #20]	; (2078 <plugch+0x18>)
    2064:	781b      	ldrb	r3, [r3, #0]
    2066:	f503 7359 	add.w	r3, r3, #868	; 0x364
    206a:	8413      	strh	r3, [r2, #32]
	RF_cmdFs.frequency = 
    206c:	4a03      	ldr	r2, [pc, #12]	; (207c <plugch+0x1c>)
    206e:	81d3      	strh	r3, [r2, #14]
}
    2070:	4770      	bx	lr
    2072:	bf00      	nop
    2074:	200005bc 			; <UNDEFINED> instruction: 0x200005bc
    2078:	20000054 	andcs	r0, r0, r4, asr r0
    207c:	2000003c 	andcs	r0, r0, ip, lsr r0

00002080 <option>:

	// Make rbuffl exactly equal to max payload length
	rbuffl -= 2;
}

static int option (int opt, address val) {
    2080:	b570      	push	{r4, r5, r6, lr}
    2082:	460c      	mov	r4, r1
    2084:	281a      	cmp	r0, #26
    2086:	f200 80a4 	bhi.w	21d2 <option+0x152>
    208a:	e8df f000 	tbb	[pc, r0]
    208e:	3939390e 	ldmdbcc	r9!, {r1, r2, r3, r8, fp, ip, sp}
    2092:	674f3014 	smlaldvs	r3, pc, r4, r0	; <UNPREDICTABLE>
    2096:	3b35445b 	blcc	d5320a <__ccfg+0xd33262>
    209a:	a2a2a2a2 	adcge	sl, r2, #536870922	; 0x2000000a
    209e:	777aa2a2 	ldrbvc	sl, [sl, -r2, lsr #5]!
    20a2:	898ba2a2 	stmibhi	fp, {r1, r5, r7, r9, sp, pc}
    20a6:	009aa241 	addseq	sl, sl, r1, asr #4

	switch (opt) {

		case PHYSOPT_STATUS:

			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    20aa:	4b4c      	ldr	r3, [pc, #304]	; (21dc <option+0x15c>)
    20ac:	7818      	ldrb	r0, [r3, #0]
    20ae:	f000 0001 	and.w	r0, r0, #1
			ret = (int) statid;
			goto RVal;

		case PHYSOPT_GETMAXPL:

			ret = rbuffl + 2;
    20b2:	3002      	adds	r0, #2
			goto RVal;
    20b4:	e028      	b.n	2108 <option+0x88>
			_BIS (dstate, DSTATE_RXON);
    20b6:	4a49      	ldr	r2, [pc, #292]	; (21dc <option+0x15c>)
    20b8:	7813      	ldrb	r3, [r2, #0]
    20ba:	f043 0301 	orr.w	r3, r3, #1
    20be:	7013      	strb	r3, [r2, #0]
	int ret = 0;
    20c0:	2000      	movs	r0, #0
			p_trigger (drvprcs, qevent);
    20c2:	4b47      	ldr	r3, [pc, #284]	; (21e0 <option+0x160>)
    20c4:	6819      	ldr	r1, [r3, #0]
    20c6:	4b47      	ldr	r3, [pc, #284]	; (21e4 <option+0x164>)
    20c8:	460c      	mov	r4, r1
    20ca:	681d      	ldr	r5, [r3, #0]
    20cc:	2300      	movs	r3, #0
    20ce:	f834 2b10 	ldrh.w	r2, [r4], #16
    20d2:	f002 0207 	and.w	r2, r2, #7
    20d6:	429a      	cmp	r2, r3
    20d8:	dd08      	ble.n	20ec <option+0x6c>
    20da:	f854 6033 	ldr.w	r6, [r4, r3, lsl #3]
    20de:	3301      	adds	r3, #1
    20e0:	42ae      	cmp	r6, r5
    20e2:	d1f8      	bne.n	20d6 <option+0x56>
    20e4:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    20e8:	889b      	ldrh	r3, [r3, #4]
    20ea:	800b      	strh	r3, [r1, #0]
	return ret;
RVal:
	if (val != NULL)
		*val = ret;
	goto RRet;
}
    20ec:	bd70      	pop	{r4, r5, r6, pc}
			_BIC (dstate, DSTATE_RXON);
    20ee:	4a3b      	ldr	r2, [pc, #236]	; (21dc <option+0x15c>)
    20f0:	7813      	ldrb	r3, [r2, #0]
    20f2:	f023 0301 	bic.w	r3, r3, #1
    20f6:	e7e2      	b.n	20be <option+0x3e>
			statid = (val == NULL) ? 0 : *val;
    20f8:	b101      	cbz	r1, 20fc <option+0x7c>
    20fa:	880c      	ldrh	r4, [r1, #0]
    20fc:	4b3a      	ldr	r3, [pc, #232]	; (21e8 <option+0x168>)
    20fe:	801c      	strh	r4, [r3, #0]
	int ret = 0;
    2100:	2000      	movs	r0, #0
    2102:	e7f3      	b.n	20ec <option+0x6c>
			ret = (int) statid;
    2104:	4b38      	ldr	r3, [pc, #224]	; (21e8 <option+0x168>)
    2106:	8818      	ldrh	r0, [r3, #0]
	if (val != NULL)
    2108:	2c00      	cmp	r4, #0
    210a:	d0ef      	beq.n	20ec <option+0x6c>
		*val = ret;
    210c:	8020      	strh	r0, [r4, #0]
	return ret;
    210e:	e7ed      	b.n	20ec <option+0x6c>
			ret = rbuffl + 2;
    2110:	4b36      	ldr	r3, [pc, #216]	; (21ec <option+0x16c>)
    2112:	7818      	ldrb	r0, [r3, #0]
    2114:	e7cd      	b.n	20b2 <option+0x32>
				memcpy (val, &rxstat,
    2116:	220c      	movs	r2, #12
			if (val != NULL) {
    2118:	b121      	cbz	r1, 2124 <option+0xa4>
				memcpy (val, &rxstat,
    211a:	4620      	mov	r0, r4
    211c:	4934      	ldr	r1, [pc, #208]	; (21f0 <option+0x170>)
    211e:	f7ff f946 	bl	13ae <__pi_memcpy>
    2122:	e7ed      	b.n	2100 <option+0x80>
				memset (&rxstat, 0, 
    2124:	4832      	ldr	r0, [pc, #200]	; (21f0 <option+0x170>)
    2126:	f7ff f94c 	bl	13c2 <__pi_memset>
    212a:	e7e9      	b.n	2100 <option+0x80>
			if (val == NULL)
    212c:	b941      	cbnz	r1, 2140 <option+0xc0>
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    212e:	f7ff fb3b 	bl	17a8 <lrnd>
    2132:	f3c0 4105 	ubfx	r1, r0, #16, #6
    2136:	3102      	adds	r1, #2
				utimer_set (bckf_timer, *val);
    2138:	482e      	ldr	r0, [pc, #184]	; (21f4 <option+0x174>)
    213a:	f7ff f841 	bl	11c0 <__pi_utimer_set>
    213e:	e7bf      	b.n	20c0 <option+0x40>
    2140:	8809      	ldrh	r1, [r1, #0]
    2142:	e7f9      	b.n	2138 <option+0xb8>
			for (ret = 0; ret < 8; ret++)
    2144:	2000      	movs	r0, #0
				if (RF_cmdPropRadioDivSetup.txPower
    2146:	4b2c      	ldr	r3, [pc, #176]	; (21f8 <option+0x178>)
    2148:	8b5a      	ldrh	r2, [r3, #26]
    214a:	4b2c      	ldr	r3, [pc, #176]	; (21fc <option+0x17c>)
					== patable [ret])
    214c:	f833 1b02 	ldrh.w	r1, [r3], #2
				if (RF_cmdPropRadioDivSetup.txPower
    2150:	428a      	cmp	r2, r1
    2152:	d0d9      	beq.n	2108 <option+0x88>
			for (ret = 0; ret < 8; ret++)
    2154:	3001      	adds	r0, #1
    2156:	2808      	cmp	r0, #8
    2158:	d1f8      	bne.n	214c <option+0xcc>
    215a:	e7d5      	b.n	2108 <option+0x88>
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    215c:	b119      	cbz	r1, 2166 <option+0xe6>
				(*val > 7) ? 7 : *val;
    215e:	8808      	ldrh	r0, [r1, #0]
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    2160:	2807      	cmp	r0, #7
    2162:	bf28      	it	cs
    2164:	2007      	movcs	r0, #7
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    2166:	4b25      	ldr	r3, [pc, #148]	; (21fc <option+0x17c>)
    2168:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    216c:	4b22      	ldr	r3, [pc, #136]	; (21f8 <option+0x178>)
    216e:	835a      	strh	r2, [r3, #26]
			_BIS (dstate, DSTATE_IRST);
    2170:	4a1a      	ldr	r2, [pc, #104]	; (21dc <option+0x15c>)
    2172:	7813      	ldrb	r3, [r2, #0]
    2174:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2178:	7013      	strb	r3, [r2, #0]
			goto OREvnt;
    217a:	e7a2      	b.n	20c2 <option+0x42>
			ret = (int) channel;
    217c:	4b20      	ldr	r3, [pc, #128]	; (2200 <option+0x180>)
			ret = (int) vrate;
    217e:	7818      	ldrb	r0, [r3, #0]
			goto RVal;
    2180:	e7c2      	b.n	2108 <option+0x88>
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2182:	b121      	cbz	r1, 218e <option+0x10e>
				(*val > 7) ? 7 : *val;
    2184:	880c      	ldrh	r4, [r1, #0]
    2186:	2c07      	cmp	r4, #7
    2188:	bf28      	it	cs
    218a:	2407      	movcs	r4, #7
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    218c:	b2e4      	uxtb	r4, r4
    218e:	4b1c      	ldr	r3, [pc, #112]	; (2200 <option+0x180>)
    2190:	701c      	strb	r4, [r3, #0]
			plugch ();
    2192:	f7ff ff65 	bl	2060 <plugch>
			_BIS (dstate, DSTATE_IRST);
    2196:	4a11      	ldr	r2, [pc, #68]	; (21dc <option+0x15c>)
    2198:	7813      	ldrb	r3, [r2, #0]
    219a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    219e:	e78e      	b.n	20be <option+0x3e>
			ret = (int) vrate;
    21a0:	4b18      	ldr	r3, [pc, #96]	; (2204 <option+0x184>)
    21a2:	e7ec      	b.n	217e <option+0xfe>
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    21a4:	b139      	cbz	r1, 21b6 <option+0x136>
				(*val > 3) ? 3 : (*val < 1) ? 1 : *val;
    21a6:	880b      	ldrh	r3, [r1, #0]
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    21a8:	2b03      	cmp	r3, #3
    21aa:	d806      	bhi.n	21ba <option+0x13a>
    21ac:	b13b      	cbz	r3, 21be <option+0x13e>
    21ae:	b2db      	uxtb	r3, r3
    21b0:	4a14      	ldr	r2, [pc, #80]	; (2204 <option+0x184>)
    21b2:	7013      	strb	r3, [r2, #0]
    21b4:	e7ed      	b.n	2192 <option+0x112>
    21b6:	2302      	movs	r3, #2
    21b8:	e7fa      	b.n	21b0 <option+0x130>
    21ba:	2303      	movs	r3, #3
    21bc:	e7f8      	b.n	21b0 <option+0x130>
    21be:	2301      	movs	r3, #1
    21c0:	e7f6      	b.n	21b0 <option+0x130>
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    21c2:	b119      	cbz	r1, 21cc <option+0x14c>
    21c4:	880b      	ldrh	r3, [r1, #0]
    21c6:	4a10      	ldr	r2, [pc, #64]	; (2208 <option+0x188>)
    21c8:	8013      	strh	r3, [r2, #0]
			goto RRet;
    21ca:	e799      	b.n	2100 <option+0x80>
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    21cc:	f44f 7380 	mov.w	r3, #256	; 0x100
    21d0:	e7f9      	b.n	21c6 <option+0x146>
			syserror (EREQPAR, "cc13 op");
    21d2:	2003      	movs	r0, #3
    21d4:	490d      	ldr	r1, [pc, #52]	; (220c <option+0x18c>)
    21d6:	f7fe fa39 	bl	64c <__pi_syserror>
    21da:	bf00      	nop
    21dc:	200005c4 	andcs	r0, r0, r4, asr #11
    21e0:	200005c0 	andcs	r0, r0, r0, asr #11
    21e4:	200005d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    21e8:	200005f4 	strdcs	r0, [r0], -r4
    21ec:	200005d4 	ldrdcs	r0, [r0], -r4
    21f0:	200005e8 	andcs	r0, r0, r8, ror #11
    21f4:	200005ba 			; <UNDEFINED> instruction: 0x200005ba
    21f8:	20000054 	andcs	r0, r0, r4, asr r0
    21fc:	00004712 	andeq	r4, r0, r2, lsl r7
    2200:	200005bc 			; <UNDEFINED> instruction: 0x200005bc
    2204:	2000003a 	andcs	r0, r0, sl, lsr r0
    2208:	20000038 	andcs	r0, r0, r8, lsr r0
    220c:	000046ae 	andeq	r4, r0, lr, lsr #13

00002210 <issue_cmd>:
static void issue_cmd (lword cmd) {
    2210:	b538      	push	{r3, r4, r5, lr}
    2212:	4604      	mov	r4, r0
    2214:	4d0c      	ldr	r5, [pc, #48]	; (2248 <issue_cmd+0x38>)
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    2216:	4620      	mov	r0, r4
    2218:	f001 f8a4 	bl	3364 <NOROM_RFCDoorbellSendTo>
    221c:	b2c2      	uxtb	r2, r0
    221e:	2a01      	cmp	r2, #1
    2220:	d011      	beq.n	2246 <issue_cmd+0x36>
		if (res != 0x86)
    2222:	2a86      	cmp	r2, #134	; 0x86
    2224:	d003      	beq.n	222e <issue_cmd+0x1e>
			syserror (EHARDWARE, "rt1");
    2226:	4909      	ldr	r1, [pc, #36]	; (224c <issue_cmd+0x3c>)
			syserror (EHARDWARE, "hang ic0");
    2228:	2008      	movs	r0, #8
    222a:	f7fe fa0f 	bl	64c <__pi_syserror>
		if (cnt-- == 0) {
    222e:	3d01      	subs	r5, #1
    2230:	d105      	bne.n	223e <issue_cmd+0x2e>
			diag ("HUP %lx %lx", cmd, res);
    2232:	4621      	mov	r1, r4
    2234:	4806      	ldr	r0, [pc, #24]	; (2250 <issue_cmd+0x40>)
    2236:	f7ff fa19 	bl	166c <diag>
			syserror (EHARDWARE, "hang ic0");
    223a:	4906      	ldr	r1, [pc, #24]	; (2254 <issue_cmd+0x44>)
    223c:	e7f4      	b.n	2228 <issue_cmd+0x18>
		udelay (1);
    223e:	2001      	movs	r0, #1
    2240:	f7fe f99a 	bl	578 <udelay>
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    2244:	e7e7      	b.n	2216 <issue_cmd+0x6>
}
    2246:	bd38      	pop	{r3, r4, r5, pc}
    2248:	00015f91 	muleq	r1, r1, pc	; <UNPREDICTABLE>
    224c:	000046b6 			; <UNDEFINED> instruction: 0x000046b6
    2250:	000046ba 			; <UNDEFINED> instruction: 0x000046ba
    2254:	000046c6 	andeq	r4, r0, r6, asr #13

00002258 <rx_de>:
static void rx_de () {
    2258:	b510      	push	{r4, lr}
	if ((dstate & DSTATE_RXAC) == 0)
    225a:	4c06      	ldr	r4, [pc, #24]	; (2274 <rx_de+0x1c>)
    225c:	7823      	ldrb	r3, [r4, #0]
    225e:	079b      	lsls	r3, r3, #30
    2260:	d506      	bpl.n	2270 <rx_de+0x18>
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    2262:	4805      	ldr	r0, [pc, #20]	; (2278 <rx_de+0x20>)
    2264:	f7ff ffd4 	bl	2210 <issue_cmd>
	_BIC (dstate, DSTATE_RXAC);
    2268:	7823      	ldrb	r3, [r4, #0]
    226a:	f023 0302 	bic.w	r3, r3, #2
    226e:	7023      	strb	r3, [r4, #0]
}
    2270:	bd10      	pop	{r4, pc}
    2272:	bf00      	nop
    2274:	200005c4 	andcs	r0, r0, r4, asr #11
    2278:	04010001 	streq	r0, [r1], #-1

0000227c <rf_off>:
static void rf_off () {
    227c:	b538      	push	{r3, r4, r5, lr}
	if ((dstate & DSTATE_RFON) == 0)
    227e:	4c11      	ldr	r4, [pc, #68]	; (22c4 <rf_off+0x48>)
    2280:	7823      	ldrb	r3, [r4, #0]
    2282:	06db      	lsls	r3, r3, #27
    2284:	d51d      	bpl.n	22c2 <rf_off+0x46>
RFCClockDisable(void)
{
    //
    // Disable all clocks
    //
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    2286:	2500      	movs	r5, #0
	IntDisable (INT_RFC_CPE_0);
    2288:	4b0f      	ldr	r3, [pc, #60]	; (22c8 <rf_off+0x4c>)
    228a:	2019      	movs	r0, #25
    228c:	681b      	ldr	r3, [r3, #0]
    228e:	695b      	ldr	r3, [r3, #20]
    2290:	4798      	blx	r3
	RFCAdi3VcoLdoVoltageMode (false);
    2292:	2000      	movs	r0, #0
    2294:	f001 f9e4 	bl	3660 <NOROM_RFCAdi3VcoLdoVoltageMode>
	RFCSynthPowerDown ();
    2298:	f001 f878 	bl	338c <NOROM_RFCSynthPowerDown>
    229c:	4b0b      	ldr	r3, [pc, #44]	; (22cc <rf_off+0x50>)
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    229e:	2001      	movs	r0, #1
    22a0:	601d      	str	r5, [r3, #0]
    22a2:	f7fe f9b3 	bl	60c <__pi_offdomain>
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    22a6:	4b0a      	ldr	r3, [pc, #40]	; (22d0 <rf_off+0x54>)
    22a8:	601d      	str	r5, [r3, #0]
	OSCHF_SwitchToRcOscTurnOffXosc ();
    22aa:	f001 f841 	bl	3330 <NOROM_OSCHF_SwitchToRcOscTurnOffXosc>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    22ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    22b2:	4b08      	ldr	r3, [pc, #32]	; (22d4 <rf_off+0x58>)
    22b4:	601a      	str	r2, [r3, #0]
    22b6:	2202      	movs	r2, #2
    22b8:	601a      	str	r2, [r3, #0]
	_BIC (dstate, DSTATE_RFON);
    22ba:	7823      	ldrb	r3, [r4, #0]
    22bc:	f023 0310 	bic.w	r3, r3, #16
    22c0:	7023      	strb	r3, [r4, #0]
}
    22c2:	bd38      	pop	{r3, r4, r5, pc}
    22c4:	200005c4 	andcs	r0, r0, r4, asr #11
    22c8:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
    22cc:	60040000 	andvs	r0, r4, r0
    22d0:	43240004 			; <UNDEFINED> instruction: 0x43240004
    22d4:	400220a0 	andmi	r2, r2, r0, lsr #1

000022d8 <wait_cmd.constprop.0>:
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    22d8:	b570      	push	{r4, r5, r6, lr}
    22da:	4604      	mov	r4, r0
    22dc:	460d      	mov	r5, r1
    22de:	f242 7611 	movw	r6, #10001	; 0x2711
		if (cmd->status == tstat)
    22e2:	8862      	ldrh	r2, [r4, #2]
    22e4:	42aa      	cmp	r2, r5
    22e6:	d00e      	beq.n	2306 <wait_cmd.constprop.0+0x2e>
		if (timeout-- == 0) {
    22e8:	3e01      	subs	r6, #1
    22ea:	d108      	bne.n	22fe <wait_cmd.constprop.0+0x26>
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    22ec:	8821      	ldrh	r1, [r4, #0]
    22ee:	4806      	ldr	r0, [pc, #24]	; (2308 <wait_cmd.constprop.0+0x30>)
    22f0:	462b      	mov	r3, r5
    22f2:	f7ff f9bb 	bl	166c <diag>
			syserror (EHARDWARE, "rt2");
    22f6:	2008      	movs	r0, #8
    22f8:	4904      	ldr	r1, [pc, #16]	; (230c <wait_cmd.constprop.0+0x34>)
    22fa:	f7fe f9a7 	bl	64c <__pi_syserror>
		udelay (1);
    22fe:	2001      	movs	r0, #1
    2300:	f7fe f93a 	bl	578 <udelay>
		if (cmd->status == tstat)
    2304:	e7ed      	b.n	22e2 <wait_cmd.constprop.0+0xa>
}
    2306:	bd70      	pop	{r4, r5, r6, pc}
    2308:	000046cf 	andeq	r4, r0, pc, asr #13
    230c:	000046df 	ldrdeq	r4, [r0], -pc	; <UNPREDICTABLE>

00002310 <rf_on.part.0>:
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2310:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2314:	4b46      	ldr	r3, [pc, #280]	; (2430 <rf_on.part.0+0x120>)
static void rf_on () {
    2316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    231a:	601a      	str	r2, [r3, #0]
    231c:	2202      	movs	r2, #2
    231e:	601a      	str	r2, [r3, #0]
	OSCHF_TurnOnXosc();
    2320:	f000 ffca 	bl	32b8 <NOROM_OSCHF_TurnOnXosc>
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    2324:	200a      	movs	r0, #10
    2326:	f7fe f927 	bl	578 <udelay>
    232a:	f000 ffd1 	bl	32d0 <NOROM_OSCHF_AttemptToSwitchToXosc>
    232e:	2800      	cmp	r0, #0
    2330:	d0f8      	beq.n	2324 <rf_on.part.0+0x14>
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2332:	2401      	movs	r4, #1
    2334:	4b3f      	ldr	r3, [pc, #252]	; (2434 <rf_on.part.0+0x124>)
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    2336:	4620      	mov	r0, r4
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2338:	601c      	str	r4, [r3, #0]
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    233a:	f7fe f949 	bl	5d0 <__pi_ondomain>
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    233e:	f240 72ff 	movw	r2, #2047	; 0x7ff
    2342:	4b3d      	ldr	r3, [pc, #244]	; (2438 <rf_on.part.0+0x128>)
	issue_cmd (
    2344:	483d      	ldr	r0, [pc, #244]	; (243c <rf_on.part.0+0x12c>)
    2346:	601a      	str	r2, [r3, #0]
    2348:	f7ff ff62 	bl	2210 <issue_cmd>
PATCH_FUN_SPEC void enterGenfskCpePatch(void)
{
   uint32_t *pPatchVec = (uint32_t *) (_GENFSK_CPERAM_START + _GENFSK_PATCH_VEC_OFFSET);

#if (_NWORD_PATCHIMAGE_GENFSK > 0)
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    234c:	f44f 7223 	mov.w	r2, #652	; 0x28c
    2350:	493b      	ldr	r1, [pc, #236]	; (2440 <rf_on.part.0+0x130>)
    2352:	483c      	ldr	r0, [pc, #240]	; (2444 <rf_on.part.0+0x134>)
    2354:	f001 ff06 	bl	4164 <memcpy>
{
   uint8_t *pPatchTab = (uint8_t *) (_GENFSK_CPERAM_START + _GENFSK_PATCH_TAB_OFFSET);
   uint32_t *pIrqPatch = (uint32_t *) (_GENFSK_CPERAM_START + _GENFSK_IRQPATCH_OFFSET);


   pPatchTab[80] = 0;
    2358:	2200      	movs	r2, #0
    235a:	4b3b      	ldr	r3, [pc, #236]	; (2448 <rf_on.part.0+0x138>)
      *pD++ = t4;
      *pD++ = t5;
      *pD++ = t6;
      *pD++ = t7;
      *pD++ = t8;
   } while (--nIterations);
    235c:	493b      	ldr	r1, [pc, #236]	; (244c <rf_on.part.0+0x13c>)
    235e:	701a      	strb	r2, [r3, #0]
   pPatchTab[57] = 1;
   pPatchTab[53] = 2;
    2360:	2202      	movs	r2, #2
    2362:	f803 2c1b 	strb.w	r2, [r3, #-27]
   pPatchTab[55] = 3;
    2366:	2203      	movs	r2, #3
    2368:	f803 2c19 	strb.w	r2, [r3, #-25]
   pPatchTab[110] = 4;
    236c:	2204      	movs	r2, #4
    236e:	779a      	strb	r2, [r3, #30]
   pPatchTab[107] = 5;
    2370:	2205      	movs	r2, #5
    2372:	76da      	strb	r2, [r3, #27]
   pPatchTab[65] = 6;
    2374:	2206      	movs	r2, #6
    2376:	f803 2c0f 	strb.w	r2, [r3, #-15]

   pIrqPatch[1] = _IRQ_PATCH_0;
    237a:	4a35      	ldr	r2, [pc, #212]	; (2450 <rf_on.part.0+0x140>)
   pPatchTab[57] = 1;
    237c:	f803 4c17 	strb.w	r4, [r3, #-23]
   pIrqPatch[1] = _IRQ_PATCH_0;
    2380:	631a      	str	r2, [r3, #48]	; 0x30
   volatile unsigned long *pD = &HWREG(RFC_RFERAM_BASE);
    2382:	4b34      	ldr	r3, [pc, #208]	; (2454 <rf_on.part.0+0x144>)
   const uint32_t *pS = patchGenfskRfe;
    2384:	4a34      	ldr	r2, [pc, #208]	; (2458 <rf_on.part.0+0x148>)
      t7 = *pS++;
    2386:	6990      	ldr	r0, [r2, #24]
      t2 = *pS++;
    2388:	e9d2 8e00 	ldrd	r8, lr, [r2]
      t4 = *pS++;
    238c:	e9d2 c702 	ldrd	ip, r7, [r2, #8]
      t6 = *pS++;
    2390:	e9d2 6504 	ldrd	r6, r5, [r2, #16]
      t8 = *pS++;
    2394:	69d4      	ldr	r4, [r2, #28]
      *pD++ = t1;
    2396:	f8c3 8000 	str.w	r8, [r3]
      *pD++ = t2;
    239a:	f8c3 e004 	str.w	lr, [r3, #4]
      *pD++ = t3;
    239e:	f8c3 c008 	str.w	ip, [r3, #8]
      *pD++ = t4;
    23a2:	60df      	str	r7, [r3, #12]
      *pD++ = t5;
    23a4:	611e      	str	r6, [r3, #16]
      *pD++ = t6;
    23a6:	615d      	str	r5, [r3, #20]
      *pD++ = t7;
    23a8:	6198      	str	r0, [r3, #24]
    23aa:	4618      	mov	r0, r3
   } while (--nIterations);
    23ac:	4288      	cmp	r0, r1
    23ae:	f102 0220 	add.w	r2, r2, #32
      *pD++ = t8;
    23b2:	f103 0320 	add.w	r3, r3, #32
    23b6:	61c4      	str	r4, [r0, #28]
   } while (--nIterations);
    23b8:	d1e5      	bne.n	2386 <rf_on.part.0+0x76>
   t1 = *pS++;
   t2 = *pS++;
   t3 = *pS++;
   t4 = *pS++;
   t5 = *pS++;
   *pD++ = t1;
    23ba:	4b28      	ldr	r3, [pc, #160]	; (245c <rf_on.part.0+0x14c>)
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    23bc:	4828      	ldr	r0, [pc, #160]	; (2460 <rf_on.part.0+0x150>)
    23be:	620b      	str	r3, [r1, #32]
   *pD++ = t2;
    23c0:	4b28      	ldr	r3, [pc, #160]	; (2464 <rf_on.part.0+0x154>)
    23c2:	624b      	str	r3, [r1, #36]	; 0x24
   *pD++ = t3;
    23c4:	4b28      	ldr	r3, [pc, #160]	; (2468 <rf_on.part.0+0x158>)
    23c6:	628b      	str	r3, [r1, #40]	; 0x28
   *pD++ = t4;
    23c8:	4b28      	ldr	r3, [pc, #160]	; (246c <rf_on.part.0+0x15c>)
    23ca:	62cb      	str	r3, [r1, #44]	; 0x2c
   *pD++ = t5;
    23cc:	4b28      	ldr	r3, [pc, #160]	; (2470 <rf_on.part.0+0x160>)
    23ce:	630b      	str	r3, [r1, #48]	; 0x30
    23d0:	f7ff ff1e 	bl	2210 <issue_cmd>
	RFCAdi3VcoLdoVoltageMode (true);
    23d4:	2001      	movs	r0, #1
    23d6:	f001 f943 	bl	3660 <NOROM_RFCAdi3VcoLdoVoltageMode>
       	RFCRfTrimSet (&rfTrim);
    23da:	4826      	ldr	r0, [pc, #152]	; (2474 <rf_on.part.0+0x164>)
    23dc:	f001 f930 	bl	3640 <NOROM_RFCRfTrimSet>
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    23e0:	4825      	ldr	r0, [pc, #148]	; (2478 <rf_on.part.0+0x168>)
    23e2:	f7ff ff15 	bl	2210 <issue_cmd>
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    23e6:	f44f 5150 	mov.w	r1, #13312	; 0x3400
    23ea:	4823      	ldr	r0, [pc, #140]	; (2478 <rf_on.part.0+0x168>)
    23ec:	f7ff ff74 	bl	22d8 <wait_cmd.constprop.0>
	issue_cmd ((lword)&cmd_srt);
    23f0:	4822      	ldr	r0, [pc, #136]	; (247c <rf_on.part.0+0x16c>)
    23f2:	f7ff ff0d 	bl	2210 <issue_cmd>
	issue_cmd ((lword)&RF_cmdFs);
    23f6:	4822      	ldr	r0, [pc, #136]	; (2480 <rf_on.part.0+0x170>)
    23f8:	f7ff ff0a 	bl	2210 <issue_cmd>
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    23fc:	4820      	ldr	r0, [pc, #128]	; (2480 <rf_on.part.0+0x170>)
    23fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
    2402:	f7ff ff69 	bl	22d8 <wait_cmd.constprop.0>
	_BIC (dstate, DSTATE_IRST);
    2406:	4a1f      	ldr	r2, [pc, #124]	; (2484 <rf_on.part.0+0x174>)
	IntEnable (INT_RFC_CPE_0);
    2408:	2019      	movs	r0, #25
	_BIC (dstate, DSTATE_IRST);
    240a:	7813      	ldrb	r3, [r2, #0]
    240c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2410:	f043 0310 	orr.w	r3, r3, #16
    2414:	7013      	strb	r3, [r2, #0]
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    2416:	2300      	movs	r3, #0
    2418:	4a1b      	ldr	r2, [pc, #108]	; (2488 <rf_on.part.0+0x178>)
    241a:	6013      	str	r3, [r2, #0]
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    241c:	f842 3c04 	str.w	r3, [r2, #-4]
	IntEnable (INT_RFC_CPE_0);
    2420:	4b1a      	ldr	r3, [pc, #104]	; (248c <rf_on.part.0+0x17c>)
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    2422:	3a04      	subs	r2, #4
	IntEnable (INT_RFC_CPE_0);
    2424:	681b      	ldr	r3, [r3, #0]
}
    2426:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	IntEnable (INT_RFC_CPE_0);
    242a:	691b      	ldr	r3, [r3, #16]
    242c:	4718      	bx	r3
    242e:	bf00      	nop
    2430:	40022090 	mulmi	r2, r0, r0
    2434:	43240004 			; <UNDEFINED> instruction: 0x43240004
    2438:	60040000 	andvs	r0, r4, r0
    243c:	06070051 			; <UNDEFINED> instruction: 0x06070051
    2440:	00004dd8 	ldrdeq	r4, [r0], -r8
    2444:	2100041c 	tstcs	r0, ip, lsl r4
    2448:	21000390 			; <UNDEFINED> instruction: 0x21000390
    244c:	2100c680 	smlabbcs	r0, r0, r6, ip
    2450:	210005bd 			; <UNDEFINED> instruction: 0x210005bd
    2454:	2100c000 	mrscs	ip, (UNDEF: 0)
    2458:	00004724 	andeq	r4, r0, r4, lsr #14
    245c:	63533960 	cmpvs	r3, #96, 18	; 0x180000
    2460:	06070001 	streq	r0, [r7], -r1
    2464:	1a101020 	bne	4064ec <__ccfg+0x3e6544>
    2468:	6e236f13 	mcrvs	15, 1, r6, cr3, cr3, {0}
    246c:	16121611 			; <UNDEFINED> instruction: 0x16121611
    2470:	70006b54 	andvc	r6, r0, r4, asr fp
    2474:	200005d8 	ldrdcs	r0, [r0], -r8
    2478:	20000054 	andcs	r0, r0, r4, asr r0
    247c:	20000024 	andcs	r0, r0, r4, lsr #32
    2480:	2000003c 	andcs	r0, r0, ip, lsr r0
    2484:	200005c4 	andcs	r0, r0, r4, asr #11
    2488:	40041014 	andmi	r1, r4, r4, lsl r0
    248c:	100001b0 			; <UNDEFINED> instruction: 0x100001b0

00002490 <rx_int_enable>:
static void rx_int_enable () {
    2490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
RFCCpe0IntEnable(uint32_t ui32Mask)
{
  //
  // Multiplex RF Core interrupts to CPE0 IRQ.
  //
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2494:	4a2a      	ldr	r2, [pc, #168]	; (2540 <rx_int_enable+0xb0>)
    2496:	6813      	ldr	r3, [r2, #0]
    2498:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    249c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    24a0:	6013      	str	r3, [r2, #0]
  do
  {
    //
    // Clear any pending interrupts.
    //
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    24a2:	2200      	movs	r2, #0
    24a4:	4b27      	ldr	r3, [pc, #156]	; (2544 <rx_int_enable+0xb4>)
    24a6:	601a      	str	r2, [r3, #0]
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    24a8:	681d      	ldr	r5, [r3, #0]
    24aa:	2d00      	cmp	r5, #0
    24ac:	d1fb      	bne.n	24a6 <rx_int_enable+0x16>
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    24ae:	2602      	movs	r6, #2

  //
  //  Enable the masked interrupts
  //
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    24b0:	4a25      	ldr	r2, [pc, #148]	; (2548 <rx_int_enable+0xb8>)
				diag ("BAD RX");
    24b2:	4f26      	ldr	r7, [pc, #152]	; (254c <rx_int_enable+0xbc>)
    24b4:	6813      	ldr	r3, [r2, #0]
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    24b6:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 2558 <rx_int_enable+0xc8>
    24ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    24be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    24c2:	6013      	str	r3, [r2, #0]
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    24c4:	4b22      	ldr	r3, [pc, #136]	; (2550 <rx_int_enable+0xc0>)
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    24c6:	f8df 9094 	ldr.w	r9, [pc, #148]	; 255c <rx_int_enable+0xcc>
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    24ca:	69db      	ldr	r3, [r3, #28]
    24cc:	681c      	ldr	r4, [r3, #0]
		if (db->status == DATA_ENTRY_FINISHED) {
    24ce:	7923      	ldrb	r3, [r4, #4]
    24d0:	2b03      	cmp	r3, #3
    24d2:	d11e      	bne.n	2512 <rx_int_enable+0x82>
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    24d4:	7a63      	ldrb	r3, [r4, #9]
    24d6:	7a21      	ldrb	r1, [r4, #8]
    24d8:	1cda      	adds	r2, r3, #3
    24da:	4291      	cmp	r1, r2
			nr++;
    24dc:	f105 0501 	add.w	r5, r5, #1
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    24e0:	d11c      	bne.n	251c <rx_int_enable+0x8c>
    24e2:	f898 2000 	ldrb.w	r2, [r8]
    24e6:	429a      	cmp	r2, r3
    24e8:	d318      	bcc.n	251c <rx_int_enable+0x8c>
    24ea:	f013 0c01 	ands.w	ip, r3, #1
    24ee:	d115      	bne.n	251c <rx_int_enable+0x8c>
				__dp [pl + 1] = __dp [pl] - 128;
    24f0:	f104 0108 	add.w	r1, r4, #8
				pl = __dp [1] + 2;
    24f4:	1c9a      	adds	r2, r3, #2
				__dp [pl + 1] = __dp [pl] - 128;
    24f6:	5c88      	ldrb	r0, [r1, r2]
    24f8:	440b      	add	r3, r1
    24fa:	3880      	subs	r0, #128	; 0x80
    24fc:	70d8      	strb	r0, [r3, #3]
				__dp [pl] = 0;
    24fe:	f801 c002 	strb.w	ip, [r1, r2]
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2502:	f8b9 0000 	ldrh.w	r0, [r9]
    2506:	f104 010a 	add.w	r1, r4, #10
    250a:	f7ff fb95 	bl	1c38 <tcvphy_rcv>
			db->status = DATA_ENTRY_PENDING;
    250e:	2300      	movs	r3, #0
    2510:	7123      	strb	r3, [r4, #4]
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2512:	2e01      	cmp	r6, #1
    2514:	d006      	beq.n	2524 <rx_int_enable+0x94>
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    2516:	2601      	movs	r6, #1
    2518:	6824      	ldr	r4, [r4, #0]
    251a:	e7d8      	b.n	24ce <rx_int_enable+0x3e>
				diag ("BAD RX");
    251c:	4638      	mov	r0, r7
    251e:	f7ff f8a5 	bl	166c <diag>
    2522:	e7f4      	b.n	250e <rx_int_enable+0x7e>
	if (nr) {
    2524:	b14d      	cbz	r5, 253a <rx_int_enable+0xaa>
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2526:	f7ff f93f 	bl	17a8 <lrnd>
}
    252a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		gbackoff (RADIO_LBT_BACKOFF_RX);
    252e:	f3c0 4102 	ubfx	r1, r0, #16, #3
    2532:	3102      	adds	r1, #2
    2534:	4807      	ldr	r0, [pc, #28]	; (2554 <rx_int_enable+0xc4>)
    2536:	f7fe be43 	b.w	11c0 <__pi_utimer_set>
}
    253a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    253e:	bf00      	nop
    2540:	40041018 	andmi	r1, r4, r8, lsl r0
    2544:	40041010 	andmi	r1, r4, r0, lsl r0
    2548:	40041014 	andmi	r1, r4, r4, lsl r0
    254c:	000046e3 	andeq	r4, r0, r3, ror #13
    2550:	2000007c 	andcs	r0, r0, ip, ror r0
    2554:	200005ba 			; <UNDEFINED> instruction: 0x200005ba
    2558:	200005d4 	ldrdcs	r0, [r0], -r4
    255c:	200005cc 	andcs	r0, r0, ip, asr #11

00002560 <cc1350_driver>:
thread (cc1350_driver)
    2560:	2801      	cmp	r0, #1
    2562:	b570      	push	{r4, r5, r6, lr}
    2564:	f000 808b 	beq.w	267e <cc1350_driver+0x11e>
    2568:	2802      	cmp	r0, #2
    256a:	f000 80bd 	beq.w	26e8 <cc1350_driver+0x188>
    256e:	2800      	cmp	r0, #0
    2570:	f040 80ce 	bne.w	2710 <cc1350_driver+0x1b0>
		if (dstate & DSTATE_IRST) {
    2574:	4c68      	ldr	r4, [pc, #416]	; (2718 <cc1350_driver+0x1b8>)
    2576:	f994 3000 	ldrsb.w	r3, [r4]
    257a:	2b00      	cmp	r3, #0
    257c:	da05      	bge.n	258a <cc1350_driver+0x2a>
			rf_off ();
    257e:	f7ff fe7d 	bl	227c <rf_off>
			_BIC (dstate,
    2582:	7823      	ldrb	r3, [r4, #0]
    2584:	f003 0369 	and.w	r3, r3, #105	; 0x69
    2588:	7023      	strb	r3, [r4, #0]
		if (dstate & DSTATE_RXAC) {
    258a:	7823      	ldrb	r3, [r4, #0]
    258c:	0798      	lsls	r0, r3, #30
    258e:	f003 0201 	and.w	r2, r3, #1
    2592:	d51e      	bpl.n	25d2 <cc1350_driver+0x72>
			if ((dstate & DSTATE_RXON) == 0)
    2594:	b90a      	cbnz	r2, 259a <cc1350_driver+0x3a>
				rx_de ();
    2596:	f7ff fe5f 	bl	2258 <rx_de>
		if (paylen == 0) {
    259a:	4d60      	ldr	r5, [pc, #384]	; (271c <cc1350_driver+0x1bc>)
    259c:	4e60      	ldr	r6, [pc, #384]	; (2720 <cc1350_driver+0x1c0>)
    259e:	682b      	ldr	r3, [r5, #0]
    25a0:	2b00      	cmp	r3, #0
    25a2:	d14c      	bne.n	263e <cc1350_driver+0xde>
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    25a4:	4b5f      	ldr	r3, [pc, #380]	; (2724 <cc1350_driver+0x1c4>)
    25a6:	4629      	mov	r1, r5
    25a8:	8818      	ldrh	r0, [r3, #0]
    25aa:	f7ff fb93 	bl	1cd4 <tcvphy_get>
    25ae:	6170      	str	r0, [r6, #20]
    25b0:	2800      	cmp	r0, #0
    25b2:	d02f      	beq.n	2614 <cc1350_driver+0xb4>
				sysassert (paylen <= rbuffl && paylen > 0 &&
    25b4:	4a5c      	ldr	r2, [pc, #368]	; (2728 <cc1350_driver+0x1c8>)
				paylen -= 2;
    25b6:	682b      	ldr	r3, [r5, #0]
				sysassert (paylen <= rbuffl && paylen > 0 &&
    25b8:	7812      	ldrb	r2, [r2, #0]
				paylen -= 2;
    25ba:	3b02      	subs	r3, #2
				sysassert (paylen <= rbuffl && paylen > 0 &&
    25bc:	4293      	cmp	r3, r2
				paylen -= 2;
    25be:	602b      	str	r3, [r5, #0]
				sysassert (paylen <= rbuffl && paylen > 0 &&
    25c0:	dc03      	bgt.n	25ca <cc1350_driver+0x6a>
    25c2:	2b00      	cmp	r3, #0
    25c4:	dd01      	ble.n	25ca <cc1350_driver+0x6a>
    25c6:	07db      	lsls	r3, r3, #31
    25c8:	d51b      	bpl.n	2602 <cc1350_driver+0xa2>
    25ca:	200a      	movs	r0, #10
    25cc:	4957      	ldr	r1, [pc, #348]	; (272c <cc1350_driver+0x1cc>)
    25ce:	f7fe f83d 	bl	64c <__pi_syserror>
		} else if (dstate & DSTATE_RXON) {
    25d2:	2a00      	cmp	r2, #0
    25d4:	d0e1      	beq.n	259a <cc1350_driver+0x3a>
	if (dstate & DSTATE_RFON)
    25d6:	06d9      	lsls	r1, r3, #27
    25d8:	d50d      	bpl.n	25f6 <cc1350_driver+0x96>
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    25da:	4855      	ldr	r0, [pc, #340]	; (2730 <cc1350_driver+0x1d0>)
    25dc:	69c3      	ldr	r3, [r0, #28]
    25de:	681a      	ldr	r2, [r3, #0]
		re->status = DATA_ENTRY_PENDING;
    25e0:	2300      	movs	r3, #0
    25e2:	7113      	strb	r3, [r2, #4]
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    25e4:	6812      	ldr	r2, [r2, #0]
		re->status = DATA_ENTRY_PENDING;
    25e6:	7113      	strb	r3, [r2, #4]
	issue_cmd ((lword)&RF_cmdPropRx);
    25e8:	f7ff fe12 	bl	2210 <issue_cmd>
	_BIS (dstate, DSTATE_RXAC);
    25ec:	7823      	ldrb	r3, [r4, #0]
    25ee:	f043 0302 	orr.w	r3, r3, #2
    25f2:	7023      	strb	r3, [r4, #0]
    25f4:	e7d1      	b.n	259a <cc1350_driver+0x3a>
    25f6:	f7ff fe8b 	bl	2310 <rf_on.part.0>
	if (dstate & DSTATE_RXAC)
    25fa:	7823      	ldrb	r3, [r4, #0]
    25fc:	079a      	lsls	r2, r3, #30
    25fe:	d5ec      	bpl.n	25da <cc1350_driver+0x7a>
    2600:	e7cb      	b.n	259a <cc1350_driver+0x3a>
				if (statid != 0xffff)
    2602:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2606:	4b4b      	ldr	r3, [pc, #300]	; (2734 <cc1350_driver+0x1d4>)
    2608:	881b      	ldrh	r3, [r3, #0]
    260a:	4293      	cmp	r3, r2
					((address)(RF_cmdPropTx.pPkt)) [0] =
    260c:	bf18      	it	ne
    260e:	8003      	strhne	r3, [r0, #0]
				RF_cmdPropTx.pktLen = (byte) paylen;
    2610:	682b      	ldr	r3, [r5, #0]
    2612:	73f3      	strb	r3, [r6, #15]
		if (paylen == 0) {
    2614:	6829      	ldr	r1, [r5, #0]
    2616:	b991      	cbnz	r1, 263e <cc1350_driver+0xde>
			wait (qevent, DR_LOOP);
    2618:	4b47      	ldr	r3, [pc, #284]	; (2738 <cc1350_driver+0x1d8>)
    261a:	6818      	ldr	r0, [r3, #0]
    261c:	f7fe fe44 	bl	12a8 <__pi_wait>
			if (dstate & DSTATE_RXAC) {
    2620:	7823      	ldrb	r3, [r4, #0]
    2622:	079d      	lsls	r5, r3, #30
    2624:	d503      	bpl.n	262e <cc1350_driver+0xce>
				rx_int_enable ();
    2626:	f7ff ff33 	bl	2490 <rx_int_enable>
			release;
    262a:	f7fe fbcd 	bl	dc8 <__pi_release>
			} else if (dstate & DSTATE_RFON) {
    262e:	06dc      	lsls	r4, r3, #27
    2630:	d5fb      	bpl.n	262a <cc1350_driver+0xca>
				delay (offdelay, DR_GOOF);
    2632:	2102      	movs	r1, #2
    2634:	4b41      	ldr	r3, [pc, #260]	; (273c <cc1350_driver+0x1dc>)
    2636:	8818      	ldrh	r0, [r3, #0]
    2638:	f7fe fe7c 	bl	1334 <delay>
    263c:	e7f5      	b.n	262a <cc1350_driver+0xca>
		if (bckf_timer) {
    263e:	4d40      	ldr	r5, [pc, #256]	; (2740 <cc1350_driver+0x1e0>)
    2640:	882b      	ldrh	r3, [r5, #0]
    2642:	b163      	cbz	r3, 265e <cc1350_driver+0xfe>
			wait (qevent, DR_LOOP);
    2644:	4b3c      	ldr	r3, [pc, #240]	; (2738 <cc1350_driver+0x1d8>)
    2646:	2100      	movs	r1, #0
    2648:	6818      	ldr	r0, [r3, #0]
    264a:	f7fe fe2d 	bl	12a8 <__pi_wait>
			delay (bckf_timer, DR_LOOP);
    264e:	8828      	ldrh	r0, [r5, #0]
    2650:	2100      	movs	r1, #0
    2652:	f7fe fe6f 	bl	1334 <delay>
			if (dstate & DSTATE_RXAC)
    2656:	7823      	ldrb	r3, [r4, #0]
    2658:	0798      	lsls	r0, r3, #30
    265a:	d5e6      	bpl.n	262a <cc1350_driver+0xca>
    265c:	e7e3      	b.n	2626 <cc1350_driver+0xc6>
	if (dstate & DSTATE_RFON)
    265e:	7823      	ldrb	r3, [r4, #0]
    2660:	06d9      	lsls	r1, r3, #27
    2662:	d401      	bmi.n	2668 <cc1350_driver+0x108>
    2664:	f7ff fe54 	bl	2310 <rf_on.part.0>
		rx_de ();
    2668:	f7ff fdf6 	bl	2258 <rx_de>
		RF_cmdPropTx . status = 0;
    266c:	2300      	movs	r3, #0
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    266e:	f06f 0202 	mvn.w	r2, #2
		RF_cmdPropTx . status = 0;
    2672:	8073      	strh	r3, [r6, #2]
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2674:	4b33      	ldr	r3, [pc, #204]	; (2744 <cc1350_driver+0x1e4>)
		issue_cmd ((lword)&cmd_cs);
    2676:	4834      	ldr	r0, [pc, #208]	; (2748 <cc1350_driver+0x1e8>)
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2678:	601a      	str	r2, [r3, #0]
		issue_cmd ((lword)&cmd_cs);
    267a:	f7ff fdc9 	bl	2210 <issue_cmd>
		if (dstate & DSTATE_IRST)
    267e:	4b26      	ldr	r3, [pc, #152]	; (2718 <cc1350_driver+0x1b8>)
    2680:	f993 3000 	ldrsb.w	r3, [r3]
    2684:	2b00      	cmp	r3, #0
    2686:	f6ff af75 	blt.w	2574 <cc1350_driver+0x14>
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    268a:	4b2e      	ldr	r3, [pc, #184]	; (2744 <cc1350_driver+0x1e4>)
    268c:	681a      	ldr	r2, [r3, #0]
    268e:	0792      	lsls	r2, r2, #30
    2690:	d402      	bmi.n	2698 <cc1350_driver+0x138>
			delay (1, DR_XMIT);
    2692:	2101      	movs	r1, #1
    2694:	4608      	mov	r0, r1
    2696:	e7cf      	b.n	2638 <cc1350_driver+0xd8>
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2698:	4821      	ldr	r0, [pc, #132]	; (2720 <cc1350_driver+0x1c0>)
    269a:	4c2c      	ldr	r4, [pc, #176]	; (274c <cc1350_driver+0x1ec>)
    269c:	8842      	ldrh	r2, [r0, #2]
    269e:	f5b2 5f50 	cmp.w	r2, #13312	; 0x3400
    26a2:	d018      	beq.n	26d6 <cc1350_driver+0x176>
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    26a4:	7822      	ldrb	r2, [r4, #0]
    26a6:	2a0f      	cmp	r2, #15
    26a8:	d909      	bls.n	26be <cc1350_driver+0x15e>
				RF_cmdPropTx . status = 0;
    26aa:	2200      	movs	r2, #0
    26ac:	8042      	strh	r2, [r0, #2]
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    26ae:	f06f 0202 	mvn.w	r2, #2
    26b2:	601a      	str	r2, [r3, #0]
				issue_cmd ((lword)&RF_cmdPropTx);
    26b4:	f7ff fdac 	bl	2210 <issue_cmd>
				proceed (DR_XMIT);
    26b8:	2001      	movs	r0, #1
    26ba:	f7fe fdeb 	bl	1294 <proceed>
			txtries++;
    26be:	7823      	ldrb	r3, [r4, #0]
    26c0:	3301      	adds	r3, #1
    26c2:	7023      	strb	r3, [r4, #0]
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    26c4:	f7ff f870 	bl	17a8 <lrnd>
    26c8:	f3c0 4105 	ubfx	r1, r0, #16, #6
    26cc:	3102      	adds	r1, #2
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    26ce:	481c      	ldr	r0, [pc, #112]	; (2740 <cc1350_driver+0x1e0>)
    26d0:	f7fe fd76 	bl	11c0 <__pi_utimer_set>
		goto DR_LOOP__;
    26d4:	e74e      	b.n	2574 <cc1350_driver+0x14>
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    26d6:	6940      	ldr	r0, [r0, #20]
    26d8:	f7ff fb36 	bl	1d48 <tcvphy_end>
		paylen = 0;
    26dc:	2300      	movs	r3, #0
    26de:	4a0f      	ldr	r2, [pc, #60]	; (271c <cc1350_driver+0x1bc>)
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    26e0:	2102      	movs	r1, #2
		paylen = 0;
    26e2:	6013      	str	r3, [r2, #0]
		txtries = 0;
    26e4:	7023      	strb	r3, [r4, #0]
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    26e6:	e7f2      	b.n	26ce <cc1350_driver+0x16e>
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    26e8:	4b0b      	ldr	r3, [pc, #44]	; (2718 <cc1350_driver+0x1b8>)
    26ea:	781a      	ldrb	r2, [r3, #0]
    26ec:	f993 3000 	ldrsb.w	r3, [r3]
    26f0:	2b00      	cmp	r3, #0
    26f2:	f6ff af3f 	blt.w	2574 <cc1350_driver+0x14>
    26f6:	07d3      	lsls	r3, r2, #31
    26f8:	f53f af3c 	bmi.w	2574 <cc1350_driver+0x14>
		    tcvphy_top (physid) == NULL)
    26fc:	4b09      	ldr	r3, [pc, #36]	; (2724 <cc1350_driver+0x1c4>)
    26fe:	8818      	ldrh	r0, [r3, #0]
    2700:	f7ff fb08 	bl	1d14 <tcvphy_top>
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2704:	2800      	cmp	r0, #0
    2706:	f47f af35 	bne.w	2574 <cc1350_driver+0x14>
			rf_off ();
    270a:	f7ff fdb7 	bl	227c <rf_off>
    270e:	e731      	b.n	2574 <cc1350_driver+0x14>
endthread
    2710:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2714:	f7fe bd36 	b.w	1184 <__pi_badstate>
    2718:	200005c4 	andcs	r0, r0, r4, asr #11
    271c:	200005c8 	andcs	r0, r0, r8, asr #11
    2720:	200000a0 	andcs	r0, r0, r0, lsr #1
    2724:	200005cc 	andcs	r0, r0, ip, asr #11
    2728:	200005d4 	ldrdcs	r0, [r0], -r4
    272c:	000046ea 	andeq	r4, r0, sl, ror #13
    2730:	2000007c 	andcs	r0, r0, ip, ror r0
    2734:	200005f4 	strdcs	r0, [r0], -r4
    2738:	200005d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    273c:	20000038 	andcs	r0, r0, r8, lsr r0
    2740:	200005ba 			; <UNDEFINED> instruction: 0x200005ba
    2744:	40041010 	andmi	r1, r4, r0, lsl r0
    2748:	20000008 	andcs	r0, r0, r8
    274c:	200005f6 	strdcs	r0, [r0], -r6

00002750 <RFCCPE0IntHandler>:
void RFCCPE0IntHandler (void) {
    2750:	b530      	push	{r4, r5, lr}
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2752:	4a15      	ldr	r2, [pc, #84]	; (27a8 <RFCCPE0IntHandler+0x58>)
    2754:	6813      	ldr	r3, [r2, #0]
    2756:	2b00      	cmp	r3, #0
		_BIS (dstate, DSTATE_IRST);
    2758:	bfbf      	itttt	lt
    275a:	4914      	ldrlt	r1, [pc, #80]	; (27ac <RFCCPE0IntHandler+0x5c>)
    275c:	780b      	ldrblt	r3, [r1, #0]
    275e:	f063 037f 	ornlt	r3, r3, #127	; 0x7f
    2762:	700b      	strblt	r3, [r1, #0]
  do
  {
    //
    // Clear interrupts that may now be pending
    //
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    2764:	2100      	movs	r1, #0
    2766:	6011      	str	r1, [r2, #0]
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    2768:	6813      	ldr	r3, [r2, #0]
    276a:	2b00      	cmp	r3, #0
    276c:	d1fb      	bne.n	2766 <RFCCPE0IntHandler+0x16>
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    276e:	4a10      	ldr	r2, [pc, #64]	; (27b0 <RFCCPE0IntHandler+0x60>)
	p_trigger (drvprcs, qevent);
    2770:	4c10      	ldr	r4, [pc, #64]	; (27b4 <RFCCPE0IntHandler+0x64>)
    2772:	6811      	ldr	r1, [r2, #0]
    2774:	6013      	str	r3, [r2, #0]
    2776:	4a10      	ldr	r2, [pc, #64]	; (27b8 <RFCCPE0IntHandler+0x68>)
    2778:	6824      	ldr	r4, [r4, #0]
    277a:	6811      	ldr	r1, [r2, #0]
    277c:	4608      	mov	r0, r1
    277e:	f830 2b10 	ldrh.w	r2, [r0], #16
    2782:	f002 0207 	and.w	r2, r2, #7
    2786:	429a      	cmp	r2, r3
    2788:	dd08      	ble.n	279c <RFCCPE0IntHandler+0x4c>
    278a:	f850 5033 	ldr.w	r5, [r0, r3, lsl #3]
    278e:	3301      	adds	r3, #1
    2790:	42a5      	cmp	r5, r4
    2792:	d1f8      	bne.n	2786 <RFCCPE0IntHandler+0x36>
    2794:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    2798:	889b      	ldrh	r3, [r3, #4]
    279a:	800b      	strh	r3, [r1, #0]
	RISE_N_SHINE;
    279c:	4a07      	ldr	r2, [pc, #28]	; (27bc <RFCCPE0IntHandler+0x6c>)
    279e:	7813      	ldrb	r3, [r2, #0]
    27a0:	f043 0302 	orr.w	r3, r3, #2
    27a4:	7013      	strb	r3, [r2, #0]
}
    27a6:	bd30      	pop	{r4, r5, pc}
    27a8:	40041010 	andmi	r1, r4, r0, lsl r0
    27ac:	200005c4 	andcs	r0, r0, r4, asr #11
    27b0:	40041014 	andmi	r1, r4, r4, lsl r0
    27b4:	200005d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    27b8:	200005c0 	andcs	r0, r0, r0, asr #11
    27bc:	20000b7c 	andcs	r0, r0, ip, ror fp

000027c0 <phys_cc1350>:

// ============================================================================

void phys_cc1350 (int phy, int mbs) {
    27c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
// packet length is (and I have reasons not to trust the manual), so let me
// assume it is 255 - 4 - 1 = 250. We shall be careful.
//

#if (RADIO_OPTIONS & RADIO_OPTION_NOCHECKS) == 0
	if (rbuffl != 0)
    27c4:	4c49      	ldr	r4, [pc, #292]	; (28ec <phys_cc1350+0x12c>)
void phys_cc1350 (int phy, int mbs) {
    27c6:	4606      	mov	r6, r0
	if (rbuffl != 0)
    27c8:	7822      	ldrb	r2, [r4, #0]
    27ca:	b11a      	cbz	r2, 27d4 <phys_cc1350+0x14>
		/* We are allowed to do it only once */
		syserror (ETOOMANY, "cc13");
    27cc:	2009      	movs	r0, #9
    27ce:	4948      	ldr	r1, [pc, #288]	; (28f0 <phys_cc1350+0x130>)
		mbs = CC1350_MAXPLEN;

#if (RADIO_OPTIONS & RADIO_OPTION_NOCHECKS) == 0
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
		/* We are allowed to do it only once */
		syserror (EREQPAR, "cc13 mb");
    27d0:	f7fd ff3c 	bl	64c <__pi_syserror>
	if (mbs == 0)
    27d4:	b129      	cbz	r1, 27e2 <phys_cc1350+0x22>
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    27d6:	1f8a      	subs	r2, r1, #6
    27d8:	2af4      	cmp	r2, #244	; 0xf4
    27da:	d903      	bls.n	27e4 <phys_cc1350+0x24>
		syserror (EREQPAR, "cc13 mb");
    27dc:	2003      	movs	r0, #3
    27de:	4945      	ldr	r1, [pc, #276]	; (28f4 <phys_cc1350+0x134>)
    27e0:	e7f6      	b.n	27d0 <phys_cc1350+0x10>
		mbs = CC1350_MAXPLEN;
    27e2:	21fa      	movs	r1, #250	; 0xfa
	i = 0;
    27e4:	2700      	movs	r7, #0
#endif

	rbuffl = (byte) mbs;
    27e6:	f04f 0802 	mov.w	r8, #2
		db->status = DATA_ENTRY_PENDING;
    27ea:	46ba      	mov	sl, r7
		db->config.type = 0;	// General (data in structure)
    27ec:	f04f 0904 	mov.w	r9, #4
	rbuffl = (byte) mbs;
    27f0:	7021      	strb	r1, [r4, #0]
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    27f2:	7820      	ldrb	r0, [r4, #0]
    27f4:	469b      	mov	fp, r3
    27f6:	300d      	adds	r0, #13
    27f8:	f7fe febe 	bl	1578 <__pi_malloc>
		if (db == NULL)
    27fc:	4603      	mov	r3, r0
    27fe:	b920      	cbnz	r0, 280a <phys_cc1350+0x4a>
			syserror (EMALLOC, "cc13");
    2800:	2006      	movs	r0, #6
    2802:	493b      	ldr	r1, [pc, #236]	; (28f0 <phys_cc1350+0x130>)
    2804:	e7e4      	b.n	27d0 <phys_cc1350+0x10>
    2806:	46b8      	mov	r8, r7
    2808:	e7f3      	b.n	27f2 <phys_cc1350+0x32>
		db->status = DATA_ENTRY_PENDING;
    280a:	f880 a004 	strb.w	sl, [r0, #4]
		if (i)
    280e:	2f00      	cmp	r7, #0
    2810:	d03e      	beq.n	2890 <phys_cc1350+0xd0>
			da->pNextEntry = (byte*) db;
    2812:	f8cb 0000 	str.w	r0, [fp]
		if (++i == NRBUFFS)
    2816:	2701      	movs	r7, #1
		db->length = rbuffl + 2;
    2818:	7822      	ldrb	r2, [r4, #0]
		if (++i == NRBUFFS)
    281a:	45b8      	cmp	r8, r7
		db->length = rbuffl + 2;
    281c:	f102 0202 	add.w	r2, r2, #2
		db->config.type = 0;	// General (data in structure)
    2820:	f883 9005 	strb.w	r9, [r3, #5]
		db->length = rbuffl + 2;
    2824:	80da      	strh	r2, [r3, #6]
		if (++i == NRBUFFS)
    2826:	d1ee      	bne.n	2806 <phys_cc1350+0x46>
	db->pNextEntry = (byte*) re;
    2828:	601d      	str	r5, [r3, #0]
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    282a:	2008      	movs	r0, #8
    282c:	f7fe fea4 	bl	1578 <__pi_malloc>
    2830:	4b31      	ldr	r3, [pc, #196]	; (28f8 <phys_cc1350+0x138>)
    2832:	61d8      	str	r0, [r3, #28]
	if (rbuffs == NULL)
    2834:	2800      	cmp	r0, #0
    2836:	d0e3      	beq.n	2800 <phys_cc1350+0x40>
	rbuffs->pCurrEntry = (byte*) re;
    2838:	6005      	str	r5, [r0, #0]
	rbuffs->pLastEntry = NULL;
    283a:	2500      	movs	r5, #0
    283c:	69da      	ldr	r2, [r3, #28]
	init_rbuffs ();

	physid = phy;

	// Register the phy
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    283e:	492f      	ldr	r1, [pc, #188]	; (28fc <phys_cc1350+0x13c>)
	rbuffs->pLastEntry = NULL;
    2840:	6055      	str	r5, [r2, #4]
	RF_cmdPropRx . pOutput = (byte*) &rxstat;
    2842:	4a2f      	ldr	r2, [pc, #188]	; (2900 <phys_cc1350+0x140>)
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2844:	4630      	mov	r0, r6
	RF_cmdPropRx . pOutput = (byte*) &rxstat;
    2846:	621a      	str	r2, [r3, #32]
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    2848:	89da      	ldrh	r2, [r3, #14]
    284a:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
    284e:	f042 0206 	orr.w	r2, r2, #6
    2852:	81da      	strh	r2, [r3, #14]
	rbuffl -= 2;
    2854:	7823      	ldrb	r3, [r4, #0]
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2856:	f44f 6210 	mov.w	r2, #2304	; 0x900
	rbuffl -= 2;
    285a:	3b02      	subs	r3, #2
    285c:	7023      	strb	r3, [r4, #0]
	physid = phy;
    285e:	4b29      	ldr	r3, [pc, #164]	; (2904 <phys_cc1350+0x144>)
    2860:	801e      	strh	r6, [r3, #0]
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2862:	f7ff f9c1 	bl	1be8 <tcvphy_reg>
    2866:	4b28      	ldr	r3, [pc, #160]	; (2908 <phys_cc1350+0x148>)
	LEDI (0, 0);
	LEDI (1, 0);
	LEDI (2, 0);

#if DIAG_MESSAGES
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2868:	2207      	movs	r2, #7
    286a:	2102      	movs	r1, #2
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    286c:	6018      	str	r0, [r3, #0]
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    286e:	462b      	mov	r3, r5
    2870:	4826      	ldr	r0, [pc, #152]	; (290c <phys_cc1350+0x14c>)
    2872:	f7fe fefb 	bl	166c <diag>
		RADIO_DEFAULT_CHANNEL);
#endif

	// Install the backoff timer
	utimer_add (&bckf_timer);
    2876:	4826      	ldr	r0, [pc, #152]	; (2910 <phys_cc1350+0x150>)
    2878:	f7fe fc8c 	bl	1194 <utimer_add>

	// Start the driver process
	drvprcs = runthread (cc1350_driver);
    287c:	4629      	mov	r1, r5
    287e:	4825      	ldr	r0, [pc, #148]	; (2914 <phys_cc1350+0x154>)
    2880:	f7fe fece 	bl	1620 <__pi_fork>
    2884:	4b24      	ldr	r3, [pc, #144]	; (2918 <phys_cc1350+0x158>)
    2886:	6018      	str	r0, [r3, #0]

#if (RADIO_OPTIONS & RADIO_OPTION_NOCHECKS) == 0
	if (drvprcs == 0)
    2888:	b920      	cbnz	r0, 2894 <phys_cc1350+0xd4>
		syserror (ERESOURCE, "cc13");
    288a:	2004      	movs	r0, #4
    288c:	4918      	ldr	r1, [pc, #96]	; (28f0 <phys_cc1350+0x130>)
    288e:	e79f      	b.n	27d0 <phys_cc1350+0x10>
    2890:	4605      	mov	r5, r0
    2892:	e7c0      	b.n	2816 <phys_cc1350+0x56>

#if RADIO_DEFAULT_POWER <= 7
#if (RADIO_OPTIONS & RADIO_OPTION_PXOPTIONS)
	cmd_sp.txPower =
#endif
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    2894:	f64b 432b 	movw	r3, #48171	; 0xbc2b
    2898:	4c20      	ldr	r4, [pc, #128]	; (291c <phys_cc1350+0x15c>)
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    289a:	4921      	ldr	r1, [pc, #132]	; (2920 <phys_cc1350+0x160>)
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    289c:	8363      	strh	r3, [r4, #26]
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    289e:	4b21      	ldr	r3, [pc, #132]	; (2924 <phys_cc1350+0x164>)
    28a0:	781a      	ldrb	r2, [r3, #0]
    28a2:	3a01      	subs	r2, #1
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    28a4:	eb01 0382 	add.w	r3, r1, r2, lsl #2
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    28a8:	8858      	ldrh	r0, [r3, #2]
    28aa:	f831 3022 	ldrh.w	r3, [r1, r2, lsl #2]
    28ae:	6922      	ldr	r2, [r4, #16]
    28b0:	f003 030f 	and.w	r3, r3, #15
    28b4:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
    28b8:	f422 12ff 	bic.w	r2, r2, #2088960	; 0x1fe000
    28bc:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
    28c0:	f022 020f 	bic.w	r2, r2, #15
    28c4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    28c8:	4313      	orrs	r3, r2
    28ca:	6123      	str	r3, [r4, #16]
#endif

#if RADIO_BITRATE_INDEX > 0
	plugrt ();
#endif
	plugch ();
    28cc:	f7ff fbc8 	bl	2060 <plugch>

	// Make sure, prop mode is selected in PRCM (this is supposed to be
	// the default)
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    28d0:	4b15      	ldr	r3, [pc, #84]	; (2928 <phys_cc1350+0x168>)

	// Precompute the Trim
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    28d2:	4620      	mov	r0, r4
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    28d4:	601d      	str	r5, [r3, #0]
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    28d6:	f000 fe27 	bl	3528 <NOROM_RFCRTrim>
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    28da:	4620      	mov	r0, r4
    28dc:	4913      	ldr	r1, [pc, #76]	; (292c <phys_cc1350+0x16c>)
    28de:	f000 fd7b 	bl	33d8 <NOROM_RFCRfTrimRead>
			(rfTrim_t*)&rfTrim);

	// Direct all doorbell interrupts permanently to CPE0
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    28e2:	4b13      	ldr	r3, [pc, #76]	; (2930 <phys_cc1350+0x170>)
    28e4:	601d      	str	r5, [r3, #0]
}
    28e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    28ea:	bf00      	nop
    28ec:	200005d4 	ldrdcs	r0, [r0], -r4
    28f0:	000046f2 	strdeq	r4, [r0], -r2
    28f4:	000046f7 	strdeq	r4, [r0], -r7
    28f8:	2000007c 	andcs	r0, r0, ip, ror r0
    28fc:	00002081 	andeq	r2, r0, r1, lsl #1
    2900:	200005e8 	andcs	r0, r0, r8, ror #11
    2904:	200005cc 	andcs	r0, r0, ip, asr #11
    2908:	200005d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    290c:	000046ff 	strdeq	r4, [r0], -pc	; <UNPREDICTABLE>
    2910:	200005ba 			; <UNDEFINED> instruction: 0x200005ba
    2914:	00002561 	andeq	r2, r0, r1, ror #10
    2918:	200005c0 	andcs	r0, r0, r0, asr #11
    291c:	20000054 	andcs	r0, r0, r4, asr r0
    2920:	00005064 	andeq	r5, r0, r4, rrx
    2924:	2000003a 	andcs	r0, r0, sl, lsr r0
    2928:	400821d0 	ldrdmi	r2, [r8], -r0
    292c:	200005d8 	ldrdcs	r0, [r0], -r8
    2930:	40041018 	andmi	r1, r4, r8, lsl r0

00002934 <tcv_clo_null>:
    2934:	b510      	push	{r4, lr}
    2936:	4a07      	ldr	r2, [pc, #28]	; (2954 <tcv_clo_null+0x20>)
    2938:	4603      	mov	r3, r0
    293a:	6812      	ldr	r2, [r2, #0]
    293c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2940:	b132      	cbz	r2, 2950 <tcv_clo_null+0x1c>
    2942:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    2946:	428c      	cmp	r4, r1
    2948:	bf04      	itt	eq
    294a:	f842 0023 	streq.w	r0, [r2, r3, lsl #2]
    294e:	2000      	moveq	r0, #0
    2950:	bd10      	pop	{r4, pc}
    2952:	bf00      	nop
    2954:	200005f8 	strdcs	r0, [r0], -r8

00002958 <tcv_rcv_null>:
    2958:	4907      	ldr	r1, [pc, #28]	; (2978 <tcv_rcv_null+0x20>)
    295a:	9a00      	ldr	r2, [sp, #0]
    295c:	6809      	ldr	r1, [r1, #0]
    295e:	b909      	cbnz	r1, 2964 <tcv_rcv_null+0xc>
    2960:	2000      	movs	r0, #0
    2962:	4770      	bx	lr
    2964:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    2968:	6019      	str	r1, [r3, #0]
    296a:	3101      	adds	r1, #1
    296c:	d0f8      	beq.n	2960 <tcv_rcv_null+0x8>
    296e:	2300      	movs	r3, #0
    2970:	2002      	movs	r0, #2
    2972:	8053      	strh	r3, [r2, #2]
    2974:	8013      	strh	r3, [r2, #0]
    2976:	4770      	bx	lr
    2978:	200005f8 	strdcs	r0, [r0], -r8

0000297c <tcv_frm_null>:
    297c:	2000      	movs	r0, #0
    297e:	8048      	strh	r0, [r1, #2]
    2980:	8008      	strh	r0, [r1, #0]
    2982:	4770      	bx	lr

00002984 <tcv_out_null>:
    2984:	2004      	movs	r0, #4
    2986:	4770      	bx	lr

00002988 <tcv_xmt_null>:
    2988:	2001      	movs	r0, #1
    298a:	4770      	bx	lr

0000298c <tcv_ope_null>:
    298c:	b570      	push	{r4, r5, r6, lr}
    298e:	4c0f      	ldr	r4, [pc, #60]	; (29cc <tcv_ope_null+0x40>)
    2990:	4605      	mov	r5, r0
    2992:	6823      	ldr	r3, [r4, #0]
    2994:	460e      	mov	r6, r1
    2996:	b94b      	cbnz	r3, 29ac <tcv_ope_null+0x20>
    2998:	200c      	movs	r0, #12
    299a:	f7fe fded 	bl	1578 <__pi_malloc>
    299e:	6020      	str	r0, [r4, #0]
    29a0:	b178      	cbz	r0, 29c2 <tcv_ope_null+0x36>
    29a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    29a6:	e9c0 3300 	strd	r3, r3, [r0]
    29aa:	6083      	str	r3, [r0, #8]
    29ac:	6823      	ldr	r3, [r4, #0]
    29ae:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
    29b2:	3201      	adds	r2, #1
    29b4:	bf06      	itte	eq
    29b6:	f843 6025 	streq.w	r6, [r3, r5, lsl #2]
    29ba:	2000      	moveq	r0, #0
    29bc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    29c0:	bd70      	pop	{r4, r5, r6, pc}
    29c2:	2006      	movs	r0, #6
    29c4:	4902      	ldr	r1, [pc, #8]	; (29d0 <tcv_ope_null+0x44>)
    29c6:	f7fd fe41 	bl	64c <__pi_syserror>
    29ca:	bf00      	nop
    29cc:	200005f8 	strdcs	r0, [r0], -r8
    29d0:	00005070 	andeq	r5, r0, r0, ror r0

000029d4 <__outserial>:
#define	__cport		UART_A
#define	set_cport	CNOP

#endif	/* UART_DRIVER > 1 */

strand (__outserial, const char*)
    29d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    29d6:	4b18      	ldr	r3, [pc, #96]	; (2a38 <__outserial+0x64>)
    29d8:	681b      	ldr	r3, [r3, #0]
    29da:	689d      	ldr	r5, [r3, #8]
    29dc:	b130      	cbz	r0, 29ec <__outserial+0x18>
    29de:	280a      	cmp	r0, #10
    29e0:	d00d      	beq.n	29fe <__outserial+0x2a>
	// prone
	goto __OM_WRITE;

	// proceed (OM_WRITE);

endstrand
    29e2:	b003      	add	sp, #12
    29e4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    29e8:	f7fe bbcc 	b.w	1184 <__pi_badstate>
	ptr = data;
    29ec:	4b13      	ldr	r3, [pc, #76]	; (2a3c <__outserial+0x68>)
    29ee:	4c14      	ldr	r4, [pc, #80]	; (2a40 <__outserial+0x6c>)
    29f0:	601d      	str	r5, [r3, #0]
	if (*ptr)
    29f2:	782b      	ldrb	r3, [r5, #0]
    29f4:	b1e3      	cbz	r3, 2a30 <__outserial+0x5c>
		len = strlen (ptr);
    29f6:	4628      	mov	r0, r5
    29f8:	f7fe fcca 	bl	1390 <__pi_strlen>
    29fc:	6020      	str	r0, [r4, #0]
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    29fe:	4e0f      	ldr	r6, [pc, #60]	; (2a3c <__outserial+0x68>)
    2a00:	4f0f      	ldr	r7, [pc, #60]	; (2a40 <__outserial+0x6c>)
    2a02:	883b      	ldrh	r3, [r7, #0]
    2a04:	2201      	movs	r2, #1
    2a06:	9300      	str	r3, [sp, #0]
    2a08:	2100      	movs	r1, #0
    2a0a:	6833      	ldr	r3, [r6, #0]
    2a0c:	200a      	movs	r0, #10
    2a0e:	f7fe fcf1 	bl	13f4 <io>
	ptr += quant;
    2a12:	6833      	ldr	r3, [r6, #0]
	len -= quant;
    2a14:	683c      	ldr	r4, [r7, #0]
	ptr += quant;
    2a16:	4403      	add	r3, r0
	len -= quant;
    2a18:	1a24      	subs	r4, r4, r0
	ptr += quant;
    2a1a:	6033      	str	r3, [r6, #0]
	len -= quant;
    2a1c:	603c      	str	r4, [r7, #0]
	if (len == 0) {
    2a1e:	2c00      	cmp	r4, #0
    2a20:	d1ef      	bne.n	2a02 <__outserial+0x2e>
		ufree (data);
    2a22:	4628      	mov	r0, r5
    2a24:	f7fe fd5c 	bl	14e0 <__pi_free>
		finish;
    2a28:	4620      	mov	r0, r4
    2a2a:	f7fe fd7d 	bl	1528 <kill>
    2a2e:	e7e8      	b.n	2a02 <__outserial+0x2e>
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    2a30:	786b      	ldrb	r3, [r5, #1]
    2a32:	3303      	adds	r3, #3
    2a34:	6023      	str	r3, [r4, #0]
    2a36:	e7e2      	b.n	29fe <__outserial+0x2a>
    2a38:	20000b98 	mulcs	r0, r8, fp
    2a3c:	20000600 	andcs	r0, r0, r0, lsl #12
    2a40:	200005fc 	strdcs	r0, [r0], -ip

00002a44 <__inserial>:
#define	IM_INIT		0
#define	IM_READ		1
#define IM_BIN		2
#define IM_BINL		3

strand (__inserial, address)
    2a44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2a46:	4d42      	ldr	r5, [pc, #264]	; (2b50 <__inserial+0x10c>)
    2a48:	682a      	ldr	r2, [r5, #0]
    2a4a:	6894      	ldr	r4, [r2, #8]
    2a4c:	2803      	cmp	r0, #3
    2a4e:	d87a      	bhi.n	2b46 <__inserial+0x102>
    2a50:	e8df f000 	tbb	[pc, r0]
    2a54:	5d481802 	stclpl	8, cr1, [r8, #-8]
	static int len;
	int quant;

  entry (IM_INIT)

	if (__inpline != NULL)
    2a58:	4b3e      	ldr	r3, [pc, #248]	; (2b54 <__inserial+0x110>)
    2a5a:	681b      	ldr	r3, [r3, #0]
    2a5c:	b113      	cbz	r3, 2a64 <__inserial+0x20>
		/* Never overwrite previous unclaimed stuff */
		finish;
    2a5e:	2000      	movs	r0, #0
    2a60:	f7fe fd62 	bl	1528 <kill>

	// On eCOG char* is non-trivially upgraded from 'address'
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    2a64:	2040      	movs	r0, #64	; 0x40
    2a66:	f7fe fd87 	bl	1578 <__pi_malloc>
    2a6a:	4b3b      	ldr	r3, [pc, #236]	; (2b58 <__inserial+0x114>)
    2a6c:	4604      	mov	r4, r0
    2a6e:	6018      	str	r0, [r3, #0]
    2a70:	b918      	cbnz	r0, 2a7a <__inserial+0x36>
		/*
		 * We have to wait for memory
		 */
		umwait (IM_INIT);
    2a72:	f7fe fdef 	bl	1654 <__pi_waitmem>
		release;
    2a76:	f7fe f9a7 	bl	dc8 <__pi_release>
	}
	savedata (data);
	len = MAX_LINE_LENGTH;
    2a7a:	223f      	movs	r2, #63	; 0x3f
	savedata (data);
    2a7c:	682b      	ldr	r3, [r5, #0]
    2a7e:	6098      	str	r0, [r3, #8]
	len = MAX_LINE_LENGTH;
    2a80:	4b36      	ldr	r3, [pc, #216]	; (2b5c <__inserial+0x118>)
    2a82:	601a      	str	r2, [r3, #0]
	/* Make sure this doesn't change while we are reading */
	set_cport;

  entry (IM_READ)

	io (IM_READ, __cport, READ, ptr, 1);
    2a84:	2001      	movs	r0, #1
    2a86:	2200      	movs	r2, #0
    2a88:	4d33      	ldr	r5, [pc, #204]	; (2b58 <__inserial+0x114>)
    2a8a:	9000      	str	r0, [sp, #0]
    2a8c:	682b      	ldr	r3, [r5, #0]
    2a8e:	4611      	mov	r1, r2
    2a90:	f7fe fcb0 	bl	13f4 <io>
	if (ptr == (char*) data) { // new line
    2a94:	682b      	ldr	r3, [r5, #0]
    2a96:	42a3      	cmp	r3, r4
    2a98:	d10d      	bne.n	2ab6 <__inserial+0x72>
		if (*ptr == '\0') { // bin cmd
    2a9a:	7823      	ldrb	r3, [r4, #0]
    2a9c:	b923      	cbnz	r3, 2aa8 <__inserial+0x64>
			ptr++;
    2a9e:	1c63      	adds	r3, r4, #1
			proceed (IM_BIN);
    2aa0:	2002      	movs	r0, #2
			ptr++;
    2aa2:	602b      	str	r3, [r5, #0]
			proceed (IM_BIN);
    2aa4:	f7fe fbf6 	bl	1294 <proceed>
		}

		if (*ptr < 0x20)
    2aa8:	682b      	ldr	r3, [r5, #0]
    2aaa:	781b      	ldrb	r3, [r3, #0]
    2aac:	2b1f      	cmp	r3, #31
    2aae:	d802      	bhi.n	2ab6 <__inserial+0x72>
			/* Ignore codes below space at the beginning of line */
			proceed (IM_READ);
    2ab0:	2001      	movs	r0, #1
    2ab2:	f7fe fbef 	bl	1294 <proceed>
	}
	if (*ptr == '\n' || *ptr == '\r') {
    2ab6:	682b      	ldr	r3, [r5, #0]
    2ab8:	781a      	ldrb	r2, [r3, #0]
    2aba:	2a0a      	cmp	r2, #10
    2abc:	d001      	beq.n	2ac2 <__inserial+0x7e>
    2abe:	2a0d      	cmp	r2, #13
    2ac0:	d105      	bne.n	2ace <__inserial+0x8a>
		*ptr = '\0';
    2ac2:	2000      	movs	r0, #0
    2ac4:	7018      	strb	r0, [r3, #0]
		__inpline = (char*)data;
    2ac6:	4b23      	ldr	r3, [pc, #140]	; (2b54 <__inserial+0x110>)
    2ac8:	601c      	str	r4, [r3, #0]
		finish;
    2aca:	f7fe fd2d 	bl	1528 <kill>
	}

	if (len) {
    2ace:	4923      	ldr	r1, [pc, #140]	; (2b5c <__inserial+0x118>)
    2ad0:	680b      	ldr	r3, [r1, #0]
    2ad2:	b123      	cbz	r3, 2ade <__inserial+0x9a>
		ptr++;
    2ad4:	682a      	ldr	r2, [r5, #0]
		len--;
    2ad6:	3b01      	subs	r3, #1
		ptr++;
    2ad8:	3201      	adds	r2, #1
    2ada:	602a      	str	r2, [r5, #0]
		len--;
    2adc:	600b      	str	r3, [r1, #0]
	}

	proceed (IM_READ);
    2ade:	2001      	movs	r0, #1
    2ae0:	f7fe fbd8 	bl	1294 <proceed>

  entry (IM_BIN)

	io (IM_BIN, __cport, READ, ptr, 1);
    2ae4:	2301      	movs	r3, #1
    2ae6:	2200      	movs	r2, #0
    2ae8:	4d1b      	ldr	r5, [pc, #108]	; (2b58 <__inserial+0x114>)
    2aea:	9300      	str	r3, [sp, #0]
    2aec:	4611      	mov	r1, r2
    2aee:	682b      	ldr	r3, [r5, #0]
    2af0:	2002      	movs	r0, #2
    2af2:	f7fe fc7f 	bl	13f4 <io>
	len -= 2;
    2af6:	4819      	ldr	r0, [pc, #100]	; (2b5c <__inserial+0x118>)
    2af8:	6803      	ldr	r3, [r0, #0]
    2afa:	1e9a      	subs	r2, r3, #2
	if (len > *ptr + 1) // 1 for 0x04
    2afc:	682b      	ldr	r3, [r5, #0]
    2afe:	f813 1b01 	ldrb.w	r1, [r3], #1
    2b02:	3101      	adds	r1, #1
		len = *ptr + 1;
    2b04:	4291      	cmp	r1, r2
    2b06:	bfd4      	ite	le
    2b08:	6001      	strle	r1, [r0, #0]
    2b0a:	6002      	strgt	r2, [r0, #0]
	ptr++;
    2b0c:	602b      	str	r3, [r5, #0]

  entry (IM_BINL)

	quant = io (IM_BINL, __cport, READ, ptr, len);
    2b0e:	2200      	movs	r2, #0
    2b10:	4f12      	ldr	r7, [pc, #72]	; (2b5c <__inserial+0x118>)
    2b12:	4d11      	ldr	r5, [pc, #68]	; (2b58 <__inserial+0x114>)
    2b14:	883b      	ldrh	r3, [r7, #0]
    2b16:	4611      	mov	r1, r2
    2b18:	9300      	str	r3, [sp, #0]
    2b1a:	682b      	ldr	r3, [r5, #0]
    2b1c:	2003      	movs	r0, #3
    2b1e:	f7fe fc69 	bl	13f4 <io>
	len -= quant;
    2b22:	683b      	ldr	r3, [r7, #0]
	quant = io (IM_BINL, __cport, READ, ptr, len);
    2b24:	4606      	mov	r6, r0
	len -= quant;
    2b26:	1a18      	subs	r0, r3, r0
    2b28:	6038      	str	r0, [r7, #0]
	if (len == 0) {
    2b2a:	b918      	cbnz	r0, 2b34 <__inserial+0xf0>
		__inpline = (char*)data;
    2b2c:	4b09      	ldr	r3, [pc, #36]	; (2b54 <__inserial+0x110>)
    2b2e:	601c      	str	r4, [r3, #0]
		finish;
    2b30:	f7fe fcfa 	bl	1528 <kill>
	}
	ptr += quant;
    2b34:	6828      	ldr	r0, [r5, #0]
    2b36:	4430      	add	r0, r6
    2b38:	6028      	str	r0, [r5, #0]
	proceed (IM_BINL);
    2b3a:	2003      	movs	r0, #3

endstrand
    2b3c:	b003      	add	sp, #12
    2b3e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	proceed (IM_BINL);
    2b42:	f7fe bba7 	b.w	1294 <proceed>
endstrand
    2b46:	b003      	add	sp, #12
    2b48:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2b4c:	f7fe bb1a 	b.w	1184 <__pi_badstate>
    2b50:	20000b98 	mulcs	r0, r8, fp
    2b54:	20000604 	andcs	r0, r0, r4, lsl #12
    2b58:	2000060c 	andcs	r0, r0, ip, lsl #12
    2b5c:	20000608 	andcs	r0, r0, r8, lsl #12

00002b60 <outc.5724>:

	char c;
	word d;

	void outc (word c) {
		if (res && (d < n))
    2b60:	f8dc 2000 	ldr.w	r2, [ip]
    2b64:	b132      	cbz	r2, 2b74 <outc.5724+0x14>
    2b66:	f8bc 3006 	ldrh.w	r3, [ip, #6]
    2b6a:	f8bc 1004 	ldrh.w	r1, [ip, #4]
    2b6e:	4299      	cmp	r1, r3
			// Store if there is a buffer ...
			res [d] = (char) c;
    2b70:	bf88      	it	hi
    2b72:	54d0      	strbhi	r0, [r2, r3]
		// ... otherwise just count
		d++;
    2b74:	f8bc 3006 	ldrh.w	r3, [ip, #6]
    2b78:	3301      	adds	r3, #1
    2b7a:	f8ac 3006 	strh.w	r3, [ip, #6]
	};
    2b7e:	4770      	bx	lr

00002b80 <__pi_vfparse>:
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2b80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    2b84:	461c      	mov	r4, r3
    2b86:	ab0c      	add	r3, sp, #48	; 0x30
    2b88:	9303      	str	r3, [sp, #12]
			if (i == 0) \
				break; \
			c = (char) (val / i); \
		}

	d = 0;
    2b8a:	2300      	movs	r3, #0
				if (c == 'd' && (val & 0x8000) != 0) {
					/* Minus */
					outc ('-');
					val = (~val) + 1;
				}
				enci (10000);
    2b8c:	260a      	movs	r6, #10
						[ (val >> i) & 0xf ]);
    2b8e:	4f86      	ldr	r7, [pc, #536]	; (2da8 <__pi_vfparse+0x228>)
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2b90:	9001      	str	r0, [sp, #4]
    2b92:	f8ad 1008 	strh.w	r1, [sp, #8]
	d = 0;
    2b96:	f8ad 300a 	strh.w	r3, [sp, #10]
		c = *fm++;
    2b9a:	f892 9000 	ldrb.w	r9, [r2]
		if (c == '\\') {
    2b9e:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
    2ba2:	d118      	bne.n	2bd6 <__pi_vfparse+0x56>
			if ((c = *fm++) == '\0') {
    2ba4:	f892 9001 	ldrb.w	r9, [r2, #1]
    2ba8:	1c95      	adds	r5, r2, #2
				outc ('\\');
    2baa:	f10d 0c04 	add.w	ip, sp, #4
			if ((c = *fm++) == '\0') {
    2bae:	f1b9 0f00 	cmp.w	r9, #0
    2bb2:	d10b      	bne.n	2bcc <__pi_vfparse+0x4c>
				outc ('\\');
    2bb4:	205c      	movs	r0, #92	; 0x5c
    2bb6:	f7ff ffd3 	bl	2b60 <outc.5724>
					goto Ret;
			}
		} else {
			// Regular character
Eol:
			outc (c);
    2bba:	4648      	mov	r0, r9
    2bbc:	f10d 0c04 	add.w	ip, sp, #4
    2bc0:	f7ff ffce 	bl	2b60 <outc.5724>
			if (c == '\0')
    2bc4:	f1b9 0f00 	cmp.w	r9, #0
    2bc8:	d103      	bne.n	2bd2 <__pi_vfparse+0x52>
    2bca:	e027      	b.n	2c1c <__pi_vfparse+0x9c>
			outc (c);
    2bcc:	4648      	mov	r0, r9
				outc (val);
    2bce:	f7ff ffc7 	bl	2b60 <outc.5724>
				val = (word) va_arg (ap, aword);
    2bd2:	462a      	mov	r2, r5
    2bd4:	e7e1      	b.n	2b9a <__pi_vfparse+0x1a>
		if (c == '%') {
    2bd6:	f1b9 0f25 	cmp.w	r9, #37	; 0x25
    2bda:	f040 80e2 	bne.w	2da2 <__pi_vfparse+0x222>
			c = *fm++;
    2bde:	f892 8001 	ldrb.w	r8, [r2, #1]
    2be2:	1c95      	adds	r5, r2, #2
			switch (c) {
    2be4:	f1b8 0f73 	cmp.w	r8, #115	; 0x73
    2be8:	f000 80cd 	beq.w	2d86 <__pi_vfparse+0x206>
    2bec:	d81b      	bhi.n	2c26 <__pi_vfparse+0xa6>
    2bee:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
    2bf2:	d033      	beq.n	2c5c <__pi_vfparse+0xdc>
    2bf4:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    2bf8:	d067      	beq.n	2cca <__pi_vfparse+0x14a>
    2bfa:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
    2bfe:	f000 80bc 	beq.w	2d7a <__pi_vfparse+0x1fa>
				outc ('%');
    2c02:	2025      	movs	r0, #37	; 0x25
    2c04:	f10d 0c04 	add.w	ip, sp, #4
    2c08:	f7ff ffaa 	bl	2b60 <outc.5724>
				outc (c);
    2c0c:	4640      	mov	r0, r8
    2c0e:	f10d 0c04 	add.w	ip, sp, #4
    2c12:	f7ff ffa5 	bl	2b60 <outc.5724>
				if (c == '\0')
    2c16:	f1b8 0f00 	cmp.w	r8, #0
    2c1a:	d1da      	bne.n	2bd2 <__pi_vfparse+0x52>
Ret:
				return d;
    2c1c:	f8bd 000a 	ldrh.w	r0, [sp, #10]
		}
	}
}
    2c20:	b004      	add	sp, #16
    2c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			switch (c) {
    2c26:	f1b8 0f75 	cmp.w	r8, #117	; 0x75
    2c2a:	d017      	beq.n	2c5c <__pi_vfparse+0xdc>
    2c2c:	f1b8 0f78 	cmp.w	r8, #120	; 0x78
    2c30:	d1e7      	bne.n	2c02 <__pi_vfparse+0x82>
				for (i = 12; ; i -= 4) {
    2c32:	f04f 080c 	mov.w	r8, #12
				val = (word) va_arg (ap, aword);
    2c36:	f854 3b04 	ldr.w	r3, [r4], #4
						[ (val >> i) & 0xf ]);
    2c3a:	fa1f f983 	uxth.w	r9, r3
    2c3e:	fa49 f308 	asr.w	r3, r9, r8
    2c42:	f003 030f 	and.w	r3, r3, #15
					outc (__pi_hex_enc_table
    2c46:	5cf8      	ldrb	r0, [r7, r3]
    2c48:	f10d 0c04 	add.w	ip, sp, #4
    2c4c:	f7ff ff88 	bl	2b60 <outc.5724>
					if (i == 0)
    2c50:	f1b8 0f00 	cmp.w	r8, #0
    2c54:	d0bd      	beq.n	2bd2 <__pi_vfparse+0x52>
				for (i = 12; ; i -= 4) {
    2c56:	f1a8 0804 	sub.w	r8, r8, #4
					outc (__pi_hex_enc_table
    2c5a:	e7f0      	b.n	2c3e <__pi_vfparse+0xbe>
				val = (word) va_arg (ap, aword);
    2c5c:	f854 3b04 	ldr.w	r3, [r4], #4
				if (c == 'd' && (val & 0x8000) != 0) {
    2c60:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
				val = (word) va_arg (ap, aword);
    2c64:	fa1f f983 	uxth.w	r9, r3
				if (c == 'd' && (val & 0x8000) != 0) {
    2c68:	d10a      	bne.n	2c80 <__pi_vfparse+0x100>
    2c6a:	041b      	lsls	r3, r3, #16
    2c6c:	d508      	bpl.n	2c80 <__pi_vfparse+0x100>
					outc ('-');
    2c6e:	202d      	movs	r0, #45	; 0x2d
    2c70:	f10d 0c04 	add.w	ip, sp, #4
    2c74:	f7ff ff74 	bl	2b60 <outc.5724>
					val = (~val) + 1;
    2c78:	f1c9 0900 	rsb	r9, r9, #0
    2c7c:	fa1f f989 	uxth.w	r9, r9
				for (i = 12; ; i -= 4) {
    2c80:	2305      	movs	r3, #5
				enci (10000);
    2c82:	f242 7810 	movw	r8, #10000	; 0x2710
    2c86:	fbb9 f0f8 	udiv	r0, r9, r8
    2c8a:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    2c8e:	d103      	bne.n	2c98 <__pi_vfparse+0x118>
    2c90:	3b01      	subs	r3, #1
    2c92:	d117      	bne.n	2cc4 <__pi_vfparse+0x144>
    2c94:	f04f 0801 	mov.w	r8, #1
    2c98:	fa1f fa80 	uxth.w	sl, r0
    2c9c:	f10d 0c04 	add.w	ip, sp, #4
    2ca0:	3030      	adds	r0, #48	; 0x30
    2ca2:	f7ff ff5d 	bl	2b60 <outc.5724>
    2ca6:	fbb8 f3f6 	udiv	r3, r8, r6
    2caa:	fb08 991a 	mls	r9, r8, sl, r9
    2cae:	f1b8 0f09 	cmp.w	r8, #9
    2cb2:	fa1f f989 	uxth.w	r9, r9
    2cb6:	b29b      	uxth	r3, r3
    2cb8:	d98b      	bls.n	2bd2 <__pi_vfparse+0x52>
    2cba:	fbb9 f0f3 	udiv	r0, r9, r3
    2cbe:	4698      	mov	r8, r3
    2cc0:	b2c0      	uxtb	r0, r0
    2cc2:	e7e9      	b.n	2c98 <__pi_vfparse+0x118>
    2cc4:	fbb8 f8f6 	udiv	r8, r8, r6
    2cc8:	e7dd      	b.n	2c86 <__pi_vfparse+0x106>
				c = *fm;
    2cca:	7893      	ldrb	r3, [r2, #2]
				if (c == 'd' || c == 'u') {
    2ccc:	2b64      	cmp	r3, #100	; 0x64
    2cce:	d001      	beq.n	2cd4 <__pi_vfparse+0x154>
    2cd0:	2b75      	cmp	r3, #117	; 0x75
    2cd2:	d132      	bne.n	2d3a <__pi_vfparse+0x1ba>
					if (c == 'd' &&
    2cd4:	2b64      	cmp	r3, #100	; 0x64
					val = va_arg (ap, lword);
    2cd6:	f854 ab04 	ldr.w	sl, [r4], #4
					fm++;
    2cda:	f102 0503 	add.w	r5, r2, #3
					if (c == 'd' &&
    2cde:	d109      	bne.n	2cf4 <__pi_vfparse+0x174>
    2ce0:	f1ba 0f00 	cmp.w	sl, #0
    2ce4:	da06      	bge.n	2cf4 <__pi_vfparse+0x174>
						outc ('-');
    2ce6:	202d      	movs	r0, #45	; 0x2d
    2ce8:	f10d 0c04 	add.w	ip, sp, #4
    2cec:	f7ff ff38 	bl	2b60 <outc.5724>
						val = (~val) + 1;
    2cf0:	f1ca 0a00 	rsb	sl, sl, #0
				enci (10000);
    2cf4:	230a      	movs	r3, #10
					enci (1000000000UL);
    2cf6:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 2dac <__pi_vfparse+0x22c>
    2cfa:	fbba f9f8 	udiv	r9, sl, r8
    2cfe:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
    2d02:	d103      	bne.n	2d0c <__pi_vfparse+0x18c>
    2d04:	3b01      	subs	r3, #1
    2d06:	d115      	bne.n	2d34 <__pi_vfparse+0x1b4>
    2d08:	f04f 0801 	mov.w	r8, #1
    2d0c:	f10d 0c04 	add.w	ip, sp, #4
    2d10:	f109 0030 	add.w	r0, r9, #48	; 0x30
    2d14:	f7ff ff24 	bl	2b60 <outc.5724>
    2d18:	f1b8 0f09 	cmp.w	r8, #9
    2d1c:	fbb8 f3f6 	udiv	r3, r8, r6
    2d20:	fb08 aa19 	mls	sl, r8, r9, sl
    2d24:	f67f af55 	bls.w	2bd2 <__pi_vfparse+0x52>
    2d28:	fbba f9f3 	udiv	r9, sl, r3
    2d2c:	4698      	mov	r8, r3
    2d2e:	fa5f f989 	uxtb.w	r9, r9
    2d32:	e7eb      	b.n	2d0c <__pi_vfparse+0x18c>
    2d34:	fbb8 f8f6 	udiv	r8, r8, r6
    2d38:	e7df      	b.n	2cfa <__pi_vfparse+0x17a>
				} else if (c == 'x') {
    2d3a:	2b78      	cmp	r3, #120	; 0x78
    2d3c:	d114      	bne.n	2d68 <__pi_vfparse+0x1e8>
					for (i = 28; ; i -= 4) {
    2d3e:	f04f 081c 	mov.w	r8, #28
					val = va_arg (ap, lword);
    2d42:	f854 9b04 	ldr.w	r9, [r4], #4
					fm++;
    2d46:	1cd5      	adds	r5, r2, #3
							[ (val >> i) & 0xf ]);
    2d48:	fa29 f308 	lsr.w	r3, r9, r8
    2d4c:	f003 030f 	and.w	r3, r3, #15
						outc (__pi_hex_enc_table
    2d50:	5cf8      	ldrb	r0, [r7, r3]
    2d52:	f10d 0c04 	add.w	ip, sp, #4
    2d56:	f7ff ff03 	bl	2b60 <outc.5724>
						if (i == 0)
    2d5a:	f1b8 0f00 	cmp.w	r8, #0
    2d5e:	f43f af38 	beq.w	2bd2 <__pi_vfparse+0x52>
					for (i = 28; ; i -= 4) {
    2d62:	f1a8 0804 	sub.w	r8, r8, #4
						outc (__pi_hex_enc_table
    2d66:	e7ef      	b.n	2d48 <__pi_vfparse+0x1c8>
					outc ('%');
    2d68:	4648      	mov	r0, r9
    2d6a:	f10d 0c04 	add.w	ip, sp, #4
    2d6e:	f7ff fef7 	bl	2b60 <outc.5724>
					outc ('l');
    2d72:	4640      	mov	r0, r8
    2d74:	f10d 0c04 	add.w	ip, sp, #4
    2d78:	e729      	b.n	2bce <__pi_vfparse+0x4e>
				val = (word) va_arg (ap, aword);
    2d7a:	f854 0b04 	ldr.w	r0, [r4], #4
				outc (val);
    2d7e:	f10d 0c04 	add.w	ip, sp, #4
    2d82:	b280      	uxth	r0, r0
    2d84:	e723      	b.n	2bce <__pi_vfparse+0x4e>
				while (*st != '\0') {
    2d86:	f854 3b04 	ldr.w	r3, [r4], #4
    2d8a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    2d8e:	f818 0f01 	ldrb.w	r0, [r8, #1]!
    2d92:	2800      	cmp	r0, #0
    2d94:	f43f af1d 	beq.w	2bd2 <__pi_vfparse+0x52>
					outc (*st);
    2d98:	f10d 0c04 	add.w	ip, sp, #4
    2d9c:	f7ff fee0 	bl	2b60 <outc.5724>
					st++;
    2da0:	e7f5      	b.n	2d8e <__pi_vfparse+0x20e>
		c = *fm++;
    2da2:	1c55      	adds	r5, r2, #1
    2da4:	e709      	b.n	2bba <__pi_vfparse+0x3a>
    2da6:	bf00      	nop
    2da8:	00004605 	andeq	r4, r0, r5, lsl #12
    2dac:	3b9aca00 	blcc	fe6b55b4 <_estack+0xde6b05b4>

00002db0 <vform>:

char *vform (char *res, const char *fm, va_list aq) {
    2db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2db4:	460e      	mov	r6, r1
    2db6:	4617      	mov	r7, r2

	word fml, d;

	if (res != NULL) {
    2db8:	4604      	mov	r4, r0
    2dba:	b140      	cbz	r0, 2dce <vform+0x1e>
		// We trust the caller
		__pi_vfparse (res, MAX_WORD, fm, aq);
    2dbc:	4613      	mov	r3, r2
    2dbe:	460a      	mov	r2, r1
    2dc0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2dc4:	f7ff fedc 	bl	2b80 <__pi_vfparse>
		ufree (res);
		fml = d;
		goto Again;
	}
	return res;
}
    2dc8:	4620      	mov	r0, r4
    2dca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fml = strlen (fm) + 17;
    2dce:	4608      	mov	r0, r1
    2dd0:	f7fe fade 	bl	1390 <__pi_strlen>
    2dd4:	f100 0511 	add.w	r5, r0, #17
    2dd8:	b2ad      	uxth	r5, r5
	if ((res = (char*) umalloc (fml)) == NULL)
    2dda:	4628      	mov	r0, r5
    2ddc:	f7fe fbcc 	bl	1578 <__pi_malloc>
    2de0:	4604      	mov	r4, r0
    2de2:	2800      	cmp	r0, #0
    2de4:	d0f0      	beq.n	2dc8 <vform+0x18>
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    2de6:	463b      	mov	r3, r7
    2de8:	4632      	mov	r2, r6
    2dea:	4629      	mov	r1, r5
    2dec:	f7ff fec8 	bl	2b80 <__pi_vfparse>
    2df0:	4285      	cmp	r5, r0
    2df2:	4680      	mov	r8, r0
    2df4:	d2e8      	bcs.n	2dc8 <vform+0x18>
		ufree (res);
    2df6:	4620      	mov	r0, r4
    2df8:	f7fe fb72 	bl	14e0 <__pi_free>
		goto Again;
    2dfc:	4645      	mov	r5, r8
    2dfe:	e7ec      	b.n	2dda <vform+0x2a>

00002e00 <vscan>:
					c -= (char) ('A' - 10); \
				*vap = ((*vap) << 4) | (at) c; \
			} \
			}

	if (buf == NULL || fmt == NULL)
    2e00:	4603      	mov	r3, r0
int vscan (const char *buf, const char *fmt, va_list ap) {
    2e02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf == NULL || fmt == NULL)
    2e06:	2800      	cmp	r0, #0
    2e08:	f000 81b5 	beq.w	3176 <vscan+0x376>
    2e0c:	2900      	cmp	r1, #0
    2e0e:	f000 81b4 	beq.w	317a <vscan+0x37a>
		// A safety hatch
		return 0;

	nc = 0;
    2e12:	2400      	movs	r4, #0
#if	CODE_LONG_INTS
		    case 'l':
			switch (*fmt++) {
			    case '\0':	return nc;
		    	    case 'd': scani (lword); break;
		    	    case 'u': scanu (lword); break;
    2e14:	270a      	movs	r7, #10
    2e16:	4625      	mov	r5, r4
			*sap = c;
			break;
		    }
		    case 's': {
			char *sap;
			while (isspace (*buf)) buf++;
    2e18:	f8df c370 	ldr.w	ip, [pc, #880]	; 318c <vscan+0x38c>
    2e1c:	460e      	mov	r6, r1
	while (*fmt != '\0') {
    2e1e:	f811 0b01 	ldrb.w	r0, [r1], #1
    2e22:	b170      	cbz	r0, 2e42 <vscan+0x42>
		if (*fmt++ != '%')
    2e24:	2825      	cmp	r0, #37	; 0x25
    2e26:	d1f9      	bne.n	2e1c <vscan+0x1c>
		switch (*fmt++) {
    2e28:	7870      	ldrb	r0, [r6, #1]
    2e2a:	1cb1      	adds	r1, r6, #2
    2e2c:	286c      	cmp	r0, #108	; 0x6c
    2e2e:	f000 80e1 	beq.w	2ff4 <vscan+0x1f4>
    2e32:	d809      	bhi.n	2e48 <vscan+0x48>
    2e34:	2863      	cmp	r0, #99	; 0x63
    2e36:	f000 8184 	beq.w	3142 <vscan+0x342>
    2e3a:	2864      	cmp	r0, #100	; 0x64
    2e3c:	d043      	beq.n	2ec6 <vscan+0xc6>
    2e3e:	2800      	cmp	r0, #0
    2e40:	d1ec      	bne.n	2e1c <vscan+0x1c>
			break;
		    }
		}
	}
	return nc;
}
    2e42:	4620      	mov	r0, r4
    2e44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		switch (*fmt++) {
    2e48:	2875      	cmp	r0, #117	; 0x75
    2e4a:	d074      	beq.n	2f36 <vscan+0x136>
    2e4c:	2878      	cmp	r0, #120	; 0x78
    2e4e:	f000 8098 	beq.w	2f82 <vscan+0x182>
    2e52:	2873      	cmp	r0, #115	; 0x73
    2e54:	d1e2      	bne.n	2e1c <vscan+0x1c>
			while (isspace (*buf)) buf++;
    2e56:	7818      	ldrb	r0, [r3, #0]
    2e58:	461e      	mov	r6, r3
    2e5a:	f1a0 0e09 	sub.w	lr, r0, #9
    2e5e:	fa5f fe8e 	uxtb.w	lr, lr
    2e62:	f1be 0f17 	cmp.w	lr, #23
    2e66:	4698      	mov	r8, r3
    2e68:	f103 0301 	add.w	r3, r3, #1
    2e6c:	f240 8173 	bls.w	3156 <vscan+0x356>
			if (*buf == '\0')
    2e70:	2800      	cmp	r0, #0
    2e72:	d0e6      	beq.n	2e42 <vscan+0x42>
			if (*buf != ',') {
    2e74:	282c      	cmp	r0, #44	; 0x2c
			sap = va_arg (ap, char*);
    2e76:	f852 eb04 	ldr.w	lr, [r2], #4
			nc++;
    2e7a:	f104 0401 	add.w	r4, r4, #1
			if (*buf != ',') {
    2e7e:	d00e      	beq.n	2e9e <vscan+0x9e>
    2e80:	4646      	mov	r6, r8
				while (!isspace (*buf) && *buf != ',' &&
    2e82:	f818 3b01 	ldrb.w	r3, [r8], #1
    2e86:	f1a3 0009 	sub.w	r0, r3, #9
    2e8a:	2801      	cmp	r0, #1
    2e8c:	d907      	bls.n	2e9e <vscan+0x9e>
    2e8e:	2b0d      	cmp	r3, #13
    2e90:	d005      	beq.n	2e9e <vscan+0x9e>
    2e92:	2b2c      	cmp	r3, #44	; 0x2c
    2e94:	d003      	beq.n	2e9e <vscan+0x9e>
    2e96:	f013 0fdf 	tst.w	r3, #223	; 0xdf
    2e9a:	f040 8163 	bne.w	3164 <vscan+0x364>
			while (isspace (*buf)) buf++;
    2e9e:	f896 8000 	ldrb.w	r8, [r6]
    2ea2:	4633      	mov	r3, r6
    2ea4:	f1a8 0009 	sub.w	r0, r8, #9
    2ea8:	b2c0      	uxtb	r0, r0
    2eaa:	2817      	cmp	r0, #23
    2eac:	f106 0601 	add.w	r6, r6, #1
    2eb0:	f240 815b 	bls.w	316a <vscan+0x36a>
			if (*buf == ',') buf++;
    2eb4:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
    2eb8:	bf08      	it	eq
    2eba:	4633      	moveq	r3, r6
			*sap = '\0';
    2ebc:	f88e 5000 	strb.w	r5, [lr]
			break;
    2ec0:	e7ac      	b.n	2e1c <vscan+0x1c>
		    case 'd': scani (word); break;
    2ec2:	2e00      	cmp	r6, #0
    2ec4:	d0bd      	beq.n	2e42 <vscan+0x42>
    2ec6:	469e      	mov	lr, r3
    2ec8:	f813 6b01 	ldrb.w	r6, [r3], #1
    2ecc:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
    2ed0:	2809      	cmp	r0, #9
    2ed2:	d923      	bls.n	2f1c <vscan+0x11c>
    2ed4:	2e2d      	cmp	r6, #45	; 0x2d
    2ed6:	d001      	beq.n	2edc <vscan+0xdc>
    2ed8:	2e2b      	cmp	r6, #43	; 0x2b
    2eda:	d1f2      	bne.n	2ec2 <vscan+0xc2>
    2edc:	7818      	ldrb	r0, [r3, #0]
    2ede:	469e      	mov	lr, r3
    2ee0:	3830      	subs	r0, #48	; 0x30
    2ee2:	2809      	cmp	r0, #9
    2ee4:	d8ef      	bhi.n	2ec6 <vscan+0xc6>
    2ee6:	f1a6 092d 	sub.w	r9, r6, #45	; 0x2d
    2eea:	f1d9 0800 	rsbs	r8, r9, #0
    2eee:	eb48 0809 	adc.w	r8, r8, r9
    2ef2:	f852 6b04 	ldr.w	r6, [r2], #4
    2ef6:	3401      	adds	r4, #1
    2ef8:	8035      	strh	r5, [r6, #0]
    2efa:	f89e 0000 	ldrb.w	r0, [lr]
    2efe:	4673      	mov	r3, lr
    2f00:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
    2f04:	f1b9 0f09 	cmp.w	r9, #9
    2f08:	f10e 0e01 	add.w	lr, lr, #1
    2f0c:	d909      	bls.n	2f22 <vscan+0x122>
    2f0e:	f1b8 0f00 	cmp.w	r8, #0
    2f12:	d183      	bne.n	2e1c <vscan+0x1c>
    2f14:	8830      	ldrh	r0, [r6, #0]
    2f16:	4240      	negs	r0, r0
    2f18:	8030      	strh	r0, [r6, #0]
    2f1a:	e77f      	b.n	2e1c <vscan+0x1c>
    2f1c:	f04f 0800 	mov.w	r8, #0
    2f20:	e7e7      	b.n	2ef2 <vscan+0xf2>
    2f22:	8833      	ldrh	r3, [r6, #0]
    2f24:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2f28:	ebc0 0043 	rsb	r0, r0, r3, lsl #1
    2f2c:	3030      	adds	r0, #48	; 0x30
    2f2e:	8030      	strh	r0, [r6, #0]
    2f30:	e7e3      	b.n	2efa <vscan+0xfa>
		    case 'u': scanu (word); break;
    2f32:	2800      	cmp	r0, #0
    2f34:	d085      	beq.n	2e42 <vscan+0x42>
    2f36:	7818      	ldrb	r0, [r3, #0]
    2f38:	461e      	mov	r6, r3
    2f3a:	f1a0 0e30 	sub.w	lr, r0, #48	; 0x30
    2f3e:	f1be 0f09 	cmp.w	lr, #9
    2f42:	f103 0301 	add.w	r3, r3, #1
    2f46:	d8f4      	bhi.n	2f32 <vscan+0x132>
    2f48:	f852 eb04 	ldr.w	lr, [r2], #4
    2f4c:	3401      	adds	r4, #1
    2f4e:	f8ae 5000 	strh.w	r5, [lr]
    2f52:	7830      	ldrb	r0, [r6, #0]
    2f54:	4633      	mov	r3, r6
    2f56:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
    2f5a:	f1b8 0f09 	cmp.w	r8, #9
    2f5e:	f106 0601 	add.w	r6, r6, #1
    2f62:	f63f af5b 	bhi.w	2e1c <vscan+0x1c>
    2f66:	f8be 3000 	ldrh.w	r3, [lr]
    2f6a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2f6e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    2f72:	3830      	subs	r0, #48	; 0x30
    2f74:	f8ae 0000 	strh.w	r0, [lr]
    2f78:	e7eb      	b.n	2f52 <vscan+0x152>
		    case 'x': scanx (word); break;
    2f7a:	f1be 0f00 	cmp.w	lr, #0
    2f7e:	f43f af60 	beq.w	2e42 <vscan+0x42>
    2f82:	f893 e000 	ldrb.w	lr, [r3]
    2f86:	461e      	mov	r6, r3
    2f88:	f1ae 0030 	sub.w	r0, lr, #48	; 0x30
    2f8c:	2809      	cmp	r0, #9
    2f8e:	f103 0301 	add.w	r3, r3, #1
    2f92:	d904      	bls.n	2f9e <vscan+0x19e>
    2f94:	f02e 0020 	bic.w	r0, lr, #32
    2f98:	3841      	subs	r0, #65	; 0x41
    2f9a:	2805      	cmp	r0, #5
    2f9c:	d8ed      	bhi.n	2f7a <vscan+0x17a>
    2f9e:	f852 eb04 	ldr.w	lr, [r2], #4
    2fa2:	3401      	adds	r4, #1
    2fa4:	f8ae 5000 	strh.w	r5, [lr]
    2fa8:	f106 0805 	add.w	r8, r6, #5
    2fac:	f896 9000 	ldrb.w	r9, [r6]
    2fb0:	4633      	mov	r3, r6
    2fb2:	f1a9 0030 	sub.w	r0, r9, #48	; 0x30
    2fb6:	b2c0      	uxtb	r0, r0
    2fb8:	2809      	cmp	r0, #9
    2fba:	f106 0601 	add.w	r6, r6, #1
    2fbe:	f240 80de 	bls.w	317e <vscan+0x37e>
    2fc2:	f029 0020 	bic.w	r0, r9, #32
    2fc6:	3841      	subs	r0, #65	; 0x41
    2fc8:	2805      	cmp	r0, #5
    2fca:	f63f af27 	bhi.w	2e1c <vscan+0x1c>
    2fce:	4546      	cmp	r6, r8
    2fd0:	f43f af24 	beq.w	2e1c <vscan+0x1c>
    2fd4:	f1a9 0361 	sub.w	r3, r9, #97	; 0x61
    2fd8:	2b05      	cmp	r3, #5
    2fda:	bf94      	ite	ls
    2fdc:	f1a9 0057 	subls.w	r0, r9, #87	; 0x57
    2fe0:	f1a9 0037 	subhi.w	r0, r9, #55	; 0x37
    2fe4:	b2c0      	uxtb	r0, r0
    2fe6:	f8be 3000 	ldrh.w	r3, [lr]
    2fea:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
    2fee:	f8ae 0000 	strh.w	r0, [lr]
    2ff2:	e7db      	b.n	2fac <vscan+0x1ac>
			switch (*fmt++) {
    2ff4:	78b0      	ldrb	r0, [r6, #2]
    2ff6:	1cf1      	adds	r1, r6, #3
    2ff8:	2875      	cmp	r0, #117	; 0x75
    2ffa:	d07d      	beq.n	30f8 <vscan+0x2f8>
    2ffc:	d831      	bhi.n	3062 <vscan+0x262>
    2ffe:	2800      	cmp	r0, #0
    3000:	f43f af1f 	beq.w	2e42 <vscan+0x42>
    3004:	2864      	cmp	r0, #100	; 0x64
    3006:	f47f af09 	bne.w	2e1c <vscan+0x1c>
    300a:	4698      	mov	r8, r3
		    	    case 'd': scani (lword); break;
    300c:	f813 6b01 	ldrb.w	r6, [r3], #1
    3010:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
    3014:	2809      	cmp	r0, #9
    3016:	d962      	bls.n	30de <vscan+0x2de>
    3018:	2e2d      	cmp	r6, #45	; 0x2d
    301a:	d001      	beq.n	3020 <vscan+0x220>
    301c:	2e2b      	cmp	r6, #43	; 0x2b
    301e:	d15b      	bne.n	30d8 <vscan+0x2d8>
    3020:	7818      	ldrb	r0, [r3, #0]
    3022:	4698      	mov	r8, r3
    3024:	3830      	subs	r0, #48	; 0x30
    3026:	2809      	cmp	r0, #9
    3028:	d8ef      	bhi.n	300a <vscan+0x20a>
    302a:	3e2d      	subs	r6, #45	; 0x2d
    302c:	4270      	negs	r0, r6
    302e:	4170      	adcs	r0, r6
    3030:	f852 eb04 	ldr.w	lr, [r2], #4
    3034:	3401      	adds	r4, #1
    3036:	f8ce 5000 	str.w	r5, [lr]
    303a:	f898 6000 	ldrb.w	r6, [r8]
    303e:	4643      	mov	r3, r8
    3040:	3e30      	subs	r6, #48	; 0x30
    3042:	fa5f f986 	uxtb.w	r9, r6
    3046:	f1b9 0f09 	cmp.w	r9, #9
    304a:	f108 0801 	add.w	r8, r8, #1
    304e:	d948      	bls.n	30e2 <vscan+0x2e2>
    3050:	2800      	cmp	r0, #0
    3052:	f47f aee3 	bne.w	2e1c <vscan+0x1c>
    3056:	f8de 0000 	ldr.w	r0, [lr]
    305a:	4240      	negs	r0, r0
    305c:	f8ce 0000 	str.w	r0, [lr]
    3060:	e6dc      	b.n	2e1c <vscan+0x1c>
    3062:	2878      	cmp	r0, #120	; 0x78
    3064:	f47f aeda 	bne.w	2e1c <vscan+0x1c>
		    	    case 'x': scanx (lword); break;
    3068:	f893 e000 	ldrb.w	lr, [r3]
    306c:	461e      	mov	r6, r3
    306e:	f1ae 0030 	sub.w	r0, lr, #48	; 0x30
    3072:	2809      	cmp	r0, #9
    3074:	f103 0301 	add.w	r3, r3, #1
    3078:	d904      	bls.n	3084 <vscan+0x284>
    307a:	f02e 0020 	bic.w	r0, lr, #32
    307e:	3841      	subs	r0, #65	; 0x41
    3080:	2805      	cmp	r0, #5
    3082:	d85a      	bhi.n	313a <vscan+0x33a>
    3084:	f852 eb04 	ldr.w	lr, [r2], #4
    3088:	3401      	adds	r4, #1
    308a:	f8ce 5000 	str.w	r5, [lr]
    308e:	f106 0809 	add.w	r8, r6, #9
    3092:	f896 9000 	ldrb.w	r9, [r6]
    3096:	4633      	mov	r3, r6
    3098:	f1a9 0030 	sub.w	r0, r9, #48	; 0x30
    309c:	b2c0      	uxtb	r0, r0
    309e:	2809      	cmp	r0, #9
    30a0:	f106 0601 	add.w	r6, r6, #1
    30a4:	d96f      	bls.n	3186 <vscan+0x386>
    30a6:	f029 0020 	bic.w	r0, r9, #32
    30aa:	3841      	subs	r0, #65	; 0x41
    30ac:	2805      	cmp	r0, #5
    30ae:	f63f aeb5 	bhi.w	2e1c <vscan+0x1c>
    30b2:	4546      	cmp	r6, r8
    30b4:	f43f aeb2 	beq.w	2e1c <vscan+0x1c>
    30b8:	f1a9 0361 	sub.w	r3, r9, #97	; 0x61
    30bc:	2b05      	cmp	r3, #5
    30be:	bf94      	ite	ls
    30c0:	f1a9 0057 	subls.w	r0, r9, #87	; 0x57
    30c4:	f1a9 0037 	subhi.w	r0, r9, #55	; 0x37
    30c8:	b2c0      	uxtb	r0, r0
    30ca:	f8de 3000 	ldr.w	r3, [lr]
    30ce:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
    30d2:	f8ce 0000 	str.w	r0, [lr]
    30d6:	e7dc      	b.n	3092 <vscan+0x292>
		    	    case 'd': scani (lword); break;
    30d8:	2e00      	cmp	r6, #0
    30da:	d196      	bne.n	300a <vscan+0x20a>
    30dc:	e6b1      	b.n	2e42 <vscan+0x42>
    30de:	2000      	movs	r0, #0
    30e0:	e7a6      	b.n	3030 <vscan+0x230>
    30e2:	f8de 3000 	ldr.w	r3, [lr]
    30e6:	b2b6      	uxth	r6, r6
    30e8:	437b      	muls	r3, r7
    30ea:	1b9e      	subs	r6, r3, r6
    30ec:	f8ce 6000 	str.w	r6, [lr]
    30f0:	e7a3      	b.n	303a <vscan+0x23a>
		    	    case 'u': scanu (lword); break;
    30f2:	2800      	cmp	r0, #0
    30f4:	f43f aea5 	beq.w	2e42 <vscan+0x42>
    30f8:	7818      	ldrb	r0, [r3, #0]
    30fa:	461e      	mov	r6, r3
    30fc:	f1a0 0e30 	sub.w	lr, r0, #48	; 0x30
    3100:	f1be 0f09 	cmp.w	lr, #9
    3104:	f103 0301 	add.w	r3, r3, #1
    3108:	d8f3      	bhi.n	30f2 <vscan+0x2f2>
    310a:	f852 eb04 	ldr.w	lr, [r2], #4
    310e:	3401      	adds	r4, #1
    3110:	f8ce 5000 	str.w	r5, [lr]
    3114:	7830      	ldrb	r0, [r6, #0]
    3116:	4633      	mov	r3, r6
    3118:	3830      	subs	r0, #48	; 0x30
    311a:	fa5f f880 	uxtb.w	r8, r0
    311e:	f1b8 0f09 	cmp.w	r8, #9
    3122:	f106 0601 	add.w	r6, r6, #1
    3126:	f63f ae79 	bhi.w	2e1c <vscan+0x1c>
    312a:	f8de 3000 	ldr.w	r3, [lr]
    312e:	b280      	uxth	r0, r0
    3130:	fb07 0003 	mla	r0, r7, r3, r0
    3134:	f8ce 0000 	str.w	r0, [lr]
    3138:	e7ec      	b.n	3114 <vscan+0x314>
		    	    case 'x': scanx (lword); break;
    313a:	f1be 0f00 	cmp.w	lr, #0
    313e:	d193      	bne.n	3068 <vscan+0x268>
    3140:	e67f      	b.n	2e42 <vscan+0x42>
			if ((c = *buf++) == '\0')
    3142:	f813 0b01 	ldrb.w	r0, [r3], #1
    3146:	2800      	cmp	r0, #0
    3148:	f43f ae7b 	beq.w	2e42 <vscan+0x42>
			sap = va_arg (ap, char*);
    314c:	f852 6b04 	ldr.w	r6, [r2], #4
			nc++;
    3150:	3401      	adds	r4, #1
			*sap = c;
    3152:	7030      	strb	r0, [r6, #0]
			break;
    3154:	e662      	b.n	2e1c <vscan+0x1c>
			while (isspace (*buf)) buf++;
    3156:	fa2c fe0e 	lsr.w	lr, ip, lr
    315a:	f01e 0f01 	tst.w	lr, #1
    315e:	f47f ae7a 	bne.w	2e56 <vscan+0x56>
    3162:	e687      	b.n	2e74 <vscan+0x74>
						*sap++ = *buf++;
    3164:	f80e 3b01 	strb.w	r3, [lr], #1
    3168:	e68a      	b.n	2e80 <vscan+0x80>
			while (isspace (*buf)) buf++;
    316a:	fa2c f000 	lsr.w	r0, ip, r0
    316e:	07c0      	lsls	r0, r0, #31
    3170:	f53f ae95 	bmi.w	2e9e <vscan+0x9e>
    3174:	e6a2      	b.n	2ebc <vscan+0xbc>
		return 0;
    3176:	4604      	mov	r4, r0
    3178:	e663      	b.n	2e42 <vscan+0x42>
    317a:	460c      	mov	r4, r1
    317c:	e661      	b.n	2e42 <vscan+0x42>
		    case 'x': scanx (word); break;
    317e:	4546      	cmp	r6, r8
    3180:	f47f af31 	bne.w	2fe6 <vscan+0x1e6>
    3184:	e64a      	b.n	2e1c <vscan+0x1c>
		    	    case 'x': scanx (lword); break;
    3186:	4546      	cmp	r6, r8
    3188:	d19f      	bne.n	30ca <vscan+0x2ca>
    318a:	e647      	b.n	2e1c <vscan+0x1c>
    318c:	00800013 	addeq	r0, r0, r3, lsl r0

00003190 <SafeHapiVoid>:
    3190:	b570      	push	{r4, r5, r6, lr}
    3192:	4606      	mov	r6, r0
    3194:	f000 f844 	bl	3220 <NOROM_CPUcpsid>
    3198:	4605      	mov	r5, r0
    319a:	4c06      	ldr	r4, [pc, #24]	; (31b4 <SafeHapiVoid+0x24>)
    319c:	6823      	ldr	r3, [r4, #0]
    319e:	2b00      	cmp	r3, #0
    31a0:	d0fb      	beq.n	319a <SafeHapiVoid+0xa>
    31a2:	47b0      	blx	r6
    31a4:	2301      	movs	r3, #1
    31a6:	6023      	str	r3, [r4, #0]
    31a8:	b91d      	cbnz	r5, 31b2 <SafeHapiVoid+0x22>
    31aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    31ae:	f000 b83b 	b.w	3228 <NOROM_CPUcpsie>
    31b2:	bd70      	pop	{r4, r5, r6, pc}
    31b4:	400c8000 	andmi	r8, ip, r0

000031b8 <NOROM_AONBatMonTemperatureGetDegC>:
    31b8:	4b08      	ldr	r3, [pc, #32]	; (31dc <NOROM_AONBatMonTemperatureGetDegC+0x24>)
    31ba:	6818      	ldr	r0, [r3, #0]
    31bc:	4b08      	ldr	r3, [pc, #32]	; (31e0 <NOROM_AONBatMonTemperatureGetDegC+0x28>)
    31be:	7819      	ldrb	r1, [r3, #0]
    31c0:	4b08      	ldr	r3, [pc, #32]	; (31e4 <NOROM_AONBatMonTemperatureGetDegC+0x2c>)
    31c2:	681a      	ldr	r2, [r3, #0]
    31c4:	f340 0310 	sbfx	r3, r0, #0, #17
    31c8:	f5a2 7240 	sub.w	r2, r2, #768	; 0x300
    31cc:	b248      	sxtb	r0, r1
    31ce:	4350      	muls	r0, r2
    31d0:	eba3 1020 	sub.w	r0, r3, r0, asr #4
    31d4:	3080      	adds	r0, #128	; 0x80
    31d6:	1200      	asrs	r0, r0, #8
    31d8:	4770      	bx	lr
    31da:	bf00      	nop
    31dc:	40095030 	andmi	r5, r9, r0, lsr r0
    31e0:	5000130c 	andpl	r1, r0, ip, lsl #6
    31e4:	40095028 	andmi	r5, r9, r8, lsr #32

000031e8 <NOROM_AONRTCCurrentCompareValueGet>:
    31e8:	4a05      	ldr	r2, [pc, #20]	; (3200 <NOROM_AONRTCCurrentCompareValueGet+0x18>)
    31ea:	4906      	ldr	r1, [pc, #24]	; (3204 <NOROM_AONRTCCurrentCompareValueGet+0x1c>)
    31ec:	6813      	ldr	r3, [r2, #0]
    31ee:	6808      	ldr	r0, [r1, #0]
    31f0:	6812      	ldr	r2, [r2, #0]
    31f2:	4293      	cmp	r3, r2
    31f4:	d1f8      	bne.n	31e8 <NOROM_AONRTCCurrentCompareValueGet>
    31f6:	041b      	lsls	r3, r3, #16
    31f8:	ea43 4010 	orr.w	r0, r3, r0, lsr #16
    31fc:	4770      	bx	lr
    31fe:	bf00      	nop
    3200:	40092008 	andmi	r2, r9, r8
    3204:	4009200c 	andmi	r2, r9, ip

00003208 <NOROM_AONRTCCurrent64BitValueGet>:
    3208:	4b03      	ldr	r3, [pc, #12]	; (3218 <NOROM_AONRTCCurrent64BitValueGet+0x10>)
    320a:	4904      	ldr	r1, [pc, #16]	; (321c <NOROM_AONRTCCurrent64BitValueGet+0x14>)
    320c:	681a      	ldr	r2, [r3, #0]
    320e:	6808      	ldr	r0, [r1, #0]
    3210:	6819      	ldr	r1, [r3, #0]
    3212:	4291      	cmp	r1, r2
    3214:	d1f8      	bne.n	3208 <NOROM_AONRTCCurrent64BitValueGet>
    3216:	4770      	bx	lr
    3218:	40092008 	andmi	r2, r9, r8
    321c:	4009200c 	andmi	r2, r9, ip

00003220 <NOROM_CPUcpsid>:
    3220:	f3ef 8010 	mrs	r0, PRIMASK
    3224:	b672      	cpsid	i
    3226:	4770      	bx	lr

00003228 <NOROM_CPUcpsie>:
    3228:	f3ef 8010 	mrs	r0, PRIMASK
    322c:	b662      	cpsie	i
    322e:	4770      	bx	lr

00003230 <NOROM_OSCClockSourceSet>:
    3230:	b573      	push	{r0, r1, r4, r5, r6, lr}
    3232:	460c      	mov	r4, r1
    3234:	07c1      	lsls	r1, r0, #31
    3236:	4605      	mov	r5, r0
    3238:	d509      	bpl.n	324e <NOROM_OSCClockSourceSet+0x1e>
    323a:	4b12      	ldr	r3, [pc, #72]	; (3284 <NOROM_OSCClockSourceSet+0x54>)
    323c:	b2a2      	uxth	r2, r4
    323e:	681b      	ldr	r3, [r3, #0]
    3240:	2100      	movs	r1, #0
    3242:	9200      	str	r2, [sp, #0]
    3244:	685e      	ldr	r6, [r3, #4]
    3246:	4810      	ldr	r0, [pc, #64]	; (3288 <NOROM_OSCClockSourceSet+0x58>)
    3248:	2201      	movs	r2, #1
    324a:	460b      	mov	r3, r1
    324c:	47b0      	blx	r6
    324e:	07aa      	lsls	r2, r5, #30
    3250:	d509      	bpl.n	3266 <NOROM_OSCClockSourceSet+0x36>
    3252:	4b0c      	ldr	r3, [pc, #48]	; (3284 <NOROM_OSCClockSourceSet+0x54>)
    3254:	b2a2      	uxth	r2, r4
    3256:	681b      	ldr	r3, [r3, #0]
    3258:	9200      	str	r2, [sp, #0]
    325a:	685e      	ldr	r6, [r3, #4]
    325c:	480a      	ldr	r0, [pc, #40]	; (3288 <NOROM_OSCClockSourceSet+0x58>)
    325e:	2100      	movs	r1, #0
    3260:	2202      	movs	r2, #2
    3262:	2301      	movs	r3, #1
    3264:	47b0      	blx	r6
    3266:	076b      	lsls	r3, r5, #29
    3268:	d509      	bpl.n	327e <NOROM_OSCClockSourceSet+0x4e>
    326a:	4b06      	ldr	r3, [pc, #24]	; (3284 <NOROM_OSCClockSourceSet+0x54>)
    326c:	b2a4      	uxth	r4, r4
    326e:	681b      	ldr	r3, [r3, #0]
    3270:	9400      	str	r4, [sp, #0]
    3272:	685c      	ldr	r4, [r3, #4]
    3274:	4804      	ldr	r0, [pc, #16]	; (3288 <NOROM_OSCClockSourceSet+0x58>)
    3276:	2100      	movs	r1, #0
    3278:	220c      	movs	r2, #12
    327a:	2302      	movs	r3, #2
    327c:	47a0      	blx	r4
    327e:	b002      	add	sp, #8
    3280:	bd70      	pop	{r4, r5, r6, pc}
    3282:	bf00      	nop
    3284:	100001a4 	andne	r0, r0, r4, lsr #3
    3288:	400ca000 	andmi	sl, ip, r0

0000328c <NOROM_OSCClockSourceGet>:
    328c:	b510      	push	{r4, lr}
    328e:	4b08      	ldr	r3, [pc, #32]	; (32b0 <NOROM_OSCClockSourceGet+0x24>)
    3290:	2804      	cmp	r0, #4
    3292:	681b      	ldr	r3, [r3, #0]
    3294:	f04f 0134 	mov.w	r1, #52	; 0x34
    3298:	68dc      	ldr	r4, [r3, #12]
    329a:	bf07      	ittee	eq
    329c:	f04f 42c0 	moveq.w	r2, #1610612736	; 0x60000000
    32a0:	231d      	moveq	r3, #29
    32a2:	f04f 5280 	movne.w	r2, #268435456	; 0x10000000
    32a6:	231c      	movne	r3, #28
    32a8:	4802      	ldr	r0, [pc, #8]	; (32b4 <NOROM_OSCClockSourceGet+0x28>)
    32aa:	47a0      	blx	r4
    32ac:	bd10      	pop	{r4, pc}
    32ae:	bf00      	nop
    32b0:	100001a4 	andne	r0, r0, r4, lsr #3
    32b4:	400ca000 	andmi	sl, ip, r0

000032b8 <NOROM_OSCHF_TurnOnXosc>:
    32b8:	b508      	push	{r3, lr}
    32ba:	2003      	movs	r0, #3
    32bc:	2101      	movs	r1, #1
    32be:	f7ff ffb7 	bl	3230 <NOROM_OSCClockSourceSet>
    32c2:	f7ff ff91 	bl	31e8 <NOROM_AONRTCCurrentCompareValueGet>
    32c6:	4b01      	ldr	r3, [pc, #4]	; (32cc <NOROM_OSCHF_TurnOnXosc+0x14>)
    32c8:	6098      	str	r0, [r3, #8]
    32ca:	bd08      	pop	{r3, pc}
    32cc:	20000610 	andcs	r0, r0, r0, lsl r6

000032d0 <NOROM_OSCHF_AttemptToSwitchToXosc>:
    32d0:	b510      	push	{r4, lr}
    32d2:	2001      	movs	r0, #1
    32d4:	f7ff ffda 	bl	328c <NOROM_OSCClockSourceGet>
    32d8:	2801      	cmp	r0, #1
    32da:	d01c      	beq.n	3316 <NOROM_OSCHF_AttemptToSwitchToXosc+0x46>
    32dc:	4b0f      	ldr	r3, [pc, #60]	; (331c <NOROM_OSCHF_AttemptToSwitchToXosc+0x4c>)
    32de:	4810      	ldr	r0, [pc, #64]	; (3320 <NOROM_OSCHF_AttemptToSwitchToXosc+0x50>)
    32e0:	681b      	ldr	r3, [r3, #0]
    32e2:	2134      	movs	r1, #52	; 0x34
    32e4:	68dc      	ldr	r4, [r3, #12]
    32e6:	2201      	movs	r2, #1
    32e8:	2300      	movs	r3, #0
    32ea:	47a0      	blx	r4
    32ec:	b1a0      	cbz	r0, 3318 <NOROM_OSCHF_AttemptToSwitchToXosc+0x48>
    32ee:	4b0d      	ldr	r3, [pc, #52]	; (3324 <NOROM_OSCHF_AttemptToSwitchToXosc+0x54>)
    32f0:	6b98      	ldr	r0, [r3, #56]	; 0x38
    32f2:	f7ff ff4d 	bl	3190 <SafeHapiVoid>
    32f6:	f7ff ff77 	bl	31e8 <NOROM_AONRTCCurrentCompareValueGet>
    32fa:	4a0b      	ldr	r2, [pc, #44]	; (3328 <NOROM_OSCHF_AttemptToSwitchToXosc+0x58>)
    32fc:	6893      	ldr	r3, [r2, #8]
    32fe:	60d0      	str	r0, [r2, #12]
    3300:	1ac0      	subs	r0, r0, r3
    3302:	4b0a      	ldr	r3, [pc, #40]	; (332c <NOROM_OSCHF_AttemptToSwitchToXosc+0x5c>)
    3304:	4358      	muls	r0, r3
    3306:	6813      	ldr	r3, [r2, #0]
    3308:	0c00      	lsrs	r0, r0, #16
    330a:	eba3 0393 	sub.w	r3, r3, r3, lsr #2
    330e:	4283      	cmp	r3, r0
    3310:	bf94      	ite	ls
    3312:	6010      	strls	r0, [r2, #0]
    3314:	6013      	strhi	r3, [r2, #0]
    3316:	2001      	movs	r0, #1
    3318:	bd10      	pop	{r4, pc}
    331a:	bf00      	nop
    331c:	100001a4 	andne	r0, r0, r4, lsr #3
    3320:	400ca000 	andmi	sl, ip, r0
    3324:	10000048 	andne	r0, r0, r8, asr #32
    3328:	20000610 	andcs	r0, r0, r0, lsl r6
    332c:	000f4240 	andeq	r4, pc, r0, asr #4

00003330 <NOROM_OSCHF_SwitchToRcOscTurnOffXosc>:
    3330:	b510      	push	{r4, lr}
    3332:	2003      	movs	r0, #3
    3334:	2100      	movs	r1, #0
    3336:	f7ff ff7b 	bl	3230 <NOROM_OSCClockSourceSet>
    333a:	2001      	movs	r0, #1
    333c:	f7ff ffa6 	bl	328c <NOROM_OSCClockSourceGet>
    3340:	b118      	cbz	r0, 334a <NOROM_OSCHF_SwitchToRcOscTurnOffXosc+0x1a>
    3342:	4b06      	ldr	r3, [pc, #24]	; (335c <NOROM_OSCHF_SwitchToRcOscTurnOffXosc+0x2c>)
    3344:	6b98      	ldr	r0, [r3, #56]	; 0x38
    3346:	f7ff ff23 	bl	3190 <SafeHapiVoid>
    334a:	f7ff ff4d 	bl	31e8 <NOROM_AONRTCCurrentCompareValueGet>
    334e:	4c04      	ldr	r4, [pc, #16]	; (3360 <NOROM_OSCHF_SwitchToRcOscTurnOffXosc+0x30>)
    3350:	6060      	str	r0, [r4, #4]
    3352:	f7ff ff31 	bl	31b8 <NOROM_AONBatMonTemperatureGetDegC>
    3356:	6120      	str	r0, [r4, #16]
    3358:	bd10      	pop	{r4, pc}
    335a:	bf00      	nop
    335c:	10000048 	andne	r0, r0, r8, asr #32
    3360:	20000610 	andcs	r0, r0, r0, lsl r6

00003364 <NOROM_RFCDoorbellSendTo>:
    3364:	4a07      	ldr	r2, [pc, #28]	; (3384 <NOROM_RFCDoorbellSendTo+0x20>)
    3366:	6811      	ldr	r1, [r2, #0]
    3368:	2900      	cmp	r1, #0
    336a:	d1fb      	bne.n	3364 <NOROM_RFCDoorbellSendTo>
    336c:	4b06      	ldr	r3, [pc, #24]	; (3388 <NOROM_RFCDoorbellSendTo+0x24>)
    336e:	6019      	str	r1, [r3, #0]
    3370:	6010      	str	r0, [r2, #0]
    3372:	681a      	ldr	r2, [r3, #0]
    3374:	2a00      	cmp	r2, #0
    3376:	d0fc      	beq.n	3372 <NOROM_RFCDoorbellSendTo+0xe>
    3378:	4b03      	ldr	r3, [pc, #12]	; (3388 <NOROM_RFCDoorbellSendTo+0x24>)
    337a:	2200      	movs	r2, #0
    337c:	601a      	str	r2, [r3, #0]
    337e:	f853 0c18 	ldr.w	r0, [r3, #-24]
    3382:	4770      	bx	lr
    3384:	40041000 	andmi	r1, r4, r0
    3388:	4004101c 	andmi	r1, r4, ip, lsl r0

0000338c <NOROM_RFCSynthPowerDown>:
    338c:	4a0e      	ldr	r2, [pc, #56]	; (33c8 <NOROM_RFCSynthPowerDown+0x3c>)
    338e:	490f      	ldr	r1, [pc, #60]	; (33cc <NOROM_RFCSynthPowerDown+0x40>)
    3390:	6813      	ldr	r3, [r2, #0]
    3392:	2050      	movs	r0, #80	; 0x50
    3394:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    3398:	f023 0302 	bic.w	r3, r3, #2
    339c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    33a0:	6013      	str	r3, [r2, #0]
    33a2:	4b0b      	ldr	r3, [pc, #44]	; (33d0 <NOROM_RFCSynthPowerDown+0x44>)
    33a4:	2203      	movs	r2, #3
    33a6:	601a      	str	r2, [r3, #0]
    33a8:	f241 0330 	movw	r3, #4144	; 0x1030
    33ac:	4a09      	ldr	r2, [pc, #36]	; (33d4 <NOROM_RFCSynthPowerDown+0x48>)
    33ae:	600b      	str	r3, [r1, #0]
    33b0:	2301      	movs	r3, #1
    33b2:	6013      	str	r3, [r2, #0]
    33b4:	6008      	str	r0, [r1, #0]
    33b6:	f44f 60ca 	mov.w	r0, #1616	; 0x650
    33ba:	6013      	str	r3, [r2, #0]
    33bc:	6008      	str	r0, [r1, #0]
    33be:	6013      	str	r3, [r2, #0]
    33c0:	f842 3c0c 	str.w	r3, [r2, #-12]
    33c4:	4770      	bx	lr
    33c6:	bf00      	nop
    33c8:	60040000 	andvs	r0, r4, r0
    33cc:	40044114 	andmi	r4, r4, r4, lsl r1
    33d0:	40044108 	andmi	r4, r4, r8, lsl #2
    33d4:	4004410c 	andmi	r4, r4, ip, lsl #2

000033d8 <NOROM_RFCRfTrimRead>:
    33d8:	f640 0202 	movw	r2, #2050	; 0x802
    33dc:	8803      	ldrh	r3, [r0, #0]
    33de:	4293      	cmp	r3, r2
    33e0:	d006      	beq.n	33f0 <NOROM_RFCRfTrimRead+0x18>
    33e2:	f643 0207 	movw	r2, #14343	; 0x3807
    33e6:	4293      	cmp	r3, r2
    33e8:	d104      	bne.n	33f4 <NOROM_RFCRfTrimRead+0x1c>
    33ea:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
    33ee:	e002      	b.n	33f6 <NOROM_RFCRfTrimRead+0x1e>
    33f0:	7bc3      	ldrb	r3, [r0, #15]
    33f2:	e000      	b.n	33f6 <NOROM_RFCRfTrimRead+0x1e>
    33f4:	2300      	movs	r3, #0
    33f6:	4a36      	ldr	r2, [pc, #216]	; (34d0 <NOROM_RFCRfTrimRead+0xf8>)
    33f8:	2b0a      	cmp	r3, #10
    33fa:	6812      	ldr	r2, [r2, #0]
    33fc:	600a      	str	r2, [r1, #0]
    33fe:	d031      	beq.n	3464 <NOROM_RFCRfTrimRead+0x8c>
    3400:	dc10      	bgt.n	3424 <NOROM_RFCRfTrimRead+0x4c>
    3402:	2b05      	cmp	r3, #5
    3404:	d021      	beq.n	344a <NOROM_RFCRfTrimRead+0x72>
    3406:	2b06      	cmp	r3, #6
    3408:	d153      	bne.n	34b2 <NOROM_RFCRfTrimRead+0xda>
    340a:	4b32      	ldr	r3, [pc, #200]	; (34d4 <NOROM_RFCRfTrimRead+0xfc>)
    340c:	681b      	ldr	r3, [r3, #0]
    340e:	604b      	str	r3, [r1, #4]
    3410:	4b31      	ldr	r3, [pc, #196]	; (34d8 <NOROM_RFCRfTrimRead+0x100>)
    3412:	681b      	ldr	r3, [r3, #0]
    3414:	608b      	str	r3, [r1, #8]
    3416:	4b31      	ldr	r3, [pc, #196]	; (34dc <NOROM_RFCRfTrimRead+0x104>)
    3418:	681b      	ldr	r3, [r3, #0]
    341a:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    341e:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
    3422:	e052      	b.n	34ca <NOROM_RFCRfTrimRead+0xf2>
    3424:	2b0f      	cmp	r3, #15
    3426:	d02a      	beq.n	347e <NOROM_RFCRfTrimRead+0xa6>
    3428:	2b1e      	cmp	r3, #30
    342a:	d035      	beq.n	3498 <NOROM_RFCRfTrimRead+0xc0>
    342c:	2b0c      	cmp	r3, #12
    342e:	d140      	bne.n	34b2 <NOROM_RFCRfTrimRead+0xda>
    3430:	4b2b      	ldr	r3, [pc, #172]	; (34e0 <NOROM_RFCRfTrimRead+0x108>)
    3432:	681b      	ldr	r3, [r3, #0]
    3434:	604b      	str	r3, [r1, #4]
    3436:	4b2b      	ldr	r3, [pc, #172]	; (34e4 <NOROM_RFCRfTrimRead+0x10c>)
    3438:	681b      	ldr	r3, [r3, #0]
    343a:	608b      	str	r3, [r1, #8]
    343c:	4b2a      	ldr	r3, [pc, #168]	; (34e8 <NOROM_RFCRfTrimRead+0x110>)
    343e:	681b      	ldr	r3, [r3, #0]
    3440:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3444:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
    3448:	e03f      	b.n	34ca <NOROM_RFCRfTrimRead+0xf2>
    344a:	4b28      	ldr	r3, [pc, #160]	; (34ec <NOROM_RFCRfTrimRead+0x114>)
    344c:	681b      	ldr	r3, [r3, #0]
    344e:	604b      	str	r3, [r1, #4]
    3450:	4b27      	ldr	r3, [pc, #156]	; (34f0 <NOROM_RFCRfTrimRead+0x118>)
    3452:	681b      	ldr	r3, [r3, #0]
    3454:	608b      	str	r3, [r1, #8]
    3456:	4b27      	ldr	r3, [pc, #156]	; (34f4 <NOROM_RFCRfTrimRead+0x11c>)
    3458:	681b      	ldr	r3, [r3, #0]
    345a:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    345e:	f043 5320 	orr.w	r3, r3, #671088640	; 0x28000000
    3462:	e032      	b.n	34ca <NOROM_RFCRfTrimRead+0xf2>
    3464:	4b24      	ldr	r3, [pc, #144]	; (34f8 <NOROM_RFCRfTrimRead+0x120>)
    3466:	681b      	ldr	r3, [r3, #0]
    3468:	604b      	str	r3, [r1, #4]
    346a:	4b24      	ldr	r3, [pc, #144]	; (34fc <NOROM_RFCRfTrimRead+0x124>)
    346c:	681b      	ldr	r3, [r3, #0]
    346e:	608b      	str	r3, [r1, #8]
    3470:	4b23      	ldr	r3, [pc, #140]	; (3500 <NOROM_RFCRfTrimRead+0x128>)
    3472:	681b      	ldr	r3, [r3, #0]
    3474:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3478:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
    347c:	e025      	b.n	34ca <NOROM_RFCRfTrimRead+0xf2>
    347e:	4b21      	ldr	r3, [pc, #132]	; (3504 <NOROM_RFCRfTrimRead+0x12c>)
    3480:	681b      	ldr	r3, [r3, #0]
    3482:	604b      	str	r3, [r1, #4]
    3484:	4b20      	ldr	r3, [pc, #128]	; (3508 <NOROM_RFCRfTrimRead+0x130>)
    3486:	681b      	ldr	r3, [r3, #0]
    3488:	608b      	str	r3, [r1, #8]
    348a:	4b20      	ldr	r3, [pc, #128]	; (350c <NOROM_RFCRfTrimRead+0x134>)
    348c:	681b      	ldr	r3, [r3, #0]
    348e:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3492:	f043 43f0 	orr.w	r3, r3, #2013265920	; 0x78000000
    3496:	e018      	b.n	34ca <NOROM_RFCRfTrimRead+0xf2>
    3498:	4b1d      	ldr	r3, [pc, #116]	; (3510 <NOROM_RFCRfTrimRead+0x138>)
    349a:	681b      	ldr	r3, [r3, #0]
    349c:	604b      	str	r3, [r1, #4]
    349e:	4b1d      	ldr	r3, [pc, #116]	; (3514 <NOROM_RFCRfTrimRead+0x13c>)
    34a0:	681b      	ldr	r3, [r3, #0]
    34a2:	608b      	str	r3, [r1, #8]
    34a4:	4b1c      	ldr	r3, [pc, #112]	; (3518 <NOROM_RFCRfTrimRead+0x140>)
    34a6:	681b      	ldr	r3, [r3, #0]
    34a8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    34ac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
    34b0:	e00b      	b.n	34ca <NOROM_RFCRfTrimRead+0xf2>
    34b2:	4b1a      	ldr	r3, [pc, #104]	; (351c <NOROM_RFCRfTrimRead+0x144>)
    34b4:	681b      	ldr	r3, [r3, #0]
    34b6:	604b      	str	r3, [r1, #4]
    34b8:	4b19      	ldr	r3, [pc, #100]	; (3520 <NOROM_RFCRfTrimRead+0x148>)
    34ba:	681b      	ldr	r3, [r3, #0]
    34bc:	608b      	str	r3, [r1, #8]
    34be:	4b19      	ldr	r3, [pc, #100]	; (3524 <NOROM_RFCRfTrimRead+0x14c>)
    34c0:	681b      	ldr	r3, [r3, #0]
    34c2:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    34c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    34ca:	60cb      	str	r3, [r1, #12]
    34cc:	4770      	bx	lr
    34ce:	bf00      	nop
    34d0:	5000134c 	andpl	r1, r0, ip, asr #6
    34d4:	500010c8 	andpl	r1, r0, r8, asr #1
    34d8:	500010e0 	andpl	r1, r0, r0, ror #1
    34dc:	500010f8 	strdpl	r1, [r0], -r8
    34e0:	500010d0 	ldrdpl	r1, [r0], -r0
    34e4:	500010e8 	andpl	r1, r0, r8, ror #1
    34e8:	50001100 	andpl	r1, r0, r0, lsl #2
    34ec:	500010c4 	andpl	r1, r0, r4, asr #1
    34f0:	500010dc 	ldrdpl	r1, [r0], -ip
    34f4:	500010f4 	strdpl	r1, [r0], -r4
    34f8:	500010cc 	andpl	r1, r0, ip, asr #1
    34fc:	500010e4 	andpl	r1, r0, r4, ror #1
    3500:	500010fc 	strdpl	r1, [r0], -ip
    3504:	500010d4 	ldrdpl	r1, [r0], -r4
    3508:	500010ec 	andpl	r1, r0, ip, ror #1
    350c:	50001104 	andpl	r1, r0, r4, lsl #2
    3510:	500010d8 	ldrdpl	r1, [r0], -r8
    3514:	500010f0 	strdpl	r1, [r0], -r0
    3518:	50001108 	andpl	r1, r0, r8, lsl #2
    351c:	50001354 	andpl	r1, r0, r4, asr r3
    3520:	50001358 	andpl	r1, r0, r8, asr r3
    3524:	50001380 	andpl	r1, r0, r0, lsl #7

00003528 <NOROM_RFCRTrim>:
    3528:	f643 0206 	movw	r2, #14342	; 0x3806
    352c:	b570      	push	{r4, r5, r6, lr}
    352e:	8803      	ldrh	r3, [r0, #0]
    3530:	4293      	cmp	r3, r2
    3532:	d00a      	beq.n	354a <NOROM_RFCRTrim+0x22>
    3534:	f643 0207 	movw	r2, #14343	; 0x3807
    3538:	4293      	cmp	r3, r2
    353a:	d009      	beq.n	3550 <NOROM_RFCRTrim+0x28>
    353c:	f640 0202 	movw	r2, #2050	; 0x802
    3540:	4293      	cmp	r3, r2
    3542:	d16b      	bne.n	361c <NOROM_RFCRTrim+0xf4>
    3544:	7bc1      	ldrb	r1, [r0, #15]
    3546:	6943      	ldr	r3, [r0, #20]
    3548:	e005      	b.n	3556 <NOROM_RFCRTrim+0x2e>
    354a:	69c3      	ldr	r3, [r0, #28]
    354c:	2102      	movs	r1, #2
    354e:	e002      	b.n	3556 <NOROM_RFCRTrim+0x2e>
    3550:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
    3554:	69c3      	ldr	r3, [r0, #28]
    3556:	2b00      	cmp	r3, #0
    3558:	d060      	beq.n	361c <NOROM_RFCRTrim+0xf4>
    355a:	f103 0414 	add.w	r4, r3, #20
    355e:	f244 0538 	movw	r5, #16440	; 0x4038
    3562:	681a      	ldr	r2, [r3, #0]
    3564:	4618      	mov	r0, r3
    3566:	b296      	uxth	r6, r2
    3568:	42ae      	cmp	r6, r5
    356a:	f103 0304 	add.w	r3, r3, #4
    356e:	d103      	bne.n	3578 <NOROM_RFCRTrim+0x50>
    3570:	f3c2 4403 	ubfx	r4, r2, #16, #4
    3574:	b91c      	cbnz	r4, 357e <NOROM_RFCRTrim+0x56>
    3576:	bd70      	pop	{r4, r5, r6, pc}
    3578:	42a3      	cmp	r3, r4
    357a:	d1f0      	bne.n	355e <NOROM_RFCRTrim+0x36>
    357c:	bd70      	pop	{r4, r5, r6, pc}
    357e:	290a      	cmp	r1, #10
    3580:	d01d      	beq.n	35be <NOROM_RFCRTrim+0x96>
    3582:	dc06      	bgt.n	3592 <NOROM_RFCRTrim+0x6a>
    3584:	2905      	cmp	r1, #5
    3586:	d013      	beq.n	35b0 <NOROM_RFCRTrim+0x88>
    3588:	2906      	cmp	r1, #6
    358a:	d016      	beq.n	35ba <NOROM_RFCRTrim+0x92>
    358c:	2902      	cmp	r1, #2
    358e:	d11f      	bne.n	35d0 <NOROM_RFCRTrim+0xa8>
    3590:	e007      	b.n	35a2 <NOROM_RFCRTrim+0x7a>
    3592:	290f      	cmp	r1, #15
    3594:	d015      	beq.n	35c2 <NOROM_RFCRTrim+0x9a>
    3596:	291e      	cmp	r1, #30
    3598:	d015      	beq.n	35c6 <NOROM_RFCRTrim+0x9e>
    359a:	290c      	cmp	r1, #12
    359c:	d118      	bne.n	35d0 <NOROM_RFCRTrim+0xa8>
    359e:	4b20      	ldr	r3, [pc, #128]	; (3620 <NOROM_RFCRTrim+0xf8>)
    35a0:	e012      	b.n	35c8 <NOROM_RFCRTrim+0xa0>
    35a2:	4b20      	ldr	r3, [pc, #128]	; (3624 <NOROM_RFCRTrim+0xfc>)
    35a4:	681b      	ldr	r3, [r3, #0]
    35a6:	f3c3 4383 	ubfx	r3, r3, #18, #4
    35aa:	2b0f      	cmp	r3, #15
    35ac:	d12a      	bne.n	3604 <NOROM_RFCRTrim+0xdc>
    35ae:	e023      	b.n	35f8 <NOROM_RFCRTrim+0xd0>
    35b0:	4b1d      	ldr	r3, [pc, #116]	; (3628 <NOROM_RFCRTrim+0x100>)
    35b2:	681b      	ldr	r3, [r3, #0]
    35b4:	f3c3 2303 	ubfx	r3, r3, #8, #4
    35b8:	e02c      	b.n	3614 <NOROM_RFCRTrim+0xec>
    35ba:	4b1c      	ldr	r3, [pc, #112]	; (362c <NOROM_RFCRTrim+0x104>)
    35bc:	e004      	b.n	35c8 <NOROM_RFCRTrim+0xa0>
    35be:	4b1c      	ldr	r3, [pc, #112]	; (3630 <NOROM_RFCRTrim+0x108>)
    35c0:	e002      	b.n	35c8 <NOROM_RFCRTrim+0xa0>
    35c2:	4b1c      	ldr	r3, [pc, #112]	; (3634 <NOROM_RFCRTrim+0x10c>)
    35c4:	e000      	b.n	35c8 <NOROM_RFCRTrim+0xa0>
    35c6:	4b1c      	ldr	r3, [pc, #112]	; (3638 <NOROM_RFCRTrim+0x110>)
    35c8:	681b      	ldr	r3, [r3, #0]
    35ca:	f3c3 4383 	ubfx	r3, r3, #18, #4
    35ce:	e021      	b.n	3614 <NOROM_RFCRTrim+0xec>
    35d0:	4b14      	ldr	r3, [pc, #80]	; (3624 <NOROM_RFCRTrim+0xfc>)
    35d2:	681b      	ldr	r3, [r3, #0]
    35d4:	f3c3 4383 	ubfx	r3, r3, #18, #4
    35d8:	2b0f      	cmp	r3, #15
    35da:	d113      	bne.n	3604 <NOROM_RFCRTrim+0xdc>
    35dc:	3905      	subs	r1, #5
    35de:	2919      	cmp	r1, #25
    35e0:	d80a      	bhi.n	35f8 <NOROM_RFCRTrim+0xd0>
    35e2:	2301      	movs	r3, #1
    35e4:	fa03 f101 	lsl.w	r1, r3, r1
    35e8:	4b14      	ldr	r3, [pc, #80]	; (363c <NOROM_RFCRTrim+0x114>)
    35ea:	400b      	ands	r3, r1
    35ec:	b123      	cbz	r3, 35f8 <NOROM_RFCRTrim+0xd0>
    35ee:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
    35f2:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
    35f6:	e003      	b.n	3600 <NOROM_RFCRTrim+0xd8>
    35f8:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
    35fc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
    3600:	6002      	str	r2, [r0, #0]
    3602:	bd70      	pop	{r4, r5, r6, pc}
    3604:	429c      	cmp	r4, r3
    3606:	d209      	bcs.n	361c <NOROM_RFCRTrim+0xf4>
    3608:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
    360c:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    3610:	6003      	str	r3, [r0, #0]
    3612:	bd70      	pop	{r4, r5, r6, pc}
    3614:	2b0f      	cmp	r3, #15
    3616:	d1f5      	bne.n	3604 <NOROM_RFCRTrim+0xdc>
    3618:	3905      	subs	r1, #5
    361a:	e7e2      	b.n	35e2 <NOROM_RFCRTrim+0xba>
    361c:	bd70      	pop	{r4, r5, r6, pc}
    361e:	bf00      	nop
    3620:	50001100 	andpl	r1, r0, r0, lsl #2
    3624:	50001380 	andpl	r1, r0, r0, lsl #7
    3628:	50001320 	andpl	r1, r0, r0, lsr #6
    362c:	500010f8 	strdpl	r1, [r0], -r8
    3630:	500010fc 	strdpl	r1, [r0], -ip
    3634:	50001104 	andpl	r1, r0, r4, lsl #2
    3638:	50001108 	andpl	r1, r0, r8, lsl #2
    363c:	02000421 	andeq	r0, r0, #553648128	; 0x21000000

00003640 <NOROM_RFCRfTrimSet>:
    3640:	4603      	mov	r3, r0
    3642:	b530      	push	{r4, r5, lr}
    3644:	4c05      	ldr	r4, [pc, #20]	; (365c <NOROM_RFCRfTrimSet+0x1c>)
    3646:	f100 0510 	add.w	r5, r0, #16
    364a:	4622      	mov	r2, r4
    364c:	6818      	ldr	r0, [r3, #0]
    364e:	6859      	ldr	r1, [r3, #4]
    3650:	3308      	adds	r3, #8
    3652:	c203      	stmia	r2!, {r0, r1}
    3654:	42ab      	cmp	r3, r5
    3656:	4614      	mov	r4, r2
    3658:	d1f7      	bne.n	364a <NOROM_RFCRfTrimSet+0xa>
    365a:	bd30      	pop	{r4, r5, pc}
    365c:	21000018 	tstcs	r0, r8, lsl r0

00003660 <NOROM_RFCAdi3VcoLdoVoltageMode>:
    3660:	4b04      	ldr	r3, [pc, #16]	; (3674 <NOROM_RFCAdi3VcoLdoVoltageMode+0x14>)
    3662:	b128      	cbz	r0, 3670 <NOROM_RFCAdi3VcoLdoVoltageMode+0x10>
    3664:	4a04      	ldr	r2, [pc, #16]	; (3678 <NOROM_RFCAdi3VcoLdoVoltageMode+0x18>)
    3666:	2100      	movs	r1, #0
    3668:	7011      	strb	r1, [r2, #0]
    366a:	2220      	movs	r2, #32
    366c:	701a      	strb	r2, [r3, #0]
    366e:	4770      	bx	lr
    3670:	7018      	strb	r0, [r3, #0]
    3672:	4770      	bx	lr
    3674:	40086202 	andmi	r6, r8, r2, lsl #4
    3678:	40086200 	andmi	r6, r8, r0, lsl #4

0000367c <TrimAfterColdResetWakeupFromShutDown>:
    367c:	b538      	push	{r3, r4, r5, lr}
    367e:	4605      	mov	r5, r0
    3680:	4b26      	ldr	r3, [pc, #152]	; (371c <TrimAfterColdResetWakeupFromShutDown+0xa0>)
    3682:	2201      	movs	r2, #1
    3684:	601a      	str	r2, [r3, #0]
    3686:	4b26      	ldr	r3, [pc, #152]	; (3720 <TrimAfterColdResetWakeupFromShutDown+0xa4>)
    3688:	681b      	ldr	r3, [r3, #0]
    368a:	2b00      	cmp	r3, #0
    368c:	d0fb      	beq.n	3686 <TrimAfterColdResetWakeupFromShutDown+0xa>
    368e:	4b25      	ldr	r3, [pc, #148]	; (3724 <TrimAfterColdResetWakeupFromShutDown+0xa8>)
    3690:	22c0      	movs	r2, #192	; 0xc0
    3692:	601a      	str	r2, [r3, #0]
    3694:	4b24      	ldr	r3, [pc, #144]	; (3728 <TrimAfterColdResetWakeupFromShutDown+0xac>)
    3696:	681b      	ldr	r3, [r3, #0]
    3698:	079b      	lsls	r3, r3, #30
    369a:	bf5f      	itttt	pl
    369c:	4b23      	ldrpl	r3, [pc, #140]	; (372c <TrimAfterColdResetWakeupFromShutDown+0xb0>)
    369e:	4a24      	ldrpl	r2, [pc, #144]	; (3730 <TrimAfterColdResetWakeupFromShutDown+0xb4>)
    36a0:	681b      	ldrpl	r3, [r3, #0]
    36a2:	f3c3 4303 	ubfxpl	r3, r3, #16, #4
    36a6:	bf5c      	itt	pl
    36a8:	f043 03f0 	orrpl.w	r3, r3, #240	; 0xf0
    36ac:	7013      	strbpl	r3, [r2, #0]
    36ae:	4b21      	ldr	r3, [pc, #132]	; (3734 <TrimAfterColdResetWakeupFromShutDown+0xb8>)
    36b0:	2200      	movs	r2, #0
    36b2:	601a      	str	r2, [r3, #0]
    36b4:	4b20      	ldr	r3, [pc, #128]	; (3738 <TrimAfterColdResetWakeupFromShutDown+0xbc>)
    36b6:	681c      	ldr	r4, [r3, #0]
    36b8:	4620      	mov	r0, r4
    36ba:	f000 f8d9 	bl	3870 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1>
    36be:	4628      	mov	r0, r5
    36c0:	4621      	mov	r1, r4
    36c2:	f000 fa0d 	bl	3ae0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2>
    36c6:	f240 221d 	movw	r2, #541	; 0x21d
    36ca:	4b1c      	ldr	r3, [pc, #112]	; (373c <TrimAfterColdResetWakeupFromShutDown+0xc0>)
    36cc:	681b      	ldr	r3, [r3, #0]
    36ce:	b29b      	uxth	r3, r3
    36d0:	4293      	cmp	r3, r2
    36d2:	d814      	bhi.n	36fe <TrimAfterColdResetWakeupFromShutDown+0x82>
    36d4:	4a1a      	ldr	r2, [pc, #104]	; (3740 <TrimAfterColdResetWakeupFromShutDown+0xc4>)
    36d6:	6813      	ldr	r3, [r2, #0]
    36d8:	6812      	ldr	r2, [r2, #0]
    36da:	f3c3 6303 	ubfx	r3, r3, #24, #4
    36de:	f3c2 4203 	ubfx	r2, r2, #16, #4
    36e2:	b103      	cbz	r3, 36e6 <TrimAfterColdResetWakeupFromShutDown+0x6a>
    36e4:	3b01      	subs	r3, #1
    36e6:	1f91      	subs	r1, r2, #6
    36e8:	2901      	cmp	r1, #1
    36ea:	bf86      	itte	hi
    36ec:	3202      	addhi	r2, #2
    36ee:	f002 020f 	andhi.w	r2, r2, #15
    36f2:	2207      	movls	r2, #7
    36f4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    36f8:	4a12      	ldr	r2, [pc, #72]	; (3744 <TrimAfterColdResetWakeupFromShutDown+0xc8>)
    36fa:	b2db      	uxtb	r3, r3
    36fc:	7013      	strb	r3, [r2, #0]
    36fe:	4620      	mov	r0, r4
    3700:	f000 fabc 	bl	3c7c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3>
    3704:	4b10      	ldr	r3, [pc, #64]	; (3748 <TrimAfterColdResetWakeupFromShutDown+0xcc>)
    3706:	2002      	movs	r0, #2
    3708:	681b      	ldr	r3, [r3, #0]
    370a:	68db      	ldr	r3, [r3, #12]
    370c:	4798      	blx	r3
    370e:	4b05      	ldr	r3, [pc, #20]	; (3724 <TrimAfterColdResetWakeupFromShutDown+0xa8>)
    3710:	2240      	movs	r2, #64	; 0x40
    3712:	601a      	str	r2, [r3, #0]
    3714:	4b0d      	ldr	r3, [pc, #52]	; (374c <TrimAfterColdResetWakeupFromShutDown+0xd0>)
    3716:	2201      	movs	r2, #1
    3718:	601a      	str	r2, [r3, #0]
    371a:	bd38      	pop	{r3, r4, r5, pc}
    371c:	40091010 	andmi	r1, r9, r0, lsl r0
    3720:	43220294 			; <UNDEFINED> instruction: 0x43220294
    3724:	400c6000 	andmi	r6, ip, r0
    3728:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    372c:	50003fac 	andpl	r3, r0, ip, lsr #31
    3730:	40086256 	andmi	r6, r8, r6, asr r2
    3734:	40091040 	andmi	r1, r9, r0, asr #32
    3738:	50003fb4 			; <UNDEFINED> instruction: 0x50003fb4
    373c:	50001314 	andpl	r1, r0, r4, lsl r3
    3740:	500012bc 			; <UNDEFINED> instruction: 0x500012bc
    3744:	40086002 	andmi	r6, r8, r2
    3748:	100001a0 	andne	r0, r0, r0, lsr #3
    374c:	42600494 	rsbmi	r0, r0, #148, 8	; 0x94000000

00003750 <NOROM_SetupTrimDevice>:
    3750:	b510      	push	{r4, lr}
    3752:	4b1f      	ldr	r3, [pc, #124]	; (37d0 <NOROM_SetupTrimDevice+0x80>)
    3754:	681c      	ldr	r4, [r3, #0]
    3756:	1c63      	adds	r3, r4, #1
    3758:	bf08      	it	eq
    375a:	2400      	moveq	r4, #0
    375c:	f000 fcde 	bl	411c <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated>
    3760:	4b1c      	ldr	r3, [pc, #112]	; (37d4 <NOROM_SetupTrimDevice+0x84>)
    3762:	2200      	movs	r2, #0
    3764:	601a      	str	r2, [r3, #0]
    3766:	4a1c      	ldr	r2, [pc, #112]	; (37d8 <NOROM_SetupTrimDevice+0x88>)
    3768:	2301      	movs	r3, #1
    376a:	6013      	str	r3, [r2, #0]
    376c:	4a1b      	ldr	r2, [pc, #108]	; (37dc <NOROM_SetupTrimDevice+0x8c>)
    376e:	6013      	str	r3, [r2, #0]
    3770:	f000 fa3e 	bl	3bf0 <NOROM_SetupSetCacheModeAccordingToCcfgSetting>
    3774:	4b1a      	ldr	r3, [pc, #104]	; (37e0 <NOROM_SetupTrimDevice+0x90>)
    3776:	681b      	ldr	r3, [r3, #0]
    3778:	b123      	cbz	r3, 3784 <NOROM_SetupTrimDevice+0x34>
    377a:	4b1a      	ldr	r3, [pc, #104]	; (37e4 <NOROM_SetupTrimDevice+0x94>)
    377c:	4620      	mov	r0, r4
    377e:	681b      	ldr	r3, [r3, #0]
    3780:	f7ff ff7c 	bl	367c <TrimAfterColdResetWakeupFromShutDown>
    3784:	4b18      	ldr	r3, [pc, #96]	; (37e8 <NOROM_SetupTrimDevice+0x98>)
    3786:	2200      	movs	r2, #0
    3788:	601a      	str	r2, [r3, #0]
    378a:	4a18      	ldr	r2, [pc, #96]	; (37ec <NOROM_SetupTrimDevice+0x9c>)
    378c:	6813      	ldr	r3, [r2, #0]
    378e:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
    3792:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    3796:	f043 739c 	orr.w	r3, r3, #20447232	; 0x1380000
    379a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    379e:	6013      	str	r3, [r2, #0]
    37a0:	f502 22bb 	add.w	r2, r2, #382976	; 0x5d800
    37a4:	f202 72bc 	addw	r2, r2, #1980	; 0x7bc
    37a8:	6813      	ldr	r3, [r2, #0]
    37aa:	f3c3 3301 	ubfx	r3, r3, #12, #2
    37ae:	2b01      	cmp	r3, #1
    37b0:	bf01      	itttt	eq
    37b2:	6813      	ldreq	r3, [r2, #0]
    37b4:	f023 7340 	biceq.w	r3, r3, #50331648	; 0x3000000
    37b8:	f423 3340 	biceq.w	r3, r3, #196608	; 0x30000
    37bc:	f443 3100 	orreq.w	r1, r3, #131072	; 0x20000
    37c0:	bf04      	itt	eq
    37c2:	6011      	streq	r1, [r2, #0]
    37c4:	6013      	streq	r3, [r2, #0]
    37c6:	4b0a      	ldr	r3, [pc, #40]	; (37f0 <NOROM_SetupTrimDevice+0xa0>)
    37c8:	681b      	ldr	r3, [r3, #0]
    37ca:	2b00      	cmp	r3, #0
    37cc:	d1fb      	bne.n	37c6 <NOROM_SetupTrimDevice+0x76>
    37ce:	bd10      	pop	{r4, pc}
    37d0:	5000131c 	andpl	r1, r0, ip, lsl r3
    37d4:	42600484 	rsbmi	r0, r0, #132, 8	; 0x84000000
    37d8:	400c605c 	andmi	r6, ip, ip, asr r0
    37dc:	43042208 	movwmi	r2, #16904	; 0x4208
    37e0:	43280180 			; <UNDEFINED> instruction: 0x43280180
    37e4:	43200100 	nopmi	{0}	; <UNPREDICTABLE>
    37e8:	4008218c 	andmi	r2, r8, ip, lsl #3
    37ec:	40032048 	andmi	r2, r3, r8, asr #32
    37f0:	4268000c 	rsbmi	r0, r8, #12

000037f4 <NOROM_SetupSetVddrLevel>:
    37f4:	b530      	push	{r4, r5, lr}
    37f6:	4b19      	ldr	r3, [pc, #100]	; (385c <NOROM_SetupSetVddrLevel+0x68>)
    37f8:	681a      	ldr	r2, [r3, #0]
    37fa:	4b19      	ldr	r3, [pc, #100]	; (3860 <NOROM_SetupSetVddrLevel+0x6c>)
    37fc:	f3c2 6204 	ubfx	r2, r2, #24, #5
    3800:	781b      	ldrb	r3, [r3, #0]
    3802:	2a15      	cmp	r2, #21
    3804:	f003 031f 	and.w	r3, r3, #31
    3808:	bf88      	it	hi
    380a:	3a20      	subhi	r2, #32
    380c:	2b15      	cmp	r3, #21
    380e:	bf88      	it	hi
    3810:	3b20      	subhi	r3, #32
    3812:	4293      	cmp	r3, r2
    3814:	d020      	beq.n	3858 <NOROM_SetupSetVddrLevel+0x64>
    3816:	4913      	ldr	r1, [pc, #76]	; (3864 <NOROM_SetupSetVddrLevel+0x70>)
    3818:	2000      	movs	r0, #0
    381a:	6008      	str	r0, [r1, #0]
    381c:	4608      	mov	r0, r1
    381e:	1ad1      	subs	r1, r2, r3
    3820:	2902      	cmp	r1, #2
    3822:	dc05      	bgt.n	3830 <NOROM_SetupSetVddrLevel+0x3c>
    3824:	f06f 0401 	mvn.w	r4, #1
    3828:	42a1      	cmp	r1, r4
    382a:	bfb8      	it	lt
    382c:	4621      	movlt	r1, r4
    382e:	e000      	b.n	3832 <NOROM_SetupSetVddrLevel+0x3e>
    3830:	2102      	movs	r1, #2
    3832:	440b      	add	r3, r1
    3834:	490c      	ldr	r1, [pc, #48]	; (3868 <NOROM_SetupSetVddrLevel+0x74>)
    3836:	4d0d      	ldr	r5, [pc, #52]	; (386c <NOROM_SetupSetVddrLevel+0x78>)
    3838:	680c      	ldr	r4, [r1, #0]
    383a:	f003 041f 	and.w	r4, r3, #31
    383e:	f444 54f8 	orr.w	r4, r4, #7936	; 0x1f00
    3842:	802c      	strh	r4, [r5, #0]
    3844:	4293      	cmp	r3, r2
    3846:	f04f 0401 	mov.w	r4, #1
    384a:	600c      	str	r4, [r1, #0]
    384c:	d1e7      	bne.n	381e <NOROM_SetupSetVddrLevel+0x2a>
    384e:	680b      	ldr	r3, [r1, #0]
    3850:	600c      	str	r4, [r1, #0]
    3852:	680b      	ldr	r3, [r1, #0]
    3854:	6004      	str	r4, [r0, #0]
    3856:	680b      	ldr	r3, [r1, #0]
    3858:	bd30      	pop	{r4, r5, pc}
    385a:	bf00      	nop
    385c:	50001388 	andpl	r1, r0, r8, lsl #7
    3860:	40086206 	andmi	r6, r8, r6, lsl #4
    3864:	43200098 			; <UNDEFINED> instruction: 0x43200098
    3868:	4009202c 	andmi	r2, r9, ip, lsr #32
    386c:	4008626c 	andmi	r6, r8, ip, ror #4

00003870 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1>:
    3870:	f000 7340 	and.w	r3, r0, #50331648	; 0x3000000
    3874:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    3878:	b510      	push	{r4, lr}
    387a:	4604      	mov	r4, r0
    387c:	d10f      	bne.n	389e <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x2e>
    387e:	f64f 01d8 	movw	r1, #63704	; 0xf8d8
    3882:	4a1e      	ldr	r2, [pc, #120]	; (38fc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x8c>)
    3884:	2380      	movs	r3, #128	; 0x80
    3886:	7013      	strb	r3, [r2, #0]
    3888:	f8a2 1041 	strh.w	r1, [r2, #65]	; 0x41
    388c:	f802 3c10 	strb.w	r3, [r2, #-16]
    3890:	f7ff ffb0 	bl	37f4 <NOROM_SetupSetVddrLevel>
    3894:	4b1a      	ldr	r3, [pc, #104]	; (3900 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x90>)
    3896:	681b      	ldr	r3, [r3, #0]
    3898:	f3c3 2304 	ubfx	r3, r3, #8, #5
    389c:	e003      	b.n	38a6 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x36>
    389e:	4b19      	ldr	r3, [pc, #100]	; (3904 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x94>)
    38a0:	681b      	ldr	r3, [r3, #0]
    38a2:	f3c3 6304 	ubfx	r3, r3, #24, #5
    38a6:	2b15      	cmp	r3, #21
    38a8:	bf88      	it	hi
    38aa:	3b20      	subhi	r3, #32
    38ac:	eb03 7324 	add.w	r3, r3, r4, asr #28
    38b0:	3301      	adds	r3, #1
    38b2:	2b15      	cmp	r3, #21
    38b4:	dc05      	bgt.n	38c2 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x52>
    38b6:	f06f 0209 	mvn.w	r2, #9
    38ba:	4293      	cmp	r3, r2
    38bc:	bfb8      	it	lt
    38be:	4613      	movlt	r3, r2
    38c0:	e000      	b.n	38c4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x54>
    38c2:	2315      	movs	r3, #21
    38c4:	4a10      	ldr	r2, [pc, #64]	; (3908 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x98>)
    38c6:	f003 031f 	and.w	r3, r3, #31
    38ca:	f443 53f8 	orr.w	r3, r3, #7936	; 0x1f00
    38ce:	8013      	strh	r3, [r2, #0]
    38d0:	4b0e      	ldr	r3, [pc, #56]	; (390c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x9c>)
    38d2:	681b      	ldr	r3, [r3, #0]
    38d4:	f013 0302 	ands.w	r3, r3, #2
    38d8:	bf0a      	itet	eq
    38da:	4a0d      	ldreq	r2, [pc, #52]	; (3910 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa0>)
    38dc:	f044 6440 	orrne.w	r4, r4, #201326592	; 0xc000000
    38e0:	6013      	streq	r3, [r2, #0]
    38e2:	f3c4 63c0 	ubfx	r3, r4, #27, #1
    38e6:	4a0b      	ldr	r2, [pc, #44]	; (3914 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa4>)
    38e8:	f083 0301 	eor.w	r3, r3, #1
    38ec:	6013      	str	r3, [r2, #0]
    38ee:	f3c4 6480 	ubfx	r4, r4, #26, #1
    38f2:	4b09      	ldr	r3, [pc, #36]	; (3918 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa8>)
    38f4:	f084 0401 	eor.w	r4, r4, #1
    38f8:	601c      	str	r4, [r3, #0]
    38fa:	bd10      	pop	{r4, pc}
    38fc:	40086225 	andmi	r6, r8, r5, lsr #4
    3900:	50001388 	andpl	r1, r0, r8, lsl #7
    3904:	500012b8 			; <UNDEFINED> instruction: 0x500012b8
    3908:	4008626e 	andmi	r6, r8, lr, ror #4
    390c:	40090000 	andmi	r0, r9, r0
    3910:	432a0494 			; <UNDEFINED> instruction: 0x432a0494
    3914:	43200000 	nopmi	{0}	; <UNPREDICTABLE>
    3918:	43200008 			; <UNDEFINED> instruction: 0x43200008

0000391c <NOROM_SetupGetTrimForAnabypassValue1>:
    391c:	4b15      	ldr	r3, [pc, #84]	; (3974 <NOROM_SetupGetTrimForAnabypassValue1+0x58>)
    391e:	0381      	lsls	r1, r0, #14
    3920:	681b      	ldr	r3, [r3, #0]
    3922:	f3c3 6283 	ubfx	r2, r3, #26, #4
    3926:	f3c3 238f 	ubfx	r3, r3, #10, #16
    392a:	d41f      	bmi.n	396c <NOROM_SetupGetTrimForAnabypassValue1+0x50>
    392c:	f340 2007 	sbfx	r0, r0, #8, #8
    3930:	2800      	cmp	r0, #0
    3932:	da19      	bge.n	3968 <NOROM_SetupGetTrimForAnabypassValue1+0x4c>
    3934:	085b      	lsrs	r3, r3, #1
    3936:	d105      	bne.n	3944 <NOROM_SetupGetTrimForAnabypassValue1+0x28>
    3938:	0852      	lsrs	r2, r2, #1
    393a:	bf06      	itte	eq
    393c:	2301      	moveq	r3, #1
    393e:	461a      	moveq	r2, r3
    3940:	f64f 73ff 	movwne	r3, #65535	; 0xffff
    3944:	3001      	adds	r0, #1
    3946:	e7f3      	b.n	3930 <NOROM_SetupGetTrimForAnabypassValue1+0x14>
    3948:	005b      	lsls	r3, r3, #1
    394a:	f043 0301 	orr.w	r3, r3, #1
    394e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    3952:	d308      	bcc.n	3966 <NOROM_SetupGetTrimForAnabypassValue1+0x4a>
    3954:	0052      	lsls	r2, r2, #1
    3956:	f042 0201 	orr.w	r2, r2, #1
    395a:	2a0f      	cmp	r2, #15
    395c:	bf86      	itte	hi
    395e:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
    3962:	220f      	movhi	r2, #15
    3964:	2301      	movls	r3, #1
    3966:	3801      	subs	r0, #1
    3968:	2800      	cmp	r0, #0
    396a:	d1ed      	bne.n	3948 <NOROM_SetupGetTrimForAnabypassValue1+0x2c>
    396c:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
    3970:	4770      	bx	lr
    3972:	bf00      	nop
    3974:	50001350 	andpl	r1, r0, r0, asr r3

00003978 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim>:
    3978:	4a04      	ldr	r2, [pc, #16]	; (398c <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim+0x14>)
    397a:	6813      	ldr	r3, [r2, #0]
    397c:	6810      	ldr	r0, [r2, #0]
    397e:	f3c3 0387 	ubfx	r3, r3, #2, #8
    3982:	f000 0003 	and.w	r0, r0, #3
    3986:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    398a:	4770      	bx	lr
    398c:	50001350 	andpl	r1, r0, r0, asr r3

00003990 <NOROM_SetupGetTrimForAmpcompTh2>:
    3990:	4b02      	ldr	r3, [pc, #8]	; (399c <NOROM_SetupGetTrimForAmpcompTh2+0xc>)
    3992:	6818      	ldr	r0, [r3, #0]
    3994:	f000 30fc 	and.w	r0, r0, #4244438268	; 0xfcfcfcfc
    3998:	4770      	bx	lr
    399a:	bf00      	nop
    399c:	50001374 	andpl	r1, r0, r4, ror r3

000039a0 <NOROM_SetupGetTrimForAmpcompTh1>:
    39a0:	4b03      	ldr	r3, [pc, #12]	; (39b0 <NOROM_SetupGetTrimForAmpcompTh1+0x10>)
    39a2:	6818      	ldr	r0, [r3, #0]
    39a4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    39a8:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000
    39ac:	4770      	bx	lr
    39ae:	bf00      	nop
    39b0:	50001370 	andpl	r1, r0, r0, ror r3

000039b4 <NOROM_SetupGetTrimForAmpcompCtrl>:
    39b4:	b570      	push	{r4, r5, r6, lr}
    39b6:	4b15      	ldr	r3, [pc, #84]	; (3a0c <NOROM_SetupGetTrimForAmpcompCtrl+0x58>)
    39b8:	4915      	ldr	r1, [pc, #84]	; (3a10 <NOROM_SetupGetTrimForAmpcompCtrl+0x5c>)
    39ba:	681c      	ldr	r4, [r3, #0]
    39bc:	6809      	ldr	r1, [r1, #0]
    39be:	f3c4 5203 	ubfx	r2, r4, #20, #4
    39c2:	f011 0501 	ands.w	r5, r1, #1
    39c6:	f3c4 4303 	ubfx	r3, r4, #16, #4
    39ca:	d113      	bne.n	39f4 <NOROM_SetupGetTrimForAmpcompCtrl+0x40>
    39cc:	4911      	ldr	r1, [pc, #68]	; (3a14 <NOROM_SetupGetTrimForAmpcompCtrl+0x60>)
    39ce:	6809      	ldr	r1, [r1, #0]
    39d0:	f341 2603 	sbfx	r6, r1, #8, #4
    39d4:	18b2      	adds	r2, r6, r2
    39d6:	d403      	bmi.n	39e0 <NOROM_SetupGetTrimForAmpcompCtrl+0x2c>
    39d8:	2a0f      	cmp	r2, #15
    39da:	bfa8      	it	ge
    39dc:	220f      	movge	r2, #15
    39de:	e000      	b.n	39e2 <NOROM_SetupGetTrimForAmpcompCtrl+0x2e>
    39e0:	462a      	mov	r2, r5
    39e2:	f341 3103 	sbfx	r1, r1, #12, #4
    39e6:	18cb      	adds	r3, r1, r3
    39e8:	d403      	bmi.n	39f2 <NOROM_SetupGetTrimForAmpcompCtrl+0x3e>
    39ea:	2b0f      	cmp	r3, #15
    39ec:	bfa8      	it	ge
    39ee:	230f      	movge	r3, #15
    39f0:	e000      	b.n	39f4 <NOROM_SetupGetTrimForAmpcompCtrl+0x40>
    39f2:	2300      	movs	r3, #0
    39f4:	b2a1      	uxth	r1, r4
    39f6:	2821      	cmp	r0, #33	; 0x21
    39f8:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
    39fc:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    3a00:	bf84      	itt	hi
    3a02:	f004 4480 	andhi.w	r4, r4, #1073741824	; 0x40000000
    3a06:	4323      	orrhi	r3, r4
    3a08:	4618      	mov	r0, r3
    3a0a:	bd70      	pop	{r4, r5, r6, pc}
    3a0c:	50001378 	andpl	r1, r0, r8, ror r3
    3a10:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    3a14:	50003fac 	andpl	r3, r0, ip, lsr #31

00003a18 <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage>:
    3a18:	281f      	cmp	r0, #31
    3a1a:	bf83      	ittte	hi
    3a1c:	4b02      	ldrhi	r3, [pc, #8]	; (3a28 <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage+0x10>)
    3a1e:	6818      	ldrhi	r0, [r3, #0]
    3a20:	f3c0 5001 	ubfxhi	r0, r0, #20, #2
    3a24:	2000      	movls	r0, #0
    3a26:	4770      	bx	lr
    3a28:	50001398 	mulpl	r0, r8, r3

00003a2c <NOROM_SetupGetTrimForAdcShModeEn>:
    3a2c:	2821      	cmp	r0, #33	; 0x21
    3a2e:	bf83      	ittte	hi
    3a30:	4b02      	ldrhi	r3, [pc, #8]	; (3a3c <NOROM_SetupGetTrimForAdcShModeEn+0x10>)
    3a32:	6818      	ldrhi	r0, [r3, #0]
    3a34:	f3c0 7000 	ubfxhi	r0, r0, #28, #1
    3a38:	2001      	movls	r0, #1
    3a3a:	4770      	bx	lr
    3a3c:	5000138c 	andpl	r1, r0, ip, lsl #7

00003a40 <NOROM_SetupGetTrimForAdcShVbufEn>:
    3a40:	2821      	cmp	r0, #33	; 0x21
    3a42:	bf83      	ittte	hi
    3a44:	4b02      	ldrhi	r3, [pc, #8]	; (3a50 <NOROM_SetupGetTrimForAdcShVbufEn+0x10>)
    3a46:	6818      	ldrhi	r0, [r3, #0]
    3a48:	f3c0 7040 	ubfxhi	r0, r0, #29, #1
    3a4c:	2001      	movls	r0, #1
    3a4e:	4770      	bx	lr
    3a50:	5000138c 	andpl	r1, r0, ip, lsl #7

00003a54 <NOROM_SetupGetTrimForXoscHfCtl>:
    3a54:	281f      	cmp	r0, #31
    3a56:	bf81      	itttt	hi
    3a58:	4b07      	ldrhi	r3, [pc, #28]	; (3a78 <NOROM_SetupGetTrimForXoscHfCtl+0x24>)
    3a5a:	681b      	ldrhi	r3, [r3, #0]
    3a5c:	f3c3 6002 	ubfxhi	r0, r3, #24, #3
    3a60:	0080      	lslhi	r0, r0, #2
    3a62:	bf81      	itttt	hi
    3a64:	f3c3 62c1 	ubfxhi	r2, r3, #27, #2
    3a68:	ea40 2002 	orrhi.w	r0, r0, r2, lsl #8
    3a6c:	f3c3 5381 	ubfxhi	r3, r3, #22, #2
    3a70:	4318      	orrhi	r0, r3
    3a72:	bf98      	it	ls
    3a74:	2000      	movls	r0, #0
    3a76:	4770      	bx	lr
    3a78:	50001398 	mulpl	r0, r8, r3

00003a7c <NOROM_SetupGetTrimForXoscHfFastStart>:
    3a7c:	4b02      	ldr	r3, [pc, #8]	; (3a88 <NOROM_SetupGetTrimForXoscHfFastStart+0xc>)
    3a7e:	6818      	ldr	r0, [r3, #0]
    3a80:	f3c0 40c1 	ubfx	r0, r0, #19, #2
    3a84:	4770      	bx	lr
    3a86:	bf00      	nop
    3a88:	5000138c 	andpl	r1, r0, ip, lsl #7

00003a8c <NOROM_SetupGetTrimForRadcExtCfg>:
    3a8c:	281f      	cmp	r0, #31
    3a8e:	bf81      	itttt	hi
    3a90:	4b07      	ldrhi	r3, [pc, #28]	; (3ab0 <NOROM_SetupGetTrimForRadcExtCfg+0x24>)
    3a92:	681b      	ldrhi	r3, [r3, #0]
    3a94:	f3c3 1005 	ubfxhi	r0, r3, #4, #6
    3a98:	f3c3 2289 	ubfxhi	r2, r3, #10, #10
    3a9c:	bf81      	itttt	hi
    3a9e:	0400      	lslhi	r0, r0, #16
    3aa0:	031b      	lslhi	r3, r3, #12
    3aa2:	ea40 5082 	orrhi.w	r0, r0, r2, lsl #22
    3aa6:	b29b      	uxthhi	r3, r3
    3aa8:	bf8c      	ite	hi
    3aaa:	4318      	orrhi	r0, r3
    3aac:	4801      	ldrls	r0, [pc, #4]	; (3ab4 <NOROM_SetupGetTrimForRadcExtCfg+0x28>)
    3aae:	4770      	bx	lr
    3ab0:	50001398 	mulpl	r0, r8, r3
    3ab4:	403f8000 	eorsmi	r8, pc, r0

00003ab8 <NOROM_SetupGetTrimForRcOscLfIBiasTrim>:
    3ab8:	2821      	cmp	r0, #33	; 0x21
    3aba:	bf83      	ittte	hi
    3abc:	4b02      	ldrhi	r3, [pc, #8]	; (3ac8 <NOROM_SetupGetTrimForRcOscLfIBiasTrim+0x10>)
    3abe:	6818      	ldrhi	r0, [r3, #0]
    3ac0:	f3c0 60c0 	ubfxhi	r0, r0, #27, #1
    3ac4:	2000      	movls	r0, #0
    3ac6:	4770      	bx	lr
    3ac8:	5000138c 	andpl	r1, r0, ip, lsl #7

00003acc <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio>:
    3acc:	2821      	cmp	r0, #33	; 0x21
    3ace:	bf83      	ittte	hi
    3ad0:	4b02      	ldrhi	r3, [pc, #8]	; (3adc <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio+0x10>)
    3ad2:	6818      	ldrhi	r0, [r3, #0]
    3ad4:	f3c0 5045 	ubfxhi	r0, r0, #21, #6
    3ad8:	2000      	movls	r0, #0
    3ada:	4770      	bx	lr
    3adc:	5000138c 	andpl	r1, r0, ip, lsl #7

00003ae0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2>:
    3ae0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    3ae2:	4605      	mov	r5, r0
    3ae4:	4608      	mov	r0, r1
    3ae6:	f7ff ff19 	bl	391c <NOROM_SetupGetTrimForAnabypassValue1>
    3aea:	4c39      	ldr	r4, [pc, #228]	; (3bd0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf0>)
    3aec:	4602      	mov	r2, r0
    3aee:	2118      	movs	r1, #24
    3af0:	4620      	mov	r0, r4
    3af2:	f000 fb33 	bl	415c <NOROM_DDI32RegWrite>
    3af6:	f7ff ff3f 	bl	3978 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim>
    3afa:	4b36      	ldr	r3, [pc, #216]	; (3bd4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf4>)
    3afc:	b280      	uxth	r0, r0
    3afe:	681b      	ldr	r3, [r3, #0]
    3b00:	9000      	str	r0, [sp, #0]
    3b02:	685e      	ldr	r6, [r3, #4]
    3b04:	4620      	mov	r0, r4
    3b06:	212c      	movs	r1, #44	; 0x2c
    3b08:	f240 32ff 	movw	r2, #1023	; 0x3ff
    3b0c:	2300      	movs	r3, #0
    3b0e:	47b0      	blx	r6
    3b10:	4b31      	ldr	r3, [pc, #196]	; (3bd8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf8>)
    3b12:	4620      	mov	r0, r4
    3b14:	681a      	ldr	r2, [r3, #0]
    3b16:	211c      	movs	r1, #28
    3b18:	f3c2 020d 	ubfx	r2, r2, #0, #14
    3b1c:	f000 fb1e 	bl	415c <NOROM_DDI32RegWrite>
    3b20:	f7ff ff36 	bl	3990 <NOROM_SetupGetTrimForAmpcompTh2>
    3b24:	2114      	movs	r1, #20
    3b26:	4602      	mov	r2, r0
    3b28:	4620      	mov	r0, r4
    3b2a:	f000 fb17 	bl	415c <NOROM_DDI32RegWrite>
    3b2e:	f7ff ff37 	bl	39a0 <NOROM_SetupGetTrimForAmpcompTh1>
    3b32:	2110      	movs	r1, #16
    3b34:	4602      	mov	r2, r0
    3b36:	4620      	mov	r0, r4
    3b38:	f000 fb10 	bl	415c <NOROM_DDI32RegWrite>
    3b3c:	4628      	mov	r0, r5
    3b3e:	f7ff ff39 	bl	39b4 <NOROM_SetupGetTrimForAmpcompCtrl>
    3b42:	210c      	movs	r1, #12
    3b44:	4602      	mov	r2, r0
    3b46:	4620      	mov	r0, r4
    3b48:	f000 fb08 	bl	415c <NOROM_DDI32RegWrite>
    3b4c:	4628      	mov	r0, r5
    3b4e:	f7ff ff6d 	bl	3a2c <NOROM_SetupGetTrimForAdcShModeEn>
    3b52:	0040      	lsls	r0, r0, #1
    3b54:	4e21      	ldr	r6, [pc, #132]	; (3bdc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xfc>)
    3b56:	f040 0020 	orr.w	r0, r0, #32
    3b5a:	b2c0      	uxtb	r0, r0
    3b5c:	7030      	strb	r0, [r6, #0]
    3b5e:	4628      	mov	r0, r5
    3b60:	f7ff ff6e 	bl	3a40 <NOROM_SetupGetTrimForAdcShVbufEn>
    3b64:	f040 0010 	orr.w	r0, r0, #16
    3b68:	b2c0      	uxtb	r0, r0
    3b6a:	7030      	strb	r0, [r6, #0]
    3b6c:	4628      	mov	r0, r5
    3b6e:	f7ff ff71 	bl	3a54 <NOROM_SetupGetTrimForXoscHfCtl>
    3b72:	2128      	movs	r1, #40	; 0x28
    3b74:	4602      	mov	r2, r0
    3b76:	4620      	mov	r0, r4
    3b78:	f000 faf0 	bl	415c <NOROM_DDI32RegWrite>
    3b7c:	4628      	mov	r0, r5
    3b7e:	f7ff ff4b 	bl	3a18 <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage>
    3b82:	0040      	lsls	r0, r0, #1
    3b84:	4b16      	ldr	r3, [pc, #88]	; (3be0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x100>)
    3b86:	f040 0060 	orr.w	r0, r0, #96	; 0x60
    3b8a:	b2c0      	uxtb	r0, r0
    3b8c:	7018      	strb	r0, [r3, #0]
    3b8e:	4628      	mov	r0, r5
    3b90:	f7ff ff92 	bl	3ab8 <NOROM_SetupGetTrimForRcOscLfIBiasTrim>
    3b94:	00c0      	lsls	r0, r0, #3
    3b96:	4b13      	ldr	r3, [pc, #76]	; (3be4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x104>)
    3b98:	f060 007f 	orn	r0, r0, #127	; 0x7f
    3b9c:	b2c0      	uxtb	r0, r0
    3b9e:	7018      	strb	r0, [r3, #0]
    3ba0:	4628      	mov	r0, r5
    3ba2:	f7ff ff93 	bl	3acc <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio>
    3ba6:	ea6f 6000 	mvn.w	r0, r0, lsl #24
    3baa:	ea6f 5090 	mvn.w	r0, r0, lsr #22
    3bae:	4b0e      	ldr	r3, [pc, #56]	; (3be8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x108>)
    3bb0:	b280      	uxth	r0, r0
    3bb2:	8018      	strh	r0, [r3, #0]
    3bb4:	4628      	mov	r0, r5
    3bb6:	f7ff ff69 	bl	3a8c <NOROM_SetupGetTrimForRadcExtCfg>
    3bba:	2108      	movs	r1, #8
    3bbc:	4602      	mov	r2, r0
    3bbe:	4620      	mov	r0, r4
    3bc0:	f000 facc 	bl	415c <NOROM_DDI32RegWrite>
    3bc4:	4b09      	ldr	r3, [pc, #36]	; (3bec <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x10c>)
    3bc6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    3bca:	601a      	str	r2, [r3, #0]
    3bcc:	b002      	add	sp, #8
    3bce:	bd70      	pop	{r4, r5, r6, pc}
    3bd0:	400ca000 	andmi	sl, ip, r0
    3bd4:	100001a4 	andne	r0, r0, r4, lsr #3
    3bd8:	5000137c 	andpl	r1, r0, ip, ror r3
    3bdc:	400ca149 	andmi	sl, ip, r9, asr #2
    3be0:	400ca14c 	andmi	sl, ip, ip, asr #2
    3be4:	400ca141 	andmi	sl, ip, r1, asr #2
    3be8:	400ca1dc 	ldrdmi	sl, [ip], -ip
    3bec:	400ca040 	andmi	sl, ip, r0, asr #32

00003bf0 <NOROM_SetupSetCacheModeAccordingToCcfgSetting>:
    3bf0:	b530      	push	{r4, r5, lr}
    3bf2:	4b14      	ldr	r3, [pc, #80]	; (3c44 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x54>)
    3bf4:	681b      	ldr	r3, [r3, #0]
    3bf6:	2b00      	cmp	r3, #0
    3bf8:	d1fb      	bne.n	3bf2 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x2>
    3bfa:	4a13      	ldr	r2, [pc, #76]	; (3c48 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x58>)
    3bfc:	4913      	ldr	r1, [pc, #76]	; (3c4c <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x5c>)
    3bfe:	6813      	ldr	r3, [r2, #0]
    3c00:	6809      	ldr	r1, [r1, #0]
    3c02:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
    3c06:	f023 0307 	bic.w	r3, r3, #7
    3c0a:	f011 0f04 	tst.w	r1, #4
    3c0e:	4614      	mov	r4, r2
    3c10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    3c14:	d003      	beq.n	3c1e <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x2e>
    3c16:	f043 0305 	orr.w	r3, r3, #5
    3c1a:	6013      	str	r3, [r2, #0]
    3c1c:	bd30      	pop	{r4, r5, pc}
    3c1e:	490c      	ldr	r1, [pc, #48]	; (3c50 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x60>)
    3c20:	f043 0004 	orr.w	r0, r3, #4
    3c24:	680d      	ldr	r5, [r1, #0]
    3c26:	07ad      	lsls	r5, r5, #30
    3c28:	d009      	beq.n	3c3e <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x4e>
    3c2a:	f043 0307 	orr.w	r3, r3, #7
    3c2e:	6013      	str	r3, [r2, #0]
    3c30:	680b      	ldr	r3, [r1, #0]
    3c32:	f003 0303 	and.w	r3, r3, #3
    3c36:	2b03      	cmp	r3, #3
    3c38:	d1fa      	bne.n	3c30 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x40>
    3c3a:	6020      	str	r0, [r4, #0]
    3c3c:	bd30      	pop	{r4, r5, pc}
    3c3e:	6010      	str	r0, [r2, #0]
    3c40:	bd30      	pop	{r4, r5, pc}
    3c42:	bf00      	nop
    3c44:	4268000c 	rsbmi	r0, r8, #12
    3c48:	40034004 	andmi	r4, r3, r4
    3c4c:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    3c50:	40034000 	andmi	r4, r3, r0

00003c54 <NOROM_SetupSetAonRtcSubSecInc>:
    3c54:	4b07      	ldr	r3, [pc, #28]	; (3c74 <NOROM_SetupSetAonRtcSubSecInc+0x20>)
    3c56:	b282      	uxth	r2, r0
    3c58:	f3c0 4007 	ubfx	r0, r0, #16, #8
    3c5c:	601a      	str	r2, [r3, #0]
    3c5e:	6058      	str	r0, [r3, #4]
    3c60:	2201      	movs	r2, #1
    3c62:	3308      	adds	r3, #8
    3c64:	601a      	str	r2, [r3, #0]
    3c66:	4a04      	ldr	r2, [pc, #16]	; (3c78 <NOROM_SetupSetAonRtcSubSecInc+0x24>)
    3c68:	6812      	ldr	r2, [r2, #0]
    3c6a:	2a00      	cmp	r2, #0
    3c6c:	d0fb      	beq.n	3c66 <NOROM_SetupSetAonRtcSubSecInc+0x12>
    3c6e:	2200      	movs	r2, #0
    3c70:	601a      	str	r2, [r3, #0]
    3c72:	4770      	bx	lr
    3c74:	400c603c 	andmi	r6, ip, ip, lsr r0
    3c78:	438c0884 	orrmi	r0, ip, #132, 16	; 0x840000

00003c7c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3>:
    3c7c:	f3c0 4381 	ubfx	r3, r0, #18, #2
    3c80:	2b01      	cmp	r3, #1
    3c82:	b510      	push	{r4, lr}
    3c84:	4604      	mov	r4, r0
    3c86:	d002      	beq.n	3c8e <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x12>
    3c88:	2b02      	cmp	r3, #2
    3c8a:	d02f      	beq.n	3cec <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x70>
    3c8c:	e02a      	b.n	3ce4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x68>
    3c8e:	4b42      	ldr	r3, [pc, #264]	; (3d98 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x11c>)
    3c90:	681b      	ldr	r3, [r3, #0]
    3c92:	039a      	lsls	r2, r3, #14
    3c94:	d426      	bmi.n	3ce4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x68>
    3c96:	4a41      	ldr	r2, [pc, #260]	; (3d9c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    3c98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    3c9c:	6011      	str	r1, [r2, #0]
    3c9e:	4940      	ldr	r1, [pc, #256]	; (3da0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x124>)
    3ca0:	f3c3 3003 	ubfx	r0, r3, #12, #4
    3ca4:	680a      	ldr	r2, [r1, #0]
    3ca6:	f022 028f 	bic.w	r2, r2, #143	; 0x8f
    3caa:	4302      	orrs	r2, r0
    3cac:	f3c3 4000 	ubfx	r0, r3, #16, #1
    3cb0:	ea42 12c0 	orr.w	r2, r2, r0, lsl #7
    3cb4:	600a      	str	r2, [r1, #0]
    3cb6:	f851 2c01 	ldr.w	r2, [r1, #-1]
    3cba:	f3c3 2003 	ubfx	r0, r3, #8, #4
    3cbe:	f022 020f 	bic.w	r2, r2, #15
    3cc2:	4302      	orrs	r2, r0
    3cc4:	f851 0c01 	ldr.w	r0, [r1, #-1]
    3cc8:	f841 2c01 	str.w	r2, [r1, #-1]
    3ccc:	f851 2c02 	ldr.w	r2, [r1, #-2]
    3cd0:	f003 03e7 	and.w	r3, r3, #231	; 0xe7
    3cd4:	f022 02e7 	bic.w	r2, r2, #231	; 0xe7
    3cd8:	4313      	orrs	r3, r2
    3cda:	f851 2c02 	ldr.w	r2, [r1, #-2]
    3cde:	f841 3c02 	str.w	r3, [r1, #-2]
    3ce2:	e003      	b.n	3cec <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x70>
    3ce4:	4b2d      	ldr	r3, [pc, #180]	; (3d9c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    3ce6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    3cea:	601a      	str	r2, [r3, #0]
    3cec:	4b2d      	ldr	r3, [pc, #180]	; (3da4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x128>)
    3cee:	681b      	ldr	r3, [r3, #0]
    3cf0:	071b      	lsls	r3, r3, #28
    3cf2:	bf5e      	ittt	pl
    3cf4:	4b2c      	ldrpl	r3, [pc, #176]	; (3da8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x12c>)
    3cf6:	2240      	movpl	r2, #64	; 0x40
    3cf8:	601a      	strpl	r2, [r3, #0]
    3cfa:	4b2c      	ldr	r3, [pc, #176]	; (3dac <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x130>)
    3cfc:	f44f 7200 	mov.w	r2, #512	; 0x200
    3d00:	601a      	str	r2, [r3, #0]
    3d02:	f7ff febb 	bl	3a7c <NOROM_SetupGetTrimForXoscHfFastStart>
    3d06:	4b2a      	ldr	r3, [pc, #168]	; (3db0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x134>)
    3d08:	f040 0030 	orr.w	r0, r0, #48	; 0x30
    3d0c:	b2c0      	uxtb	r0, r0
    3d0e:	7018      	strb	r0, [r3, #0]
    3d10:	f3c4 5081 	ubfx	r0, r4, #22, #2
    3d14:	2801      	cmp	r0, #1
    3d16:	d00b      	beq.n	3d30 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xb4>
    3d18:	d302      	bcc.n	3d20 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xa4>
    3d1a:	2802      	cmp	r0, #2
    3d1c:	d026      	beq.n	3d6c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xf0>
    3d1e:	e028      	b.n	3d72 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xf6>
    3d20:	2004      	movs	r0, #4
    3d22:	2101      	movs	r1, #1
    3d24:	f7ff fa84 	bl	3230 <NOROM_OSCClockSourceSet>
    3d28:	4822      	ldr	r0, [pc, #136]	; (3db4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x138>)
    3d2a:	f7ff ff93 	bl	3c54 <NOROM_SetupSetAonRtcSubSecInc>
    3d2e:	e024      	b.n	3d7a <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xfe>
    3d30:	f7ff faac 	bl	328c <NOROM_OSCClockSourceGet>
    3d34:	4604      	mov	r4, r0
    3d36:	2004      	movs	r0, #4
    3d38:	4621      	mov	r1, r4
    3d3a:	f7ff fa79 	bl	3230 <NOROM_OSCClockSourceSet>
    3d3e:	2004      	movs	r0, #4
    3d40:	f7ff faa4 	bl	328c <NOROM_OSCClockSourceGet>
    3d44:	42a0      	cmp	r0, r4
    3d46:	d1fa      	bne.n	3d3e <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xc2>
    3d48:	4b1b      	ldr	r3, [pc, #108]	; (3db8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x13c>)
    3d4a:	681c      	ldr	r4, [r3, #0]
    3d4c:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    3d50:	f7ff ff80 	bl	3c54 <NOROM_SetupSetAonRtcSubSecInc>
    3d54:	4b19      	ldr	r3, [pc, #100]	; (3dbc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x140>)
    3d56:	f04f 2260 	mov.w	r2, #1610637312	; 0x60006000
    3d5a:	681b      	ldr	r3, [r3, #0]
    3d5c:	0e20      	lsrs	r0, r4, #24
    3d5e:	681b      	ldr	r3, [r3, #0]
    3d60:	2107      	movs	r1, #7
    3d62:	4798      	blx	r3
    3d64:	4b0d      	ldr	r3, [pc, #52]	; (3d9c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    3d66:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3d6a:	601a      	str	r2, [r3, #0]
    3d6c:	2004      	movs	r0, #4
    3d6e:	2103      	movs	r1, #3
    3d70:	e001      	b.n	3d76 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xfa>
    3d72:	2004      	movs	r0, #4
    3d74:	2102      	movs	r1, #2
    3d76:	f7ff fa5b 	bl	3230 <NOROM_OSCClockSourceSet>
    3d7a:	4b11      	ldr	r3, [pc, #68]	; (3dc0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x144>)
    3d7c:	4a11      	ldr	r2, [pc, #68]	; (3dc4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x148>)
    3d7e:	681b      	ldr	r3, [r3, #0]
    3d80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    3d84:	7013      	strb	r3, [r2, #0]
    3d86:	f647 0218 	movw	r2, #30744	; 0x7818
    3d8a:	4b0f      	ldr	r3, [pc, #60]	; (3dc8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x14c>)
    3d8c:	801a      	strh	r2, [r3, #0]
    3d8e:	f5a3 3364 	sub.w	r3, r3, #233472	; 0x39000
    3d92:	3b44      	subs	r3, #68	; 0x44
    3d94:	681b      	ldr	r3, [r3, #0]
    3d96:	bd10      	pop	{r4, pc}
    3d98:	5000138c 	andpl	r1, r0, ip, lsl #7
    3d9c:	400ca040 	andmi	sl, ip, r0, asr #32
    3da0:	4008600c 	andmi	r6, r8, ip
    3da4:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    3da8:	400ca068 	andmi	sl, ip, r8, rrx
    3dac:	400ca080 	andmi	sl, ip, r0, lsl #1
    3db0:	400ca108 	andmi	sl, ip, r8, lsl #2
    3db4:	008637bd 			; <UNDEFINED> instruction: 0x008637bd
    3db8:	50003fa8 	andpl	r3, r0, r8, lsr #31
    3dbc:	100001b4 			; <UNDEFINED> instruction: 0x100001b4
    3dc0:	5000136c 	andpl	r1, r0, ip, ror #6
    3dc4:	400cb00b 	andmi	fp, ip, fp
    3dc8:	400cb070 	andmi	fp, ip, r0, ror r0

00003dcc <NOROM_SysCtrlSetRechargeBeforePowerDown>:
    3dcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3dd0:	4b77      	ldr	r3, [pc, #476]	; (3fb0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e4>)
    3dd2:	4607      	mov	r7, r0
    3dd4:	681b      	ldr	r3, [r3, #0]
    3dd6:	4e77      	ldr	r6, [pc, #476]	; (3fb4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    3dd8:	f013 0f02 	tst.w	r3, #2
    3ddc:	d004      	beq.n	3de8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1c>
    3dde:	2308      	movs	r3, #8
    3de0:	71b3      	strb	r3, [r6, #6]
    3de2:	4a75      	ldr	r2, [pc, #468]	; (3fb8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1ec>)
    3de4:	4b75      	ldr	r3, [pc, #468]	; (3fbc <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f0>)
    3de6:	e0df      	b.n	3fa8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1dc>
    3de8:	f7ff f9e6 	bl	31b8 <NOROM_AONBatMonTemperatureGetDegC>
    3dec:	4b74      	ldr	r3, [pc, #464]	; (3fc0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f4>)
    3dee:	681d      	ldr	r5, [r3, #0]
    3df0:	172a      	asrs	r2, r5, #28
    3df2:	02ac      	lsls	r4, r5, #10
    3df4:	f102 0101 	add.w	r1, r2, #1
    3df8:	d408      	bmi.n	3e0c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x40>
    3dfa:	f1c0 033e 	rsb	r3, r0, #62	; 0x3e
    3dfe:	10db      	asrs	r3, r3, #3
    3e00:	2b08      	cmp	r3, #8
    3e02:	bfa8      	it	ge
    3e04:	2308      	movge	r3, #8
    3e06:	4299      	cmp	r1, r3
    3e08:	bfb8      	it	lt
    3e0a:	4619      	movlt	r1, r3
    3e0c:	f005 7340 	and.w	r3, r5, #50331648	; 0x3000000
    3e10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    3e14:	d10a      	bne.n	3e2c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x60>
    3e16:	4b6b      	ldr	r3, [pc, #428]	; (3fc4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f8>)
    3e18:	681a      	ldr	r2, [r3, #0]
    3e1a:	681b      	ldr	r3, [r3, #0]
    3e1c:	f3c2 2204 	ubfx	r2, r2, #8, #5
    3e20:	2a15      	cmp	r2, #21
    3e22:	bf88      	it	hi
    3e24:	3a20      	subhi	r2, #32
    3e26:	f3c3 6304 	ubfx	r3, r3, #24, #5
    3e2a:	e00a      	b.n	3e42 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x76>
    3e2c:	4b66      	ldr	r3, [pc, #408]	; (3fc8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1fc>)
    3e2e:	681a      	ldr	r2, [r3, #0]
    3e30:	4b66      	ldr	r3, [pc, #408]	; (3fcc <NOROM_SysCtrlSetRechargeBeforePowerDown+0x200>)
    3e32:	f3c2 6204 	ubfx	r2, r2, #24, #5
    3e36:	681b      	ldr	r3, [r3, #0]
    3e38:	2a15      	cmp	r2, #21
    3e3a:	bf88      	it	hi
    3e3c:	3a20      	subhi	r2, #32
    3e3e:	f3c3 4304 	ubfx	r3, r3, #16, #5
    3e42:	2b15      	cmp	r3, #21
    3e44:	440a      	add	r2, r1
    3e46:	bf88      	it	hi
    3e48:	3b20      	subhi	r3, #32
    3e4a:	2a15      	cmp	r2, #21
    3e4c:	dc05      	bgt.n	3e5a <NOROM_SysCtrlSetRechargeBeforePowerDown+0x8e>
    3e4e:	f06f 0109 	mvn.w	r1, #9
    3e52:	428a      	cmp	r2, r1
    3e54:	bfb8      	it	lt
    3e56:	460a      	movlt	r2, r1
    3e58:	e000      	b.n	3e5c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x90>
    3e5a:	2215      	movs	r2, #21
    3e5c:	4c5c      	ldr	r4, [pc, #368]	; (3fd0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x204>)
    3e5e:	f002 011f 	and.w	r1, r2, #31
    3e62:	f441 51f8 	orr.w	r1, r1, #7936	; 0x1f00
    3e66:	8021      	strh	r1, [r4, #0]
    3e68:	495a      	ldr	r1, [pc, #360]	; (3fd4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x208>)
    3e6a:	6809      	ldr	r1, [r1, #0]
    3e6c:	f011 0403 	ands.w	r4, r1, #3
    3e70:	bf18      	it	ne
    3e72:	2401      	movne	r4, #1
    3e74:	0749      	lsls	r1, r1, #29
    3e76:	bf48      	it	mi
    3e78:	f044 0402 	orrmi.w	r4, r4, #2
    3e7c:	b10f      	cbz	r7, 3e82 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xb6>
    3e7e:	f044 0404 	orr.w	r4, r4, #4
    3e82:	f996 1007 	ldrsb.w	r1, [r6, #7]
    3e86:	1a41      	subs	r1, r0, r1
    3e88:	2904      	cmp	r1, #4
    3e8a:	dc03      	bgt.n	3e94 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xc8>
    3e8c:	4949      	ldr	r1, [pc, #292]	; (3fb4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    3e8e:	7989      	ldrb	r1, [r1, #6]
    3e90:	428c      	cmp	r4, r1
    3e92:	d06f      	beq.n	3f74 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a8>
    3e94:	f1b0 010f 	subs.w	r1, r0, #15
    3e98:	9101      	str	r1, [sp, #4]
    3e9a:	f004 0101 	and.w	r1, r4, #1
    3e9e:	f8df a144 	ldr.w	sl, [pc, #324]	; 3fe4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x218>
    3ea2:	f004 0904 	and.w	r9, r4, #4
    3ea6:	f004 0802 	and.w	r8, r4, #2
    3eaa:	460f      	mov	r7, r1
    3eac:	d42a      	bmi.n	3f04 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x138>
    3eae:	9901      	ldr	r1, [sp, #4]
    3eb0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    3eb4:	ea4f 2e21 	mov.w	lr, r1, asr #8
    3eb8:	f1be 0f07 	cmp.w	lr, #7
    3ebc:	9101      	str	r1, [sp, #4]
    3ebe:	d801      	bhi.n	3ec4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xf8>
    3ec0:	d104      	bne.n	3ecc <NOROM_SysCtrlSetRechargeBeforePowerDown+0x100>
    3ec2:	e001      	b.n	3ec8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xfc>
    3ec4:	f04f 0e07 	mov.w	lr, #7
    3ec8:	2106      	movs	r1, #6
    3eca:	e000      	b.n	3ece <NOROM_SysCtrlSetRechargeBeforePowerDown+0x102>
    3ecc:	4671      	mov	r1, lr
    3ece:	f8df b118 	ldr.w	fp, [pc, #280]	; 3fe8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x21c>
    3ed2:	3101      	adds	r1, #1
    3ed4:	f85a c021 	ldr.w	ip, [sl, r1, lsl #2]
    3ed8:	f85b 1021 	ldr.w	r1, [fp, r1, lsl #2]
    3edc:	ebc1 0c0c 	rsb	ip, r1, ip
    3ee0:	fa5f f18c 	uxtb.w	r1, ip
    3ee4:	f1b9 0f00 	cmp.w	r9, #0
    3ee8:	d002      	beq.n	3ef0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x124>
    3eea:	f3cc 2b07 	ubfx	fp, ip, #8, #8
    3eee:	4459      	add	r1, fp
    3ef0:	f1b8 0f00 	cmp.w	r8, #0
    3ef4:	d002      	beq.n	3efc <NOROM_SysCtrlSetRechargeBeforePowerDown+0x130>
    3ef6:	f3cc 4b07 	ubfx	fp, ip, #16, #8
    3efa:	4459      	add	r1, fp
    3efc:	b12f      	cbz	r7, 3f0a <NOROM_SysCtrlSetRechargeBeforePowerDown+0x13e>
    3efe:	eb01 611c 	add.w	r1, r1, ip, lsr #24
    3f02:	e002      	b.n	3f0a <NOROM_SysCtrlSetRechargeBeforePowerDown+0x13e>
    3f04:	f04f 0e00 	mov.w	lr, #0
    3f08:	4671      	mov	r1, lr
    3f0a:	f85a a02e 	ldr.w	sl, [sl, lr, lsl #2]
    3f0e:	fa5f fc8a 	uxtb.w	ip, sl
    3f12:	f1b9 0f00 	cmp.w	r9, #0
    3f16:	d002      	beq.n	3f1e <NOROM_SysCtrlSetRechargeBeforePowerDown+0x152>
    3f18:	f3ca 2907 	ubfx	r9, sl, #8, #8
    3f1c:	44cc      	add	ip, r9
    3f1e:	f1b8 0f00 	cmp.w	r8, #0
    3f22:	d002      	beq.n	3f2a <NOROM_SysCtrlSetRechargeBeforePowerDown+0x15e>
    3f24:	f3ca 4807 	ubfx	r8, sl, #16, #8
    3f28:	44c4      	add	ip, r8
    3f2a:	b10f      	cbz	r7, 3f30 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x164>
    3f2c:	eb0c 6c1a 	add.w	ip, ip, sl, lsr #24
    3f30:	1a9b      	subs	r3, r3, r2
    3f32:	2b01      	cmp	r3, #1
    3f34:	bfb8      	it	lt
    3f36:	2301      	movlt	r3, #1
    3f38:	9f01      	ldr	r7, [sp, #4]
    3f3a:	2234      	movs	r2, #52	; 0x34
    3f3c:	4353      	muls	r3, r2
    3f3e:	eba7 270e 	sub.w	r7, r7, lr, lsl #8
    3f42:	4379      	muls	r1, r7
    3f44:	b2ed      	uxtb	r5, r5
    3f46:	436b      	muls	r3, r5
    3f48:	3180      	adds	r1, #128	; 0x80
    3f4a:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
    3f4e:	fbb3 f1f1 	udiv	r1, r3, r1
    3f52:	f64f 7cff 	movw	ip, #65535	; 0xffff
    3f56:	4561      	cmp	r1, ip
    3f58:	bf28      	it	cs
    3f5a:	4661      	movcs	r1, ip
    3f5c:	287f      	cmp	r0, #127	; 0x7f
    3f5e:	80b1      	strh	r1, [r6, #4]
    3f60:	dc05      	bgt.n	3f6e <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a2>
    3f62:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    3f66:	4298      	cmp	r0, r3
    3f68:	bfb8      	it	lt
    3f6a:	4618      	movlt	r0, r3
    3f6c:	e000      	b.n	3f70 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a4>
    3f6e:	207f      	movs	r0, #127	; 0x7f
    3f70:	71f0      	strb	r0, [r6, #7]
    3f72:	71b4      	strb	r4, [r6, #6]
    3f74:	4b18      	ldr	r3, [pc, #96]	; (3fd8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x20c>)
    3f76:	2100      	movs	r1, #0
    3f78:	681b      	ldr	r3, [r3, #0]
    3f7a:	6033      	str	r3, [r6, #0]
    3f7c:	88b3      	ldrh	r3, [r6, #4]
    3f7e:	2b1e      	cmp	r3, #30
    3f80:	bf9e      	ittt	ls
    3f82:	4a0c      	ldrls	r2, [pc, #48]	; (3fb4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    3f84:	231f      	movls	r3, #31
    3f86:	8093      	strhls	r3, [r2, #4]
    3f88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    3f8c:	d302      	bcc.n	3f94 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1c8>
    3f8e:	085b      	lsrs	r3, r3, #1
    3f90:	3101      	adds	r1, #1
    3f92:	e7f9      	b.n	3f88 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1bc>
    3f94:	4a11      	ldr	r2, [pc, #68]	; (3fdc <NOROM_SysCtrlSetRechargeBeforePowerDown+0x210>)
    3f96:	3b0f      	subs	r3, #15
    3f98:	430a      	orrs	r2, r1
    3f9a:	091b      	lsrs	r3, r3, #4
    3f9c:	ea42 03c3 	orr.w	r3, r2, r3, lsl #3
    3fa0:	4a06      	ldr	r2, [pc, #24]	; (3fbc <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f0>)
    3fa2:	6013      	str	r3, [r2, #0]
    3fa4:	4b0e      	ldr	r3, [pc, #56]	; (3fe0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x214>)
    3fa6:	2200      	movs	r2, #0
    3fa8:	601a      	str	r2, [r3, #0]
    3faa:	b003      	add	sp, #12
    3fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3fb0:	40090000 	andmi	r0, r9, r0
    3fb4:	20000624 	andcs	r0, r0, r4, lsr #12
    3fb8:	00a4fdfd 	strdeq	pc, [r4], sp	; <UNPREDICTABLE>
    3fbc:	40091030 	andmi	r1, r9, r0, lsr r0
    3fc0:	50003fb4 			; <UNDEFINED> instruction: 0x50003fb4
    3fc4:	50001388 	andpl	r1, r0, r8, lsl #7
    3fc8:	500012b8 			; <UNDEFINED> instruction: 0x500012b8
    3fcc:	5000113c 	andpl	r1, r0, ip, lsr r1
    3fd0:	4008626e 	andmi	r6, r8, lr, ror #4
    3fd4:	40082224 	andmi	r2, r8, r4, lsr #4
    3fd8:	40092008 	andmi	r2, r9, r8
    3fdc:	80a4e700 	adchi	lr, r4, r0, lsl #14
    3fe0:	40091034 	andmi	r1, r9, r4, lsr r0
    3fe4:	5000139c 	mulpl	r0, ip, r3
    3fe8:	50001398 	mulpl	r0, r8, r3

00003fec <NOROM_SysCtrlAdjustRechargeAfterPowerDown>:
    3fec:	b510      	push	{r4, lr}
    3fee:	4b14      	ldr	r3, [pc, #80]	; (4040 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x54>)
    3ff0:	681c      	ldr	r4, [r3, #0]
    3ff2:	b2a4      	uxth	r4, r4
    3ff4:	b314      	cbz	r4, 403c <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x50>
    3ff6:	f7ff f8df 	bl	31b8 <NOROM_AONBatMonTemperatureGetDegC>
    3ffa:	4b12      	ldr	r3, [pc, #72]	; (4044 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x58>)
    3ffc:	f993 2007 	ldrsb.w	r2, [r3, #7]
    4000:	4290      	cmp	r0, r2
    4002:	da05      	bge.n	4010 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x24>
    4004:	f06f 027f 	mvn.w	r2, #127	; 0x7f
    4008:	4290      	cmp	r0, r2
    400a:	bfb8      	it	lt
    400c:	4610      	movlt	r0, r2
    400e:	71d8      	strb	r0, [r3, #7]
    4010:	889a      	ldrh	r2, [r3, #4]
    4012:	490c      	ldr	r1, [pc, #48]	; (4044 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x58>)
    4014:	4294      	cmp	r4, r2
    4016:	d310      	bcc.n	403a <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x4e>
    4018:	4b0b      	ldr	r3, [pc, #44]	; (4048 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x5c>)
    401a:	6808      	ldr	r0, [r1, #0]
    401c:	681b      	ldr	r3, [r3, #0]
    401e:	1aa4      	subs	r4, r4, r2
    4020:	3302      	adds	r3, #2
    4022:	1a1b      	subs	r3, r3, r0
    4024:	2b1f      	cmp	r3, #31
    4026:	bf28      	it	cs
    4028:	231f      	movcs	r3, #31
    402a:	085b      	lsrs	r3, r3, #1
    402c:	40dc      	lsrs	r4, r3
    402e:	4414      	add	r4, r2
    4030:	f64f 72ff 	movw	r2, #65535	; 0xffff
    4034:	4294      	cmp	r4, r2
    4036:	bf28      	it	cs
    4038:	4614      	movcs	r4, r2
    403a:	808c      	strh	r4, [r1, #4]
    403c:	bd10      	pop	{r4, pc}
    403e:	bf00      	nop
    4040:	40091034 	andmi	r1, r9, r4, lsr r0
    4044:	20000624 	andcs	r0, r0, r4, lsr #12
    4048:	40092008 	andmi	r2, r9, r8

0000404c <NOROM_SysCtrlResetSourceGet>:
    404c:	4b04      	ldr	r3, [pc, #16]	; (4060 <NOROM_SysCtrlResetSourceGet+0x14>)
    404e:	681a      	ldr	r2, [r3, #0]
    4050:	0412      	lsls	r2, r2, #16
    4052:	bf5a      	itte	pl
    4054:	6818      	ldrpl	r0, [r3, #0]
    4056:	f3c0 0042 	ubfxpl	r0, r0, #1, #3
    405a:	2008      	movmi	r0, #8
    405c:	4770      	bx	lr
    405e:	bf00      	nop
    4060:	40090004 	andmi	r0, r9, r4

00004064 <NOROM_ChipInfo_GetChipFamily>:
    4064:	f64b 129a 	movw	r2, #47514	; 0xb99a
    4068:	4b10      	ldr	r3, [pc, #64]	; (40ac <NOROM_ChipInfo_GetChipFamily+0x48>)
    406a:	6818      	ldr	r0, [r3, #0]
    406c:	f3c0 300f 	ubfx	r0, r0, #12, #16
    4070:	4290      	cmp	r0, r2
    4072:	d106      	bne.n	4082 <NOROM_ChipInfo_GetChipFamily+0x1e>
    4074:	681b      	ldr	r3, [r3, #0]
    4076:	0f1b      	lsrs	r3, r3, #28
    4078:	2b0b      	cmp	r3, #11
    407a:	bf0c      	ite	eq
    407c:	2004      	moveq	r0, #4
    407e:	2000      	movne	r0, #0
    4080:	e011      	b.n	40a6 <NOROM_ChipInfo_GetChipFamily+0x42>
    4082:	f64b 13be 	movw	r3, #47550	; 0xb9be
    4086:	4298      	cmp	r0, r3
    4088:	d00a      	beq.n	40a0 <NOROM_ChipInfo_GetChipFamily+0x3c>
    408a:	f64b 3341 	movw	r3, #47937	; 0xbb41
    408e:	4298      	cmp	r0, r3
    4090:	d008      	beq.n	40a4 <NOROM_ChipInfo_GetChipFamily+0x40>
    4092:	f64b 3320 	movw	r3, #47904	; 0xbb20
    4096:	4298      	cmp	r0, r3
    4098:	bf14      	ite	ne
    409a:	20ff      	movne	r0, #255	; 0xff
    409c:	2002      	moveq	r0, #2
    409e:	e002      	b.n	40a6 <NOROM_ChipInfo_GetChipFamily+0x42>
    40a0:	2001      	movs	r0, #1
    40a2:	e000      	b.n	40a6 <NOROM_ChipInfo_GetChipFamily+0x42>
    40a4:	2003      	movs	r0, #3
    40a6:	b240      	sxtb	r0, r0
    40a8:	4770      	bx	lr
    40aa:	bf00      	nop
    40ac:	50001318 	andpl	r1, r0, r8, lsl r3

000040b0 <NOROM_ChipInfo_GetHwRevision>:
    40b0:	b538      	push	{r3, r4, r5, lr}
    40b2:	4b19      	ldr	r3, [pc, #100]	; (4118 <NOROM_ChipInfo_GetHwRevision+0x68>)
    40b4:	681d      	ldr	r5, [r3, #0]
    40b6:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
    40ba:	6818      	ldr	r0, [r3, #0]
    40bc:	0f2d      	lsrs	r5, r5, #28
    40be:	b2c4      	uxtb	r4, r0
    40c0:	2c80      	cmp	r4, #128	; 0x80
    40c2:	bf28      	it	cs
    40c4:	2400      	movcs	r4, #0
    40c6:	f7ff ffcd 	bl	4064 <NOROM_ChipInfo_GetChipFamily>
    40ca:	2804      	cmp	r0, #4
    40cc:	d821      	bhi.n	4112 <NOROM_ChipInfo_GetHwRevision+0x62>
    40ce:	e8df f000 	tbb	[pc, r0]
    40d2:	1b1b1303 	blne	6c8ce6 <__ccfg+0x6a8d3e>
    40d6:	3d01001c 	stccc	0, cr0, [r1, #-112]	; 0xffffff90
    40da:	2d07      	cmp	r5, #7
    40dc:	d819      	bhi.n	4112 <NOROM_ChipInfo_GetHwRevision+0x62>
    40de:	e8df f005 	tbb	[pc, r5]
    40e2:	18041811 	stmdane	r4, {r0, r4, fp, ip}
    40e6:	08061818 	stmdaeq	r6, {r3, r4, fp, ip}
    40ea:	2014      	movs	r0, #20
    40ec:	e012      	b.n	4114 <NOROM_ChipInfo_GetHwRevision+0x64>
    40ee:	2015      	movs	r0, #21
    40f0:	e010      	b.n	4114 <NOROM_ChipInfo_GetHwRevision+0x64>
    40f2:	f104 0016 	add.w	r0, r4, #22
    40f6:	e00a      	b.n	410e <NOROM_ChipInfo_GetHwRevision+0x5e>
    40f8:	b125      	cbz	r5, 4104 <NOROM_ChipInfo_GetHwRevision+0x54>
    40fa:	2d02      	cmp	r5, #2
    40fc:	d109      	bne.n	4112 <NOROM_ChipInfo_GetHwRevision+0x62>
    40fe:	f104 0014 	add.w	r0, r4, #20
    4102:	e004      	b.n	410e <NOROM_ChipInfo_GetHwRevision+0x5e>
    4104:	200a      	movs	r0, #10
    4106:	e005      	b.n	4114 <NOROM_ChipInfo_GetHwRevision+0x64>
    4108:	b91d      	cbnz	r5, 4112 <NOROM_ChipInfo_GetHwRevision+0x62>
    410a:	f104 000a 	add.w	r0, r4, #10
    410e:	b2c0      	uxtb	r0, r0
    4110:	e000      	b.n	4114 <NOROM_ChipInfo_GetHwRevision+0x64>
    4112:	20ff      	movs	r0, #255	; 0xff
    4114:	b240      	sxtb	r0, r0
    4116:	bd38      	pop	{r3, r4, r5, pc}
    4118:	50001318 	andpl	r1, r0, r8, lsl r3

0000411c <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated>:
    411c:	b508      	push	{r3, lr}
    411e:	f7ff ffa1 	bl	4064 <NOROM_ChipInfo_GetChipFamily>
    4122:	2801      	cmp	r0, #1
    4124:	d103      	bne.n	412e <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x12>
    4126:	f7ff ffc3 	bl	40b0 <NOROM_ChipInfo_GetHwRevision>
    412a:	2813      	cmp	r0, #19
    412c:	dc00      	bgt.n	4130 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x14>
    412e:	e7fe      	b.n	412e <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x12>
    4130:	bd08      	pop	{r3, pc}
	...

00004134 <AuxAdiDdiSafeWrite.constprop.1>:
    4134:	b538      	push	{r3, r4, r5, lr}
    4136:	4604      	mov	r4, r0
    4138:	460d      	mov	r5, r1
    413a:	f7ff f871 	bl	3220 <NOROM_CPUcpsid>
    413e:	4b06      	ldr	r3, [pc, #24]	; (4158 <AuxAdiDdiSafeWrite.constprop.1+0x24>)
    4140:	681a      	ldr	r2, [r3, #0]
    4142:	2a00      	cmp	r2, #0
    4144:	d0fb      	beq.n	413e <AuxAdiDdiSafeWrite.constprop.1+0xa>
    4146:	2201      	movs	r2, #1
    4148:	6025      	str	r5, [r4, #0]
    414a:	601a      	str	r2, [r3, #0]
    414c:	b918      	cbnz	r0, 4156 <AuxAdiDdiSafeWrite.constprop.1+0x22>
    414e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4152:	f7ff b869 	b.w	3228 <NOROM_CPUcpsie>
    4156:	bd38      	pop	{r3, r4, r5, pc}
    4158:	400c8000 	andmi	r8, ip, r0

0000415c <NOROM_DDI32RegWrite>:
    415c:	4408      	add	r0, r1
    415e:	4611      	mov	r1, r2
    4160:	f7ff bfe8 	b.w	4134 <AuxAdiDdiSafeWrite.constprop.1>

00004164 <memcpy>:
    4164:	b5f0      	push	{r4, r5, r6, r7, lr}
    4166:	46c6      	mov	lr, r8
    4168:	b500      	push	{lr}
    416a:	2a0f      	cmp	r2, #15
    416c:	d945      	bls.n	41fa <memcpy+0x96>
    416e:	000b      	movs	r3, r1
    4170:	2603      	movs	r6, #3
    4172:	4303      	orrs	r3, r0
    4174:	401e      	ands	r6, r3
    4176:	000c      	movs	r4, r1
    4178:	0003      	movs	r3, r0
    417a:	2e00      	cmp	r6, #0
    417c:	d142      	bne.n	4204 <memcpy+0xa0>
    417e:	0015      	movs	r5, r2
    4180:	3d10      	subs	r5, #16
    4182:	092d      	lsrs	r5, r5, #4
    4184:	46ac      	mov	ip, r5
    4186:	012d      	lsls	r5, r5, #4
    4188:	46a8      	mov	r8, r5
    418a:	4480      	add	r8, r0
    418c:	e000      	b.n	4190 <memcpy+0x2c>
    418e:	003b      	movs	r3, r7
    4190:	6867      	ldr	r7, [r4, #4]
    4192:	605f      	str	r7, [r3, #4]
    4194:	68e7      	ldr	r7, [r4, #12]
    4196:	60df      	str	r7, [r3, #12]
    4198:	001f      	movs	r7, r3
    419a:	6825      	ldr	r5, [r4, #0]
    419c:	601d      	str	r5, [r3, #0]
    419e:	68a5      	ldr	r5, [r4, #8]
    41a0:	3710      	adds	r7, #16
    41a2:	609d      	str	r5, [r3, #8]
    41a4:	3410      	adds	r4, #16
    41a6:	4543      	cmp	r3, r8
    41a8:	d1f1      	bne.n	418e <memcpy+0x2a>
    41aa:	4665      	mov	r5, ip
    41ac:	230f      	movs	r3, #15
    41ae:	240c      	movs	r4, #12
    41b0:	3501      	adds	r5, #1
    41b2:	012d      	lsls	r5, r5, #4
    41b4:	1949      	adds	r1, r1, r5
    41b6:	4013      	ands	r3, r2
    41b8:	1945      	adds	r5, r0, r5
    41ba:	4214      	tst	r4, r2
    41bc:	d025      	beq.n	420a <memcpy+0xa6>
    41be:	598c      	ldr	r4, [r1, r6]
    41c0:	51ac      	str	r4, [r5, r6]
    41c2:	3604      	adds	r6, #4
    41c4:	1b9c      	subs	r4, r3, r6
    41c6:	2c03      	cmp	r4, #3
    41c8:	d8f9      	bhi.n	41be <memcpy+0x5a>
    41ca:	2403      	movs	r4, #3
    41cc:	3b04      	subs	r3, #4
    41ce:	089b      	lsrs	r3, r3, #2
    41d0:	3301      	adds	r3, #1
    41d2:	009b      	lsls	r3, r3, #2
    41d4:	4022      	ands	r2, r4
    41d6:	18ed      	adds	r5, r5, r3
    41d8:	18c9      	adds	r1, r1, r3
    41da:	1e56      	subs	r6, r2, #1
    41dc:	2a00      	cmp	r2, #0
    41de:	d007      	beq.n	41f0 <memcpy+0x8c>
    41e0:	2300      	movs	r3, #0
    41e2:	e000      	b.n	41e6 <memcpy+0x82>
    41e4:	0023      	movs	r3, r4
    41e6:	5cca      	ldrb	r2, [r1, r3]
    41e8:	1c5c      	adds	r4, r3, #1
    41ea:	54ea      	strb	r2, [r5, r3]
    41ec:	429e      	cmp	r6, r3
    41ee:	d1f9      	bne.n	41e4 <memcpy+0x80>
    41f0:	bc04      	pop	{r2}
    41f2:	4690      	mov	r8, r2
    41f4:	bcf0      	pop	{r4, r5, r6, r7}
    41f6:	bc02      	pop	{r1}
    41f8:	4708      	bx	r1
    41fa:	0005      	movs	r5, r0
    41fc:	1e56      	subs	r6, r2, #1
    41fe:	2a00      	cmp	r2, #0
    4200:	d1ee      	bne.n	41e0 <memcpy+0x7c>
    4202:	e7f5      	b.n	41f0 <memcpy+0x8c>
    4204:	1e56      	subs	r6, r2, #1
    4206:	0005      	movs	r5, r0
    4208:	e7ea      	b.n	41e0 <memcpy+0x7c>
    420a:	001a      	movs	r2, r3
    420c:	e7f6      	b.n	41fc <memcpy+0x98>
    420e:	46c0      	nop			; (mov r8, r8)

00004210 <srand>:
    4210:	2200      	movs	r2, #0
    4212:	4b03      	ldr	r3, [pc, #12]	; (4220 <srand+0x10>)
    4214:	681b      	ldr	r3, [r3, #0]
    4216:	33a8      	adds	r3, #168	; 0xa8
    4218:	6018      	str	r0, [r3, #0]
    421a:	605a      	str	r2, [r3, #4]
    421c:	4770      	bx	lr
    421e:	46c0      	nop			; (mov r8, r8)
    4220:	20000110 	andcs	r0, r0, r0, lsl r1

00004224 <rand>:
    4224:	4b0a      	ldr	r3, [pc, #40]	; (4250 <rand+0x2c>)
    4226:	b510      	push	{r4, lr}
    4228:	681c      	ldr	r4, [r3, #0]
    422a:	34a8      	adds	r4, #168	; 0xa8
    422c:	6820      	ldr	r0, [r4, #0]
    422e:	6861      	ldr	r1, [r4, #4]
    4230:	4a08      	ldr	r2, [pc, #32]	; (4254 <rand+0x30>)
    4232:	4b09      	ldr	r3, [pc, #36]	; (4258 <rand+0x34>)
    4234:	f000 f844 	bl	42c0 <__aeabi_lmul>
    4238:	2201      	movs	r2, #1
    423a:	2300      	movs	r3, #0
    423c:	1880      	adds	r0, r0, r2
    423e:	4159      	adcs	r1, r3
    4240:	6020      	str	r0, [r4, #0]
    4242:	6061      	str	r1, [r4, #4]
    4244:	0048      	lsls	r0, r1, #1
    4246:	0840      	lsrs	r0, r0, #1
    4248:	bc10      	pop	{r4}
    424a:	bc02      	pop	{r1}
    424c:	4708      	bx	r1
    424e:	46c0      	nop			; (mov r8, r8)
    4250:	20000110 	andcs	r0, r0, r0, lsl r1
    4254:	4c957f2d 	ldcmi	15, cr7, [r5], {45}	; 0x2d
    4258:	5851f42d 	ldmdapl	r1, {r0, r2, r3, r5, sl, ip, sp, lr, pc}^

0000425c <time>:
    425c:	b510      	push	{r4, lr}
    425e:	4b0c      	ldr	r3, [pc, #48]	; (4290 <time+0x34>)
    4260:	b084      	sub	sp, #16
    4262:	0004      	movs	r4, r0
    4264:	2200      	movs	r2, #0
    4266:	6818      	ldr	r0, [r3, #0]
    4268:	4669      	mov	r1, sp
    426a:	f000 f813 	bl	4294 <_gettimeofday_r>
    426e:	2800      	cmp	r0, #0
    4270:	db09      	blt.n	4286 <time+0x2a>
    4272:	9800      	ldr	r0, [sp, #0]
    4274:	9901      	ldr	r1, [sp, #4]
    4276:	2c00      	cmp	r4, #0
    4278:	d001      	beq.n	427e <time+0x22>
    427a:	6020      	str	r0, [r4, #0]
    427c:	6061      	str	r1, [r4, #4]
    427e:	b004      	add	sp, #16
    4280:	bc10      	pop	{r4}
    4282:	bc04      	pop	{r2}
    4284:	4710      	bx	r2
    4286:	2001      	movs	r0, #1
    4288:	4240      	negs	r0, r0
    428a:	17c1      	asrs	r1, r0, #31
    428c:	e7f3      	b.n	4276 <time+0x1a>
    428e:	46c0      	nop			; (mov r8, r8)
    4290:	20000110 	andcs	r0, r0, r0, lsl r1

00004294 <_gettimeofday_r>:
    4294:	2300      	movs	r3, #0
    4296:	b570      	push	{r4, r5, r6, lr}
    4298:	4c08      	ldr	r4, [pc, #32]	; (42bc <_gettimeofday_r+0x28>)
    429a:	0005      	movs	r5, r0
    429c:	0008      	movs	r0, r1
    429e:	0011      	movs	r1, r2
    42a0:	6023      	str	r3, [r4, #0]
    42a2:	f000 f837 	bl	4314 <_gettimeofday>
    42a6:	1c43      	adds	r3, r0, #1
    42a8:	d002      	beq.n	42b0 <_gettimeofday_r+0x1c>
    42aa:	bc70      	pop	{r4, r5, r6}
    42ac:	bc02      	pop	{r1}
    42ae:	4708      	bx	r1
    42b0:	6823      	ldr	r3, [r4, #0]
    42b2:	2b00      	cmp	r3, #0
    42b4:	d0f9      	beq.n	42aa <_gettimeofday_r+0x16>
    42b6:	602b      	str	r3, [r5, #0]
    42b8:	e7f7      	b.n	42aa <_gettimeofday_r+0x16>
    42ba:	46c0      	nop			; (mov r8, r8)
    42bc:	20000b9c 	mulcs	r0, ip, fp

000042c0 <__aeabi_lmul>:
    42c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    42c2:	000f      	movs	r7, r1
    42c4:	0001      	movs	r1, r0
    42c6:	46c6      	mov	lr, r8
    42c8:	4684      	mov	ip, r0
    42ca:	0415      	lsls	r5, r2, #16
    42cc:	0400      	lsls	r0, r0, #16
    42ce:	0c14      	lsrs	r4, r2, #16
    42d0:	0c00      	lsrs	r0, r0, #16
    42d2:	0c09      	lsrs	r1, r1, #16
    42d4:	0c2d      	lsrs	r5, r5, #16
    42d6:	002e      	movs	r6, r5
    42d8:	4346      	muls	r6, r0
    42da:	434d      	muls	r5, r1
    42dc:	4360      	muls	r0, r4
    42de:	4361      	muls	r1, r4
    42e0:	1940      	adds	r0, r0, r5
    42e2:	0c34      	lsrs	r4, r6, #16
    42e4:	1824      	adds	r4, r4, r0
    42e6:	b500      	push	{lr}
    42e8:	42a5      	cmp	r5, r4
    42ea:	d903      	bls.n	42f4 <__aeabi_lmul+0x34>
    42ec:	2080      	movs	r0, #128	; 0x80
    42ee:	0240      	lsls	r0, r0, #9
    42f0:	4680      	mov	r8, r0
    42f2:	4441      	add	r1, r8
    42f4:	0c25      	lsrs	r5, r4, #16
    42f6:	186d      	adds	r5, r5, r1
    42f8:	4661      	mov	r1, ip
    42fa:	4359      	muls	r1, r3
    42fc:	437a      	muls	r2, r7
    42fe:	0430      	lsls	r0, r6, #16
    4300:	1949      	adds	r1, r1, r5
    4302:	0424      	lsls	r4, r4, #16
    4304:	0c00      	lsrs	r0, r0, #16
    4306:	1820      	adds	r0, r4, r0
    4308:	1889      	adds	r1, r1, r2
    430a:	bc04      	pop	{r2}
    430c:	4690      	mov	r8, r2
    430e:	bcf0      	pop	{r4, r5, r6, r7}
    4310:	bc04      	pop	{r2}
    4312:	4710      	bx	r2

00004314 <_gettimeofday>:
    4314:	2258      	movs	r2, #88	; 0x58
    4316:	2001      	movs	r0, #1
    4318:	4b01      	ldr	r3, [pc, #4]	; (4320 <_gettimeofday+0xc>)
    431a:	4240      	negs	r0, r0
    431c:	601a      	str	r2, [r3, #0]
    431e:	4770      	bx	lr
    4320:	20000b9c 	mulcs	r0, ip, fp
    4324:	6769654e 	strbvs	r6, [r9, -lr, asr #10]!
    4328:	756f6268 	strbvc	r6, [pc, #-616]!	; 40c8 <NOROM_ChipInfo_GetHwRevision+0x18>
    432c:	003a7372 	eorseq	r7, sl, r2, ror r3
    4330:	6e6e6143 	powvsem	f6, f6, f3
    4334:	6f20746f 	svcvs	0x0020746f
    4338:	206e6570 	rsbcs	r6, lr, r0, ror r5
    433c:	20766374 	rsbscs	r6, r6, r4, ror r3
    4340:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
    4344:	63616672 	cmnvs	r1, #119537664	; 0x7200000
    4348:	0a0d0065 	beq	3444e4 <__ccfg+0x32453c>
    434c:	756f7247 	strbvc	r7, [pc, #-583]!	; 410d <NOROM_ChipInfo_GetHwRevision+0x5d>
    4350:	64252070 	strtvs	r2, [r5], #-112	; 0xffffff90
    4354:	76654420 	strbtvc	r4, [r5], -r0, lsr #8
    4358:	20656369 	rsbcs	r6, r5, r9, ror #6
    435c:	20642523 	rsbcs	r2, r4, r3, lsr #10
    4360:	2f642528 	svccs	0x00642528
    4364:	72206425 	eorvc	r6, r0, #620756992	; 0x25000000
    4368:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
    436c:	0d297364 	stceq	3, cr7, [r9, #-400]!	; 0xfffffe70
    4370:	4728000a 	strmi	r0, [r8, -sl]!
    4374:	756f7229 	strbvc	r7, [pc, #-553]!	; 4153 <AuxAdiDdiSafeWrite.constprop.1+0x1f>
    4378:	44492070 	strbmi	r2, [r9], #-112	; 0xffffff90
    437c:	4e280a0d 	vmulmi.f32	s0, s16, s26
    4380:	20776529 	rsbscs	r6, r7, r9, lsr #10
    4384:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
    4388:	49206563 	stmdbmi	r0!, {r0, r1, r5, r6, r8, sl, sp, lr}
    438c:	280a0d44 	stmdacs	sl, {r2, r6, r8, sl, fp}
    4390:	6e692946 	vnmulvs.f16	s5, s18, s12	; <UNPREDICTABLE>
    4394:	656e2064 	strbvs	r2, [lr, #-100]!	; 0xffffff9c
    4398:	62686769 	rsbvs	r6, r8, #27525120	; 0x1a40000
    439c:	0d73726f 	lfmeq	f7, 2, [r3, #-444]!	; 0xfffffe44
    43a0:	2943280a 	stmdbcs	r3, {r1, r3, fp, sp}^
    43a4:	74616572 	strbtvc	r6, [r1], #-1394	; 0xfffffa8e
    43a8:	65722065 	ldrbvs	r2, [r2, #-101]!	; 0xffffff9b
    43ac:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
    43b0:	206e6f20 	rsbcs	r6, lr, r0, lsr #30
    43b4:	6769656e 	strbvs	r6, [r9, -lr, ror #10]!
    43b8:	726f6268 	rsbvc	r6, pc, #104, 4	; 0x80000006
    43bc:	44280a0d 	strtmi	r0, [r8], #-2573	; 0xfffff5f3
    43c0:	656c6529 	strbvs	r6, [ip, #-1321]!	; 0xfffffad7
    43c4:	72206574 	eorvc	r6, r0, #116, 10	; 0x1d000000
    43c8:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
    43cc:	6e6f2064 	cdpvs	0, 6, cr2, cr15, cr4, {3}
    43d0:	69656e20 	stmdbvs	r5!, {r5, r9, sl, fp, sp, lr}^
    43d4:	6f626867 	svcvs	0x00626867
    43d8:	280a0d72 	stmdacs	sl, {r1, r4, r5, r6, r8, sl, fp}
    43dc:	74652952 	strbtvc	r2, [r5], #-2386	; 0xfffff6ae
    43e0:	76656972 			; <UNDEFINED> instruction: 0x76656972
    43e4:	65722065 	ldrbvs	r2, [r2, #-101]!	; 0xffffff9b
    43e8:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
    43ec:	6f726620 	svcvs	0x00726620
    43f0:	656e206d 	strbvs	r2, [lr, #-109]!	; 0xffffff93
    43f4:	62686769 	rsbvs	r6, r8, #27525120	; 0x1a40000
    43f8:	0a0d726f 	beq	360dbc <__ccfg+0x340e14>
    43fc:	68295328 	stmdavs	r9!, {r3, r5, r8, r9, ip, lr}
    4400:	6c20776f 	stcvs	7, cr7, [r0], #-444	; 0xfffffe44
    4404:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
    4408:	63657220 	cmnvs	r5, #32, 4
    440c:	7364726f 	cmnvc	r4, #-268435450	; 0xf0000006
    4410:	28520a0d 	ldmdacs	r2, {r0, r2, r3, r9, fp}^
    4414:	65732965 	ldrbvs	r2, [r3, #-2405]!	; 0xfffff69b
    4418:	6f6c2074 	svcvs	0x006c2074
    441c:	206c6163 	rsbcs	r6, ip, r3, ror #2
    4420:	726f7473 	rsbvc	r7, pc, #1929379840	; 0x73000000
    4424:	0d656761 	stcleq	7, cr6, [r5, #-388]!	; 0xfffffe7c
    4428:	530a0d0a 	movwpl	r0, #44298	; 0xad0a
    442c:	63656c65 	cmnvs	r5, #25856	; 0x6500
    4430:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    4434:	2500203a 	strcs	r2, [r0, #-58]	; 0xffffffc6
    4438:	68530063 	ldmdavs	r3, {r0, r1, r5, r6}^
    443c:	4c20776f 	stcmi	7, cr7, [r0], #-444	; 0xfffffe44
    4440:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
    4444:	63655220 	cmnvs	r5, #32, 4
    4448:	7364726f 	cmnvc	r4, #-268435450	; 0xf0000006
    444c:	73655200 	cmnvc	r5, #0, 4
    4450:	4c207465 	cfstrsmi	mvf7, [r0], #-404	; 0xfffffe6c
    4454:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
    4458:	6f745320 	svcvs	0x00745320
    445c:	65676172 	strbvs	r6, [r7, #-370]!	; 0xfffffe8e
    4460:	77654e00 	strbvc	r4, [r5, -r0, lsl #28]!
    4464:	6f724720 	svcvs	0x00724720
    4468:	49207075 	stmdbmi	r0!, {r0, r2, r4, r5, r6, ip, sp, lr}
    446c:	00203a44 	eoreq	r3, r0, r4, asr #20
    4470:	2077654e 	rsbscs	r6, r7, lr, asr #10
    4474:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
    4478:	20444920 	subcs	r4, r4, r0, lsr #18
    447c:	322d3128 	eorcc	r3, sp, #40, 2
    4480:	003a2935 	eorseq	r2, sl, r5, lsr r9
    4484:	65636552 	strbvs	r6, [r3, #-1362]!	; 0xfffffaae
    4488:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    448c:	646f6e20 	strbtvs	r6, [pc], #-3616	; 4494 <_gettimeofday+0x180>
    4490:	44492065 	strbmi	r2, [r9], #-101	; 0xffffff9b
    4494:	2d312820 	ldccs	8, cr2, [r1, #-128]!	; 0xffffff80
    4498:	3a293532 	bcc	a51968 <__ccfg+0xa319c0>
    449c:	6c654400 	cfstrdvs	mvd4, [r5], #-0
    44a0:	20657465 	rsbcs	r7, r5, r5, ror #8
    44a4:	6f636552 	svcvs	0x00636552
    44a8:	66206472 			; <UNDEFINED> instruction: 0x66206472
    44ac:	206d6f72 	rsbcs	r6, sp, r2, ror pc
    44b0:	6769654e 	strbvs	r6, [r9, -lr, asr #10]!
    44b4:	756f6268 	strbvc	r6, [pc, #-616]!	; 4254 <rand+0x30>
    44b8:	0d0a3a72 	vstreq	s6, [sl, #-456]	; 0xfffffe38
    44bc:	74655200 	strbtvc	r5, [r5], #-512	; 0xfffffe00
    44c0:	76656972 			; <UNDEFINED> instruction: 0x76656972
    44c4:	65522065 	ldrbvs	r2, [r2, #-101]	; 0xffffff9b
    44c8:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
    44cc:	6f726620 	svcvs	0x00726620
    44d0:	654e206d 	strbvs	r2, [lr, #-109]	; 0xffffff93
    44d4:	62686769 	rsbvs	r6, r8, #27525120	; 0x1a40000
    44d8:	3a72756f 	bcc	1ca1a9c <__ccfg+0x1c81af4>
    44dc:	4e000d0a 	cdpmi	13, 0, cr0, cr0, cr10, {0}
    44e0:	68676965 	stmdavs	r7!, {r0, r2, r5, r6, r8, fp, sp, lr}^
    44e4:	72756f62 	rsbsvc	r6, r5, #392	; 0x188
    44e8:	646f6e20 	strbtvs	r6, [pc], #-3616	; 44f0 <_gettimeofday+0x1dc>
    44ec:	44492065 	strbmi	r2, [r9], #-101	; 0xffffff9b
    44f0:	2d312820 	ldccs	8, cr2, [r1, #-128]!	; 0xffffff80
    44f4:	3a293532 	bcc	a519c4 <__ccfg+0xa31a1c>
    44f8:	63655200 	cmnvs	r5, #0, 4
    44fc:	2064726f 	rsbcs	r7, r4, pc, ror #4
    4500:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
    4504:	 			; <UNDEFINED> instruction: 0x06003a78

00004507 <CSWTCH.47>:
    4507:	081a0606 	ldmdaeq	sl, {r1, r2, r9, sl}
    450b:	59531c08 	ldmdbpl	r3, {r3, sl, fp, ip}^
    450f:	52524553 	subspl	r4, r2, #348127232	; 0x14c00000
    4513:	7825203a 	stmdavc	r5!, {r1, r3, r4, r5, sp}
    4517:	7325202c 			; <UNDEFINED> instruction: 0x7325202c
    451b:	72617500 	rsbvc	r7, r1, #0, 10
    451f:	69617500 	stmdbvs	r1!, {r8, sl, ip, sp, lr}^
    4523:	63695000 	cmnvs	r9, #0
    4527:	7620534f 	strtvc	r5, [r0], -pc, asr #6
    452b:	2f342e35 	svccs	0x00342e35
    452f:	38314750 	ldmdacc	r1!, {r4, r6, r8, r9, sl, lr}
    4533:	32323230 	eorscc	r3, r2, #48, 4
    4537:	43432d41 	movtmi	r2, #15681	; 0x3d41
    453b:	30353331 	eorscc	r3, r5, r1, lsr r3
    453f:	55414c5f 	strbpl	r4, [r1, #-3167]	; 0xfffff3a1
    4543:	5848434e 	stmdapl	r8, {r1, r2, r3, r6, r8, r9, lr}^
    4547:	28202c4c 	stmdacs	r0!, {r2, r3, r6, sl, fp, sp}
    454b:	4f202943 	svcmi	0x00202943
    454f:	6e6f736c 	cdpvs	3, 6, cr7, cr15, cr12, {3}
    4553:	43207465 			; <UNDEFINED> instruction: 0x43207465
    4557:	756d6d6f 	strbvc	r6, [sp, #-3439]!	; 0xfffff291
    455b:	6163696e 	cmnvs	r3, lr, ror #18
    455f:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    4563:	32202c73 	eorcc	r2, r0, #29440	; 0x7300
    4567:	2d323030 	ldccs	0, cr3, [r2, #-192]!	; 0xffffff40
    456b:	38313032 	ldmdacc	r1!, {r1, r4, r5, ip, sp}
    456f:	66654c00 	strbtvs	r4, [r5], -r0, lsl #24
    4573:	65766f74 	ldrbvs	r6, [r6, #-3956]!	; 0xfffff08c
    4577:	41522072 	cmpmi	r2, r2, ror r0
    457b:	25203a4d 	strcs	r3, [r0, #-2637]!	; 0xfffff5b3
    457f:	79622064 	stmdbvc	r2!, {r2, r5, r6, sp}^
    4583:	00736574 	rsbseq	r6, r3, r4, ror r5
    4587:	50007473 	andpl	r7, r0, r3, ror r4
    458b:	534f6369 	movtpl	r6, #62313	; 0xf369
    458f:	6c616820 	stclvs	8, cr6, [r1], #-128	; 0xffffff80
    4593:	00646574 	rsbeq	r6, r4, r4, ror r5
	...

00004598 <port_confs>:
    4598:	00306080 	eorseq	r6, r0, r0, lsl #1
    459c:	00386080 	eorseq	r6, r8, r0, lsl #1
    45a0:	00186010 	andseq	r6, r8, r0, lsl r0
    45a4:	2010400f 	andscs	r4, r0, pc
    45a8:	30694000 	rsbcc	r4, r9, r0
    45ac:	30714000 	rsbscc	r4, r1, r0
    45b0:	00b86008 	adcseq	r6, r8, r8
    45b4:	60c94000 	sbcvs	r4, r9, r0
    45b8:	60d14000 	sbcsvs	r4, r1, r0
    45bc:	60d94000 	sbcsvs	r4, r9, r0
    45c0:	60e14000 	rscvs	r4, r1, r0
    45c4:	00096380 	andeq	r6, r9, r0, lsl #7
    45c8:	00f16b80 	rscseq	r6, r1, r0, lsl #23
    45cc:	20402000 	subcs	r2, r0, r0
    45d0:	00486080 	subeq	r6, r8, r0, lsl #1
    45d4:	00506080 	subseq	r6, r0, r0, lsl #1
    45d8:	00a06000 	adceq	r6, r0, r0
    45dc:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    45e0:	74750065 	ldrbtvc	r0, [r5], #-101	; 0xffffff9b
    45e4:	73006120 	movwvc	r6, #288	; 0x120
    45e8:	64610077 	strbtvs	r0, [r1], #-119	; 0xffffff89
    45ec:	69007664 	stmdbvs	r0, {r2, r5, r6, r9, sl, ip, sp, lr}
    45f0:	616d006f 	cmnvs	sp, pc, rrx
    45f4:	6d00316c 	stfvss	f3, [r0, #-432]	; 0xfffffe50
    45f8:	00676c61 	rsbeq	r6, r7, r1, ror #24
    45fc:	0069706b 	rsbeq	r7, r9, fp, rrx
    4600:	636c616d 	cmnvs	ip, #1073741851	; 0x4000001b
	...

00004605 <__pi_hex_enc_table>:
    4605:	33323130 	teqcc	r2, #48, 2
    4609:	37363534 			; <UNDEFINED> instruction: 0x37363534
    460d:	42413938 	submi	r3, r1, #56, 18	; 0xe0000
    4611:	46454443 	strbmi	r4, [r5], -r3, asr #8
    4615:	30766374 	rsbscc	r6, r6, r4, ror r3
    4619:	69640031 	stmdbvs	r4!, {r0, r4, r5}^
    461d:	736f7073 	cmnvc	pc, #115	; 0x73
    4621:	65732065 	ldrbvs	r2, [r3, #-101]!	; 0xffffff9b
    4625:	69640073 	stmdbvs	r4!, {r0, r1, r4, r5, r6}^
    4629:	736f7073 	cmnvc	pc, #115	; 0x73
    462d:	68702065 	ldmdavs	r0!, {r0, r2, r5, r6, sp}^
    4631:	63740079 	cmnvs	r4, #121	; 0x79
    4635:	00323076 	eorseq	r3, r2, r6, ror r0
    4639:	30766374 	rsbscc	r6, r6, r4, ror r3
    463d:	63740033 	cmnvs	r4, #51	; 0x33
    4641:	00343076 	eorseq	r3, r4, r6, ror r0
    4645:	30766374 	rsbscc	r6, r6, r4, ror r3
    4649:	63740035 	cmnvs	r4, #53	; 0x35
    464d:	00363076 	eorseq	r3, r6, r6, ror r0
    4651:	31766374 	cmncc	r6, r4, ror r3
    4655:	63740036 	cmnvs	r4, #54	; 0x36
    4659:	00373176 	eorseq	r3, r7, r6, ror r1
    465d:	31766374 	cmncc	r6, r4, ror r3
    4661:	63740038 	cmnvs	r4, #56	; 0x38
    4665:	00333276 	eorseq	r3, r3, r6, ror r2
    4669:	32766374 	rsbscc	r6, r6, #116, 6	; 0xd0000001
    466d:	63740032 	cmnvs	r4, #50	; 0x32
    4671:	00363276 	eorseq	r3, r6, r6, ror r2
    4675:	32766374 	rsbscc	r6, r6, #116, 6	; 0xd0000001
    4679:	63740037 	cmnvs	r4, #55	; 0x37
    467d:	00383276 	eorseq	r3, r8, r6, ror r2
    4681:	32766374 	rsbscc	r6, r6, #116, 6	; 0xd0000001
    4685:	63740039 	cmnvs	r4, #57	; 0x39
    4689:	00303376 	eorseq	r3, r0, r6, ror r3
    468d:	33766374 	cmncc	r6, #116, 6	; 0xd0000001
    4691:	63740031 	cmnvs	r4, #49	; 0x31
    4695:	00323376 	eorseq	r3, r2, r6, ror r3
    4699:	33766374 	cmncc	r6, #116, 6	; 0xd0000001
    469d:	63740033 	cmnvs	r4, #51	; 0x33
    46a1:	00343376 	eorseq	r3, r4, r6, ror r3

000046a5 <__input_pins>:
    46a5:	9c9b9a99 	vldmials	fp, {s18-s170}
	...

000046aa <__button_list>:
    46aa:	0e000d00 	cdpeq	13, 0, cr0, cr0, cr0, {0}
    46ae:	33316363 	teqcc	r1, #-1946157055	; 0x8c000001
    46b2:	00706f20 	rsbseq	r6, r0, r0, lsr #30
    46b6:	00317472 	eorseq	r7, r1, r2, ror r4
    46ba:	20505548 	subscs	r5, r0, r8, asr #10
    46be:	20786c25 	rsbscs	r6, r8, r5, lsr #24
    46c2:	00786c25 	rsbseq	r6, r8, r5, lsr #24
    46c6:	676e6168 	strbvs	r6, [lr, -r8, ror #2]!
    46ca:	30636920 	rsbcc	r6, r3, r0, lsr #18
    46ce:	50554800 	subspl	r4, r5, r0, lsl #16
    46d2:	786c2520 	stmdavc	ip!, {r5, r8, sl, sp}^
    46d6:	786c2520 	stmdavc	ip!, {r5, r8, sl, sp}^
    46da:	786c2520 	stmdavc	ip!, {r5, r8, sl, sp}^
    46de:	32747200 	rsbscc	r7, r4, #0, 4
    46e2:	44414200 	strbmi	r4, [r1], #-512	; 0xfffffe00
    46e6:	00585220 	subseq	r5, r8, r0, lsr #4
    46ea:	33316363 	teqcc	r1, #-1946157055	; 0x8c000001
    46ee:	00797020 	rsbseq	r7, r9, r0, lsr #32
    46f2:	33316363 	teqcc	r1, #-1946157055	; 0x8c000001
    46f6:	31636300 	cmncc	r3, r0, lsl #6
    46fa:	626d2033 	rsbvs	r2, sp, #51	; 0x33
    46fe:	31434300 	mrscc	r4, (UNDEF: 115)
    4702:	3a303533 	bcc	c11bd6 <__ccfg+0xbf1c2e>
    4706:	2c642520 	cfstr64cs	mvdx2, [r4], #-128	; 0xffffff80
    470a:	2c642520 	cfstr64cs	mvdx2, [r4], #-128	; 0xffffff80
    470e:	00642520 	rsbeq	r2, r4, r0, lsr #10

00004712 <patable>:
    4712:	12c304c0 	sbcne	r0, r3, #192, 8	; 0xc0000000
    4716:	184418c5 	stmdane	r4, {r0, r2, r6, r7, fp, ip}^
    471a:	32ce24c9 	sbccc	r2, lr, #-922746880	; 0xc9000000
    471e:	bc2b58d8 	stclt	8, cr5, [fp], #-864	; 0xfffffca0
	...

00004724 <patchGenfskRfe>:
    4724:	000061a3 	andeq	r6, r0, r3, lsr #3
    4728:	1307147f 	movwne	r1, #29823	; 0x747f
    472c:	24f1004d 	ldrbtcs	r0, [r1], #77	; 0x4d
    4730:	3f131f2e 	svccc	0x00131f2e
    4734:	003f0ab0 	ldrhteq	r0, [pc], -r0
    4738:	0000ff07 	andeq	pc, r0, r7, lsl #30
    473c:	40004030 	andmi	r4, r0, r0, lsr r0
    4740:	40034001 	andmi	r4, r3, r1
    4744:	400f4007 	andmi	r4, pc, r7
    4748:	40cf404f 	sbcmi	r4, pc, pc, asr #32
    474c:	43cf41cf 	bicmi	r4, pc, #-1073741773	; 0xc0000033
    4750:	4fcf47cf 	svcmi	0x00cf47cf
    4754:	2fcf3fcf 	svccs	0x00cf3fcf
    4758:	0fcf1fcf 	svceq	0x00cf1fcf
    475c:	00000000 	andeq	r0, r0, r0
    4760:	0008000f 	andeq	r0, r8, pc
    4764:	003f0000 	eorseq	r0, pc, r0
    4768:	00400000 	subeq	r0, r0, r0
    476c:	0000003f 	andeq	r0, r0, pc, lsr r0
    4770:	00680004 	rsbeq	r0, r8, r4
    4774:	00dc000e 	sbcseq	r0, ip, lr
    4778:	00430006 	subeq	r0, r3, r6
    477c:	0005001a 	andeq	r0, r5, sl, lsl r0
    4780:	00000000 	andeq	r0, r0, r0
    4784:	00000002 	andeq	r0, r0, r2
    4788:	0000003f 	andeq	r0, r0, pc, lsr r0
    478c:	00040000 	andeq	r0, r4, r0
    4790:	000000c0 	andeq	r0, r0, r0, asr #1
    4794:	00c00004 	sbceq	r0, r0, r4
    4798:	00070000 	andeq	r0, r7, r0
    479c:	9100c050 	qaddls	ip, r0, r0
    47a0:	c0707000 	rsbsgt	r7, r0, r0
    47a4:	70009100 	andvc	r9, r0, r0, lsl #2
    47a8:	00213182 	eoreq	r3, r1, r2, lsl #3
    47ac:	b1109131 	tstlt	r0, r1, lsr r1
    47b0:	81017000 	mrshi	r7, (UNDEF: 1)
    47b4:	a100b101 	tstge	r0, r1, lsl #2
    47b8:	91323182 	teqls	r2, r2, lsl #3
    47bc:	9101b110 	tstls	r1, r0, lsl r1
    47c0:	81411011 	cmphi	r1, r1, lsl r0
    47c4:	404f2241 	submi	r2, pc, r1, asr #4
    47c8:	700006f1 	strdvc	r0, [r0], -r1
    47cc:	9101c051 	qaddls	ip, r1, r1
    47d0:	39101830 	ldmdbcc	r0, {r4, r5, fp, ip}
    47d4:	d0083183 	andle	r3, r8, r3, lsl #3
    47d8:	6f413118 	svcvs	0x00413118
    47dc:	91310031 	teqls	r1, r1, lsr r0
    47e0:	1483b110 	strne	fp, [r3], #272	; 0x110
    47e4:	685b1614 	ldmdavs	fp, {r2, r4, r9, sl, ip}^
    47e8:	10257000 	eorne	r7, r5, r0
    47ec:	9100c050 	qaddls	ip, r0, r0
    47f0:	c0c0c3f4 	strdgt	ip, [r0], #52	; 0x34
    47f4:	6f031420 	svcvs	0x00031420
    47f8:	04411031 	strbeq	r1, [r1], #-49	; 0xffffffcf
    47fc:	3182c022 	orrcc	ip, r2, r2, lsr #32
    4800:	91310021 	teqls	r1, r1, lsr #32
    4804:	3963b110 	stmdbcc	r3!, {r4, r8, ip, sp, pc}^
    4808:	04411031 	strbeq	r1, [r1], #-49	; 0xffffffcf
    480c:	3182c082 	orrcc	ip, r2, r2, lsl #1
    4810:	91310021 	teqls	r1, r1, lsr #32
    4814:	3963b110 	stmdbcc	r3!, {r4, r8, ip, sp, pc}^
    4818:	c0a21031 	adcgt	r1, r2, r1, lsr r0
    481c:	00213182 	eoreq	r3, r1, r2, lsl #3
    4820:	b1109131 	tstlt	r0, r1, lsr r1
    4824:	31151050 	tstcc	r5, r0, asr r0
    4828:	92051405 	andls	r1, r5, #83886080	; 0x5000000
    482c:	643f7000 	ldrtvs	r7, [pc], #-0	; 4834 <patchGenfskRfe+0x110>
    4830:	1031c052 	eorsne	ip, r1, r2, asr r0
    4834:	31610631 	cmncc	r1, r1, lsr r6
    4838:	644202c1 	strbvs	r0, [r2], #-705	; 0xfffffd3f
    483c:	1031c112 	eorsne	ip, r1, r2, lsl r1
    4840:	06713921 	ldrbteq	r3, [r1], -r1, lsr #18
    4844:	02e13151 	rsceq	r3, r1, #1073741844	; 0x40000014
    4848:	70006442 	andvc	r6, r0, r2, asr #8
    484c:	6599658a 	ldrvs	r6, [r9, #1418]	; 0x58a
    4850:	8220c088 	eorhi	ip, r0, #136	; 0x88
    4854:	39803950 	stmibcc	r0, {r4, r6, r8, fp, ip, sp}
    4858:	409f1e00 	addsmi	r1, pc, r0, lsl #28
    485c:	3001c041 	andcc	ip, r1, r1, asr #32
    4860:	1a181418 	bne	6098c8 <__ccfg+0x5e9920>
    4864:	8230c089 	eorshi	ip, r0, #137	; 0x89
    4868:	39803960 	stmibcc	r0, {r5, r6, r8, fp, ip, sp}
    486c:	40a91e00 	adcmi	r1, r9, r0, lsl #28
    4870:	3001c041 	andcc	ip, r1, r1, asr #32
    4874:	1a191419 	bne	6498e0 <__ccfg+0x629938>
    4878:	9136643c 	teqls	r6, ip, lsr r4
    487c:	9134b110 	teqls	r4, r0, lsl r1
    4880:	b054b110 	subslt	fp, r4, r0, lsl r1
    4884:	a0547100 	subsge	r7, r4, r0, lsl #2
    4888:	80f0b064 	rscshi	fp, r0, r4, rrx
    488c:	40af2200 	adcmi	r2, pc, r0, lsl #4
    4890:	90b01240 	adcsls	r1, r0, r0, asr #4
    4894:	8253b032 	subshi	fp, r3, #50	; 0x32
    4898:	39533953 	ldmdbcc	r3, {r0, r1, r4, r6, r8, fp, ip, sp}^
    489c:	643f6485 	ldrtvs	r6, [pc], #-1157	; 48a4 <patchGenfskRfe+0x180>
    48a0:	c122c111 			; <UNDEFINED> instruction: 0xc122c111
    48a4:	c1706442 	cmngt	r0, r2, asr #8
    48a8:	c11168c2 	tstgt	r1, r2, asr #17
    48ac:	6442c0c2 	strbvs	ip, [r2], #-194	; 0xffffff3e
    48b0:	68c7c170 	stmiavs	r7, {r4, r5, r6, r8, lr, pc}^
    48b4:	9100c050 	qaddls	ip, r0, r0
    48b8:	92987227 	addsls	r7, r8, #1879048194	; 0x70000002
    48bc:	16141615 			; <UNDEFINED> instruction: 0x16141615
    48c0:	10531042 	subsne	r1, r3, r2, asr #32
    48c4:	8221c1f0 	eorhi	ip, r1, #240, 2	; 0x3c
    48c8:	39313131 	ldmdbcc	r1!, {r0, r4, r5, r8, ip, sp}
    48cc:	31313981 	teqcc	r1, r1, lsl #19
    48d0:	b270b051 	rsbslt	fp, r0, #81	; 0x51
    48d4:	72276572 	eorvc	r6, r7, #478150656	; 0x1c800000
    48d8:	b2709299 	rsbslt	r9, r0, #-1879048183	; 0x90000009
    48dc:	10731062 	rsbsne	r1, r3, r2, rrx
    48e0:	8231c3f0 	eorshi	ip, r1, #240, 6	; 0xc0000003
    48e4:	39213121 	stmdbcc	r1!, {r0, r5, r8, ip, sp}
    48e8:	101b3981 	andsne	r3, fp, r1, lsl #19
    48ec:	c0e26572 	rscgt	r6, r2, r2, ror r5
    48f0:	82603182 	rsbhi	r3, r0, #-2147483616	; 0x80000020
    48f4:	39803180 	stmibcc	r0, {r7, r8, ip, sp}
    48f8:	b0610002 	rsblt	r0, r1, r2
    48fc:	91327100 	teqls	r2, r0, lsl #2
    4900:	a051b110 	subsge	fp, r1, r0, lsl r1
    4904:	7227b061 	eorvc	fp, r7, #97	; 0x61
    4908:	68f3c230 	ldmvs	r3!, {r4, r5, r9, lr, pc}^
    490c:	12800000 	addne	r0, r0, #0
    4910:	b03290b0 	ldrhtlt	r9, [r2], -r0
    4914:	c0507000 	subsgt	r7, r0, r0
    4918:	72279100 	eorvc	r9, r7, #0, 2
    491c:	10629299 	mlsne	r2, r9, r2, r9
    4920:	c3f01073 	mvnsgt	r1, #115	; 0x73
    4924:	31218231 			; <UNDEFINED> instruction: 0x31218231
    4928:	39813921 	stmibcc	r1, {r0, r5, r8, fp, ip, sp}
    492c:	b270b051 	rsbslt	fp, r0, #81	; 0x51
    4930:	7227657e 	eorvc	r6, r7, #528482304	; 0x1f800000
    4934:	b2709298 	rsbslt	r9, r0, #152, 4	; 0x80000009
    4938:	10531042 	subsne	r1, r3, r2, asr #32
    493c:	8221c1f0 	eorhi	ip, r1, #240, 2	; 0x3c
    4940:	39313131 	ldmdbcc	r1!, {r0, r4, r5, r8, ip, sp}
    4944:	31313981 	teqcc	r1, r1, lsl #19
    4948:	657e101a 	ldrbvs	r1, [lr, #-26]!	; 0xffffffe6
    494c:	b061a051 	rsblt	sl, r1, r1, asr r0
    4950:	c0b07227 	adcsgt	r7, r0, r7, lsr #4
    4954:	643f6918 	ldrtvs	r6, [pc], #-2328	; 495c <patchGenfskRfe+0x238>
    4958:	c122c101 			; <UNDEFINED> instruction: 0xc122c101
    495c:	c1016442 	tstgt	r1, r2, asr #8
    4960:	6442c0c2 	strbvs	ip, [r2], #-194	; 0xffffff3e
    4964:	643c1a15 	ldrtvs	r1, [ip], #-2581	; 0xfffff5eb
    4968:	b1109135 	tstlt	r0, r5, lsr r1
    496c:	64858253 	strvs	r8, [r5], #595	; 0x253
    4970:	90b012c0 	adcsls	r1, r0, r0, asr #5
    4974:	7000b032 	andvc	fp, r0, r2, lsr r0
    4978:	c272643f 	rsbsgt	r6, r2, #1056964608	; 0x3f000000
    497c:	6442c081 	strbvs	ip, [r2], #-129	; 0xffffff7f
    4980:	c111c122 	tstgt	r1, r2, lsr #2
    4984:	c0026442 	andgt	r6, r2, r2, asr #8
    4988:	6442c111 	strbvs	ip, [r2], #-273	; 0xfffffeef
    498c:	c331c062 	teqgt	r1, #98	; 0x62
    4990:	c3626442 	cmngt	r2, #1107296256	; 0x42000000
    4994:	6442c111 	strbvs	ip, [r2], #-273	; 0xfffffeef
    4998:	c111c302 	tstgt	r1, r2, lsl #6
    499c:	82536442 	subshi	r6, r3, #1107296256	; 0x42000000
    49a0:	64853953 	strvs	r3, [r5], #2387	; 0x953
    49a4:	6447c3e2 	strbvs	ip, [r7], #-994	; 0xfffffc1e
    49a8:	41402211 	cmpmi	r0, r1, lsl r2
    49ac:	c881c242 	stmgt	r1, {r1, r6, r9, lr, pc}
    49b0:	c2526442 	subsgt	r6, r2, #1107296256	; 0x42000000
    49b4:	6442c111 	strbvs	ip, [r2], #-273	; 0xfffffeef
    49b8:	cee1c272 	mcrgt	2, 7, ip, cr1, cr2, {3}
    49bc:	c2026442 	andgt	r6, r2, #1107296256	; 0x42000000
    49c0:	6442c881 	strbvs	ip, [r2], #-2177	; 0xfffff77f
    49c4:	c801c202 	stmdagt	r1, {r1, r9, lr, pc}
    49c8:	c0b06442 	adcsgt	r6, r0, r2, asr #8
    49cc:	70006954 	andvc	r6, r0, r4, asr r9
    49d0:	c242643f 	subgt	r6, r2, #1056964608	; 0x3f000000
    49d4:	6442c801 	strbvs	ip, [r2], #-2049	; 0xfffff7ff
    49d8:	c011c252 	andsgt	ip, r1, r2, asr r2
    49dc:	c2726442 	rsbsgt	r6, r2, #1107296256	; 0x42000000
    49e0:	6442c0e1 	strbvs	ip, [r2], #-225	; 0xffffff1f
    49e4:	c101c002 	tstgt	r1, r2
    49e8:	c0626442 	rsbgt	r6, r2, r2, asr #8
    49ec:	6442c301 	strbvs	ip, [r2], #-769	; 0xfffffcff
    49f0:	c101c122 	tstgt	r1, r2, lsr #2
    49f4:	c3626442 	cmngt	r2, #1107296256	; 0x42000000
    49f8:	6442c101 	strbvs	ip, [r2], #-257	; 0xfffffeff
    49fc:	c101c302 	tstgt	r1, r2, lsl #6
    4a00:	82536442 	subshi	r6, r3, #1107296256	; 0x42000000
    4a04:	70006485 	andvc	r6, r0, r5, lsl #9
    4a08:	7100b061 	tstvc	r0, r1, rrx
    4a0c:	1c231412 	cfstrsne	mvf1, [r3], #-72	; 0xffffffb8
    4a10:	91334d7a 	teqls	r3, sl, ror sp
    4a14:	7000b110 	andvc	fp, r0, r0, lsl r1
    4a18:	b1109132 	tstlt	r0, r2, lsr r1
    4a1c:	70006972 	andvc	r6, r0, r2, ror r9
    4a20:	7100b061 	tstvc	r0, r1, rrx
    4a24:	1c321813 	ldcne	8, cr1, [r2], #-76	; 0xffffffb4
    4a28:	91324986 	teqls	r2, r6, lsl #19
    4a2c:	7000b110 	andvc	fp, r0, r0, lsl r1
    4a30:	b1109133 	tstlt	r0, r3, lsr r1
    4a34:	7000697e 	andvc	r6, r0, lr, ror r9
    4a38:	6447c0c2 	strbvs	ip, [r7], #-194	; 0xffffff3e
    4a3c:	c0c21015 	sbcgt	r1, r2, r5, lsl r0
    4a40:	64471612 	strbvs	r1, [r7], #-1554	; 0xfffff9ee
    4a44:	14153141 	ldrne	r3, [r5], #-321	; 0xfffffebf
    4a48:	3180c0c0 	orrcc	ip, r0, r0, asr #1
    4a4c:	10541405 	subsne	r1, r4, r5, lsl #8
    4a50:	040478a0 	streq	r7, [r4], #-2208	; 0xfffff760
    4a54:	c0e67000 	rscgt	r7, r6, r0
    4a58:	cc013186 	stfgts	f3, [r1], {134}	; 0x86
    4a5c:	10671416 	rsbne	r1, r7, r6, lsl r4
    4a60:	c3f08261 	mvnsgt	r8, #268435462	; 0x10000006
    4a64:	14170401 	ldrne	r0, [r7], #-1025	; 0xfffffbff
    4a68:	73067000 	movwvc	r7, #24576	; 0x6000
    4a6c:	720b7205 	andvc	r7, fp, #1342177280	; 0x50000000
    4a70:	b050720e 	subslt	r7, r0, lr, lsl #4
    4a74:	80817100 	addhi	r7, r1, r0, lsl #2
    4a78:	a050b060 	subsge	fp, r0, r0, rrx
    4a7c:	22418092 	subcs	r8, r1, #146	; 0x92
    4a80:	808045c3 	addhi	r4, r0, r3, asr #11
    4a84:	0410c1f1 	ldreq	ip, [r0], #-497	; 0xfffffe0f
    4a88:	11011630 	tstne	r1, r0, lsr r6
    4a8c:	6c011401 	cfstrsvs	mvf1, [r1], {1}
    4a90:	61d761d6 	ldrsbvs	r6, [r7, #22]
    4a94:	61d961d8 	ldrsbvs	r6, [r9, #24]
    4a98:	61db61da 	ldrsbvs	r6, [fp, #26]
    4a9c:	61de61dc 	ldrsbvs	r6, [lr, #28]
    4aa0:	61e261e0 	mvnvs	r6, r0, ror #3
    4aa4:	633661e4 	teqvs	r6, #228, 2	; 0x39
    4aa8:	80916339 	addshi	r6, r1, r9, lsr r3
    4aac:	0421c0f2 	strteq	ip, [r1], #-242	; 0xffffff0e
    4ab0:	80823121 	addhi	r3, r2, r1, lsr #2
    4ab4:	14122a42 	ldrne	r2, [r2], #-2626	; 0xfffff5be
    4ab8:	11011632 	tstne	r1, r2, lsr r6
    4abc:	6c011421 	cfstrsvs	mvf1, [r1], {33}	; 0x21
    4ac0:	620b61ee 	andvs	r6, fp, #-2147483589	; 0x8000003b
    4ac4:	633961f4 	teqvs	r9, #244, 2	; 0x3d
    4ac8:	620b61ee 	andvs	r6, fp, #-2147483589	; 0x8000003b
    4acc:	633961f4 	teqvs	r9, #244, 2	; 0x3d
    4ad0:	61e661e6 	mvnvs	r6, r6, ror #3
    4ad4:	61e661e6 	mvnvs	r6, r6, ror #3
    4ad8:	61e661e6 	mvnvs	r6, r6, ror #3
    4adc:	61e66494 			; <UNDEFINED> instruction: 0x61e66494
    4ae0:	61e664f9 	strdvs	r6, [r6, #73]!	; 0x49
    4ae4:	61e6652a 	mvnvs	r6, sl, lsr #10
    4ae8:	61e66556 	mvnvs	r6, r6, asr r5
    4aec:	61e66746 	mvnvs	r6, r6, asr #14
    4af0:	90b01210 	adcsls	r1, r0, r0, lsl r2
    4af4:	7306720e 	movwvc	r7, #25102	; 0x620e
    4af8:	12107205 	andsne	r7, r0, #1342177280	; 0x50000000
    4afc:	61a79030 			; <UNDEFINED> instruction: 0x61a79030
    4b00:	673ccff0 			; <UNDEFINED> instruction: 0x673ccff0
    4b04:	c003c1d4 	ldrdgt	ip, [r3], -r4
    4b08:	6454c3c0 	ldrbvs	ip, [r4], #-960	; 0xfffffc40
    4b0c:	91507840 	cmpls	r0, r0, asr #16
    4b10:	92107850 	andsls	r7, r0, #80, 16	; 0x500000
    4b14:	92207860 	eorls	r7, r0, #96, 16	; 0x600000
    4b18:	92307870 	eorsls	r7, r0, #112, 16	; 0x700000
    4b1c:	92407880 	subls	r7, r0, #128, 16	; 0x800000
    4b20:	92607890 	rsbls	r7, r0, #144, 16	; 0x900000
    4b24:	91907830 	orrsls	r7, r0, r0, lsr r8
    4b28:	39408210 	stmdbcc	r0, {r4, r9, pc}^
    4b2c:	100106f0 	strdne	r0, [r1], -r0	; <UNPREDICTABLE>
    4b30:	14103110 	ldrne	r3, [r0], #-272	; 0xfffffef0
    4b34:	67429200 	strbvs	r9, [r2, -r0, lsl #4]
    4b38:	a0bc61e6 	adcsge	r6, ip, r6, ror #3
    4b3c:	a054a0e2 	subsge	sl, r4, r2, ror #1
    4b40:	225080f0 	subscs	r8, r0, #240	; 0xf0
    4b44:	80404615 	subhi	r4, r0, r5, lsl r6
    4b48:	472b2200 	strmi	r2, [fp, -r0, lsl #4]!
    4b4c:	a040620d 	subge	r6, r0, sp, lsl #4
    4b50:	318d822d 	orrcc	r8, sp, sp, lsr #4
    4b54:	8210398d 	andshi	r3, r0, #2310144	; 0x234000
    4b58:	0410c0f1 	ldreq	ip, [r0], #-241	; 0xffffff0f
    4b5c:	821a1009 	andshi	r1, sl, #9
    4b60:	041a394a 	ldreq	r3, [sl], #-2378	; 0xfffff6b6
    4b64:	39808210 	stmibcc	r0, {r4, r9, pc}
    4b68:	100e0410 	andne	r0, lr, r0, lsl r4
    4b6c:	10bc10ab 	adcsne	r1, ip, fp, lsr #1
    4b70:	646310c2 	strbtvs	r1, [r3], #-194	; 0xffffff3e
    4b74:	cfe07229 	svcgt	0x00e07229
    4b78:	b013673c 	andslt	r6, r3, ip, lsr r7
    4b7c:	66c8b003 	strbvs	fp, [r8], r3
    4b80:	b050b053 	subslt	fp, r0, r3, asr r0
    4b84:	b064b054 	rsblt	fp, r4, r4, asr r0
    4b88:	66a5b013 	ssatvs	fp, #6, r3
    4b8c:	22e08210 	rsccs	r8, r0, #16, 4
    4b90:	66ae4638 			; <UNDEFINED> instruction: 0x66ae4638
    4b94:	80417100 	subhi	r7, r1, r0, lsl #2
    4b98:	472b2201 	strmi	r2, [fp, -r1, lsl #4]!
    4b9c:	221080f0 	andscs	r8, r0, #240	; 0xf0
    4ba0:	22f0464b 	rscscs	r4, r0, #78643200	; 0x4b00000
    4ba4:	b0644718 	rsblt	r4, r4, r8, lsl r7
    4ba8:	42382231 	eorsmi	r2, r8, #268435459	; 0x10000003
    4bac:	66ceb063 	strbvs	fp, [lr], r3, rrx
    4bb0:	22e08210 	rsccs	r8, r0, #16, 4
    4bb4:	66704638 			; <UNDEFINED> instruction: 0x66704638
    4bb8:	b0646238 	rsblt	r6, r4, r8, lsr r2
    4bbc:	318f816f 	orrcc	r8, pc, pc, ror #2
    4bc0:	dfd03d8f 	svcle	0x00d03d8f
    4bc4:	673c92ff 			; <UNDEFINED> instruction: 0x673c92ff
    4bc8:	80417100 	subhi	r7, r1, r0, lsl #2
    4bcc:	472b2201 	strmi	r2, [fp, -r1, lsl #4]!
    4bd0:	80f0b064 	rscshi	fp, r0, r4, rrx
    4bd4:	42652250 	rsbmi	r2, r5, #80, 4
    4bd8:	8211b063 	andshi	fp, r1, #99	; 0x63
    4bdc:	466022c1 	strbtmi	r2, [r0], -r1, asr #5
    4be0:	670566ce 	strvs	r6, [r5, -lr, asr #13]
    4be4:	22d18211 	sbcscs	r8, r1, #268435457	; 0x10000001
    4be8:	66704652 			; <UNDEFINED> instruction: 0x66704652
    4bec:	81616252 	cmnhi	r1, r2, asr r2
    4bf0:	31818172 	orrcc	r8, r1, r2, ror r1
    4bf4:	31823d81 	orrcc	r3, r2, r1, lsl #27
    4bf8:	efc03d82 	svc	0x00c03d82
    4bfc:	930292f1 	movwls	r9, #8945	; 0x22f1
    4c00:	620b673c 	andvs	r6, fp, #60, 14	; 0xf00000
    4c04:	91c081b0 	strhls	r8, [r0, #16]
    4c08:	829781d3 	addshi	r8, r7, #-1073741772	; 0xc0000034
    4c0c:	18d3a290 	ldmne	r3, {r4, r7, r9, sp, pc}^
    4c10:	0bf34e7f 	bleq	ffcd8614 <_estack+0xdfcd3614>
    4c14:	1ce31613 	stclne	6, cr1, [r3], #76	; 0x4c
    4c18:	91c34aa4 	bicls	r4, r3, r4, lsr #21
    4c1c:	143b81e3 	ldrtne	r8, [fp], #-483	; 0xfffffe1d
    4c20:	1cba6290 	lfmne	f6, 4, [sl], #576	; 0x240
    4c24:	1e23468b 	cfmadda32ne	mvax4, mvax4, mvfx3, mvfx11
    4c28:	1ce34a8b 	vstmiane	r3!, {s9-s147}
    4c2c:	b2904e8b 	addslt	r4, r0, #2224	; 0x8b0
    4c30:	428b2207 	addmi	r2, fp, #1879048192	; 0x70000000
    4c34:	1a1ba290 	bne	6ed67c <__ccfg+0x6cd6d4>
    4c38:	1ce36296 	sfmne	f6, 2, [r3], #600	; 0x258
    4c3c:	91c34aa4 	bicls	r4, r3, r4, lsr #21
    4c40:	183b81e3 	ldmdane	fp!, {r0, r1, r5, r6, r7, r8, pc}
    4c44:	4ea01cab 	cdpmi	12, 10, cr1, cr0, cr11, {5}
    4c48:	4aa21c9b 	bmi	fe88bebc <_estack+0xde886ebc>
    4c4c:	42a41cbc 	adcmi	r1, r4, #188, 24	; 0xbc00
    4c50:	821010b2 	andshi	r1, r0, #178	; 0xb2
    4c54:	429d22d0 	addsmi	r2, sp, #208, 4
    4c58:	221080f0 	andscs	r8, r0, #240	; 0xf0
    4c5c:	646346a4 	strbtvs	r4, [r3], #-1700	; 0xfffff95c
    4c60:	62a466a5 	adcvs	r6, r4, #173015040	; 0xa500000
    4c64:	629410ab 	addsvs	r1, r4, #171	; 0xab
    4c68:	6294109b 	addsvs	r1, r4, #155	; 0x9b
    4c6c:	82307000 	eorshi	r7, r0, #0
    4c70:	0410c0f1 	ldreq	ip, [r0], #-241	; 0xffffff0f
    4c74:	7100b063 	tstvc	r0, r3, rrx
    4c78:	10bc6aa8 	adcsne	r6, ip, r8, lsr #21
    4c7c:	7000b0e0 	andvc	fp, r0, r0, ror #1
    4c80:	91c281b2 	strhls	r8, [r2, #18]
    4c84:	820181d2 	andhi	r8, r1, #-2147483596	; 0x80000034
    4c88:	81511812 	cmphi	r1, r2, lsl r8
    4c8c:	82411812 	subhi	r1, r1, #1179648	; 0x120000
    4c90:	3d813181 	stfccs	f3, [r1, #516]	; 0x204
    4c94:	4abf1c12 	bmi	fefcbce4 <_estack+0xdefc6ce4>
    4c98:	b032b0e2 	eorslt	fp, r2, r2, ror #1
    4c9c:	92f2dfb0 	rscsls	sp, r2, #176, 30	; 0x2c0
    4ca0:	c7f1673c 			; <UNDEFINED> instruction: 0xc7f1673c
    4ca4:	4ec31421 	cdpmi	4, 12, cr1, cr3, cr1, {1}
    4ca8:	9162c812 	cmnls	r2, r2, lsl r8
    4cac:	b0319172 	eorslt	r9, r1, r2, ror r1
    4cb0:	7000b0e1 	andvc	fp, r0, r1, ror #1
    4cb4:	c006c008 	andgt	ip, r6, r8
    4cb8:	9160c800 	cmnls	r0, r0, lsl #16
    4cbc:	70009170 	andvc	r9, r0, r0, ror r1
    4cc0:	81b08201 	lslshi	r8, r1, #4
    4cc4:	81d091c0 	bicshi	r9, r0, r0, asr #3
    4cc8:	81511810 	cmphi	r1, r0, lsl r8
    4ccc:	14061810 	strne	r1, [r6], #-2064	; 0xfffff7f0
    4cd0:	824280e1 	subhi	r8, r2, #225	; 0xe1
    4cd4:	3d823182 	stfccs	f3, [r2, #520]	; 0x208
    4cd8:	4ae41c20 	bmi	ff90bd60 <_estack+0xdf906d60>
    4cdc:	2221b0e2 	eorcs	fp, r1, #226	; 0xe2
    4ce0:	b03246e8 	eorslt	r4, r2, r8, ror #13
    4ce4:	dfa01005 	svcle	0x00a01005
    4ce8:	673c92f5 			; <UNDEFINED> instruction: 0x673c92f5
    4cec:	42e82221 	rscmi	r2, r8, #268435458	; 0x10000002
    4cf0:	b032a0e2 	eorslt	sl, r2, r2, ror #1
    4cf4:	39418231 	stmdbcc	r1, {r0, r4, r5, r9, pc}^
    4cf8:	0401c0f0 	streq	ip, [r1], #-240	; 0xffffff10
    4cfc:	42f61e01 	rscsmi	r1, r6, #1, 28
    4d00:	c0101618 	andsgt	r1, r0, r8, lsl r6
    4d04:	1c083010 	stcne	0, cr3, [r8], {16}
    4d08:	10604704 	rsbne	r4, r0, r4, lsl #14
    4d0c:	10063c10 	andne	r3, r6, r0, lsl ip
    4d10:	1461c7f1 	strbtne	ip, [r1], #-2033	; 0xfffff80f
    4d14:	c8164efa 	ldmdagt	r6, {r1, r3, r4, r5, r6, r7, r9, sl, fp, lr}
    4d18:	81719166 	cmnhi	r1, r6, ror #2
    4d1c:	3d813181 	stfccs	f3, [r1, #516]	; 0x204
    4d20:	4b011c16 	blmi	4bd80 <__ccfg+0x2bdd8>
    4d24:	b0319176 	eorslt	r9, r1, r6, ror r1
    4d28:	c008c006 	andgt	ip, r8, r6
    4d2c:	81617000 	cmnhi	r1, r0
    4d30:	3d813181 	stfccs	f3, [r1, #516]	; 0x204
    4d34:	39808240 	stmibcc	r0, {r6, r9, pc}
    4d38:	1cf11801 	ldclne	8, cr1, [r1], #4
    4d3c:	14014b17 	strne	r4, [r1], #-2839	; 0xfffff4e9
    4d40:	22c080b0 	sbccs	r8, r0, #176	; 0xb0
    4d44:	b0bc4717 	adcslt	r4, ip, r7, lsl r7
    4d48:	ef90b033 	svc	0x0090b033
    4d4c:	930f92f1 	movwls	r9, #62193	; 0xf2f1
    4d50:	7000673c 	andvc	r6, r0, ip, lsr r7
    4d54:	b063a003 	rsblt	sl, r3, r3
    4d58:	b0efb064 	rsclt	fp, pc, r4, rrx
    4d5c:	71006556 	tstvc	r0, r6, asr r5
    4d60:	22008040 	andcs	r8, r0, #64	; 0x40
    4d64:	b064472b 	rsblt	r4, r4, fp, lsr #14
    4d68:	a0ef652a 	rscge	r6, pc, sl, lsr #10
    4d6c:	80407100 	subhi	r7, r0, r0, lsl #2
    4d70:	472b2200 	strmi	r2, [fp, -r0, lsl #4]!
    4d74:	b003b064 	andlt	fp, r3, r4, rrx
    4d78:	82016238 	andhi	r6, r1, #56, 4	; 0x80000003
    4d7c:	31828162 	orrcc	r8, r2, r2, ror #2
    4d80:	ef803d82 	svc	0x00803d82
    4d84:	930292f1 	movwls	r9, #8945	; 0x22f1
    4d88:	a003673c 	andge	r6, r3, ip, lsr r7
    4d8c:	61e66556 	mvnvs	r6, r6, asr r5
    4d90:	646380a2 	strbtvs	r8, [r3], #-162	; 0xffffff5e
    4d94:	b05061e6 	subslt	r6, r0, r6, ror #3
    4d98:	61e67100 	mvnvs	r7, r0, lsl #2
    4d9c:	82d092e0 	sbcshi	r9, r0, #224, 4
    4da0:	473d2200 	ldrmi	r2, [sp, -r0, lsl #4]!
    4da4:	7000b2c0 	andvc	fp, r0, r0, asr #5
    4da8:	22f080a0 	rscscs	r8, r0, #160	; 0xa0
    4dac:	b0304359 	eorslt	r4, r0, r9, asr r3
    4db0:	3162c102 	cmncc	r2, r2, lsl #2
    4db4:	80a0c001 	adchi	ip, r0, r1
    4db8:	43521e00 	cmpmi	r2, #0, 28
    4dbc:	435322f0 	cmpmi	r3, #240, 4
    4dc0:	3160f5a0 	msrcc	SPSR_, r0, lsr #11
    4dc4:	63533960 	cmpvs	r3, #96, 18	; 0x180000
    4dc8:	1a101020 	bne	408e50 <__ccfg+0x3e8ea8>
    4dcc:	6e236f13 	mcrvs	15, 1, r6, cr3, cr3, {0}
    4dd0:	16121611 			; <UNDEFINED> instruction: 0x16121611
    4dd4:	70006b54 	andvc	r6, r0, r4, asr fp

00004dd8 <patchImageGenfsk>:
    4dd8:	210004ad 	smlatbcs	r0, sp, r4, r0
    4ddc:	21000449 	tstcs	r0, r9, asr #8
    4de0:	2100047d 	tstcs	r0, sp, ror r4
    4de4:	21000481 	smlabbcs	r0, r1, r4, r0
    4de8:	21000511 	tstcs	r0, r1, lsl r5
    4dec:	21000591 			; <UNDEFINED> instruction: 0x21000591
    4df0:	21000641 	tstcs	r0, r1, asr #12
    4df4:	4710b5f8 			; <UNDEFINED> instruction: 0x4710b5f8
    4df8:	460eb5f8 			; <UNDEFINED> instruction: 0x460eb5f8
    4dfc:	25012100 	strcs	r2, [r1, #-256]	; 0xffffff00
    4e00:	473004ad 	ldrmi	r0, [r0, -sp, lsr #9]!
    4e04:	7803480a 	stmdavc	r3, {r1, r3, fp, lr}
    4e08:	f80ff000 			; <UNDEFINED> instruction: 0xf80ff000
    4e0c:	d00b079b 	mulle	fp, fp, r7
    4e10:	78204c12 	stmdavc	r0!, {r1, r4, sl, fp, lr}
    4e14:	d00728ff 	strdle	r2, [r7], -pc	; <UNPREDICTABLE>
    4e18:	702121ff 	strdvc	r2, [r1], -pc	; <UNPREDICTABLE>
    4e1c:	240f490e 	strcs	r4, [pc], #-2318	; 4e24 <patchImageGenfsk+0x4c>
    4e20:	43200224 			; <UNDEFINED> instruction: 0x43200224
    4e24:	82c83160 	sbchi	r3, r8, #96, 2
    4e28:	b5f8bdf8 	ldrblt	fp, [r8, #3576]!	; 0xdf8
    4e2c:	47004801 	strmi	r4, [r0, -r1, lsl #16]
    4e30:	2100026b 	tstcs	r0, fp, ror #4
    4e34:	00004ce5 	andeq	r4, r0, r5, ror #25
    4e38:	e0014809 	and	r4, r1, r9, lsl #16
    4e3c:	0c004808 	stceq	8, cr4, [r0], {8}
    4e40:	49054c06 	stmdbmi	r5, {r1, r2, sl, fp, lr}
    4e44:	2aff7822 	bcs	fffe2ed4 <_estack+0xdffdded4>
    4e48:	7acad101 	bvc	ff2b9254 <_estack+0xdf2b4254>
    4e4c:	31607022 	cmncc	r0, r2, lsr #32
    4e50:	467082c8 	ldrbtmi	r8, [r0], -r8, asr #5
    4e54:	47001c80 	strmi	r1, [r0, -r0, lsl #25]
    4e58:	40086200 	andmi	r6, r8, r0, lsl #4
    4e5c:	210006a4 	smlatbcs	r0, r4, r6, r0
    4e60:	08080f07 	stmdaeq	r8, {r0, r1, r2, r8, r9, sl, fp}
    4e64:	4708b4f0 			; <UNDEFINED> instruction: 0x4708b4f0
    4e68:	4603b570 			; <UNDEFINED> instruction: 0x4603b570
    4e6c:	29014615 	stmdbcs	r1, {r0, r2, r4, r9, sl, lr}
    4e70:	2900d006 	stmdbcs	r0, {r1, r2, ip, lr, pc}
    4e74:	4a11d006 	bmi	478e94 <__ccfg+0x458eec>
    4e78:	f7ff4628 			; <UNDEFINED> instruction: 0xf7ff4628
    4e7c:	bd70ffbb 	ldcllt	15, cr15, [r0, #-748]!	; 0xfffffd14
    4e80:	e000480f 	and	r4, r0, pc, lsl #16
    4e84:	2405480f 	strcs	r4, [r5], #-2063	; 0xfffff7f1
    4e88:	d8034283 	stmdale	r3, {r0, r1, r7, r9, lr}
    4e8c:	1e640840 	cdpne	8, 6, cr0, cr4, cr0, {2}
    4e90:	dcf92c00 	ldclle	12, cr2, [r9]
    4e94:	200140e3 	andcs	r4, r1, r3, ror #1
    4e98:	18180340 	ldmdane	r8, {r6, r8, r9}
    4e9c:	29010b82 	stmdbcs	r1, {r1, r7, r8, r9, fp}
    4ea0:	4906d007 	stmdbmi	r6, {r0, r1, r2, ip, lr, pc}
    4ea4:	31802300 	orrcc	r2, r0, r0, lsl #6
    4ea8:	f7ff4628 			; <UNDEFINED> instruction: 0xf7ff4628
    4eac:	b2e0ffa5 	rsclt	pc, r0, #660	; 0x294
    4eb0:	4902bd70 	stmdbmi	r2, {r4, r5, r6, r8, sl, fp, ip, sp, pc}
    4eb4:	316c4b04 	cmncc	ip, r4, lsl #22
    4eb8:	0000e7f6 	strdeq	lr, [r0], -r6
    4ebc:	00005c83 	andeq	r5, r0, r3, lsl #25
    4ec0:	2386bca0 	orrcs	fp, r6, #160, 24	; 0xa000
    4ec4:	230d8300 	movwcs	r8, #54016	; 0xd300
    4ec8:	21000674 	tstcs	r0, r4, ror r6
    4ecc:	4e1ab5f8 	mrcmi	5, 0, fp, cr10, cr8, {7}
    4ed0:	6b714605 	blvs	1c566ec <__ccfg+0x1c36744>
    4ed4:	09cc4819 	stmibeq	ip, {r0, r3, r4, fp, lr}^
    4ed8:	2d0001e4 	stfcss	f0, [r0, #-912]	; 0xfffffc70
    4edc:	4918d011 	ldmdbmi	r8, {r0, r4, ip, lr, pc}
    4ee0:	29027809 	stmdbcs	r2, {r0, r3, fp, ip, sp, lr}
    4ee4:	7b00d00f 	blvc	38f28 <__ccfg+0x18f80>
    4ee8:	b6724304 	ldrbtlt	r4, [r2], -r4, lsl #6
    4eec:	4f152001 	svcmi	0x00152001
    4ef0:	47b80240 	ldrmi	r0, [r8, r0, asr #4]!
    4ef4:	38204811 	stmdacc	r0!, {r0, r4, fp, lr}
    4ef8:	09c18800 	stmibeq	r1, {fp, pc}^
    4efc:	d00407c9 	andle	r0, r4, r9, asr #15
    4f00:	7ac0e016 	bvc	ff03cf60 <_estack+0xdf037f60>
    4f04:	7b40e7f0 	blvc	103eecc <__ccfg+0x101ef24>
    4f08:	490fe7ee 	stmdbmi	pc, {r1, r2, r3, r5, r6, r7, r8, r9, sl, sp, lr, pc}	; <UNPREDICTABLE>
    4f0c:	61cc6374 	bicvs	r6, ip, r4, ror r3
    4f10:	07c00a40 	strbeq	r0, [r0, r0, asr #20]
    4f14:	2001d00c 	andcs	sp, r1, ip
    4f18:	6b310380 	blvs	c45d20 <__ccfg+0xc25d78>
    4f1c:	d0012d00 	andle	r2, r1, r0, lsl #26
    4f20:	e0004301 	and	r4, r0, r1, lsl #6
    4f24:	46084381 	strmi	r4, [r8], -r1, lsl #7
    4f28:	49076331 	stmdbmi	r7, {r0, r4, r5, r8, r9, sp, lr}
    4f2c:	63483940 	movtvs	r3, #35136	; 0x8940
    4f30:	47b82000 	ldrmi	r2, [r8, r0]!
    4f34:	bdf8b662 	ldcllt	6, cr11, [r8, #392]!	; 0x188
    4f38:	21000280 	smlabbcs	r0, r0, r2, r0
    4f3c:	21000088 	smlabbcs	r0, r8, r0, r0
    4f40:	2100029b 			; <UNDEFINED> instruction: 0x2100029b
    4f44:	00003f7b 	andeq	r3, r0, fp, ror pc
    4f48:	40044040 	andmi	r4, r4, r0, asr #32
    4f4c:	4a22b510 	bmi	8b2394 <__ccfg+0x8923ec>
    4f50:	61512100 	cmpvs	r1, r0, lsl #2
    4f54:	68894921 	stmvs	r9, {r0, r5, r8, fp, lr}
    4f58:	d40900c9 	strle	r0, [r9], #-201	; 0xffffff37
    4f5c:	4b204921 	blmi	8173e8 <__ccfg+0x7f7440>
    4f60:	429805ca 	addsmi	r0, r8, #847249408	; 0x32800000
    4f64:	d8016b4b 	stmdale	r1, {r0, r1, r3, r6, r8, r9, fp, sp, lr}
    4f68:	e0004313 	and	r4, r0, r3, lsl r3
    4f6c:	634b4393 	movtvs	r4, #45971	; 0xb393
    4f70:	f7ff491d 			; <UNDEFINED> instruction: 0xf7ff491d
    4f74:	bd10ff77 	ldclt	15, cr15, [r0, #-476]	; 0xfffffe24
    4f78:	4d1ab538 	cfldr32mi	mvfx11, [sl, #-224]	; 0xffffff20
    4f7c:	28007f28 	stmdacs	r0, {r3, r5, r8, r9, sl, fp, ip, sp, lr}
    4f80:	481ad127 	ldmdami	sl, {r0, r1, r2, r5, r8, ip, lr, pc}
    4f84:	09c08800 	stmibeq	r0, {fp, pc}^
    4f88:	d12207c0 	smlawtle	r2, r0, r7, r0
    4f8c:	69604c12 	stmdbvs	r0!, {r1, r4, sl, fp, lr}^
    4f90:	d11e2800 	tstle	lr, r0, lsl #16
    4f94:	f0004668 			; <UNDEFINED> instruction: 0xf0004668
    4f98:	4668f845 	strbtmi	pc, [r8], -r5, asr #16	; <UNPREDICTABLE>
    4f9c:	28017800 	stmdacs	r1, {fp, ip, sp, lr}
    4fa0:	4668d117 			; <UNDEFINED> instruction: 0x4668d117
    4fa4:	28107840 	ldmdacs	r0, {r6, fp, ip, sp, lr}
    4fa8:	2008d213 	andcs	sp, r8, r3, lsl r2
    4fac:	6a686160 	bvs	1a1d534 <__ccfg+0x19fd58c>
    4fb0:	01400940 	cmpeq	r0, r0, asr #18
    4fb4:	4a0e6020 	bmi	39d03c <__ccfg+0x37d094>
    4fb8:	62d12100 	sbcsvs	r2, r1, #0, 2
    4fbc:	21024a0d 	tstcs	r2, sp, lsl #20
    4fc0:	21016011 	tstcs	r1, r1, lsl r0
    4fc4:	60204308 	eorvs	r4, r0, r8, lsl #6
    4fc8:	43082103 	movwmi	r2, #33027	; 0x8103
    4fcc:	60206268 	eorvs	r6, r0, r8, ror #4
    4fd0:	4809bd38 	stmdami	r9, {r3, r4, r5, r8, sl, fp, ip, sp, pc}
    4fd4:	bd384780 	ldclt	7, cr4, [r8, #-512]!	; 0xfffffe00
    4fd8:	40044000 	andmi	r4, r4, r0
    4fdc:	21000018 	tstcs	r0, r8, lsl r0
    4fe0:	08930000 	ldmeq	r3, {}	; <UNPREDICTABLE>
    4fe4:	21000280 	smlabbcs	r0, r0, r2, r0
    4fe8:	000068cf 	andeq	r6, r0, pc, asr #17
    4fec:	21000068 	tstcs	r0, r8, rrx
    4ff0:	40041100 	andmi	r1, r4, r0, lsl #2
    4ff4:	e000e280 	and	lr, r0, r0, lsl #5
    4ff8:	00003bc3 	andeq	r3, r0, r3, asr #23
    4ffc:	28004907 	stmdacs	r0, {r0, r1, r2, r8, fp, lr}
    5000:	2004d000 	andcs	sp, r4, r0
    5004:	b6724a06 	ldrbtlt	r4, [r2], -r6, lsl #20
    5008:	07c97809 	strbeq	r7, [r9, r9, lsl #16]
    500c:	5810d001 	ldmdapl	r0, {r0, ip, lr, pc}
    5010:	2080e000 	addcs	lr, r0, r0
    5014:	b240b662 	sublt	fp, r0, #102760448	; 0x6200000
    5018:	00004770 	andeq	r4, r0, r0, ror r7
    501c:	2100026b 	tstcs	r0, fp, ror #4
    5020:	40046058 	andmi	r6, r4, r8, asr r0
    5024:	4801b403 	stmdami	r1, {r0, r1, sl, ip, sp, pc}
    5028:	bd019001 	stclt	0, cr9, [r1, #-4]
    502c:	00006fa5 	andeq	r6, r0, r5, lsr #31
    5030:	00000000 	andeq	r0, r0, r0
    5034:	00030001 	andeq	r0, r3, r1
    5038:	001f000a 	andseq	r0, pc, sl
    503c:	00eb0059 	rsceq	r0, fp, r9, asr r0
    5040:	04ea0239 	strbteq	r0, [sl], #569	; 0x239
    5044:	129709f9 	addsne	r0, r7, #4079616	; 0x3e4000
    5048:	32a11feb 	adccc	r1, r1, #940	; 0x3ac
    504c:	660a4a78 			; <UNDEFINED> instruction: 0x660a4a78
    5050:	9e8c82fa 	mcrls	2, 4, r8, cr12, cr10, {7}
    5054:	c917b663 	ldmdbgt	r7, {r0, r1, r5, r6, r9, sl, ip, sp, pc}
    5058:	deedd664 	cdple	6, 14, cr13, cr13, cr4, {3}
    505c:	e5e0e3c1 	strb	lr, [r0, #961]!	; 0x3c1
    5060:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

00005064 <ratable>:
    5064:	12c5000b 	sbcne	r0, r5, #11
    5068:	2de00007 	stclcs	0, cr0, [r0, #28]!
    506c:	8000000f 	andhi	r0, r0, pc
    5070:	67756c70 			; <UNDEFINED> instruction: 0x67756c70
    5074:	6c756e5f 	ldclvs	14, cr6, [r5], #-380	; 0xfffffe84
    5078:	6374206c 	cmnvs	r4, #108	; 0x6c
    507c:	706f5f76 	rsbvc	r5, pc, r6, ror pc	; <UNPREDICTABLE>
    5080:	756e5f65 	strbvc	r5, [lr, #-3941]!	; 0xfffff09b
    5084:	00006c6c 	andeq	r6, r0, ip, ror #24

00005088 <plug_null>:
    5088:	0000298d 	andeq	r2, r0, sp, lsl #19
    508c:	00002935 	andeq	r2, r0, r5, lsr r9
    5090:	00002959 	andeq	r2, r0, r9, asr r9
    5094:	0000297d 	andeq	r2, r0, sp, ror r9
    5098:	00002985 	andeq	r2, r0, r5, lsl #19
    509c:	00002989 	andeq	r2, r0, r9, lsl #19
    50a0:	00000000 	andeq	r0, r0, r0
    50a4:	00000001 	andeq	r0, r0, r1

Disassembly of section .data:

20000000 <sfd>:
int sfd = -1;
20000000:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

20000004 <__pi_seed>:
lword	__pi_seed = 327672838L;
20000004:	1387e406 	orrne	lr, r7, #100663296	; 0x6000000

20000008 <cmd_cs>:
static rfc_CMD_PROP_CS_t cmd_cs = {
20000008:	00003805 	andeq	r3, r0, r5, lsl #16
2000000c:	200000a0 	andcs	r0, r0, r0, lsr #1
20000010:	00000000 	andeq	r0, r0, r0
20000014:	00000300 	andeq	r0, r0, r0, lsl #6
20000018:	0404c60b 	streq	ip, [r4], #-1547	; 0xfffff9f5
2000001c:	04330080 	ldrteq	r0, [r3], #-128	; 0xffffff80
20000020:	00002000 	andeq	r2, r0, r0

20000024 <cmd_srt>:
static rfc_CMD_SYNC_START_RAT_t	cmd_srt = { .commandNo = CMD_SYNC_START_RAT };
20000024:	0000080a 	andeq	r0, r0, sl, lsl #16
	...

20000038 <offdelay>:
		offdelay = RADIO_DEFAULT_OFFDELAY;
20000038:	 	andeq	r0, r2, r0, lsl #2

2000003a <vrate>:
2000003a:	 	stmdaeq	r3, {r1}

2000003c <RF_cmdFs>:
2000003c:	00000803 	andeq	r0, r0, r3, lsl #16
	...
20000048:	03640100 	cmneq	r4, #0, 2
	...

20000054 <RF_cmdPropRadioDivSetup>:
20000054:	00003807 	andeq	r3, r0, r7, lsl #16
	...
20000060:	03210100 			; <UNDEFINED> instruction: 0x03210100
20000064:	0080000f 	addeq	r0, r0, pc
20000068:	00a00424 	adceq	r0, r0, r4, lsr #8
2000006c:	bc2b0008 	stclt	0, cr0, [fp], #-32	; 0xffffffe0
20000070:	200000b8 	strhcs	r0, [r0], -r8
20000074:	80000364 	andhi	r0, r0, r4, ror #6
20000078:	00000005 	andeq	r0, r0, r5

2000007c <RF_cmdPropRx>:
2000007c:	00003802 	andeq	r3, r0, r2, lsl #16
	...
20000088:	88180100 	ldmdahi	r8, {r8}
2000008c:	930b51de 	movwls	r5, #45534	; 0xb1de
20000090:	01bbaa7d 			; <UNDEFINED> instruction: 0x01bbaa7d
	...

200000a0 <RF_cmdPropTx>:
200000a0:	00003801 	andeq	r3, r0, r1, lsl #16
	...
200000ac:	1e180100 	mufnee	f0, f0, f0
200000b0:	930b51de 	movwls	r5, #45534	; 0xb1de
200000b4:	00000000 	andeq	r0, r0, r0

200000b8 <pOverrides>:
200000b8:	00001807 	andeq	r1, r0, r7, lsl #16
200000bc:	00374038 	eorseq	r4, r7, r8, lsr r0
200000c0:	000684a3 	andeq	r8, r6, r3, lsr #9
200000c4:	7f004020 	svcvc	0x00004020
200000c8:	00404064 	subeq	r4, r0, r4, rrx
200000cc:	b1070503 	tstlt	r7, r3, lsl #10
200000d0:	05330523 	ldreq	r0, [r3, #-1315]!	; 0xfffffadd
200000d4:	0a480583 	beq	212016e8 <_estack+0x11fc6e8>
200000d8:	7ab80603 	bvc	1ee018ec <__ccfg+0x1ede1944>
200000dc:	849f0002 	ldrhi	r0, [pc], #2	; 200000e4 <pOverrides+0x2c>
200000e0:	c7440002 	strbgt	r0, [r4, -r2]
200000e4:	02010403 	andeq	r0, r1, #50331648	; 0x3000000
200000e8:	00108463 	andseq	r8, r0, r3, ror #8
200000ec:	04b00243 	ldrteq	r0, [r0], #579	; 0x243
200000f0:	7ddf0002 	ldclvc	0, cr0, [pc, #8]	; 20000100 <pOverrides+0x48>
200000f4:	00038883 	andeq	r8, r3, r3, lsl #17
200000f8:	35f16084 	ldrbcc	r6, [r1, #132]!	; 0x84
200000fc:	411a6088 	tstmi	sl, r8, lsl #1
20000100:	8213608c 	andshi	r6, r3, #140	; 0x8c
20000104:	00fb88a3 	rscseq	r8, fp, r3, lsr #17
20000108:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000010c:	00000000 	andeq	r0, r0, r0

20000110 <_impure_ptr>:
20000110:	20000118 	andcs	r0, r0, r8, lsl r1
20000114:	00000000 	andeq	r0, r0, r0

20000118 <impure_data>:
20000118:	00000000 	andeq	r0, r0, r0
2000011c:	20000404 	andcs	r0, r0, r4, lsl #8
20000120:	2000046c 	andcs	r0, r0, ip, ror #8
20000124:	200004d4 	ldrdcs	r0, [r0], -r4
	...
200001c0:	00000001 	andeq	r0, r0, r1
200001c4:	00000000 	andeq	r0, r0, r0
200001c8:	abcd330e 	blge	1f34ce08 <__ccfg+0x1f32ce60>
200001cc:	e66d1234 			; <UNDEFINED> instruction: 0xe66d1234
200001d0:	0005deec 	andeq	sp, r5, ip, ror #29
200001d4:	0000000b 	andeq	r0, r0, fp
	...

Disassembly of section .bss:

20000540 <i.6945>:
20000540:	00000000 	andeq	r0, r0, r0

20000544 <receiverId.6965>:
20000544:	00000000 	andeq	r0, r0, r0

20000548 <sendCount.6944>:
20000548:	00000000 	andeq	r0, r0, r0

2000054c <setdel>:
	...

2000054e <urates>:
	...

20000550 <__PCB>:
20000550:	00000000 	andeq	r0, r0, r0

20000554 <ioreq>:
static devreqfun_t ioreq [MAX_DEVICES];
20000554:	00000000 	andeq	r0, r0, r0

20000558 <mcfree>:
static	aword	mnfree [MALLOC_NPOOLS], mcfree [MALLOC_NPOOLS];
20000558:	00000000 	andeq	r0, r0, r0

2000055c <mevent>:
2000055c:	00000000 	andeq	r0, r0, r0

20000560 <mnfree>:
20000560:	00000000 	andeq	r0, r0, r0

20000564 <mpools>:
static	aword	*mpools [MALLOC_NPOOLS];
20000564:	00000000 	andeq	r0, r0, r0

20000568 <descriptors>:
	...

20000588 <oqueues>:
	...

20000594 <physical>:
	...

200005a0 <physinfo>:
	...

200005ac <plugins>:
	...

200005b8 <dopen>:
	...

200005b9 <dstat>:
	...

200005ba <bckf_timer>:
	...

200005bc <channel>:
200005bc:	00000000 	andeq	r0, r0, r0

200005c0 <drvprcs>:
static aword drvprcs, qevent;
200005c0:	00000000 	andeq	r0, r0, r0

200005c4 <dstate>:
200005c4:	00000000 	andeq	r0, r0, r0

200005c8 <paylen>:
static	int paylen = 0;			// Current TX payload length
200005c8:	00000000 	andeq	r0, r0, r0

200005cc <physid>:
static word	physid,
200005cc:	00000000 	andeq	r0, r0, r0

200005d0 <qevent>:
static aword drvprcs, qevent;
200005d0:	00000000 	andeq	r0, r0, r0

200005d4 <rbuffl>:
200005d4:	00000000 	andeq	r0, r0, r0

200005d8 <rfTrim>:
	...

200005e8 <rxstat>:
	...

200005f4 <statid>:
	...

200005f6 <txtries>:
	...

200005f8 <ndsc_null>:
200005f8:	00000000 	andeq	r0, r0, r0

200005fc <len.5699>:
200005fc:	00000000 	andeq	r0, r0, r0

20000600 <ptr.5698>:
20000600:	00000000 	andeq	r0, r0, r0

20000604 <__inpline>:
char *__inpline = NULL;
20000604:	00000000 	andeq	r0, r0, r0

20000608 <len.5700>:
20000608:	00000000 	andeq	r0, r0, r0

2000060c <ptr.5699>:
2000060c:	00000000 	andeq	r0, r0, r0

20000610 <oscHfGlobals>:
	...

20000624 <powerQualGlobals>:
	...

20000630 <nodeId>:
	...

20000638 <database>:
	...

20000b38 <currentRequestNumber>:
char currentRequestNumber;
20000b38:	00000000 	andeq	r0, r0, r0

20000b3c <messagePtr>:
message * messagePtr;
20000b3c:	00000000 	andeq	r0, r0, r0

20000b40 <currentProtocol>:
	...

20000b42 <groupId>:
	...

20000b44 <recordCount>:
int recordCount;
20000b44:	00000000 	andeq	r0, r0, r0

20000b48 <neighbours>:
	...

20000b64 <neighbourCount>:
int neighbourCount;
20000b64:	00000000 	andeq	r0, r0, r0

20000b68 <__pi_uart>:
	...

20000b70 <system_event_count>:
20000b70:	00000000 	andeq	r0, r0, r0

20000b74 <entropy>:
20000b74:	00000000 	andeq	r0, r0, r0

20000b78 <__pi_mintk>:
	...

20000b7a <__pi_old>:
	...

20000b7c <__pi_systat>:
	...

20000b84 <__pi_new>:
20000b84:	00000000 	andeq	r0, r0, r0

20000b88 <__pi_utims>:
	...

20000b98 <__pi_curr>:
20000b98:	00000000 	andeq	r0, r0, r0

20000b9c <errno>:
20000b9c:	00000000 	andeq	r0, r0, r0

Disassembly of section .ccfg:

0001ffa8 <__ccfg>:
   1ffa8:	01800000 	orreq	r0, r0, r0
   1ffac:	ff880010 			; <UNDEFINED> instruction: 0xff880010
   1ffb0:	0058fffd 	ldrsheq	pc, [r8], #-253	; 0xffffff03	; <UNPREDICTABLE>
   1ffb4:	f3bfff3a 	vcvt.u32.f32	d15, d26, #1
   1ffb8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffbc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffcc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd8:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
   1ffdc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffe0:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
   1ffe4:	ffc500c5 			; <UNDEFINED> instruction: 0xffc500c5
   1ffe8:	ff000000 			; <UNDEFINED> instruction: 0xff000000
   1ffec:	00000000 	andeq	r0, r0, r0
   1fff0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fff4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fff8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fffc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

Disassembly of section ._user_heap_stack:

20000ba0 <._user_heap_stack>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00001440 	andeq	r1, r0, r0, asr #8
       4:	00000003 	andeq	r0, r0, r3
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	000000bd 	strheq	r0, [r0], -sp
}
      10:	00067f0c 	andeq	r7, r6, ip, lsl #30
      14:	0006e400 	andeq	lr, r6, r0, lsl #8
      18:	00005000 	andeq	r5, r0, r0
	...
      24:	06010200 	streq	r0, [r1], -r0, lsl #4
      28:	0000098a 	andeq	r0, r0, sl, lsl #19
      2c:	0008df03 	andeq	sp, r8, r3, lsl #30
      30:	172b0200 	strne	r0, [fp, -r0, lsl #4]!
      34:	00000038 	andeq	r0, r0, r8, lsr r0
      38:	88080102 	stmdahi	r8, {r1, r8}
      3c:	02000009 	andeq	r0, r0, #9
			i = k;
      40:	08440502 	stmdaeq	r4, {r1, r8, sl}^
				j->Next = k;
      44:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
      48:	02000004 	andeq	r0, r0, #4
}
      4c:	00521c39 	subseq	r1, r2, r9, lsr ip
      50:	02020000 	andeq	r0, r2, #0
      54:	000a8007 	andeq	r8, sl, r7
		release;
      58:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
      5c:	00000637 	andeq	r0, r0, r7, lsr r6
		b->length - b->u.pointers.head - b->u.pointers.tail;
      60:	00099f03 	andeq	r9, r9, r3, lsl #30
	b->u.pointers.tail =
      64:	1b4f0200 	blne	13c086c <__ccfg+0x13a08c4>
}
      68:	0000006c 	andeq	r0, r0, ip, rrx
		return NULL;
      6c:	cf070402 	svcgt	0x00070402
      70:	02000003 	andeq	r0, r0, #3
      74:	06320508 	ldrteq	r0, [r2], -r8, lsl #10
      78:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      7c:	0003ca07 	andeq	ip, r3, r7, lsl #20
      80:	081b0300 	ldmdaeq	fp, {r8, r9}
      84:	c8020000 	stmdagt	r2, {}	; <UNPREDICTABLE>
      88:	00007317 	andeq	r7, r0, r7, lsl r3
      8c:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
      90:	00746e69 	rsbseq	r6, r4, r9, ror #28
      94:	d4070402 	strle	r0, [r7], #-1026	; 0xfffffbfe
      98:	05000003 	streq	r0, [r0, #-3]
      9c:	00000942 	andeq	r0, r0, r2, asr #18
      a0:	16015e03 	strne	r5, [r1], -r3, lsl #28
      a4:	00000094 	muleq	r0, r4, r0
      a8:	000abc03 	andeq	fp, sl, r3, lsl #24
      ac:	0e2e0400 	cdpeq	4, 2, cr0, cr14, cr0, {0}
      b0:	00000059 	andeq	r0, r0, r9, asr r0
      b4:	0002a303 	andeq	sl, r2, r3, lsl #6
      b8:	0e740400 	cdpeq	4, 7, cr0, cr4, cr0, {0}
      bc:	00000059 	andeq	r0, r0, r9, asr r0
      c0:	a5040406 	strge	r0, [r4, #-1030]	; 0xfffffbfa
      c4:	0000e203 	andeq	lr, r0, r3, lsl #4
char * assembleMessage(message * messagePtr) {
      c8:	05c80700 	strbeq	r0, [r8, #1792]	; 0x700
      cc:	a7040000 	strge	r0, [r4, -r0]
      d0:	00009b0c 	andeq	r9, r0, ip, lsl #22
      d4:	088b0700 	stmeq	fp, {r8, r9, sl}
      d8:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
        p = (char*)umalloc(6);
      dc:	0000e213 	andeq	lr, r0, r3, lsl r2
      e0:	38080000 	stmdacc	r8, {}	; <UNPREDICTABLE>
    p[0] = messagePtr->senderGroupId;
      e4:	f2000000 	vhadd.s8	d0, d0, d0
      e8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    p[2] = messagePtr->messageType;
      ec:	00000094 	muleq	r0, r4, r0
    p[3] = messagePtr->requestNumber;
      f0:	080a0003 	stmdaeq	sl, {r0, r1}
    p[4] = messagePtr->senderId;
      f4:	1609a204 	strne	sl, [r9], -r4, lsl #4
    p[5] = messagePtr->destinationId;
      f8:	0b000001 	bleq	104 <_Min_Stack_Size+0x4>
        p = (char*)umalloc(8);
      fc:	0000035e 	andeq	r0, r0, lr, asr r3
     100:	8d07a404 	cfstrshi	mvf10, [r7, #-16]
     104:	00000000 	andeq	r0, r0, r0
        p[7] = 0x00;
     108:	0004eb0b 	andeq	lr, r4, fp, lsl #22
        break;
     10c:	05a90400 	streq	r0, [r9, #1024]!	; 0x400
        p = (char*)umalloc(26);
     110:	000000c0 	andeq	r0, r0, r0, asr #1
        strcpy(p + 6, messagePtr->messageRecord);
     114:	35030004 	strcc	r0, [r3, #-4]
     118:	04000007 	streq	r0, [r0], #-7
        strcpy(p + 8, messagePtr->messageRecord);
     11c:	00f203aa 	rscseq	r0, r2, sl, lsr #7
        p = (char*)umalloc(28);
     120:	040c0000 	streq	r0, [ip], #-0
     124:	0009110d 	andeq	r1, r9, sp, lsl #2
     128:	00120400 	andseq	r0, r2, r0, lsl #8
        p[7] = 0x00;
     12c:	0000013c 	andeq	r0, r0, ip, lsr r1
     130:	000a120e 	andeq	r1, sl, lr, lsl #4
        strcpy(p + 8, messagePtr->messageRecord);
     134:	00012200 	andeq	r2, r1, r0, lsl #4
    switch(messageType) 
     138:	00010000 	andeq	r0, r1, r0
int getPacketSize(char messageType) {
     13c:	00068a03 	andeq	r8, r6, r3, lsl #20
     140:	17160500 	ldrne	r0, [r6, -r0, lsl #10]
}
     144:	0000006c 	andeq	r0, r0, ip, rrx
     148:	00021603 	andeq	r1, r2, r3, lsl #12
fsm transmitter (message * messagePtr) {
     14c:	0d0c0600 	stceq	6, cr0, [ip, #-0]
     150:	0000008d 	andeq	r0, r0, sp, lsl #1
     154:	00059603 	andeq	r9, r5, r3, lsl #12
}
     158:	1b230500 	blne	8c1560 <__ccfg+0x8a15b8>
     15c:	00000148 	andeq	r0, r0, r8, asr #2
fsm transmitter (message * messagePtr) {
     160:	0002e30f 	andeq	lr, r2, pc, lsl #6
        char * assembledMessage = assembleMessage(messagePtr);
     164:	34051800 	strcc	r1, [r5], #-2048	; 0xfffff800
     168:	0001ba08 	andeq	fp, r1, r8, lsl #20
     16c:	0b160b00 	bleq	582d74 <__ccfg+0x562dcc>
        spkt = tcv_wnp (Transmit_Message, sfd,  getPacketSize(messagePtr->messageType));
     170:	36050000 	strcc	r0, [r5], -r0
     174:	0001ba13 	andeq	fp, r1, r3, lsl sl
     178:	5f100000 	svcpl	0x00100000
     17c:	3705006b 	strcc	r0, [r5, -fp, rrx]
     180:	00008d07 	andeq	r8, r0, r7, lsl #26
        spkt [0] = 0;
     184:	f10b0400 			; <UNDEFINED> instruction: 0xf10b0400
        strcpy(p, assembledMessage);
     188:	05000008 	streq	r0, [r0, #-8]
        tcv_endp (spkt);
     18c:	008d0b37 	addeq	r0, sp, r7, lsr fp
     190:	0b080000 	bleq	200198 <__ccfg+0x1e01f0>
}
     194:	00003f86 	andeq	r3, r0, r6, lsl #31
        finish;
     198:	8d143705 	ldchi	7, cr3, [r4, #-20]	; 0xffffffec
     19c:	0c000000 	stceq	0, cr0, [r0], {-0}
     1a0:	0003f60b 	andeq	pc, r3, fp, lsl #12
char randomNumber() {
     1a4:	1b370500 	blne	dc15ac <__ccfg+0xda1604>
   srand((unsigned) time(&t));
     1a8:	0000008d 	andeq	r0, r0, sp, lsl #1
     1ac:	785f1010 	ldmdavc	pc, {r4, ip}^	; <UNPREDICTABLE>
   return (char)rand();
     1b0:	0b380500 	bleq	e015b8 <__ccfg+0xde1610>
}
     1b4:	000001c0 	andeq	r0, r0, r0, asr #3
     1b8:	04110014 	ldreq	r0, [r1], #-20	; 0xffffffec
fsm find {
     1bc:	00000160 	andeq	r0, r0, r0, ror #2
     1c0:	00013c08 	andeq	r3, r1, r8, lsl #24
     1c4:	0001d000 	andeq	sp, r1, r0
     1c8:	00940900 	addseq	r0, r4, r0, lsl #18
        i = 0;
     1cc:	00000000 	andeq	r0, r0, r0
     1d0:	00090c0f 	andeq	r0, r9, pc, lsl #24
        sendCount = 0;
     1d4:	3c052400 	cfstrscc	mvf2, [r5], {-0}
        currentRequestNumber = randomNumber();
     1d8:	00025308 	andeq	r5, r2, r8, lsl #6
        messagePtr -> senderGroupId = groupId;
     1dc:	04860b00 	streq	r0, [r6], #2816	; 0xb00
     1e0:	3e050000 	cdpcc	0, 0, cr0, cr5, cr0, {0}
     1e4:	00008d07 	andeq	r8, r0, r7, lsl #26
     1e8:	900b0000 	andls	r0, fp, r0
        messagePtr -> requestNumber = currentRequestNumber;
     1ec:	05000003 	streq	r0, [r0, #-3]
     1f0:	008d073f 	addeq	r0, sp, pc, lsr r7
        messagePtr -> senderId = nodeId;
     1f4:	0b040000 	bleq	1001fc <__ccfg+0xe0254>
     1f8:	00000339 	andeq	r0, r0, r9, lsr r3
     1fc:	8d074005 	stchi	0, cr4, [r7, #-20]	; 0xffffffec
        if(sendCount == 2) {
     200:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     204:	00054c0b 	andeq	r4, r5, fp, lsl #24
            proceed Display_Neighbours;
     208:	07410500 	strbeq	r0, [r1, -r0, lsl #10]
        call transmitter(messagePtr, Wait);
     20c:	0000008d 	andeq	r0, r0, sp, lsl #1
     210:	07be0b0c 	ldreq	r0, [lr, ip, lsl #22]!
     214:	42050000 	andmi	r0, r5, #0
     218:	00008d07 	andeq	r8, r0, r7, lsl #26
     21c:	a50b1000 	strge	r1, [fp, #-0]
     220:	05000008 	streq	r0, [r0, #-8]
        sendCount++;
     224:	008d0743 	addeq	r0, sp, r3, asr #14
        delay(3*1024, Send_Discovery_Request);
     228:	0b140000 	bleq	500230 <__ccfg+0x4e0288>
     22c:	000002fe 	strdeq	r0, [r0], -lr
     230:	8d074405 	cfstrshi	mvf4, [r7, #-20]	; 0xffffffec
        ser_outf(Display_Neighbours, "Neighbours:");
     234:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     238:	00048f0b 	andeq	r8, r4, fp, lsl #30
        if (neighbours[i] == 1) {
     23c:	07450500 	strbeq	r0, [r5, -r0, lsl #10]
     240:	0000008d 	andeq	r0, r0, sp, lsl #1
     244:	07530b1c 	smmlaeq	r3, ip, fp, r0
            ser_outf(Display_Neighbour, " %d", i);
     248:	46050000 	strmi	r0, [r5], -r0
     24c:	00008d07 	andeq	r8, r0, r7, lsl #26
        i++;
     250:	12002000 	andne	r2, r0, #0
     254:	00000061 	andeq	r0, r0, r1, rrx
            proceed Display_Neighbour;
     258:	4f050108 	svcmi	0x00050108
     25c:	00029808 	andeq	r9, r2, r8, lsl #16
}
     260:	0a4a0b00 	beq	1282e68 <__ccfg+0x1262ec0>
        finish;
     264:	50050000 	andpl	r0, r5, r0
}
     268:	00029809 	andeq	r9, r2, r9, lsl #16
     26c:	6c0b0000 	stcvs	0, cr0, [fp], {-0}
     270:	05000009 	streq	r0, [r0, #-9]
     274:	02980951 	addseq	r0, r8, #1327104	; 0x144000
     278:	13800000 	orrne	r0, r0, #0
     27c:	00000ab3 			; <UNDEFINED> instruction: 0x00000ab3
     280:	3c0a5305 	stccc	3, cr5, [sl], {5}
     284:	00000001 	andeq	r0, r0, r1
     288:	0b011301 	bleq	44e94 <__ccfg+0x24eec>
     28c:	56050000 	strpl	r0, [r5], -r0
     290:	00013c0a 	andeq	r3, r1, sl, lsl #24
     294:	00010400 	andeq	r0, r1, r0, lsl #8
fsm root {
     298:	00012208 	andeq	r2, r1, r8, lsl #4
     29c:	0002a800 	andeq	sl, r2, r0, lsl #16
     2a0:	00940900 	addseq	r0, r4, r0, lsl #18
     2a4:	001f0000 	andseq	r0, pc, r0
     2a8:	00082b12 	andeq	r2, r8, r2, lsl fp
     2ac:	05019000 	streq	r9, [r1, #-0]
     2b0:	02eb0862 	rsceq	r0, fp, #6422528	; 0x620000
     2b4:	160b0000 	strne	r0, [fp], -r0
     2b8:	0500000b 	streq	r0, [r0, #-11]
     2bc:	02eb1263 	rsceq	r1, fp, #805306374	; 0x30000006
     2c0:	0b000000 	bleq	2c8 <root+0x30>
     2c4:	0000049e 	muleq	r0, lr, r4
     2c8:	8d066405 	cfstrshi	mvf6, [r6, #-20]	; 0xffffffec
        recordCount = 0;
     2cc:	04000000 	streq	r0, [r0], #-0
        nodeId = 1;
     2d0:	0002ab0b 	andeq	sl, r2, fp, lsl #22
     2d4:	09660500 	stmdbeq	r6!, {r8, sl}^
        groupId = 1;
     2d8:	000002f1 	strdeq	r0, [r0], -r1
     2dc:	00610b08 	rsbeq	r0, r1, r8, lsl #22
        messagePtr = (message *) umalloc(sizeof(message));
     2e0:	67050000 	strvs	r0, [r5, -r0]
        phys_cc1350(0, MAX_PACKET_LENGTH);
     2e4:	0002531e 	andeq	r5, r2, lr, lsl r3
     2e8:	11008800 	tstne	r0, r0, lsl #16
     2ec:	0002a804 	andeq	sl, r2, r4, lsl #16
        tcv_plug(0, &plug_null);
     2f0:	03010800 	movweq	r0, #6144	; 0x1800
     2f4:	03010000 	movweq	r0, #4096	; 0x1000
        sfd = tcv_open(WNONE, 0, 0);
     2f8:	94090000 	strls	r0, [r9], #-0
     2fc:	1f000000 	svcne	0x00000000
     300:	07041100 	streq	r1, [r4, -r0, lsl #2]
		tcv_control(sfd, PHYSOPT_ON, NULL);
     304:	14000003 	strne	r0, [r0], #-3
        sfd = tcv_open(WNONE, 0, 0);
     308:	0a040f01 	beq	103f14 <__ccfg+0xe3f6c>
		tcv_control(sfd, PHYSOPT_ON, NULL);
     30c:	05080000 	streq	r0, [r8, #-0]
		if (sfd < 0) {
     310:	0331087a 	teqeq	r1, #7995392	; 0x7a0000
			diag("Cannot open tcv interface");
     314:	4e0b0000 	cdpmi	0, 0, cr0, cr11, cr0, {0}
     318:	05000006 	streq	r0, [r0, #-6]
			halt();
     31c:	0331117b 	teqeq	r1, #-1073741794	; 0xc000001e
        currentProtocol = IDLE;
     320:	0b000000 	bleq	328 <root+0x90>
     324:	000019a5 	andeq	r1, r0, r5, lsr #19
        ser_outf(Menu_Header, "\r\nGroup %d Device #%d (%d/%d records)\r\n", groupId, nodeId, recordCount, MAX_RECORDS);
     328:	8d067c05 	stchi	12, cr7, [r6, #-20]	; 0xffffffec
     32c:	04000000 	streq	r0, [r0], #-0
     330:	38041100 	stmdacc	r4, {r8, ip}
     334:	0f000000 	svceq	0x00000000
     338:	000003ee 	andeq	r0, r0, lr, ror #7
     33c:	08ba0568 	ldmeq	sl!, {r3, r5, r6, r8, sl}
        ser_outf(Options, menu);
     340:	0000047a 	andeq	r0, r0, sl, ror r4
     344:	00705f10 	rsbseq	r5, r0, r0, lsl pc
        ser_inf(Get_Choice, "%c", &choice);
     348:	3112bb05 	tstcc	r2, r5, lsl #22
     34c:	00000003 	andeq	r0, r0, r3
     350:	00725f10 	rsbseq	r5, r2, r0, lsl pc
        switch (choice)
     354:	8d07bc05 	stchi	12, cr11, [r7, #-20]	; 0xffffffec
     358:	04000000 	streq	r0, [r0], #-0
     35c:	00775f10 	rsbseq	r5, r7, r0, lsl pc
     360:	8d07bd05 	stchi	13, cr11, [r7, #-20]	; 0xffffffec
     364:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     368:	0001f30b 	andeq	pc, r1, fp, lsl #6
     36c:	09be0500 	ldmibeq	lr!, {r8, sl}
     370:	0000003f 	andeq	r0, r0, pc, lsr r0
     374:	06bf0b0c 	ldrteq	r0, [pc], ip, lsl #22
     378:	bf050000 	svclt	0x00050000
     37c:	00003f09 	andeq	r3, r0, r9, lsl #30
     380:	5f100e00 	svcpl	0x00100e00
        proceed Menu_Header;
     384:	05006662 	streq	r6, [r0, #-1634]	; 0xfffff99e
     388:	030911c0 	movweq	r1, #37312	; 0x91c0
        ser_outf(Set_Group_ID, "New Group ID: ");
     38c:	0b100000 	bleq	400394 <__ccfg+0x3e03ec>
     390:	000001ea 	andeq	r0, r0, sl, ror #3
        ser_inf(Get_Group_ID, "%d", &groupId);
     394:	8d07c105 	stfhid	f4, [r7, #-20]	; 0xffffffec
     398:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
        proceed Menu_Header;
     39c:	0002b00b 	andeq	fp, r2, fp
     3a0:	0ac80500 	beq	ff2017a8 <_estack+0xdf1fc7a8>
        ser_outf(Set_Node_ID, "New node ID (1-25):");
     3a4:	00000122 	andeq	r0, r0, r2, lsr #2
     3a8:	19350b1c 	ldmdbne	r5!, {r2, r3, r4, r8, r9, fp}
        ser_inf(Get_Node_ID, "%d", &nodeId);
     3ac:	ca050000 	bgt	1403b4 <__ccfg+0x12040c>
     3b0:	0005ff09 	andeq	pc, r5, r9, lsl #30
     3b4:	fc0b2000 	stc2	0, cr2, [fp], {-0}
    if (node < 1 || node > 25) {
     3b8:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
     3bc:	062a09cc 	strteq	r0, [sl], -ip, asr #19
            proceed Set_Node_ID;
     3c0:	0b240000 	bleq	9003c8 <__ccfg+0x8e0420>
        proceed Menu_Header;
     3c4:	00000b27 	andeq	r0, r0, r7, lsr #22
     3c8:	4f0dcf05 	svcmi	0x000dcf05
        call find(Menu_Header);
     3cc:	28000006 	stmdacs	r0, {r1, r2}
     3d0:	0018ea0b 	andseq	lr, r8, fp, lsl #20
     3d4:	09d00500 	ldmibeq	r0, {r8, sl}^
     3d8:	0000066a 	andeq	r0, r0, sl, ror #12
     3dc:	755f102c 	ldrbvc	r1, [pc, #-44]	; 3b8 <root+0x120>
            proceed Set_Node_ID;
     3e0:	d3050062 	movwle	r0, #20578	; 0x5062
            break;
     3e4:	00030911 	andeq	r0, r3, r1, lsl r9
            proceed Set_Node_ID;
     3e8:	5f103000 	svcpl	0x00103000
            proceed Find_Neighbours;
     3ec:	05007075 	streq	r7, [r0, #-117]	; 0xffffff8b
            proceed Create_Record;
     3f0:	033112d4 	teqeq	r1, #212, 4	; 0x4000000d
            proceed Delete_Record;
     3f4:	10380000 	eorsne	r0, r8, r0
            proceed Retrieve_Record;
     3f8:	0072755f 	rsbseq	r7, r2, pc, asr r5
            diag("Reset Local Storage");
     3fc:	8d07d505 	cfstr32hi	mvfx13, [r7, #-20]	; 0xffffffec
            break;
     400:	3c000000 	stccc	0, cr0, [r0], {-0}
            diag("Reset Local Storage");
     404:	000b3e0b 	andeq	r3, fp, fp, lsl #28
        currentProtocol = CREATE_RECORD;
     408:	11d80500 	bicsne	r0, r8, r0, lsl #10
        ser_outf(Create_Record, "Receiver node ID (1-25):");
     40c:	00000670 	andeq	r0, r0, r0, ror r6
     410:	0acd0b40 	beq	ff343118 <_estack+0xdf33e118>
        ser_inf(Get_Receiver_Node, "%d", &receiverId);
     414:	d9050000 	stmdble	r5, {}	; <UNPREDICTABLE>
     418:	00068011 	andeq	r8, r6, r1, lsl r0
     41c:	5f104300 	svcpl	0x00104300
    if (node < 1 || node > 25) {
     420:	0500626c 	streq	r6, [r0, #-620]	; 0xfffffd94
     424:	030911dc 	movweq	r1, #37340	; 0x91dc
            proceed Create_Record;
     428:	0b440000 	bleq	1100430 <__ccfg+0x10e0488>
     42c:	00000903 	andeq	r0, r0, r3, lsl #18
        ser_in(Get_Message, messagePtr->messageRecord, RECORD_LENGTH);
     430:	8d07df05 	stchi	15, cr13, [r7, #-20]	; 0xffffffec
     434:	4c000000 	stcmi	0, cr0, [r0], {-0}
     438:	00043b0b 	andeq	r3, r4, fp, lsl #22
        if(strlen(messagePtr->messageRecord) >= RECORD_LENGTH) {
     43c:	0ae00500 	beq	ff801844 <_estack+0xdf7fc844>
     440:	000000a8 	andeq	r0, r0, r8, lsr #1
     444:	44040b50 	strmi	r0, [r4], #-2896	; 0xfffff4b0
            messagePtr->messageRecord[RECORD_LENGTH - 1] = '/0';
     448:	e3050000 	movw	r0, #20480	; 0x5000
        proceed Transmit_Message;
     44c:	00049912 	andeq	r9, r4, r2, lsl r9
            messagePtr->messageRecord[RECORD_LENGTH - 1] = '/0';
     450:	1b0b5400 	blne	2d5458 <__ccfg+0x2b54b0>
        proceed Transmit_Message;
     454:	05000009 	streq	r0, [r0, #-9]
        currentProtocol = DELETE_RECORD;
     458:	01540ce7 	cmpeq	r4, r7, ror #25
        ser_outf(Retrieve_Record, "Delete Record from Neighbour:\n\r");
     45c:	0b580000 	bleq	1600464 <__ccfg+0x15e04bc>
        currentProtocol = DELETE_RECORD;
     460:	00000833 	andeq	r0, r0, r3, lsr r8
        ser_outf(Retrieve_Record, "Delete Record from Neighbour:\n\r");
     464:	160ee905 	strne	lr, [lr], -r5, lsl #18
        proceed Get_Receiving_Node;
     468:	5c000001 	stcpl	0, cr0, [r0], {1}
        currentProtocol = RETRIEVE_RECORD;
     46c:	000af90b 	andeq	pc, sl, fp, lsl #18
        ser_outf(Retrieve_Record, "Retrieve Record from Neighbour:\n\r");
     470:	07ea0500 	strbeq	r0, [sl, r0, lsl #10]!
        currentProtocol = RETRIEVE_RECORD;
     474:	0000008d 	andeq	r0, r0, sp, lsl #1
        ser_outf(Retrieve_Record, "Retrieve Record from Neighbour:\n\r");
     478:	01150064 	tsteq	r5, r4, rrx
        ser_outf(Prompt_Recieving_Node, "Neighbour node ID (1-25):");
     47c:	0000008d 	andeq	r0, r0, sp, lsl #1
     480:	00000499 	muleq	r0, r9, r4
        ser_inf(Get_Receiving_Node, "%d", &receiverId);
     484:	00049916 	andeq	r9, r4, r6, lsl r9
     488:	01221600 			; <UNDEFINED> instruction: 0x01221600
     48c:	ed160000 	ldc	0, cr0, [r6, #-0]
    if (node < 1 || node > 25) {
     490:	16000005 	strne	r0, [r0], -r5
     494:	0000008d 	andeq	r0, r0, sp, lsl #1
            proceed Prompt_Recieving_Node;
     498:	a4041100 	strge	r1, [r4], #-256	; 0xffffff00
        ser_outf(Prompt_Record_Index, "Record index:");
     49c:	17000004 	strne	r0, [r0, -r4]
     4a0:	00000499 	muleq	r0, r9, r4
        char desiredRecordIndex = -1;
     4a4:	00444218 	subeq	r4, r4, r8, lsl r2
        ser_inf(Get_Record_Index, "%d", &desiredRecordIndex);
     4a8:	05042800 	streq	r2, [r4, #-2048]	; 0xfffff800
     4ac:	ed080265 	sfm	f0, 4, [r8, #-404]	; 0xfffffe6c
        char desiredRecordIndex = -1;
     4b0:	19000005 	stmdbne	r0, {r0, r2}
        ser_inf(Get_Record_Index, "%d", &desiredRecordIndex);
     4b4:	00000784 	andeq	r0, r0, r4, lsl #15
        messagePtr->recordIndex = desiredRecordIndex;
     4b8:	07026705 	streq	r6, [r2, -r5, lsl #14]
     4bc:	0000008d 	andeq	r0, r0, sp, lsl #1
     4c0:	061c1900 	ldreq	r1, [ip], -r0, lsl #18
        proceed Transmit_Message;
     4c4:	6c050000 	stcvs	0, cr0, [r5], {-0}
        messagePtr -> senderGroupId = groupId;
     4c8:	06dc0b02 	ldrbeq	r0, [ip], r2, lsl #22
     4cc:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
     4d0:	0000028d 	andeq	r0, r0, sp, lsl #5
        messagePtr -> messageType = currentProtocol;
     4d4:	14026c05 	strne	r6, [r2], #-3077	; 0xfffff3fb
     4d8:	000006dc 	ldrdeq	r0, [r0], -ip
        messagePtr -> requestNumber = randomNumber();
     4dc:	0b2d1908 	bleq	b46904 <__ccfg+0xb2695c>
        messagePtr -> senderId = nodeId;
     4e0:	6c050000 	stcvs	0, cr0, [r5], {-0}
     4e4:	06dc1e02 	ldrbeq	r1, [ip], r2, lsl #28
        call transmitter(messagePtr, Menu_Header);
     4e8:	190c0000 	stmdbne	ip, {}	; <UNPREDICTABLE>
        messagePtr -> destinationId = receiverId;
     4ec:	00000499 	muleq	r0, r9, r4
     4f0:	07026e05 	streq	r6, [r2, -r5, lsl #28]
        call transmitter(messagePtr, Menu_Header);
     4f4:	0000008d 	andeq	r0, r0, sp, lsl #1
     4f8:	044b1910 	strbeq	r1, [fp], #-2320	; 0xfffff6f0
     4fc:	6f050000 	svcvs	0x00050000
     500:	08dc0802 	ldmeq	ip, {r1, fp}^
     504:	19140000 	ldmdbne	r4, {}	; <UNPREDICTABLE>
     508:	00000ae0 	andeq	r0, r0, r0, ror #21
     50c:	07027205 	streq	r7, [r2, -r5, lsl #4]
     510:	0000008d 	andeq	r0, r0, sp, lsl #1
     514:	3e321930 			; <UNDEFINED> instruction: 0x3e321930
     518:	73050000 	movwvc	r0, #20480	; 0x5000
     51c:	08f21602 	ldmeq	r2!, {r1, r9, sl, ip}^
     520:	19340000 	ldmdbne	r4!, {}	; <UNPREDICTABLE>
     524:	000005e2 	andeq	r0, r0, r2, ror #11
     528:	07027505 	streq	r7, [r2, -r5, lsl #10]
     52c:	0000008d 	andeq	r0, r0, sp, lsl #1
     530:	072b1938 			; <UNDEFINED> instruction: 0x072b1938
     534:	77050000 	strvc	r0, [r5, -r0]
     538:	09040a02 	stmdbeq	r4, {r1, r9, fp}
     53c:	193c0000 	ldmdbne	ip!, {}	; <UNPREDICTABLE>
     540:	00000308 	andeq	r0, r0, r8, lsl #6
     544:	13027a05 	movwne	r7, #10757	; 0x2a05
     548:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
     54c:	03b41940 			; <UNDEFINED> instruction: 0x03b41940
     550:	7b050000 	blvc	140558 <__ccfg+0x1205b0>
     554:	008d0702 	addeq	r0, sp, r2, lsl #14
     558:	19440000 	stmdbne	r4, {}^	; <UNPREDICTABLE>
     55c:	000004f3 	strdeq	r0, [r0], -r3
     560:	13027c05 	movwne	r7, #11269	; 0x2c05
     564:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
     568:	06541948 	ldrbeq	r1, [r4], -r8, asr #18
static void devinit_uart (int devnum) {
     56c:	7d050000 	stcvc	0, cr0, [r5, #-0]
	adddevfunc (ioreq_uart_a, devnum);
     570:	090a1402 	stmdbeq	sl, {r1, sl, ip}
     574:	194c0000 	stmdbne	ip, {}^	; <UNPREDICTABLE>
void udelay (volatile word n) {
     578:	000008e9 	andeq	r0, r0, r9, ror #17
     57c:	07028005 	streq	r8, [r2, -r5]
	while (n) {
     580:	0000008d 	andeq	r0, r0, sp, lsl #1
     584:	09801950 	stmibeq	r0, {r4, r6, r8, fp, ip}
}
     588:	81050000 	mrshi	r0, (UNDEF: 5)
	while (n--);
     58c:	05ed0902 	strbeq	r0, [sp, #2306]!	; 0x902
     590:	19540000 	ldmdbne	r4, {}^	; <UNPREDICTABLE>
     594:	0000099a 	muleq	r0, sl, r9
		n--;
     598:	0702a405 	streq	sl, [r2, -r5, lsl #8]
     59c:	000008b7 			; <UNDEFINED> instruction: 0x000008b7
     5a0:	082b1a58 	stmdaeq	fp!, {r3, r4, r6, r9, fp, ip}
void mdelay (volatile word n) {
     5a4:	a8050000 	stmdage	r5, {}	; <UNPREDICTABLE>
     5a8:	02eb1302 	rsceq	r1, fp, #134217728	; 0x8000000
	while (n) {
     5ac:	01480000 	mrseq	r0, (UNDEF: 72)
     5b0:	00056f1a 	andeq	r6, r5, sl, lsl pc
}
     5b4:	02a90500 	adceq	r0, r9, #0, 10
		udelay (999);
     5b8:	0002a812 	andeq	sl, r2, r2, lsl r8
     5bc:	1a014c00 	bne	535c4 <__ccfg+0x3361c>
		n--;
     5c0:	00000556 	andeq	r0, r0, r6, asr r5
     5c4:	0c02ad05 	stceq	13, cr10, [r2], {5}
     5c8:	0000091c 	andeq	r0, r0, ip, lsl r9
     5cc:	271a02dc 			; <UNDEFINED> instruction: 0x271a02dc
void __pi_ondomain (lword d) {
     5d0:	0500000a 	streq	r0, [r0, #-10]
     5d4:	9d1002b2 	lfmls	f0, 4, [r0, #-712]	; 0xfffffd38
		if (__pi_systat.effpdm > 1)
     5d8:	e0000006 	and	r0, r0, r6
     5dc:	086c1a02 	stmdaeq	ip!, {r1, r9, fp, ip}^
			__pi_systat.effpdm = 1;
     5e0:	b4050000 	strlt	r0, [r5], #-0
	PRCMPowerDomainOn (d);
     5e4:	09280a02 	stmdbeq	r8!, {r1, r9, fp}
     5e8:	02ec0000 	rsceq	r0, ip, #0
     5ec:	f3041100 	vrhadd.u8	d1, d4, d0
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     5f0:	02000005 	andeq	r0, r0, #5
     5f4:	09910801 	ldmibeq	r1, {r0, fp}
     5f8:	f3170000 	vhadd.u16	d0, d7, d0
	__pi_systat.ondmns |= d;
     5fc:	11000005 	tstne	r0, r5
     600:	00047a04 	andeq	r7, r4, r4, lsl #20
}
     604:	8d011500 	cfstr32hi	mvfx1, [r1, #-0]
     608:	24000000 	strcs	r0, [r0], #-0
void __pi_offdomain (lword d) {
     60c:	16000006 	strne	r0, [r0], -r6
     610:	00000499 	muleq	r0, r9, r4
	PRCMPowerDomainOff (d);
     614:	00012216 	andeq	r2, r1, r6, lsl r2
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     618:	06241600 	strteq	r1, [r4], -r0, lsl #12
     61c:	8d160000 	ldchi	0, cr0, [r6, #-0]
     620:	00000000 	andeq	r0, r0, r0
	if (d & PRCM_DOMAIN_RFCORE) {
     624:	05fa0411 	ldrbeq	r0, [sl, #1041]!	; 0x411
     628:	04110000 	ldreq	r0, [r1], #-0
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     62c:	00000605 	andeq	r0, r0, r5, lsl #12
     630:	00b40115 	adcseq	r0, r4, r5, lsl r1
			__pi_systat.effpdm = __pi_systat.reqpdm;
     634:	064f0000 	strbeq	r0, [pc], -r0
     638:	99160000 	ldmdbls	r6, {}	; <UNPREDICTABLE>
	__pi_systat.ondmns &= ~d;
     63c:	16000004 	strne	r0, [r0], -r4
     640:	00000122 	andeq	r0, r0, r2, lsr #2
}
     644:	0000b416 	andeq	fp, r0, r6, lsl r4
     648:	008d1600 	addeq	r1, sp, r0, lsl #12
void __pi_syserror (word ec, const char *m) {
     64c:	11000000 	mrsne	r0, (UNDEF: 0)
	diag ("SYSERR: %x, %s", ec, m);
     650:	00063004 	andeq	r3, r6, r4
     654:	8d011500 	cfstr32hi	mvfx1, [r1, #-0]
  __ASM volatile ("cpsid i" : : : "memory");
     658:	6a000000 	bvs	660 <__pi_syserror+0x14>
     65c:	16000006 	strne	r0, [r0], -r6
     660:	00000499 	muleq	r0, r9, r4
     664:	00012216 	andeq	r2, r1, r6, lsl r2
		all_leds_blink;
     668:	04110000 	ldreq	r0, [r1], #-0
     66c:	00000655 	andeq	r0, r0, r5, asr r6
     670:	00003808 	andeq	r3, r0, r8, lsl #16
     674:	00068000 	andeq	r8, r6, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     678:	00940900 	addseq	r0, r4, r0, lsl #18
     67c:	00020000 	andeq	r0, r2, r0
     680:	00003808 	andeq	r3, r0, r8, lsl #16
     684:	00069000 	andeq	r9, r6, r0
     688:	00940900 	addseq	r0, r4, r0, lsl #18
     68c:	00000000 	andeq	r0, r0, r0
	while (1) {
     690:	00042905 	andeq	r2, r4, r5, lsl #18
     694:	01240500 			; <UNDEFINED> instruction: 0x01240500
     698:	00033718 	andeq	r3, r3, r8, lsl r7
     69c:	44581b00 	ldrbmi	r1, [r8], #-2816	; 0xfffff500
void tci_run_delay_timer () {
     6a0:	050c0000 	streq	r0, [ip, #-0]
	setdel = __pi_mintk - __pi_old;
     6a4:	d6080128 	strle	r0, [r8], -r8, lsr #2
     6a8:	19000006 	stmdbne	r0, {r1, r2}
     6ac:	00000b16 	andeq	r0, r0, r6, lsl fp
     6b0:	11012a05 	tstne	r1, r5, lsl #20
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     6b4:	000006d6 	ldrdeq	r0, [r0], -r6
     6b8:	093b1900 	ldmdbeq	fp!, {r8, fp, ip}
     6bc:	2b050000 	blcs	1406c4 <__ccfg+0x12071c>
     6c0:	008d0701 	addeq	r0, sp, r1, lsl #14
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     6c4:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
	sti_tim;
     6c8:	000005ce 	andeq	r0, r0, lr, asr #11
}
     6cc:	0b012c05 	bleq	4b6e8 <__ccfg+0x2b740>
     6d0:	000006dc 	ldrdeq	r0, [r0], -ip
     6d4:	04110008 	ldreq	r0, [r1], #-8
     6d8:	0000069d 	muleq	r0, sp, r6
     6dc:	06900411 			; <UNDEFINED> instruction: 0x06900411
	cli_aux;
     6e0:	a01b0000 	andsge	r0, fp, r0
     6e4:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     6e8:	08014405 	stmdaeq	r1, {r0, r2, sl, lr}
     6ec:	0000071b 	andeq	r0, r0, fp, lsl r7
     6f0:	00125e19 	andseq	r5, r2, r9, lsl lr
     6f4:	01450500 	cmpeq	r5, r0, lsl #10
	sti_aux;
     6f8:	00071b12 	andeq	r1, r7, r2, lsl fp
}
     6fc:	79190000 	ldmdbvc	r9, {}	; <UNPREDICTABLE>
     700:	05000006 	streq	r0, [r0, #-6]
     704:	1b120146 	blne	480c24 <__ccfg+0x460c7c>
void AONRTCIntHandler () {
     708:	06000007 	streq	r0, [r0], -r7
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     70c:	00110319 	andseq	r0, r1, r9, lsl r3
     710:	01470500 	cmpeq	r7, r0, lsl #10
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     714:	00005212 	andeq	r5, r0, r2, lsl r2
		if (__pi_utims [0] == 0)
     718:	08000c00 	stmdaeq	r0, {sl, fp}
     71c:	00000052 	andeq	r0, r0, r2, asr r0
		if (*(__pi_utims [0])) {
     720:	0000072b 	andeq	r0, r0, fp, lsr #14
     724:	00009409 	andeq	r9, r0, r9, lsl #8
			(*(__pi_utims [0]))--;
     728:	1c000200 	sfmne	f0, 4, [r0], {-0}
		if (__pi_utims [1] == 0)
     72c:	028505d0 	addeq	r0, r5, #208, 10	; 0x34000000
		if (*(__pi_utims [1])) {
     730:	00084007 	andeq	r4, r8, r7
			aux_timer_inactive = 0;
     734:	0ad31900 	beq	ff4c6b3c <_estack+0xdf4c1b3c>
			(*(__pi_utims [1]))--;
     738:	87050000 	strhi	r0, [r5, -r0]
		if (__pi_utims [2] == 0)
     73c:	00941802 	addseq	r1, r4, r2, lsl #16
		if (*(__pi_utims [2])) {
     740:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
			(*(__pi_utims [2]))--;
     744:	00000a2f 	andeq	r0, r0, pc, lsr #20
		if (__pi_utims [3] != 0) {
     748:	12028805 	andne	r8, r2, #327680	; 0x50000
			if (*(__pi_utims [3])) {
     74c:	000005ed 	andeq	r0, r0, sp, ror #11
				aux_timer_inactive = 0;
     750:	03e11904 	mvneq	r1, #4, 18	; 0x10000
				(*(__pi_utims [3]))--;
     754:	89050000 	stmdbhi	r5, {}	; <UNPREDICTABLE>
	if (__pi_systat.ledsts) {
     758:	08401002 	stmdaeq	r0, {r1, ip}^
     75c:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
		if (__pi_systat.ledblc++ == 0) {
     760:	000008bd 			; <UNDEFINED> instruction: 0x000008bd
     764:	17028a05 	strne	r8, [r2, -r5, lsl #20]
			if (__pi_systat.ledblk) {
     768:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     76c:	06231924 	strteq	r1, [r3], -r4, lsr #18
     770:	8b050000 	blhi	140778 <__ccfg+0x1207d0>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     774:	008d0f02 	addeq	r0, sp, r2, lsl #30
     778:	19480000 	stmdbne	r8, {}^	; <UNPREDICTABLE>
				if (__pi_systat.ledsts & 0x2)
     77c:	00000b11 	andeq	r0, r0, r1, lsl fp
     780:	2c028c05 	stccs	12, cr8, [r2], {5}
     784:	0000007a 	andeq	r0, r0, sl, ror r0
				if (__pi_systat.ledsts & 0x4)
     788:	00851950 	addeq	r1, r5, r0, asr r9
				__pi_systat.ledblk = 0;
     78c:	8d050000 	stchi	0, cr0, [r5, #-0]
     790:	06e21a02 	strbteq	r1, [r2], r2, lsl #20
			if (__pi_systat.fstblk)
     794:	19580000 	ldmdbne	r8, {}^	; <UNPREDICTABLE>
     798:	0000052b 	andeq	r0, r0, fp, lsr #10
				__pi_systat.ledblc = 200;
     79c:	16028e05 	strne	r8, [r2], -r5, lsl #28
	if (events & AON_RTC_EVFLAGS_CH0) {
     7a0:	00000116 	andeq	r0, r0, r6, lsl r1
		cli_tim;
     7a4:	0a3c1968 	beq	f06d4c <__ccfg+0xee6da4>
		__pi_new += setdel;
     7a8:	8f050000 	svchi	0x00050000
     7ac:	01161602 	tsteq	r6, r2, lsl #12
		setdel = 0;
     7b0:	19700000 	ldmdbne	r0!, {}^	; <UNPREDICTABLE>
		RISE_N_SHINE;
     7b4:	0000006f 	andeq	r0, r0, pc, rrx
		__pi_new += setdel;
     7b8:	16029005 	strne	r9, [r2], -r5
		RISE_N_SHINE;
     7bc:	00000116 	andeq	r0, r0, r6, lsl r1
     7c0:	08f91978 	ldmeq	r9!, {r3, r4, r5, r6, r8, fp, ip}^
		aux_timer_inactive = 1;
     7c4:	91050000 	mrsls	r0, (UNDEF: 5)
     7c8:	08501002 	ldmdaeq	r0, {r1, ip}^
				if (__pi_systat.ledsts & 0x1)
     7cc:	19800000 	stmibne	r0, {}	; <UNPREDICTABLE>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     7d0:	000003be 			; <UNDEFINED> instruction: 0x000003be
     7d4:	10029205 	andne	r9, r2, r5, lsl #4
				if (__pi_systat.ledsts & 0x2)
     7d8:	00000860 	andeq	r0, r0, r0, ror #16
     7dc:	09bd1988 	ldmibeq	sp!, {r3, r7, r8, fp, ip}
     7e0:	93050000 	movwls	r0, #20480	; 0x5000
				if (__pi_systat.ledsts & 0x8)
     7e4:	008d0f02 	addeq	r0, sp, r2, lsl #30
				__pi_systat.ledblk = 1;
     7e8:	19a00000 	stmibne	r0!, {}	; <UNPREDICTABLE>
     7ec:	00000261 	andeq	r0, r0, r1, ror #4
		if (aux_timer_inactive) {
     7f0:	16029405 	strne	r9, [r2], -r5, lsl #8
			cli_aux;
     7f4:	00000116 	andeq	r0, r0, r6, lsl r1
     7f8:	056019a4 	strbeq	r1, [r0, #-2468]!	; 0xfffff65c
     7fc:	95050000 	strls	r0, [r5, #-0]
     800:	01161602 	tsteq	r6, r2, lsl #12
     804:	19ac0000 	stmibne	ip!, {}	; <UNPREDICTABLE>
     808:	000004a3 	andeq	r0, r0, r3, lsr #9
     80c:	16029605 	strne	r9, [r2], -r5, lsl #12
     810:	00000116 	andeq	r0, r0, r6, lsl r1
     814:	06b019b4 			; <UNDEFINED> instruction: 0x06b019b4
     818:	97050000 	strls	r0, [r5, -r0]
word tci_update_delay_ticks (Boolean force) {
     81c:	01161602 	tsteq	r6, r2, lsl #12
	cli_tim;
     820:	19bc0000 	ldmibne	ip!, {}	; <UNPREDICTABLE>
     824:	0000051a 	andeq	r0, r0, sl, lsl r5
	if (setdel) {
     828:	16029805 	strne	r9, [r2], -r5, lsl #16
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     82c:	00000116 	andeq	r0, r0, r6, lsl r1
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     830:	078219c4 	streq	r1, [r2, r4, asr #19]
     834:	99050000 	stmdbls	r5, {}	; <UNPREDICTABLE>
     838:	008d0802 	addeq	r0, sp, r2, lsl #16
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     83c:	00cc0000 	sbceq	r0, ip, r0
				AON_RTC_O_CH0CMP)) - gettav ());
     840:	0005f308 	andeq	pc, r5, r8, lsl #6
	return NO;
     844:	00085000 	andeq	r5, r8, r0
			setdel = 0;
     848:	00940900 	addseq	r0, r4, r0, lsl #18
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     84c:	00190000 	andseq	r0, r9, r0
     850:	0005f308 	andeq	pc, r5, r8, lsl #6
}
     854:	00086000 	andeq	r6, r8, r0
		sti_tim;
     858:	00940900 	addseq	r0, r4, r0, lsl #18
		return YES;
     85c:	00070000 	andeq	r0, r7, r0
     860:	0005f308 	andeq	pc, r5, r8, lsl #6
     864:	00087000 	andeq	r7, r8, r0
     868:	00940900 	addseq	r0, r4, r0, lsl #18
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     86c:	00170000 	andseq	r0, r7, r0
	UARTDisable (UART0_BASE);
     870:	9e05f01c 	mcrls	0, 0, pc, cr5, cr12, {0}	; <UNPREDICTABLE>
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     874:	08970702 	ldmeq	r7, {r1, r8, r9, sl}
	UARTDisable (UART0_BASE);
     878:	99190000 	ldmdbls	r9, {}	; <UNPREDICTABLE>
	UARTConfigSetExpClk (UART0_BASE,
     87c:	05000003 	streq	r0, [r0, #-3]
     880:	971b02a1 	ldrls	r0, [fp, -r1, lsr #5]
     884:	00000008 	andeq	r0, r0, r8
     888:	000b3519 	andeq	r3, fp, r9, lsl r5
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     88c:	02a20500 	adceq	r0, r2, #0, 10
     890:	0008a718 	andeq	sl, r8, r8, lsl r7
     894:	08007800 	stmdaeq	r0, {fp, ip, sp, lr}
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     898:	00000331 	andeq	r0, r0, r1, lsr r3
     89c:	000008a7 	andeq	r0, r0, r7, lsr #17
     8a0:	00009409 	andeq	r9, r0, r9, lsl #8
	urates [0] = rate;
     8a4:	08001d00 	stmdaeq	r0, {r8, sl, fp, ip}
}
     8a8:	00000094 	muleq	r0, r4, r0
     8ac:	000008b7 			; <UNDEFINED> instruction: 0x000008b7
     8b0:	00009409 	andeq	r9, r0, r9, lsl #8
     8b4:	1d001d00 	stcne	13, cr1, [r0, #-0]
     8b8:	028305f0 	addeq	r0, r3, #240, 10	; 0x3c000000
     8bc:	0008dc03 	andeq	sp, r8, r3, lsl #24
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     8c0:	44421e00 	strbmi	r1, [r2], #-3584	; 0xfffff200
     8c4:	9a050000 	bls	1408cc <__ccfg+0x120924>
     8c8:	072b0b02 	streq	r0, [fp, -r2, lsl #22]!
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     8cc:	d71e0000 	ldrle	r0, [lr, -r0]
     8d0:	05000008 	streq	r0, [r0, #-8]
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     8d4:	700b02a3 	andvc	r0, fp, r3, lsr #5
     8d8:	00000008 	andeq	r0, r0, r8
	__pi_uart_setrate (urates [0], __pi_uart);
     8dc:	0005f308 	andeq	pc, r5, r8, lsl #6
     8e0:	0008ec00 	andeq	lr, r8, r0, lsl #24
     8e4:	00940900 	addseq	r0, r4, r0, lsl #18
     8e8:	00180000 	andseq	r0, r8, r0
     8ec:	000b1c1f 	andeq	r1, fp, pc, lsl ip
     8f0:	04110100 	ldreq	r0, [r1], #-256	; 0xffffff00
     8f4:	000008ec 	andeq	r0, r0, ip, ror #17
	switch (operation) {
     8f8:	09040120 	stmdbeq	r4, {r5, r8}
static int ioreq_uart_a (int operation, char *buf, int len) {
     8fc:	99160000 	ldmdbls	r6, {}	; <UNPREDICTABLE>
     900:	00000004 	andeq	r0, r0, r4
     904:	08f80411 	ldmeq	r8!, {r0, r4, sl}^
     908:	04110000 	ldreq	r0, [r1], #-0
     90c:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
				*buf++ = uart_a_read;
     910:	091c0120 	ldmdbeq	ip, {r5, r8}
     914:	8d160000 	ldchi	0, cr0, [r6, #-0]
			while (len && uart_a_char_available) {
     918:	00000000 	andeq	r0, r0, r0
     91c:	09220411 	stmdbeq	r2!, {r0, r4, sl}
     920:	04110000 	ldreq	r0, [r1], #-0
			if (len != operation) {
     924:	00000910 	andeq	r0, r0, r0, lsl r9
}
     928:	00069008 	andeq	r9, r6, r8
     92c:	00093800 	andeq	r3, r9, r0, lsl #16
			uart_a_disable_int;
     930:	00940900 	addseq	r0, r4, r0, lsl #18
			if (uart_a_char_available) {
     934:	00020000 	andeq	r0, r2, r0
				*buf++ = uart_a_read;
     938:	00089921 	andeq	r9, r8, r1, lsr #18
			uart_a_disable_int;
     93c:	03330500 	teqeq	r3, #0, 10
     940:	00049917 	andeq	r9, r4, r7, lsl r9
			if (uart_a_char_available) {
     944:	21010100 	mrscs	r0, (UNDEF: 17)
     948:	00000892 	muleq	r0, r2, r8
				uart_a_enable_int;
     94c:	1d033405 	cfstrsne	mvf3, [r3, #-20]	; 0xffffffec
     950:	0000049f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
				goto Redo_rx;
     954:	e1030101 	tst	r3, r1, lsl #2
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     958:	07000008 	streq	r0, [r0, -r8]
     95c:	002c1318 	eoreq	r1, ip, r8, lsl r3
			return -2;
     960:	0a030000 	beq	c0968 <__ccfg+0xa09c0>
     964:	07000004 	streq	r0, [r0, -r4]
				uart_a_write (*buf);
     968:	00461424 	subeq	r1, r6, r4, lsr #8
     96c:	a1030000 	mrsge	r0, (UNDEF: 3)
			while (len && uart_a_room_in_tx) {
     970:	07000009 	streq	r0, [r0, -r9]
     974:	00601430 	rsbeq	r1, r0, r0, lsr r4
     978:	db030000 	blle	c0980 <__ccfg+0xa09d8>
			if (len != operation) {
     97c:	08000005 	stmdaeq	r0, {r0, r2}
			uart_a_disable_int;
     980:	00811971 	addeq	r1, r1, r1, ror r9
     984:	56030000 	strpl	r0, [r3], -r0
			if (uart_a_room_in_tx) {
     988:	09000004 	stmdbeq	r0, {r2}
     98c:	01241b28 			; <UNDEFINED> instruction: 0x01241b28
				uart_a_enable_int;
     990:	13030000 	movwne	r0, #12288	; 0x3000
     994:	09000009 	stmdbeq	r0, {r0, r3}
				*buf++ = uart_a_read;
     998:	09861863 	stmibeq	r6, {r0, r1, r5, r6, fp, ip}
			if (uart_a_room_in_tx) {
     99c:	d4030000 	strle	r0, [r3], #-0
				uart_a_write (*buf);
     9a0:	0a000007 	beq	9c4 <ioreq_uart_a+0xcc>
     9a4:	09561126 	ldmdbeq	r6, {r1, r2, r5, r8, ip}^
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     9a8:	ae030000 	cdpge	0, 0, cr0, cr3, cr0, {0}
     9ac:	0a000024 	beq	a44 <UART0IntHandler+0x3c>
			uart_a_enable_int;
     9b0:	09621227 	stmdbeq	r2!, {r0, r1, r2, r5, r9, ip}^
     9b4:	aa170000 	bge	5c09bc <__ccfg+0x5a0a14>
     9b8:	22000009 	andcs	r0, r0, #9
			return 0;
     9bc:	000009aa 	andeq	r0, r0, sl, lsr #19
			if (len == UART_CNTRL_SETRATE) {
     9c0:	0019c703 	andseq	ip, r9, r3, lsl #14
				if (__pi_uart_setrate (*((word*)buf),
     9c4:	112b0a00 			; <UNDEFINED> instruction: 0x112b0a00
     9c8:	00000956 	andeq	r0, r0, r6, asr r9
     9cc:	0009c022 	andeq	ip, r9, r2, lsr #32
				syserror (EREQPAR, "uar");
     9d0:	24ff0300 	ldrbtcs	r0, [pc], #768	; 9d8 <ioreq_uart_a+0xe0>
			syserror (ENOOPER, "uai");
     9d4:	2c0a0000 	stccs	0, cr0, [sl], {-0}
			if (len == UART_CNTRL_GETRATE) {
     9d8:	00096e12 	andeq	r6, r9, r2, lsl lr
				return 1;
     9dc:	09d11700 	ldmibeq	r1, {r8, r9, sl, ip}^
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     9e0:	38030000 	stmdacc	r3, {}	; <UNPREDICTABLE>
			syserror (ENOOPER, "uai");
     9e4:	0a000005 	beq	a00 <ioreq_uart_a+0x108>
     9e8:	096e122d 	stmdbeq	lr!, {r0, r2, r3, r5, r9, ip}^
     9ec:	21030000 	mrscs	r0, (UNDEF: 3)
     9f0:	0a000009 	beq	a1c <UART0IntHandler+0x14>
     9f4:	09fa0f2e 	ldmibeq	sl!, {r1, r2, r3, r5, r8, r9, sl, fp}^
     9f8:	04110000 	ldreq	r0, [r1], #-0
     9fc:	000009aa 	andeq	r0, r0, sl, lsr #19
     a00:	320a080a 	andcc	r0, sl, #655360	; 0xa0000
     a04:	000a8e09 	andeq	r8, sl, r9, lsl #28
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     a08:	003e2300 	eorseq	r2, lr, r0, lsl #6
void UART0IntHandler () {
     a0c:	340a0000 	strcc	r0, [sl], #-0
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     a10:	0009c007 	andeq	ip, r9, r7
     a14:	07010100 	streq	r0, [r1, -r0, lsl #2]
     a18:	053e2300 	ldreq	r2, [lr, #-768]!	; 0xfffffd00
     a1c:	350a0000 	strcc	r0, [sl, #-0]
     a20:	0009c003 	andeq	ip, r9, r3
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     a24:	06010100 	streq	r0, [r1], -r0, lsl #2
     a28:	026f2300 	rsbeq	r2, pc, #0, 6
		RISE_N_SHINE;
     a2c:	360a0000 	strcc	r0, [sl], -r0
     a30:	0009c003 	andeq	ip, r9, r3
		i_trigger (devevent (UART_A, READ));
     a34:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     a38:	05782300 	ldrbeq	r2, [r8, #-768]!	; 0xfffffd00
     a3c:	370a0000 	strcc	r0, [sl, -r0]
     a40:	0009c003 	andeq	ip, r9, r3
     a44:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
     a48:	08652300 	stmdaeq	r5!, {r8, r9, sp}^
     a4c:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
     a50:	0009c003 	andeq	ip, r9, r3
     a54:	00040100 	andeq	r0, r4, r0, lsl #2
     a58:	05450b00 	strbeq	r0, [r5, #-2816]	; 0xfffff500
     a5c:	3a0a0000 	bcc	280a64 <__ccfg+0x260abc>
     a60:	0009c007 	andeq	ip, r9, r7
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     a64:	5e0b0100 	adfple	f0, f3, f0
     a68:	0a000007 	beq	a8c <UART0IntHandler+0x84>
     a6c:	09c0033c 	stmibeq	r0, {r2, r3, r4, r5, r8, r9}^
		i_trigger (devevent (UART_A, WRITE));
     a70:	0b020000 	bleq	80a78 <__ccfg+0x60ad0>
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     a74:	00000b52 	andeq	r0, r0, r2, asr fp
     a78:	c0033d0a 	andgt	r3, r3, sl, lsl #26
		RISE_N_SHINE;
     a7c:	03000009 	movweq	r0, #9
     a80:	0007930b 	andeq	r9, r7, fp, lsl #6
     a84:	083f0a00 	ldmdaeq	pc!, {r9, fp}	; <UNPREDICTABLE>
		i_trigger (devevent (UART_A, WRITE));
     a88:	000009d1 	ldrdeq	r0, [r0], -r1
     a8c:	c1030004 	tstgt	r3, r4
     a90:	0a000002 	beq	aa0 <UART0IntHandler+0x98>
     a94:	0a000341 	beq	17a0 <diag+0x134>
     a98:	8e220000 	cdphi	0, 2, cr0, cr2, cr0, {0}
     a9c:	2400000a 	strcs	r0, [r0], #-10
     aa0:	0000057f 	andeq	r0, r0, pc, ror r5
     aa4:	9a1a430a 	bls	6916d4 <__ccfg+0x67172c>
     aa8:	0100000a 	tsteq	r0, sl
     aac:	01b12401 			; <UNDEFINED> instruction: 0x01b12401
     ab0:	450a0000 	strmi	r0, [sl, #-0]
}
     ab4:	0005ed0e 	andeq	lr, r5, lr, lsl #26
     ab8:	24010100 	strcs	r0, [r1], #-256	; 0xffffff00
     abc:	000002ca 	andeq	r0, r0, sl, asr #5
     ac0:	ed1e450a 	cfldr32	mvfx4, [lr, #-40]	; 0xffffffd8
     ac4:	01000005 	tsteq	r0, r5
void __buttons_setirq (int val) {
     ac8:	0b080a01 	bleq	2032d4 <__ccfg+0x1e332c>
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     acc:	0afa098f 	beq	ffe83110 <_estack+0xdfe7e110>
     ad0:	4f0b0000 	svcmi	0x000b0000
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     ad4:	0b000006 	bleq	af4 <__buttons_setirq+0x2c>
     ad8:	096e0b90 	stmdbeq	lr!, {r4, r7, r8, r9, fp}^
     adc:	0b000000 	bleq	ae4 <__buttons_setirq+0x1c>
		bn = BUTTON_GPIO (__button_list [i]);
     ae0:	00000c84 	andeq	r0, r0, r4, lsl #25
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     ae4:	aa07910b 	bge	1e4f18 <__ccfg+0x1c4f70>
     ae8:	04000009 	streq	r0, [r0], #-9
     aec:	0001f40b 	andeq	pc, r1, fp, lsl #8
     af0:	10920b00 	addsne	r0, r2, r0, lsl #22
     af4:	000009cc 	andeq	r0, r0, ip, asr #19
     af8:	0b030006 	bleq	c0b18 <__ccfg+0xa0b70>
}
     afc:	0b00000a 	bleq	b2c <__pinlist_setirq+0x20>
     b00:	0ac90393 	beq	ff241954 <_estack+0xdf23c954>
     b04:	fa080000 	blx	200b0c <__ccfg+0x1e0b64>
     b08:	1100000a 	tstne	r0, sl
void __pinlist_setirq (int val) {
     b0c:	2500000b 	strcs	r0, [r0, #-11]
	for (i = 0; i < N_PINLIST; i++) {
     b10:	07b42400 	ldreq	r2, [r4, r0, lsl #8]!
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     b14:	990b0000 	stmdbls	fp, {}	; <UNPREDICTABLE>
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     b18:	000b060f 	andeq	r0, fp, pc, lsl #12
	for (i = 0; i < N_PINLIST; i++) {
     b1c:	0a010100 	beq	40f24 <__ccfg+0x20f7c>
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     b20:	09910c01 	ldmibeq	r1, {r0, sl, fp}
     b24:	00000b49 	andeq	r0, r0, r9, asr #22
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     b28:	00079a23 	andeq	r9, r7, r3, lsr #20
     b2c:	07930c00 	ldreq	r0, [r3, r0, lsl #24]
     b30:	000009c0 	andeq	r0, r0, r0, asr #19
	for (i = 0; i < N_PINLIST; i++) {
     b34:	00010701 	andeq	r0, r1, r1, lsl #14
}
     b38:	0004b423 	andeq	fp, r4, r3, lsr #8
     b3c:	03940c00 	orrseq	r0, r4, #0, 24
     b40:	000009c0 	andeq	r0, r0, r0, asr #19
     b44:	00000101 	andeq	r0, r0, r1, lsl #2
void GPIOIntHandler () {
     b48:	08710300 	ldmdaeq	r1!, {r8, r9}^
if (buttons_int) {
     b4c:	960c0000 	strls	r0, [ip], -r0
     b50:	000b1f03 	andeq	r1, fp, r3, lsl #30
	buttons_disable ();
     b54:	0b491700 	bleq	124675c <__ccfg+0x12267b4>
     b58:	55080000 	strpl	r0, [r8, #-0]
	i_trigger ((aword)&__button_list);
     b5c:	6500000b 	strvs	r0, [r0, #-11]
     b60:	2500000b 	strcs	r0, [r0, #-11]
     b64:	0b5a1700 	bleq	168676c <__ccfg+0x16667c4>
     b68:	83240000 			; <UNDEFINED> instruction: 0x83240000
     b6c:	0c000003 	stceq	0, cr0, [r0], {3}
     b70:	0b65179c 	bleq	19469e8 <__ccfg+0x1926a40>
     b74:	01010000 	mrseq	r0, (UNDEF: 1)
     b78:	0009b608 	andeq	fp, r9, r8, lsl #12
     b7c:	000b8300 	andeq	r8, fp, r0, lsl #6
     b80:	17002500 	strne	r2, [r0, -r0, lsl #10]
     b84:	00000b78 	andeq	r0, r0, r8, ror fp
	RISE_N_SHINE;
     b88:	0004f824 	andeq	pc, r4, r4, lsr #16
     b8c:	13060d00 	movwne	r0, #27904	; 0x6d00
     b90:	00000b83 	andeq	r0, r0, r3, lsl #23
if (pin_sensor_int) {
     b94:	40240101 	eormi	r0, r4, r1, lsl #2
     b98:	0b000007 	bleq	bbc <GPIOIntHandler+0x74>
	i_trigger ((aword)(&__input_pins));
     b9c:	09d10ec3 	ldmibeq	r1, {r0, r1, r6, r7, r9, sl, fp}^
     ba0:	01010000 	mrseq	r0, (UNDEF: 1)
     ba4:	0009aa05 	andeq	sl, r9, r5, lsl #20
     ba8:	016e0e00 	cmneq	lr, r0, lsl #28
     bac:	000bb110 	andeq	fp, fp, r0, lsl r1
     bb0:	b7041100 	strlt	r1, [r4, -r0, lsl #2]
     bb4:	2000000b 	andcs	r0, r0, fp
     bb8:	000bc301 	andeq	ip, fp, r1, lsl #6
     bbc:	09aa1600 	stmibeq	sl!, {r9, sl, ip}
     bc0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     bc4:	000005fa 	strdeq	r0, [r0], -sl
	__pinsen_disable_and_clear;
     bc8:	00000bce 	andeq	r0, r0, lr, asr #23
	RISE_N_SHINE;
     bcc:	c3170025 	tstgt	r7, #37	; 0x25
     bd0:	2100000b 	tstcs	r0, fp
     bd4:	00000808 	andeq	r0, r0, r8, lsl #16
}
     bd8:	13017f0e 	movwne	r7, #7950	; 0x1f0e
     bdc:	00000bce 	andeq	r0, r0, lr, asr #23
     be0:	66210101 	strtvs	r0, [r1], -r1, lsl #2
     be4:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
     be8:	dd140182 	ldfles	f0, [r4, #-520]	; 0xfffffdf8
void system_init () {
     bec:	01000009 	tsteq	r0, r9
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     bf0:	0f040a01 	svceq	0x00040a01
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     bf4:	0c150908 			; <UNDEFINED> instruction: 0x0c150908
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     bf8:	fa0b0000 	blx	2c0c00 <__ccfg+0x2a0c58>
     bfc:	0f000001 	svceq	0x00000001
     c00:	09aa070f 	stmibeq	sl!, {r0, r1, r2, r3, r8, r9, sl}
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     c04:	0b000000 	bleq	c0c <system_init+0x20>
     c08:	000009e5 	andeq	r0, r0, r5, ror #19
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     c0c:	aa03100f 	bge	c4c50 <__ccfg+0xa4ca8>
     c10:	02000009 	andeq	r0, r0, #9
     c14:	0a9c0300 	beq	fe70181c <_estack+0xde6fc81c>
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     c18:	110f0000 	mrsne	r0, CPSR
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     c1c:	000bf103 	andeq	pc, fp, r3, lsl #2
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     c20:	0f200a00 	svceq	0x00200a00
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     c24:	0c930916 			; <UNDEFINED> instruction: 0x0c930916
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     c28:	430b0000 	movwmi	r0, #45056	; 0xb000
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     c2c:	0f000004 	svceq	0x00000004
		pin = (port_confs [i] >> 19) & 0x1f;
     c30:	0cad0817 	stceq	8, cr0, [sp], #92	; 0x5c
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     c34:	0b000000 	bleq	c3c <system_init+0x50>
		pin = (port_confs [i] >> 19) & 0x1f;
     c38:	0000078b 	andeq	r0, r0, fp, lsl #15
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     c3c:	c808180f 	stmdagt	r8, {r0, r1, r2, r3, fp, ip}
     c40:	0400000c 	streq	r0, [r0], #-12
     c44:	0009330b 	andeq	r3, r9, fp, lsl #6
     c48:	08190f00 	ldmdaeq	r9, {r8, r9, sl, fp}
		if (port_confs [i] & 0x80)
     c4c:	00000cfe 	strdeq	r0, [r0], -lr
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     c50:	09dd0b08 	ldmibeq	sp, {r3, r8, r9, fp}^
     c54:	1a0f0000 	bne	3c0c5c <__ccfg+0x3a0cb4>
		if (port_confs [i] & 0x40)
     c58:	000d1908 	andeq	r1, sp, r8, lsl #18
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     c5c:	cc0b0c00 	stcgt	12, cr0, [fp], {-0}
     c60:	0f000007 	svceq	0x00000007
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     c64:	0d2f081b 	stceq	8, cr0, [pc, #-108]!	; c00 <system_init+0x14>
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     c68:	0b100000 	bleq	400c70 <__ccfg+0x3e0cc8>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     c6c:	0000083c 	andeq	r0, r0, ip, lsr r8
	all_leds_blink;
     c70:	2f081c0f 	svccs	0x00081c0f
     c74:	1400000d 	strne	r0, [r0], #-13
     c78:	0001dd0b 	andeq	sp, r1, fp, lsl #26
     c7c:	081d0f00 	ldmdaeq	sp, {r8, r9, sl, fp}
     c80:	00000d2f 	andeq	r0, r0, pc, lsr #26
     c84:	02b80b18 	adcseq	r0, r8, #24, 22	; 0x6000
     c88:	1e0f0000 	cdpne	0, 0, cr0, cr15, cr0, {0}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     c8c:	00008d06 	andeq	r8, r0, r6, lsl #26
     c90:	15001c00 	strne	r1, [r0, #-3072]	; 0xfffff400
     c94:	00008d01 	andeq	r8, r0, r1, lsl #26
     c98:	000cad00 	andeq	sl, ip, r0, lsl #26
     c9c:	008d1600 	addeq	r1, sp, r0, lsl #12
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     ca0:	8d160000 	ldchi	0, cr0, [r6, #-0]
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     ca4:	16000000 	strne	r0, [r0], -r0
     ca8:	00000992 	muleq	r0, r2, r9
	IntEnable (INT_AON_RTC_COMB);
     cac:	93041100 	movwls	r1, #16640	; 0x4100
     cb0:	1500000c 	strne	r0, [r0, #-12]
     cb4:	00008d01 	andeq	r8, r0, r1, lsl #26
	__pi_malloc_init ();
     cb8:	000cc800 	andeq	ip, ip, r0, lsl #16
	IntEnable (INT_AON_GPIO_EDGE);
     cbc:	008d1600 	addeq	r1, sp, r0, lsl #12
     cc0:	8d160000 	ldchi	0, cr0, [r6, #-0]
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     cc4:	00000000 	andeq	r0, r0, r0
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     cc8:	0cb30411 	cfldrseq	mvf0, [r3], #68	; 0x44
     ccc:	01150000 	tsteq	r5, r0
     cd0:	0000008d 	andeq	r0, r0, sp, lsl #1
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     cd4:	00000cf2 	strdeq	r0, [r0], -r2
     cd8:	00008d16 	andeq	r8, r0, r6, lsl sp
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     cdc:	09ee1600 	stmibeq	lr!, {r9, sl, ip}^
     ce0:	8d160000 	ldchi	0, cr0, [r6, #-0]
     ce4:	16000000 	strne	r0, [r0], -r0
	urates [0] = UART_RATE / 100;
     ce8:	00000cf2 	strdeq	r0, [r0], -r2
     cec:	000cf816 	andeq	pc, ip, r6, lsl r8	; <UNPREDICTABLE>
	reinit_uart ();
     cf0:	04110000 	ldreq	r0, [r1], #-0
	EXTRA_INITIALIZERS;
     cf4:	0000008d 	andeq	r0, r0, sp, lsl #1
     cf8:	0c150411 	cfldrseq	mvf0, [r5], {17}
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     cfc:	04110000 	ldreq	r0, [r1], #-0
     d00:	00000cce 	andeq	r0, r0, lr, asr #25
     d04:	008d0115 	addeq	r0, sp, r5, lsl r1
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     d08:	0d190000 	ldceq	0, cr0, [r9, #-0]
     d0c:	ee160000 	cdp	0, 1, cr0, cr6, cr0, {0}
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     d10:	16000009 	strne	r0, [r0], -r9
     d14:	00000cf8 	strdeq	r0, [r0], -r8
			devinit [i] . init (devinit [i] . param);
     d18:	04041100 	streq	r1, [r4], #-256	; 0xffffff00
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     d1c:	1500000d 	strne	r0, [r0, #-13]
     d20:	00008d01 	andeq	r8, r0, r1, lsl #26
     d24:	000d2f00 	andeq	r2, sp, r0, lsl #30
	IntEnable (INT_UART0_COMB);
     d28:	09ee1600 	stmibeq	lr!, {r9, sl, ip}^
     d2c:	11000000 	mrsne	r0, (UNDEF: 0)
}
     d30:	000d1f04 	andeq	r1, sp, r4, lsl #30
	tci_run_auxiliary_timer ();
     d34:	0a520300 	beq	148193c <__ccfg+0x1461994>
		diag ("");
     d38:	1f0f0000 	svcne	0x000f0000
     d3c:	000c2103 	andeq	r2, ip, r3, lsl #2
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     d40:	0d351700 	ldceq	7, cr1, [r5, #-0]
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     d44:	43210000 			; <UNDEFINED> instruction: 0x43210000
		diag ("Leftover RAM: %d bytes",
     d48:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
     d4c:	d10e02d8 	ldrdle	r0, [lr, -r8]
     d50:	01000009 	tsteq	r0, r9
     d54:	0e081c01 	cdpeq	12, 0, cr1, cr8, cr1, {0}
     d58:	7c090303 	stcvc	3, cr0, [r9], {3}
     d5c:	1900000d 	stmdbne	r0, {r0, r2, r3}
     d60:	00003832 	andeq	r3, r0, r2, lsr r8
     d64:	0703070e 	streq	r0, [r3, -lr, lsl #14]
     d68:	000009aa 	andeq	r0, r0, sl, lsr #19
     d6c:	0bdc1900 	bleq	ff707174 <_estack+0xdf702174>
     d70:	080e0000 	stmdaeq	lr, {}	; <UNPREDICTABLE>
     d74:	09e20803 	stmibeq	r2!, {r0, r1, fp}^
     d78:	00040000 	andeq	r0, r4, r0
     d7c:	0003fb05 	andeq	pc, r3, r5, lsl #22
     d80:	03090e00 	movweq	r0, #40448	; 0x9e00
     d84:	000d5503 	andeq	r5, sp, r3, lsl #10
     d88:	00331b00 	eorseq	r1, r3, r0, lsl #22
     d8c:	0e300000 	cdpeq	0, 3, cr0, cr0, cr0, {0}
     d90:	ec08030b 	stc	3, cr0, [r8], {11}
     d94:	1900000d 	stmdbne	r0, {r0, r2, r3}
     d98:	00001add 	ldrdeq	r1, [r0], -sp
     d9c:	0703140e 	streq	r1, [r3, -lr, lsl #8]
     da0:	000009aa 	andeq	r0, r0, sl, lsr #19
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
     da4:	09541900 	ldmdbeq	r4, {r8, fp, ip}^
     da8:	150e0000 	strne	r0, [lr, #-0]
     dac:	09aa0703 	stmibeq	sl!, {r0, r1, r8, r9, sl}
     db0:	19020000 	stmdbne	r2, {}	; <UNPREDICTABLE>
     db4:	000049a2 	andeq	r4, r0, r2, lsr #19
     db8:	0a03160e 	beq	c65f8 <__ccfg+0xa6650>
     dbc:	00000ba4 	andeq	r0, r0, r4, lsr #23
     dc0:	44051904 	strmi	r1, [r5], #-2308	; 0xfffff6fc
}
     dc4:	170e0000 	strne	r0, [lr, -r0]
__attribute__ ((noreturn)) void __pi_release () {
     dc8:	09e20803 	stmibeq	r2!, {r0, r1, fp}^
     dcc:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
     dd0:	00000007 	andeq	r0, r0, r7
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     dd4:	0f03180e 	svceq	0x0003180e
	check_stack_overflow;
     dd8:	00000dec 	andeq	r0, r0, ip, ror #27
     ddc:	07c7190c 	strbeq	r1, [r7, ip, lsl #18]
     de0:	190e0000 	stmdbne	lr, {}	; <UNPREDICTABLE>
	update_n_wake (MAX_WORD, NO);
     de4:	0dfc1503 	cfldr64eq	mvdx1, [ip, #12]!
     de8:	002c0000 	eoreq	r0, ip, r0
     dec:	000d7c08 	andeq	r7, sp, r8, lsl #24
	for_all_tasks (__pi_curr) {
     df0:	000dfc00 	andeq	pc, sp, r0, lsl #24
     df4:	00940900 	addseq	r0, r4, r0, lsl #18
     df8:	00030000 	andeq	r0, r3, r0
  __ASM volatile ("cpsid i" : : : "memory");
     dfc:	0d890411 	cfstrseq	mvf0, [r9, #68]	; 0x44
	__SLEEP;
     e00:	49050000 	stmdbmi	r5, {}	; <UNPREDICTABLE>
     e04:	0e000009 	cdpeq	0, 0, cr0, cr0, cr9, {0}
     e08:	891b031c 	ldmdbhi	fp, {r2, r3, r4, r8, r9}
     e0c:	2100000d 	tstcs	r0, sp
	system_event_count ++;
     e10:	00000929 	andeq	r0, r0, r9, lsr #18
     e14:	14031e0e 	strne	r1, [r3], #-3598	; 0xfffff1f2
	switch (__pi_systat.effpdm) {
     e18:	00000e1e 	andeq	r0, r0, lr, lsl lr
     e1c:	04110101 	ldreq	r0, [r1], #-257	; 0xfffffeff
     e20:	00000e02 	andeq	r0, r0, r2, lsl #28
     e24:	00058b24 	andeq	r8, r5, r4, lsr #22
			__WFI ();
     e28:	0d1d1000 	ldceq	0, cr1, [sp, #-0]
     e2c:	000009aa 	andeq	r0, r0, sl, lsr #19
     e30:	76240101 	strtvc	r0, [r4], -r1, lsl #2
	check_stack_overflow;
     e34:	10000002 	andne	r0, r0, r2
     e38:	09bb161e 	ldmibeq	fp!, {r1, r2, r3, r4, r9, sl, ip}
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     e3c:	01010000 	mrseq	r0, (UNDEF: 1)
     e40:	00099624 	andeq	r9, r9, r4, lsr #12
			(__pi_curr->code) (tstate (__pi_curr));
     e44:	201e1000 	andscs	r1, lr, r0
			goto Redo;
     e48:	000009bb 			; <UNDEFINED> instruction: 0x000009bb
	for_all_tasks (__pi_curr) {
     e4c:	b2240101 	eorlt	r0, r4, #1073741824	; 0x40000000
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     e50:	10000009 	andne	r0, r0, r9
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     e54:	0e1e1422 	cfmuldeq	mvd1, mvd14, mvd2
     e58:	01010000 	mrseq	r0, (UNDEF: 1)
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     e5c:	00000e24 	andeq	r0, r0, r4, lsr #28
     e60:	180c1100 	stmdane	ip, {r8, ip}
     e64:	00000d41 	andeq	r0, r0, r1, asr #26
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     e68:	01260101 			; <UNDEFINED> instruction: 0x01260101
     e6c:	00000025 	andeq	r0, r0, r5, lsr #32
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     e70:	a20e1201 	andge	r1, lr, #268435456	; 0x10000000
     e74:	2700000e 	strcs	r0, [r0, -lr]
			__WFI ();
     e78:	0000095a 	andeq	r0, r0, sl, asr r9
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     e7c:	07ec2700 	strbeq	r2, [ip, r0, lsl #14]!
     e80:	27010000 	strcs	r0, [r1, -r0]
}
     e84:	00000b44 	andeq	r0, r0, r4, asr #22
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     e88:	08af2702 	stmiaeq	pc!, {r1, r8, r9, sl, sp}	; <UNPREDICTABLE>
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     e8c:	27030000 	strcs	r0, [r3, -r0]
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     e90:	000007dc 	ldrdeq	r0, [r0], -ip
     e94:	07f62704 	ldrbeq	r2, [r6, r4, lsl #14]!
			PRCMPowerDomainOff (__pi_systat.ondmns |
     e98:	28050000 	stmdacs	r5, {}	; <UNPREDICTABLE>
     e9c:	0000087a 	andeq	r0, r0, sl, ror r8
     ea0:	0d03007f 	stceq	0, cr0, [r3, #-508]	; 0xfffffe04
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     ea4:	01000002 	tsteq	r0, r2
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ea8:	0e6a7a12 			; <UNDEFINED> instruction: 0x0e6a7a12
     eac:	1c0a0000 	stcne	0, cr0, [sl], {-0}
     eb0:	20091401 	andcs	r1, r9, r1, lsl #8
     eb4:	0b00000f 	bleq	ef8 <__pi_release+0x130>
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     eb8:	0000046c 	andeq	r0, r0, ip, ror #8
     ebc:	3f0b1501 	svccc	0x000b1501
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     ec0:	00000000 	andeq	r0, r0, r0
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     ec4:	0003a80b 	andeq	sl, r3, fp, lsl #16
     ec8:	0a160100 	beq	5812d0 <__ccfg+0x561328>
     ecc:	000005f3 	strdeq	r0, [r0], -r3
     ed0:	06400b02 	strbeq	r0, [r0], -r2, lsl #22
     ed4:	17010000 	strne	r0, [r1, -r0]
			SysCtrlSetRechargeBeforePowerDown
     ed8:	0005f30a 	andeq	pc, r5, sl, lsl #6
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     edc:	ff0b0300 			; <UNDEFINED> instruction: 0xff0b0300
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     ee0:	01000007 	tsteq	r0, r7
     ee4:	05f30a18 	ldrbeq	r0, [r3, #2584]!	; 0xa18
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     ee8:	0b040000 	bleq	100ef0 <__ccfg+0xe0f48>
     eec:	00000295 	muleq	r0, r5, r2
     ef0:	f30a1901 	vmls.i8	d1, d10, d1
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     ef4:	05000005 	streq	r0, [r0, #-5]
     ef8:	000a720b 	andeq	r7, sl, fp, lsl #4
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     efc:	0a1a0100 	beq	681304 <__ccfg+0x66135c>
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     f00:	00000f20 	andeq	r0, r0, r0, lsr #30
     f04:	087f0b06 	ldmdaeq	pc!, {r1, r2, r8, r9, fp}^	; <UNPREDICTABLE>
     f08:	1b010000 	blne	40f10 <__ccfg+0x20f68>
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     f0c:	0005f30a 	andeq	pc, r5, sl, lsl #6
			while (!(AONWUCPowerStatusGet () &
     f10:	d40b1a00 	strle	r1, [fp], #-2560	; 0xfffff600
			PRCMPowerDomainOn (__pi_systat.ondmns);
     f14:	01000005 	tsteq	r0, r5
     f18:	05f30a1c 	ldrbeq	r0, [r3, #2588]!	; 0xa1c
     f1c:	001b0000 	andseq	r0, fp, r0
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     f20:	0005f308 	andeq	pc, r5, r8, lsl #6
     f24:	000f3000 	andeq	r3, pc, r0
     f28:	00940900 	addseq	r0, r4, r0, lsl #18
     f2c:	00130000 	andseq	r0, r3, r0
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     f30:	00007d03 	andeq	r7, r0, r3, lsl #26
     f34:	031d0100 	tsteq	sp, #0, 2
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     f38:	00000eae 	andeq	r0, r0, lr, lsr #29
     f3c:	1f01200a 	svcne	0x0001200a
			SysCtrlAdjustRechargeAfterPowerDown ();
     f40:	000f6d09 	andeq	r6, pc, r9, lsl #26
			reinit_uart ();
     f44:	0ac30b00 	beq	ff0c3b4c <_estack+0xdf0beb4c>
     f48:	20010000 	andcs	r0, r1, r0
     f4c:	00097a0c 	andeq	r7, r9, ip, lsl #20
}
     f50:	ed0b0000 	stc	0, cr0, [fp, #-0]
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     f54:	01000005 	tsteq	r0, r5
     f58:	05f30a21 	ldrbeq	r0, [r3, #2593]!	; 0xa21
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     f5c:	0b080000 	bleq	200f64 <__ccfg+0x1e0fbc>
     f60:	00000aa5 	andeq	r0, r0, r5, lsr #21
     f64:	200a2201 	andcs	r2, sl, r1, lsl #4
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     f68:	0900000f 	stmdbeq	r0, {r0, r1, r2, r3}
     f6c:	00000300 	andeq	r0, r0, r0, lsl #6
     f70:	23010000 	movwcs	r0, #4096	; 0x1000
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     f74:	000f3c03 	andeq	r3, pc, r3, lsl #24
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     f78:	0f6d0800 	svceq	0x006d0800
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     f7c:	0f890000 	svceq	0x00890000
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     f80:	94090000 	strls	r0, [r9], #-0
     f84:	27000000 	strcs	r0, [r0, -r0]
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     f88:	0a932900 	beq	fe4cb390 <_estack+0xde4c6390>
     f8c:	25010000 	strcs	r0, [r1, #-0]
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     f90:	000f7908 	andeq	r7, pc, r8, lsl #18
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     f94:	03050100 	movweq	r0, #20736	; 0x5100
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     f98:	20000638 	andcs	r0, r0, r8, lsr r6
     f9c:	0008cc29 	andeq	ip, r8, r9, lsr #24
			PRCMPowerDomainOff (
     fa0:	06270100 	strteq	r0, [r7], -r0, lsl #2
     fa4:	00000840 	andeq	r0, r0, r0, asr #16
	__SLEEP;
     fa8:	48030501 	stmdami	r3, {r0, r8, sl}
     fac:	2920000b 	stmdbcs	r0!, {r0, r1, r3}
  __ASM volatile ("cpsie i" : : : "memory");
     fb0:	000000a2 	andeq	r0, r0, r2, lsr #1
	goto Redo;
     fb4:	f3062901 	vmls.i8	d2, d6, d1
     fb8:	01000005 	tsteq	r0, r5
     fbc:	06300305 	ldrteq	r0, [r0], -r5, lsl #6
     fc0:	09292000 	stmdbeq	r9!, {sp}
     fc4:	0100000b 	tsteq	r0, fp
     fc8:	003f072a 	eorseq	r0, pc, sl, lsr #14
     fcc:	05010000 	streq	r0, [r1, #-0]
     fd0:	000b4203 	andeq	r4, fp, r3, lsl #4
     fd4:	047a2920 	ldrbteq	r2, [sl], #-2336	; 0xfffff6e0
     fd8:	2c010000 	stccs	0, cr0, [r1], {-0}
     fdc:	00008d05 	andeq	r8, r0, r5, lsl #26
     fe0:	03050100 	movweq	r0, #20736	; 0x5100
     fe4:	20000b44 	andcs	r0, r0, r4, asr #22
     fe8:	00023929 	andeq	r3, r2, r9, lsr #18
     fec:	052d0100 	streq	r0, [sp, #-256]!	; 0xffffff00
     ff0:	0000008d 	andeq	r0, r0, sp, lsl #1
     ff4:	64030501 	strvs	r0, [r3], #-1281	; 0xfffffaff
     ff8:	2920000b 	stmdbcs	r0!, {r0, r1, r3}
     ffc:	0000079f 	muleq	r0, pc, r7	; <UNPREDICTABLE>
    1000:	f3062f01 	vpmax.f32	d2, d6, d1
    1004:	01000005 	tsteq	r0, r5
    1008:	0b380305 	bleq	e01c24 <__ccfg+0xde1c7c>
    100c:	b9292000 	stmdblt	r9!, {sp}
    1010:	01000004 	tsteq	r0, r4
    1014:	0ea20a31 			; <UNDEFINED> instruction: 0x0ea20a31
    1018:	05010000 	streq	r0, [r1, #-0]
    101c:	000b4003 	andeq	r4, fp, r3
	cli_tim;
    1020:	084e2920 	stmdaeq	lr, {r5, r8, fp, sp}^
    1024:	33010000 	movwcc	r0, #4096	; 0x1000
    1028:	0010340b 	andseq	r3, r0, fp, lsl #8
	diag ("PicOS halted");
    102c:	03050100 	movweq	r0, #20736	; 0x5100
	mdelay (500);
    1030:	20000b3c 	andcs	r0, r0, ip, lsr fp
    1034:	0f300411 	svceq	0x00300411
	setpowermode (2);
    1038:	732a0000 			; <UNDEFINED> instruction: 0x732a0000
	__PCB = NULL;
    103c:	01006466 	tsteq	r0, r6, ror #8
	release;
    1040:	008d0535 	addeq	r0, sp, r5, lsr r5
    1044:	05010000 	streq	r0, [r1, #-0]
    1048:	00000003 	andeq	r0, r0, r3
    104c:	e5012b20 	str	r2, [r1, #-2848]	; 0xfffff4e0
int main (void) {
    1050:	01000001 	tsteq	r0, r1
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    1054:	980106f7 	stmdals	r1, {r0, r1, r2, r4, r5, r6, r7, r9, sl}
    1058:	6c000002 	stcvs	0, cr0, [r0], {2}
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    105c:	01000005 	tsteq	r0, r5
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    1060:	0012239c 	mulseq	r2, ip, r3
	system_init ();
    1064:	09782c00 	ldmdbeq	r8!, {sl, fp, sp}^
	tcv_init ();
    1068:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    106c:	0009aa11 	andeq	sl, r9, r1, lsl sl
    1070:	00000000 	andeq	r0, r0, r0
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
    1074:	02eb2d00 	rsceq	r2, fp, #0, 26
    1078:	05010000 	streq	r0, [r1, #-0]
    107c:	02cc1701 	sbceq	r1, ip, #262144	; 0x40000
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    1080:	062d0000 	strteq	r0, [sp], -r0
    1084:	01000005 	tsteq	r0, r5
	delay (16, 0);
    1088:	1e1a011d 	mrcne	1, 0, r0, cr10, cr13, {0}
    108c:	2d000003 	stccs	0, cr0, [r0, #-12]
    1090:	0000059f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
	__pi_release ();
    1094:	16012101 	strne	r2, [r1], -r1, lsl #2
    1098:	00000340 	andeq	r0, r0, r0, asr #6
    109c:	00034b2d 	andeq	r4, r3, sp, lsr #22
    10a0:	01240100 			; <UNDEFINED> instruction: 0x01240100
    10a4:	00034819 	andeq	r4, r3, r9, lsl r8
    10a8:	03242d00 			; <UNDEFINED> instruction: 0x03242d00
    10ac:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
static void killev (__pi_pcb_t *pid) {
    10b0:	038a1b01 	orreq	r1, sl, #1024	; 0x400
	wfun = (aword)(pid->code);
    10b4:	6e2d0000 	cdpvs	0, 2, cr0, cr13, cr0, {0}
	for_all_tasks (i) {
    10b8:	01000003 	tsteq	r0, r3
		for (j = 0; j < nevents (i); j++) {
    10bc:	921b015a 	andsls	r0, fp, #-2147483626	; 0x80000016
    10c0:	2d000003 	stccs	0, cr0, [r0, #-12]
    10c4:	000000a9 	andeq	r0, r0, r9, lsr #1
			    || i->Events [j] . Event == wfun
    10c8:	1a016001 	bne	590d4 <__ccfg+0x3912c>
		for (j = 0; j < nevents (i); j++) {
    10cc:	000003a2 	andeq	r0, r0, r2, lsr #7
			if (i->Events [j] . Event == (aword)pid
    10d0:	0001bf2d 	andeq	fp, r1, sp, lsr #30
    10d4:	01630100 	cmneq	r3, r0, lsl #2
    10d8:	0003aa1a 	andeq	sl, r3, sl, lsl sl
				wakeupev (i, j);
    10dc:	008a2d00 	addeq	r2, sl, r0, lsl #26
    10e0:	6d010000 	stcvs	0, cr0, [r1, #-0]
	for_all_tasks (i) {
    10e4:	03ca1e01 	biceq	r1, sl, #1, 28
}
    10e8:	132d0000 			; <UNDEFINED> instruction: 0x132d0000
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    10ec:	01000004 	tsteq	r0, r4
static void qfree (aword *ch) {
    10f0:	061c0174 			; <UNDEFINED> instruction: 0x061c0174
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    10f4:	2d000004 	stccs	0, cr0, [r0, #-16]
	cc = (aword*)(mpools + MA_NP);
    10f8:	000005f5 	strdeq	r0, [r0], -r5
	m_setnextp (ch, chunk);
    10fc:	20017801 	andcs	r7, r1, r1, lsl #16
	m_setnextp (cc, ch);
    1100:	00000414 	andeq	r0, r0, r4, lsl r4
}
    1104:	0003102d 	andeq	r1, r3, sp, lsr #32
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    1108:	017f0100 	cmneq	pc, r0, lsl #2
    110c:	00042e1a 	andeq	r2, r4, sl, lsl lr
    1110:	0a5c2d00 	beq	170c518 <__ccfg+0x16ec570>
			m_setnextp (cc, m_nextp (chunk));
    1114:	8b010000 	blhi	4111c <__ccfg+0x21174>
			m_size (chunk) += m_hdrlen + m_size (ch);
    1118:	04581c01 	ldrbeq	r1, [r8], #-3073	; 0xfffff3ff
    111c:	ce2d0000 	cdpgt	0, 2, cr0, cr13, cr0, {0}
    1120:	01000004 	tsteq	r0, r4
    1124:	6c1e0190 	ldfvss	f0, [lr], {144}	; 0x90
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    1128:	2d000004 	stccs	0, cr0, [r0, #-16]
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    112c:	00000692 	muleq	r0, r2, r6
    1130:	24019401 	strcs	r9, [r1], #-1025	; 0xfffffbff
    1134:	0000047a 	andeq	r0, r0, sl, ror r4
			m_setnextp (cc, m_nextp (chunk));
    1138:	0000182d 	andeq	r1, r0, sp, lsr #16
			m_size (ch) += m_hdrlen + m_size (chunk);
    113c:	01970100 	orrseq	r0, r7, r0, lsl #2
    1140:	00048221 	andeq	r8, r4, r1, lsr #4
    1144:	00452d00 	subeq	r2, r5, r0, lsl #26
    1148:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    114c:	049c2201 	ldreq	r2, [ip], #513	; 0x201
    1150:	482d0000 	stmdami	sp!, {}	; <UNPREDICTABLE>
			if (m_size (chunk) >= m_size (ch))
    1154:	01000002 	tsteq	r0, r2
    1158:	a41f01a1 	ldrge	r0, [pc], #-417	; 1160 <qfree+0x74>
    115c:	2d000004 	stccs	0, cr0, [r0, #-16]
		chunk = m_nextp (chunk))
    1160:	000005af 	andeq	r0, r0, pc, lsr #11
    1164:	1f01a901 	svcne	0x0001a901
    1168:	000004c6 	andeq	r0, r0, r6, asr #9
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    116c:	0000202e 	andeq	r2, r0, lr, lsr #32
	diag_wait (a);
    1170:	09b82f00 	ldmibeq	r8!, {r8, r9, sl, fp, sp}
	diag_wchar (c, a);
    1174:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
    1178:	0005ed12 	andeq	lr, r5, r2, lsl sp
}
    117c:	04303000 	ldrteq	r3, [r0], #-0
    1180:	03010000 	movweq	r0, #4096	; 0x1000
	syserror (ESTATE, "state");
    1184:	05f31101 	ldrbeq	r1, [r3, #257]!	; 0x101
    1188:	03050000 	movweq	r0, #20480	; 0x5000
    118c:	20000544 	andcs	r0, r0, r4, asr #10
    1190:	00003831 	andeq	r3, r0, r1, lsr r8
	for (i = 0; i < MAX_UTIMERS; i++)
    1194:	0011aa00 	andseq	sl, r1, r0, lsl #20
void utimer_add (address ut) {
    1198:	04653000 	strbteq	r3, [r5], #-0
    119c:	25010000 	strcs	r0, [r1, #-0]
		if (__pi_utims [i] == NULL)
    11a0:	05f30e01 	ldrbeq	r0, [r3, #3585]!	; 0xe01
	for (i = 0; i < MAX_UTIMERS; i++)
    11a4:	91020000 	mrsls	r0, (UNDEF: 2)
    11a8:	a432006f 	ldrtge	r0, [r2], #-111	; 0xffffff91
		syserror (ERESOURCE, "ut a");
    11ac:	c6000004 	strgt	r0, [r0], -r4
	__pi_utims [i] = ut;
    11b0:	c8000004 	stmdagt	r0, {r2}
}
    11b4:	30000011 	andcc	r0, r0, r1, lsl r0
    11b8:	000009ca 	andeq	r0, r0, sl, asr #19
    11bc:	0e01a201 	cdpeq	2, 0, cr10, cr1, cr1, {0}
	*t = v;
    11c0:	000005f3 	strdeq	r0, [r0], -r3
	TCI_RUN_AUXILIARY_TIMER;
    11c4:	006f9102 	rsbeq	r9, pc, r2, lsl #2
void update_n_wake (word min, Boolean force) {
    11c8:	00122333 	andseq	r2, r2, r3, lsr r3
	if (TCI_UPDATE_DELAY_TICKS (force))
    11cc:	0003b600 	andeq	fp, r3, r0, lsl #12
    11d0:	0003be00 	andeq	fp, r3, r0, lsl #28
    11d4:	01660100 	cmneq	r6, r0, lsl #2
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    11d8:	0011e70e 	andseq	lr, r1, lr, lsl #14
    11dc:	12363400 	eorsne	r3, r6, #0, 8
    11e0:	001e0000 	andseq	r0, lr, r0
    11e4:	33000000 	movwcc	r0, #0
    11e8:	00001223 	andeq	r1, r0, r3, lsr #4
    11ec:	00000420 	andeq	r0, r0, r0, lsr #8
    11f0:	00000428 	andeq	r0, r0, r8, lsr #8
    11f4:	0d017b01 	vstreq	d7, [r1, #-4]
    11f8:	00001206 	andeq	r1, r0, r6, lsl #4
    11fc:	00123634 	andseq	r3, r2, r4, lsr r6
    1200:	00003500 	andeq	r3, r0, r0, lsl #10
    1204:	23350000 	teqcs	r5, #0
    1208:	8e000012 	mcrhi	0, 0, r0, cr0, cr2, {0}
		for_all_tasks (i) {
    120c:	96000004 	strls	r0, [r0], -r4
	__pi_mintk = znew + min;
    1210:	01000004 	tsteq	r0, r4
    1214:	340d019a 	strcc	r0, [sp], #-410	; 0xfffffe66
			if (!twaiting (i))
    1218:	00001236 	andeq	r1, r0, r6, lsr r2
    121c:	0000004c 	andeq	r0, r0, ip, asr #32
			if (twakecnd (__pi_old, znew, i->Timer)) {
    1220:	36000000 	strcc	r0, [r0], -r0
    1224:	00027f01 	andeq	r7, r2, r1, lsl #30
    1228:	09ef0100 	stmibeq	pc!, {r8}^	; <UNPREDICTABLE>
    122c:	00099e01 	andeq	r9, r9, r1, lsl #28
    1230:	12430100 	subne	r0, r3, #0, 2
    1234:	fd370000 	ldc2	0, cr0, [r7, #-0]
    1238:	0100004e 	tsteq	r0, lr, asr #32
    123c:	09c01cef 	stmibeq	r0, {r0, r1, r2, r3, r5, r6, r7, sl, fp, ip}^
    1240:	2b000000 	blcs	1248 <update_n_wake+0x80>
    1244:	0004e601 	andeq	lr, r4, r1, lsl #12
    1248:	06ba0100 	ldrteq	r0, [sl], r0, lsl #2
    124c:	0001bc01 	andeq	fp, r1, r1, lsl #24
				wakeuptm (i);
    1250:	00029800 	andeq	r9, r2, r0, lsl #16
    1254:	d09c0100 	addsle	r0, ip, r0, lsl #2
		for_all_tasks (i) {
    1258:	2c000012 	stccs	0, cr0, [r0], {18}
				d = i->Timer - znew;
    125c:	00000978 	andeq	r0, r0, r8, ror r9
    1260:	aa11ba01 	bge	46fa6c <__ccfg+0x44fac4>
    1264:	63000009 	movwvs	r0, #9
		if ((word)(__pi_mintk - znew) < min) 
    1268:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    126c:	000002eb 	andeq	r0, r0, fp, ror #5
    1270:	cc17be01 	ldcgt	14, cr11, [r7], {1}
	__pi_old = znew;
    1274:	38000001 	stmdacc	r0, {r0}
}
    1278:	000006c5 	andeq	r0, r0, r5, asr #13
	TCI_RUN_DELAY_TIMER;
    127c:	fe25c901 	vselge.f16	s24, s10, s2
}
    1280:	38000001 	stmdacc	r0, {r0}
    1284:	0000060f 	andeq	r0, r0, pc, lsl #12
    1288:	2813d101 	ldmdacs	r3, {r0, r8, ip, lr, pc}
    128c:	38000002 	stmdacc	r0, {r1}
    1290:	0000065e 	andeq	r0, r0, lr, asr r6
void proceed (word state) {
    1294:	3221d401 	eorcc	sp, r1, #16777216	; 0x1000000
	prcdstate (__pi_curr, state);
    1298:	38000002 	stmdacc	r0, {r1}
    129c:	000009ea 	andeq	r0, r0, sl, ror #19
	release;
    12a0:	3a20d701 	bcc	836eac <__ccfg+0x816f04>
    12a4:	2e000002 	cdpcs	0, 0, cr0, cr0, cr2, {0}
void __pi_wait (aword event, word state) {
    12a8:	00000000 	andeq	r0, r0, r0
	sint j = nevents (__pi_curr);
    12ac:	0001d339 	andeq	sp, r1, r9, lsr r3
	if (j >= MAX_EVENTS_PER_TASK)
    12b0:	10bb0100 	adcsne	r0, fp, r0, lsl #2
    12b4:	0000008d 	andeq	r0, r0, sp, lsl #1
    12b8:	05480305 	strbeq	r0, [r8, #-773]	; 0xfffffcfb
		syserror (ENEVENTS, "sw");
    12bc:	693a2000 	ldmdbvs	sl!, {sp}
    12c0:	10bc0100 	adcsne	r0, ip, r0, lsl #2
	setestate (__pi_curr->Events [j], state, event);
    12c4:	0000008d 	andeq	r0, r0, sp, lsl #1
	incwait (__pi_curr);
    12c8:	05400305 	strbeq	r0, [r0, #-773]	; 0xfffffcfb
	setestate (__pi_curr->Events [j], state, event);
    12cc:	00002000 	andeq	r2, r0, r0
}
    12d0:	071b013b 			; <UNDEFINED> instruction: 0x071b013b
    12d4:	b1010000 	mrslt	r0, (UNDEF: 1)
    12d8:	00000006 	andeq	r0, r0, r6
void __pi_trigger (aword event) {
    12dc:	00000000 	andeq	r0, r0, r0
	for_all_tasks (i) {
    12e0:	009c0100 	addseq	r0, ip, r0, lsl #2
		for (j = 0; j < nevents (i); j++) {
    12e4:	3c000013 	stccc	0, cr0, [r0], {19}
	...
    12f0:	0100693d 	tsteq	r0, sp, lsr r9
			if (i->Events [j] . Event == event) {
    12f4:	008d0eb2 			; <UNDEFINED> instruction: 0x008d0eb2
    12f8:	00810000 	addeq	r0, r1, r0
    12fc:	00000000 	andeq	r0, r0, r0
				wakeupev (i, j);
    1300:	02d6013e 	sbcseq	r0, r6, #-2147483633	; 0x8000000f
    1304:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
	for_all_tasks (i) {
    1308:	0005f306 	andeq	pc, r5, r6, lsl #6
}
    130c:	0001a400 	andeq	sl, r1, r0, lsl #8
aword __pi_join (aword pid, word st) {
    1310:	0001bc00 	andeq	fp, r1, r0, lsl #24
	for_all_tasks (i) {
    1314:	299c0100 	ldmibcs	ip, {r8}
    1318:	3a000013 	bcc	136c <running>
	return 0;
    131c:	a9010074 	stmdbge	r1, {r2, r4, r5, r6}
		if ((aword)i == pid) {
    1320:	00097a0b 	andeq	r7, r9, fp, lsl #20
			__pi_wait (pid, st);
    1324:	70910200 	addsvc	r0, r1, r0, lsl #4
}
    1328:	59012b00 	stmdbpl	r1, {r8, r9, fp, sp}
	for_all_tasks (i) {
    132c:	01000008 	tsteq	r0, r8
    1330:	4c01068f 	stcmi	6, cr0, [r1], {143}	; 0x8f
void delay (word d, word state) {
    1334:	a4000001 	strge	r0, [r0], #-1
	settstate (__pi_curr, state);
    1338:	01000001 	tsteq	r0, r1
    133c:	0013b29c 	mulseq	r3, ip, r2
    1340:	09782c00 	ldmdbeq	r8!, {sl, fp, sp}^
    1344:	8f010000 	svchi	0x00010000
	update_n_wake (d, YES);
    1348:	0009aa18 	andeq	sl, r9, r8, lsl sl
    134c:	00009f00 	andeq	r9, r0, r0, lsl #30
	__pi_curr->Timer = __pi_old + d;
    1350:	084e3f00 	stmdaeq	lr, {r8, r9, sl, fp, ip, sp}^
    1354:	8f010000 	svchi	0x00010000
	inctimer (__pi_curr);
    1358:	0010342d 	andseq	r3, r0, sp, lsr #8
    135c:	0000bd00 	andeq	fp, r0, r0, lsl #26
    1360:	05af3800 	streq	r3, [pc, #2048]!	; 1b68 <tcv_control+0x48>
}
    1364:	90010000 	andls	r0, r1, r0
    1368:	00015e1d 	andeq	r5, r1, sp, lsl lr
	if (fun == NULL)
    136c:	07653800 	strbeq	r3, [r5, -r0, lsl #16]!
		return (int) __pi_curr;
    1370:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    1374:	00019223 	andeq	r9, r1, r3, lsr #4
	for_all_tasks (i)
    1378:	01643c00 	cmneq	r4, r0, lsl #24
}
    137c:	01920000 	orrseq	r0, r2, r0
		if (i->code == fun)
    1380:	283f0000 	ldmdacs	pc!, {}	; <UNPREDICTABLE>
	for_all_tasks (i)
    1384:	01000002 	tsteq	r0, r2
    1388:	05ed1092 	strbeq	r1, [sp, #146]!	; 0x92
    138c:	00d40000 	sbcseq	r0, r4, r0
int __pi_strlen (const char *s) {
    1390:	c93f0000 	ldmdbgt	pc!, {}	; <UNPREDICTABLE>
	for (i = 0; *(s+i) != '\0'; i++);
    1394:	01000004 	tsteq	r0, r4
}
    1398:	09ee1194 	stmibeq	lr!, {r2, r4, r7, r8, ip}^
	for (i = 0; *(s+i) != '\0'; i++);
    139c:	00f20000 	rscseq	r0, r2, r0
	while ((Boolean)(*d++ = *s++));
    13a0:	703d0000 	eorsvc	r0, sp, r0
    13a4:	10990100 	addsne	r0, r9, r0, lsl #2
    13a8:	000005ed 	andeq	r0, r0, sp, ror #11
}
    13ac:	00000110 	andeq	r0, r0, r0, lsl r1
	while (n--)
    13b0:	01400000 	mrseq	r0, (UNDEF: 64)
    13b4:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
		*dest++ = *src++;
    13b8:	01057101 	tsteq	r5, r1, lsl #2
    13bc:	0000008d 	andeq	r0, r0, sp, lsl #1
    13c0:	00000138 	andeq	r0, r0, r8, lsr r1
	while (n--)
    13c4:	0000014c 	andeq	r0, r0, ip, asr #2
}
    13c8:	13ef9c01 	mvnne	r9, #256	; 0x100
		*dest++ = c;
    13cc:	a82c0000 	stmdage	ip!, {}	; <UNPREDICTABLE>
void adddevfunc (devreqfun_t rf, int loc) {
    13d0:	01000003 	tsteq	r0, r3
		syserror (EREQPAR, "addv");
    13d4:	05f31871 	ldrbeq	r1, [r3, #2161]!	; 0x871
		syserror (ERESOURCE, "addv");
    13d8:	01230000 			; <UNDEFINED> instruction: 0x01230000
	if (ioreq [loc] != NULL)
    13dc:	a63f0000 	ldrtge	r0, [pc], -r0
    13e0:	01000019 	tsteq	r0, r9, lsl r0
		syserror (ERESOURCE, "addv");
    13e4:	008d0972 	addeq	r0, sp, r2, ror r9
	ioreq [loc] = rf;
    13e8:	01360000 	teqeq	r6, r0
}
    13ec:	40000000 	andmi	r0, r0, r0
    13f0:	000a1701 	andeq	r1, sl, r1, lsl #14
sint io (word retry, word dev, word operation, char *buf, word len) {
    13f4:	08400100 	stmdaeq	r0, {r8}^
    13f8:	0005ed01 	andeq	lr, r5, r1, lsl #26
    13fc:	0000c800 	andeq	ip, r0, r0, lsl #16
    1400:	00013600 	andeq	r3, r1, r0, lsl #12
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1404:	2a9c0100 	bcs	fe70180c <_estack+0xde6fc80c>
    1408:	2c000014 	stccs	0, cr0, [r0], {20}
    140c:	0000084e 	andeq	r0, r0, lr, asr #16
		syserror (ENODEVICE, "io");
    1410:	34224001 	strtcc	r4, [r2], #-1
    1414:	49000010 	stmdbmi	r0, {r4}
	if (len == 0)
    1418:	3d000001 	stccc	0, cr0, [r0, #-4]
	ret = (ioreq [dev]) (operation, buf, len);
    141c:	41010070 	tstmi	r1, r0, ror r0
    1420:	0005ed0c 	andeq	lr, r5, ip, lsl #26
	if (ret >= 0)
    1424:	0001a900 	andeq	sl, r1, r0, lsl #18
	if (ret == -1) {
    1428:	23410000 	movtcs	r0, #4096	; 0x1000
    142c:	00000012 	andeq	r0, r0, r2, lsl r0
		if (retry == WNONE)
    1430:	00000000 	andeq	r0, r0, r0
		iowait (dev, operation, retry);
    1434:	01000000 	mrseq	r0, (UNDEF: 0)
    1438:	1236349c 	eorsne	r3, r6, #156, 8	; 0x9c000000
    143c:	01f30000 	mvnseq	r0, r0
			release;
    1440:	00000000 	andeq	r0, r0, r0
	if (ret == -2) {
    1444:	0000148c 	andeq	r1, r0, ip, lsl #9
		if (retry != WNONE) {
    1448:	03b80003 			; <UNDEFINED> instruction: 0x03b80003
    144c:	01040000 	mrseq	r0, (UNDEF: 4)
			iowait (dev, operation, retry);
    1450:	000000bd 	strheq	r0, [r0], -sp
    1454:	000fc90c 	andeq	ip, pc, ip, lsl #18
			(ioreq [dev]) (NONE, buf, len);
    1458:	0006e400 	andeq	lr, r6, r0, lsl #8
    145c:	00050000 	andeq	r0, r5, r0
    1460:	00000000 	andeq	r0, r0, r0
		(ioreq [dev]) (NONE, buf, len);
    1464:	0006ee00 	andeq	lr, r6, r0, lsl #28
    1468:	06010200 	streq	r0, [r1], -r0, lsl #4
    146c:	0000098a 	andeq	r0, r0, sl, lsl #19
}
    1470:	44050202 	strmi	r0, [r5], #-514	; 0xfffffdfe
	if (retry != WNONE) {
    1474:	03000008 	movweq	r0, #8
		delay (-ret - 2, retry);
    1478:	0000273d 	andeq	r2, r0, sp, lsr r7
    147c:	3f182810 	svccc	0x00182810
    1480:	02000000 	andeq	r0, r0, #0
    1484:	06370504 	ldrteq	r0, [r7], -r4, lsl #10
		release;
    1488:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    148c:	00063205 	andeq	r3, r6, r5, lsl #4
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1490:	08e10300 	stmiaeq	r1!, {r8, r9}^
    1494:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
    1498:	00005918 	andeq	r5, r0, r8, lsl r9
    149c:	08010200 	stmdaeq	r1, {r9}
    14a0:	00000988 	andeq	r0, r0, r8, lsl #19
		syserror (ERESOURCE, "mal1");
    14a4:	00040a03 	andeq	r0, r4, r3, lsl #20
    14a8:	19311000 	ldmdbne	r1!, {ip}
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    14ac:	0000006c 	andeq	r0, r0, ip, rrx
    14b0:	80070202 	andhi	r0, r7, r2, lsl #4
	m_magic (mpools [0]) = MALLOC_MAGIC;
    14b4:	0300000a 	movweq	r0, #10
	m_size (mpools [0]) = mlen - m_hdrlen;
    14b8:	000009a1 	andeq	r0, r0, r1, lsr #19
	m_magic (mpools [0]) = MALLOC_MAGIC;
    14bc:	7f193410 	svcvc	0x00193410
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    14c0:	02000000 	andeq	r0, r0, #0
    14c4:	03cf0704 	biceq	r0, pc, #4, 14	; 0x100000
}
    14c8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    14cc:	0003ca07 	andeq	ip, r3, r7, lsl #20
    14d0:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    14d4:	00746e69 	rsbseq	r6, r4, r9, ror #28
    14d8:	d4070402 	strle	r0, [r7], #-1026	; 0xfffffbfe
    14dc:	03000003 	movweq	r0, #3
void __pi_free (aword *ch) {
    14e0:	000007d4 	ldrdeq	r0, [r0], -r4
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    14e4:	4d122611 	ldcmi	6, cr2, [r2, #-68]	; 0xffffffbc
    14e8:	03000000 	movweq	r0, #0
		syserror (EMALLOC, "malg");
    14ec:	000024ae 	andeq	r2, r0, lr, lsr #9
    14f0:	60122711 	andsvs	r2, r2, r1, lsl r7
	mcfree [MA_NP] += m_size (ch);
    14f4:	05000000 	streq	r0, [r0, #-0]
		m_size (ch) ^= MALLOC_UMASK;
    14f8:	000000a7 	andeq	r0, r0, r7, lsr #1
    14fc:	0000a706 	andeq	sl, r0, r6, lsl #14
	mcfree [MA_NP] += m_size (ch);
    1500:	0f9b0300 	svceq	0x009b0300
	QFREE;
    1504:	28110000 	ldmdacs	r1, {}	; <UNPREDICTABLE>
	if (mevent [MA_NP] . nwait) {
    1508:	00003312 	andeq	r3, r0, r2, lsl r3
    150c:	19c70300 	stmibne	r7, {r8, r9}^
		trigger ((aword)(&(mevent [MA_NP])));
    1510:	2b110000 	blcs	441518 <__ccfg+0x421570>
		mevent [MA_NP] . nwait --;
    1514:	00004d12 	andeq	r4, r0, r2, lsl sp
}
    1518:	00c90600 	sbceq	r0, r9, r0, lsl #12
    151c:	c9050000 	stmdbgt	r5, {}	; <UNPREDICTABLE>
    1520:	03000000 	movweq	r0, #0
    1524:	000024ff 	strdeq	r2, [r0], -pc	; <UNPREDICTABLE>
void kill (aword pid) {
    1528:	73122c11 	tstvc	r2, #4352	; 0x1100
		pid = (aword) __pi_curr;
    152c:	05000000 	streq	r0, [r0, #-0]
	j = NULL;
    1530:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	for_all_tasks (i) {
    1534:	00053803 	andeq	r3, r5, r3, lsl #16
	syserror (EREQPAR, "kpi");
    1538:	122d1100 	eorne	r1, sp, #0, 2
    153c:	00000073 	andeq	r0, r0, r3, ror r0
		if ((aword)i == pid) {
    1540:	00092103 	andeq	r2, r9, r3, lsl #2
    1544:	102e1100 	eorne	r1, lr, r0, lsl #2
				__PCB = i->Next;
    1548:	00000108 	andeq	r0, r0, r8, lsl #2
			killev (i);
    154c:	00a70407 	adceq	r0, r7, r7, lsl #8
			ufree (i);
    1550:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
			if (i == __pi_curr)
    1554:	9c093211 	sfmls	f3, 4, [r9], {17}
    1558:	09000001 	stmdbeq	r0, {r0}
				release;
    155c:	0000003e 	andeq	r0, r0, lr, lsr r0
				j->Next = i->Next;
    1560:	c9073411 	stmdbgt	r7, {r0, r4, sl, ip, sp}
    1564:	01000000 	mrseq	r0, (UNDEF: 0)
    1568:	09000701 	stmdbeq	r0, {r0, r8, r9, sl}
}
    156c:	0000053e 	andeq	r0, r0, lr, lsr r5
    1570:	c9033511 	stmdbgt	r3, {r0, r4, r8, sl, ip, sp}
    1574:	01000000 	mrseq	r0, (UNDEF: 0)
	if (size < 8)
    1578:	09000601 	stmdbeq	r0, {r0, r9, sl}
		_size = 2;
    157c:	0000026f 	andeq	r0, r0, pc, ror #4
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1580:	c9033611 	stmdbgt	r3, {r0, r4, r9, sl, ip, sp}
		_size = (((aword)size) + 3) >> 2;
    1584:	01000000 	mrseq	r0, (UNDEF: 0)
		if (m_magic (chunk) != MALLOC_MAGIC)
    1588:	09000501 	stmdbeq	r0, {r0, r8, sl}
		_size = (((aword)size) + 3) >> 2;
    158c:	00000578 	andeq	r0, r0, r8, ror r5
		if (mevent [MA_NP] . nfail != 255)
    1590:	c9033711 	stmdbgt	r3, {r0, r4, r8, r9, sl, ip, sp}
    1594:	01000000 	mrseq	r0, (UNDEF: 0)
			mevent [MA_NP] . nfail ++;
    1598:	09000401 	stmdbeq	r0, {r0, sl}
		mnfree [MA_NP] = 0;
    159c:	00000865 	andeq	r0, r0, r5, ror #16
    15a0:	c9033811 	stmdbgt	r3, {r0, r4, fp, ip, sp}
		if (m_magic (chunk) != MALLOC_MAGIC)
    15a4:	01000000 	mrseq	r0, (UNDEF: 0)
    15a8:	0a000004 	beq	15c0 <__pi_malloc+0x48>
			syserror (EMALLOC, "malc");
    15ac:	00000545 	andeq	r0, r0, r5, asr #10
    15b0:	c9073a11 	stmdbgt	r7, {r0, r4, r9, fp, ip, sp}
		if (m_size (chunk) >= _size)
    15b4:	01000000 	mrseq	r0, (UNDEF: 0)
    15b8:	00075e0a 	andeq	r5, r7, sl, lsl #28
		chunk = m_nextp (chunk)) {
    15bc:	033c1100 	teqeq	ip, #0, 2
		m_setnextp (cc, m_nextp (chunk));
    15c0:	000000c9 	andeq	r0, r0, r9, asr #1
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    15c4:	0b520a02 	bleq	1483dd4 <__ccfg+0x1463e2c>
    15c8:	3d110000 	ldccc	0, cr0, [r1, #-0]
			m_size (chunk) = _size;
    15cc:	0000c903 	andeq	ip, r0, r3, lsl #18
			cc = chunk + _size + m_hdrlen;
    15d0:	930a0300 	movwls	r0, #41728	; 0xa300
    15d4:	11000007 	tstne	r0, r7
			m_size (cc) = waste - m_hdrlen;
    15d8:	00df083f 	sbcseq	r0, pc, pc, lsr r8	; <UNPREDICTABLE>
			QFREE;
    15dc:	00040000 	andeq	r0, r4, r0
		mevent [MA_NP] . nfail = 0;
    15e0:	0002c103 	andeq	ip, r2, r3, lsl #2
		mcfree [MA_NP] -= m_size (chunk);
    15e4:	03411100 	movteq	r1, #4352	; 0x1100
    15e8:	0000010e 	andeq	r0, r0, lr, lsl #2
    15ec:	00019c06 	andeq	r9, r1, r6, lsl #24
    15f0:	057f0b00 	ldrbeq	r0, [pc, #-2816]!	; af8 <__buttons_setirq+0x30>
		m_size (chunk) |= MALLOC_UMASK;
    15f4:	43110000 	tstmi	r1, #0
		if (mnfree [MA_NP] > mcfree [MA_NP])
    15f8:	0001a81a 	andeq	sl, r1, sl, lsl r8
		m_size (chunk) |= MALLOC_UMASK;
    15fc:	0b010100 	bleq	41a04 <__ccfg+0x21a5c>
			mnfree [MA_NP] = mcfree [MA_NP];
    1600:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
}
    1604:	c90e4511 	stmdbgt	lr, {r0, r4, r8, sl, lr}
    1608:	01000001 	tsteq	r0, r1
    160c:	cf040701 	svcgt	0x00040701
    1610:	02000001 	andeq	r0, r0, #1
    1614:	09910801 	ldmibeq	r1, {r0, fp}
    1618:	cf050000 	svcgt	0x00050000
    161c:	0b000001 	bleq	1628 <__pi_fork+0x8>
aword __pi_fork (fsmcode func, aword data) {
    1620:	000002ca 	andeq	r0, r0, sl, asr #5
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1624:	c91e4511 	ldmdbgt	lr, {r0, r4, r8, sl, lr}
    1628:	01000001 	tsteq	r0, r1
    162c:	12080801 	andne	r0, r8, #65536	; 0x10000
		if ((j = __PCB) == NULL)
    1630:	021a098f 	andseq	r0, sl, #2342912	; 0x23c000
	i->Next = NULL;
    1634:	4f0a0000 	svcmi	0x000a0000
	i->data = data;
    1638:	12000006 	andne	r0, r0, #6
		if ((j = __PCB) == NULL)
    163c:	00730b90 			; <UNDEFINED> instruction: 0x00730b90
}
    1640:	0a000000 	beq	1648 <__pi_fork+0x28>
			for (; j->Next != NULL; j = j->Next);
    1644:	00000c84 	andeq	r0, r0, r4, lsl #25
    1648:	a7089112 	smladge	r8, r2, r1, r9
	return (aword) i;
    164c:	04000000 	streq	r0, [r0], #-0
    1650:	0001f40a 	andeq	pc, r1, sl, lsl #8
	if (mevent [MA_NP] . nwait != 255)
    1654:	10921200 	addsne	r1, r2, r0, lsl #4
    1658:	000000d5 	ldrdeq	r0, [r0], -r5
    165c:	0b030006 	bleq	c167c <__ccfg+0xa16d4>
		mevent [MA_NP] . nwait ++;
    1660:	1200000a 	andne	r0, r0, #10
	wait ((aword)(&(mevent [MA_NP])), state);
    1664:	01e90393 			; <UNDEFINED> instruction: 0x01e90393
    1668:	1a050000 	bne	141670 <__ccfg+0x1216c8>
void diag (const char *mess, ...) {
    166c:	0c000002 	stceq	0, cr0, [r0], {2}
    1670:	0000021a 	andeq	r0, r0, sl, lsl r2
    1674:	00000236 	andeq	r0, r0, r6, lsr r2
	diag_disable_int (a, is);
    1678:	b40b000d 	strlt	r0, [fp], #-13
    167c:	12000007 	andne	r0, r0, #7
    1680:	022b0f99 	eoreq	r0, fp, #612	; 0x264
				d = (bc == 16) ? 10000 : 1000000000;
    1684:	01010000 	mrseq	r0, (UNDEF: 1)
	diag_disable_int (a, is);
    1688:	00da0407 	sbcseq	r0, sl, r7, lsl #8
	while (*mess != '\0') {
    168c:	01080000 	mrseq	r0, (UNDEF: 8)
	dgout ('\r');
    1690:	74099113 	strvc	r9, [r9], #-275	; 0xfffffeed
	dgout ('\n');
    1694:	09000002 	stmdbeq	r0, {r1}
    1698:	0000079a 	muleq	r0, sl, r7
    169c:	c9079313 	stmdbgt	r7, {r0, r1, r4, r8, r9, ip, pc}
	diag_wait (a);
    16a0:	01000000 	mrseq	r0, (UNDEF: 0)
	diag_enable_int (a, is);
    16a4:	09000107 	stmdbeq	r0, {r0, r1, r2, r8}
    16a8:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
}
    16ac:	c9039413 	stmdbgt	r3, {r0, r1, r4, sl, ip, pc}
    16b0:	01000000 	mrseq	r0, (UNDEF: 0)
    16b4:	00000001 	andeq	r0, r0, r1
		if (*mess == '%') {
    16b8:	00087103 	andeq	r7, r8, r3, lsl #2
    16bc:	03961300 	orrseq	r1, r6, #0, 6
			if (*mess == 'l') {
    16c0:	0000024a 	andeq	r0, r0, sl, asr #4
    16c4:	00027405 	andeq	r7, r2, r5, lsl #8
				mess++;
    16c8:	02800c00 	addeq	r0, r0, #0, 24
				val = va_arg (ap, lword);
    16cc:	02900000 	addseq	r0, r0, #0
				bc = 32;
    16d0:	000d0000 	andeq	r0, sp, r0
				bc = 16;
    16d4:	00028505 	andeq	r8, r2, r5, lsl #10
			switch (*mess) {
    16d8:	03830b00 	orreq	r0, r3, #0, 22
    16dc:	9c130000 	ldcls	0, cr0, [r3], {-0}
    16e0:	00029017 	andeq	r9, r2, r7, lsl r0
				dgout ('%');
    16e4:	0c010100 	stfeqs	f0, [r1], {-0}
    16e8:	000000b3 	strheq	r0, [r0], -r3
				dgout (*mess);
    16ec:	000002ae 	andeq	r0, r0, lr, lsr #5
    16f0:	a305000d 	movwge	r0, #20493	; 0x500d
			switch (*mess) {
    16f4:	0b000002 	bleq	1704 <diag+0x98>
					v = __pi_hex_enc_table [
    16f8:	000004f8 	strdeq	r0, [r0], -r8
					i += 4;
    16fc:	ae130614 	mrcge	6, 0, r0, cr3, cr4, {0}
					(val >> (bc - i)) & 0xf];
    1700:	01000002 	tsteq	r0, r2
    1704:	07400b01 	strbeq	r0, [r0, -r1, lsl #22]
					dgout (v);
    1708:	c3120000 	tstgt	r2, #0
    170c:	0000df0e 	andeq	sp, r0, lr, lsl #30
				while (i < bc) {
    1710:	0e010100 	adfeqs	f0, f1, f0
			mess++;
    1714:	000009aa 	andeq	r0, r0, sl, lsr #19
					d /= 10;
    1718:	10016e15 	andne	r6, r1, r5, lsl lr
				if ((val >> (bc - 1)) & 1) {
    171c:	000002dc 	ldrdeq	r0, [r0], -ip
    1720:	02e20407 	rsceq	r0, r2, #117440512	; 0x7000000
					dgout ('-');
    1724:	010f0000 	mrseq	r0, CPSR
    1728:	000002ee 	andeq	r0, r0, lr, ror #5
						val |= 0xffff0000;
    172c:	0000a710 	andeq	sl, r0, r0, lsl r7
    1730:	d60c0000 	strle	r0, [ip], -r0
    1734:	f9000001 			; <UNDEFINED> instruction: 0xf9000001
				d = (bc == 16) ? 10000 : 1000000000;
    1738:	0d000002 	stceq	0, cr0, [r0, #-8]
    173c:	02ee0500 	rsceq	r0, lr, #0, 10
    1740:	08110000 	ldmdaeq	r1, {}	; <UNPREDICTABLE>
					v = (word) (val / d);
    1744:	15000008 	strne	r0, [r0, #-8]
					if (v || d == 1) break;
    1748:	f916017f 			; <UNDEFINED> instruction: 0xf916017f
    174c:	01000002 	tsteq	r0, r2
					d /= 10;
    1750:	03661101 	cmneq	r6, #1073741824	; 0x40000000
				d = (bc == 16) ? 10000 : 1000000000;
    1754:	82150000 	andshi	r0, r5, #0
					dgout (v + '0');
    1758:	00eb1401 	rsceq	r1, fp, r1, lsl #8
    175c:	01010000 	mrseq	r0, (UNDEF: 1)
    1760:	00034311 	andeq	r4, r3, r1, lsl r3
					d /= 10;
    1764:	02d81500 	sbcseq	r1, r8, #0, 10
					val = val - (v * d);
    1768:	0000df0e 	andeq	sp, r0, lr, lsl #30
					if (d == 0) break;
    176c:	12010100 	andne	r0, r1, #0, 2
					v = (word) (val / d);
    1770:	03031508 	movweq	r1, #13576	; 0x3508
    1774:	00035209 	andeq	r5, r3, r9, lsl #4
				if (bc == 16)
    1778:	38321300 	ldmdacc	r2!, {r8, r9, ip}
				d = (bc == 16) ? 10000 : 1000000000;
    177c:	07150000 	ldreq	r0, [r5, -r0]
					val &= 0xffff;
    1780:	00a70703 	adceq	r0, r7, r3, lsl #14
					dgout (*s);
    1784:	13000000 	movwne	r0, #0
					s++;
    1788:	00000bdc 	ldrdeq	r0, [r0], -ip
				while (*s != '\0') {
    178c:	08030815 	stmdaeq	r3, {r0, r2, r4, fp}
    1790:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
			dgout (*mess++);
    1794:	fb0e0004 	blx	3817ae <__ccfg+0x361806>
    1798:	15000003 	strne	r0, [r0, #-3]
    179c:	2b030309 	blcs	c23c8 <__ccfg+0xa2420>
    17a0:	14000003 	strne	r0, [r0], #-3
    17a4:	00000033 	andeq	r0, r0, r3, lsr r0
	__pi_seed = __pi_seed * 1103515245 + 12345;
    17a8:	030b1530 	movweq	r1, #46384	; 0xb530
    17ac:	0003c208 	andeq	ip, r3, r8, lsl #4
    17b0:	1add1300 	bne	ff7463b8 <_estack+0xdf7413b8>
    17b4:	14150000 	ldrne	r0, [r5], #-0
	^ entropy
    17b8:	00a70803 	adceq	r0, r7, r3, lsl #16
}
    17bc:	13000000 	movwne	r0, #0
    17c0:	00000954 	andeq	r0, r0, r4, asr r9
    17c4:	08031515 	stmdaeq	r3, {r0, r2, r4, r8, sl, ip}
    17c8:	000000a7 	andeq	r0, r0, r7, lsr #1
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    17cc:	49a21302 	stmibmi	r2!, {r1, r8, r9, ip}
	word cs = size + hblenb;
    17d0:	16150000 	ldrne	r0, [r5], -r0
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    17d4:	02cf0b03 	sbceq	r0, pc, #3072	; 0xc00
    17d8:	13040000 	movwne	r0, #16384	; 0x4000
	p -> length = size;
    17dc:	00004405 	andeq	r4, r0, r5, lsl #8
}
    17e0:	09031715 	stmdbeq	r3, {r0, r2, r4, r8, r9, sl, ip}
	if (p->attributes.b.queued) {
    17e4:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    17e8:	00071308 	andeq	r1, r7, r8, lsl #6
    17ec:	18150000 	ldmdane	r5, {}	; <UNPREDICTABLE>
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    17f0:	03c20f03 	biceq	r0, r2, #3, 30
		p->attributes.b.queued = 0;
    17f4:	130c0000 	movwne	r0, #49152	; 0xc000
    17f8:	000007c7 	andeq	r0, r0, r7, asr #15
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    17fc:	15031915 	strne	r1, [r3, #-2325]	; 0xfffff6eb
	deq (p);	// Remove from queue
    1800:	000003d2 	ldrdeq	r0, [r0], -r2
}
    1804:	520c002c 	andpl	r0, ip, #44	; 0x2c
	tfree ((address)p);
    1808:	d2000003 	andle	r0, r0, #3
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    180c:	15000003 	strne	r0, [r0, #-3]
    1810:	00000094 	muleq	r0, r4, r0
    1814:	04070003 	streq	r0, [r7], #-3
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1818:	0000035f 	andeq	r0, r0, pc, asr r3
    181c:	0009490e 	andeq	r4, r9, lr, lsl #18
	if (q_empty (q))
    1820:	031c1500 	tsteq	ip, #0, 10
    1824:	00035f1b 	andeq	r5, r3, fp, lsl pc
		trigger (q);
    1828:	09291100 	stmdbeq	r9!, {r8, ip}
	if (p->attributes.b.urgent) {
    182c:	1e150000 	cdpne	0, 1, cr0, cr5, cr0, {0}
		p->u.bqueue.next = q->next;
    1830:	03f41403 	mvnseq	r1, #50331648	; 0x3000000
		p->u.bqueue.prev = q;
    1834:	01010000 	mrseq	r0, (UNDEF: 1)
		q->next->prev = (qitem_t*) p;
    1838:	03d80407 	bicseq	r0, r8, #117440512	; 0x7000000
	p->attributes.b.queued = 1;
    183c:	8b0b0000 	blhi	2c1844 <__ccfg+0x2a189c>
    1840:	16000005 	strne	r0, [r0], -r5
}
    1844:	00a7131d 	adceq	r1, r7, sp, lsl r3
		p->u.bqueue.prev = q->prev;
    1848:	01010000 	mrseq	r0, (UNDEF: 1)
		q->prev->next = (qitem_t*) p;
    184c:	0002760b 	andeq	r7, r2, fp, lsl #12
		q->prev = (qitem_t*) p;
    1850:	1a1e1600 	bne	787058 <__ccfg+0x7670b0>
    1854:	000000b8 	strheq	r0, [r0], -r8
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    1858:	960b0101 	strls	r0, [fp], -r1, lsl #2
	deq (p);	// Soft dequeue, timer and hook left intact
    185c:	16000009 	strne	r0, [r0], -r9
	switch (dv) {
    1860:	00b8241e 	adcseq	r2, r8, lr, lsl r4
    1864:	01010000 	mrseq	r0, (UNDEF: 1)
    1868:	0009b20b 	andeq	fp, r9, fp, lsl #4
    186c:	14221600 	strtne	r1, [r2], #-1536	; 0xfffffa00
			p->attributes.b.urgent = 1;
    1870:	000003f4 	strdeq	r0, [r0], -r4
    1874:	c0030101 	andgt	r0, r3, r1, lsl #2
			verify_ses (p, "dispose ses");
    1878:	1600000b 	strne	r0, [r0], -fp
    187c:	043e1043 	ldrteq	r1, [lr], #-67	; 0xffffffbd
    1880:	04070000 	streq	r0, [r7], #-0
    1884:	00000444 	andeq	r0, r0, r4, asr #8
    1888:	0450010f 	ldrbeq	r0, [r0], #-271	; 0xfffffef1
			verify_phy (p, "dispose phy");
    188c:	8d100000 	ldchi	0, cr0, [r0, #-0]
    1890:	00000000 	andeq	r0, r0, r0
}
    1894:	46160808 	ldrmi	r0, [r6], -r8, lsl #16
			enq (oqueues [p->attributes.b.phys], p);
    1898:	00047409 	andeq	r7, r4, r9, lsl #8
			p->attributes.b.urgent = 1;
    189c:	111d0a00 	tstne	sp, r0, lsl #20
    18a0:	4a160000 	bmi	5818a8 <__ccfg+0x561900>
			verify_phy (p, "dispose phy");
    18a4:	0004320f 	andeq	r3, r4, pc, lsl #4
    18a8:	180a0000 	stmdane	sl, {}	; <UNPREDICTABLE>
    18ac:	1600000e 	strne	r0, [r0], -lr
    18b0:	008d074b 	addeq	r0, sp, fp, asr #14
    18b4:	00040000 	andeq	r0, r4, r0
    18b8:	000c4603 	andeq	r4, ip, r3, lsl #12
			enq (oqueues [p->attributes.b.phys], p);
    18bc:	034c1600 	movteq	r1, #50688	; 0xc600
    18c0:	00000450 	andeq	r0, r0, r0, asr r4
}
    18c4:	00047405 	andeq	r7, r4, r5, lsl #8
			rlp (p);
    18c8:	00fc0c00 	rscseq	r0, ip, r0, lsl #24
}
    18cc:	04950000 	ldreq	r0, [r5], #0
    18d0:	94150000 	ldrls	r0, [r5], #-0
    18d4:	03000000 	movweq	r0, #0
    18d8:	0f900b00 	svceq	0x00900b00
    18dc:	0d010000 	stceq	0, cr0, [r1, #-0]
    18e0:	00048512 	andeq	r8, r4, r2, lsl r5
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    18e4:	0c010100 	stfeqs	f0, [r1], {-0}
	if (b->attributes.b.outgoing) {
    18e8:	00000480 	andeq	r0, r0, r0, lsl #9
	b = header (p);
    18ec:	000004b3 			; <UNDEFINED> instruction: 0x000004b3
	if (b->attributes.b.outgoing) {
    18f0:	00009415 	andeq	r9, r0, r5, lsl r4
		verify_ses (b, "tcv02");
    18f4:	05000100 	streq	r0, [r0, #-256]	; 0xffffff00
    18f8:	000004a3 	andeq	r0, r0, r3, lsr #9
    18fc:	000fac16 	andeq	sl, pc, r6, lsl ip	; <UNPREDICTABLE>
    1900:	18cf0100 	stmiane	pc, {r8}^	; <UNPREDICTABLE>
    1904:	000004b3 			; <UNDEFINED> instruction: 0x000004b3
		verify_plg (b, tcv_out, "tcv03");
    1908:	0000eb0c 	andeq	lr, r0, ip, lsl #22
    190c:	0004d400 	andeq	sp, r4, r0, lsl #8
    1910:	00941500 	addseq	r1, r4, r0, lsl #10
    1914:	00100000 	andseq	r0, r0, r0
    1918:	0004c405 	andeq	ip, r4, r5, lsl #8
    191c:	0da91700 	stceq	7, cr1, [r9]
    1920:	ec010000 	stc	0, cr0, [r1], {-0}
    1924:	0004d40d 	andeq	sp, r4, sp, lsl #8
    1928:	03050100 	movweq	r0, #20736	; 0x5100
		dispose (b, plugins [b->attributes.b.plugin] ->
    192c:	00004598 	muleq	r0, r8, r5
}
    1930:	000c2518 	andeq	r2, ip, r8, lsl r5
		dispose (b, plugins [b->attributes.b.plugin] ->
    1934:	010c0100 	mrseq	r0, (UNDEF: 28)
		rlp (b);
    1938:	0000a70d 	andeq	sl, r0, sp, lsl #14
}
    193c:	4c030500 	cfstr32mi	mvfx0, [r3], {-0}
		rlp (b);
    1940:	19200005 	stmdbne	r0!, {r0, r2}
    1944:	00000236 	andeq	r0, r0, r6, lsr r2
    1948:	0802d001 	stmdaeq	r2, {r0, ip, lr, pc}
    194c:	0b680305 	bleq	1a02568 <__ccfg+0x19e25c0>
    1950:	a70c2000 	strge	r2, [ip, -r0]
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    1954:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1958:	15000005 	strne	r0, [r0, #-5]
    195c:	00000094 	muleq	r0, r4, r0
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1960:	a6180000 	ldrge	r0, [r8], -r0
	va_start (ap, plid);
    1964:	0100000b 	tsteq	r0, fp
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1968:	0e0d02d2 	mcreq	2, 0, r0, cr13, cr2, {6}
    196c:	05000005 	streq	r0, [r0, #-5]
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    1970:	00054e03 	andeq	r4, r5, r3, lsl #28
    1974:	02c11920 	sbceq	r1, r1, #32, 18	; 0x80000
    1978:	8c010000 	stchi	0, cr0, [r1], {-0}
    197c:	03050704 	movweq	r0, #22276	; 0x5704
			syserror (ENODEVICE, "tcv04");
    1980:	20000b70 	andcs	r0, r0, r0, ror fp
		syserror (EMALLOC, "tcv05");
    1984:	0b9a011a 	bleq	fe681df4 <_estack+0xde67cdf4>
	attp.b.outgoing = 1;
    1988:	72010000 	andvc	r0, r1, #0
    198c:	8d010505 	cfstr32hi	mvfx0, [r1, #-20]	; 0xffffffec
    1990:	50000000 	andpl	r0, r0, r0
    1994:	b0000010 	andlt	r0, r0, r0, lsl r0
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1998:	01000010 	tsteq	r0, r0, lsl r0
		if (descriptors [fd] == NULL)
    199c:	0005849c 	muleq	r5, ip, r4
    19a0:	04e81b00 	strbteq	r1, [r8], #2816	; 0xb00
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    19a4:	05720000 	ldrbeq	r0, [r2, #-0]!
		return ERROR;
    19a8:	691c0000 	ldmdbvs	ip, {}	; <UNPREDICTABLE>
}
    19ac:	05760100 	ldrbeq	r0, [r6, #-256]!	; 0xffffff00
    19b0:	0000bd11 	andeq	fp, r0, r1, lsl sp
    19b4:	f71d0000 			; <UNDEFINED> instruction: 0xf71d0000
	s->attpattern.b.session = fd;
    19b8:	92000011 	andls	r0, r0, #17
    19bc:	94000010 	strls	r0, [r0], #-16
	descriptors [fd] = s;
    19c0:	01000010 	tsteq	r0, r0, lsl r0
	q_init (&(s->rqueue));
    19c4:	0002058d 	andeq	r0, r2, sp, lsl #11
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    19c8:	0e32011e 	mrceq	1, 1, r0, cr2, cr14, {0}
    19cc:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
    19d0:	0dc82105 	stfeqe	f2, [r8, #20]
    19d4:	10200000 	eorne	r0, r0, r0
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    19d8:	9c010000 	stcls	0, cr0, [r1], {-0}
    19dc:	000007e4 	andeq	r0, r0, r4, ror #15
    19e0:	000e3f1f 	andeq	r3, lr, pc, lsl pc
	descriptors [fd] = s;
    19e4:	01080d00 	tsteq	r8, r0, lsl #26
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    19e8:	0011d020 	andseq	sp, r1, r0, lsr #32
    19ec:	000dc800 	andeq	ip, sp, r0, lsl #16
	if (s == NULL)
    19f0:	00034800 	andeq	r4, r3, r0, lsl #16
		syserror (EMALLOC, "tcv05");
    19f4:	056a0100 	strbeq	r0, [sl, #-256]!	; 0xffffff00
    19f8:	0005bf02 	andeq	fp, r5, r2, lsl #30
    19fc:	11df2100 	bicsne	r2, pc, r0, lsl #2
    1a00:	22000000 	andcs	r0, r0, #0
    1a04:	00000812 	andeq	r0, r0, r2, lsl r8
    1a08:	00000de2 	andeq	r0, r0, r2, ror #27
    1a0c:	00000368 	andeq	r0, r0, r8, ror #6
    1a10:	b302270d 	movwlt	r2, #9997	; 0x270d
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    1a14:	23000007 	movwcs	r0, #7
	    (plugins [ord] != NULL && plugins [ord] != pl))
    1a18:	00000368 	andeq	r0, r0, r8, ror #6
    1a1c:	00082024 	andeq	r2, r8, r4, lsr #32
    1a20:	000e7000 	andeq	r7, lr, r0
	plugins [ord] = pl;
    1a24:	125c2500 	subsne	r2, ip, #0, 10
	return 0;
    1a28:	0de20000 	stcleq	0, cr0, [r2]
		return ERROR;
    1a2c:	03900000 	orrseq	r0, r0, #0
}
    1a30:	b3010000 	movwlt	r0, #4096	; 0x1000
    1a34:	381d0404 	ldmdacc	sp, {r2, sl}
	verify_fds (fd, "tcv16");
    1a38:	5a000014 	bpl	1a90 <tcv_wnps+0x58>
								Boolean urg) {
    1a3c:	6600000e 	strvs	r0, [r0], -lr
    1a40:	0100000e 	tsteq	r0, lr
	verify_fds (fd, "tcv16");
    1a44:	1d0404a4 	cfstrsne	mvf0, [r4, #-656]	; 0xfffffd70
    1a48:	0000125c 	andeq	r1, r0, ip, asr r2
    1a4c:	00000e6e 	andeq	r0, r0, lr, ror #28
	verify_pld (s, tcv_frm, "tcv17");
    1a50:	00000e70 	andeq	r0, r0, r0, ror lr
    1a54:	0404aa01 	streq	sl, [r4], #-2561	; 0xfffff5ff
    1a58:	0012c025 	andseq	ip, r2, r5, lsr #32
    1a5c:	000e8600 	andeq	r8, lr, r0, lsl #12
    1a60:	0003a800 	andeq	sl, r3, r0, lsl #16
    1a64:	04bb0100 	ldrteq	r0, [fp], #256	; 0x100
    1a68:	14432504 	strbne	r2, [r3], #-1284	; 0xfffffafc
    1a6c:	0e860000 	cdpeq	0, 8, cr0, cr6, cr0, {0}
	ptrs.head = (word) fd;
    1a70:	03c80000 	biceq	r0, r8, #0
	ptrs.tail = (word) urg;
    1a74:	c5010000 	strgt	r0, [r1, #-0]
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    1a78:	8e200404 	cdphi	4, 2, cr0, cr0, cr4, {0}
    1a7c:	8e000012 	mcrhi	0, 0, r0, cr0, cr2, {0}
		if (state != WNONE) {
    1a80:	e800000e 	stmda	r0, {r1, r2, r3}
    1a84:	01000003 	tsteq	r0, r3
}
    1a88:	510404c0 	smlabtpl	r4, r0, r4, r0
			when (eid, state);
    1a8c:	21000006 	tstcs	r0, r6
    1a90:	0000129d 	muleq	r0, sp, r2
			release;
    1a94:	125c1d00 	subsne	r1, ip, #0, 26
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    1a98:	0e9e0000 	cdpeq	0, 9, cr0, cr14, cr0, {0}
    1a9c:	0ea00000 	cdpeq	0, 10, cr0, cr0, cr0, {0}
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    1aa0:	c3010000 	movwgt	r0, #4096	; 0x1000
    1aa4:	2d250404 	cfstrscs	mvf0, [r5, #-16]!
    1aa8:	a2000014 	andge	r0, r0, #20
    1aac:	0800000e 	stmdaeq	r0, {r1, r2, r3}
    1ab0:	01000004 	tsteq	r0, r4
    1ab4:	200404d5 	ldrdcs	r0, [r4], -r5
		if (state != WNONE) {
    1ab8:	0000144e 	andeq	r1, r0, lr, asr #8
    1abc:	00000eb8 			; <UNDEFINED> instruction: 0x00000eb8
			tmwait (state);
    1ac0:	00000428 	andeq	r0, r0, r8, lsr #8
    1ac4:	0404cc01 	streq	ip, [r4], #-3073	; 0xfffff3ff
	b->attributes = s->attpattern;
    1ac8:	0000068e 	andeq	r0, r0, lr, lsl #13
		b->attributes.b.urgent = 1;
    1acc:	00145d21 	andseq	r5, r4, r1, lsr #26
    1ad0:	5c1d0000 	ldcpl	0, cr0, [sp], {-0}
	b->u.pointers.head = ptrs.head;
    1ad4:	dc000012 	stcle	0, cr0, [r0], {18}
	b->u.pointers.tail = length;
    1ad8:	de00000e 	cdple	0, 0, cr0, cr0, cr14, {0}
	return (address) (b + 1);
    1adc:	0100000e 	tsteq	r0, lr
    1ae0:	250404df 	strcs	r0, [r4, #-1247]	; 0xfffffb21
    1ae4:	00001438 	andeq	r1, r0, r8, lsr r4
    1ae8:	00000efc 	strdeq	r0, [r0], -ip
    1aec:	00000440 	andeq	r0, r0, r0, asr #8
    1af0:	0404e801 	streq	lr, [r4], #-2049	; 0xfffff7ff
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    1af4:	00127f25 	andseq	r7, r2, r5, lsr #30
    1af8:	000f0000 	andeq	r0, pc, r0
    1afc:	00045800 	andeq	r5, r4, r0, lsl #16
	verify_fph (phy, "tcv23");
    1b00:	04ee0100 	strbteq	r0, [lr], #256	; 0x100
    1b04:	128e260d 	addne	r2, lr, #13631488	; 0xd00000
    1b08:	0f0a0000 	svceq	0x000a0000
    1b0c:	0f0e0000 	svceq	0x000e0000
}
    1b10:	ed010000 	stc	0, cr0, [r1, #-0]
	return (physical [phy]) (opt, arg);
    1b14:	06dc0404 	ldrbeq	r0, [ip], r4, lsl #8
    1b18:	9d210000 	stcls	0, cr0, [r1, #-0]
    1b1c:	00000012 	andeq	r0, r0, r2, lsl r0
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    1b20:	00144325 	andseq	r4, r4, r5, lsr #6
	if (opt < 0) {
    1b24:	000f2e00 	andeq	r2, pc, r0, lsl #28
		if (fd < 0)
    1b28:	00047000 	andeq	r7, r4, r0
		if (opt == PHYSOPT_PLUGINFO) {
    1b2c:	04f70100 	ldrbteq	r0, [r7], #256	; 0x100
			if (fd >= TCV_MAX_PLUGS)
    1b30:	144e2004 	strbne	r2, [lr], #-4
			if ((p = plugins [fd]) == NULL)
    1b34:	0f300000 	svceq	0x00300000
    1b38:	04880000 	streq	r0, [r8], #0
}
    1b3c:	fa010000 	blx	41b44 <__ccfg+0x21b9c>
		if (fd >= TCV_MAX_PHYS)
    1b40:	07080404 	streq	r0, [r8, -r4, lsl #8]
		return physinfo [fd];
    1b44:	5d210000 	stcpl	0, cr0, [r1, #-0]
    1b48:	00000014 	andeq	r0, r0, r4, lsl r0
	verify_fds (fd, "tcv22");
    1b4c:	0012b61d 	andseq	fp, r2, sp, lsl r6
    1b50:	000f3800 	andeq	r3, pc, r0, lsl #16
    1b54:	000f3c00 	andeq	r3, pc, r0, lsl #24
    1b58:	04fd0100 	ldrbteq	r0, [sp], #256	; 0x100
    1b5c:	125c1d04 	subsne	r1, ip, #4, 26	; 0x100
}
    1b60:	0f3c0000 	svceq	0x003c0000
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    1b64:	0f3e0000 	svceq	0x003e0000
    1b68:	00010000 	andeq	r0, r1, r0
			return 0;
    1b6c:	95260405 	strls	r0, [r6, #-1029]!	; 0xfffffbfb
    1b70:	4600000b 	strmi	r0, [r0], -fp
    1b74:	5200000f 	andpl	r0, r0, #15
    1b78:	0100000f 	tsteq	r0, pc
    1b7c:	5c04050d 	cfstr32pl	mvfx0, [r4], {13}
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    1b80:	27000007 	strcs	r0, [r0, -r7]
    1b84:	00001311 	andeq	r1, r0, r1, lsl r3
	if (dsp != TCV_DSP_PASS) {
    1b88:	00000f46 	andeq	r0, r0, r6, asr #30
		if (ses == NONE)
    1b8c:	00000f50 	andeq	r0, r0, r0, asr pc
			syserror (EREQPAR, "tcv26");
    1b90:	0203bd01 	andeq	fp, r3, #1, 26	; 0x40
		verify_fds (ses, "tcv27");
    1b94:	00132d21 	andseq	r2, r3, r1, lsr #26
    1b98:	13202100 	nopne	{0}	; <UNPREDICTABLE>
    1b9c:	00000000 	andeq	r0, r0, r0
    1ba0:	00125c1d 	andseq	r5, r2, sp, lsl ip
    1ba4:	000f7a00 	andeq	r7, pc, r0, lsl #20
		if ((p = apb (size)) != NULL) {
    1ba8:	000f7c00 	andeq	r7, pc, r0, lsl #24
    1bac:	053e0100 	ldreq	r0, [lr, #-256]!	; 0xffffff00
		return NULL;
    1bb0:	12741d04 	rsbsne	r1, r4, #4, 26	; 0x100
			p->attributes = descriptors [ses] -> attpattern;
    1bb4:	0f7c0000 	svceq	0x007c0000
			dispose (p, dsp);
    1bb8:	0f8c0000 	svceq	0x008c0000
			p->attributes = descriptors [ses] -> attpattern;
    1bbc:	41010000 	mrsmi	r0, (UNDEF: 1)
			p->attributes.b.outgoing = 0;
    1bc0:	5c1d0405 	cfldrspl	mvf0, [sp], {5}
			dispose (p, dsp);
    1bc4:	8c000012 	stchi	0, cr0, [r0], {18}
			return (address)(p + 1);
    1bc8:	8e00000f 	cdphi	0, 0, cr0, cr0, cr15, {0}
    1bcc:	0100000f 	tsteq	r0, pc
	if ((p = apb (size)) != NULL)
    1bd0:	25040544 	strcs	r0, [r4, #-1348]	; 0xfffffabc
    1bd4:	0000127f 	andeq	r1, r0, pc, ror r2
		return (address)(p + 1);
    1bd8:	00000f8e 	andeq	r0, r0, lr, lsl #31
    1bdc:	000004a0 	andeq	r0, r0, r0, lsr #9
    1be0:	0b054701 	bleq	1537ec <__ccfg+0x133844>
    1be4:	00146b25 	andseq	r6, r4, r5, lsr #22
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1be8:	000f9600 	andeq	r9, pc, r0, lsl #12
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    1bec:	0004b800 	andeq	fp, r4, r0, lsl #16
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1bf0:	054b0100 	strbeq	r0, [fp, #-256]	; 0xffffff00
    1bf4:	28000004 	stmdacs	r0, {r2}
		syserror (EREQPAR, "tcv28");
    1bf8:	000011ed 	andeq	r1, r0, sp, ror #3
		syserror (EMALLOC, "tcv29");
    1bfc:	00000dfc 	strdeq	r0, [r0], -ip
	physical [phy] = ps;
    1c00:	00000dfe 	strdeq	r0, [r0], -lr
	physinfo [phy] = info;
    1c04:	2802270d 	stmdacs	r2, {r0, r2, r3, r8, r9, sl, sp}
    1c08:	000011f7 	strdeq	r1, [r0], -r7
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    1c0c:	00000e2a 	andeq	r0, r0, sl, lsr #28
    1c10:	00000e2c 	andeq	r0, r0, ip, lsr #28
    1c14:	2802270d 	stmdacs	r2, {r0, r2, r3, r8, r9, sl, sp}
		syserror (EMALLOC, "tcv29");
    1c18:	000011f7 	strdeq	r1, [r0], -r7
    1c1c:	00000fb0 			; <UNDEFINED> instruction: 0x00000fb0
	q_init (q);
    1c20:	00000fb2 			; <UNDEFINED> instruction: 0x00000fb2
}
    1c24:	0002270d 	andeq	r2, r2, sp, lsl #14
    1c28:	0eb8011a 	mrceq	1, 5, r0, cr8, cr10, {0}
    1c2c:	5c010000 	stcpl	0, cr0, [r1], {-0}
    1c30:	a7010605 	strge	r0, [r1, -r5, lsl #12]
	...
	verify_fph (phy, "tcv30");
    1c3c:	01000000 	mrseq	r0, (UNDEF: 0)
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1c40:	0008129c 	muleq	r8, ip, r2
    1c44:	63732900 	cmnvs	r3, #0, 18
	verify_fph (phy, "tcv30");
    1c48:	055e0100 	ldrbeq	r0, [lr, #-256]	; 0xffffff00
    1c4c:	0000a707 	andeq	sl, r0, r7, lsl #14
    1c50:	00020600 	andeq	r0, r2, r0, lsl #12
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1c54:	d22a0000 	eorle	r0, sl, #0
    1c58:	0100000d 	tsteq	r0, sp
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1c5c:	0314048e 	tsteq	r4, #-1912602624	; 0x8e000000
    1c60:	0000082a 	andeq	r0, r0, sl, lsr #16
		if (plugins [plg] == NULL)
    1c64:	0010742b 	andseq	r7, r0, fp, lsr #8
    1c68:	04ad0100 	strteq	r0, [sp], #256	; 0x100
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    1c6c:	012c0001 			; <UNDEFINED> instruction: 0x012c0001
}
    1c70:	00000d7f 	andeq	r0, r0, pc, ror sp
    1c74:	06047e01 	streq	r7, [r4], -r1, lsl #28
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1c78:	000da401 	andeq	sl, sp, r1, lsl #8
    1c7c:	000dc800 	andeq	ip, sp, r0, lsl #16
    1c80:	559c0100 	ldrpl	r0, [ip, #256]	; 0x100
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1c84:	2d000008 	stccs	0, cr0, [r0, #-32]	; 0xffffffe0
    1c88:	00000040 	andeq	r0, r0, r0, asr #32
    1c8c:	19047e01 	stmdbne	r4, {r0, r9, sl, fp, ip, sp, lr}
    1c90:	000000a7 	andeq	r0, r0, r7, lsr #1
    1c94:	00000219 	andeq	r0, r0, r9, lsl r2
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    1c98:	04011e00 	streq	r1, [r1], #-3584	; 0xfffff200
	len -= (ap.head + ap.tail);
    1c9c:	0100000c 	tsteq	r0, ip
    1ca0:	ec060401 	cfstrs	mvf0, [r6], {1}
    1ca4:	a400000b 	strge	r0, [r0], #-11
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    1ca8:	0100000d 	tsteq	r0, sp
    1cac:	000a1e9c 	muleq	sl, ip, lr
    1cb0:	0d162e00 	ldceq	14, cr2, [r6, #-0]
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    1cb4:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
    1cb8:	08860000 	stmeq	r6, {}	; <UNPREDICTABLE>
    1cbc:	691c0000 	ldmdbvs	ip, {}	; <UNPREDICTABLE>
	return 1;
    1cc0:	046b0100 	strbteq	r0, [fp], #-256	; 0xffffff00
    1cc4:	00008d0b 	andeq	r8, r0, fp, lsl #26
    1cc8:	43250000 			; <UNDEFINED> instruction: 0x43250000
    1ccc:	16000014 			; <UNDEFINED> instruction: 0x16000014
    1cd0:	2800000c 	stmdacs	r0, {r2, r3}
	verify_fph (phy, "tcv32");
    1cd4:	01000002 	tsteq	r0, r2
    1cd8:	20020408 	andcs	r0, r2, r8, lsl #8
    1cdc:	00000f54 	andeq	r0, r0, r4, asr pc
    1ce0:	00000c18 	andeq	r0, r0, r8, lsl ip
    1ce4:	00000248 	andeq	r0, r0, r8, asr #4
    1ce8:	02040b01 	andeq	r0, r4, #1024	; 0x400
	oq = oqueues [phy];
    1cec:	0000091a 	andeq	r0, r0, sl, lsl r9
	b = q_first (oq);
    1cf0:	00024823 	andeq	r4, r2, r3, lsr #16
	if (q_end (b, oq)) {
    1cf4:	0f612f00 	svceq	0x00612f00
	*len = b->length;
    1cf8:	6d300000 	ldcvs	0, cr0, [r0, #-0]
	deq (b);	// Dequeue the packet ...
    1cfc:	4800000f 	stmdami	r0, {r0, r1, r2, r3}
}
    1d00:	31000002 	tstcc	r0, r2
		return NULL;
    1d04:	00000f6e 	andeq	r0, r0, lr, ror #30
    1d08:	0000022c 	andeq	r0, r0, ip, lsr #4
    1d0c:	0013c922 	andseq	ip, r3, r2, lsr #18
    1d10:	000c2200 	andeq	r2, ip, r0, lsl #4
	verify_fph (phy, "tcv33");
    1d14:	00026800 	andeq	r6, r2, r0, lsl #16
    1d18:	04fa0100 	ldrbteq	r0, [sl], #256	; 0x100
    1d1c:	000008e7 	andeq	r0, r0, r7, ror #17
    1d20:	0013e521 	andseq	lr, r3, r1, lsr #10
    1d24:	13d82100 	bicsne	r2, r8, #0, 2
    1d28:	22000000 	andcs	r0, r0, #0
	oq = oqueues [phy];
    1d2c:	000013f3 	strdeq	r1, [r0], -r3
	b = q_first (oq);
    1d30:	00000c26 	andeq	r0, r0, r6, lsr #24
		return NULL;
    1d34:	00000280 	andeq	r0, r0, r0, lsl #5
	return (address)(b + 1);
    1d38:	0104fe01 	tsteq	r4, r1, lsl #28	; <UNPREDICTABLE>
}
    1d3c:	21000009 	tstcs	r0, r9
    1d40:	00001402 	andeq	r1, r0, r2, lsl #8
    1d44:	14103200 	ldrne	r3, [r0], #-512	; 0xfffffe00
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    1d48:	0c2a0000 	stceq	0, cr0, [sl], #-0
	verify_plg (b, tcv_xmt, "tcv34");
    1d4c:	02980000 	addseq	r0, r8, #0
	hblock_t *b = header (pkt);
    1d50:	fc010000 	stc2	0, cr0, [r1], {-0}
	verify_plg (b, tcv_xmt, "tcv34");
    1d54:	141f2104 	ldrne	r2, [pc], #-260	; 1d5c <tcvphy_end+0x14>
    1d58:	00000000 	andeq	r0, r0, r0
    1d5c:	10200000 	eorne	r0, r0, r0
    1d60:	6a000014 	bvs	1db8 <zero_loop+0x14>
    1d64:	b000000c 	andlt	r0, r0, ip
    1d68:	01000002 	tsteq	r0, r2
    1d6c:	3502040e 	strcc	r0, [r2, #-1038]	; 0xfffffbf2
	dispose (b, plugins [b->attributes.b.plugin] ->
    1d70:	21000009 	tstcs	r0, r9
}
    1d74:	0000141f 	andeq	r1, r0, pc, lsl r4
	dispose (b, plugins [b->attributes.b.plugin] ->
    1d78:	14102000 	ldrne	r2, [r0], #-0
    1d7c:	0c6c0000 	stcleq	0, cr0, [ip], #-0
    1d80:	02d00000 	sbcseq	r0, r0, #0
}
    1d84:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    while(1)
    1d88:	09500204 	ldmdbeq	r0, {r2, r9}^
{
    1d8c:	1f210000 	svcne	0x00210000
    SetupTrimDevice();
    1d90:	00000014 	andeq	r0, r0, r4, lsl r0
    pui32Src = &_etext;
    1d94:	0013f320 	andseq	pc, r3, r0, lsr #6
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1d98:	000c8600 	andeq	r8, ip, r0, lsl #12
    __asm("    ldr     r0, =_bss\n"
    1d9c:	0002e800 	andeq	lr, r2, r0, lsl #16
    1da0:	040e0100 	streq	r0, [lr], #-256	; 0xffffff00
    1da4:	00096b02 	andeq	r6, r9, r2, lsl #22
    1da8:	14022100 	strne	r2, [r2], #-256	; 0xffffff00
    1dac:	26000000 	strcs	r0, [r0], -r0
   main();
    1db0:	000013f3 	strdeq	r1, [r0], -r3
    FaultISR();
    1db4:	00000c8c 	andeq	r0, r0, ip, lsl #25
        *pui32Dest++ = *pui32Src++;
    1db8:	00000c8e 	andeq	r0, r0, lr, lsl #25
    1dbc:	02040e01 	andeq	r0, r4, #1, 28
    1dc0:	00000986 	andeq	r0, r0, r6, lsl #19
    1dc4:	00140221 	andseq	r0, r4, r1, lsr #4
    1dc8:	34200000 	strtcc	r0, [r0], #-0
    1dcc:	9e000012 	mcrls	0, 0, r0, cr0, cr2, {0}
    1dd0:	0000000c 	andeq	r0, r0, ip
    1dd4:	01000003 	tsteq	r0, r3
static byte get_byte () {
    1dd8:	a102041b 	tstge	r2, fp, lsl r4
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1ddc:	21000009 	tstcs	r0, r9
    1de0:	00001243 	andeq	r1, r0, r3, asr #4
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1de4:	0ccb2600 	stcleq	6, cr2, [fp], {0}
    1de8:	0cc80000 	stcleq	0, cr0, [r8], {0}
		if (ee_inp)
    1dec:	0cf20000 	ldcleq	0, cr0, [r2]
			b |= 1;
    1df0:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    1df4:	09c80204 	stmibeq	r8, {r2, r9}^
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1df8:	43250000 			; <UNDEFINED> instruction: 0x43250000
	for (b = 0, i = 0; i < 8; i++) {
    1dfc:	e6000014 			; <UNDEFINED> instruction: 0xe6000014
}
    1e00:	1800000c 	stmdane	r0, {r2, r3}
    1e04:	01000003 	tsteq	r0, r3
    1e08:	00020301 	andeq	r0, r2, r1, lsl #6
static void put_byte (byte b) {
    1e0c:	0012ab26 	andseq	sl, r2, r6, lsr #22
    1e10:	000d0200 	andeq	r0, sp, r0, lsl #4
    1e14:	000d1600 	andeq	r1, sp, r0, lsl #12
    1e18:	04510100 	ldrbeq	r0, [r1], #-256	; 0xffffff00
		if (b & 0x80)
    1e1c:	0009ef03 	andeq	lr, r9, r3, lsl #30
    1e20:	12b61d00 	adcsne	r1, r6, #0, 26
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1e24:	0d020000 	stceq	0, cr0, [r2, #-0]
	for (i = 0; i < 8; i++) {
    1e28:	0d060000 	stceq	0, cr0, [r6, #-0]
		b <<= 1;
    1e2c:	140b0000 	strne	r0, [fp], #-0
	for (i = 0; i < 8; i++) {
    1e30:	33000501 	movwcc	r0, #1281	; 0x501
}
    1e34:	00000b95 	muleq	r0, r5, fp
    1e38:	00000d1c 	andeq	r0, r0, ip, lsl sp
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1e3c:	00000330 	andeq	r0, r0, r0, lsr r3
    1e40:	02047201 	andeq	r7, r4, #268435456	; 0x10000000
	put_byte (cmd);
    1e44:	00131133 	andseq	r1, r3, r3, lsr r1
    1e48:	000d1c00 	andeq	r1, sp, r0, lsl #24
}
    1e4c:	00033000 	andeq	r3, r3, r0
    1e50:	03bd0100 			; <UNDEFINED> instruction: 0x03bd0100
static void wwait (word st, word del) {
    1e54:	132d2102 			; <UNDEFINED> instruction: 0x132d2102
    1e58:	20210000 	eorcs	r0, r1, r0
    1e5c:	00000013 	andeq	r0, r0, r3, lsl r0
	while (dopen && (rdsr () & 1)) {
    1e60:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
    1e64:	00000edf 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1e68:	0603ed01 	streq	lr, [r3], -r1, lsl #26
    1e6c:	000b0c01 	andeq	r0, fp, r1, lsl #24
	put_byte (CMD_RDSR);
    1e70:	000b4800 	andeq	r4, fp, r0, lsl #16
	r = get_byte ();
    1e74:	a79c0100 	ldrge	r0, [ip, r0, lsl #2]
    1e78:	3400000a 	strcc	r0, [r0], #-10
	while (dopen && (rdsr () & 1)) {
    1e7c:	006c6176 	rsbeq	r6, ip, r6, ror r1
}
    1e80:	1c03ed01 	stcne	13, cr14, [r3], {1}
		if (st == WNONE)
    1e84:	0000008d 	andeq	r0, r0, sp, lsl #1
    1e88:	69295001 	stmdbvs	r9!, {r0, ip, lr}
			mdelay (1);
    1e8c:	03ef0100 	mvneq	r0, #0, 2
    1e90:	00008d06 	andeq	r8, r0, r6, lsl #26
			delay (del, st);
    1e94:	00024a00 	andeq	r4, r2, r0, lsl #20
    1e98:	6e622900 	vmulvs.f16	s5, s4, s0	; <UNPREDICTABLE>
			release;
    1e9c:	03f00100 	mvnseq	r0, #0, 2
    1ea0:	0000df08 	andeq	sp, r0, r8, lsl #30
    1ea4:	00026800 	andeq	r6, r2, r0, lsl #16
static void ready () {
    1ea8:	11ed2500 	mvnne	r2, r0, lsl #10
	if (dopen) {
    1eac:	0b0c0000 	bleq	301eb4 <__ccfg+0x2e1f0c>
		wwait (WNONE, 1);
    1eb0:	01e80000 	mvneq	r0, r0
    1eb4:	f2010000 	vhadd.s8	d0, d1, d0
    1eb8:	ac200203 	sfmge	f0, 4, [r0], #-12
	dstat = 0;
    1ebc:	12000013 	andne	r0, r0, #19
}
    1ec0:	0000000b 	andeq	r0, r0, fp
    1ec4:	01000002 	tsteq	r0, r2
    1ec8:	950303f5 	strls	r0, [r3, #-1013]	; 0xfffffc0b
	udelay (1);
    1ecc:	3500000a 	strcc	r0, [r0, #-10]
    1ed0:	000013bb 			; <UNDEFINED> instruction: 0x000013bb
	udelay (1);
    1ed4:	00000268 	andeq	r0, r0, r8, ror #4
		dopen = DOPEN_TEMP;
    1ed8:	11f71d00 	mvnsne	r1, r0, lsl #26
    1edc:	0b360000 	bleq	d81ee4 <__ccfg+0xd61f3c>
    1ee0:	0b380000 	bleq	e01ee8 <__ccfg+0xde1f40>
    1ee4:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
static void cclose () {
    1ee8:	2c000203 	sfmcs	f0, 4, [r0], {3}
	if (dopen == DOPEN_TEMP) {
    1eec:	000e7501 	andeq	r7, lr, r1, lsl #10
    1ef0:	03da0100 	bicseq	r0, sl, #0, 2
		wwait (WNONE, 1);
    1ef4:	0ac80106 	beq	ff202314 <_estack+0xdf1fd314>
    1ef8:	0b0c0000 	bleq	301f00 <__ccfg+0x2e1f58>
	cmd_0 (CMD_DP);
    1efc:	9c010000 	stcls	0, cr0, [r1], {-0}
    1f00:	00000b2c 	andeq	r0, r0, ip, lsr #22
		dopen = 0;
    1f04:	6c617634 	stclvs	6, cr7, [r1], #-208	; 0xffffff30
}
    1f08:	03da0100 	bicseq	r0, sl, #0, 2
word ee_open () {
    1f0c:	00008d1c 	andeq	r8, r0, ip, lsl sp
	ready ();
    1f10:	1c500100 	ldfnee	f0, [r0], {-0}
	dopen = DOPEN_PERM;
    1f14:	dc010069 	stcle	0, cr0, [r1], {105}	; 0x69
    1f18:	008d0603 	addeq	r0, sp, r3, lsl #12
}
    1f1c:	62290000 	eorvs	r0, r9, #0
	if (dopen) {
    1f20:	dd01006e 	stcle	0, cr0, [r1, #-440]	; 0xfffffe48
    1f24:	00df0803 	sbcseq	r0, pc, r3, lsl #16
		dopen = DOPEN_TEMP;
    1f28:	027b0000 	rsbseq	r0, fp, #0
		cclose ();
    1f2c:	ed250000 	stc	0, cr0, [r5, #-0]
}
    1f30:	c8000011 	stmdagt	r0, {r0, r4}
int ser_in (word st, char *buf, int len) {
    1f34:	a000000a 	andge	r0, r0, sl
    1f38:	01000001 	tsteq	r0, r1
	if (len == 0)
    1f3c:	200203df 	ldrdcs	r0, [r2], -pc	; <UNPREDICTABLE>
	if (__inpline == NULL) {
    1f40:	000013ac 	andeq	r1, r0, ip, lsr #7
		if ((prcs = running (__inserial)) == 0) {
    1f44:	00000acc 	andeq	r0, r0, ip, asr #21
    1f48:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
			prcs = runthread (__inserial);
    1f4c:	0303e201 	movweq	lr, #12801	; 0x3201
    1f50:	00000b1a 	andeq	r0, r0, sl, lsl fp
			if (prcs == 0) {
    1f54:	0013bb35 	andseq	fp, r3, r5, lsr fp
				npwait (st);
    1f58:	00028e00 	andeq	r8, r2, r0, lsl #28
		release;
    1f5c:	f71d0000 			; <UNDEFINED> instruction: 0xf71d0000
		join (prcs, st);
    1f60:	fa000011 	blx	1fac <ser_outf>
    1f64:	fc00000a 	stc2	0, cr0, [r0], {10}
	if (*__inpline == NULL) // bin cmd
    1f68:	0100000a 	tsteq	r0, sl
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    1f6c:	000203e6 	andeq	r0, r2, r6, ror #7
	if (prcs >= len)
    1f70:	0ef0011e 	mrceq	1, 7, r0, cr0, cr14, {0}
		prcs = len-1;
    1f74:	c6010000 	strgt	r0, [r1], -r0
	memcpy (buf, __inpline, prcs);
    1f78:	0b480603 	bleq	120378c <__ccfg+0x11e37e4>
    1f7c:	0bec0000 	bleq	ffb01f84 <_estack+0xdfafcf84>
    1f80:	9c010000 	stcls	0, cr0, [r1], {-0}
	ufree (__inpline);
    1f84:	00000b95 	muleq	r0, r5, fp
	__inpline = NULL;
    1f88:	000b5a2e 	andeq	r5, fp, lr, lsr #20
	if (*buf) // if it's NULL, it's a bin cmd
    1f8c:	000b8800 	andeq	r8, fp, r0, lsl #16
		buf [prcs] = '\0';
    1f90:	000b6e00 	andeq	r6, fp, r0, lsl #28
}
    1f94:	006a3600 	rsbeq	r3, sl, r0, lsl #12
		prcs = strlen (__inpline);
    1f98:	8d020307 	stchi	3, cr0, [r2, #-28]	; 0xffffffe4
    1f9c:	a1000000 	mrsge	r0, (UNDEF: 0)
		return 0;
    1fa0:	36000002 	strcc	r0, [r0], -r2
    1fa4:	03070069 	movweq	r0, #28777	; 0x7069
    1fa8:	0003f402 	andeq	pc, r3, r2, lsl #8
int ser_outf (word st, const char *m, ...) {
    1fac:	0002b400 	andeq	fp, r2, r0, lsl #8
    1fb0:	9a370000 	bls	dc1fb8 <__ccfg+0xda2010>
	if ((prcs = running (__outserial)) != 0) {
    1fb4:	c800000b 	stmdagt	r0, {r0, r1, r3}
    1fb8:	3600000b 	strcc	r0, [r0], -fp
		join (prcs, st);
    1fbc:	0208006a 	andeq	r0, r8, #106	; 0x6a
    1fc0:	00008d02 	andeq	r8, r0, r2, lsl #26
		release;
    1fc4:	0002c700 	andeq	ip, r2, r0, lsl #14
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1fc8:	00693600 	rsbeq	r3, r9, r0, lsl #12
    1fcc:	f4020208 	vst1.8	{d0-d3}, [r2], r8
    1fd0:	da000003 	ble	1fe4 <ser_outf+0x38>
		umwait (st);
    1fd4:	00000002 	andeq	r0, r0, r2
    1fd8:	0cfd3800 	ldcleq	8, cr3, [sp]
	if (runstrand (__outserial, buf) == 0) {
    1fdc:	bb010000 	bllt	41fe4 <__ccfg+0x2203c>
    1fe0:	1e031403 	cdpne	4, 0, cr1, cr3, cr3, {0}
    1fe4:	00106401 	andseq	r6, r0, r1, lsl #8
		ufree (buf);
    1fe8:	03820100 	orreq	r0, r2, #0, 2
		npwait (st);
    1fec:	000a0806 	andeq	r0, sl, r6, lsl #16
}
    1ff0:	000ac800 	andeq	ip, sl, r0, lsl #16
    1ff4:	289c0100 	ldmcs	ip, {r8}
    1ff8:	2e00000c 	cdpcs	0, 0, cr0, cr0, cr12, {0}
    1ffc:	00000a34 	andeq	r0, r0, r4, lsr sl
int ser_inf (word st, const char *fmt, ...) {
    2000:	00000a62 	andeq	r0, r0, r2, ror #20
    2004:	00000be3 	andeq	r0, r0, r3, ror #23
	if (fmt == NULL)
    2008:	01006a29 	tsteq	r0, r9, lsr #20
	if (__inpline == NULL) {
    200c:	8d030389 	stchi	3, cr0, [r3, #-548]	; 0xfffffddc
		if ((prcs = running (__inserial)) == 0) {
    2010:	ed000000 	stc	0, cr0, [r0, #-0]
    2014:	29000002 	stmdbcs	r0, {r1}
			prcs = runthread (__inserial);
    2018:	89010069 	stmdbhi	r1, {r0, r3, r5, r6}
    201c:	03f40303 	mvnseq	r0, #201326592	; 0xc000000
			if (prcs == 0) {
    2020:	03000000 	movweq	r0, #0
				npwait (st);
    2024:	1b000000 	blne	202c <ser_inf+0x2c>
		release;
    2028:	00000188 	andeq	r0, r0, r8, lsl #3
		join (prcs, st);
    202c:	00000c0b 	andeq	r0, r0, fp, lsl #24
    2030:	01006a29 	tsteq	r0, r9, lsr #20
	va_start (ap, fmt);
    2034:	8d03038f 	stchi	3, cr0, [r3, #-572]	; 0xfffffdc4
	prcs = vscan (__inpline, fmt, ap);
    2038:	13000000 	movwne	r0, #0
    203c:	29000003 	stmdbcs	r0, {r0, r1}
	ufree (__inpline);
    2040:	8f010069 	svchi	0x00010069
	__inpline = NULL;
    2044:	03f40303 	mvnseq	r0, #201326592	; 0xc000000
}
    2048:	03260000 			; <UNDEFINED> instruction: 0x03260000
    204c:	33000000 	movwcc	r0, #0
    2050:	000012e7 	andeq	r1, r0, r7, ror #5
		return 0;
    2054:	00000a08 	andeq	r0, r0, r8, lsl #20
    2058:	00000168 	andeq	r0, r0, r8, ror #2
    205c:	02038401 	andeq	r8, r3, #16777216	; 0x1000000
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    2060:	00130321 	andseq	r0, r3, r1, lsr #6
    2064:	12f62100 	rscsne	r2, r6, #0, 2
    2068:	00000000 	andeq	r0, r0, r0
	RF_cmdFs.frequency = 
    206c:	000dfa39 	andeq	pc, sp, r9, lsr sl	; <UNPREDICTABLE>
}
    2070:	037d0100 	cmneq	sp, #0, 2
    2074:	056c010d 	strbeq	r0, [ip, #-269]!	; 0xfffffef3
    2078:	05780000 	ldrbeq	r0, [r8, #-0]!
    207c:	9c010000 	stcls	0, cr0, [r1], {-0}
static int option (int opt, address val) {
    2080:	00000c52 	andeq	r0, r0, r2, asr ip
    2084:	000fc22d 	andeq	ip, pc, sp, lsr #4
    2088:	037d0100 	cmneq	sp, #0, 2
    208c:	00008d1f 	andeq	r8, r0, pc, lsl sp
    2090:	00033900 	andeq	r3, r3, r0, lsl #18
    2094:	833a0000 	teqhi	sl, #0
    2098:	0100000f 	tsteq	r0, pc
    209c:	010c0310 	tsteq	ip, r0, lsl r3
    20a0:	0000008d 	andeq	r0, r0, sp, lsl #1
    20a4:	000008f8 	strdeq	r0, [r0], -r8
    20a8:	00000a08 	andeq	r0, r0, r8, lsl #20
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    20ac:	0ccb9c01 	stcleq	12, cr9, [fp], {1}
    20b0:	8c2d0000 	stchi	0, cr0, [sp], #-0
			goto RVal;
    20b4:	0100000d 	tsteq	r0, sp
			_BIS (dstate, DSTATE_RXON);
    20b8:	8d1e0310 	ldchi	3, cr0, [lr, #-64]	; 0xffffffc0
    20bc:	57000000 	strpl	r0, [r0, -r0]
	int ret = 0;
    20c0:	3b000003 	blcc	20d4 <option+0x54>
			p_trigger (drvprcs, qevent);
    20c4:	00667562 	rsbeq	r7, r6, r2, ror #10
    20c8:	2f031001 	svccs	0x00031001
    20cc:	000001c9 	andeq	r0, r0, r9, asr #3
    20d0:	0000036a 	andeq	r0, r0, sl, ror #6
    20d4:	6e656c3b 	mcrvs	12, 3, r6, cr5, cr11, {1}
    20d8:	03100100 	tsteq	r0, #0, 2
    20dc:	00008d38 	andeq	r8, r0, r8, lsr sp
    20e0:	00040c00 	andeq	r0, r4, r0, lsl #24
    20e4:	0ca92b00 	vstmiaeq	r9!, {d2-d1}
    20e8:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
}
    20ec:	b42b0103 	strtlt	r0, [fp], #-259	; 0xfffffefd
			_BIC (dstate, DSTATE_RXON);
    20f0:	0100000d 	tsteq	r0, sp
    20f4:	2701033d 	smladxcs	r1, sp, r3, r0
			statid = (val == NULL) ? 0 : *val;
    20f8:	00000d44 	andeq	r0, r0, r4, asr #26
    20fc:	000009da 	ldrdeq	r0, [r0], -sl
	int ret = 0;
    2100:	000009dc 	ldrdeq	r0, [r0], -ip
			ret = (int) statid;
    2104:	15036501 	strne	r6, [r3, #-1281]	; 0xfffffaff
	if (val != NULL)
    2108:	000d5821 	andeq	r5, sp, r1, lsr #16
		*val = ret;
    210c:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
			ret = rbuffl + 2;
    2110:	00000e44 	andeq	r0, r0, r4, asr #28
    2114:	0d02fc01 	stceq	12, cr15, [r2, #-4]
			if (val != NULL) {
    2118:	0e453c01 	cdpeq	12, 4, cr3, cr5, cr1, {0}
				memcpy (val, &rxstat,
    211c:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    2120:	08c00d02 	stmiaeq	r0, {r1, r8, sl, fp}^
				memset (&rxstat, 0, 
    2124:	08f80000 	ldmeq	r8!, {}^	; <UNPREDICTABLE>
    2128:	9c010000 	stcls	0, cr0, [r1], {-0}
			if (val == NULL)
    212c:	00000d44 	andeq	r0, r0, r4, asr #26
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    2130:	00133b20 	andseq	r3, r3, r0, lsr #22
    2134:	0008c000 	andeq	ip, r8, r0
				utimer_set (bckf_timer, *val);
    2138:	00015000 	andeq	r5, r1, r0
    213c:	02f50100 	rscseq	r0, r5, #0, 2
    2140:	000d0702 	andeq	r0, sp, r2, lsl #14
			for (ret = 0; ret < 8; ret++)
    2144:	134a2100 	movtne	r2, #41216	; 0xa100
				if (RF_cmdPropRadioDivSetup.txPower
    2148:	26000000 	strcs	r0, [r0], -r0
					== patable [ret])
    214c:	00001375 	andeq	r1, r0, r5, ror r3
				if (RF_cmdPropRadioDivSetup.txPower
    2150:	000008cc 	andeq	r0, r0, ip, asr #17
			for (ret = 0; ret < 8; ret++)
    2154:	000008d2 	ldrdeq	r0, [r0], -r2
    2158:	0202f601 	andeq	pc, r2, #1048576	; 0x100000
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    215c:	00000d2c 	andeq	r0, r0, ip, lsr #26
    2160:	00139e21 	andseq	r9, r3, r1, lsr #28
    2164:	13912100 	orrsne	r2, r1, #0, 2
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    2168:	84210000 	strthi	r0, [r1], #-0
    216c:	00000013 	andeq	r0, r0, r3, lsl r0
			_BIS (dstate, DSTATE_IRST);
    2170:	0012ca27 	andseq	ip, r2, r7, lsr #20
    2174:	0008d200 	andeq	sp, r8, r0, lsl #4
    2178:	0008dc00 	andeq	sp, r8, r0, lsl #24
			ret = (int) channel;
    217c:	02f70100 	rscseq	r0, r7, #0, 2
			goto RVal;
    2180:	12d92102 	sbcsne	r2, r9, #-2147483648	; 0x80000000
				(*val > 7) ? 7 : *val;
    2184:	00000000 	andeq	r0, r0, r0
    2188:	0c77013d 	ldfeqe	f0, [r7], #-244	; 0xffffff0c
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    218c:	eb010000 	bl	42194 <__ccfg+0x221ec>
    2190:	a7010602 	strge	r0, [r1, -r2, lsl #12]
			plugch ();
    2194:	01000000 	mrseq	r0, (UNDEF: 0)
			_BIS (dstate, DSTATE_IRST);
    2198:	00000d65 	andeq	r0, r0, r5, ror #26
    219c:	0061753e 	rsbeq	r7, r1, lr, lsr r5
			ret = (int) vrate;
    21a0:	2702eb01 	strcs	lr, [r2, -r1, lsl #22]
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    21a4:	00000d65 	andeq	r0, r0, r5, ror #26
    21a8:	26040700 	strcs	r0, [r4], -r0, lsl #14
    21ac:	1a000002 	bne	21bc <option+0x13c>
    21b0:	000d3a01 	andeq	r3, sp, r1, lsl #20
    21b4:	02d40100 	sbcseq	r0, r4, #0, 2
    21b8:	009b0109 	addseq	r0, fp, r9, lsl #2
    21bc:	086c0000 	stmdaeq	ip!, {}^	; <UNPREDICTABLE>
    21c0:	08c00000 	stmiaeq	r0, {}^	; <UNPREDICTABLE>
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    21c4:	9c010000 	stcls	0, cr0, [r1], {-0}
    21c8:	00000dc1 	andeq	r0, r0, r1, asr #27
    21cc:	000c842d 	andeq	r8, ip, sp, lsr #8
    21d0:	02d40100 	sbcseq	r0, r4, #0, 2
			syserror (EREQPAR, "cc13 op");
    21d4:	0000a721 	andeq	sl, r0, r1, lsr #14
    21d8:	00049800 	andeq	r9, r4, r0, lsl #16
    21dc:	61753b00 	cmnvs	r5, r0, lsl #22
    21e0:	02d40100 	sbcseq	r0, r4, #0, 2
    21e4:	000dc12f 	andeq	ip, sp, pc, lsr #2
    21e8:	0004ab00 	andeq	sl, r4, r0, lsl #22
    21ec:	13583300 	cmpne	r8, #0, 6
    21f0:	088c0000 	stmeq	ip, {}	; <UNPREDICTABLE>
    21f4:	01380000 	teqeq	r8, r0
    21f8:	e6010000 	str	r0, [r1], -r0
    21fc:	67210202 	strvs	r0, [r1, -r2, lsl #4]!
    2200:	00000013 	andeq	r0, r0, r3, lsl r0
    2204:	1a040700 	bne	103e0c <__ccfg+0xe3e64>
    2208:	1a000002 	bne	2218 <issue_cmd+0x8>
    220c:	00108a01 	andseq	r8, r0, r1, lsl #20
static void issue_cmd (lword cmd) {
    2210:	018a0100 	orreq	r0, sl, r0, lsl #2
    2214:	00a70106 	adceq	r0, r7, r6, lsl #2
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    2218:	081c0000 	ldmdaeq	ip, {}	; <UNPREDICTABLE>
    221c:	086c0000 	stmdaeq	ip!, {}^	; <UNPREDICTABLE>
    2220:	9c010000 	stcls	0, cr0, [r1], {-0}
		if (res != 0x86)
    2224:	00000e0f 	andeq	r0, r0, pc, lsl #28
			syserror (EHARDWARE, "hang ic0");
    2228:	000e512d 	andeq	r5, lr, sp, lsr #2
    222c:	018a0100 	orreq	r0, sl, r0, lsl #2
		if (cnt-- == 0) {
    2230:	00009b26 	andeq	r9, r0, r6, lsr #22
			diag ("HUP %lx %lx", cmd, res);
    2234:	0004be00 	andeq	fp, r4, r0, lsl #28
    2238:	58453f00 	stmdapl	r5, {r8, r9, sl, fp, ip, sp}^
			syserror (EHARDWARE, "hang ic0");
    223c:	01a40100 			; <UNDEFINED> instruction: 0x01a40100
		udelay (1);
    2240:	0f461d01 	svceq	0x00461d01
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    2244:	08300000 	ldmdaeq	r0!, {}	; <UNPREDICTABLE>
}
    2248:	083a0000 	ldmdaeq	sl!, {}	; <UNPREDICTABLE>
    224c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2250:	1e001a01 	vmlane.f32	s2, s0, s2
    2254:	000e0701 	andeq	r0, lr, r1, lsl #14
static void rx_de () {
    2258:	01380100 	teqeq	r8, r0, lsl #2
	if ((dstate & DSTATE_RXAC) == 0)
    225c:	00070806 	andeq	r0, r7, r6, lsl #16
    2260:	00081c00 	andeq	r1, r8, r0, lsl #24
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    2264:	c19c0100 	orrsgt	r0, ip, r0, lsl #2
	_BIC (dstate, DSTATE_RXAC);
    2268:	4000000e 	andmi	r0, r0, lr
    226c:	00000f2a 	andeq	r0, r0, sl, lsr #30
}
    2270:	08013a01 	stmdaeq	r1, {r0, r9, fp, ip, sp}
    2274:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    2278:	000004dc 	ldrdeq	r0, [r0], -ip
static void rf_off () {
    227c:	54554541 	ldrbpl	r4, [r5], #-1345	; 0xfffffabf
	if ((dstate & DSTATE_RFON) == 0)
    2280:	01680100 	cmneq	r8, r0, lsl #2
    2284:	00075601 	andeq	r5, r7, r1, lsl #12
	IntDisable (INT_RFC_CPE_0);
    2288:	01202300 			; <UNDEFINED> instruction: 0x01202300
    228c:	96400000 	strbls	r0, [r0], -r0
    2290:	0100000d 	tsteq	r0, sp
	RFCAdi3VcoLdoVoltageMode (false);
    2294:	9b0b0147 	blls	2c27b8 <__ccfg+0x2a2810>
	RFCSynthPowerDown ();
    2298:	27000000 	strcs	r0, [r0, -r0]
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    229c:	42000005 	andmi	r0, r0, #5
    22a0:	00001410 	andeq	r1, r0, r0, lsl r4
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    22a4:	00000774 	andeq	r0, r0, r4, ror r7
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    22a8:	0000077c 	andeq	r0, r0, ip, ror r7
	OSCHF_SwitchToRcOscTurnOffXosc ();
    22ac:	75060d05 	strvc	r0, [r6, #-3333]	; 0xfffff2fb
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    22b0:	2100000e 	tstcs	r0, lr
    22b4:	0000141f 	andeq	r1, r0, pc, lsl r4
    22b8:	14104200 	ldrne	r4, [r0], #-512	; 0xfffffe00
	_BIC (dstate, DSTATE_RFON);
    22bc:	07800000 	streq	r0, [r0, r0]
    22c0:	07880000 	streq	r0, [r8, r0]
}
    22c4:	0f050000 	svceq	0x00050000
    22c8:	000e8f06 	andeq	r8, lr, r6, lsl #30
    22cc:	141f2100 	ldrne	r2, [pc], #-256	; 22d4 <rf_off+0x58>
    22d0:	42000000 	andmi	r0, r0, #0
    22d4:	000013f3 	strdeq	r1, [r0], -r3
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    22d8:	000007ce 	andeq	r0, r0, lr, asr #15
    22dc:	000007d6 	ldrdeq	r0, [r0], -r6
    22e0:	a9061705 	stmdbge	r6, {r0, r2, r8, r9, sl, ip}
		if (cmd->status == tstat)
    22e4:	2100000e 	tstcs	r0, lr
		if (timeout-- == 0) {
    22e8:	00001402 	andeq	r1, r0, r2, lsl #8
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    22ec:	13f34300 	mvnsne	r4, #0, 6
    22f0:	07da0000 	ldrbeq	r0, [sl, r0]
    22f4:	07e20000 	strbeq	r0, [r2, r0]!
			syserror (EHARDWARE, "rt2");
    22f8:	19050000 	stmdbne	r5, {}	; <UNPREDICTABLE>
    22fc:	14022106 	strne	r2, [r2], #-262	; 0xfffffefa
		udelay (1);
    2300:	00000000 	andeq	r0, r0, r0
		if (cmd->status == tstat)
    2304:	c7011e00 	strgt	r1, [r1, -r0, lsl #28]
}
    2308:	0100000e 	tsteq	r0, lr
    230c:	e006012b 	and	r0, r6, fp, lsr #2
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2310:	08000006 	stmdaeq	r0, {r1, r2}
    2314:	01000007 	tsteq	r0, r7
static void rf_on () {
    2318:	000ef19c 	muleq	lr, ip, r1
    231c:	0f253300 	svceq	0x00253300
	OSCHF_TurnOnXosc();
    2320:	06e80000 	strbteq	r0, [r8], r0
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    2324:	01080000 	mrseq	r0, (UNDEF: 8)
    2328:	32010000 	andcc	r0, r1, #0
    232c:	38212c01 	stmdacc	r1!, {r0, sl, fp, sp}
    2330:	0000000f 	andeq	r0, r0, pc
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2334:	1e011e00 	cdpne	14, 0, cr1, cr1, cr0, {0}
    2338:	0100000e 	tsteq	r0, lr
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    233c:	a006011e 	andge	r0, r6, lr, lsl r1
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    2340:	e0000006 	and	r0, r0, r6
	issue_cmd (
    2344:	01000006 	tsteq	r0, r6
    2348:	000f259c 	muleq	pc, ip, r5	; <UNPREDICTABLE>
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    234c:	0f253300 	svceq	0x00253300
    2350:	06b20000 	ldrteq	r0, [r2], r0
    2354:	00e80000 	rsceq	r0, r8, r0
   pPatchTab[80] = 0;
    2358:	25010000 	strcs	r0, [r1, #-0]
   } while (--nIterations);
    235c:	38352c01 	ldmdacc	r5!, {r0, sl, fp, sp}
   pPatchTab[53] = 2;
    2360:	6600000f 	strvs	r0, [r0], -pc
    2364:	00000005 	andeq	r0, r0, r5
   pPatchTab[55] = 3;
    2368:	0f234400 	svceq	0x00234400
   pPatchTab[110] = 4;
    236c:	17010000 	strne	r0, [r1, -r0]
   pPatchTab[107] = 5;
    2370:	df011501 	svcle	0x00011501
   pPatchTab[65] = 6;
    2374:	03000000 	movweq	r0, #0
    2378:	00000f46 	andeq	r0, r0, r6, asr #30
   pPatchTab[57] = 1;
    237c:	6c65643e 	cfstrdvs	mvd6, [r5], #-248	; 0xffffff08
   pIrqPatch[1] = _IRQ_PATCH_0;
    2380:	01170100 	tsteq	r7, r0, lsl #2
   const uint32_t *pS = patchGenfskRfe;
    2384:	0000a722 	andeq	sl, r0, r2, lsr #14
      t2 = *pS++;
    2388:	9f450000 	svcls	0x00450000
      t4 = *pS++;
    238c:	0100000b 	tsteq	r0, fp
      t6 = *pS++;
    2390:	a714010e 	ldrge	r0, [r4, -lr, lsl #2]
      t8 = *pS++;
    2394:	03000000 	movweq	r0, #0
      *pD++ = t1;
    2398:	00107e46 	andseq	r7, r0, r6, asr #28
      *pD++ = t2;
    239c:	14ee0100 	strbtne	r0, [lr], #256	; 0x100
      *pD++ = t3;
    23a0:	000f7a03 	andeq	r7, pc, r3, lsl #20
      *pD++ = t5;
    23a4:	69704700 	ldmdbvs	r0!, {r8, r9, sl, lr}^
      *pD++ = t7;
    23a8:	f201006e 	vhadd.s8	q0, <illegal reg q0.5>, q15
   } while (--nIterations);
    23ac:	00008d06 	andeq	r8, r0, r6, lsl #26
    23b0:	69474800 	stmdbvs	r7, {fp, lr}^
      *pD++ = t8;
    23b4:	0bf40100 	bleq	ffd027bc <_estack+0xdfcfd7bc>
   } while (--nIterations);
    23b8:	0000008d 	andeq	r0, r0, sp, lsl #1
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    23bc:	01490000 	mrseq	r0, (UNDEF: 73)
   *pD++ = t2;
    23c0:	00000fb4 			; <UNDEFINED> instruction: 0x00000fb4
   *pD++ = t3;
    23c4:	01069801 	tsteq	r6, r1, lsl #16
   *pD++ = t4;
    23c8:	0000064c 	andeq	r0, r0, ip, asr #12
   *pD++ = t5;
    23cc:	000006a0 	andeq	r0, r0, r0, lsr #13
    23d0:	10249c01 	eorne	r9, r4, r1, lsl #24
	RFCAdi3VcoLdoVoltageMode (true);
    23d4:	654a0000 	strbvs	r0, [sl, #-0]
    23d8:	98010063 	stmdals	r1, {r0, r1, r5, r6}
       	RFCRfTrimSet (&rfTrim);
    23dc:	0000a71a 	andeq	sl, r0, sl, lsl r7
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    23e0:	00057900 	andeq	r7, r5, r0, lsl #18
    23e4:	006d4a00 	rsbeq	r4, sp, r0, lsl #20
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    23e8:	242a9801 	strtcs	r9, [sl], #-2049	; 0xfffff7ff
    23ec:	8c000010 	stchi	0, cr0, [r0], {16}
	issue_cmd ((lword)&cmd_srt);
    23f0:	28000005 	stmdacs	r0, {r0, r2}
    23f4:	000011ed 	andeq	r1, r0, sp, ror #3
	issue_cmd ((lword)&RF_cmdFs);
    23f8:	00000658 	andeq	r0, r0, r8, asr r6
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    23fc:	0000065a 	andeq	r0, r0, sl, asr r6
    2400:	2202a801 	andcs	sl, r2, #65536	; 0x10000
    2404:	00001410 	andeq	r1, r0, r0, lsl r4
	IntEnable (INT_RFC_CPE_0);
    2408:	0000065a 	andeq	r0, r0, sl, asr r6
	_BIC (dstate, DSTATE_IRST);
    240c:	00000098 	muleq	r0, r8, r0
    2410:	d903b801 	stmdble	r3, {r0, fp, ip, sp, pc}
    2414:	2100000f 	tstcs	r0, pc
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    2418:	0000141f 	andeq	r1, r0, pc, lsl r4
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    241c:	14102200 	ldrne	r2, [r0], #-512	; 0xfffffe00
	IntEnable (INT_RFC_CPE_0);
    2420:	06600000 	strbteq	r0, [r0], -r0
    2424:	00b80000 	adcseq	r0, r8, r0
}
    2428:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
	IntEnable (INT_RFC_CPE_0);
    242c:	000ff303 	andeq	pc, pc, r3, lsl #6
    2430:	141f2100 	ldrne	r2, [pc], #-256	; 2438 <rf_on.part.0+0x128>
    2434:	22000000 	andcs	r0, r0, #0
    2438:	000013f3 	strdeq	r1, [r0], -r3
    243c:	00000678 	andeq	r0, r0, r8, ror r6
    2440:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2444:	0d03b801 	stceq	8, cr11, [r3, #-4]
    2448:	21000010 	tstcs	r0, r0, lsl r0
    244c:	00001402 	andeq	r1, r0, r2, lsl #8
    2450:	13f34300 	mvnsne	r4, #0, 6
    2454:	067e0000 	ldrbteq	r0, [lr], -r0
    2458:	06800000 	streq	r0, [r0], r0
    245c:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
    2460:	14022103 	strne	r2, [r2], #-259	; 0xfffffefd
    2464:	00000000 	andeq	r0, r0, r0
    2468:	01d60407 	bicseq	r0, r6, r7, lsl #8
    246c:	01490000 	mrseq	r0, (UNDEF: 73)
    2470:	00000f49 	andeq	r0, r0, r9, asr #30
    2474:	01067201 	tsteq	r6, r1, lsl #4
	...
    2480:	10ca9c01 	sbcne	r9, sl, r1, lsl #24
    2484:	734a0000 	movtvc	r0, #40960	; 0xa000
    2488:	72010074 	andvc	r0, r1, #116	; 0x74
    248c:	0000a718 	andeq	sl, r0, r8, lsl r7
static void rx_int_enable () {
    2490:	0005aa00 	andeq	sl, r5, r0, lsl #20
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2494:	65734a00 	ldrbvs	r4, [r3, #-2560]!	; 0xfffff600
    2498:	7201006e 	andvc	r0, r1, #110	; 0x6e
    249c:	00024428 	andeq	r4, r2, r8, lsr #8
    24a0:	0005bd00 	andeq	fp, r5, r0, lsl #26
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    24a4:	61764a00 	cmnvs	r6, r0, lsl #20
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    24a8:	7201006c 	andvc	r0, r1, #108	; 0x6c
    24ac:	0000fc35 	andeq	pc, r0, r5, lsr ip	; <UNPREDICTABLE>
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    24b0:	0005db00 	andeq	sp, r5, r0, lsl #22
    24b4:	0bba4b00 	bleq	fee950bc <_estack+0xdee900bc>
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    24b8:	74010000 	strvc	r0, [r1], #-0
    24bc:	0000c90e 	andeq	ip, r0, lr, lsl #18
    24c0:	00030500 	andeq	r0, r3, r0, lsl #10
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    24c4:	4c000000 	stcmi	0, cr0, [r0], {-0}
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    24c8:	000010a1 	andeq	r1, r0, r1, lsr #1
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    24cc:	00017801 	andeq	r7, r1, r1, lsl #16
		if (db->status == DATA_ENTRY_FINISHED) {
    24d0:	4d000000 	stcmi	0, cr0, [r0, #-0]
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    24d4:	00001220 	andeq	r1, r0, r0, lsr #4
    24d8:	00000000 	andeq	r0, r0, r0
			nr++;
    24dc:	000004d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    24e0:	42038101 	andmi	r8, r3, #1073741824	; 0x40000000
    24e4:	00001201 	andeq	r1, r0, r1, lsl #4
	...
				__dp [pl + 1] = __dp [pl] - 128;
    24f0:	b9127e01 	ldmdblt	r2, {r0, r9, sl, fp, ip, sp, lr}
				pl = __dp [1] + 2;
    24f4:	2f000010 	svccs	0x00000010
				__dp [pl + 1] = __dp [pl] - 128;
    24f8:	00001213 	andeq	r1, r0, r3, lsl r2
    24fc:	122a2800 	eorne	r2, sl, #0, 16
	...
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2508:	84010000 	strhi	r0, [r1], #-0
    250c:	014e0003 	cmpeq	lr, r3
			db->status = DATA_ENTRY_PENDING;
    2510:	00001048 	andeq	r1, r0, r8, asr #32
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2514:	01066201 	tsteq	r6, r1, lsl #4
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    2518:	00001020 	andeq	r1, r0, r0, lsr #32
				diag ("BAD RX");
    251c:	00001050 	andeq	r1, r0, r0, asr r0
    2520:	01499c01 	cmpeq	r9, r1, lsl #24
	if (nr) {
    2524:	00000b59 	andeq	r0, r0, r9, asr fp
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2528:	01064f01 	tsteq	r6, r1, lsl #30
	...
    2534:	11079c01 	tstne	r7, r1, lsl #24
    2538:	51280000 			; <UNDEFINED> instruction: 0x51280000
}
    253c:	00000012 	andeq	r0, r0, r2, lsl r0
    2540:	00000000 	andeq	r0, r0, r0
    2544:	01000000 	mrseq	r0, (UNDEF: 0)
    2548:	4900035f 	stmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, r9}
    254c:	000b9001 	andeq	r9, fp, r1
    2550:	063b0100 	ldrteq	r0, [fp], -r0, lsl #2
    2554:	00060c01 	andeq	r0, r6, r1, lsl #24
    2558:	00064c00 	andeq	r4, r6, r0, lsl #24
    255c:	2e9c0100 	fmlcse	f0, f4, f0
thread (cc1350_driver)
    2560:	4a000011 	bmi	25ac <cc1350_driver+0x4c>
    2564:	3b010064 	blcc	426fc <__ccfg+0x22754>
    2568:	0000df1c 	andeq	sp, r0, ip, lsl pc
    256c:	0005f900 	andeq	pc, r5, r0, lsl #18
    2570:	01490000 	mrseq	r0, (UNDEF: 73)
		if (dstate & DSTATE_IRST) {
    2574:	00000c50 	andeq	r0, r0, r0, asr ip
    2578:	01062b01 	tsteq	r6, r1, lsl #22
    257c:	000005d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
			rf_off ();
    2580:	0000060c 	andeq	r0, r0, ip, lsl #12
			_BIC (dstate,
    2584:	11559c01 	cmpne	r5, r1, lsl #24
    2588:	644a0000 	strbvs	r0, [sl], #-0
		if (dstate & DSTATE_RXAC) {
    258c:	1b2b0100 	blne	ac2994 <__ccfg+0xaa29ec>
    2590:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
			if ((dstate & DSTATE_RXON) == 0)
    2594:	00000617 	andeq	r0, r0, r7, lsl r6
				rx_de ();
    2598:	86014900 	strhi	r4, [r1], -r0, lsl #18
		if (paylen == 0) {
    259c:	0100000e 	tsteq	r0, lr
    25a0:	a4010620 	strge	r0, [r1], #-1568	; 0xfffff9e0
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    25a4:	ce000005 	cdpgt	0, 0, cr0, cr0, cr5, {0}
    25a8:	01000005 	tsteq	r0, r5
    25ac:	00117c9c 	mulseq	r1, ip, ip
    25b0:	006e4a00 	rsbeq	r4, lr, r0, lsl #20
				sysassert (paylen <= rbuffl && paylen > 0 &&
    25b4:	b81c2001 	ldmdalt	ip, {r0, sp}
    25b8:	35000000 	strcc	r0, [r0, #-0]
    25bc:	00000006 	andeq	r0, r0, r6
    25c0:	0f310149 	svceq	0x00310149
    25c4:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    25c8:	05780106 	ldrbeq	r0, [r8, #-262]!	; 0xfffffefa
    25cc:	05a40000 	streq	r0, [r4, #0]!
    25d0:	9c010000 	stcls	0, cr0, [r1], {-0}
		} else if (dstate & DSTATE_RXON) {
    25d4:	000011b7 			; <UNDEFINED> instruction: 0x000011b7
	if (dstate & DSTATE_RFON)
    25d8:	01006e4f 	tsteq	r0, pc, asr #28
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    25dc:	00b81c19 	adcseq	r1, r8, r9, lsl ip
		re->status = DATA_ENTRY_PENDING;
    25e0:	50010000 	andpl	r0, r1, r0
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    25e4:	0011b743 	andseq	fp, r1, r3, asr #14
	issue_cmd ((lword)&RF_cmdPropRx);
    25e8:	00058c00 	andeq	r8, r5, r0, lsl #24
	_BIS (dstate, DSTATE_RXAC);
    25ec:	00059600 	andeq	r9, r5, r0, lsl #12
    25f0:	031b0100 	tsteq	fp, #0, 2
    25f4:	0011c521 	andseq	ip, r1, r1, lsr #10
    25f8:	50000000 	andpl	r0, r0, r0
	if (dstate & DSTATE_RXAC)
    25fc:	0000105c 	andeq	r1, r0, ip, asr r0
    2600:	01141501 	tsteq	r4, r1, lsl #10
				if (statid != 0xffff)
    2604:	0011d003 	andseq	sp, r1, r3
    2608:	006e5100 	rsbeq	r5, lr, r0, lsl #2
					((address)(RF_cmdPropTx.pPkt)) [0] =
    260c:	b82b1501 	stmdalt	fp!, {r0, r8, sl, ip}
				RF_cmdPropTx.pktLen = (byte) paylen;
    2610:	00000000 	andeq	r0, r0, r0
		if (paylen == 0) {
    2614:	000c3c52 	andeq	r3, ip, r2, asr ip
			wait (qevent, DR_LOOP);
    2618:	011a0300 	tsteq	sl, r0, lsl #6
    261c:	ed030135 	stfs	f0, [r3, #-212]	; 0xffffff2c
			if (dstate & DSTATE_RXAC) {
    2620:	53000011 	movwpl	r0, #17
    2624:	0000104d 	andeq	r1, r0, sp, asr #32
				rx_int_enable ();
    2628:	48011a03 	stmdami	r1, {r0, r1, r9, fp, ip}
			release;
    262c:	00000073 	andeq	r0, r0, r3, ror r0
			} else if (dstate & DSTATE_RFON) {
    2630:	0e8d5400 	cdpeq	4, 8, cr5, cr13, cr0, {0}
				delay (offdelay, DR_GOOF);
    2634:	5b030000 	blpl	c263c <__ccfg+0xa2694>
    2638:	54030135 	strpl	r0, [r3], #-309	; 0xfffffecb
    263c:	00000bad 	andeq	r0, r0, sp, lsr #23
		if (bckf_timer) {
    2640:	01355003 	teqeq	r5, r3
			wait (qevent, DR_LOOP);
    2644:	0f685503 	svceq	0x00685503
    2648:	bf0f0000 	svclt	0x000f0000
    264c:	00730101 	rsbseq	r0, r3, r1, lsl #2
			delay (bckf_timer, DR_LOOP);
    2650:	20030000 	andcs	r0, r3, r0
    2654:	16000012 			; <UNDEFINED> instruction: 0x16000012
			if (dstate & DSTATE_RXAC)
    2658:	00001000 	andeq	r1, r0, r0
    265c:	730ec10f 	movwvc	ip, #57615	; 0xe10f
	if (dstate & DSTATE_RFON)
    2660:	00000000 	andeq	r0, r0, r0
    2664:	000f3854 	andeq	r3, pc, r4, asr r8	; <UNPREDICTABLE>
		rx_de ();
    2668:	01900f00 	orrseq	r0, r0, r0, lsl #30
		RF_cmdPropTx . status = 0;
    266c:	77540301 	ldrbvc	r0, [r4, -r1, lsl #6]
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2670:	0f00000b 	svceq	0x0000000b
    2674:	0301017b 	movweq	r0, #4475	; 0x117b
    2678:	000de552 	andeq	lr, sp, r2, asr r5
		issue_cmd ((lword)&cmd_cs);
    267c:	03660a00 	cmneq	r6, #0, 20
		if (dstate & DSTATE_IRST)
    2680:	51030101 	tstpl	r3, r1, lsl #2
    2684:	53000012 	movwpl	r0, #18
    2688:	00000dbc 			; <UNDEFINED> instruction: 0x00000dbc
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    268c:	1f03660a 	svcne	0x0003660a
    2690:	00000073 	andeq	r0, r0, r3, ror r0
			delay (1, DR_XMIT);
    2694:	0f105600 	svceq	0x00105600
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2698:	4c020000 	stcmi	0, cr0, [r2], {-0}
    269c:	03010101 	movweq	r0, #4353	; 0x1101
    26a0:	000ea954 	andeq	sl, lr, r4, asr r9
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    26a4:	01c40200 	biceq	r0, r4, r0, lsl #4
    26a8:	bd570301 	ldcllt	3, cr0, [r7, #-4]
				RF_cmdPropTx . status = 0;
    26ac:	0200000c 	andeq	r0, r0, #12
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    26b0:	730101ad 	movwvc	r0, #4525	; 0x11ad
				issue_cmd ((lword)&RF_cmdPropTx);
    26b4:	03000000 	movweq	r0, #0
				proceed (DR_XMIT);
    26b8:	000c1056 	andeq	r1, ip, r6, asr r0
    26bc:	02450e00 	subeq	r0, r5, #0, 28
			txtries++;
    26c0:	58030101 	stmdapl	r3, {r0, r8}
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    26c4:	00000be2 	andeq	r0, r0, r2, ror #23
    26c8:	01022c0e 	tsteq	r2, lr, lsl #24
    26cc:	00007301 	andeq	r7, r0, r1, lsl #6
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    26d0:	cd520300 	ldclgt	3, cr0, [r2, #-0]
		goto DR_LOOP__;
    26d4:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    26d8:	010101dc 	ldrdeq	r0, [r1, -ip]
		paylen = 0;
    26dc:	0012ab03 	andseq	sl, r2, r3, lsl #22
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    26e0:	0b875300 	bleq	fe1d72e8 <_estack+0xde1d22e8>
		txtries = 0;
    26e4:	dc0e0000 	stcle	0, cr0, [lr], {-0}
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    26e8:	00731f01 	rsbseq	r1, r3, r1, lsl #30
    26ec:	56000000 	strpl	r0, [r0], -r0
    26f0:	00000d4c 	andeq	r0, r0, ip, asr #26
    26f4:	01010f0b 	tsteq	r1, fp, lsl #30
    26f8:	89540301 	ldmdbhi	r4, {r0, r8, r9}^
		    tcvphy_top (physid) == NULL)
    26fc:	0c00000c 	stceq	0, cr0, [r0], {12}
    2700:	030101ed 	movweq	r0, #4589	; 0x11ed
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2704:	000f5554 	andeq	r5, pc, r4, asr r5	; <UNPREDICTABLE>
    2708:	01d60c00 	bicseq	r0, r6, r0, lsl #24
			rf_off ();
    270c:	5e520301 	cdppl	3, 5, cr0, cr2, cr1, {0}
endthread
    2710:	0600000c 	streq	r0, [r0], -ip
    2714:	01010440 	tsteq	r1, r0, asr #8
    2718:	0012e703 	andseq	lr, r2, r3, lsl #14
    271c:	0dc95300 	stcleq	3, cr5, [r9]
    2720:	40060000 	andmi	r0, r6, r0
    2724:	00732404 	rsbseq	r2, r3, r4, lsl #8
    2728:	52000000 	andpl	r0, r0, #0
    272c:	00000bf7 	strdeq	r0, [r0], -r7
    2730:	01039106 	tsteq	r3, r6, lsl #2
    2734:	13110301 	tstne	r1, #67108864	; 0x4000000
    2738:	c9530000 	ldmdbgt	r3, {}^	; <UNPREDICTABLE>
    273c:	0600000d 	streq	r0, [r0], -sp
    2740:	73170391 	tstvc	r7, #1140850690	; 0x44000002
    2744:	53000000 	movwpl	r0, #0
    2748:	00000d23 	andeq	r0, r0, r3, lsr #26
    274c:	2a039106 	bcs	e6b6c <__ccfg+0xc6bc4>
void RFCCPE0IntHandler (void) {
    2750:	00000073 	andeq	r0, r0, r3, ror r0
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2754:	10135200 	andsne	r5, r3, r0, lsl #4
		_BIS (dstate, DSTATE_IRST);
    2758:	0c060000 	stceq	0, cr0, [r6], {-0}
    275c:	03010103 	movweq	r0, #4355	; 0x1103
    2760:	0000133b 	andeq	r1, r0, fp, lsr r3
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    2764:	000dc953 	andeq	ip, sp, r3, asr r9
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    2768:	030c0600 	movweq	r0, #50688	; 0xc600
    276c:	00007318 	andeq	r7, r0, r8, lsl r3
	p_trigger (drvprcs, qevent);
    2770:	0d235300 	stceq	3, cr5, [r3, #-0]
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2774:	0c060000 	stceq	0, cr0, [r6], {-0}
    2778:	00732b03 	rsbseq	r2, r3, r3, lsl #22
    277c:	52000000 	andpl	r0, r0, #0
    2780:	00000d14 	andeq	r0, r0, r4, lsl sp
    2784:	0101e706 	tsteq	r1, r6, lsl #14
    2788:	13580301 	cmpne	r8, #67108864	; 0x4000000
    278c:	c9530000 	ldmdbgt	r3, {}^	; <UNPREDICTABLE>
    2790:	0600000d 	streq	r0, [r0], -sp
    2794:	731901e7 	tstvc	r9, #-1073741767	; 0xc0000039
    2798:	00000000 	andeq	r0, r0, r0
	RISE_N_SHINE;
    279c:	000e5752 	andeq	r5, lr, r2, asr r7
    27a0:	01ba0600 			; <UNDEFINED> instruction: 0x01ba0600
    27a4:	75030101 	strvc	r0, [r3, #-257]	; 0xfffffeff
}
    27a8:	53000013 	movwpl	r0, #19
    27ac:	00000dc9 	andeq	r0, r0, r9, asr #27
    27b0:	1501ba06 	strne	fp, [r1, #-2566]	; 0xfffff5fa
    27b4:	00000073 	andeq	r0, r0, r3, ror r0
    27b8:	0eff5200 	cdpeq	2, 15, cr5, cr15, cr0, {0}
    27bc:	39060000 	stmdbcc	r6, {}	; <UNPREDICTABLE>
void phys_cc1350 (int phy, int mbs) {
    27c0:	03010101 	movweq	r0, #4353	; 0x1101
	if (rbuffl != 0)
    27c4:	000013ac 	andeq	r1, r0, ip, lsr #7
    27c8:	000dc953 	andeq	ip, sp, r3, asr r9
		syserror (ETOOMANY, "cc13");
    27cc:	01390600 	teqeq	r9, r0, lsl #12
		syserror (EREQPAR, "cc13 mb");
    27d0:	0000731b 	andeq	r7, r0, fp, lsl r3
	if (mbs == 0)
    27d4:	0cb15300 	ldceq	3, cr5, [r1]
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    27d8:	39060000 	stmdbcc	r6, {}	; <UNPREDICTABLE>
		syserror (EREQPAR, "cc13 mb");
    27dc:	00732e01 	rsbseq	r2, r3, r1, lsl #28
    27e0:	9d530000 	ldclls	0, cr0, [r3, #-0]
	i = 0;
    27e4:	0600000c 	streq	r0, [r0], -ip
	rbuffl = (byte) mbs;
    27e8:	731b013a 	tstvc	fp, #-2147483634	; 0x8000000e
		db->config.type = 0;	// General (data in structure)
    27ec:	00000000 	andeq	r0, r0, r0
	rbuffl = (byte) mbs;
    27f0:	000e6252 	andeq	r6, lr, r2, asr r2
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    27f4:	02840400 	addeq	r0, r4, #0, 8
    27f8:	c9030101 	stmdbgt	r3, {r0, r8}
		if (db == NULL)
    27fc:	53000013 	movwpl	r0, #19
			syserror (EMALLOC, "cc13");
    2800:	00000d30 	andeq	r0, r0, r0, lsr sp
    2804:	1e028404 	cdpne	4, 0, cr8, cr2, cr4, {0}
    2808:	00000073 	andeq	r0, r0, r3, ror r0
		db->status = DATA_ENTRY_PENDING;
    280c:	0b5f5200 	bleq	17d7014 <__ccfg+0x17b706c>
		if (i)
    2810:	06040000 	streq	r0, [r4], -r0
			da->pNextEntry = (byte*) db;
    2814:	03010102 	movweq	r0, #4354	; 0x1102
		db->length = rbuffl + 2;
    2818:	000013f3 	strdeq	r1, [r0], -r3
    281c:	000d3053 	andeq	r3, sp, r3, asr r0
		db->config.type = 0;	// General (data in structure)
    2820:	02060400 	andeq	r0, r6, #0, 8
		db->length = rbuffl + 2;
    2824:	00007323 	andeq	r7, r0, r3, lsr #6
	db->pNextEntry = (byte*) re;
    2828:	10365300 	eorsne	r5, r6, r0, lsl #6
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    282c:	06040000 	streq	r0, [r4], -r0
    2830:	00733702 	rsbseq	r3, r3, r2, lsl #14
	if (rbuffs == NULL)
    2834:	52000000 	andpl	r0, r0, #0
	rbuffs->pCurrEntry = (byte*) re;
    2838:	00000e9b 	muleq	r0, fp, lr
	rbuffs->pLastEntry = NULL;
    283c:	01015404 	tsteq	r1, r4, lsl #8
    2840:	14100301 	ldrne	r0, [r0], #-769	; 0xfffffcff
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2844:	30530000 	subscc	r0, r3, r0
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    2848:	0400000d 	streq	r0, [r0], #-13
    284c:	73190154 	tstvc	r9, #84, 2
    2850:	00000000 	andeq	r0, r0, r0
	rbuffl -= 2;
    2854:	000fa052 	andeq	sl, pc, r2, asr r0	; <UNPREDICTABLE>
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2858:	011e0400 	tsteq	lr, r0, lsl #8
	rbuffl -= 2;
    285c:	2d030101 	stfcss	f0, [r3, #-4]
	physid = phy;
    2860:	53000014 	movwpl	r0, #20
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2864:	00000d30 	andeq	r0, r0, r0, lsr sp
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2868:	17011e04 	strne	r1, [r1, -r4, lsl #28]
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    286c:	00000073 	andeq	r0, r0, r3, ror r0
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2870:	0d655600 	stcleq	6, cr5, [r5, #-0]
    2874:	63090000 	movwvs	r0, #36864	; 0x9000
	utimer_add (&bckf_timer);
    2878:	03010104 	movweq	r0, #4356	; 0x1104
	drvprcs = runthread (cc1350_driver);
    287c:	000ccd56 	andeq	ip, ip, r6, asr sp
    2880:	04540900 	ldrbeq	r0, [r4], #-2304	; 0xfffff700
    2884:	56030101 	strpl	r0, [r3], -r1, lsl #2
	if (drvprcs == 0)
    2888:	00000ce6 	andeq	r0, r0, r6, ror #25
		syserror (ERESOURCE, "cc13");
    288c:	01022a09 	tsteq	r2, r9, lsl #20
    2890:	21520301 	cmpcs	r2, r1, lsl #6
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    2894:	09000010 	stmdbeq	r0, {r4}
    2898:	01010168 	tsteq	r1, r8, ror #2
    289c:	00146b03 	andseq	r6, r4, r3, lsl #22
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    28a0:	0cf25300 	ldcleq	3, cr5, [r2]
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    28a4:	68090000 	stmdavs	r9, {}	; <UNPREDICTABLE>
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    28a8:	00731f01 	rsbseq	r1, r3, r1, lsl #30
    28ac:	56000000 	strpl	r0, [r0], -r0
    28b0:	00000c2c 	andeq	r0, r0, ip, lsr #24
    28b4:	01013209 	tsteq	r1, r9, lsl #4
    28b8:	44590301 	ldrbmi	r0, [r9], #-769	; 0xfffffcff
    28bc:	0000000d 	andeq	r0, r0, sp
    28c0:	00000000 	andeq	r0, r0, r0
    28c4:	01000000 	mrseq	r0, (UNDEF: 0)
    28c8:	0d58359c 	cfldr64eq	mvdx3, [r8, #-624]	; 0xfffffd90
	plugch ();
    28cc:	06480000 	strbeq	r0, [r8], -r0
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    28d0:	00000000 	andeq	r0, r0, r0
    28d4:	0000121f 	andeq	r1, r0, pc, lsl r2
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    28d8:	09240003 	stmdbeq	r4!, {r0, r1}
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    28dc:	01040000 	mrseq	r0, (UNDEF: 4)
    28e0:	000000bd 	strheq	r0, [r0], -sp
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    28e4:	0011220c 	andseq	r2, r1, ip, lsl #4
}
    28e8:	0006e400 	andeq	lr, r6, r0, lsl #8
    28ec:	00067800 	andeq	r7, r6, r0, lsl #16
    28f0:	00000000 	andeq	r0, r0, r0
    28f4:	001c4e00 	andseq	r4, ip, r0, lsl #28
    28f8:	06010200 	streq	r0, [r1], -r0, lsl #4
    28fc:	0000098a 	andeq	r0, r0, sl, lsl #19
    2900:	44050202 	strmi	r0, [r5], #-514	; 0xfffffdfe
    2904:	03000008 	movweq	r0, #8
    2908:	0000273d 	andeq	r2, r0, sp, lsr r7
    290c:	3f182803 	svccc	0x00182803
    2910:	02000000 	andeq	r0, r0, #0
    2914:	06370504 	ldrteq	r0, [r7], -r4, lsl #10
    2918:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    291c:	00063205 	andeq	r3, r6, r5, lsl #4
    2920:	08e10300 	stmiaeq	r1!, {r8, r9}^
    2924:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
    2928:	00005918 	andeq	r5, r0, r8, lsl r9
    292c:	08010200 	stmdaeq	r1, {r9}
    2930:	00000988 	andeq	r0, r0, r8, lsl #19
    2934:	00040a03 	andeq	r0, r4, r3, lsl #20
    2938:	19310300 	ldmdbne	r1!, {r8, r9}
    293c:	0000006c 	andeq	r0, r0, ip, rrx
    2940:	80070202 	andhi	r0, r7, r2, lsl #4
    2944:	0300000a 	movweq	r0, #10
    2948:	000009a1 	andeq	r0, r0, r1, lsr #19
    294c:	7f193403 	svcvc	0x00193403
    2950:	02000000 	andeq	r0, r0, #0
    2954:	03cf0704 	biceq	r0, pc, #4, 14	; 0x100000
    2958:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    295c:	0003ca07 	andeq	ip, r3, r7, lsl #20
    2960:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    2964:	00746e69 	rsbseq	r6, r4, r9, ror #28
    2968:	d4070402 	strle	r0, [r7], #-1026	; 0xfffffbfe
    296c:	03000003 	movweq	r0, #3
    2970:	00000456 	andeq	r0, r0, r6, asr r4
    2974:	a71b2804 	ldrge	r2, [fp, -r4, lsl #16]
    2978:	05000000 	streq	r0, [r0, #-0]
    297c:	00000911 	andeq	r0, r0, r1, lsl r9
    2980:	bf000b04 	svclt	0x00000b04
    2984:	06000000 	streq	r0, [r0], -r0
    2988:	00000a12 	andeq	r0, r0, r2, lsl sl
    298c:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    2990:	07000100 	streq	r0, [r0, -r0, lsl #2]
    2994:	09130304 	ldmdbeq	r3, {r2, r8, r9}
    2998:	63040000 	movwvs	r0, #16384	; 0x4000
    299c:	00009b18 	andeq	r9, r0, r8, lsl fp
    29a0:	07d40300 	ldrbeq	r0, [r4, r0, lsl #6]
    29a4:	26050000 	strcs	r0, [r5], -r0
    29a8:	00004d12 	andeq	r4, r0, r2, lsl sp
    29ac:	24ae0300 	strtcs	r0, [lr], #768	; 0x300
    29b0:	27050000 	strcs	r0, [r5, -r0]
    29b4:	00006012 	andeq	r6, r0, r2, lsl r0
    29b8:	00d90800 	sbcseq	r0, r9, r0, lsl #16
    29bc:	d9090000 	stmdble	r9, {}	; <UNPREDICTABLE>
    29c0:	03000000 	movweq	r0, #0
    29c4:	00000f9b 	muleq	r0, fp, pc	; <UNPREDICTABLE>
    29c8:	33122805 	tstcc	r2, #327680	; 0x50000
    29cc:	03000000 	movweq	r0, #0
    29d0:	000019c7 	andeq	r1, r0, r7, asr #19
strand (__outserial, const char*)
    29d4:	4d122b05 	vldrmi	d2, [r2, #-20]	; 0xffffffec
    29d8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    29dc:	000000fb 	strdeq	r0, [r0], -fp
    29e0:	0024ff03 	eoreq	pc, r4, r3, lsl #30
endstrand
    29e4:	122c0500 	eorne	r0, ip, #0, 10
    29e8:	00000073 	andeq	r0, r0, r3, ror r0
	ptr = data;
    29ec:	00010c08 	andeq	r0, r1, r8, lsl #24
    29f0:	05380300 	ldreq	r0, [r8, #-768]!	; 0xfffffd00
	if (*ptr)
    29f4:	2d050000 	stccs	0, cr0, [r5, #-0]
		len = strlen (ptr);
    29f8:	00007312 	andeq	r7, r0, r2, lsl r3
    29fc:	09210300 	stmdbeq	r1!, {r8, r9}
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    2a00:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    2a04:	00013510 	andeq	r3, r1, r0, lsl r5
    2a08:	d9040a00 	stmdble	r4, {r9, fp}
    2a0c:	0b000000 	bleq	2a14 <__outserial+0x40>
    2a10:	09320508 	ldmdbeq	r2!, {r3, r8, sl}
	len -= quant;
    2a14:	000001c9 	andeq	r0, r0, r9, asr #3
    2a18:	00003e0c 	andeq	r3, r0, ip, lsl #28
    2a1c:	07340500 	ldreq	r0, [r4, -r0, lsl #10]!
	if (len == 0) {
    2a20:	000000fb 	strdeq	r0, [r0], -fp
		ufree (data);
    2a24:	00070101 	andeq	r0, r7, r1, lsl #2
		finish;
    2a28:	00053e0c 	andeq	r3, r5, ip, lsl #28
    2a2c:	03350500 	teqeq	r5, #0, 10
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    2a30:	000000fb 	strdeq	r0, [r0], -fp
    2a34:	00060101 	andeq	r0, r6, r1, lsl #2
    2a38:	00026f0c 	andeq	r6, r2, ip, lsl #30
    2a3c:	03360500 	teqeq	r6, #0, 10
    2a40:	000000fb 	strdeq	r0, [r0], -fp
strand (__inserial, address)
    2a44:	00050101 	andeq	r0, r5, r1, lsl #2
    2a48:	0005780c 	andeq	r7, r5, ip, lsl #16
    2a4c:	03370500 	teqeq	r7, #0, 10
    2a50:	000000fb 	strdeq	r0, [r0], -fp
    2a54:	00040101 	andeq	r0, r4, r1, lsl #2
	if (__inpline != NULL)
    2a58:	0008650c 	andeq	r6, r8, ip, lsl #10
    2a5c:	03380500 	teqeq	r8, #0, 10
		finish;
    2a60:	000000fb 	strdeq	r0, [r0], -fp
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    2a64:	00000401 	andeq	r0, r0, r1, lsl #8
    2a68:	0005450d 	andeq	r4, r5, sp, lsl #10
    2a6c:	073a0500 	ldreq	r0, [sl, -r0, lsl #10]!
    2a70:	000000fb 	strdeq	r0, [r0], -fp
		umwait (IM_INIT);
    2a74:	075e0d01 	ldrbeq	r0, [lr, -r1, lsl #26]
		release;
    2a78:	3c050000 	stccc	0, cr0, [r5], {-0}
	savedata (data);
    2a7c:	0000fb03 	andeq	pc, r0, r3, lsl #22
	len = MAX_LINE_LENGTH;
    2a80:	520d0200 	andpl	r0, sp, #0, 4
	io (IM_READ, __cport, READ, ptr, 1);
    2a84:	0500000b 	streq	r0, [r0, #-11]
    2a88:	00fb033d 	rscseq	r0, fp, sp, lsr r3
    2a8c:	0d030000 	stceq	0, cr0, [r3, #-0]
    2a90:	00000793 	muleq	r0, r3, r7
	if (ptr == (char*) data) { // new line
    2a94:	0c083f05 	stceq	15, cr3, [r8], {5}
    2a98:	04000001 	streq	r0, [r0], #-1
		if (*ptr == '\0') { // bin cmd
    2a9c:	02c10300 	sbceq	r0, r1, #0, 6
			proceed (IM_BIN);
    2aa0:	41050000 	mrsmi	r0, (UNDEF: 5)
    2aa4:	00013b03 	andeq	r3, r1, r3, lsl #22
		if (*ptr < 0x20)
    2aa8:	01c90900 	biceq	r0, r9, r0, lsl #18
    2aac:	7f0e0000 	svcvc	0x000e0000
			proceed (IM_READ);
    2ab0:	05000005 	streq	r0, [r0, #-5]
    2ab4:	01d51a43 	bicseq	r1, r5, r3, asr #20
	if (*ptr == '\n' || *ptr == '\r') {
    2ab8:	01010000 	mrseq	r0, (UNDEF: 1)
    2abc:	0001b10e 	andeq	fp, r1, lr, lsl #2
    2ac0:	0e450500 	cdpeq	5, 4, cr0, cr5, cr0, {0}
		*ptr = '\0';
    2ac4:	000001f6 	strdeq	r0, [r0], -r6
		__inpline = (char*)data;
    2ac8:	040a0101 	streq	r0, [sl], #-257	; 0xfffffeff
		finish;
    2acc:	000001fc 	strdeq	r0, [r0], -ip
	if (len) {
    2ad0:	91080102 	tstls	r8, r2, lsl #2
		ptr++;
    2ad4:	08000009 	stmdaeq	r0, {r0, r3}
    2ad8:	000001fc 	strdeq	r0, [r0], -ip
		len--;
    2adc:	0002ca0e 	andeq	ip, r2, lr, lsl #20
	proceed (IM_READ);
    2ae0:	1e450500 	cdpne	5, 4, cr0, cr5, cr0, {0}
	io (IM_BIN, __cport, READ, ptr, 1);
    2ae4:	000001f6 	strdeq	r0, [r0], -r6
    2ae8:	080b0101 	stmdaeq	fp, {r0, r8}
    2aec:	47098f06 	strmi	r8, [r9, -r6, lsl #30]
    2af0:	0d000002 	stceq	0, cr0, [r0, #-8]
    2af4:	0000064f 	andeq	r0, r0, pc, asr #12
	len -= 2;
    2af8:	730b9006 	movwvc	r9, #45062	; 0xb006
	if (len > *ptr + 1) // 1 for 0x04
    2afc:	00000000 	andeq	r0, r0, r0
    2b00:	000c840d 	andeq	r8, ip, sp, lsl #8
		len = *ptr + 1;
    2b04:	08910600 	ldmeq	r1, {r9, sl}
    2b08:	000000d9 	ldrdeq	r0, [r0], -r9
	ptr++;
    2b0c:	01f40d04 	mvnseq	r0, r4, lsl #26
	quant = io (IM_BINL, __cport, READ, ptr, len);
    2b10:	92060000 	andls	r0, r6, #0
    2b14:	00010710 	andeq	r0, r1, r0, lsl r7
    2b18:	03000600 	movweq	r0, #1536	; 0x600
    2b1c:	00000a0b 	andeq	r0, r0, fp, lsl #20
    2b20:	16039306 	strne	r9, [r3], -r6, lsl #6
    2b24:	0f000002 	svceq	0x00000002
	len -= quant;
    2b28:	00000247 	andeq	r0, r0, r7, asr #4
		__inpline = (char*)data;
    2b2c:	0000025e 	andeq	r0, r0, lr, asr r2
		finish;
    2b30:	b40e0010 	strlt	r0, [lr], #-16
	ptr += quant;
    2b34:	06000007 	streq	r0, [r0], -r7
    2b38:	02530f99 	subseq	r0, r3, #612	; 0x264
endstrand
    2b3c:	01010000 	mrseq	r0, (UNDEF: 1)
    2b40:	9107010b 	tstls	r7, fp, lsl #2
	proceed (IM_BINL);
    2b44:	00029609 	andeq	r9, r2, r9, lsl #12
endstrand
    2b48:	079a0c00 	ldreq	r0, [sl, r0, lsl #24]
    2b4c:	93070000 	movwls	r0, #28672	; 0x7000
    2b50:	0000fb07 	andeq	pc, r0, r7, lsl #22
    2b54:	01070100 	mrseq	r0, (UNDEF: 23)
    2b58:	04b40c00 	ldrteq	r0, [r4], #3072	; 0xc00
    2b5c:	94070000 	strls	r0, [r7], #-0
		if (res && (d < n))
    2b60:	0000fb03 	andeq	pc, r0, r3, lsl #22
    2b64:	00010100 	andeq	r0, r1, r0, lsl #2
    2b68:	71030000 	mrsvc	r0, (UNDEF: 3)
    2b6c:	07000008 	streq	r0, [r0, -r8]
			res [d] = (char) c;
    2b70:	026c0396 	rsbeq	r0, ip, #1476395010	; 0x58000002
		d++;
    2b74:	96080000 	strls	r0, [r8], -r0
    2b78:	0f000002 	svceq	0x00000002
    2b7c:	000002a2 	andeq	r0, r0, r2, lsr #5
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2b80:	000002b2 			; <UNDEFINED> instruction: 0x000002b2
    2b84:	a7080010 	smladge	r8, r0, r0, r0
    2b88:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
				enci (10000);
    2b8c:	00000383 	andeq	r0, r0, r3, lsl #7
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2b90:	b2179c07 	andslt	r9, r7, #1792	; 0x700
    2b94:	01000002 	tsteq	r0, r2
	d = 0;
    2b98:	00e50f01 	rsceq	r0, r5, r1, lsl #30
		c = *fm++;
    2b9c:	02d00000 	sbcseq	r0, r0, #0
		if (c == '\\') {
    2ba0:	00100000 	andseq	r0, r0, r0
			if ((c = *fm++) == '\0') {
    2ba4:	0002c508 	andeq	ip, r2, r8, lsl #10
    2ba8:	04f80e00 	ldrbteq	r0, [r8], #3584	; 0xe00
				outc ('\\');
    2bac:	06080000 	streq	r0, [r8], -r0
			if ((c = *fm++) == '\0') {
    2bb0:	0002d013 	andeq	sp, r2, r3, lsl r0
				outc ('\\');
    2bb4:	0e010100 	adfeqs	f0, f1, f0
    2bb8:	00000740 	andeq	r0, r0, r0, asr #14
			outc (c);
    2bbc:	0c0ec306 	stceq	3, cr12, [lr], {6}
    2bc0:	01000001 	tsteq	r0, r1
			if (c == '\0')
    2bc4:	09aa1101 	stmibeq	sl!, {r0, r8, ip}
    2bc8:	6e090000 	cdpvs	0, 0, cr0, cr9, cr0, {0}
			outc (c);
    2bcc:	02fe1001 	rscseq	r1, lr, #1
				outc (val);
    2bd0:	040a0000 	streq	r0, [sl], #-0
				val = (word) va_arg (ap, aword);
    2bd4:	00000304 	andeq	r0, r0, r4, lsl #6
		if (c == '%') {
    2bd8:	03100112 	tsteq	r0, #-2147483644	; 0x80000004
    2bdc:	d9130000 	ldmdble	r3, {}	; <UNPREDICTABLE>
			c = *fm++;
    2be0:	00000000 	andeq	r0, r0, r0
			switch (c) {
    2be4:	0002030f 	andeq	r0, r2, pc, lsl #6
    2be8:	00031b00 	andeq	r1, r3, r0, lsl #22
    2bec:	08001000 	stmdaeq	r0, {ip}
    2bf0:	00000310 	andeq	r0, r0, r0, lsl r3
    2bf4:	00080814 	andeq	r0, r8, r4, lsl r8
    2bf8:	017f0900 	cmneq	pc, r0, lsl #18
    2bfc:	00031b16 	andeq	r1, r3, r6, lsl fp
    2c00:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
				outc ('%');
    2c04:	00000366 	andeq	r0, r0, r6, ror #6
    2c08:	14018209 	strne	r8, [r1], #-521	; 0xfffffdf7
				outc (c);
    2c0c:	00000118 	andeq	r0, r0, r8, lsl r1
    2c10:	43140101 	tstmi	r4, #1073741824	; 0x40000000
    2c14:	09000003 	stmdbeq	r0, {r0, r1}
				if (c == '\0')
    2c18:	0c0e02d8 	sfmeq	f0, 4, [lr], {216}	; 0xd8
				return d;
    2c1c:	01000001 	tsteq	r0, r1
}
    2c20:	09081501 	stmdbeq	r8, {r0, r8, sl, ip}
    2c24:	74090303 	strvc	r0, [r9], #-771	; 0xfffffcfd
			switch (c) {
    2c28:	16000003 	strne	r0, [r0], -r3
    2c2c:	00003832 	andeq	r3, r0, r2, lsr r8
    2c30:	07030709 	streq	r0, [r3, -r9, lsl #14]
				for (i = 12; ; i -= 4) {
    2c34:	000000d9 	ldrdeq	r0, [r0], -r9
				val = (word) va_arg (ap, aword);
    2c38:	0bdc1600 	bleq	ff708440 <_estack+0xdf703440>
						[ (val >> i) & 0xf ]);
    2c3c:	08090000 	stmdaeq	r9, {}	; <UNPREDICTABLE>
    2c40:	011d0803 	tsteq	sp, r3, lsl #16
    2c44:	00040000 	andeq	r0, r4, r0
					outc (__pi_hex_enc_table
    2c48:	0003fb11 	andeq	pc, r3, r1, lsl fp	; <UNPREDICTABLE>
    2c4c:	03090900 	movweq	r0, #39168	; 0x9900
					if (i == 0)
    2c50:	00034d03 	andeq	r4, r3, r3, lsl #26
    2c54:	00331700 	eorseq	r1, r3, r0, lsl #14
				for (i = 12; ; i -= 4) {
    2c58:	09300000 	ldmdbeq	r0!, {}	; <UNPREDICTABLE>
				val = (word) va_arg (ap, aword);
    2c5c:	e408030b 	str	r0, [r8], #-779	; 0xfffffcf5
				if (c == 'd' && (val & 0x8000) != 0) {
    2c60:	16000003 	strne	r0, [r0], -r3
				val = (word) va_arg (ap, aword);
    2c64:	00001add 	ldrdeq	r1, [r0], -sp
				if (c == 'd' && (val & 0x8000) != 0) {
    2c68:	08031409 	stmdaeq	r3, {r0, r3, sl, ip}
    2c6c:	000000d9 	ldrdeq	r0, [r0], -r9
					outc ('-');
    2c70:	09541600 	ldmdbeq	r4, {r9, sl, ip}^
    2c74:	15090000 	strne	r0, [r9, #-0]
					val = (~val) + 1;
    2c78:	00d90803 	sbcseq	r0, r9, r3, lsl #16
    2c7c:	16020000 	strne	r0, [r2], -r0
				for (i = 12; ; i -= 4) {
    2c80:	000049a2 	andeq	r4, r0, r2, lsr #19
				enci (10000);
    2c84:	0b031609 	bleq	c84b0 <__ccfg+0xa8508>
    2c88:	000002f1 	strdeq	r0, [r0], -r1
    2c8c:	44051604 	strmi	r1, [r5], #-1540	; 0xfffff9fc
    2c90:	17090000 	strne	r0, [r9, -r0]
    2c94:	011d0903 	tsteq	sp, r3, lsl #18
    2c98:	16080000 	strne	r0, [r8], -r0
    2c9c:	00000007 	andeq	r0, r0, r7
    2ca0:	0f031809 	svceq	0x00031809
    2ca4:	000003e4 	andeq	r0, r0, r4, ror #7
    2ca8:	07c7160c 	strbeq	r1, [r7, ip, lsl #12]
    2cac:	19090000 	stmdbne	r9, {}	; <UNPREDICTABLE>
    2cb0:	03f41503 	mvnseq	r1, #12582912	; 0xc00000
    2cb4:	002c0000 	eoreq	r0, ip, r0
    2cb8:	0003740f 	andeq	r7, r3, pc, lsl #8
    2cbc:	0003f400 	andeq	pc, r3, r0, lsl #8
    2cc0:	00941800 	addseq	r1, r4, r0, lsl #16
    2cc4:	00030000 	andeq	r0, r3, r0
    2cc8:	0381040a 	orreq	r0, r1, #167772160	; 0xa000000
				if (c == 'd' || c == 'u') {
    2ccc:	49110000 	ldmdbmi	r1, {}	; <UNPREDICTABLE>
    2cd0:	09000009 	stmdbeq	r0, {r0, r3}
					if (c == 'd' &&
    2cd4:	811b031c 	tsthi	fp, ip, lsl r3
					val = va_arg (ap, lword);
    2cd8:	14000003 	strne	r0, [r0], #-3
					fm++;
    2cdc:	00000929 	andeq	r0, r0, r9, lsr #18
					if (c == 'd' &&
    2ce0:	14031e09 	strne	r1, [r3], #-3593	; 0xfffff1f7
    2ce4:	00000416 	andeq	r0, r0, r6, lsl r4
						outc ('-');
    2ce8:	040a0101 	streq	r0, [sl], #-257	; 0xfffffeff
    2cec:	000003fa 	strdeq	r0, [r0], -sl
						val = (~val) + 1;
    2cf0:	00058b0e 	andeq	r8, r5, lr, lsl #22
				enci (10000);
    2cf4:	131d0a00 	tstne	sp, #0, 20
					enci (1000000000UL);
    2cf8:	000000d9 	ldrdeq	r0, [r0], -r9
    2cfc:	760e0101 	strvc	r0, [lr], -r1, lsl #2
    2d00:	0a000002 	beq	2d10 <__pi_vfparse+0x190>
    2d04:	00ea1a1e 	rsceq	r1, sl, lr, lsl sl
    2d08:	01010000 	mrseq	r0, (UNDEF: 1)
    2d0c:	0009960e 	andeq	r9, r9, lr, lsl #12
    2d10:	241e0a00 	ldrcs	r0, [lr], #-2560	; 0xfffff600
    2d14:	000000ea 	andeq	r0, r0, sl, ror #1
    2d18:	b20e0101 	andlt	r0, lr, #1073741824	; 0x40000000
    2d1c:	0a000009 	beq	2d48 <__pi_vfparse+0x1c8>
    2d20:	04161422 	ldreq	r1, [r6], #-1058	; 0xfffffbde
    2d24:	01010000 	mrseq	r0, (UNDEF: 1)
    2d28:	0010a903 	andseq	sl, r0, r3, lsl #18
    2d2c:	0f440a00 	svceq	0x00440a00
    2d30:	00000460 	andeq	r0, r0, r0, ror #8
    2d34:	0466040a 	strbteq	r0, [r6], #-1034	; 0xfffffbf6
    2d38:	01190000 	tsteq	r9, r0
				} else if (c == 'x') {
    2d3c:	0000008d 	andeq	r0, r0, sp, lsl #1
					for (i = 28; ; i -= 4) {
    2d40:	00000480 	andeq	r0, r0, r0, lsl #9
					val = va_arg (ap, lword);
    2d44:	00008d13 	andeq	r8, r0, r3, lsl sp
							[ (val >> i) & 0xf ]);
    2d48:	01f61300 	mvnseq	r1, r0, lsl #6
    2d4c:	8d130000 	ldchi	0, cr0, [r3, #-0]
						outc (__pi_hex_enc_table
    2d50:	00000000 	andeq	r0, r0, r0
    2d54:	00033e1a 	andeq	r3, r3, sl, lsl lr
    2d58:	070c0100 	streq	r0, [ip, -r0, lsl #2]
						if (i == 0)
    2d5c:	0b740305 	bleq	1d03978 <__ccfg+0x1ce39d0>
    2d60:	5a1b2000 	bpl	6cad68 <__ccfg+0x6aadc0>
					for (i = 28; ; i -= 4) {
    2d64:	01000012 	tsteq	r0, r2, lsl r0
					outc ('%');
    2d68:	010c0710 	tsteq	ip, r0, lsl r7
    2d6c:	05010000 	streq	r0, [r1, #-0]
    2d70:	00000403 	andeq	r0, r0, r3, lsl #8
					outc ('l');
    2d74:	04461a20 	strbeq	r1, [r6], #-2592	; 0xfffff5e0
    2d78:	1a010000 	bne	42d80 <__ccfg+0x22dd8>
				val = (word) va_arg (ap, aword);
    2d7c:	5003050d 	andpl	r0, r3, sp, lsl #10
				outc (val);
    2d80:	0f200005 	svceq	0x00200005
    2d84:	00000454 	andeq	r0, r0, r4, asr r4
				while (*st != '\0') {
    2d88:	000004bf 			; <UNDEFINED> instruction: 0x000004bf
    2d8c:	00009418 	andeq	r9, r0, r8, lsl r4
    2d90:	1c000000 	stcne	0, cr0, [r0], {-0}
    2d94:	000010e1 	andeq	r1, r0, r1, ror #1
					outc (*st);
    2d98:	af141e01 	svcge	0x00141e01
    2d9c:	05000004 	streq	r0, [r0, #-4]
					st++;
    2da0:	00055403 	andeq	r5, r5, r3, lsl #8
		c = *fm++;
    2da4:	01da1a20 	bicseq	r1, sl, r0, lsr #20
    2da8:	22010000 	andcs	r0, r1, #0
    2dac:	7c030513 	cfstr32vc	mvfx0, [r3], {19}
char *vform (char *res, const char *fm, va_list aq) {
    2db0:	1a20000b 	bne	802de4 <__ccfg+0x7e2e3c>
    2db4:	00000407 	andeq	r0, r0, r7, lsl #8
	if (res != NULL) {
    2db8:	050d2701 	streq	r2, [sp, #-1793]	; 0xfffff8ff
		__pi_vfparse (res, MAX_WORD, fm, aq);
    2dbc:	000b9803 	andeq	r9, fp, r3, lsl #16
    2dc0:	041c1a20 	ldreq	r1, [ip], #-2592	; 0xfffff5e0
    2dc4:	30010000 	andcc	r0, r1, r0
}
    2dc8:	78030507 	stmdavc	r3, {r0, r1, r2, r8, sl}
    2dcc:	1a20000b 	bne	802e00 <__ccfg+0x7e2e58>
	fml = strlen (fm) + 17;
    2dd0:	0000042a 	andeq	r0, r0, sl, lsr #8
    2dd4:	050f3101 	streq	r3, [pc, #-257]	; 2cdb <__pi_vfparse+0x15b>
    2dd8:	000b7a03 	andeq	r7, fp, r3, lsl #20
	if ((res = (char*) umalloc (fml)) == NULL)
    2ddc:	04381a20 	ldrteq	r1, [r8], #-2592	; 0xfffff5e0
    2de0:	31010000 	mrscc	r0, (UNDEF: 1)
    2de4:	84030519 	strhi	r0, [r3], #-1305	; 0xfffffae7
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    2de8:	0f20000b 	svceq	0x0020000b
    2dec:	00000129 	andeq	r0, r0, r9, lsr #2
    2df0:	00000527 	andeq	r0, r0, r7, lsr #10
    2df4:	00009418 	andeq	r9, r0, r8, lsl r4
		ufree (res);
    2df8:	1b000300 	blne	3a00 <NOROM_SetupGetTrimForAmpcompCtrl+0x4c>
		goto Again;
    2dfc:	00000f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
	if (buf == NULL || fmt == NULL)
    2e00:	170a3601 	strne	r3, [sl, -r1, lsl #12]
int vscan (const char *buf, const char *fmt, va_list ap) {
    2e04:	01000005 	tsteq	r0, r5
	if (buf == NULL || fmt == NULL)
    2e08:	0b880305 	bleq	fe203a24 <_estack+0xde1fea24>
    2e0c:	201a2000 	andscs	r2, sl, r0
    2e10:	01000003 	tsteq	r0, r3
		    	    case 'u': scanu (lword); break;
    2e14:	03050c3f 	movweq	r0, #23615	; 0x5c3f
			while (isspace (*buf)) buf++;
    2e18:	00004605 	andeq	r4, r0, r5, lsl #12
    2e1c:	00032f1a 	andeq	r2, r3, sl, lsl pc
	while (*fmt != '\0') {
    2e20:	0d450100 	stfeqe	f0, [r5, #-0]
		if (*fmt++ != '%')
    2e24:	00000305 	andeq	r0, r0, r5, lsl #6
		switch (*fmt++) {
    2e28:	020b0000 	andeq	r0, fp, #0
    2e2c:	7a094901 	bvc	255238 <__ccfg+0x235290>
    2e30:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
    2e34:	000010d5 	ldrdeq	r1, [r0], -r5
    2e38:	fb074a01 	blx	1d5646 <__ccfg+0x1b569e>
    2e3c:	00000000 	andeq	r0, r0, r0
    2e40:	0012990d 	andseq	r9, r2, sp, lsl #18
}
    2e44:	074b0100 	strbeq	r0, [fp, -r0, lsl #2]
		switch (*fmt++) {
    2e48:	000000fb 	strdeq	r0, [r0], -fp
    2e4c:	d4030001 	strle	r0, [r3], #-1
    2e50:	01000011 	tsteq	r0, r1, lsl r0
    2e54:	0556034c 	ldrbeq	r0, [r6, #-844]	; 0xfffffcb4
			while (isspace (*buf)) buf++;
    2e58:	7a0f0000 	bvc	3c2e60 <__ccfg+0x3a2eb8>
    2e5c:	96000005 	strls	r0, [r0], -r5
    2e60:	18000005 	stmdane	r0, {r0, r2}
    2e64:	00000094 	muleq	r0, r4, r0
    2e68:	fa1c0000 	blx	702e70 <__ccfg+0x6e2ec8>
    2e6c:	01000011 	tsteq	r0, r1, lsl r0
			if (*buf == '\0')
    2e70:	0586114e 	streq	r1, [r6, #334]	; 0x14e
			if (*buf != ',') {
    2e74:	03050000 	movweq	r0, #20480	; 0x5000
			sap = va_arg (ap, char*);
    2e78:	2000055c 	andcs	r0, r0, ip, asr r5
			nc++;
    2e7c:	0005b80f 	andeq	fp, r5, pc, lsl #16
			if (*buf != ',') {
    2e80:	0005b800 	andeq	fp, r5, r0, lsl #16
				while (!isspace (*buf) && *buf != ',' &&
    2e84:	00941800 	addseq	r1, r4, r0, lsl #16
    2e88:	00000000 	andeq	r0, r0, r0
    2e8c:	011d040a 	tsteq	sp, sl, lsl #8
    2e90:	f61d0000 			; <UNDEFINED> instruction: 0xf61d0000
    2e94:	01000010 	tsteq	r0, r0, lsl r0
    2e98:	a80f02bd 	stmdage	pc, {r0, r2, r3, r4, r5, r7, r9}	; <UNPREDICTABLE>
    2e9c:	05000005 	streq	r0, [r0, #-5]
			while (isspace (*buf)) buf++;
    2ea0:	00056403 	andeq	r6, r5, r3, lsl #8
    2ea4:	011d0f20 	tsteq	sp, r0, lsr #30
    2ea8:	05e10000 	strbeq	r0, [r1, #0]!
    2eac:	94180000 	ldrls	r0, [r8], #-0
    2eb0:	00000000 	andeq	r0, r0, r0
			if (*buf == ',') buf++;
    2eb4:	118f1d00 	orrne	r1, pc, r0, lsl #26
    2eb8:	c2010000 	andgt	r0, r1, #0
			*sap = '\0';
    2ebc:	05d10e02 	ldrbeq	r0, [r1, #3586]	; 0xe02
			break;
    2ec0:	03050000 	movweq	r0, #20480	; 0x5000
		    case 'd': scani (word); break;
    2ec4:	20000560 	andcs	r0, r0, r0, ror #10
    2ec8:	0011dd1d 	andseq	sp, r1, sp, lsl sp
    2ecc:	02c20100 	sbceq	r0, r2, #0, 2
    2ed0:	0005d126 	andeq	sp, r5, r6, lsr #2
    2ed4:	58030500 	stmdapl	r3, {r8, sl}
    2ed8:	1e200005 	cdpne	0, 2, cr0, cr0, cr5, {0}
    2edc:	00122601 	andseq	r2, r2, r1, lsl #12
    2ee0:	052f0100 	streq	r0, [pc, #-256]!	; 2de8 <vform+0x38>
    2ee4:	010c0107 	tsteq	ip, r7, lsl #2
    2ee8:	17a80000 	strne	r0, [r8, r0]!
    2eec:	17cc0000 	strbne	r0, [ip, r0]
    2ef0:	9c010000 	stcls	0, cr0, [r1], {-0}
    2ef4:	11c3011f 	bicne	r0, r3, pc, lsl r1
    2ef8:	82010000 	andhi	r0, r1, #0
    2efc:	6c010604 	stcvs	6, cr0, [r1], {4}
    2f00:	a8000016 	stmdage	r0, {r1, r2, r4}
    2f04:	01000017 	tsteq	r0, r7, lsl r0
    2f08:	00070e9c 	muleq	r7, ip, lr
    2f0c:	11f52000 	mvnsne	r2, r0
    2f10:	82010000 	andhi	r0, r1, #0
    2f14:	070e1804 	streq	r1, [lr, -r4, lsl #16]
    2f18:	065b0000 	ldrbeq	r0, [fp], -r0
    2f1c:	22210000 	eorcs	r0, r1, #0
    2f20:	006c6176 	rsbeq	r6, ip, r6, ror r1
    2f24:	08048701 	stmdaeq	r4, {r0, r8, r9, sl, pc}
    2f28:	0000010c 	andeq	r0, r0, ip, lsl #2
    2f2c:	0000069b 	muleq	r0, fp, r6
    2f30:	00706123 	rsbseq	r6, r0, r3, lsr #2
		    case 'u': scanu (word); break;
    2f34:	0a048801 	beq	124f40 <__ccfg+0x104f98>
    2f38:	000000c1 	andeq	r0, r0, r1, asr #1
    2f3c:	224c9102 	subcs	r9, ip, #-2147483648	; 0x80000000
    2f40:	01006362 	tsteq	r0, r2, ror #6
    2f44:	ef070489 	svc	0x00070489
    2f48:	da000000 	ble	2f50 <vscan+0x150>
    2f4c:	22000006 	andcs	r0, r0, #6
    2f50:	8a010076 	bhi	43130 <__ccfg+0x23188>
    2f54:	00d90704 	sbcseq	r0, r9, r4, lsl #14
    2f58:	070e0000 	streq	r0, [lr, -r0]
    2f5c:	69240000 	stmdbvs	r4!, {}	; <UNPREDICTABLE>
    2f60:	8b010073 	blhi	43134 <__ccfg+0x2318c>
    2f64:	00fb0704 	rscseq	r0, fp, r4, lsl #14
    2f68:	a9250000 	stmdbge	r5!, {}	; <UNPREDICTABLE>
    2f6c:	01000012 	tsteq	r0, r2, lsl r0
    2f70:	380104b0 	stmdacc	r1, {r4, r5, r7, sl}
    2f74:	26000017 			; <UNDEFINED> instruction: 0x26000017
    2f78:	000016f8 	strdeq	r1, [r0], -r8
		    case 'x': scanx (word); break;
    2f7c:	00001714 	andeq	r1, r0, r4, lsl r7
    2f80:	000006c0 	andeq	r0, r0, r0, asr #13
    2f84:	01006922 	tsteq	r0, r2, lsr #18
    2f88:	ef0a049f 	svc	0x000a049f
    2f8c:	37000000 	strcc	r0, [r0, -r0]
    2f90:	00000007 	andeq	r0, r0, r7
    2f94:	00063027 	andeq	r3, r6, r7, lsr #32
    2f98:	0006d900 	andeq	sp, r6, r0, lsl #18
    2f9c:	00642200 	rsbeq	r2, r4, r0, lsl #4
    2fa0:	0b04a901 	bleq	12d3ac <__ccfg+0x10d404>
    2fa4:	0000010c 	andeq	r0, r0, ip, lsl #2
    2fa8:	0000074a 	andeq	r0, r0, sl, asr #14
    2fac:	17842600 	strne	r2, [r4, r0, lsl #12]
    2fb0:	17920000 	ldrne	r0, [r2, r0]
    2fb4:	06f60000 	ldrbteq	r0, [r6], r0
    2fb8:	73220000 			; <UNDEFINED> instruction: 0x73220000
    2fbc:	04c60100 	strbeq	r0, [r6], #256	; 0x100
    2fc0:	0001f60b 	andeq	pc, r1, fp, lsl #12
    2fc4:	00077300 	andeq	r7, r7, r0, lsl #6
    2fc8:	c1280000 			; <UNDEFINED> instruction: 0xc1280000
    2fcc:	9a000010 	bls	3014 <vscan+0x214>
    2fd0:	60000016 	andvs	r0, r0, r6, lsl r0
    2fd4:	01000006 	tsteq	r0, r6
    2fd8:	290204d9 	stmdbcs	r2, {r0, r3, r4, r6, r7, sl}
    2fdc:	000010d4 	ldrdeq	r1, [r0], -r4
    2fe0:	040a0000 	streq	r0, [sl], #-0
    2fe4:	00000203 	andeq	r0, r0, r3, lsl #4
    2fe8:	00127e2a 	andseq	r7, r2, sl, lsr #28
    2fec:	04470100 	strbeq	r0, [r7], #-256	; 0xffffff00
    2ff0:	116c010d 	cmnne	ip, sp, lsl #2
			switch (*fmt++) {
    2ff4:	11840000 	orrne	r0, r4, r0
    2ff8:	9c010000 	stcls	0, cr0, [r1], {-0}
    2ffc:	00000753 	andeq	r0, r0, r3, asr r7
    3000:	0100632b 	tsteq	r0, fp, lsr #6
    3004:	d9190447 	ldmdble	r9, {r0, r1, r2, r6, sl}
    3008:	86000000 	strhi	r0, [r0], -r0
		    	    case 'd': scani (lword); break;
    300c:	28000007 	stmdacs	r0, {r0, r1, r2}
    3010:	000010c1 	andeq	r1, r0, r1, asr #1
    3014:	0000116c 	andeq	r1, r0, ip, ror #2
    3018:	000005d8 	ldrdeq	r0, [r0], -r8
    301c:	02044901 	andeq	r4, r4, #16384	; 0x4000
    3020:	0010d429 	andseq	sp, r0, r9, lsr #8
    3024:	2c000000 	stccs	0, cr0, [r0], {-0}
    3028:	00117401 	andseq	r7, r1, r1, lsl #8
    302c:	04280100 	strteq	r0, [r8], #-256	; 0xffffff00
    3030:	00d90106 	sbcseq	r0, r9, r6, lsl #2
	...
    303c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3040:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
    3044:	00636e2b 	rsbeq	r6, r3, fp, lsr #28
    3048:	1c042801 	stcne	8, cr2, [r4], {1}
    304c:	00000129 	andeq	r0, r0, r9, lsr #2
    3050:	00000799 	muleq	r0, r9, r7
    3054:	0012462d 	andseq	r4, r2, sp, lsr #12
    3058:	04310100 	ldrteq	r0, [r1], #-256	; 0xffffff00
    305c:	0005b809 	andeq	fp, r5, r9, lsl #16
    3060:	0007b700 	andeq	fp, r7, r0, lsl #14
    3064:	616d2200 	cmnvs	sp, r0, lsl #4
		    	    case 'x': scanx (lword); break;
    3068:	32010078 	andcc	r0, r1, #120	; 0x78
    306c:	011d0804 	tsteq	sp, r4, lsl #16
    3070:	07d50000 	ldrbeq	r0, [r5, r0]
    3074:	8a2d0000 	bhi	b4307c <__ccfg+0xb230d4>
    3078:	01000011 	tsteq	r0, r1, lsl r0
    307c:	1d0d0432 	cfstrsne	mvf0, [sp, #-200]	; 0xffffff38
    3080:	f3000001 	vhadd.u8	d0, d0, d1
    3084:	00000007 	andeq	r0, r0, r7
    3088:	1233012c 	eorsne	r0, r3, #44, 2
    308c:	15010000 	strne	r0, [r1, #-0]
    3090:	d9010604 	stmdble	r1, {r2, r9, sl}
	...
    309c:	01000000 	mrseq	r0, (UNDEF: 0)
    30a0:	0007e39c 	muleq	r7, ip, r3
    30a4:	696d2b00 	stmdbvs	sp!, {r8, r9, fp, sp}^
    30a8:	1501006e 	strne	r0, [r1, #-110]	; 0xffffff92
    30ac:	01291c04 			; <UNDEFINED> instruction: 0x01291c04
    30b0:	081c0000 	ldmdaeq	ip, {}	; <UNPREDICTABLE>
    30b4:	1f000000 	svcne	0x00000000
    30b8:	00121901 	andseq	r1, r2, r1, lsl #18
    30bc:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
    30c0:	16540106 	ldrbne	r0, [r4], -r6, lsl #2
    30c4:	166c0000 	strbtne	r0, [ip], -r0
    30c8:	9c010000 	stcls	0, cr0, [r1], {-0}
    30cc:	0000080e 	andeq	r0, r0, lr, lsl #16
    30d0:	00007720 	andeq	r7, r0, r0, lsr #14
    30d4:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
		    	    case 'd': scani (lword); break;
    30d8:	0000d919 	andeq	sp, r0, r9, lsl r9
    30dc:	00082f00 	andeq	r2, r8, r0, lsl #30
    30e0:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
    30e4:	000010c8 	andeq	r1, r0, r8, asr #1
    30e8:	0803a301 	stmdaeq	r3, {r0, r8, r9, sp, pc}
    30ec:	0005b801 	andeq	fp, r5, r1, lsl #16
    30f0:	00157800 	andseq	r7, r5, r0, lsl #16
		    	    case 'u': scanu (lword); break;
    30f4:	00162000 	andseq	r2, r6, r0
    30f8:	809c0100 	addshi	r0, ip, r0, lsl #2
    30fc:	20000008 	andcs	r0, r0, r8
    3100:	000019a6 	andeq	r1, r0, r6, lsr #19
    3104:	1a03a301 	bne	ebd10 <__ccfg+0xcbd68>
    3108:	000000d9 	ldrdeq	r0, [r0], -r9
    310c:	00000842 	andeq	r0, r0, r2, asr #16
    3110:	0012462d 	andseq	r4, r2, sp, lsr #12
    3114:	03ab0100 			; <UNDEFINED> instruction: 0x03ab0100
    3118:	0005b809 	andeq	fp, r5, r9, lsl #16
    311c:	00085500 	andeq	r5, r8, r0, lsl #10
    3120:	63632200 	cmnvs	r3, #0, 4
    3124:	03ab0100 			; <UNDEFINED> instruction: 0x03ab0100
    3128:	0005b811 	andeq	fp, r5, r1, lsl r8
    312c:	00088900 	andeq	r8, r8, r0, lsl #18
    3130:	11e42d00 	mvnne	r2, r0, lsl #26
    3134:	ab010000 	blge	4313c <__ccfg+0x23194>
    3138:	011d1503 	tsteq	sp, r3, lsl #10
		    	    case 'x': scanx (lword); break;
    313c:	08b20000 	ldmeq	r2!, {}	; <UNPREDICTABLE>
    3140:	a52d0000 	strge	r0, [sp, #-0]!
			if ((c = *buf++) == '\0')
    3144:	01000019 	tsteq	r0, r9, lsl r0
    3148:	1d0803af 	stcne	3, cr0, [r8, #-700]	; 0xfffffd44
			sap = va_arg (ap, char*);
    314c:	c5000001 	strgt	r0, [r0, #-1]
			nc++;
    3150:	00000008 	andeq	r0, r0, r8
			break;
    3154:	129f012e 	addsne	r0, pc, #-2147483637	; 0x8000000b
			while (isspace (*buf)) buf++;
    3158:	7c010000 	stcvc	0, cr0, [r1], {-0}
    315c:	01010603 	tsteq	r1, r3, lsl #12
    3160:	0000089d 	muleq	r0, sp, r8
						*sap++ = *buf++;
    3164:	0068632f 	rsbeq	r6, r8, pc, lsr #6
    3168:	18037c01 	stmdane	r3, {r0, sl, fp, ip, sp, lr}
			while (isspace (*buf)) buf++;
    316c:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    3170:	10db2a00 	sbcsne	r2, fp, r0, lsl #20
    3174:	4a010000 	bmi	4317c <__ccfg+0x231d4>
		return 0;
    3178:	ec010d03 	stc	13, cr0, [r1], {3}
    317c:	6c000010 	stcvs	0, cr0, [r0], {16}
		    case 'x': scanx (word); break;
    3180:	01000011 	tsteq	r0, r1, lsl r0
    3184:	0008e79c 	muleq	r8, ip, r7
		    	    case 'x': scanx (lword); break;
    3188:	68632b00 	stmdavs	r3!, {r8, r9, fp, sp}^
    318c:	034a0100 	movteq	r0, #41216	; 0xa100
    3190:	0005b81b 	andeq	fp, r5, fp, lsl r8
    3194:	0008ef00 	andeq	lr, r8, r0, lsl #30
    3198:	12462d00 	subne	r2, r6, #0, 26
    319c:	57010000 	strpl	r0, [r1, -r0]
    31a0:	05b80903 	ldreq	r0, [r8, #2307]!	; 0x903
    31a4:	090d0000 	stmdbeq	sp, {}	; <UNPREDICTABLE>
    31a8:	63220000 			; <UNDEFINED> instruction: 0x63220000
    31ac:	57010063 	strpl	r0, [r1, -r3, rrx]
    31b0:	05b81103 	ldreq	r1, [r8, #259]!	; 0x103
    31b4:	094e0000 	stmdbeq	lr, {}^	; <UNPREDICTABLE>
    31b8:	30000000 	andcc	r0, r0, r0
    31bc:	00111101 	andseq	r1, r1, r1, lsl #2
    31c0:	02f00100 	rscseq	r0, r0, #0, 2
    31c4:	00149006 	andseq	r9, r4, r6
    31c8:	0014e000 	andseq	lr, r4, r0
    31cc:	119c0100 	orrsne	r0, ip, r0, lsl #2
    31d0:	2d000009 	stccs	0, cr0, [r0, #-36]	; 0xffffffdc
    31d4:	0000119e 	muleq	r0, lr, r1
    31d8:	0802f501 	stmdaeq	r2, {r0, r8, sl, ip, sp, lr, pc}
    31dc:	0000011d 	andeq	r0, r0, sp, lsl r1
    31e0:	00000982 	andeq	r0, r0, r2, lsl #19
    31e4:	69013100 	stmdbvs	r1, {r8, ip, sp}
    31e8:	7901006f 	stmdbvc	r1, {r0, r1, r2, r3, r5, r6}
    31ec:	ef010602 	svc	0x00010602
    31f0:	f4000000 	vst4.8	{d0-d3}, [r0], r0
    31f4:	90000013 	andls	r0, r0, r3, lsl r0
    31f8:	01000014 	tsteq	r0, r4, lsl r0
    31fc:	0009949c 	muleq	r9, ip, r4
    3200:	11ea2000 	mvnne	r2, r0
    3204:	79010000 	stmdbvc	r1, {}	; <UNPREDICTABLE>
    3208:	00d90f02 	sbcseq	r0, r9, r2, lsl #30
    320c:	09a00000 	stmibeq	r0!, {}	; <UNPREDICTABLE>
    3210:	642b0000 	strtvs	r0, [fp], #-0
    3214:	01007665 	tsteq	r0, r5, ror #12
    3218:	d91b0279 	ldmdble	fp, {r0, r3, r4, r5, r6, r9}
    321c:	be000000 	cdplt	0, 0, cr0, cr0, cr0, {0}
    3220:	20000009 	andcs	r0, r0, r9
    3224:	00000d8c 	andeq	r0, r0, ip, lsl #27
    3228:	25027901 	strcs	r7, [r2, #-2305]	; 0xfffff6ff
    322c:	000000d9 	ldrdeq	r0, [r0], -r9
    3230:	000009dc 	ldrdeq	r0, [r0], -ip
    3234:	6675622b 	ldrbtvs	r6, [r5], -fp, lsr #4
    3238:	02790100 	rsbseq	r0, r9, #0, 2
    323c:	0001f636 	andeq	pc, r1, r6, lsr r6	; <UNPREDICTABLE>
    3240:	0009fa00 	andeq	pc, r9, r0, lsl #20
    3244:	656c2b00 	strbvs	r2, [ip, #-2816]!	; 0xfffff500
    3248:	7901006e 	stmdbvc	r1, {r1, r2, r3, r5, r6}
    324c:	00d94002 	sbcseq	r4, r9, r2
    3250:	0a180000 	beq	603258 <__ccfg+0x5e32b0>
    3254:	72220000 	eorvc	r0, r2, #0
    3258:	01007465 	tsteq	r0, r5, ror #8
    325c:	ef07027b 	svc	0x0007027b
    3260:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    3264:	0000000a 	andeq	r0, r0, sl
    3268:	11b1011f 			; <UNDEFINED> instruction: 0x11b1011f
    326c:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    3270:	d0010602 	andle	r0, r1, r2, lsl #12
    3274:	f4000013 	vst4.8	{d0-d3}, [r0 :64], r3
    3278:	01000013 	tsteq	r0, r3, lsl r0
    327c:	0009cf9c 	muleq	r9, ip, pc	; <UNPREDICTABLE>
    3280:	66722b00 	ldrbtvs	r2, [r2], -r0, lsl #22
    3284:	02690100 	rsbeq	r0, r9, #0, 2
    3288:	0004541e 	andeq	r5, r4, lr, lsl r4
    328c:	000a6c00 	andeq	r6, sl, r0, lsl #24
    3290:	6f6c2b00 	svcvs	0x006c2b00
    3294:	69010063 	stmdbvs	r1, {r0, r1, r5, r6}
    3298:	008d2602 	addeq	r2, sp, r2, lsl #12
    329c:	0a950000 	beq	fe5432a4 <_estack+0xde53e2a4>
    32a0:	1f000000 	svcne	0x00000000
    32a4:	0012b001 	andseq	fp, r2, r1
    32a8:	025f0100 	subseq	r0, pc, #0, 2
    32ac:	13c20106 	bicne	r0, r2, #-2147483647	; 0x80000001
    32b0:	13d00000 	bicsne	r0, r0, #0
    32b4:	9c010000 	stcls	0, cr0, [r1], {-0}
    32b8:	00000a16 	andeq	r0, r0, r6, lsl sl
    32bc:	0011f020 	andseq	pc, r1, r0, lsr #32
    32c0:	025f0100 	subseq	r0, pc, #0, 2
    32c4:	0001f619 	andeq	pc, r1, r9, lsl r6	; <UNPREDICTABLE>
    32c8:	000abe00 	andeq	fp, sl, r0, lsl #28
    32cc:	00633200 	rsbeq	r3, r3, r0, lsl #4
    32d0:	24025f01 	strcs	r5, [r2], #-3841	; 0xfffff0ff
    32d4:	000001fc 	strdeq	r0, [r0], -ip
    32d8:	6e2b5101 	sufvse	f5, f3, f1
    32dc:	025f0100 	subseq	r0, pc, #0, 2
    32e0:	00008d2b 	andeq	r8, r0, fp, lsr #26
    32e4:	000adc00 	andeq	sp, sl, r0, lsl #24
    32e8:	011f0000 	tsteq	pc, r0
    32ec:	00001272 	andeq	r1, r0, r2, ror r2
    32f0:	06025901 	streq	r5, [r2], -r1, lsl #18
    32f4:	0013ae01 	andseq	sl, r3, r1, lsl #28
    32f8:	0013c200 	andseq	ip, r3, r0, lsl #4
    32fc:	619c0100 	orrsvs	r0, ip, r0, lsl #2
    3300:	2000000a 	andcs	r0, r0, sl
    3304:	000011f0 	strdeq	r1, [r0], -r0
    3308:	19025901 	stmdbne	r2, {r0, r8, fp, ip, lr}
    330c:	000001f6 	strdeq	r0, [r0], -r6
    3310:	00000aef 	andeq	r0, r0, pc, ror #21
    3314:	6372732b 	cmnvs	r2, #-1409286144	; 0xac000000
    3318:	02590100 	subseq	r0, r9, #0, 2
    331c:	00070e2b 	andeq	r0, r7, fp, lsr #28
    3320:	000b0200 	andeq	r0, fp, r0, lsl #4
    3324:	006e2b00 	rsbeq	r2, lr, r0, lsl #22
    3328:	34025901 	strcc	r5, [r2], #-2305	; 0xfffff6ff
    332c:	0000008d 	andeq	r0, r0, sp, lsl #1
    3330:	00000b20 	andeq	r0, r0, r0, lsr #22
    3334:	e1011f00 	tst	r1, r0, lsl #30
    3338:	01000012 	tsteq	r0, r2, lsl r0
    333c:	01060254 	tsteq	r6, r4, asr r2
	...
    3348:	0aa69c01 	beq	fe9aa354 <_estack+0xde9a5354>
    334c:	642b0000 	strtvs	r0, [fp], #-0
    3350:	02540100 	subseq	r0, r4, #0, 2
    3354:	0001f61a 	andeq	pc, r1, sl, lsl r6	; <UNPREDICTABLE>
    3358:	000b3300 	andeq	r3, fp, r0, lsl #6
    335c:	00732b00 	rsbseq	r2, r3, r0, lsl #22
    3360:	29025401 	stmdbcs	r2, {r0, sl, ip, lr}
    3364:	0000070e 	andeq	r0, r0, lr, lsl #14
    3368:	00000b46 	andeq	r0, r0, r6, asr #22
    336c:	01006e32 	tsteq	r0, r2, lsr lr
    3370:	8d300254 	lfmhi	f0, 4, [r0, #-336]!	; 0xfffffeb0
    3374:	01000000 	mrseq	r0, (UNDEF: 0)
    3378:	011f0052 	tsteq	pc, r2, asr r0	; <UNPREDICTABLE>
    337c:	000011c8 	andeq	r1, r0, r8, asr #3
    3380:	06024e01 	streq	r4, [r2], -r1, lsl #28
    3384:	00000001 	andeq	r0, r0, r1
    3388:	00000000 	andeq	r0, r0, r0
    338c:	de9c0100 	fmllee	f0, f4, f0
    3390:	2b00000a 	blcs	33c0 <NOROM_RFCSynthPowerDown+0x34>
    3394:	4e010064 	cdpmi	0, 0, cr0, cr1, cr4, {3}
    3398:	01f61902 	mvnseq	r1, r2, lsl #18
    339c:	0b590000 	bleq	16433a4 <__ccfg+0x16233fc>
    33a0:	732b0000 			; <UNDEFINED> instruction: 0x732b0000
    33a4:	024e0100 	subeq	r0, lr, #0, 2
    33a8:	00070e28 	andeq	r0, r7, r8, lsr #28
    33ac:	000b7700 	andeq	r7, fp, r0, lsl #14
    33b0:	011f0000 	tsteq	pc, r0
    33b4:	000012bc 			; <UNDEFINED> instruction: 0x000012bc
    33b8:	06024701 	streq	r4, [r2], -r1, lsl #14
    33bc:	00000001 	andeq	r0, r0, r1
    33c0:	00000000 	andeq	r0, r0, r0
    33c4:	259c0100 	ldrcs	r0, [ip, #256]	; 0x100
    33c8:	2b00000b 	blcs	33fc <NOROM_RFCRfTrimRead+0x24>
    33cc:	47010064 	strmi	r0, [r1, -r4, rrx]
    33d0:	01f61a02 	mvnseq	r1, r2, lsl #20
    33d4:	0b8a0000 	bleq	fe2833dc <_estack+0xde27e3dc>
    33d8:	732b0000 			; <UNDEFINED> instruction: 0x732b0000
    33dc:	02470100 	subeq	r0, r7, #0, 2
    33e0:	00070e29 	andeq	r0, r7, r9, lsr #28
    33e4:	000ba800 	andeq	sl, fp, r0, lsl #16
    33e8:	006e2b00 	rsbeq	r2, lr, r0, lsl #22
    33ec:	30024701 	andcc	r4, r2, r1, lsl #14
    33f0:	0000008d 	andeq	r0, r0, sp, lsl #1
    33f4:	00000bbb 			; <UNDEFINED> instruction: 0x00000bbb
    33f8:	bc011f00 	stclt	15, cr1, [r1], {-0}
    33fc:	01000010 	tsteq	r0, r0, lsl r0
    3400:	01060242 	tsteq	r6, r2, asr #4
    3404:	0000139e 	muleq	r0, lr, r3
    3408:	000013ae 	andeq	r1, r0, lr, lsr #7
    340c:	0b5d9c01 	bleq	176a418 <__ccfg+0x174a470>
    3410:	642b0000 	strtvs	r0, [fp], #-0
    3414:	02420100 	subeq	r0, r2, #0, 2
    3418:	0001f619 	andeq	pc, r1, r9, lsl r6	; <UNPREDICTABLE>
    341c:	000bce00 	andeq	ip, fp, r0, lsl #28
    3420:	00732b00 	rsbseq	r2, r3, r0, lsl #22
    3424:	28024201 	stmdacs	r2, {r0, r9, lr}
    3428:	0000070e 	andeq	r0, r0, lr, lsl #14
    342c:	00000be1 	andeq	r0, r0, r1, ror #23
    3430:	68012c00 	stmdavs	r1, {sl, fp, sp}
    3434:	01000011 	tsteq	r0, r1, lsl r0
    3438:	01050239 	tsteq	r5, r9, lsr r2
    343c:	0000008d 	andeq	r0, r0, sp, lsl #1
    3440:	00001390 	muleq	r0, r0, r3
    3444:	0000139e 	muleq	r0, lr, r3
    3448:	0b999c01 	bleq	fe66a454 <_estack+0xde665454>
    344c:	732b0000 			; <UNDEFINED> instruction: 0x732b0000
    3450:	02390100 	eorseq	r0, r9, #0, 2
    3454:	00070e1e 	andeq	r0, r7, lr, lsl lr
    3458:	000bff00 	andeq	pc, fp, r0, lsl #30
    345c:	00692200 	rsbeq	r2, r9, r0, lsl #4
    3460:	06023b01 	streq	r3, [r2], -r1, lsl #22
    3464:	0000008d 	andeq	r0, r0, sp, lsl #1
    3468:	00000c1d 	andeq	r0, r0, sp, lsl ip
    346c:	81012c00 	tsthi	r1, r0, lsl #24
    3470:	01000011 	tsteq	r0, r1, lsl r0
    3474:	0106022d 	tsteq	r6, sp, lsr #4
    3478:	000000d9 	ldrdeq	r0, [r0], -r9
	...
    3484:	0be69c01 	bleq	ff9aa490 <_estack+0xdf9a5490>
    3488:	662b0000 	strtvs	r0, [fp], -r0
    348c:	01006e75 	tsteq	r0, r5, ror lr
    3490:	f118022d 			; <UNDEFINED> instruction: 0xf118022d
    3494:	30000002 	andcc	r0, r0, r2
    3498:	2200000c 	andcs	r0, r0, #12
    349c:	2f010069 	svccs	0x00010069
    34a0:	04160e02 	ldreq	r0, [r6], #-3586	; 0xfffff1fe
    34a4:	0c4e0000 	mareq	acc0, r0, lr
    34a8:	63220000 			; <UNDEFINED> instruction: 0x63220000
    34ac:	02300100 	eorseq	r0, r0, #0, 2
    34b0:	0000d907 	andeq	sp, r0, r7, lsl #18
    34b4:	000c6c00 	andeq	r6, ip, r0, lsl #24
    34b8:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
    34bc:	00001182 	andeq	r1, r0, r2, lsl #3
    34c0:	07021f01 	streq	r1, [r2, -r1, lsl #30]
    34c4:	00011d01 	andeq	r1, r1, r1, lsl #26
    34c8:	00136c00 	andseq	r6, r3, r0, lsl #24
    34cc:	00139000 	andseq	r9, r3, r0
    34d0:	229c0100 	addscs	r0, ip, #0, 2
    34d4:	2b00000c 	blcs	350c <NOROM_RFCRfTrimRead+0x134>
    34d8:	006e7566 	rsbeq	r7, lr, r6, ror #10
    34dc:	18021f01 	stmdane	r2, {r0, r8, r9, sl, fp, ip}
    34e0:	000002f1 	strdeq	r0, [r0], -r1
    34e4:	00000c7f 	andeq	r0, r0, pc, ror ip
    34e8:	01006923 	tsteq	r0, r3, lsr #18
    34ec:	160e0221 	strne	r0, [lr], -r1, lsr #4
    34f0:	01000004 	tsteq	r0, r4
    34f4:	012c0050 	qsubeq	r0, r0, ip
    34f8:	00001264 	andeq	r1, r0, r4, ror #4
    34fc:	09021301 	stmdbeq	r2, {r0, r8, r9, ip}
    3500:	0002f101 	andeq	pc, r2, r1, lsl #2
	...
    350c:	609c0100 	addsvs	r0, ip, r0, lsl #2
    3510:	2b00000c 	blcs	3548 <NOROM_RFCRTrim+0x20>
    3514:	00646970 	rsbeq	r6, r4, r0, ror r9
    3518:	18021301 	stmdane	r2, {r0, r8, r9, ip}
    351c:	0000011d 	andeq	r0, r0, sp, lsl r1
    3520:	00000ca8 	andeq	r0, r0, r8, lsr #25
    3524:	01006922 	tsteq	r0, r2, lsr #18
    3528:	160e0215 			; <UNDEFINED> instruction: 0x160e0215
    352c:	c6000004 	strgt	r0, [r0], -r4
    3530:	0000000c 	andeq	r0, r0, ip
    3534:	122b011f 	eorne	r0, fp, #-1073741817	; 0xc0000007
    3538:	f5010000 			; <UNDEFINED> instruction: 0xf5010000
    353c:	00010601 	andeq	r0, r1, r1, lsl #12
    3540:	00000000 	andeq	r0, r0, r0
    3544:	01000000 	mrseq	r0, (UNDEF: 0)
    3548:	000cc99c 	muleq	ip, ip, r9
    354c:	75662b00 	strbvc	r2, [r6, #-2816]!	; 0xfffff500
    3550:	f501006e 			; <UNDEFINED> instruction: 0xf501006e
    3554:	02f11701 	rscseq	r1, r1, #262144	; 0x40000
    3558:	0ce40000 	stcleq	0, cr0, [r4]
    355c:	72220000 	eorvc	r0, r2, #0
    3560:	01006c65 	tsteq	r0, r5, ror #24
    3564:	cd0a01f9 	stfgts	f0, [sl, #-996]	; 0xfffffc1c
    3568:	02000000 	andeq	r0, r0, #0
    356c:	2200000d 	andcs	r0, r0, #13
    3570:	fa010069 	blx	4371c <__ccfg+0x23774>
    3574:	04160e01 	ldreq	r0, [r6], #-3585	; 0xfffff1ff
    3578:	0d150000 	ldceq	0, cr0, [r5, #-0]
    357c:	6a220000 	bvs	883584 <__ccfg+0x8635dc>
    3580:	01fa0100 	mvnseq	r0, r0, lsl #2
    3584:	00041612 	andeq	r1, r4, r2, lsl r6
    3588:	000d4900 	andeq	r4, sp, r0, lsl #18
    358c:	006b2200 	rsbeq	r2, fp, r0, lsl #4
    3590:	1601fa01 	strne	pc, [r1], -r1, lsl #20
    3594:	00000416 	andeq	r0, r0, r6, lsl r4
    3598:	00000d67 	andeq	r0, r0, r7, ror #26
    359c:	f1011f00 			; <UNDEFINED> instruction: 0xf1011f00
    35a0:	01000010 	tsteq	r0, r0, lsl r0
    35a4:	010601d9 	ldrdeq	r0, [r6, -r9]
    35a8:	00001528 	andeq	r1, r0, r8, lsr #10
    35ac:	00001578 	andeq	r1, r0, r8, ror r5
    35b0:	0d0e9c01 	stceq	12, cr9, [lr, #-4]
    35b4:	702b0000 	eorvc	r0, fp, r0
    35b8:	01006469 	tsteq	r0, r9, ror #8
    35bc:	1d1201d9 	ldfnes	f0, [r2, #-868]	; 0xfffffc9c
    35c0:	85000001 	strhi	r0, [r0, #-1]
    35c4:	2200000d 	andcs	r0, r0, #13
    35c8:	dd010069 	stcle	0, cr0, [r1, #-420]	; 0xfffffe5c
    35cc:	04160e01 	ldreq	r0, [r6], #-3585	; 0xfffff1ff
    35d0:	0db90000 	ldceq	0, cr0, [r9]
    35d4:	6a240000 	bvs	9035dc <__ccfg+0x8e3634>
    35d8:	01dd0100 	bicseq	r0, sp, r0, lsl #2
    35dc:	00041612 	andeq	r1, r4, r2, lsl r6
    35e0:	b52a0000 	strlt	r0, [sl, #-0]!
    35e4:	01000010 	tsteq	r0, r0, lsl r0
    35e8:	010d01c4 	smlabteq	sp, r4, r1, r0
    35ec:	000010b0 	strheq	r1, [r0], -r0
    35f0:	000010ec 	andeq	r1, r0, ip, ror #1
    35f4:	0d639c01 	stcleq	12, cr9, [r3, #-4]!
    35f8:	70320000 	eorsvc	r0, r2, r0
    35fc:	01006469 	tsteq	r0, r9, ror #8
    3600:	162101c4 	strtne	r0, [r1], -r4, asr #3
    3604:	01000004 	tsteq	r0, r4
    3608:	12942d50 	addsne	r2, r4, #80, 26	; 0x1400
    360c:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
    3610:	011d0801 	tsteq	sp, r1, lsl #16
    3614:	0de20000 	stcleq	0, cr0, [r2]
    3618:	6a220000 	bvs	883620 <__ccfg+0x863678>
    361c:	01c90100 	biceq	r0, r9, r0, lsl #2
    3620:	00008d06 	andeq	r8, r0, r6, lsl #26
    3624:	000df500 	andeq	pc, sp, r0, lsl #10
    3628:	00692300 	rsbeq	r2, r9, r0, lsl #6
    362c:	0e01ca01 	vmlaeq.f32	s24, s2, s2
    3630:	00000416 	andeq	r0, r0, r6, lsl r4
    3634:	2c005201 	sfmcs	f5, 4, [r0], {1}
    3638:	00126c01 	andseq	r6, r2, r1, lsl #24
    363c:	01b30100 			; <UNDEFINED> instruction: 0x01b30100
    3640:	00d90106 	sbcseq	r0, r9, r6, lsl #2
	...
    364c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3650:	00000da1 	andeq	r0, r0, r1, lsr #27
    3654:	6469702b 	strbtvs	r7, [r9], #-43	; 0xffffffd5
    3658:	01b30100 			; <UNDEFINED> instruction: 0x01b30100
    365c:	00011d13 	andeq	r1, r1, r3, lsl sp
    3660:	000e0800 	andeq	r0, lr, r0, lsl #16
    3664:	00692200 	rsbeq	r2, r9, r0, lsl #4
    3668:	0e01b501 	cfsh32eq	mvfx11, mvfx1, #1
    366c:	00000416 	andeq	r0, r0, r6, lsl r4
    3670:	00000e26 	andeq	r0, r0, r6, lsr #28
    3674:	d4013300 	strle	r3, [r1], #-768	; 0xfffffd00
    3678:	01000010 	tsteq	r0, r0, lsl r0
    367c:	010601a8 	smlatbeq	r6, r8, r1, r0
	...
    3688:	011f9c01 	tsteq	pc, r1, lsl #24
    368c:	00002875 	andeq	r2, r0, r5, ror r8
    3690:	06019a01 	streq	r9, [r1], -r1, lsl #20
    3694:	00133401 	andseq	r3, r3, r1, lsl #8
    3698:	00136c00 	andseq	r6, r3, r0, lsl #24
    369c:	f09c0100 			; <UNDEFINED> instruction: 0xf09c0100
    36a0:	2b00000d 	blcs	36dc <TrimAfterColdResetWakeupFromShutDown+0x60>
    36a4:	9a010064 	bls	4383c <__ccfg+0x23894>
    36a8:	00d91201 	sbcseq	r1, r9, r1, lsl #4
    36ac:	0e440000 	cdpeq	0, 4, cr0, cr4, cr0, {0}
    36b0:	77200000 	strvc	r0, [r0, -r0]!
    36b4:	01000000 	mrseq	r0, (UNDEF: 0)
    36b8:	d91a019a 	ldmdble	sl, {r1, r3, r4, r7, r8}
    36bc:	57000000 	strpl	r0, [r0, -r0]
    36c0:	0000000e 	andeq	r0, r0, lr
    36c4:	12c9012c 	sbcne	r0, r9, #44, 2
    36c8:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    36cc:	1d010701 	stcne	7, cr0, [r1, #-4]
    36d0:	10000001 	andne	r0, r0, r1
    36d4:	34000013 	strcc	r0, [r0], #-19	; 0xffffffed
    36d8:	01000013 	tsteq	r0, r3, lsl r0
    36dc:	000e3e9c 	muleq	lr, ip, lr
    36e0:	69702b00 	ldmdbvs	r0!, {r8, r9, fp, sp}^
    36e4:	88010064 	stmdahi	r1, {r2, r5, r6}
    36e8:	011d1801 	tsteq	sp, r1, lsl #16
    36ec:	0e6a0000 	cdpeq	0, 6, cr0, cr10, cr0, {0}
    36f0:	732b0000 			; <UNDEFINED> instruction: 0x732b0000
    36f4:	88010074 	stmdahi	r1, {r2, r4, r5, r6}
    36f8:	00d92201 	sbcseq	r2, r9, r1, lsl #4
    36fc:	0e930000 	cdpeq	0, 9, cr0, cr3, cr0, {0}
    3700:	69220000 	stmdbvs	r2!, {}	; <UNPREDICTABLE>
    3704:	018a0100 	orreq	r0, sl, r0, lsl #2
    3708:	0004160e 	andeq	r1, r4, lr, lsl #12
    370c:	000eb100 	andeq	fp, lr, r0, lsl #2
    3710:	011f0000 	tsteq	pc, r0
    3714:	000011a3 	andeq	r1, r0, r3, lsr #3
    3718:	06017801 	streq	r7, [r1], -r1, lsl #16
    371c:	00000001 	andeq	r0, r0, r1
    3720:	00000000 	andeq	r0, r0, r0
    3724:	969c0100 	ldrls	r0, [ip], r0, lsl #2
    3728:	2b00000e 	blcs	3768 <NOROM_SetupTrimDevice+0x18>
    372c:	00646970 	rsbeq	r6, r4, r0, ror r9
    3730:	1b017801 	blne	6173c <__ccfg+0x41794>
    3734:	0000011d 	andeq	r0, r0, sp, lsl r1
    3738:	00000ecf 	andeq	r0, r0, pc, asr #29
    373c:	0011fb20 	andseq	pc, r1, r0, lsr #22
    3740:	01780100 	cmneq	r8, r0, lsl #2
    3744:	00011d26 	andeq	r1, r1, r6, lsr #26
    3748:	000ee200 	andeq	lr, lr, r0, lsl #4
    374c:	00692300 	rsbeq	r2, r9, r0, lsl #6
    3750:	0e017c01 	cdpeq	12, 0, cr7, cr1, cr1, {0}
    3754:	00000416 	andeq	r0, r0, r6, lsl r4
    3758:	6a225001 	bvs	897764 <__ccfg+0x8777bc>
    375c:	017d0100 	cmneq	sp, r0, lsl #2
    3760:	00008d07 	andeq	r8, r0, r7, lsl #26
    3764:	000f0000 	andeq	r0, pc, r0
    3768:	011f0000 	tsteq	pc, r0
    376c:	0000115b 	andeq	r1, r0, fp, asr r1
    3770:	06016601 	streq	r6, [r1], -r1, lsl #12
    3774:	0012dc01 	andseq	sp, r2, r1, lsl #24
    3778:	00131000 	andseq	r1, r3, r0
    377c:	db9c0100 	blle	fe703b84 <_estack+0xde6feb84>
    3780:	3400000e 	strcc	r0, [r0], #-14
    3784:	000011fb 	strdeq	r1, [r0], -fp
    3788:	1a016601 	bne	5cf94 <__ccfg+0x3cfec>
    378c:	0000011d 	andeq	r0, r0, sp, lsl r1
    3790:	6a225001 	bvs	89779c <__ccfg+0x8777f4>
    3794:	016a0100 	cmneq	sl, r0, lsl #2
    3798:	00008d06 	andeq	r8, r0, r6, lsl #26
    379c:	000f1e00 	andeq	r1, pc, r0, lsl #28
    37a0:	00692300 	rsbeq	r2, r9, r0, lsl #6
    37a4:	0e016b01 	vmlaeq.f64	d6, d1, d1
    37a8:	00000416 	andeq	r0, r0, r6, lsl r4
    37ac:	2e005201 	cdpcs	2, 0, cr5, cr0, cr1, {0}
    37b0:	00120f01 	andseq	r0, r2, r1, lsl #30
    37b4:	01590100 	cmpeq	r9, r0, lsl #2
    37b8:	11010106 	tstne	r1, r6, lsl #2
    37bc:	3500000f 	strcc	r0, [r0, #-15]
    37c0:	000011fb 	strdeq	r1, [r0], -fp
    37c4:	17015901 	strne	r5, [r1, -r1, lsl #18]
    37c8:	0000011d 	andeq	r0, r0, sp, lsl r1
    37cc:	00007735 	andeq	r7, r0, r5, lsr r7
    37d0:	01590100 	cmpeq	r9, r0, lsl #2
    37d4:	0000d923 	andeq	sp, r0, r3, lsr #18
    37d8:	006a2400 	rsbeq	r2, sl, r0, lsl #8
    37dc:	07015d01 	streq	r5, [r1, -r1, lsl #26]
    37e0:	000000ef 	andeq	r0, r0, pc, ror #1
    37e4:	96011f00 	strls	r1, [r1], -r0, lsl #30
    37e8:	01000011 	tsteq	r0, r1, lsl r0
    37ec:	01060153 	tsteq	r6, r3, asr r1
    37f0:	00001294 	muleq	r0, r4, r2
    37f4:	000012a8 	andeq	r1, r0, r8, lsr #5
    37f8:	0f3c9c01 	svceq	0x003c9c01
    37fc:	77200000 	strvc	r0, [r0, -r0]!
    3800:	01000000 	mrseq	r0, (UNDEF: 0)
    3804:	d9140153 	ldmdble	r4, {r0, r1, r4, r6, r8}
    3808:	31000000 	mrscc	r0, (UNDEF: 0)
    380c:	0000000f 	andeq	r0, r0, pc
    3810:	10e7012c 	rscne	r0, r7, ip, lsr #2
    3814:	2c010000 	stccs	0, cr0, [r1], {-0}
    3818:	1d010701 	stcne	7, cr0, [r1, #-4]
    381c:	20000001 	andcs	r0, r0, r1
    3820:	54000016 	strpl	r0, [r0], #-22	; 0xffffffea
    3824:	01000016 	tsteq	r0, r6, lsl r0
    3828:	000f9e9c 	muleq	pc, ip, lr	; <UNPREDICTABLE>
    382c:	055b2000 	ldrbeq	r2, [fp, #-0]
    3830:	2c010000 	stccs	0, cr0, [r1], {-0}
    3834:	02f11a01 	rscseq	r1, r1, #4096	; 0x1000
    3838:	0f440000 	svceq	0x00440000
    383c:	05200000 	streq	r0, [r0, #-0]!
    3840:	01000044 	tsteq	r0, r4, asr #32
    3844:	1d26012c 	stfnes	f0, [r6, #-176]!	; 0xffffff50
    3848:	62000001 	andvs	r0, r0, #1
    384c:	2300000f 	movwcs	r0, #15
    3850:	2e010069 	cdpcs	0, 0, cr0, cr1, cr9, {3}
    3854:	04160e01 	ldreq	r0, [r6], #-3585	; 0xfffff1ff
    3858:	50010000 	andpl	r0, r1, r0
    385c:	00060836 	andeq	r0, r6, r6, lsr r8
    3860:	006a2200 	rsbeq	r2, sl, r0, lsl #4
    3864:	0f013d01 	svceq	0x00013d01
    3868:	00000416 	andeq	r0, r0, r6, lsl r4
    386c:	00000f80 	andeq	r0, r0, r0, lsl #31
    3870:	01370000 	teqeq	r7, r0
    3874:	0000124c 	andeq	r1, r0, ip, asr #4
    3878:	0106af01 	tsteq	r6, r1, lsl #30
    387c:	000fe301 	andeq	lr, pc, r1, lsl #6
    3880:	696d3800 	stmdbvs	sp!, {fp, ip, sp}^
    3884:	af01006e 	svcge	0x0001006e
    3888:	0000d91a 	andeq	sp, r0, sl, lsl r9
    388c:	0e513900 	vnmlseq.f16	s7, s2, s0	; <UNPREDICTABLE>
    3890:	af010000 	svcge	0x00010000
    3894:	0000cd27 	andeq	ip, r0, r7, lsr #26
    3898:	00693a00 	rsbeq	r3, r9, r0, lsl #20
    389c:	160ebd01 	strne	fp, [lr], -r1, lsl #26
    38a0:	3a000004 	bcc	38b8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x48>
    38a4:	be010064 	cdplt	0, 0, cr0, cr1, cr4, {3}
    38a8:	0000d907 	andeq	sp, r0, r7, lsl #18
    38ac:	4f4d3b00 	svcmi	0x004d3b00
    38b0:	0901004b 	stmdbeq	r1, {r0, r1, r3, r6}
    38b4:	3c000101 	stfccs	f0, [r0], {1}
    38b8:	00128401 	andseq	r8, r2, r1, lsl #8
    38bc:	06a70100 	strteq	r0, [r7], r0, lsl #2
    38c0:	0011c001 	andseq	ip, r1, r1
    38c4:	0011c600 	andseq	ip, r1, r0, lsl #12
    38c8:	189c0100 	ldmne	ip, {r8}
    38cc:	3d000010 	stccc	0, cr0, [r0, #-64]	; 0xffffffc0
    38d0:	a7010074 	smlsdxge	r1, r4, r0, r0
    38d4:	0001291f 	andeq	r2, r1, pc, lsl r9
    38d8:	000fa900 	andeq	sl, pc, r0, lsl #18
    38dc:	00763d00 	rsbseq	r3, r6, r0, lsl #26
    38e0:	d927a701 	stmdble	r7!, {r0, r8, r9, sl, sp, pc}
    38e4:	bc000000 	stclt	0, cr0, [r0], {-0}
    38e8:	0000000f 	andeq	r0, r0, pc
    38ec:	12d3013c 	sbcsne	r0, r3, #60, 2
    38f0:	8f010000 	svchi	0x00010000
    38f4:	00000106 	andeq	r0, r0, r6, lsl #2
    38f8:	00000000 	andeq	r0, r0, r0
    38fc:	9c010000 	stcls	0, cr0, [r1], {-0}
    3900:	0000104e 	andeq	r1, r0, lr, asr #32
    3904:	0074753d 	rsbseq	r7, r4, sp, lsr r5
    3908:	291d8f01 	ldmdbcs	sp, {r0, r8, r9, sl, fp, pc}
    390c:	cf000001 	svcgt	0x00000001
    3910:	3e00000f 	cdpcc	0, 0, cr0, cr0, cr15, {0}
    3914:	93010069 	movwls	r0, #4201	; 0x1069
    3918:	00008d06 	andeq	r8, r0, r6, lsl #26
    391c:	000fed00 	andeq	lr, pc, r0, lsl #26
    3920:	013c0000 	teqeq	ip, r0
    3924:	000010fd 	strdeq	r1, [r0], -sp
    3928:	01067f01 	tsteq	r6, r1, lsl #30
    392c:	00001194 	muleq	r0, r4, r1
    3930:	000011c0 	andeq	r1, r0, r0, asr #3
    3934:	10849c01 	addne	r9, r4, r1, lsl #24
    3938:	753d0000 	ldrvc	r0, [sp, #-0]!
    393c:	7f010074 	svcvc	0x00010074
    3940:	0001291a 	andeq	r2, r1, sl, lsl r9
    3944:	00100b00 	andseq	r0, r0, r0, lsl #22
    3948:	00693e00 	rsbeq	r3, r9, r0, lsl #28
    394c:	8d068301 	stchi	3, cr8, [r6, #-4]
    3950:	34000000 	strcc	r0, [r0], #-0
    3954:	00000010 	andeq	r0, r0, r0, lsl r0
    3958:	1201013f 	andne	r0, r1, #-1073741809	; 0xc000000f
    395c:	7b010000 	blvc	43964 <__ccfg+0x239bc>
    3960:	11840106 	orrne	r0, r4, r6, lsl #2
    3964:	11940000 	orrsne	r0, r4, r0
    3968:	9c010000 	stcls	0, cr0, [r1], {-0}
    396c:	0011bc40 	andseq	fp, r1, r0, asr #24
    3970:	145f0100 	ldrbne	r0, [pc], #-256	; 3978 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim>
    3974:	00041601 	andeq	r1, r4, r1, lsl #12
    3978:	10c10100 	sbcne	r0, r1, r0, lsl #2
    397c:	70380000 	eorsvc	r0, r8, r0
    3980:	01006469 	tsteq	r0, r9, ror #8
    3984:	011d225f 	tsteq	sp, pc, asr r2
    3988:	693a0000 	ldmdbvs	sl!, {}	; <UNPREDICTABLE>
    398c:	17610100 	strbne	r0, [r1, -r0, lsl #2]!
    3990:	00000416 	andeq	r0, r0, r6, lsl r4
    3994:	11084100 	mrsne	r4, (UNDEF: 24)
    3998:	9e020000 	cdpls	0, 0, cr0, cr2, cr0, {0}
    399c:	e2010102 	and	r0, r1, #-2147483648	; 0x80000000
    39a0:	03000010 	movweq	r0, #16
    39a4:	000010e2 	andeq	r1, r0, r2, ror #1
    39a8:	000dc935 	andeq	ip, sp, r5, lsr r9
    39ac:	029e0200 	addseq	r0, lr, #0, 4
    39b0:	00007313 	andeq	r7, r0, r3, lsl r3
    39b4:	01020000 	mrseq	r0, (UNDEF: 2)
    39b8:	00124002 	andseq	r4, r2, r2
    39bc:	10984200 	addsne	r4, r8, r0, lsl #4
	...
    39c8:	9c010000 	stcls	0, cr0, [r1], {-0}
    39cc:	0000112e 	andeq	r1, r0, lr, lsr #2
    39d0:	0010aa43 	andseq	sl, r0, r3, asr #20
    39d4:	00105200 	andseq	r5, r0, r0, lsl #4
    39d8:	10b64400 	adcsne	r4, r6, r0, lsl #8
    39dc:	107b0000 	rsbsne	r0, fp, r0
    39e0:	98450000 	stmdals	r5, {}^	; <UNPREDICTABLE>
    39e4:	00000010 	andeq	r0, r0, r0, lsl r0
    39e8:	00000000 	andeq	r0, r0, r0
    39ec:	01000000 	mrseq	r0, (UNDEF: 0)
    39f0:	aa43145f 	bge	10c8b74 <__ccfg+0x10a8bcc>
    39f4:	99000010 	stmdbls	r0, {r4}
    39f8:	46000010 			; <UNDEFINED> instruction: 0x46000010
    39fc:	000010b6 	strheq	r1, [r0], -r6
    3a00:	9e420000 	cdpls	0, 4, cr0, cr2, cr0, {0}
    3a04:	c800000f 	stmdagt	r0, {r0, r1, r2, r3}
    3a08:	94000011 	strls	r0, [r0], #-17	; 0xffffffef
    3a0c:	01000012 	tsteq	r0, r2, lsl r0
    3a10:	00119a9c 	mulseq	r1, ip, sl
    3a14:	0fad4300 	svceq	0x00ad4300
    3a18:	10ac0000 	adcne	r0, ip, r0
    3a1c:	b9430000 	stmdblt	r3, {}^	; <UNPREDICTABLE>
    3a20:	bf00000f 	svclt	0x0000000f
    3a24:	46000010 			; <UNDEFINED> instruction: 0x46000010
    3a28:	00000fc5 	andeq	r0, r0, r5, asr #31
    3a2c:	000fcf46 	andeq	ip, pc, r6, asr #30
    3a30:	0f9e4700 	svceq	0x009e4700
    3a34:	11d60000 	bicsne	r0, r6, r0
    3a38:	05f00000 	ldrbeq	r0, [r0, #0]!
    3a3c:	af010000 	svcge	0x00010000
    3a40:	0fb92906 	svceq	0x00b92906
    3a44:	ad430000 	stclge	0, cr0, [r3, #-0]
    3a48:	d200000f 	andle	r0, r0, #15
    3a4c:	36000010 			; <UNDEFINED> instruction: 0x36000010
    3a50:	000005f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    3a54:	000fc544 	andeq	ip, pc, r4, asr #10
    3a58:	0010fb00 	andseq	pc, r0, r0, lsl #22
    3a5c:	0fcf4600 	svceq	0x00cf4600
    3a60:	d9480000 	stmdble	r8, {}^	; <UNPREDICTABLE>
    3a64:	7200000f 	andvc	r0, r0, #15
    3a68:	00000012 	andeq	r0, r0, r2, lsl r0
    3a6c:	db420000 	blle	1083a74 <__ccfg+0x1063acc>
    3a70:	a800000e 	stmdage	r0, {r1, r2, r3}
    3a74:	dc000012 	stcle	0, cr0, [r0], {18}
    3a78:	01000012 	tsteq	r0, r2, lsl r0
    3a7c:	0011ee9c 	mulseq	r1, ip, lr
    3a80:	0eeb4300 	cdpeq	3, 14, cr4, cr11, cr0, {0}
    3a84:	11190000 	tstne	r9, r0
    3a88:	f8430000 			; <UNDEFINED> instruction: 0xf8430000
    3a8c:	3700000e 	strcc	r0, [r0, -lr]
    3a90:	46000011 			; <UNDEFINED> instruction: 0x46000011
    3a94:	00000f05 	andeq	r0, r0, r5, lsl #30
    3a98:	000edb49 	andeq	sp, lr, r9, asr #22
    3a9c:	0012ba00 	andseq	fp, r2, r0, lsl #20
    3aa0:	0012c200 	andseq	ip, r2, r0, lsl #4
    3aa4:	01590100 	cmpeq	r9, r0, lsl #2
    3aa8:	0eeb4306 	cdpeq	3, 14, cr4, cr11, cr6, {0}
    3aac:	11550000 	cmpne	r5, r0
    3ab0:	f8430000 			; <UNDEFINED> instruction: 0xf8430000
    3ab4:	6800000e 	stmdavs	r0, {r1, r2, r3}
    3ab8:	46000011 			; <UNDEFINED> instruction: 0x46000011
    3abc:	00000f05 	andeq	r0, r0, r5, lsl #30
    3ac0:	804a0000 	subhi	r0, sl, r0
    3ac4:	e0000008 	and	r0, r0, r8
    3ac8:	28000014 	stmdacs	r0, {r2, r4}
    3acc:	01000015 	tsteq	r0, r5, lsl r0
    3ad0:	0890439c 	ldmeq	r0, {r2, r3, r4, r7, r8, r9, lr}
    3ad4:	117b0000 	cmnne	fp, r0
    3ad8:	80490000 	subhi	r0, r9, r0
    3adc:	ec000008 	stc	0, cr0, [r0], {8}
    3ae0:	f4000014 	vst4.8	{d0-d3}, [r0 :64], r4
    3ae4:	01000014 	tsteq	r0, r4, lsl r0
    3ae8:	4306037c 	movwmi	r0, #25468	; 0x637c
    3aec:	00000890 	muleq	r0, r0, r8
    3af0:	00001199 	muleq	r0, r9, r1
    3af4:	33000000 	movwcc	r0, #0
    3af8:	03000013 	movweq	r0, #19
    3afc:	000d9300 	andeq	r9, sp, r0, lsl #6
    3b00:	bd010400 	cfstrslt	mvf0, [r1, #-0]
    3b04:	0c000000 	stceq	0, cr0, [r0], {-0}
    3b08:	00001322 	andeq	r1, r0, r2, lsr #6
    3b0c:	000006e4 	andeq	r0, r0, r4, ror #13
    3b10:	000007f8 	strdeq	r0, [r0], -r8
    3b14:	00000000 	andeq	r0, r0, r0
    3b18:	00002b32 	andeq	r2, r0, r2, lsr fp
    3b1c:	8a060102 	bhi	183f2c <__ccfg+0x163f84>
    3b20:	02000009 	andeq	r0, r0, #9
    3b24:	08440502 	stmdaeq	r4, {r1, r8, sl}^
    3b28:	04020000 	streq	r0, [r2], #-0
    3b2c:	00063705 	andeq	r3, r6, r5, lsl #14
    3b30:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    3b34:	00000632 	andeq	r0, r0, r2, lsr r6
    3b38:	0008e103 	andeq	lr, r8, r3, lsl #2
    3b3c:	182e0200 	stmdane	lr!, {r9}
    3b40:	0000004d 	andeq	r0, r0, sp, asr #32
    3b44:	88080102 	stmdahi	r8, {r1, r8}
    3b48:	03000009 	movweq	r0, #9
    3b4c:	0000040a 	andeq	r0, r0, sl, lsl #8
    3b50:	60193102 	andsvs	r3, r9, r2, lsl #2
    3b54:	02000000 	andeq	r0, r0, #0
    3b58:	0a800702 	beq	fe005768 <_estack+0xde000768>
    3b5c:	a1030000 	mrsge	r0, (UNDEF: 3)
    3b60:	02000009 	andeq	r0, r0, #9
    3b64:	00731934 	rsbseq	r1, r3, r4, lsr r9
    3b68:	04020000 	streq	r0, [r2], #-0
    3b6c:	0003cf07 	andeq	ip, r3, r7, lsl #30
    3b70:	07080200 	streq	r0, [r8, -r0, lsl #4]
    3b74:	000003ca 	andeq	r0, r0, sl, asr #7
    3b78:	69050404 	stmdbvs	r5, {r2, sl}
    3b7c:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    3b80:	03d40704 	bicseq	r0, r4, #4, 14	; 0x100000
    3b84:	56030000 	strpl	r0, [r3], -r0
    3b88:	03000004 	movweq	r0, #4
    3b8c:	009b1b28 	addseq	r1, fp, r8, lsr #22
    3b90:	11050000 	mrsne	r0, (UNDEF: 5)
    3b94:	04000009 	streq	r0, [r0], #-9
    3b98:	00b3000d 	adcseq	r0, r3, sp
    3b9c:	12060000 	andne	r0, r6, #0
    3ba0:	b300000a 	movwlt	r0, #10
    3ba4:	00000000 	andeq	r0, r0, r0
    3ba8:	04070001 	streq	r0, [r7], #-1
    3bac:	00091303 	andeq	r1, r9, r3, lsl #6
    3bb0:	18630300 	stmdane	r3!, {r8, r9}^
    3bb4:	0000008f 	andeq	r0, r0, pc, lsl #1
    3bb8:	0007d403 	andeq	sp, r7, r3, lsl #8
    3bbc:	12260400 	eorne	r0, r6, #0, 8
    3bc0:	00000041 	andeq	r0, r0, r1, asr #32
    3bc4:	0024ae03 	eoreq	sl, r4, r3, lsl #28
    3bc8:	12270400 	eorne	r0, r7, #0, 8
    3bcc:	00000054 	andeq	r0, r0, r4, asr r0
    3bd0:	0000cd08 	andeq	ip, r0, r8, lsl #26
    3bd4:	00cd0900 	sbceq	r0, sp, r0, lsl #18
    3bd8:	c7030000 	strgt	r0, [r3, -r0]
    3bdc:	04000019 	streq	r0, [r0], #-25	; 0xffffffe7
    3be0:	0041122b 	subeq	r1, r1, fp, lsr #4
    3be4:	e3090000 	movw	r0, #36864	; 0x9000
    3be8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3bec:	000000e3 	andeq	r0, r0, r3, ror #1
    3bf0:	0024ff03 	eoreq	pc, r4, r3, lsl #30
    3bf4:	122c0400 	eorne	r0, ip, #0, 8
    3bf8:	00000067 	andeq	r0, r0, r7, rrx
    3bfc:	0000f908 	andeq	pc, r0, r8, lsl #18
    3c00:	05380300 	ldreq	r0, [r8, #-768]!	; 0xfffffd00
    3c04:	2d040000 	stccs	0, cr0, [r4, #-0]
    3c08:	00006712 	andeq	r6, r0, r2, lsl r7
    3c0c:	09210300 	stmdbeq	r1!, {r8, r9}
    3c10:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
    3c14:	00012210 	andeq	r2, r1, r0, lsl r2
    3c18:	cd040a00 	vstrgt	s0, [r4, #-0]
    3c1c:	0b000000 	bleq	3c24 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x34>
    3c20:	09320408 	ldmdbeq	r2!, {r3, sl}
    3c24:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
    3c28:	00003e0c 	andeq	r3, r0, ip, lsl #28
    3c2c:	07340400 	ldreq	r0, [r4, -r0, lsl #8]!
    3c30:	000000e3 	andeq	r0, r0, r3, ror #1
    3c34:	00070101 	andeq	r0, r7, r1, lsl #2
    3c38:	00053e0c 	andeq	r3, r5, ip, lsl #28
    3c3c:	03350400 	teqeq	r5, #0, 8
    3c40:	000000e3 	andeq	r0, r0, r3, ror #1
    3c44:	00060101 	andeq	r0, r6, r1, lsl #2
    3c48:	00026f0c 	andeq	r6, r2, ip, lsl #30
    3c4c:	03360400 	teqeq	r6, #0, 8
    3c50:	000000e3 	andeq	r0, r0, r3, ror #1
    3c54:	00050101 	andeq	r0, r5, r1, lsl #2
    3c58:	0005780c 	andeq	r7, r5, ip, lsl #16
    3c5c:	03370400 	teqeq	r7, #0, 8
    3c60:	000000e3 	andeq	r0, r0, r3, ror #1
    3c64:	00040101 	andeq	r0, r4, r1, lsl #2
    3c68:	0008650c 	andeq	r6, r8, ip, lsl #10
    3c6c:	03380400 	teqeq	r8, #0, 8
    3c70:	000000e3 	andeq	r0, r0, r3, ror #1
    3c74:	00000401 	andeq	r0, r0, r1, lsl #8
    3c78:	0005450d 	andeq	r4, r5, sp, lsl #10
    3c7c:	073a0400 	ldreq	r0, [sl, -r0, lsl #8]!
    3c80:	000000e3 	andeq	r0, r0, r3, ror #1
    3c84:	075e0d01 	ldrbeq	r0, [lr, -r1, lsl #26]
    3c88:	3c040000 	stccc	0, cr0, [r4], {-0}
    3c8c:	0000e303 	andeq	lr, r0, r3, lsl #6
    3c90:	520d0200 	andpl	r0, sp, #0, 4
    3c94:	0400000b 	streq	r0, [r0], #-11
    3c98:	00e3033d 	rsceq	r0, r3, sp, lsr r3
    3c9c:	0d030000 	stceq	0, cr0, [r3, #-0]
    3ca0:	00000793 	muleq	r0, r3, r7
    3ca4:	f9083f04 			; <UNDEFINED> instruction: 0xf9083f04
    3ca8:	04000000 	streq	r0, [r0], #-0
    3cac:	02c10300 	sbceq	r0, r1, #0, 6
    3cb0:	41040000 	mrsmi	r0, (UNDEF: 4)
    3cb4:	00012803 	andeq	r2, r1, r3, lsl #16
    3cb8:	01b60900 			; <UNDEFINED> instruction: 0x01b60900
    3cbc:	7f0e0000 	svcvc	0x000e0000
    3cc0:	04000005 	streq	r0, [r0], #-5
    3cc4:	01c21a43 	biceq	r1, r2, r3, asr #20
    3cc8:	01010000 	mrseq	r0, (UNDEF: 1)
    3ccc:	0001b10e 	andeq	fp, r1, lr, lsl #2
    3cd0:	0e450400 	cdpeq	4, 4, cr0, cr5, cr0, {0}
    3cd4:	000001e3 	andeq	r0, r0, r3, ror #3
    3cd8:	040a0101 	streq	r0, [sl], #-257	; 0xfffffeff
    3cdc:	000001e9 	andeq	r0, r0, r9, ror #3
    3ce0:	91080102 	tstls	r8, r2, lsl #2
    3ce4:	08000009 	stmdaeq	r0, {r0, r3}
    3ce8:	000001e9 	andeq	r0, r0, r9, ror #3
    3cec:	0002ca0e 	andeq	ip, r2, lr, lsl #20
    3cf0:	1e450400 	cdpne	4, 4, cr0, cr5, cr0, {0}
    3cf4:	000001e3 	andeq	r0, r0, r3, ror #3
    3cf8:	080b0101 	stmdaeq	fp, {r0, r8}
    3cfc:	34098f05 	strcc	r8, [r9], #-3845	; 0xfffff0fb
    3d00:	0d000002 	stceq	0, cr0, [r0, #-8]
    3d04:	0000064f 	andeq	r0, r0, pc, asr #12
    3d08:	670b9005 	strvs	r9, [fp, -r5]
    3d0c:	00000000 	andeq	r0, r0, r0
    3d10:	000c840d 	andeq	r8, ip, sp, lsl #8
    3d14:	08910500 	ldmeq	r1, {r8, sl}
    3d18:	000000cd 	andeq	r0, r0, sp, asr #1
    3d1c:	01f40d04 	mvnseq	r0, r4, lsl #26
    3d20:	92050000 	andls	r0, r5, #0
    3d24:	0000ef10 	andeq	lr, r0, r0, lsl pc
    3d28:	03000600 	movweq	r0, #1536	; 0x600
    3d2c:	00000a0b 	andeq	r0, r0, fp, lsl #20
    3d30:	03039305 	movweq	r9, #13061	; 0x3305
    3d34:	0f000002 	svceq	0x00000002
    3d38:	00000234 	andeq	r0, r0, r4, lsr r2
    3d3c:	0000024b 	andeq	r0, r0, fp, asr #4
    3d40:	b40e0010 	strlt	r0, [lr], #-16
    3d44:	05000007 	streq	r0, [r0, #-7]
    3d48:	02400f99 	subeq	r0, r0, #612	; 0x264
    3d4c:	01010000 	mrseq	r0, (UNDEF: 1)
    3d50:	00f4040a 	rscseq	r0, r4, sl, lsl #8
    3d54:	010b0000 	mrseq	r0, (UNDEF: 11)
    3d58:	89099106 	stmdbhi	r9, {r1, r2, r8, ip, pc}
    3d5c:	0c000002 	stceq	0, cr0, [r0], {2}
    3d60:	0000079a 	muleq	r0, sl, r7
    3d64:	e3079306 	movw	r9, #29446	; 0x7306
    3d68:	01000000 	mrseq	r0, (UNDEF: 0)
    3d6c:	0c000107 	stfeqs	f0, [r0], {7}
    3d70:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
    3d74:	e3039406 	movw	r9, #13318	; 0x3406
    3d78:	01000000 	mrseq	r0, (UNDEF: 0)
    3d7c:	00000001 	andeq	r0, r0, r1
    3d80:	00087103 	andeq	r7, r8, r3, lsl #2
    3d84:	03960600 	orrseq	r0, r6, #0, 12
    3d88:	0000025f 	andeq	r0, r0, pc, asr r2
    3d8c:	00028908 	andeq	r8, r2, r8, lsl #18
    3d90:	02950f00 	addseq	r0, r5, #0, 30
    3d94:	02a50000 	adceq	r0, r5, #0
    3d98:	00100000 	andseq	r0, r0, r0
    3d9c:	00029a08 	andeq	r9, r2, r8, lsl #20
    3da0:	03830e00 	orreq	r0, r3, #0, 28
    3da4:	9c060000 	stcls	0, cr0, [r6], {-0}
    3da8:	0002a517 	andeq	sl, r2, r7, lsl r5
    3dac:	0f010100 	svceq	0x00010100
    3db0:	000000d9 	ldrdeq	r0, [r0], -r9
    3db4:	000002c3 	andeq	r0, r0, r3, asr #5
    3db8:	b8080010 	stmdalt	r8, {r4}
    3dbc:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    3dc0:	000004f8 	strdeq	r0, [r0], -r8
    3dc4:	c3130607 	tstgt	r3, #7340032	; 0x700000
    3dc8:	01000002 	tsteq	r0, r2
    3dcc:	07400e01 	strbeq	r0, [r0, -r1, lsl #28]
    3dd0:	c3050000 	movwgt	r0, #20480	; 0x5000
    3dd4:	0000f90e 	andeq	pc, r0, lr, lsl #18
    3dd8:	11010100 	mrsne	r0, (UNDEF: 17)
    3ddc:	000009aa 	andeq	r0, r0, sl, lsr #19
    3de0:	10016e08 	andne	r6, r1, r8, lsl #28
    3de4:	000002f1 	strdeq	r0, [r0], -r1
    3de8:	02f7040a 	rscseq	r0, r7, #167772160	; 0xa000000
    3dec:	01120000 	tsteq	r2, r0
    3df0:	00000303 	andeq	r0, r0, r3, lsl #6
    3df4:	0000cd13 	andeq	ip, r0, r3, lsl sp
    3df8:	f00f0000 			; <UNDEFINED> instruction: 0xf00f0000
    3dfc:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    3e00:	10000003 	andne	r0, r0, r3
    3e04:	03030800 	movweq	r0, #14336	; 0x3800
    3e08:	08140000 	ldmdaeq	r4, {}	; <UNPREDICTABLE>
    3e0c:	08000008 	stmdaeq	r0, {r3}
    3e10:	0e16017f 	mrceq	1, 0, r0, cr6, cr15, {3}
    3e14:	01000003 	tsteq	r0, r3
    3e18:	03661401 	cmneq	r6, #16777216	; 0x1000000
    3e1c:	82080000 	andhi	r0, r8, #0
    3e20:	01051401 	tsteq	r5, r1, lsl #8
    3e24:	01010000 	mrseq	r0, (UNDEF: 1)
    3e28:	0809040b 	stmdaeq	r9, {r0, r1, r3, sl}
    3e2c:	00035509 	andeq	r5, r3, r9, lsl #10
    3e30:	01fa0d00 	mvnseq	r0, r0, lsl #26
    3e34:	0f090000 	svceq	0x00090000
    3e38:	0000cd07 	andeq	ip, r0, r7, lsl #26
    3e3c:	e50d0000 	str	r0, [sp, #-0]
    3e40:	09000009 	stmdbeq	r0, {r0, r3}
    3e44:	00cd0310 	sbceq	r0, sp, r0, lsl r3
    3e48:	00020000 	andeq	r0, r2, r0
    3e4c:	000a9c03 	andeq	r9, sl, r3, lsl #24
    3e50:	03110900 	tsteq	r1, #0, 18
    3e54:	00000331 	andeq	r0, r0, r1, lsr r3
    3e58:	1609200b 	strne	r2, [r9], -fp
    3e5c:	0003d309 	andeq	sp, r3, r9, lsl #6
    3e60:	04430d00 	strbeq	r0, [r3], #-3328	; 0xfffff300
    3e64:	17090000 	strne	r0, [r9, -r0]
    3e68:	0003ed08 	andeq	lr, r3, r8, lsl #26
    3e6c:	8b0d0000 	blhi	343e74 <__ccfg+0x323ecc>
    3e70:	09000007 	stmdbeq	r0, {r0, r1, r2}
    3e74:	04080818 	streq	r0, [r8], #-2072	; 0xfffff7e8
    3e78:	0d040000 	stceq	0, cr0, [r4, #-0]
    3e7c:	00000933 	andeq	r0, r0, r3, lsr r9
    3e80:	3e081909 	vmlacc.f16	s2, s16, s18	; <UNPREDICTABLE>
    3e84:	08000004 	stmdaeq	r0, {r2}
    3e88:	0009dd0d 	andeq	sp, r9, sp, lsl #26
    3e8c:	081a0900 	ldmdaeq	sl, {r8, fp}
    3e90:	00000459 	andeq	r0, r0, r9, asr r4
    3e94:	07cc0d0c 	strbeq	r0, [ip, ip, lsl #26]
    3e98:	1b090000 	blne	243ea0 <__ccfg+0x223ef8>
    3e9c:	00046f08 	andeq	r6, r4, r8, lsl #30
    3ea0:	3c0d1000 	stccc	0, cr1, [sp], {-0}
    3ea4:	09000008 	stmdbeq	r0, {r3}
    3ea8:	046f081c 	strbteq	r0, [pc], #-2076	; 3eb0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xe4>
    3eac:	0d140000 	ldceq	0, cr0, [r4, #-0]
    3eb0:	000001dd 	ldrdeq	r0, [r0], -sp
    3eb4:	6f081d09 	svcvs	0x00081d09
    3eb8:	18000004 	stmdane	r0, {r2}
    3ebc:	0002b80d 	andeq	fp, r2, sp, lsl #16
    3ec0:	061e0900 	ldreq	r0, [lr], -r0, lsl #18
    3ec4:	00000081 	andeq	r0, r0, r1, lsl #1
    3ec8:	0115001c 	tsteq	r5, ip, lsl r0
    3ecc:	00000081 	andeq	r0, r0, r1, lsl #1
    3ed0:	000003ed 	andeq	r0, r0, sp, ror #7
    3ed4:	00008113 	andeq	r8, r0, r3, lsl r1
    3ed8:	00811300 	addeq	r1, r1, r0, lsl #6
    3edc:	b5130000 	ldrlt	r0, [r3, #-0]
    3ee0:	00000000 	andeq	r0, r0, r0
    3ee4:	03d3040a 	bicseq	r0, r3, #167772160	; 0xa000000
    3ee8:	01150000 	tsteq	r5, r0
    3eec:	00000081 	andeq	r0, r0, r1, lsl #1
    3ef0:	00000408 	andeq	r0, r0, r8, lsl #8
    3ef4:	00008113 	andeq	r8, r0, r3, lsl r1
    3ef8:	00811300 	addeq	r1, r1, r0, lsl #6
    3efc:	0a000000 	beq	3f04 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x138>
    3f00:	0003f304 	andeq	pc, r3, r4, lsl #6
    3f04:	81011500 	tsthi	r1, r0, lsl #10
    3f08:	32000000 	andcc	r0, r0, #0
    3f0c:	13000004 	movwne	r0, #4
    3f10:	00000081 	andeq	r0, r0, r1, lsl #1
    3f14:	00011613 	andeq	r1, r1, r3, lsl r6
    3f18:	00811300 	addeq	r1, r1, r0, lsl #6
    3f1c:	32130000 	andscc	r0, r3, #0
    3f20:	13000004 	movwne	r0, #4
    3f24:	00000438 	andeq	r0, r0, r8, lsr r4
    3f28:	81040a00 	tsthi	r4, r0, lsl #20
    3f2c:	0a000000 	beq	3f34 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x168>
    3f30:	00035504 	andeq	r5, r3, r4, lsl #10
    3f34:	0e040a00 	vmlaeq.f32	s0, s8, s0
    3f38:	15000004 	strne	r0, [r0, #-4]
    3f3c:	00008101 	andeq	r8, r0, r1, lsl #2
    3f40:	00045900 	andeq	r5, r4, r0, lsl #18
    3f44:	01161300 	tsteq	r6, r0, lsl #6
    3f48:	38130000 	ldmdacc	r3, {}	; <UNPREDICTABLE>
    3f4c:	00000004 	andeq	r0, r0, r4
    3f50:	0444040a 	strbeq	r0, [r4], #-1034	; 0xfffffbf6
    3f54:	01150000 	tsteq	r5, r0
    3f58:	00000081 	andeq	r0, r0, r1, lsl #1
    3f5c:	0000046f 	andeq	r0, r0, pc, ror #8
    3f60:	00011613 	andeq	r1, r1, r3, lsl r6
    3f64:	040a0000 	streq	r0, [sl], #-0
    3f68:	0000045f 	andeq	r0, r0, pc, asr r4
    3f6c:	000a5203 	andeq	r5, sl, r3, lsl #4
    3f70:	031f0900 	tsteq	pc, #0, 18
    3f74:	00000361 	andeq	r0, r0, r1, ror #6
    3f78:	00047508 	andeq	r7, r4, r8, lsl #10
    3f7c:	13cc1600 	bicne	r1, ip, #0, 12
    3f80:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    3f84:	04ae0824 	strteq	r0, [lr], #2084	; 0x824
    3f88:	170d0000 	strne	r0, [sp, -r0]
    3f8c:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    3f90:	04ae1825 	strteq	r1, [lr], #2085	; 0x825
    3f94:	0d000000 	stceq	0, cr0, [r0, #-0]
    3f98:	000012f8 	strdeq	r1, [r0], -r8
    3f9c:	ae062609 	cfmadd32ge	mvax0, mvfx2, mvfx6, mvfx9
    3fa0:	04000004 	streq	r0, [r0], #-4
    3fa4:	86040a00 	strhi	r0, [r4], -r0, lsl #20
    3fa8:	03000004 	movweq	r0, #4
    3fac:	000013da 	ldrdeq	r1, [r0], -sl
    3fb0:	861e2909 	ldrhi	r2, [lr], -r9, lsl #18
    3fb4:	03000004 	movweq	r0, #4
    3fb8:	000014e8 	andeq	r1, r0, r8, ror #9
    3fbc:	861e2a09 	ldrhi	r2, [lr], -r9, lsl #20
    3fc0:	0b000004 	bleq	3fd8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x20c>
    3fc4:	023f0902 	eorseq	r0, pc, #32768	; 0x8000
    3fc8:	00000536 	andeq	r0, r0, r6, lsr r5
    3fcc:	0014810c 	andseq	r8, r4, ip, lsl #2
    3fd0:	09400900 	stmdbeq	r0, {r8, fp}^
    3fd4:	000000cd 	andeq	r0, r0, sp, asr #1
    3fd8:	000f0102 	andeq	r0, pc, r2, lsl #2
    3fdc:	00153a0c 	andseq	r3, r5, ip, lsl #20
    3fe0:	04410900 	strbeq	r0, [r1], #-2304	; 0xfffff700
    3fe4:	000000cd 	andeq	r0, r0, sp, asr #1
    3fe8:	000e0102 	andeq	r0, lr, r2, lsl #2
    3fec:	0013fc0c 	andseq	pc, r3, ip, lsl #24
    3ff0:	04420900 	strbeq	r0, [r2], #-2304	; 0xfffff700
    3ff4:	000000cd 	andeq	r0, r0, sp, asr #1
    3ff8:	000d0102 	andeq	r0, sp, r2, lsl #2
    3ffc:	00149a0c 	andseq	r9, r4, ip, lsl #20
    4000:	04430900 	strbeq	r0, [r3], #-2304	; 0xfffff700
    4004:	000000cd 	andeq	r0, r0, sp, asr #1
    4008:	00060702 	andeq	r0, r6, r2, lsl #14
    400c:	0014f60c 	andseq	pc, r4, ip, lsl #12
    4010:	04440900 	strbeq	r0, [r4], #-2304	; 0xfffff700
    4014:	000000cd 	andeq	r0, r0, sp, asr #1
    4018:	00030302 	andeq	r0, r3, r2, lsl #6
    401c:	0014730c 	andseq	r7, r4, ip, lsl #6
    4020:	04450900 	strbeq	r0, [r5], #-2304	; 0xfffff700
    4024:	000000cd 	andeq	r0, r0, sp, asr #1
    4028:	00000302 	andeq	r0, r0, r2, lsl #6
    402c:	09021700 	stmdbeq	r2, {r8, r9, sl, ip}
    4030:	0556093d 	ldrbeq	r0, [r6, #-2365]	; 0xfffff6c3
    4034:	ed180000 	ldc	0, cr0, [r8, #-0]
    4038:	09000004 	stmdbeq	r0, {r2}
    403c:	00cd073e 	sbceq	r0, sp, lr, lsr r7
    4040:	62190000 	andsvs	r0, r9, #0
    4044:	04460900 	strbeq	r0, [r6], #-2304	; 0xfffff700
    4048:	000004cc 	andeq	r0, r0, ip, asr #9
    404c:	12fd0300 	rscsne	r0, sp, #0, 6
    4050:	47090000 	strmi	r0, [r9, -r0]
    4054:	00053603 	andeq	r3, r5, r3, lsl #12
    4058:	09081700 	stmdbeq	r8, {r8, r9, sl, ip}
    405c:	05840550 	streq	r0, [r4, #1360]	; 0x550
    4060:	1c180000 	ldcne	0, cr0, [r8], {-0}
    4064:	09000015 	stmdbeq	r0, {r0, r2, r4}
    4068:	04b41051 	ldrteq	r1, [r4], #81	; 0x51
    406c:	3d180000 	ldccc	0, cr0, [r8, #-0]
    4070:	09000014 	stmdbeq	r0, {r2, r4}
    4074:	03550b52 	cmpeq	r5, #83968	; 0x14800
    4078:	16000000 	strne	r0, [r0], -r0
    407c:	0000152b 	andeq	r1, r0, fp, lsr #10
    4080:	084c090c 	stmdaeq	ip, {r2, r3, r8, fp}^
    4084:	000005b7 			; <UNDEFINED> instruction: 0x000005b7
    4088:	0900751a 	stmdbeq	r0, {r1, r3, r4, r8, sl, ip, sp, lr}
    408c:	05620758 	strbeq	r0, [r2, #-1880]!	; 0xfffff8a8
    4090:	0d000000 	stceq	0, cr0, [r0, #-0]
    4094:	000014fd 	strdeq	r1, [r0], -sp
    4098:	cd076309 	stcgt	3, cr6, [r7, #-36]	; 0xffffffdc
    409c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    40a0:	0014dd0d 	andseq	sp, r4, sp, lsl #26
    40a4:	10680900 	rsbne	r0, r8, r0, lsl #18
    40a8:	00000556 	andeq	r0, r0, r6, asr r5
    40ac:	e803000a 	stmda	r3, {r1, r3}
    40b0:	09000013 	stmdbeq	r0, {r0, r1, r4}
    40b4:	05841f79 	streq	r1, [r4, #3961]	; 0xf79
    40b8:	0c0b0000 	stceq	0, cr0, [fp], {-0}
    40bc:	e7097b09 	str	r7, [r9, -r9, lsl #22]
    40c0:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
    40c4:	00001431 	andeq	r1, r0, r1, lsr r4
    40c8:	c0117f09 	andsgt	r7, r1, r9, lsl #30
    40cc:	00000004 	andeq	r0, r0, r4
    40d0:	0014c90d 	andseq	ip, r4, sp, lsl #18
    40d4:	11830900 	orrne	r0, r3, r0, lsl #18
    40d8:	00000556 	andeq	r0, r0, r6, asr r5
    40dc:	63030008 	movwvs	r0, #12296	; 0x3008
    40e0:	09000014 	stmdbeq	r0, {r2, r4}
    40e4:	05c30392 	strbeq	r0, [r3, #914]	; 0x392
    40e8:	43140000 	tstmi	r4, #0
    40ec:	08000003 	stmdaeq	r0, {r0, r1}
    40f0:	f90e02d8 			; <UNDEFINED> instruction: 0xf90e02d8
    40f4:	01000000 	mrseq	r0, (UNDEF: 0)
    40f8:	08081b01 	stmdaeq	r8, {r0, r8, r9, fp, ip}
    40fc:	29090303 	stmdbcs	r9, {r0, r1, r8, r9}
    4100:	1c000006 	stcne	0, cr0, [r0], {6}
    4104:	00003832 	andeq	r3, r0, r2, lsr r8
    4108:	07030708 	streq	r0, [r3, -r8, lsl #14]
    410c:	000000cd 	andeq	r0, r0, sp, asr #1
    4110:	0bdc1c00 	bleq	ff70b118 <_estack+0xdf706118>
    4114:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    4118:	010a0803 	tsteq	sl, r3, lsl #16
    411c:	00040000 	andeq	r0, r4, r0
    4120:	0003fb11 	andeq	pc, r3, r1, lsl fp	; <UNPREDICTABLE>
    4124:	03090800 	movweq	r0, #38912	; 0x9800
    4128:	00060203 	andeq	r0, r6, r3, lsl #4
    412c:	00331d00 	eorseq	r1, r3, r0, lsl #26
    4130:	08300000 	ldmdaeq	r0!, {}	; <UNPREDICTABLE>
    4134:	9908030b 	stmdbls	r8, {r0, r1, r3, r8, r9}
    4138:	1c000006 	stcne	0, cr0, [r0], {6}
    413c:	00001add 	ldrdeq	r1, [r0], -sp
    4140:	08031408 	stmdaeq	r3, {r3, sl, ip}
    4144:	000000cd 	andeq	r0, r0, sp, asr #1
    4148:	09541c00 	ldmdbeq	r4, {sl, fp, ip}^
    414c:	15080000 	strne	r0, [r8, #-0]
    4150:	00cd0803 	sbceq	r0, sp, r3, lsl #16
    4154:	1c020000 	stcne	0, cr0, [r2], {-0}
    4158:	000049a2 	andeq	r4, r0, r2, lsr #19
    415c:	0b031608 	bleq	c9984 <__ccfg+0xa99dc>
    4160:	000002e4 	andeq	r0, r0, r4, ror #5
    4164:	44051c04 	strmi	r1, [r5], #-3076	; 0xfffff3fc
    4168:	17080000 	strne	r0, [r8, -r0]
    416c:	010a0903 	tsteq	sl, r3, lsl #18
    4170:	1c080000 	stcne	0, cr0, [r8], {-0}
    4174:	00000007 	andeq	r0, r0, r7
    4178:	0f031808 	svceq	0x00031808
    417c:	00000699 	muleq	r0, r9, r6
    4180:	07c71c0c 	strbeq	r1, [r7, ip, lsl #24]
    4184:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
    4188:	06a91503 	strteq	r1, [r9], r3, lsl #10
    418c:	002c0000 	eoreq	r0, ip, r0
    4190:	0006290f 	andeq	r2, r6, pc, lsl #18
    4194:	0006a900 	andeq	sl, r6, r0, lsl #18
    4198:	00881e00 	addeq	r1, r8, r0, lsl #28
    419c:	00030000 	andeq	r0, r3, r0
    41a0:	0636040a 	ldrteq	r0, [r6], -sl, lsl #8
    41a4:	49110000 	ldmdbmi	r1, {}	; <UNPREDICTABLE>
    41a8:	08000009 	stmdaeq	r0, {r0, r3}
    41ac:	361b031c 			; <UNDEFINED> instruction: 0x361b031c
    41b0:	14000006 	strne	r0, [r0], #-6
    41b4:	00000929 	andeq	r0, r0, r9, lsr #18
    41b8:	14031e08 	strne	r1, [r3], #-3592	; 0xfffff1f8
    41bc:	000006cb 	andeq	r0, r0, fp, asr #13
    41c0:	040a0101 	streq	r0, [sl], #-257	; 0xfffffeff
    41c4:	000006af 	andeq	r0, r0, pc, lsr #13
    41c8:	00058b0e 	andeq	r8, r5, lr, lsl #22
    41cc:	131d0a00 	tstne	sp, #0, 20
    41d0:	000000cd 	andeq	r0, r0, sp, asr #1
    41d4:	760e0101 	strvc	r0, [lr], -r1, lsl #2
    41d8:	0a000002 	beq	41e8 <memcpy+0x84>
    41dc:	00de1a1e 	sbcseq	r1, lr, lr, lsl sl
    41e0:	01010000 	mrseq	r0, (UNDEF: 1)
    41e4:	0009960e 	andeq	r9, r9, lr, lsl #12
    41e8:	241e0a00 	ldrcs	r0, [lr], #-2560	; 0xfffff600
    41ec:	000000de 	ldrdeq	r0, [r0], -lr
    41f0:	b20e0101 	andlt	r0, lr, #1073741824	; 0x40000000
    41f4:	0a000009 	beq	4220 <srand+0x10>
    41f8:	06cb1422 	strbeq	r1, [fp], r2, lsr #8
    41fc:	01010000 	mrseq	r0, (UNDEF: 1)
    4200:	00137503 	andseq	r7, r3, r3, lsl #10
    4204:	0f0e0b00 	svceq	0x000e0b00
    4208:	00000715 	andeq	r0, r0, r5, lsl r7
    420c:	071b040a 	ldreq	r0, [fp, -sl, lsl #8]
    4210:	01150000 	tsteq	r5, r0
    4214:	00000081 	andeq	r0, r0, r1, lsl #1
    4218:	00000730 	andeq	r0, r0, r0, lsr r7
    421c:	00008113 	andeq	r8, r0, r3, lsl r1
    4220:	01161300 	tsteq	r6, r0, lsl #6
    4224:	0f000000 	svceq	0x00000000
    4228:	00000740 	andeq	r0, r0, r0, asr #14
    422c:	00000740 	andeq	r0, r0, r0, asr #14
    4230:	0000881e 	andeq	r8, r0, lr, lsl r8
    4234:	0a000700 	beq	5e3c <__exidx_end+0xd94>
    4238:	0005e704 	andeq	lr, r5, r4, lsl #14
    423c:	14091f00 	strne	r1, [r9], #-3840	; 0xfffff100
    4240:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    4244:	00073015 	andeq	r3, r7, r5, lsl r0
    4248:	68030500 	stmdavs	r3, {r8, sl}
    424c:	0f200005 	svceq	0x00200005
    4250:	00000709 	andeq	r0, r0, r9, lsl #14
    4254:	00000768 	andeq	r0, r0, r8, ror #14
    4258:	0000881e 	andeq	r8, r0, lr, lsl r8
    425c:	1f000200 	svcne	0x00000200
    4260:	00001478 	andeq	r1, r0, r8, ror r4
    4264:	5814130c 	ldmdapl	r4, {r2, r3, r8, r9, ip}
    4268:	05000007 	streq	r0, [r0, #-7]
    426c:	00059403 	andeq	r9, r5, r3, lsl #8
    4270:	078a0f20 	streq	r0, [sl, r0, lsr #30]
    4274:	078a0000 	streq	r0, [sl, r0]
    4278:	881e0000 	ldmdahi	lr, {}	; <UNPREDICTABLE>
    427c:	02000000 	andeq	r0, r0, #0
    4280:	c0040a00 	andgt	r0, r4, r0, lsl #20
    4284:	1f000004 	svcne	0x00000004
    4288:	000013c4 	andeq	r1, r0, r4, asr #7
    428c:	7a13190c 	bvc	4ca6c4 <__ccfg+0x4aa71c>
    4290:	05000007 	streq	r0, [r0, #-7]
    4294:	00058803 	andeq	r8, r5, r3, lsl #16
    4298:	00810f20 	addeq	r0, r1, r0, lsr #30
    429c:	07b20000 	ldreq	r0, [r2, r0]!
    42a0:	881e0000 	ldmdahi	lr, {}	; <UNPREDICTABLE>
    42a4:	02000000 	andeq	r0, r0, #0
    42a8:	139c1f00 	orrsne	r1, ip, #0, 30
    42ac:	1e0c0000 	cdpne	0, 0, cr0, cr12, cr0, {0}
    42b0:	0007a20f 	andeq	sl, r7, pc, lsl #4
    42b4:	a0030500 	andge	r0, r3, r0, lsl #10
    42b8:	0f200005 	svceq	0x00200005
    42bc:	000007d4 	ldrdeq	r0, [r0], -r4
    42c0:	000007d4 	ldrdeq	r0, [r0], -r4
    42c4:	0000881e 	andeq	r8, r0, lr, lsl r8
    42c8:	0a000200 	beq	4ad0 <patchGenfskRfe+0x3ac>
    42cc:	00048104 	andeq	r8, r4, r4, lsl #2
    42d0:	15231f00 	strne	r1, [r3, #-3840]!	; 0xfffff100
    42d4:	230c0000 	movwcs	r0, #49152	; 0xc000
    42d8:	0007c41b 	andeq	ip, r7, fp, lsl r4
    42dc:	ac030500 	cfstr32ge	mvfx0, [r3], {-0}
    42e0:	20200005 	eorcs	r0, r0, r5
    42e4:	00149101 	andseq	r9, r4, r1, lsl #2
    42e8:	050d0100 	streq	r0, [sp, #-256]	; 0xffffff00
    42ec:	1d840101 	stfnes	f0, [r4, #4]
    42f0:	1d860000 	stcne	0, cr0, [r6]
    42f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    42f8:	13ab0121 			; <UNDEFINED> instruction: 0x13ab0121
    42fc:	05010000 	streq	r0, [r1, #-0]
    4300:	81010105 	tsthi	r1, r5, lsl #2
	...
    430c:	01000000 	mrseq	r0, (UNDEF: 0)
    4310:	0008639c 	muleq	r8, ip, r3
    4314:	68702200 	ldmdavs	r0!, {r9, sp}^
    4318:	05010079 	streq	r0, [r1, #-121]	; 0xffffff87
    431c:	00812d05 	addeq	r2, r1, r5, lsl #26
    4320:	11ac0000 			; <UNDEFINED> instruction: 0x11ac0000
    4324:	4e230000 	cdpmi	0, 2, cr0, cr3, cr0, {0}
    4328:	00000011 	andeq	r0, r0, r1, lsl r0
    432c:	e0000000 	and	r0, r0, r0
    4330:	01000007 	tsteq	r0, r7
    4334:	2409050a 	strcs	r0, [r9], #-1290	; 0xfffffaf6
    4338:	00001160 	andeq	r1, r0, r0, ror #2
    433c:	000011ca 	andeq	r1, r0, sl, asr #3
    4340:	0007e025 	andeq	lr, r7, r5, lsr #32
    4344:	116b2600 	cmnne	fp, r0, lsl #12
    4348:	11dd0000 	bicsne	r0, sp, r0
    434c:	76260000 	strtvc	r0, [r6], -r0
    4350:	fb000011 	blx	439e <_gettimeofday+0x8a>
    4354:	00000011 	andeq	r0, r0, r1, lsl r0
    4358:	01270000 			; <UNDEFINED> instruction: 0x01270000
    435c:	000014be 			; <UNDEFINED> instruction: 0x000014be
    4360:	0104fa01 	tsteq	r4, r1, lsl #20	; <UNPREDICTABLE>
    4364:	001d4801 	andseq	r4, sp, r1, lsl #16
    4368:	001d8400 	andseq	r8, sp, r0, lsl #8
    436c:	9d9c0100 	ldflss	f0, [ip]
    4370:	22000008 	andcs	r0, r0, #8
    4374:	00746b70 	rsbseq	r6, r4, r0, ror fp
    4378:	3004fa01 	andcc	pc, r4, r1, lsl #20
    437c:	00000116 	andeq	r0, r0, r6, lsl r1
    4380:	00001225 	andeq	r1, r0, r5, lsr #4
    4384:	01006228 	tsteq	r0, r8, lsr #4
    4388:	9d0c04fe 	cfstrsls	mvf0, [ip, #-1016]	; 0xfffffc08
    438c:	43000008 	movwmi	r0, #8
    4390:	00000012 	andeq	r0, r0, r2, lsl r0
    4394:	05b7040a 	ldreq	r0, [r7, #1034]!	; 0x40a
    4398:	01210000 			; <UNDEFINED> instruction: 0x01210000
    439c:	0000130b 	andeq	r1, r0, fp, lsl #6
    43a0:	0104e901 	tsteq	r4, r1, lsl #18
    43a4:	00011601 	andeq	r1, r1, r1, lsl #12
    43a8:	001d1400 	andseq	r1, sp, r0, lsl #8
    43ac:	001d4800 	andseq	r4, sp, r0, lsl #16
    43b0:	f19c0100 			; <UNDEFINED> instruction: 0xf19c0100
    43b4:	22000008 	andcs	r0, r0, #8
    43b8:	00796870 	rsbseq	r6, r9, r0, ror r8
    43bc:	2f04e901 	svccs	0x0004e901
    43c0:	00000081 	andeq	r0, r0, r1, lsl #1
    43c4:	00001261 	andeq	r1, r0, r1, ror #4
    43c8:	00716f28 	rsbseq	r6, r1, r8, lsr #30
    43cc:	0b04ed01 	bleq	13f7d8 <__ccfg+0x11f830>
    43d0:	0000078a 	andeq	r0, r0, sl, lsl #15
    43d4:	0000127f 	andeq	r1, r0, pc, ror r2
    43d8:	01006228 	tsteq	r0, r8, lsr #4
    43dc:	9d0c04ee 	cfstrsls	mvf0, [ip, #-952]	; 0xfffffc48
    43e0:	92000008 	andls	r0, r0, #8
    43e4:	00000012 	andeq	r0, r0, r2, lsl r0
    43e8:	137f0121 	cmnne	pc, #1073741832	; 0x40000008
    43ec:	d2010000 	andle	r0, r1, #0
    43f0:	16010104 	strne	r0, [r1], -r4, lsl #2
    43f4:	d4000001 	strle	r0, [r0], #-1
    43f8:	1400001c 	strne	r0, [r0], #-28	; 0xffffffe4
    43fc:	0100001d 	tsteq	r0, sp, lsl r0
    4400:	0009509c 	muleq	r9, ip, r0
    4404:	68702200 	ldmdavs	r0!, {r9, sp}^
    4408:	d2010079 	andle	r0, r1, #121	; 0x79
    440c:	00812f04 	addeq	r2, r1, r4, lsl #30
    4410:	12b10000 	adcsne	r0, r1, #0
    4414:	6c220000 	stcvs	0, cr0, [r2], #-0
    4418:	01006e65 	tsteq	r0, r5, ror #28
    441c:	323904d2 	eorscc	r0, r9, #-771751936	; 0xd2000000
    4420:	cf000004 	svcgt	0x00000004
    4424:	28000012 	stmdacs	r0, {r1, r4}
    4428:	0100716f 	tsteq	r0, pc, ror #2
    442c:	8a0b04d7 	bhi	2c5790 <__ccfg+0x2a57e8>
    4430:	ed000007 	stc	0, cr0, [r0, #-28]	; 0xffffffe4
    4434:	28000012 	stmdacs	r0, {r1, r4}
    4438:	d8010062 	stmdale	r1, {r1, r5, r6}
    443c:	089d0c04 	ldmeq	sp, {r2, sl, fp}
    4440:	130b0000 	movwne	r0, #45056	; 0xb000
    4444:	21000000 	mrscs	r0, (UNDEF: 0)
    4448:	00151101 	andseq	r1, r5, r1, lsl #2
    444c:	04a10100 	strteq	r0, [r1], #256	; 0x100
    4450:	00810101 	addeq	r0, r1, r1, lsl #2
    4454:	1c380000 	ldcne	0, cr0, [r8], #-0
    4458:	1cd40000 	ldclne	0, cr0, [r4], {0}
    445c:	9c010000 	stcls	0, cr0, [r1], {-0}
    4460:	000009eb 	andeq	r0, r0, fp, ror #19
    4464:	79687022 	stmdbvc	r8!, {r1, r5, ip, sp, lr}^
    4468:	04a10100 	strteq	r0, [r1], #256	; 0x100
    446c:	0000812b 	andeq	r8, r0, fp, lsr #2
    4470:	00133500 	andseq	r3, r3, r0, lsl #10
    4474:	00702200 	rsbseq	r2, r0, r0, lsl #4
    4478:	3804a101 	stmdacc	r4, {r0, r8, sp, pc}
    447c:	00000116 	andeq	r0, r0, r6, lsl r1
    4480:	00001369 	andeq	r1, r0, r9, ror #6
    4484:	6e656c22 	cdpvs	12, 6, cr6, cr5, cr2, {1}
    4488:	04a10100 	strteq	r0, [r1], #256	; 0x100
    448c:	0000813f 	andeq	r8, r0, pc, lsr r1
    4490:	00139d00 	andseq	r9, r3, r0, lsl #26
    4494:	6c702900 			; <UNDEFINED> instruction: 0x6c702900
    4498:	a6010067 	strge	r0, [r1], -r7, rrx
    449c:	00810604 	addeq	r0, r1, r4, lsl #12
    44a0:	64280000 	strtvs	r0, [r8], #-0
    44a4:	01007073 	tsteq	r0, r3, ror r0
    44a8:	810b04a6 	smlatbhi	fp, r6, r4, r0
    44ac:	d1000000 	mrsle	r0, (UNDEF: 0)
    44b0:	2a000013 	bcs	4504 <_gettimeofday+0x1f0>
    44b4:	00736573 	rsbseq	r6, r3, r3, ror r5
    44b8:	1004a601 	andne	sl, r4, r1, lsl #12
    44bc:	00000081 	andeq	r0, r0, r1, lsl #1
    44c0:	2a509102 	bcs	14288d0 <__ccfg+0x1408928>
    44c4:	01007061 	tsteq	r0, r1, rrx
    44c8:	550b04a7 	strpl	r0, [fp, #-1191]	; 0xfffffb59
    44cc:	02000003 	andeq	r0, r0, #3
    44d0:	63285491 			; <UNDEFINED> instruction: 0x63285491
    44d4:	04a80100 	strteq	r0, [r8], #256	; 0x100
    44d8:	0001160a 	andeq	r1, r1, sl, lsl #12
    44dc:	0013ef00 	andseq	lr, r3, r0, lsl #30
    44e0:	01210000 			; <UNDEFINED> instruction: 0x01210000
    44e4:	0000136a 	andeq	r1, r0, sl, ror #6
    44e8:	01048701 	tsteq	r4, r1, lsl #14
    44ec:	00008101 	andeq	r8, r0, r1, lsl #2
    44f0:	001be800 	andseq	lr, fp, r0, lsl #16
    44f4:	001c3800 	andseq	r3, ip, r0, lsl #16
    44f8:	4a9c0100 	bmi	fe704900 <_estack+0xde6ff900>
    44fc:	2200000a 	andcs	r0, r0, #10
    4500:	00796870 	rsbseq	r6, r9, r0, ror r8
    4504:	2b048701 	blcs	126110 <__ccfg+0x106168>
    4508:	00000081 	andeq	r0, r0, r1, lsl #1
    450c:	00001402 	andeq	r1, r0, r2, lsl #8
    4510:	00737022 	rsbseq	r7, r3, r2, lsr #32
    4514:	3a048701 	bcc	126120 <__ccfg+0x106178>
    4518:	00000709 	andeq	r0, r0, r9, lsl #14
    451c:	00001420 	andeq	r1, r0, r0, lsr #8
    4520:	000af42b 	andeq	pc, sl, fp, lsr #8
    4524:	04870100 	streq	r0, [r7], #256	; 0x100
    4528:	00008142 	andeq	r8, r0, r2, asr #2
    452c:	00143e00 	andseq	r3, r4, r0, lsl #28
    4530:	00712800 	rsbseq	r2, r1, r0, lsl #16
    4534:	0b048d01 	bleq	127940 <__ccfg+0x107998>
    4538:	0000078a 	andeq	r0, r0, sl, lsl #15
    453c:	0000145c 	andeq	r1, r0, ip, asr r4
    4540:	28012c00 	stmdacs	r1, {sl, fp, sp}
    4544:	01000014 	tsteq	r0, r4, lsl r0
    4548:	01010386 	smlabbeq	r1, r6, r3, r0
    454c:	00000116 	andeq	r0, r0, r6, lsl r1
    4550:	000a9101 	andeq	r9, sl, r1, lsl #2
    4554:	19a62d00 	stmibne	r6!, {r8, sl, fp, sp}
    4558:	86010000 	strhi	r0, [r1], -r0
    455c:	00812d03 	addeq	r2, r1, r3, lsl #26
    4560:	642e0000 	strtvs	r0, [lr], #-0
    4564:	01007073 	tsteq	r0, r3, ror r0
    4568:	81370386 	teqhi	r7, r6, lsl #7
    456c:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    4570:	00736573 	rsbseq	r6, r3, r3, ror r5
    4574:	40038601 	andmi	r8, r3, r1, lsl #12
    4578:	00000081 	andeq	r0, r0, r1, lsl #1
    457c:	01007029 	tsteq	r0, r9, lsr #32
    4580:	9d0c038a 	stcls	3, cr0, [ip, #-552]	; 0xfffffdd8
    4584:	00000008 	andeq	r0, r0, r8
    4588:	135d0127 	cmpne	sp, #-1073741815	; 0xc0000009
    458c:	7f010000 	svcvc	0x00010000
    4590:	00010103 	andeq	r0, r1, r3, lsl #2
    4594:	00000000 	andeq	r0, r0, r0
    4598:	01000000 	mrseq	r0, (UNDEF: 0)
    459c:	000acb9c 	muleq	sl, ip, fp
    45a0:	00702200 	rsbseq	r2, r0, r0, lsl #4
    45a4:	32037f01 	andcc	r7, r3, #1, 30
    45a8:	00000116 	andeq	r0, r0, r6, lsl r1
    45ac:	0000148b 	andeq	r1, r0, fp, lsl #9
    45b0:	70736422 	rsbsvc	r6, r3, r2, lsr #8
    45b4:	037f0100 	cmneq	pc, #0, 2
    45b8:	00008139 	andeq	r8, r0, r9, lsr r1
    45bc:	00149e00 	andseq	r9, r4, r0, lsl #28
    45c0:	01210000 			; <UNDEFINED> instruction: 0x01210000
    45c4:	000014a2 	andeq	r1, r0, r2, lsr #9
    45c8:	01036b01 	tsteq	r3, r1, lsl #22
    45cc:	00011601 	andeq	r1, r1, r1, lsl #12
	...
    45d8:	259c0100 	ldrcs	r0, [ip, #256]	; 0x100
    45dc:	2200000b 	andcs	r0, r0, #11
    45e0:	6b010070 	blvs	447a8 <__ccfg+0x24800>
    45e4:	01163303 	tsteq	r6, r3, lsl #6
    45e8:	14b10000 	ldrtne	r0, [r1], #0
    45ec:	042b0000 	strteq	r0, [fp], #-0
    45f0:	01000015 	tsteq	r0, r5, lsl r0
    45f4:	813a036b 	teqhi	sl, fp, ror #6
    45f8:	cf000000 	svcgt	0x00000000
    45fc:	28000014 	stmdacs	r0, {r2, r4}
    4600:	01006370 	tsteq	r0, r0, ror r3
    4604:	9d0c036f 	stcls	3, cr0, [ip, #-444]	; 0xfffffe44
    4608:	ed000008 	stc	0, cr0, [r0, #-32]	; 0xffffffe0
    460c:	29000014 	stmdbcs	r0, {r2, r4}
    4610:	01007070 	tsteq	r0, r0, ror r0
    4614:	9d11036f 	ldcls	3, cr0, [r1, #-444]	; 0xfffffe44
    4618:	00000008 	andeq	r0, r0, r8
    461c:	13b80127 			; <UNDEFINED> instruction: 0x13b80127
    4620:	63010000 	movwvs	r0, #4096	; 0x1000
    4624:	00010103 	andeq	r0, r1, r3, lsl #2
    4628:	00000000 	andeq	r0, r0, r0
    462c:	01000000 	mrseq	r0, (UNDEF: 0)
    4630:	000b5f9c 	muleq	fp, ip, pc	; <UNPREDICTABLE>
    4634:	00702200 	rsbseq	r2, r0, r0, lsl #4
    4638:	31036301 	tstcc	r3, r1, lsl #6
    463c:	00000116 	andeq	r0, r0, r6, lsl r1
    4640:	0000150b 	andeq	r1, r0, fp, lsl #10
    4644:	79687022 	stmdbvc	r8!, {r1, r5, ip, sp, lr}^
    4648:	03630100 	cmneq	r3, #0, 2
    464c:	00008138 	andeq	r8, r0, r8, lsr r1
    4650:	00152900 	andseq	r2, r5, r0, lsl #18
    4654:	01270000 			; <UNDEFINED> instruction: 0x01270000
    4658:	000014ad 	andeq	r1, r0, sp, lsr #9
    465c:	01035a01 	tsteq	r3, r1, lsl #20
    4660:	00000001 	andeq	r0, r0, r1
    4664:	00000000 	andeq	r0, r0, r0
    4668:	999c0100 	ldmibls	ip, {r8}
    466c:	2200000b 	andcs	r0, r0, #11
    4670:	5a010070 	bpl	44838 <__ccfg+0x24890>
    4674:	01163103 	tsteq	r6, r3, lsl #2
    4678:	15470000 	strbne	r0, [r7, #-0]
    467c:	73220000 			; <UNDEFINED> instruction: 0x73220000
    4680:	01007365 	tsteq	r0, r5, ror #6
    4684:	8138035a 	teqhi	r8, sl, asr r3
    4688:	65000000 	strvs	r0, [r0, #-0]
    468c:	00000015 	andeq	r0, r0, r5, lsl r0
    4690:	1543012c 	strbne	r0, [r3, #-300]	; 0xfffffed4
    4694:	52010000 	andpl	r0, r1, #0
    4698:	81010103 	tsthi	r1, r3, lsl #2
    469c:	01000000 	mrseq	r0, (UNDEF: 0)
    46a0:	00000bd5 	ldrdeq	r0, [r0], -r5
    46a4:	7968702e 	stmdbvc	r8!, {r1, r2, r3, r5, ip, sp, lr}^
    46a8:	03520100 	cmpeq	r2, #0, 2
    46ac:	0000812d 	andeq	r8, r0, sp, lsr #2
    46b0:	706f2e00 	rsbvc	r2, pc, r0, lsl #28
    46b4:	52010074 	andpl	r0, r1, #116	; 0x74
    46b8:	00813603 	addeq	r3, r1, r3, lsl #12
    46bc:	612e0000 			; <UNDEFINED> instruction: 0x612e0000
    46c0:	01006772 	tsteq	r0, r2, ror r7
    46c4:	16430352 			; <UNDEFINED> instruction: 0x16430352
    46c8:	00000001 	andeq	r0, r0, r1
    46cc:	13160121 	tstne	r6, #1073741832	; 0x40000008
    46d0:	33010000 	movwcc	r0, #4096	; 0x1000
    46d4:	81010103 	tsthi	r1, r3, lsl #2
    46d8:	20000000 	andcs	r0, r0, r0
    46dc:	8000001b 	andhi	r0, r0, fp, lsl r0
    46e0:	0100001b 	tsteq	r0, fp, lsl r0
    46e4:	000c3e9c 	muleq	ip, ip, lr
    46e8:	64662200 	strbtvs	r2, [r6], #-512	; 0xfffffe00
    46ec:	03330100 	teqeq	r3, #0, 2
    46f0:	0000812c 	andeq	r8, r0, ip, lsr #2
    46f4:	00158300 	andseq	r8, r5, r0, lsl #6
    46f8:	706f2200 	rsbvc	r2, pc, r0, lsl #4
    46fc:	33010074 	movwcc	r0, #4212	; 0x1074
    4700:	00813403 	addeq	r3, r1, r3, lsl #8
    4704:	15c20000 	strbne	r0, [r2]
    4708:	61220000 			; <UNDEFINED> instruction: 0x61220000
    470c:	01006772 	tsteq	r0, r2, ror r7
    4710:	16410333 			; <UNDEFINED> instruction: 0x16410333
    4714:	eb000001 	bl	4720 <patable+0xe>
    4718:	2f000015 	svccs	0x00000015
    471c:	00001b2e 	andeq	r1, r0, lr, lsr #22
    4720:	00001b3c 	andeq	r1, r0, ip, lsr fp
    4724:	01007028 	tsteq	r0, r8, lsr #32
    4728:	d415033c 	ldrle	r0, [r5], #-828	; 0xfffffcc4
    472c:	14000007 	strne	r0, [r0], #-7
    4730:	00000016 	andeq	r0, r0, r6, lsl r0
    4734:	93012700 	movwls	r2, #5888	; 0x1700
    4738:	01000013 	tsteq	r0, r3, lsl r0
    473c:	0101032b 	tsteq	r1, fp, lsr #6
	...
    4748:	0c679c01 	stcleq	12, cr9, [r7], #-4
    474c:	70220000 	eorvc	r0, r2, r0
    4750:	032b0100 			; <UNDEFINED> instruction: 0x032b0100
    4754:	0001162e 	andeq	r1, r1, lr, lsr #12
    4758:	00162700 	andseq	r2, r6, r0, lsl #14
    475c:	01210000 			; <UNDEFINED> instruction: 0x01210000
    4760:	0000144f 	andeq	r1, r0, pc, asr #8
    4764:	01031a01 	tsteq	r3, r1, lsl #20
    4768:	00008101 	andeq	r8, r0, r1, lsl #2
	...
    4774:	c19c0100 	orrsgt	r0, ip, r0, lsl #2
    4778:	2200000c 	andcs	r0, r0, #12
    477c:	1a010070 	bne	44944 <__ccfg+0x2499c>
    4780:	01162e03 	tsteq	r6, r3, lsl #28
    4784:	16450000 	strbne	r0, [r5], -r0
    4788:	62220000 	eorvs	r0, r2, #0
    478c:	01006675 	tsteq	r0, r5, ror r6
    4790:	593d031a 	ldmdbpl	sp!, {r1, r3, r4, r8, r9}
    4794:	63000002 	movwvs	r0, #2
    4798:	22000016 	andcs	r0, r0, #22
    479c:	006e656c 	rsbeq	r6, lr, ip, ror #10
    47a0:	46031a01 	strmi	r1, [r3], -r1, lsl #20
    47a4:	00000081 	andeq	r0, r0, r1, lsl #1
    47a8:	00001676 	andeq	r1, r0, r6, ror r6
    47ac:	01006229 	tsteq	r0, r9, lsr #4
    47b0:	9d0c031e 	stcls	3, cr0, [ip, #-120]	; 0xffffff88
    47b4:	00000008 	andeq	r0, r0, r8
    47b8:	14880121 	strne	r0, [r8], #289	; 0x121
    47bc:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    47c0:	81010103 	tsthi	r1, r3, lsl #2
	...
    47cc:	01000000 	mrseq	r0, (UNDEF: 0)
    47d0:	000d1b9c 	muleq	sp, ip, fp
    47d4:	00702200 	rsbseq	r2, r0, r0, lsl #4
    47d8:	2d030801 	stccs	8, cr0, [r3, #-4]
    47dc:	00000116 	andeq	r0, r0, r6, lsl r1
    47e0:	00001694 	muleq	r0, r4, r6
    47e4:	66756222 	ldrbtvs	r6, [r5], -r2, lsr #4
    47e8:	03080100 	movweq	r0, #33024	; 0x8100
    47ec:	000d1b36 	andeq	r1, sp, r6, lsr fp
    47f0:	0016b200 	andseq	fp, r6, r0, lsl #4
    47f4:	656c2200 	strbvs	r2, [ip, #-512]!	; 0xfffffe00
    47f8:	0801006e 	stmdaeq	r1, {r1, r2, r3, r5, r6}
    47fc:	00813f03 	addeq	r3, r1, r3, lsl #30
    4800:	16d00000 	ldrbne	r0, [r0], r0
    4804:	62290000 	eorvs	r0, r9, #0
    4808:	030c0100 	movweq	r0, #49408	; 0xc100
    480c:	00089d0c 	andeq	r9, r8, ip, lsl #26
    4810:	040a0000 	streq	r0, [sl], #-0
    4814:	000000e3 	andeq	r0, r0, r3, ror #1
    4818:	14460121 	strbne	r0, [r6], #-289	; 0xfffffedf
    481c:	cd010000 	stcgt	0, cr0, [r1, #-0]
    4820:	16010102 	strne	r0, [r1], -r2, lsl #2
    4824:	38000001 	stmdacc	r0, {r0}
    4828:	f400001a 	vst4.8	{d0-d3}, [r0 :64], sl
    482c:	0100001a 	tsteq	r0, sl, lsl r0
    4830:	000dbf9c 	muleq	sp, ip, pc	; <UNPREDICTABLE>
    4834:	00772b00 	rsbseq	r2, r7, r0, lsl #22
    4838:	cd010000 	stcgt	0, cr0, [r1, #-0]
    483c:	00cd2e02 	sbceq	r2, sp, r2, lsl #28
    4840:	16ee0000 	strbtne	r0, [lr], r0
    4844:	66220000 	strtvs	r0, [r2], -r0
    4848:	cd010064 	stcgt	0, cr0, [r1, #-400]	; 0xfffffe70
    484c:	00813902 	addeq	r3, r1, r2, lsl #18
    4850:	170c0000 	strne	r0, [ip, -r0]
    4854:	fd2b0000 	stc2	0, cr0, [fp, #-0]
    4858:	01000014 	tsteq	r0, r4, lsl r0
    485c:	814102cd 	smlalbthi	r0, r1, sp, r2
    4860:	35000000 	strcc	r0, [r0, #-0]
    4864:	22000017 	andcs	r0, r0, #23
    4868:	00677275 	rsbeq	r7, r7, r5, ror r2
    486c:	1102ce01 	tstne	r2, r1, lsl #28
    4870:	000000c1 	andeq	r0, r0, r1, asr #1
    4874:	0000177f 	andeq	r1, r0, pc, ror r7
    4878:	01006228 	tsteq	r0, r8, lsr #4
    487c:	9d0c02cf 	sfmls	f0, 4, [ip, #-828]	; 0xfffffcc4
    4880:	92000008 	andls	r0, r0, #8
    4884:	30000017 	andcc	r0, r0, r7, lsl r0
    4888:	00001438 	andeq	r1, r0, r8, lsr r4
    488c:	0b02d001 	bleq	b8898 <__ccfg+0x988f0>
    4890:	00000355 	andeq	r0, r0, r5, asr r3
    4894:	2a649102 	bcs	1928ca4 <__ccfg+0x1908cfc>
    4898:	d1010073 	tstle	r1, r3, ror r0
    489c:	07400d02 	strbeq	r0, [r0, -r2, lsl #26]
    48a0:	57010000 	strpl	r0, [r1, -r0]
    48a4:	64696528 	strbtvs	r6, [r9], #-1320	; 0xfffffad8
    48a8:	02d20100 	sbcseq	r0, r2, #0, 2
    48ac:	00008106 	andeq	r8, r0, r6, lsl #2
    48b0:	0017b000 	andseq	fp, r7, r0
    48b4:	01210000 			; <UNDEFINED> instruction: 0x01210000
    48b8:	00001415 	andeq	r1, r0, r5, lsl r4
    48bc:	0102a401 	tsteq	r2, r1, lsl #8
    48c0:	00008101 	andeq	r8, r0, r1, lsl #2
	...
    48cc:	729c0100 	addsvc	r0, ip, #0, 2
    48d0:	2200000e 	andcs	r0, r0, #14
    48d4:	01006466 	tsteq	r0, r6, ror #8
    48d8:	812a02a4 	smulwbhi	sl, r4, r2
    48dc:	d9000000 	stmdble	r0, {}	; <UNPREDICTABLE>
    48e0:	2b000017 	blcs	4944 <patchGenfskRfe+0x220>
    48e4:	00001504 	andeq	r1, r0, r4, lsl #10
    48e8:	3202a401 	andcc	sl, r2, #16777216	; 0x1000000
    48ec:	00000081 	andeq	r0, r0, r1, lsl #1
    48f0:	0000180d 	andeq	r1, r0, sp, lsl #16
    48f4:	01007328 	tsteq	r0, r8, lsr #6
    48f8:	400d02a8 	andmi	r0, sp, r8, lsr #5
    48fc:	41000007 	tstmi	r0, r7
    4900:	28000018 	stmdacs	r0, {r3, r4}
    4904:	0100716e 	tsteq	r0, lr, ror #2
    4908:	810602a9 	smlatbhi	r6, r9, r2, r0
    490c:	a6000000 	strge	r0, [r0], -r0
    4910:	28000018 	stmdacs	r0, {r3, r4}
    4914:	01007172 	tsteq	r0, r2, ror r1
    4918:	8a0b02aa 	bhi	2c53c8 <__ccfg+0x2a5420>
    491c:	c4000007 	strgt	r0, [r0], #-7
    4920:	28000018 	stmdacs	r0, {r3, r4}
    4924:	ab010062 	blge	44ab4 <__ccfg+0x24b0c>
    4928:	089d0c02 	ldmeq	sp, {r1, sl, fp}
    492c:	18e20000 	stmiane	r2!, {}^	; <UNPREDICTABLE>
    4930:	03310000 	teqeq	r1, #0
    4934:	01000014 	tsteq	r0, r4, lsl r0
    4938:	000102c0 	andeq	r0, r1, r0, asr #5
    493c:	32000000 	andcc	r0, r0, #0
    4940:	0000114e 	andeq	r1, r0, lr, asr #2
	...
    494c:	0a02bb01 	beq	b3558 <__ccfg+0x935b0>
    4950:	00116033 	andseq	r6, r1, r3, lsr r0
    4954:	116b2600 	cmnne	fp, r0, lsl #12
    4958:	190b0000 	stmdbne	fp, {}	; <UNPREDICTABLE>
    495c:	76260000 	strtvc	r0, [r6], -r0
    4960:	1e000011 	mcrne	0, 0, r0, cr0, cr1, {0}
    4964:	00000019 	andeq	r0, r0, r9, lsl r0
    4968:	ee012100 	adfs	f2, f1, f0
    496c:	01000012 	tsteq	r0, r2, lsl r0
    4970:	0101027d 	tsteq	r1, sp, ror r2
    4974:	00000081 	andeq	r0, r0, r1, lsl #1
	...
    4980:	0eef9c01 	cdpeq	12, 14, cr9, cr15, cr1, {0}
    4984:	66220000 	strtvs	r0, [r2], -r0
    4988:	7d010064 	stcvc	0, cr0, [r1, #-400]	; 0xfffffe70
    498c:	00812a02 	addeq	r2, r1, r2, lsl #20
    4990:	19310000 	ldmdbne	r1!, {}	; <UNPREDICTABLE>
    4994:	042b0000 	strteq	r0, [fp], #-0
    4998:	01000015 	tsteq	r0, r5, lsl r0
    499c:	8132027d 	teqhi	r2, sp, ror r2
    49a0:	65000000 	strvs	r0, [r0, #-0]
    49a4:	28000019 	stmdacs	r0, {r0, r3, r4}
    49a8:	81010073 	tsthi	r1, r3, ror r0
    49ac:	07400d02 	strbeq	r0, [r0, -r2, lsl #26]
    49b0:	198e0000 	stmibne	lr, {}	; <UNPREDICTABLE>
    49b4:	6e280000 	cdpvs	0, 2, cr0, cr8, cr0, {0}
    49b8:	82010071 	andhi	r0, r1, #113	; 0x71
    49bc:	00810602 	addeq	r0, r1, r2, lsl #12
    49c0:	19f30000 	ldmibne	r3!, {}^	; <UNPREDICTABLE>
    49c4:	72280000 	eorvc	r0, r8, #0
    49c8:	83010071 	movwhi	r0, #4209	; 0x1071
    49cc:	078a0b02 	streq	r0, [sl, r2, lsl #22]
    49d0:	1a110000 	bne	4449d8 <__ccfg+0x424a30>
    49d4:	62280000 	eorvs	r0, r8, #0
    49d8:	02840100 	addeq	r0, r4, #0, 2
    49dc:	00089d0c 	andeq	r9, r8, ip, lsl #26
    49e0:	001a3a00 	andseq	r3, sl, r0, lsl #20
    49e4:	01210000 			; <UNDEFINED> instruction: 0x01210000
    49e8:	00001509 	andeq	r1, r0, r9, lsl #10
    49ec:	01025601 	tsteq	r2, r1, lsl #12
    49f0:	00011601 	andeq	r1, r1, r1, lsl #12
	...
    49fc:	5c9c0100 	ldfpls	f0, [ip], {0}
    4a00:	2b00000f 	blcs	4a44 <patchGenfskRfe+0x320>
    4a04:	00000077 	andeq	r0, r0, r7, ror r0
    4a08:	2d025601 	stccs	6, cr5, [r2, #-4]
    4a0c:	000000cd 	andeq	r0, r0, sp, asr #1
    4a10:	00001a6e 	andeq	r1, r0, lr, ror #20
    4a14:	00646622 	rsbeq	r6, r4, r2, lsr #12
    4a18:	38025601 	stmdacc	r2, {r0, r9, sl, ip, lr}
    4a1c:	00000081 	andeq	r0, r0, r1, lsl #1
    4a20:	00001a81 	andeq	r1, r0, r1, lsl #21
    4a24:	01007028 	tsteq	r0, r8, lsr #32
    4a28:	160a025d 			; <UNDEFINED> instruction: 0x160a025d
    4a2c:	c0000001 	andgt	r0, r0, r1
    4a30:	2800001a 	stmdacs	r0, {r1, r3, r4}
    4a34:	5e010062 	cdppl	0, 0, cr0, cr1, cr2, {3}
    4a38:	089d0c02 	ldmeq	sp, {r1, sl, fp}
    4a3c:	1ad30000 	bne	ff4c4a44 <_estack+0xdf4bfa44>
    4a40:	72280000 	eorvc	r0, r8, #0
    4a44:	5f010071 	svcpl	0x00010071
    4a48:	078a0b02 	streq	r0, [sl, r2, lsl #22]
    4a4c:	1afc0000 	bne	fff04a54 <_estack+0xdfeffa54>
    4a50:	21000000 	mrscs	r0, (UNDEF: 0)
    4a54:	0014d401 	andseq	sp, r4, r1, lsl #8
    4a58:	024a0100 	subeq	r0, sl, #0, 2
    4a5c:	00810101 	addeq	r0, r1, r1, lsl #2
    4a60:	1a140000 	bne	504a68 <__ccfg+0x4e4ac0>
    4a64:	1a380000 	bne	e04a6c <__ccfg+0xde4ac4>
    4a68:	9c010000 	stcls	0, cr0, [r1], {-0}
    4a6c:	00000f99 	muleq	r0, r9, pc	; <UNPREDICTABLE>
    4a70:	64726f22 	ldrbtvs	r6, [r2], #-3874	; 0xfffff0de
    4a74:	024a0100 	subeq	r0, sl, #0, 2
    4a78:	00008129 	andeq	r8, r0, r9, lsr #2
    4a7c:	001b3600 	andseq	r3, fp, r0, lsl #12
    4a80:	6c703400 	cfldrdvs	mvd3, [r0], #-0
    4a84:	024a0100 	subeq	r0, sl, #0, 2
    4a88:	0007d43f 	andeq	sp, r7, pc, lsr r4
    4a8c:	00510100 	subseq	r0, r1, r0, lsl #2
    4a90:	14590121 	ldrbne	r0, [r9], #-289	; 0xfffffedf
    4a94:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    4a98:	81010102 	tsthi	r1, r2, lsl #2
	...
    4aa4:	01000000 	mrseq	r0, (UNDEF: 0)
    4aa8:	000ff69c 	muleq	pc, ip, r6	; <UNPREDICTABLE>
    4aac:	00772b00 	rsbseq	r2, r7, r0, lsl #22
    4ab0:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    4ab4:	00cd2b02 	sbceq	r2, sp, r2, lsl #22
    4ab8:	1b540000 	blne	1504ac0 <__ccfg+0x14e4b18>
    4abc:	66220000 	strtvs	r0, [r2], -r0
    4ac0:	29010064 	stmdbcs	r1, {r2, r5, r6}
    4ac4:	00813602 	addeq	r3, r1, r2, lsl #12
    4ac8:	1b720000 	blne	1c84ad0 <__ccfg+0x1c64b28>
    4acc:	73280000 			; <UNDEFINED> instruction: 0x73280000
    4ad0:	022b0100 	eoreq	r0, fp, #0, 2
    4ad4:	0007400d 	andeq	r4, r7, sp
    4ad8:	001bbc00 	andseq	fp, fp, r0, lsl #24
    4adc:	00622800 	rsbeq	r2, r2, r0, lsl #16
    4ae0:	0c022c01 	stceq	12, cr2, [r2], {1}
    4ae4:	0000089d 	muleq	r0, sp, r8
    4ae8:	00001bcf 	andeq	r1, r0, pc, asr #23
    4aec:	8a012100 	bhi	4cef4 <__ccfg+0x2cf4c>
    4af0:	01000013 	tsteq	r0, r3, lsl r0
    4af4:	010101f6 	strdeq	r0, [r1, -r6]
    4af8:	00000081 	andeq	r0, r0, r1, lsl #1
    4afc:	00001954 	andeq	r1, r0, r4, asr r9
    4b00:	00001a14 	andeq	r1, r0, r4, lsl sl
    4b04:	10839c01 	addne	r9, r3, r1, lsl #24
    4b08:	772b0000 	strvc	r0, [fp, -r0]!
    4b0c:	01000000 	mrseq	r0, (UNDEF: 0)
    4b10:	cd2a01f6 	stfgts	f0, [sl, #-984]!	; 0xfffffc28
    4b14:	e2000000 	and	r0, r0, #0
    4b18:	2200001b 	andcs	r0, r0, #27
    4b1c:	00796870 	rsbseq	r6, r9, r0, ror r8
    4b20:	3501f601 	strcc	pc, [r1, #-1537]	; 0xfffff9ff
    4b24:	00000081 	andeq	r0, r0, r1, lsl #1
    4b28:	00001c0b 	andeq	r1, r0, fp, lsl #24
    4b2c:	0014b92b 	andseq	fp, r4, fp, lsr #18
    4b30:	01f60100 	mvnseq	r0, r0, lsl #2
    4b34:	0000813e 	andeq	r8, r0, lr, lsr r1
    4b38:	001c6000 	andseq	r6, ip, r0
    4b3c:	66283500 	strtvs	r3, [r8], -r0, lsl #10
    4b40:	f8010064 			; <UNDEFINED> instruction: 0xf8010064
    4b44:	00810601 	addeq	r0, r1, r1, lsl #12
    4b48:	1c980000 	ldcne	0, cr0, [r8], {0}
    4b4c:	f7360000 			; <UNDEFINED> instruction: 0xf7360000
    4b50:	01000013 	tsteq	r0, r3, lsl r0
    4b54:	560a01f9 			; <UNDEFINED> instruction: 0x560a01f9
    4b58:	28000005 	stmdacs	r0, {r0, r2}
    4b5c:	fa010073 	blx	44d30 <__ccfg+0x24d88>
    4b60:	07400d01 	strbeq	r0, [r0, -r1, lsl #26]
    4b64:	1cb60000 	ldcne	0, cr0, [r6]
    4b68:	612a0000 			; <UNDEFINED> instruction: 0x612a0000
    4b6c:	fc010070 	stc2	0, cr0, [r1], {112}	; 0x70
    4b70:	00b50b01 	adcseq	r0, r5, r1, lsl #22
    4b74:	91020000 	mrsls	r0, (UNDEF: 2)
    4b78:	01270054 	qsubeq	r0, r4, r7
    4b7c:	0000141f 	andeq	r1, r0, pc, lsl r4
    4b80:	01013b01 	tsteq	r1, r1, lsl #22
    4b84:	0018e401 	andseq	lr, r8, r1, lsl #8
    4b88:	00195400 	andseq	r5, r9, r0, lsl #8
    4b8c:	bb9c0100 	bllt	fe704f94 <_estack+0xde6fff94>
    4b90:	22000010 	andcs	r0, r0, #16
    4b94:	3b010070 	blcc	44d5c <__ccfg+0x24db4>
    4b98:	01162e01 	tsteq	r6, r1, lsl #28
    4b9c:	1d000000 	stcne	0, cr0, [r0, #-0]
    4ba0:	62280000 	eorvs	r0, r8, #0
    4ba4:	01410100 	mrseq	r0, (UNDEF: 81)
    4ba8:	00089d0c 	andeq	r9, r8, ip, lsl #26
    4bac:	001d2900 	andseq	r2, sp, r0, lsl #18
    4bb0:	61370000 	teqvs	r7, r0
    4bb4:	01006270 	tsteq	r0, r0, ror r2
    4bb8:	01010114 	tsteq	r1, r4, lsl r1
    4bbc:	0000089d 	muleq	r0, sp, r8
    4bc0:	000017cc 	andeq	r1, r0, ip, asr #15
    4bc4:	000017e2 	andeq	r1, r0, r2, ror #15
    4bc8:	11029c01 	tstne	r2, r1, lsl #24
    4bcc:	a62b0000 	strtge	r0, [fp], -r0
    4bd0:	01000019 	tsteq	r0, r9, lsl r0
    4bd4:	cd2b0114 	stfgts	f0, [fp, #-80]!	; 0xffffffb0
    4bd8:	5d000000 	stcpl	0, cr0, [r0, #-0]
    4bdc:	2a00001d 	bcs	4c58 <patchGenfskRfe+0x534>
    4be0:	19010070 	stmdbne	r1, {r4, r5, r6}
    4be4:	089d0c01 	ldmeq	sp, {r0, sl, fp}
    4be8:	50010000 	andpl	r0, r1, r0
    4bec:	00736329 	rsbseq	r6, r3, r9, lsr #6
    4bf0:	07011a01 	streq	r1, [r1, -r1, lsl #20]
    4bf4:	000000cd 	andeq	r0, r0, sp, asr #1
    4bf8:	6c723800 	ldclvs	8, cr3, [r2], #-0
    4bfc:	04010070 	streq	r0, [r1], #-112	; 0xffffff90
    4c00:	fc010101 	stc2	1, cr0, [r1], {1}
    4c04:	0a000017 	beq	4c68 <patchGenfskRfe+0x544>
    4c08:	01000018 	tsteq	r0, r8, lsl r0
    4c0c:	00112a9c 	mulseq	r1, ip, sl
    4c10:	00702200 	rsbseq	r2, r0, r0, lsl #4
    4c14:	2b010401 	blcs	45c20 <__ccfg+0x25c78>
    4c18:	0000089d 	muleq	r0, sp, r8
    4c1c:	00001d70 	andeq	r1, r0, r0, ror sp
    4c20:	13623900 	cmnne	r2, #0, 18
    4c24:	e0010000 	and	r0, r1, r0
    4c28:	4e010101 	adfmis	f0, f1, f1
    4c2c:	3a000011 	bcc	4c78 <patchGenfskRfe+0x554>
    4c30:	e0010070 	and	r0, r1, r0, ror r0
    4c34:	00089d2f 	andeq	r9, r8, pc, lsr #26
    4c38:	76643a00 	strbtvc	r3, [r4], -r0, lsl #20
    4c3c:	36e00100 	strbtcc	r0, [r0], r0, lsl #2
    4c40:	00000081 	andeq	r0, r0, r1, lsl #1
    4c44:	13a53b00 			; <UNDEFINED> instruction: 0x13a53b00
    4c48:	cf010000 	svcgt	0x00010000
    4c4c:	00810101 	addeq	r0, r1, r1, lsl #2
    4c50:	81010000 	mrshi	r0, (UNDEF: 1)
    4c54:	3a000011 	bcc	4ca0 <patchGenfskRfe+0x57c>
    4c58:	0100716f 	tsteq	r0, pc, ror #2
    4c5c:	078a2bcf 	streq	r2, [sl, pc, asr #23]
    4c60:	6e3c0000 	cdpvs	0, 3, cr0, cr12, cr0, {0}
    4c64:	d3010071 	movwle	r0, #4209	; 0x1071
    4c68:	00008106 	andeq	r8, r0, r6, lsl #2
    4c6c:	00623c00 	rsbeq	r3, r2, r0, lsl #24
    4c70:	9d0cd401 	cfstrsls	mvf13, [ip, #-4]
    4c74:	00000008 	andeq	r0, r0, r8
    4c78:	716e653d 	cmnvc	lr, sp, lsr r5
    4c7c:	01a80100 			; <UNDEFINED> instruction: 0x01a80100
    4c80:	11a40101 			; <UNDEFINED> instruction: 0x11a40101
    4c84:	713a0000 	teqvc	sl, r0
    4c88:	2aa80100 	bcs	fea05090 <_estack+0xdea00090>
    4c8c:	0000078a 	andeq	r0, r0, sl, lsl #15
    4c90:	0100703a 	tsteq	r0, sl, lsr r0
    4c94:	089d37a8 	ldmeq	sp, {r3, r5, r7, r8, r9, sl, ip, sp}
    4c98:	3d000000 	stccc	0, cr0, [r0, #-0]
    4c9c:	00716564 	rsbseq	r6, r1, r4, ror #10
    4ca0:	01017f01 	tsteq	r1, r1, lsl #30
    4ca4:	0011bd01 	andseq	fp, r1, r1, lsl #26
    4ca8:	00703a00 	rsbseq	r3, r0, r0, lsl #20
    4cac:	9d2b7f01 	stcls	15, cr7, [fp, #-4]!
    4cb0:	00000008 	andeq	r0, r0, r8
    4cb4:	0011a43e 	andseq	sl, r1, lr, lsr r4
    4cb8:	0017e200 	andseq	lr, r7, r0, lsl #4
    4cbc:	0017fc00 	andseq	pc, r7, r0, lsl #24
    4cc0:	f29c0100 	vaddw.s16	q0, q6, d0
    4cc4:	3f000011 	svccc	0x00000011
    4cc8:	000011b2 			; <UNDEFINED> instruction: 0x000011b2
    4ccc:	a4405001 	strbge	r5, [r0], #-1
    4cd0:	e8000011 	stmda	r0, {r0, r4}
    4cd4:	fa000017 	blx	4d38 <patchGenfskRfe+0x614>
    4cd8:	01000017 	tsteq	r0, r7, lsl r0
    4cdc:	b224017f 	eorlt	r0, r4, #-1073741793	; 0xc000001f
    4ce0:	83000011 	movwhi	r0, #17
    4ce4:	0000001d 	andeq	r0, r0, sp, lsl r0
    4ce8:	11813e00 	orrne	r3, r1, r0, lsl #28
    4cec:	180c0000 	stmdane	ip, {}	; <UNPREDICTABLE>
    4cf0:	18580000 	ldmdane	r8, {}^	; <UNPREDICTABLE>
    4cf4:	9c010000 	stcls	0, cr0, [r1], {-0}
    4cf8:	0000123b 	andeq	r1, r0, fp, lsr r2
    4cfc:	00118f24 	andseq	r8, r1, r4, lsr #30
    4d00:	001d9600 	andseq	r9, sp, r0, lsl #12
    4d04:	11992400 	orrsne	r2, r9, r0, lsl #8
    4d08:	1dca0000 	stclne	0, cr0, [sl]
    4d0c:	81400000 	mrshi	r0, (UNDEF: 64)
    4d10:	18000011 	stmdane	r0, {r0, r4}
    4d14:	20000018 	andcs	r0, r0, r8, lsl r0
    4d18:	01000018 	tsteq	r0, r8, lsl r0
    4d1c:	8f2401a8 	svchi	0x002401a8
    4d20:	fe000011 	mcr2	0, 0, r0, cr0, cr1, {0}
    4d24:	2400001d 	strcs	r0, [r0], #-29	; 0xffffffe3
    4d28:	00001199 	muleq	r0, r9, r1
    4d2c:	00001e1c 	andeq	r1, r0, ip, lsl lr
    4d30:	2a3e0000 	bcs	f84d38 <__ccfg+0xf64d90>
    4d34:	58000011 	stmdapl	r0, {r0, r4}
    4d38:	e4000018 	str	r0, [r0], #-24	; 0xffffffe8
    4d3c:	01000018 	tsteq	r0, r8, lsl r0
    4d40:	0012809c 	mulseq	r2, ip, r0
    4d44:	11382400 	teqne	r8, r0, lsl #8
    4d48:	1e3a0000 	cdpne	0, 3, cr0, cr10, cr0, {0}
    4d4c:	42240000 	eormi	r0, r4, #0
    4d50:	8f000011 	svchi	0x00000011
    4d54:	4100001e 	tstmi	r0, lr, lsl r0
    4d58:	0000112a 	andeq	r1, r0, sl, lsr #2
    4d5c:	0000188c 	andeq	r1, r0, ip, lsl #17
    4d60:	000007c0 	andeq	r0, r0, r0, asr #15
    4d64:	3301e001 	movwcc	lr, #4097	; 0x1001
    4d68:	00001142 	andeq	r1, r0, r2, asr #2
    4d6c:	00113824 	andseq	r3, r1, r4, lsr #16
    4d70:	001ea200 	andseq	sl, lr, r0, lsl #4
    4d74:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    4d78:	00000b99 	muleq	r0, r9, fp
    4d7c:	00001af4 	strdeq	r1, [r0], -r4
    4d80:	00001b20 	andeq	r1, r0, r0, lsr #22
    4d84:	12d89c01 	sbcsne	r9, r8, #256	; 0x100
    4d88:	ad240000 	stcge	0, cr0, [r4, #-0]
    4d8c:	c000000b 	andgt	r0, r0, fp
    4d90:	2400001e 	strcs	r0, [r0], #-30	; 0xffffffe2
    4d94:	00000bba 			; <UNDEFINED> instruction: 0x00000bba
    4d98:	00001ede 	ldrdeq	r1, [r0], -lr
    4d9c:	000bc724 	andeq	ip, fp, r4, lsr #14
    4da0:	001f0700 	andseq	r0, pc, r0, lsl #14
    4da4:	0b993200 	bleq	fe6515ac <_estack+0xde64c5ac>
    4da8:	1b080000 	blne	204db0 <__ccfg+0x1e4e08>
    4dac:	1b100000 	blne	404db4 <__ccfg+0x3e4e0c>
    4db0:	52010000 	andpl	r0, r1, #0
    4db4:	ad330103 	ldfges	f0, [r3, #-12]!
    4db8:	2400000b 	strcs	r0, [r0], #-11
    4dbc:	00000bba 			; <UNDEFINED> instruction: 0x00000bba
    4dc0:	00001f30 	andeq	r1, r0, r0, lsr pc
    4dc4:	000bc724 	andeq	ip, fp, r4, lsr #14
    4dc8:	001f4300 	andseq	r4, pc, r0, lsl #6
    4dcc:	42000000 	andmi	r0, r0, #0
    4dd0:	00000a4a 	andeq	r0, r0, sl, asr #20
    4dd4:	00001b80 	andeq	r1, r0, r0, lsl #23
    4dd8:	00001be8 	andeq	r1, r0, r8, ror #23
    4ddc:	5e249c01 	cdppl	12, 2, cr9, cr4, cr1, {0}
    4de0:	5600000a 	strpl	r0, [r0], -sl
    4de4:	2400001f 	strcs	r0, [r0], #-31	; 0xffffffe1
    4de8:	00000a6b 	andeq	r0, r0, fp, ror #20
    4dec:	00001f69 	andeq	r1, r0, r9, ror #30
    4df0:	000a7824 	andeq	r7, sl, r4, lsr #16
    4df4:	001fc900 	andseq	ip, pc, r0, lsl #18
    4df8:	0a852600 	beq	fe14e600 <_estack+0xde149600>
    4dfc:	20130000 	andscs	r0, r3, r0
    4e00:	4a320000 	bmi	c84e08 <__ccfg+0xc64e60>
    4e04:	8e00000a 	cdphi	0, 0, cr0, cr0, cr10, {0}
    4e08:	9200001b 	andls	r0, r0, #27
    4e0c:	0100001b 	tsteq	r0, fp, lsl r0
    4e10:	33010386 	movwcc	r0, #4998	; 0x1386
    4e14:	00000a5e 	andeq	r0, r0, lr, asr sl
    4e18:	000a6b24 	andeq	r6, sl, r4, lsr #22
    4e1c:	00204700 	eoreq	r4, r0, r0, lsl #14
    4e20:	0a783300 	beq	1e11a28 <__ccfg+0x1df1a80>
    4e24:	85430000 	strbhi	r0, [r3, #-0]
    4e28:	0000000a 	andeq	r0, r0, sl
    4e2c:	01740000 	cmneq	r4, r0
    4e30:	00030000 	andeq	r0, r3, r0
    4e34:	0000116f 	andeq	r1, r0, pc, ror #2
    4e38:	00bd0104 	adcseq	r0, sp, r4, lsl #2
    4e3c:	8b0c0000 	blhi	304e44 <__ccfg+0x2e4e9c>
    4e40:	e4000015 	str	r0, [r0], #-21	; 0xffffffeb
    4e44:	f0000006 			; <UNDEFINED> instruction: 0xf0000006
    4e48:	00000008 	andeq	r0, r0, r8
    4e4c:	ed000000 	stc	0, cr0, [r0, #-0]
    4e50:	02000037 	andeq	r0, r0, #55	; 0x37
    4e54:	098a0601 	stmibeq	sl, {r0, r9, sl}
    4e58:	02020000 	andeq	r0, r2, #0
    4e5c:	00084405 	andeq	r4, r8, r5, lsl #8
    4e60:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    4e64:	00000637 	andeq	r0, r0, r7, lsr r6
    4e68:	32050802 	andcc	r0, r5, #131072	; 0x20000
    4e6c:	02000006 	andeq	r0, r0, #6
    4e70:	09880801 	stmibeq	r8, {r0, fp}
    4e74:	02020000 	andeq	r0, r2, #0
    4e78:	000a8007 	andeq	r8, sl, r7
    4e7c:	09a10300 	stmibeq	r1!, {r8, r9}
    4e80:	34020000 	strcc	r0, [r2], #-0
    4e84:	00005b19 	andeq	r5, r0, r9, lsl fp
    4e88:	07040200 	streq	r0, [r4, -r0, lsl #4]
    4e8c:	000003cf 	andeq	r0, r0, pc, asr #7
    4e90:	ca070802 	bgt	1c6ea0 <__ccfg+0x1a6ef8>
    4e94:	04000003 	streq	r0, [r0], #-3
    4e98:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    4e9c:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    4ea0:	0003d407 	andeq	sp, r3, r7, lsl #8
    4ea4:	82040500 	andhi	r0, r4, #0, 10
    4ea8:	06000000 	streq	r0, [r0], -r0
    4eac:	00000077 	andeq	r0, r0, r7, ror r0
    4eb0:	04050107 	streq	r0, [r5], #-263	; 0xfffffef9
    4eb4:	0000004f 	andeq	r0, r0, pc, asr #32
    4eb8:	00157e08 	andseq	r7, r5, r8, lsl #28
    4ebc:	117f0100 	cmnne	pc, r0, lsl #2
    4ec0:	0000004f 	andeq	r0, r0, pc, asr #32
    4ec4:	04080101 	streq	r0, [r8], #-257	; 0xfffffeff
    4ec8:	01000044 	tsteq	r0, r4, asr #32
    4ecc:	004f1180 	subeq	r1, pc, r0, lsl #3
    4ed0:	01010000 	mrseq	r0, (UNDEF: 1)
    4ed4:	0015ce08 	andseq	ip, r5, r8, lsl #28
    4ed8:	11810100 	orrne	r0, r1, r0, lsl #2
    4edc:	0000004f 	andeq	r0, r0, pc, asr #32
    4ee0:	c9080101 	stmdbgt	r8, {r0, r8}
    4ee4:	01000015 	tsteq	r0, r5, lsl r0
    4ee8:	004f1182 	subeq	r1, pc, r2, lsl #3
    4eec:	01010000 	mrseq	r0, (UNDEF: 1)
    4ef0:	00158508 	andseq	r8, r5, r8, lsl #10
    4ef4:	11830100 	orrne	r0, r3, r0, lsl #2
    4ef8:	0000004f 	andeq	r0, r0, pc, asr #32
    4efc:	50080101 	andpl	r0, r8, r1, lsl #2
    4f00:	01000015 	tsteq	r0, r5, lsl r0
    4f04:	004f1184 	subeq	r1, pc, r4, lsl #3
    4f08:	01010000 	mrseq	r0, (UNDEF: 1)
    4f0c:	00007d09 	andeq	r7, r0, r9, lsl #26
    4f10:	0000ee00 	andeq	lr, r0, r0, lsl #28
    4f14:	00700a00 	rsbseq	r0, r0, r0, lsl #20
    4f18:	00310000 	eorseq	r0, r1, r0
    4f1c:	0000de06 	andeq	sp, r0, r6, lsl #28
    4f20:	15e70b00 	strbne	r0, [r7, #2816]!	; 0xb00
    4f24:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    4f28:	0000ee0f 	andeq	lr, r0, pc, lsl #28
    4f2c:	03050100 	movweq	r0, #20736	; 0x5100
    4f30:	00000000 	andeq	r0, r0, r0
    4f34:	0015d50c 	andseq	sp, r5, ip, lsl #10
    4f38:	01280100 			; <UNDEFINED> instruction: 0x01280100
    4f3c:	1d8a0101 	stfnes	f0, [sl, #4]
    4f40:	1d8c0000 	stcne	0, cr0, [ip]
    4f44:	9c010000 	stcls	0, cr0, [r1], {-0}
    4f48:	0015610c 	andseq	r6, r5, ip, lsl #2
    4f4c:	01160100 	tsteq	r6, r0, lsl #2
    4f50:	1d880101 	stfnes	f0, [r8, #4]
    4f54:	1d8a0000 	stcne	0, cr0, [sl]
    4f58:	9c010000 	stcls	0, cr0, [r1], {-0}
    4f5c:	0015710c 	andseq	r7, r5, ip, lsl #2
    4f60:	01040100 	mrseq	r0, (UNDEF: 20)
    4f64:	1d860101 	stfnes	f0, [r6, #4]
    4f68:	1d880000 	stcne	0, cr0, [r8]
    4f6c:	9c010000 	stcls	0, cr0, [r1], {-0}
    4f70:	15fe010d 	ldrbne	r0, [lr, #269]!	; 0x10d
    4f74:	d2010000 	andle	r0, r1, #0
    4f78:	1d8c0101 	stfnes	f0, [ip, #4]
    4f7c:	1dd00000 	ldclne	0, cr0, [r0]
    4f80:	9c010000 	stcls	0, cr0, [r1], {-0}
    4f84:	0015580e 	andseq	r5, r5, lr, lsl #16
    4f88:	0fd40100 	svceq	0x00d40100
    4f8c:	00000084 	andeq	r0, r0, r4, lsl #1
    4f90:	0000205a 	andeq	r2, r0, sl, asr r0
    4f94:	0015f40e 	andseq	pc, r5, lr, lsl #8
    4f98:	1ad40100 	bne	ff5053a0 <_estack+0xdf5003a0>
    4f9c:	00000084 	andeq	r0, r0, r4, lsl #1
    4fa0:	00002078 	andeq	r2, r0, r8, ror r0
    4fa4:	05370000 	ldreq	r0, [r7, #-0]!
    4fa8:	00030000 	andeq	r0, r3, r0
    4fac:	00001234 	andeq	r1, r0, r4, lsr r2
    4fb0:	00bd0104 	adcseq	r0, sp, r4, lsl #2
    4fb4:	5e0c0000 	cdppl	0, 0, cr0, cr12, cr0, {0}
    4fb8:	e4000016 	str	r0, [r0], #-22	; 0xffffffea
    4fbc:	14000006 	strne	r0, [r0], #-6
    4fc0:	02000039 	andeq	r0, r0, #57	; 0x39
    4fc4:	098a0601 	stmibeq	sl, {r0, r9, sl}
    4fc8:	02020000 	andeq	r0, r2, #0
    4fcc:	00084405 	andeq	r4, r8, r5, lsl #8
    4fd0:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    4fd4:	00000637 	andeq	r0, r0, r7, lsr r6
    4fd8:	32050802 	andcc	r0, r5, #131072	; 0x20000
    4fdc:	03000006 	movweq	r0, #6
    4fe0:	000008e1 	andeq	r0, r0, r1, ror #17
    4fe4:	45182e01 	ldrmi	r2, [r8, #-3585]	; 0xfffff1ff
    4fe8:	02000000 	andeq	r0, r0, #0
    4fec:	09880801 	stmibeq	r8, {r0, fp}
    4ff0:	0a030000 	beq	c4ff8 <__ccfg+0xa5050>
    4ff4:	01000004 	tsteq	r0, r4
    4ff8:	00581931 	subseq	r1, r8, r1, lsr r9
    4ffc:	02020000 	andeq	r0, r2, #0
    5000:	000a8007 	andeq	r8, sl, r7
    5004:	09a10300 	stmibeq	r1!, {r8, r9}
    5008:	34010000 	strcc	r0, [r1], #-0
    500c:	00006b19 	andeq	r6, r0, r9, lsl fp
    5010:	07040200 	streq	r0, [r4, -r0, lsl #4]
    5014:	000003cf 	andeq	r0, r0, pc, asr #7
    5018:	ca070802 	bgt	1c7028 <__ccfg+0x1a7080>
    501c:	04000003 	streq	r0, [r0], #-3
    5020:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    5024:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    5028:	0003d407 	andeq	sp, r3, r7, lsl #8
    502c:	02580500 	subseq	r0, r8, #0, 10
    5030:	01af092f 			; <UNDEFINED> instruction: 0x01af092f
    5034:	b8060000 	stmdalt	r6, {}	; <UNPREDICTABLE>
    5038:	02000017 	andeq	r0, r0, #23
    503c:	005f1031 	subseq	r1, pc, r1, lsr r0	; <UNPREDICTABLE>
    5040:	06000000 	streq	r0, [r0], -r0
    5044:	000016cd 	andeq	r1, r0, sp, asr #13
    5048:	5f103202 	svcpl	0x00103202
    504c:	04000000 	streq	r0, [r0], #-0
    5050:	00169506 	andseq	r9, r6, r6, lsl #10
    5054:	10330200 	eorsne	r0, r3, r0, lsl #4
    5058:	0000005f 	andeq	r0, r0, pc, asr r0
    505c:	16480608 	strbne	r0, [r8], -r8, lsl #12
    5060:	34020000 	strcc	r0, [r2], #-0
    5064:	00005f10 	andeq	r5, r0, r0, lsl pc
    5068:	07060c00 	streq	r0, [r6, -r0, lsl #24]
    506c:	02000016 	andeq	r0, r0, #22
    5070:	005f1035 	subseq	r1, pc, r5, lsr r0	; <UNPREDICTABLE>
    5074:	06100000 	ldreq	r0, [r0], -r0
    5078:	00001618 	andeq	r1, r0, r8, lsl r6
    507c:	5f103602 	svcpl	0x00103602
    5080:	14000000 	strne	r0, [r0], #-0
    5084:	00163806 	andseq	r3, r6, r6, lsl #16
    5088:	10370200 	eorsne	r0, r7, r0, lsl #4
    508c:	0000005f 	andeq	r0, r0, pc, asr r0
    5090:	175d0618 	smmlane	sp, r8, r6, r0
    5094:	38020000 	stmdacc	r2, {}	; <UNPREDICTABLE>
    5098:	00005f10 	andeq	r5, r0, r0, lsl pc
    509c:	ad061c00 	stcge	12, cr1, [r6, #-0]
    50a0:	02000016 	andeq	r0, r0, #22
    50a4:	005f1039 	subseq	r1, pc, r9, lsr r0	; <UNPREDICTABLE>
    50a8:	06200000 	strteq	r0, [r0], -r0
    50ac:	000016bd 			; <UNDEFINED> instruction: 0x000016bd
    50b0:	5f103a02 	svcpl	0x00103a02
    50b4:	24000000 	strcs	r0, [r0], #-0
    50b8:	00178306 	andseq	r8, r7, r6, lsl #6
    50bc:	103b0200 	eorsne	r0, fp, r0, lsl #4
    50c0:	0000005f 	andeq	r0, r0, pc, asr r0
    50c4:	17930628 	ldrne	r0, [r3, r8, lsr #12]
    50c8:	3c020000 	stccc	0, cr0, [r2], {-0}
    50cc:	00005f10 	andeq	r5, r0, r0, lsl pc
    50d0:	29062c00 	stmdbcs	r6, {sl, fp, sp}
    50d4:	02000016 	andeq	r0, r0, #22
    50d8:	005f103d 	subseq	r1, pc, sp, lsr r0	; <UNPREDICTABLE>
    50dc:	06300000 	ldrteq	r0, [r0], -r0
    50e0:	00001723 	andeq	r1, r0, r3, lsr #14
    50e4:	5f103e02 	svcpl	0x00103e02
    50e8:	34000000 	strcc	r0, [r0], #-0
    50ec:	0017c806 	andseq	ip, r7, r6, lsl #16
    50f0:	103f0200 	eorsne	r0, pc, r0, lsl #4
    50f4:	0000005f 	andeq	r0, r0, pc, asr r0
    50f8:	16de0638 			; <UNDEFINED> instruction: 0x16de0638
    50fc:	40020000 	andmi	r0, r2, r0
    5100:	00005f10 	andeq	r5, r0, r0, lsl pc
    5104:	f2063c00 			; <UNDEFINED> instruction: 0xf2063c00
    5108:	02000016 	andeq	r0, r0, #22
    510c:	005f1041 	subseq	r1, pc, r1, asr #32
    5110:	06400000 	strbeq	r0, [r0], -r0
    5114:	00001747 	andeq	r1, r0, r7, asr #14
    5118:	5f104202 	svcpl	0x00104202
    511c:	44000000 	strmi	r0, [r0], #-0
    5120:	00173306 	andseq	r3, r7, r6, lsl #6
    5124:	10430200 	subne	r0, r3, r0, lsl #4
    5128:	0000005f 	andeq	r0, r0, pc, asr r0
    512c:	176e0648 	strbne	r0, [lr, -r8, asr #12]!
    5130:	44020000 	strmi	r0, [r2], #-0
    5134:	00005f10 	andeq	r5, r0, r0, lsl pc
    5138:	a3064c00 	movwge	r4, #27648	; 0x6c00
    513c:	02000017 	andeq	r0, r0, #23
    5140:	005f1045 	subseq	r1, pc, r5, asr #32
    5144:	06500000 	ldrbeq	r0, [r0], -r0
    5148:	0000170d 	andeq	r1, r0, sp, lsl #14
    514c:	5f104602 	svcpl	0x00104602
    5150:	54000000 	strpl	r0, [r0], #-0
    5154:	17060300 	strne	r0, [r6, -r0, lsl #6]
    5158:	47020000 	strmi	r0, [r2, -r0]
    515c:	00008703 	andeq	r8, r0, r3, lsl #14
    5160:	01af0700 			; <UNDEFINED> instruction: 0x01af0700
    5164:	57080000 	strpl	r0, [r8, -r0]
    5168:	02000016 	andeq	r0, r0, #22
    516c:	01bb154e 			; <UNDEFINED> instruction: 0x01bb154e
    5170:	01010000 	mrseq	r0, (UNDEF: 1)
    5174:	0024ae03 	eoreq	sl, r4, r3, lsl #28
    5178:	12270300 	eorne	r0, r7, #0, 6
    517c:	0000004c 	andeq	r0, r0, ip, asr #32
    5180:	0001ce07 	andeq	ip, r1, r7, lsl #28
    5184:	01ce0900 	biceq	r0, lr, r0, lsl #18
    5188:	c7030000 	strgt	r0, [r3, -r0]
    518c:	03000019 	movweq	r0, #25
    5190:	0039122b 	eorseq	r1, r9, fp, lsr #4
    5194:	e4090000 	str	r0, [r9], #-0
    5198:	03000001 	movweq	r0, #1
    519c:	000024ff 	strdeq	r2, [r0], -pc	; <UNPREDICTABLE>
    51a0:	5f122c03 	svcpl	0x00122c03
    51a4:	07000000 	streq	r0, [r0, -r0]
    51a8:	000001f5 	strdeq	r0, [r0], -r5
    51ac:	00053803 	andeq	r3, r5, r3, lsl #16
    51b0:	122d0300 	eorne	r0, sp, #0, 6
    51b4:	0000005f 	andeq	r0, r0, pc, asr r0
    51b8:	32030805 	andcc	r0, r3, #327680	; 0x50000
    51bc:	0002a009 	andeq	sl, r2, r9
    51c0:	003e0a00 	eorseq	r0, lr, r0, lsl #20
    51c4:	34030000 	strcc	r0, [r3], #-0
    51c8:	0001e407 	andeq	lr, r1, r7, lsl #8
    51cc:	07010100 	streq	r0, [r1, -r0, lsl #2]
    51d0:	053e0a00 	ldreq	r0, [lr, #-2560]!	; 0xfffff600
    51d4:	35030000 	strcc	r0, [r3, #-0]
    51d8:	0001e403 	andeq	lr, r1, r3, lsl #8
    51dc:	06010100 	streq	r0, [r1], -r0, lsl #2
    51e0:	026f0a00 	rsbeq	r0, pc, #0, 20
    51e4:	36030000 	strcc	r0, [r3], -r0
    51e8:	0001e403 	andeq	lr, r1, r3, lsl #8
    51ec:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    51f0:	05780a00 	ldrbeq	r0, [r8, #-2560]!	; 0xfffff600
    51f4:	37030000 	strcc	r0, [r3, -r0]
    51f8:	0001e403 	andeq	lr, r1, r3, lsl #8
    51fc:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    5200:	08650a00 	stmdaeq	r5!, {r9, fp}^
    5204:	38030000 	stmdacc	r3, {}	; <UNPREDICTABLE>
    5208:	0001e403 	andeq	lr, r1, r3, lsl #8
    520c:	00040100 	andeq	r0, r4, r0, lsl #2
    5210:	05450600 	strbeq	r0, [r5, #-1536]	; 0xfffffa00
    5214:	3a030000 	bcc	c521c <__ccfg+0xa5274>
    5218:	0001e407 	andeq	lr, r1, r7, lsl #8
    521c:	5e060100 	adfpls	f0, f6, f0
    5220:	03000007 	movweq	r0, #7
    5224:	01e4033c 	mvneq	r0, ip, lsr r3
    5228:	06020000 	streq	r0, [r2], -r0
    522c:	00000b52 	andeq	r0, r0, r2, asr fp
    5230:	e4033d03 	str	r3, [r3], #-3331	; 0xfffff2fd
    5234:	03000001 	movweq	r0, #1
    5238:	00079306 	andeq	r9, r7, r6, lsl #6
    523c:	083f0300 	ldmdaeq	pc!, {r8, r9}	; <UNPREDICTABLE>
    5240:	000001f5 	strdeq	r0, [r0], -r5
    5244:	c1030004 	tstgt	r3, r4
    5248:	03000002 	movweq	r0, #2
    524c:	02120341 	andseq	r0, r2, #67108865	; 0x4000001
    5250:	a0090000 	andge	r0, r9, r0
    5254:	08000002 	stmdaeq	r0, {r1}
    5258:	0000057f 	andeq	r0, r0, pc, ror r5
    525c:	ac1a4303 	ldcge	3, cr4, [sl], {3}
    5260:	01000002 	tsteq	r0, r2
    5264:	01b10801 			; <UNDEFINED> instruction: 0x01b10801
    5268:	45030000 	strmi	r0, [r3, #-0]
    526c:	0002cd0e 	andeq	ip, r2, lr, lsl #26
    5270:	0b010100 	bleq	45678 <__ccfg+0x256d0>
    5274:	0002d304 	andeq	sp, r2, r4, lsl #6
    5278:	08010200 	stmdaeq	r1, {r9}
    527c:	00000991 	muleq	r0, r1, r9
    5280:	0002d307 	andeq	sp, r2, r7, lsl #6
    5284:	02ca0800 	sbceq	r0, sl, #0, 16
    5288:	45030000 	strmi	r0, [r3, #-0]
    528c:	0002cd1e 	andeq	ip, r2, lr, lsl sp
    5290:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    5294:	098f0408 	stmibeq	pc, {r3, sl}	; <UNPREDICTABLE>
    5298:	0000031e 	andeq	r0, r0, lr, lsl r3
    529c:	00064f06 	andeq	r4, r6, r6, lsl #30
    52a0:	0b900400 	bleq	fe4062a8 <_estack+0xde4012a8>
    52a4:	0000005f 	andeq	r0, r0, pc, asr r0
    52a8:	0c840600 	stceq	6, cr0, [r4], {0}
    52ac:	91040000 	mrsls	r0, (UNDEF: 4)
    52b0:	0001ce08 	andeq	ip, r1, r8, lsl #28
    52b4:	f4060400 	vst3.8	{d0-d2}, [r6], r0
    52b8:	04000001 	streq	r0, [r0], #-1
    52bc:	01f01092 			; <UNDEFINED> instruction: 0x01f01092
    52c0:	00060000 	andeq	r0, r6, r0
    52c4:	000a0b03 	andeq	r0, sl, r3, lsl #22
    52c8:	03930400 	orrseq	r0, r3, #0, 8
    52cc:	000002ed 	andeq	r0, r0, sp, ror #5
    52d0:	00031e0c 	andeq	r1, r3, ip, lsl #28
    52d4:	00033500 	andeq	r3, r3, r0, lsl #10
    52d8:	08000d00 	stmdaeq	r0, {r8, sl, fp}
    52dc:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
    52e0:	2a0f9904 	bcs	3eb6f8 <__ccfg+0x3cb750>
    52e4:	01000003 	tsteq	r0, r3
    52e8:	05010501 	streq	r0, [r1, #-1281]	; 0xfffffaff
    52ec:	036d0991 	cmneq	sp, #2375680	; 0x244000
    52f0:	9a0a0000 	bls	2852f8 <__ccfg+0x265350>
    52f4:	05000007 	streq	r0, [r0, #-7]
    52f8:	01e40793 			; <UNDEFINED> instruction: 0x01e40793
    52fc:	07010000 	streq	r0, [r1, -r0]
    5300:	b40a0001 	strlt	r0, [sl], #-1
    5304:	05000004 	streq	r0, [r0, #-4]
    5308:	01e40394 			; <UNDEFINED> instruction: 0x01e40394
    530c:	01010000 	mrseq	r0, (UNDEF: 1)
    5310:	03000000 	movweq	r0, #0
    5314:	00000871 	andeq	r0, r0, r1, ror r8
    5318:	43039605 	movwmi	r9, #13829	; 0x3605
    531c:	07000003 	streq	r0, [r0, -r3]
    5320:	0000036d 	andeq	r0, r0, sp, ror #6
    5324:	0003790c 	andeq	r7, r3, ip, lsl #18
    5328:	00038900 	andeq	r8, r3, r0, lsl #18
    532c:	07000d00 	streq	r0, [r0, -r0, lsl #26]
    5330:	0000037e 	andeq	r0, r0, lr, ror r3
    5334:	00038308 	andeq	r8, r3, r8, lsl #6
    5338:	179c0500 	ldrne	r0, [ip, r0, lsl #10]
    533c:	00000389 	andeq	r0, r0, r9, lsl #7
    5340:	da0c0101 	ble	30574c <__ccfg+0x2e57a4>
    5344:	a7000001 	strge	r0, [r0, -r1]
    5348:	0d000003 	stceq	0, cr0, [r0, #-12]
    534c:	039c0700 	orrseq	r0, ip, #0, 14
    5350:	f8080000 			; <UNDEFINED> instruction: 0xf8080000
    5354:	06000004 	streq	r0, [r0], -r4
    5358:	03a71306 			; <UNDEFINED> instruction: 0x03a71306
    535c:	01010000 	mrseq	r0, (UNDEF: 1)
    5360:	00074008 	andeq	r4, r7, r8
    5364:	0ec30400 	cdpeq	4, 12, cr0, cr3, cr0, {0}
    5368:	000001f5 	strdeq	r0, [r0], -r5
    536c:	aa0e0101 	bge	385778 <__ccfg+0x3657d0>
    5370:	07000009 	streq	r0, [r0, -r9]
    5374:	d510016e 	ldrle	r0, [r0, #-366]	; 0xfffffe92
    5378:	0b000003 	bleq	538c <__exidx_end+0x2e4>
    537c:	0003db04 	andeq	sp, r3, r4, lsl #22
    5380:	e7010f00 	str	r0, [r1, -r0, lsl #30]
    5384:	10000003 	andne	r0, r0, r3
    5388:	000001ce 	andeq	r0, r0, lr, asr #3
    538c:	02da0c00 	sbcseq	r0, sl, #0, 24
    5390:	03f20000 	mvnseq	r0, #0
    5394:	000d0000 	andeq	r0, sp, r0
    5398:	0003e707 	andeq	lr, r3, r7, lsl #14
    539c:	08081100 	stmdaeq	r8, {r8, ip}
    53a0:	7f070000 	svcvc	0x00070000
    53a4:	03f21601 	mvnseq	r1, #1048576	; 0x100000
    53a8:	01010000 	mrseq	r0, (UNDEF: 1)
    53ac:	00036611 	andeq	r6, r3, r1, lsl r6
    53b0:	01820700 	orreq	r0, r2, r0, lsl #14
    53b4:	00020114 	andeq	r0, r2, r4, lsl r1
    53b8:	11010100 	mrsne	r0, (UNDEF: 17)
    53bc:	00000343 	andeq	r0, r0, r3, asr #6
    53c0:	0e02d807 	cdpeq	8, 0, cr13, cr2, cr7, {0}
    53c4:	000001f5 	strdeq	r0, [r0], -r5
    53c8:	08120101 	ldmdaeq	r2, {r0, r8}
    53cc:	09030307 	stmdbeq	r3, {r0, r1, r2, r8, r9}
    53d0:	0000044b 	andeq	r0, r0, fp, asr #8
    53d4:	00383213 	eorseq	r3, r8, r3, lsl r2
    53d8:	03070700 	movweq	r0, #30464	; 0x7700
    53dc:	0001ce07 	andeq	ip, r1, r7, lsl #28
    53e0:	dc130000 	ldcle	0, cr0, [r3], {-0}
    53e4:	0700000b 	streq	r0, [r0, -fp]
    53e8:	06080308 	streq	r0, [r8], -r8, lsl #6
    53ec:	04000002 	streq	r0, [r0], #-2
    53f0:	03fb0e00 	mvnseq	r0, #0, 28
    53f4:	09070000 	stmdbeq	r7, {}	; <UNPREDICTABLE>
    53f8:	04240303 	strteq	r0, [r4], #-771	; 0xfffffcfd
    53fc:	33140000 	tstcc	r4, #0
    5400:	30000000 	andcc	r0, r0, r0
    5404:	08030b07 	stmdaeq	r3, {r0, r1, r2, r8, r9, fp}
    5408:	000004bb 			; <UNDEFINED> instruction: 0x000004bb
    540c:	001add13 	andseq	sp, sl, r3, lsl sp
    5410:	03140700 	tsteq	r4, #0, 14
    5414:	0001ce08 	andeq	ip, r1, r8, lsl #28
    5418:	54130000 	ldrpl	r0, [r3], #-0
    541c:	07000009 	streq	r0, [r0, -r9]
    5420:	ce080315 	mcrgt	3, 0, r0, cr8, cr5, {0}
    5424:	02000001 	andeq	r0, r0, #1
    5428:	0049a213 	subeq	sl, r9, r3, lsl r2
    542c:	03160700 	tsteq	r6, #0, 14
    5430:	0003c80b 	andeq	ip, r3, fp, lsl #16
    5434:	05130400 	ldreq	r0, [r3, #-1024]	; 0xfffffc00
    5438:	07000044 	streq	r0, [r0, -r4, asr #32]
    543c:	06090317 			; <UNDEFINED> instruction: 0x06090317
    5440:	08000002 	stmdaeq	r0, {r1}
    5444:	00000713 	andeq	r0, r0, r3, lsl r7
    5448:	03180700 	tsteq	r8, #0, 14
    544c:	0004bb0f 	andeq	fp, r4, pc, lsl #22
    5450:	c7130c00 	ldrgt	r0, [r3, -r0, lsl #24]
    5454:	07000007 	streq	r0, [r0, -r7]
    5458:	cb150319 	blgt	5460c4 <__ccfg+0x52611c>
    545c:	2c000004 	stccs	0, cr0, [r0], {4}
    5460:	044b0c00 	strbeq	r0, [fp], #-3072	; 0xfffff400
    5464:	04cb0000 	strbeq	r0, [fp], #0
    5468:	80150000 	andshi	r0, r5, r0
    546c:	03000000 	movweq	r0, #0
    5470:	58040b00 	stmdapl	r4, {r8, r9, fp}
    5474:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    5478:	00000949 	andeq	r0, r0, r9, asr #18
    547c:	1b031c07 	blne	cc4a0 <__ccfg+0xac4f8>
    5480:	00000458 	andeq	r0, r0, r8, asr r4
    5484:	00092911 	andeq	r2, r9, r1, lsl r9
    5488:	031e0700 	tsteq	lr, #0, 14
    548c:	0004ed14 	andeq	lr, r4, r4, lsl sp
    5490:	0b010100 	bleq	45898 <__ccfg+0x258f0>
    5494:	0004d104 	andeq	sp, r4, r4, lsl #2
    5498:	058b0800 	streq	r0, [fp, #2048]	; 0x800
    549c:	1d080000 	stcne	0, cr0, [r8, #-0]
    54a0:	0001ce13 	andeq	ip, r1, r3, lsl lr
    54a4:	08010100 	stmdaeq	r1, {r8}
    54a8:	00000276 	andeq	r0, r0, r6, ror r2
    54ac:	df1a1e08 	svcle	0x001a1e08
    54b0:	01000001 	tsteq	r0, r1
    54b4:	09960801 	ldmibeq	r6, {r0, fp}
    54b8:	1e080000 	cdpne	0, 0, cr0, cr8, cr0, {0}
    54bc:	0001df24 	andeq	sp, r1, r4, lsr #30
    54c0:	08010100 	stmdaeq	r1, {r8}
    54c4:	000009b2 			; <UNDEFINED> instruction: 0x000009b2
    54c8:	ed142208 	lfm	f2, 4, [r4, #-32]	; 0xffffffe0
    54cc:	01000004 	tsteq	r0, r4
    54d0:	01c01601 	biceq	r1, r0, r1, lsl #12
    54d4:	17090000 	strne	r0, [r9, -r0]
    54d8:	03050e02 	movweq	r0, #24066	; 0x5e02
    54dc:	0001ffa8 	andeq	pc, r1, r8, lsr #31
    54e0:	00050000 	andeq	r0, r5, r0
    54e4:	53000300 	movwpl	r0, #768	; 0x300
    54e8:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    54ec:	0000bd01 	andeq	fp, r0, r1, lsl #26
    54f0:	180f0c00 	stmdane	pc, {sl, fp}	; <UNPREDICTABLE>
    54f4:	06e40000 	strbteq	r0, [r4], r0
    54f8:	09400000 	stmdbeq	r0, {}^	; <UNPREDICTABLE>
    54fc:	00000000 	andeq	r0, r0, r0
    5500:	3a9d0000 	bcc	fe745508 <_estack+0xde740508>
    5504:	01020000 	mrseq	r0, (UNDEF: 2)
    5508:	00098a06 	andeq	r8, r9, r6, lsl #20
    550c:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    5510:	00000844 	andeq	r0, r0, r4, asr #16
    5514:	37050402 	strcc	r0, [r5, -r2, lsl #8]
    5518:	02000006 	andeq	r0, r0, #6
    551c:	06320508 	ldrteq	r0, [r2], -r8, lsl #10
    5520:	e1030000 	mrs	r0, (UNDEF: 3)
    5524:	04000008 	streq	r0, [r0], #-8
    5528:	004d182e 	subeq	r1, sp, lr, lsr #16
    552c:	01020000 	mrseq	r0, (UNDEF: 2)
    5530:	00098808 	andeq	r8, r9, r8, lsl #16
    5534:	040a0300 	streq	r0, [sl], #-768	; 0xfffffd00
    5538:	31040000 	mrscc	r0, (UNDEF: 4)
    553c:	00006019 	andeq	r6, r0, r9, lsl r0
    5540:	07020200 	streq	r0, [r2, -r0, lsl #4]
    5544:	00000a80 	andeq	r0, r0, r0, lsl #21
    5548:	0009a103 	andeq	sl, r9, r3, lsl #2
    554c:	19340400 	ldmdbne	r4!, {sl}
    5550:	00000073 	andeq	r0, r0, r3, ror r0
    5554:	cf070402 	svcgt	0x00070402
    5558:	02000003 	andeq	r0, r0, #3
    555c:	03ca0708 	biceq	r0, sl, #8, 14	; 0x200000
    5560:	04040000 	streq	r0, [r4], #-0
    5564:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    5568:	07040200 	streq	r0, [r4, -r0, lsl #4]
    556c:	000003d4 	ldrdeq	r0, [r0], -r4
    5570:	0024ae03 	eoreq	sl, r4, r3, lsl #28
    5574:	12270500 	eorne	r0, r7, #0, 10
    5578:	00000054 	andeq	r0, r0, r4, asr r0
    557c:	00008f05 	andeq	r8, r0, r5, lsl #30
    5580:	008f0600 	addeq	r0, pc, r0, lsl #12
    5584:	c7030000 	strgt	r0, [r3, -r0]
    5588:	05000019 	streq	r0, [r0, #-25]	; 0xffffffe7
    558c:	0041122b 	subeq	r1, r1, fp, lsr #4
    5590:	a5060000 	strge	r0, [r6, #-0]
    5594:	05000000 	streq	r0, [r0, #-0]
    5598:	000000a5 	andeq	r0, r0, r5, lsr #1
    559c:	0024ff03 	eoreq	pc, r4, r3, lsl #30
    55a0:	122c0500 	eorne	r0, ip, #0, 10
    55a4:	00000067 	andeq	r0, r0, r7, rrx
    55a8:	0000bb05 	andeq	fp, r0, r5, lsl #22
    55ac:	05380300 	ldreq	r0, [r8, #-768]!	; 0xfffffd00
    55b0:	2d050000 	stccs	0, cr0, [r5, #-0]
    55b4:	00006712 	andeq	r6, r0, r2, lsl r7
    55b8:	09210300 	stmdbeq	r1!, {r8, r9}
    55bc:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    55c0:	0000e410 	andeq	lr, r0, r0, lsl r4
    55c4:	8f040700 	svchi	0x00040700
    55c8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    55cc:	09320508 	ldmdbeq	r2!, {r3, r8, sl}
    55d0:	00000178 	andeq	r0, r0, r8, ror r1
    55d4:	00003e09 	andeq	r3, r0, r9, lsl #28
    55d8:	07340500 	ldreq	r0, [r4, -r0, lsl #10]!
    55dc:	000000a5 	andeq	r0, r0, r5, lsr #1
    55e0:	00070101 	andeq	r0, r7, r1, lsl #2
    55e4:	00053e09 	andeq	r3, r5, r9, lsl #28
    55e8:	03350500 	teqeq	r5, #0, 10
    55ec:	000000a5 	andeq	r0, r0, r5, lsr #1
    55f0:	00060101 	andeq	r0, r6, r1, lsl #2
    55f4:	00026f09 	andeq	r6, r2, r9, lsl #30
    55f8:	03360500 	teqeq	r6, #0, 10
    55fc:	000000a5 	andeq	r0, r0, r5, lsr #1
    5600:	00050101 	andeq	r0, r5, r1, lsl #2
    5604:	00057809 	andeq	r7, r5, r9, lsl #16
    5608:	03370500 	teqeq	r7, #0, 10
    560c:	000000a5 	andeq	r0, r0, r5, lsr #1
    5610:	00040101 	andeq	r0, r4, r1, lsl #2
    5614:	00086509 	andeq	r6, r8, r9, lsl #10
    5618:	03380500 	teqeq	r8, #0, 10
    561c:	000000a5 	andeq	r0, r0, r5, lsr #1
    5620:	00000401 	andeq	r0, r0, r1, lsl #8
    5624:	0005450a 	andeq	r4, r5, sl, lsl #10
    5628:	073a0500 	ldreq	r0, [sl, -r0, lsl #10]!
    562c:	000000a5 	andeq	r0, r0, r5, lsr #1
    5630:	075e0a01 	ldrbeq	r0, [lr, -r1, lsl #20]
    5634:	3c050000 	stccc	0, cr0, [r5], {-0}
    5638:	0000a503 	andeq	sl, r0, r3, lsl #10
    563c:	520a0200 	andpl	r0, sl, #0, 4
    5640:	0500000b 	streq	r0, [r0, #-11]
    5644:	00a5033d 	adceq	r0, r5, sp, lsr r3
    5648:	0a030000 	beq	c5650 <__ccfg+0xa56a8>
    564c:	00000793 	muleq	r0, r3, r7
    5650:	bb083f05 	bllt	21526c <__ccfg+0x1f52c4>
    5654:	04000000 	streq	r0, [r0], #-0
    5658:	02c10300 	sbceq	r0, r1, #0, 6
    565c:	41050000 	mrsmi	r0, (UNDEF: 5)
    5660:	0000ea03 	andeq	lr, r0, r3, lsl #20
    5664:	01780600 	cmneq	r8, r0, lsl #12
    5668:	7f0b0000 	svcvc	0x000b0000
    566c:	05000005 	streq	r0, [r0, #-5]
    5670:	01841a43 	orreq	r1, r4, r3, asr #20
    5674:	01010000 	mrseq	r0, (UNDEF: 1)
    5678:	0001b10b 	andeq	fp, r1, fp, lsl #2
    567c:	0e450500 	cdpeq	5, 4, cr0, cr5, cr0, {0}
    5680:	000001a5 	andeq	r0, r0, r5, lsr #3
    5684:	04070101 	streq	r0, [r7], #-257	; 0xfffffeff
    5688:	000001ab 	andeq	r0, r0, fp, lsr #3
    568c:	91080102 	tstls	r8, r2, lsl #2
    5690:	05000009 	streq	r0, [r0, #-9]
    5694:	000001ab 	andeq	r0, r0, fp, lsr #3
    5698:	0002ca0b 	andeq	ip, r2, fp, lsl #20
    569c:	1e450500 	cdpne	5, 4, cr0, cr5, cr0, {0}
    56a0:	000001a5 	andeq	r0, r0, r5, lsr #3
    56a4:	08080101 	stmdaeq	r8, {r0, r8}
    56a8:	f6098f06 			; <UNDEFINED> instruction: 0xf6098f06
    56ac:	0a000001 	beq	56b8 <__exidx_end+0x610>
    56b0:	0000064f 	andeq	r0, r0, pc, asr #12
    56b4:	670b9006 	strvs	r9, [fp, -r6]
    56b8:	00000000 	andeq	r0, r0, r0
    56bc:	000c840a 	andeq	r8, ip, sl, lsl #8
    56c0:	08910600 	ldmeq	r1, {r9, sl}
    56c4:	0000008f 	andeq	r0, r0, pc, lsl #1
    56c8:	01f40a04 	mvnseq	r0, r4, lsl #20
    56cc:	92060000 	andls	r0, r6, #0
    56d0:	0000b110 	andeq	fp, r0, r0, lsl r1
    56d4:	03000600 	movweq	r0, #1536	; 0x600
    56d8:	00000a0b 	andeq	r0, r0, fp, lsl #20
    56dc:	c5039306 	strgt	r9, [r3, #-774]	; 0xfffffcfa
    56e0:	0c000001 	stceq	0, cr0, [r0], {1}
    56e4:	000001f6 	strdeq	r0, [r0], -r6
    56e8:	0000020d 	andeq	r0, r0, sp, lsl #4
    56ec:	b40b000d 	strlt	r0, [fp], #-13
    56f0:	06000007 	streq	r0, [r0], -r7
    56f4:	02020f99 	andeq	r0, r2, #612	; 0x264
    56f8:	01010000 	mrseq	r0, (UNDEF: 1)
    56fc:	00b60407 	adcseq	r0, r6, r7, lsl #8
    5700:	01080000 	mrseq	r0, (UNDEF: 8)
    5704:	4b099107 	blmi	269b28 <__ccfg+0x249b80>
    5708:	09000002 	stmdbeq	r0, {r1}
    570c:	0000079a 	muleq	r0, sl, r7
    5710:	a5079307 	strge	r9, [r7, #-775]	; 0xfffffcf9
    5714:	01000000 	mrseq	r0, (UNDEF: 0)
    5718:	09000107 	stmdbeq	r0, {r0, r1, r2, r8}
    571c:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
    5720:	a5039407 	strge	r9, [r3, #-1031]	; 0xfffffbf9
    5724:	01000000 	mrseq	r0, (UNDEF: 0)
    5728:	00000001 	andeq	r0, r0, r1
    572c:	00087103 	andeq	r7, r8, r3, lsl #2
    5730:	03960700 	orrseq	r0, r6, #0, 14
    5734:	00000221 	andeq	r0, r0, r1, lsr #4
    5738:	00024b05 	andeq	r4, r2, r5, lsl #22
    573c:	02570c00 	subseq	r0, r7, #0, 24
    5740:	02670000 	rsbeq	r0, r7, #0
    5744:	000d0000 	andeq	r0, sp, r0
    5748:	00025c05 	andeq	r5, r2, r5, lsl #24
    574c:	03830b00 	orreq	r0, r3, #0, 22
    5750:	9c070000 	stcls	0, cr0, [r7], {-0}
    5754:	00026717 	andeq	r6, r2, r7, lsl r7
    5758:	0c010100 	stfeqs	f0, [r1], {-0}
    575c:	0000009b 	muleq	r0, fp, r0
    5760:	00000285 	andeq	r0, r0, r5, lsl #5
    5764:	7a05000d 	bvc	1457a0 <__ccfg+0x1257f8>
    5768:	0b000002 	bleq	5778 <__exidx_end+0x6d0>
    576c:	000004f8 	strdeq	r0, [r0], -r8
    5770:	85130608 	ldrhi	r0, [r3, #-1544]	; 0xfffff9f8
    5774:	01000002 	tsteq	r0, r2
    5778:	07400b01 	strbeq	r0, [r0, -r1, lsl #22]
    577c:	c3060000 	movwgt	r0, #24576	; 0x6000
    5780:	0000bb0e 	andeq	fp, r0, lr, lsl #22
    5784:	0e010100 	adfeqs	f0, f1, f0
    5788:	000009aa 	andeq	r0, r0, sl, lsr #19
    578c:	10016e09 	andne	r6, r1, r9, lsl #28
    5790:	000002b3 			; <UNDEFINED> instruction: 0x000002b3
    5794:	02b90407 	adcseq	r0, r9, #117440512	; 0x7000000
    5798:	010f0000 	mrseq	r0, CPSR
    579c:	000002c5 	andeq	r0, r0, r5, asr #5
    57a0:	00008f10 	andeq	r8, r0, r0, lsl pc
    57a4:	b20c0000 	andlt	r0, ip, #0
    57a8:	d0000001 	andle	r0, r0, r1
    57ac:	0d000002 	stceq	0, cr0, [r0, #-8]
    57b0:	02c50500 	sbceq	r0, r5, #0, 10
    57b4:	08110000 	ldmdaeq	r1, {}	; <UNPREDICTABLE>
    57b8:	09000008 	stmdbeq	r0, {r3}
    57bc:	d016017f 	andsle	r0, r6, pc, ror r1
    57c0:	01000002 	tsteq	r0, r2
    57c4:	03661101 	cmneq	r6, #1073741824	; 0x40000000
    57c8:	82090000 	andhi	r0, r9, #0
    57cc:	00c71401 	sbceq	r1, r7, r1, lsl #8
    57d0:	01010000 	mrseq	r0, (UNDEF: 1)
    57d4:	00034311 	andeq	r4, r3, r1, lsl r3
    57d8:	02d80900 	sbcseq	r0, r8, #0, 18
    57dc:	0000bb0e 	andeq	fp, r0, lr, lsl #22
    57e0:	12010100 	andne	r0, r1, #0, 2
    57e4:	03030908 	movweq	r0, #14600	; 0x3908
    57e8:	00032909 	andeq	r2, r3, r9, lsl #18
    57ec:	38321300 	ldmdacc	r2!, {r8, r9, ip}
    57f0:	07090000 	streq	r0, [r9, -r0]
    57f4:	008f0703 	addeq	r0, pc, r3, lsl #14
    57f8:	13000000 	movwne	r0, #0
    57fc:	00000bdc 	ldrdeq	r0, [r0], -ip
    5800:	08030809 	stmdaeq	r3, {r0, r3, fp}
    5804:	000000cc 	andeq	r0, r0, ip, asr #1
    5808:	fb0e0004 	blx	385822 <__ccfg+0x36587a>
    580c:	09000003 	stmdbeq	r0, {r0, r1}
    5810:	02030309 	andeq	r0, r3, #603979776	; 0x24000000
    5814:	14000003 	strne	r0, [r0], #-3
    5818:	00000033 	andeq	r0, r0, r3, lsr r0
    581c:	030b0930 	movweq	r0, #47408	; 0xb930
    5820:	00039908 	andeq	r9, r3, r8, lsl #18
    5824:	1add1300 	bne	ff74a42c <_estack+0xdf74542c>
    5828:	14090000 	strne	r0, [r9], #-0
    582c:	008f0803 	addeq	r0, pc, r3, lsl #16
    5830:	13000000 	movwne	r0, #0
    5834:	00000954 	andeq	r0, r0, r4, asr r9
    5838:	08031509 	stmdaeq	r3, {r0, r3, r8, sl, ip}
    583c:	0000008f 	andeq	r0, r0, pc, lsl #1
    5840:	49a21302 	stmibmi	r2!, {r1, r8, r9, ip}
    5844:	16090000 	strne	r0, [r9], -r0
    5848:	02a60b03 	adceq	r0, r6, #3072	; 0xc00
    584c:	13040000 	movwne	r0, #16384	; 0x4000
    5850:	00004405 	andeq	r4, r0, r5, lsl #8
    5854:	09031709 	stmdbeq	r3, {r0, r3, r8, r9, sl, ip}
    5858:	000000cc 	andeq	r0, r0, ip, asr #1
    585c:	00071308 	andeq	r1, r7, r8, lsl #6
    5860:	18090000 	stmdane	r9, {}	; <UNPREDICTABLE>
    5864:	03990f03 	orrseq	r0, r9, #3, 30
    5868:	130c0000 	movwne	r0, #49152	; 0xc000
    586c:	000007c7 	andeq	r0, r0, r7, asr #15
    5870:	15031909 	strne	r1, [r3, #-2313]	; 0xfffff6f7
    5874:	000003a9 	andeq	r0, r0, r9, lsr #7
    5878:	290c002c 	stmdbcs	ip, {r2, r3, r5}
    587c:	a9000003 	stmdbge	r0, {r0, r1}
    5880:	15000003 	strne	r0, [r0, #-3]
    5884:	00000088 	andeq	r0, r0, r8, lsl #1
    5888:	04070003 	streq	r0, [r7], #-3
    588c:	00000336 	andeq	r0, r0, r6, lsr r3
    5890:	0009490e 	andeq	r4, r9, lr, lsl #18
    5894:	031c0900 	tsteq	ip, #0, 18
    5898:	0003361b 	andeq	r3, r3, fp, lsl r6
    589c:	09291100 	stmdbeq	r9!, {r8, ip}
    58a0:	1e090000 	cdpne	0, 0, cr0, cr9, cr0, {0}
    58a4:	03cb1403 	biceq	r1, fp, #50331648	; 0x3000000
    58a8:	01010000 	mrseq	r0, (UNDEF: 1)
    58ac:	03af0407 			; <UNDEFINED> instruction: 0x03af0407
    58b0:	8b0b0000 	blhi	2c58b8 <__ccfg+0x2a5910>
    58b4:	0a000005 	beq	58d0 <__exidx_end+0x828>
    58b8:	008f131d 	addeq	r1, pc, sp, lsl r3	; <UNPREDICTABLE>
    58bc:	01010000 	mrseq	r0, (UNDEF: 1)
    58c0:	0002760b 	andeq	r7, r2, fp, lsl #12
    58c4:	1a1e0a00 	bne	7880cc <__ccfg+0x768124>
    58c8:	000000a0 	andeq	r0, r0, r0, lsr #1
    58cc:	960b0101 	strls	r0, [fp], -r1, lsl #2
    58d0:	0a000009 	beq	58fc <__exidx_end+0x854>
    58d4:	00a0241e 	adceq	r2, r0, lr, lsl r4
    58d8:	01010000 	mrseq	r0, (UNDEF: 1)
    58dc:	0009b20b 	andeq	fp, r9, fp, lsl #4
    58e0:	14220a00 	strtne	r0, [r2], #-2560	; 0xfffff600
    58e4:	000003cb 	andeq	r0, r0, fp, asr #7
    58e8:	6c160101 	ldfvss	f0, [r6], {1}
    58ec:	01000002 	tsteq	r0, r2
    58f0:	0305100d 	movweq	r1, #20493	; 0x500d
    58f4:	000046a5 	andeq	r4, r0, r5, lsr #13
    58f8:	17ef0117 			; <UNDEFINED> instruction: 0x17ef0117
    58fc:	11010000 	mrsne	r0, (UNDEF: 1)
    5900:	00000106 	andeq	r0, r0, r6, lsl #2
    5904:	00000000 	andeq	r0, r0, r0
    5908:	9c010000 	stcls	0, cr0, [r1], {-0}
    590c:	000004bb 			; <UNDEFINED> instruction: 0x000004bb
    5910:	00747318 	rsbseq	r7, r4, r8, lsl r3
    5914:	8f1c1101 	svchi	0x001c1101
    5918:	96000000 	strls	r0, [r0], -r0
    591c:	19000020 	stmdbne	r0, {r5}
    5920:	000017ea 	andeq	r1, r0, sl, ror #15
    5924:	1b2c1101 	blne	b09d30 <__ccfg+0xae9d88>
    5928:	b4000002 	strlt	r0, [r0], #-2
    592c:	18000020 	stmdane	r0, {r5}
    5930:	006c6176 	rsbeq	r6, ip, r6, ror r1
    5934:	d83a1101 	ldmdale	sl!, {r0, r8, ip}
    5938:	d2000000 	andle	r0, r0, #0
    593c:	1a000020 	bne	59c4 <__exidx_end+0x91c>
    5940:	13010070 	movwne	r0, #4208	; 0x1070
    5944:	0004bb12 	andeq	fp, r4, r2, lsl fp
    5948:	00691b00 	rsbeq	r1, r9, r0, lsl #22
    594c:	8f071401 	svchi	0x00071401
    5950:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    5954:	1a000020 	bne	59dc <__exidx_end+0x934>
    5958:	15010076 	strne	r0, [r1, #-118]	; 0xffffff8a
    595c:	0000a507 	andeq	sl, r0, r7, lsl #10
    5960:	04d41c00 	ldrbeq	r1, [r4], #3072	; 0xc00
	...
    596c:	1c010000 	stcne	0, cr0, [r1], {-0}
    5970:	04de1c03 	ldrbeq	r1, [lr], #3075	; 0xc03
	...
    597c:	1f010000 	svcne	0x00010000
    5980:	04e81d03 	strbteq	r1, [r8], #3331	; 0xd03
    5984:	00000000 	andeq	r0, r0, r0
    5988:	09180000 	ldmdbeq	r8, {}	; <UNPREDICTABLE>
    598c:	26010000 	strcs	r0, [r1], -r0
    5990:	04f61e0b 	ldrbteq	r1, [r6], #3595	; 0xe0b
    5994:	21030000 	mrscs	r0, (UNDEF: 3)
    5998:	00000000 	andeq	r0, r0, r0
    599c:	02570407 	subseq	r0, r7, #117440512	; 0x7000000
    59a0:	011f0000 	tsteq	pc, r0
    59a4:	000017ff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    59a8:	00060f01 	andeq	r0, r6, r1, lsl #30
    59ac:	00000000 	andeq	r0, r0, r0
    59b0:	01000000 	mrseq	r0, (UNDEF: 0)
    59b4:	0e8d209c 	mcreq	0, 4, r2, cr13, cr12, {4}
    59b8:	5b020000 	blpl	859c0 <__ccfg+0x65a18>
    59bc:	20030135 	andcs	r0, r3, r5, lsr r1
    59c0:	00000bad 	andeq	r0, r0, sp, lsr #23
    59c4:	01355002 	teqeq	r5, r2
    59c8:	17dd2103 	ldrbne	r2, [sp, r3, lsl #2]
    59cc:	a4030000 	strge	r0, [r3], #-0
    59d0:	00670101 	rsbeq	r0, r7, r1, lsl #2
    59d4:	22030000 	andcs	r0, r3, #0
    59d8:	00000d30 	andeq	r0, r0, r0, lsr sp
    59dc:	6718a403 	ldrvs	sl, [r8, -r3, lsl #8]
    59e0:	00000000 	andeq	r0, r0, r0
    59e4:	0004f600 	andeq	pc, r4, r0, lsl #12
    59e8:	44000300 	strmi	r0, [r0], #-768	; 0xfffffd00
    59ec:	04000015 	streq	r0, [r0], #-21	; 0xffffffeb
    59f0:	0000bd01 	andeq	fp, r0, r1, lsl #26
    59f4:	18690c00 	stmdane	r9!, {sl, fp}^
    59f8:	06e40000 	strbteq	r0, [r4], r0
    59fc:	09b80000 	ldmibeq	r8!, {}	; <UNPREDICTABLE>
    5a00:	00000000 	andeq	r0, r0, r0
    5a04:	3d3a0000 	ldccc	0, cr0, [sl, #-0]
    5a08:	01020000 	mrseq	r0, (UNDEF: 2)
    5a0c:	00098a06 	andeq	r8, r9, r6, lsl #20
    5a10:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    5a14:	00000844 	andeq	r0, r0, r4, asr #16
    5a18:	37050402 	strcc	r0, [r5, -r2, lsl #8]
    5a1c:	02000006 	andeq	r0, r0, #6
    5a20:	06320508 	ldrteq	r0, [r2], -r8, lsl #10
    5a24:	e1030000 	mrs	r0, (UNDEF: 3)
    5a28:	03000008 	movweq	r0, #8
    5a2c:	004d182e 	subeq	r1, sp, lr, lsr #16
    5a30:	01020000 	mrseq	r0, (UNDEF: 2)
    5a34:	00098808 	andeq	r8, r9, r8, lsl #16
    5a38:	040a0300 	streq	r0, [sl], #-768	; 0xfffffd00
    5a3c:	31030000 	mrscc	r0, (UNDEF: 3)
    5a40:	00006019 	andeq	r6, r0, r9, lsl r0
    5a44:	07020200 	streq	r0, [r2, -r0, lsl #4]
    5a48:	00000a80 	andeq	r0, r0, r0, lsl #21
    5a4c:	0009a103 	andeq	sl, r9, r3, lsl #2
    5a50:	19340300 	ldmdbne	r4!, {r8, r9}
    5a54:	00000073 	andeq	r0, r0, r3, ror r0
    5a58:	cf070402 	svcgt	0x00070402
    5a5c:	02000003 	andeq	r0, r0, #3
    5a60:	03ca0708 	biceq	r0, sl, #8, 14	; 0x200000
    5a64:	04040000 	streq	r0, [r4], #-0
    5a68:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    5a6c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    5a70:	000003d4 	ldrdeq	r0, [r0], -r4
    5a74:	0024ae03 	eoreq	sl, r4, r3, lsl #28
    5a78:	12270400 	eorne	r0, r7, #0, 8
    5a7c:	00000054 	andeq	r0, r0, r4, asr r0
    5a80:	00008f05 	andeq	r8, r0, r5, lsl #30
    5a84:	008f0600 	addeq	r0, pc, r0, lsl #12
    5a88:	c7030000 	strgt	r0, [r3, -r0]
    5a8c:	04000019 	streq	r0, [r0], #-25	; 0xffffffe7
    5a90:	0041122b 	subeq	r1, r1, fp, lsr #4
    5a94:	a5060000 	strge	r0, [r6, #-0]
    5a98:	03000000 	movweq	r0, #0
    5a9c:	000024ff 	strdeq	r2, [r0], -pc	; <UNPREDICTABLE>
    5aa0:	67122c04 	ldrvs	r2, [r2, -r4, lsl #24]
    5aa4:	05000000 	streq	r0, [r0, #-0]
    5aa8:	000000b6 	strheq	r0, [r0], -r6
    5aac:	00053803 	andeq	r3, r5, r3, lsl #16
    5ab0:	122d0400 	eorne	r0, sp, #0, 8
    5ab4:	00000067 	andeq	r0, r0, r7, rrx
    5ab8:	32040807 	andcc	r0, r4, #458752	; 0x70000
    5abc:	00016109 	andeq	r6, r1, r9, lsl #2
    5ac0:	003e0800 	eorseq	r0, lr, r0, lsl #16
    5ac4:	34040000 	strcc	r0, [r4], #-0
    5ac8:	0000a507 	andeq	sl, r0, r7, lsl #10
    5acc:	07010100 	streq	r0, [r1, -r0, lsl #2]
    5ad0:	053e0800 	ldreq	r0, [lr, #-2048]!	; 0xfffff800
    5ad4:	35040000 	strcc	r0, [r4, #-0]
    5ad8:	0000a503 	andeq	sl, r0, r3, lsl #10
    5adc:	06010100 	streq	r0, [r1], -r0, lsl #2
    5ae0:	026f0800 	rsbeq	r0, pc, #0, 16
    5ae4:	36040000 	strcc	r0, [r4], -r0
    5ae8:	0000a503 	andeq	sl, r0, r3, lsl #10
    5aec:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    5af0:	05780800 	ldrbeq	r0, [r8, #-2048]!	; 0xfffff800
    5af4:	37040000 	strcc	r0, [r4, -r0]
    5af8:	0000a503 	andeq	sl, r0, r3, lsl #10
    5afc:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    5b00:	08650800 	stmdaeq	r5!, {fp}^
    5b04:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    5b08:	0000a503 	andeq	sl, r0, r3, lsl #10
    5b0c:	00040100 	andeq	r0, r4, r0, lsl #2
    5b10:	05450900 	strbeq	r0, [r5, #-2304]	; 0xfffff700
    5b14:	3a040000 	bcc	105b1c <__ccfg+0xe5b74>
    5b18:	0000a507 	andeq	sl, r0, r7, lsl #10
    5b1c:	5e090100 	adfple	f0, f1, f0
    5b20:	04000007 	streq	r0, [r0], #-7
    5b24:	00a5033c 	adceq	r0, r5, ip, lsr r3
    5b28:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    5b2c:	00000b52 	andeq	r0, r0, r2, asr fp
    5b30:	a5033d04 	strge	r3, [r3, #-3332]	; 0xfffff2fc
    5b34:	03000000 	movweq	r0, #0
    5b38:	00079309 	andeq	r9, r7, r9, lsl #6
    5b3c:	083f0400 	ldmdaeq	pc!, {sl}	; <UNPREDICTABLE>
    5b40:	000000b6 	strheq	r0, [r0], -r6
    5b44:	c1030004 	tstgt	r3, r4
    5b48:	04000002 	streq	r0, [r0], #-2
    5b4c:	00d30341 	sbcseq	r0, r3, r1, asr #6
    5b50:	61060000 	mrsvs	r0, (UNDEF: 6)
    5b54:	0a000001 	beq	5b60 <__exidx_end+0xab8>
    5b58:	0000057f 	andeq	r0, r0, pc, ror r5
    5b5c:	6d1a4304 	ldcvs	3, cr4, [sl, #-16]
    5b60:	01000001 	tsteq	r0, r1
    5b64:	01b10a01 			; <UNDEFINED> instruction: 0x01b10a01
    5b68:	45040000 	strmi	r0, [r4, #-0]
    5b6c:	00018e0e 	andeq	r8, r1, lr, lsl #28
    5b70:	0b010100 	bleq	45f78 <__ccfg+0x25fd0>
    5b74:	00019404 	andeq	r9, r1, r4, lsl #8
    5b78:	08010200 	stmdaeq	r1, {r9}
    5b7c:	00000991 	muleq	r0, r1, r9
    5b80:	00019405 	andeq	r9, r1, r5, lsl #8
    5b84:	02ca0a00 	sbceq	r0, sl, #0, 20
    5b88:	45040000 	strmi	r0, [r4, #-0]
    5b8c:	00018e1e 	andeq	r8, r1, lr, lsl lr
    5b90:	07010100 	streq	r0, [r1, -r0, lsl #2]
    5b94:	098f0508 	stmibeq	pc, {r3, r8, sl}	; <UNPREDICTABLE>
    5b98:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    5b9c:	00064f09 	andeq	r4, r6, r9, lsl #30
    5ba0:	0b900500 	bleq	fe406fa8 <_estack+0xde401fa8>
    5ba4:	00000067 	andeq	r0, r0, r7, rrx
    5ba8:	0c840900 			; <UNDEFINED> instruction: 0x0c840900
    5bac:	91050000 	mrsls	r0, (UNDEF: 5)
    5bb0:	00008f08 	andeq	r8, r0, r8, lsl #30
    5bb4:	f4090400 	vst3.8	{d0-d2}, [r9], r0
    5bb8:	05000001 	streq	r0, [r0, #-1]
    5bbc:	00b11092 	umlalseq	r1, r1, r2, r0	; <UNPREDICTABLE>
    5bc0:	00060000 	andeq	r0, r6, r0
    5bc4:	000a0b03 	andeq	r0, sl, r3, lsl #22
    5bc8:	03930500 	orrseq	r0, r3, #0, 10
    5bcc:	000001ae 	andeq	r0, r0, lr, lsr #3
    5bd0:	0001df0c 	andeq	sp, r1, ip, lsl #30
    5bd4:	0001f600 	andeq	pc, r1, r0, lsl #12
    5bd8:	0a000d00 	beq	8fe0 <__exidx_end+0x3f38>
    5bdc:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
    5be0:	eb0f9905 	bl	3ebffc <__ccfg+0x3cc054>
    5be4:	01000001 	tsteq	r0, r1
    5be8:	06010701 	streq	r0, [r1], -r1, lsl #14
    5bec:	022e0991 	eoreq	r0, lr, #2375680	; 0x244000
    5bf0:	9a080000 	bls	205bf8 <__ccfg+0x1e5c50>
    5bf4:	06000007 	streq	r0, [r0], -r7
    5bf8:	00a50793 	umlaleq	r0, r5, r3, r7
    5bfc:	07010000 	streq	r0, [r1, -r0]
    5c00:	b4080001 	strlt	r0, [r8], #-1
    5c04:	06000004 	streq	r0, [r0], -r4
    5c08:	00a50394 	umlaleq	r0, r5, r4, r3
    5c0c:	01010000 	mrseq	r0, (UNDEF: 1)
    5c10:	03000000 	movweq	r0, #0
    5c14:	00000871 	andeq	r0, r0, r1, ror r8
    5c18:	04039606 	streq	r9, [r3], #-1542	; 0xfffff9fa
    5c1c:	05000002 	streq	r0, [r0, #-2]
    5c20:	0000022e 	andeq	r0, r0, lr, lsr #4
    5c24:	00023a0c 	andeq	r3, r2, ip, lsl #20
    5c28:	00024a00 	andeq	r4, r2, r0, lsl #20
    5c2c:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    5c30:	0000023f 	andeq	r0, r0, pc, lsr r2
    5c34:	0003830a 	andeq	r8, r3, sl, lsl #6
    5c38:	179c0600 	ldrne	r0, [ip, r0, lsl #12]
    5c3c:	0000024a 	andeq	r0, r0, sl, asr #4
    5c40:	9b0c0101 	blls	30604c <__ccfg+0x2e60a4>
    5c44:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    5c48:	0d000002 	stceq	0, cr0, [r0, #-8]
    5c4c:	025d0500 	subseq	r0, sp, #0, 10
    5c50:	f80a0000 			; <UNDEFINED> instruction: 0xf80a0000
    5c54:	07000004 	streq	r0, [r0, -r4]
    5c58:	02681306 	rsbeq	r1, r8, #402653184	; 0x18000000
    5c5c:	01010000 	mrseq	r0, (UNDEF: 1)
    5c60:	0007400a 	andeq	r4, r7, sl
    5c64:	0ec30500 	cdpeq	5, 12, cr0, cr3, cr0, {0}
    5c68:	000000b6 	strheq	r0, [r0], -r6
    5c6c:	aa0e0101 	bge	386078 <__ccfg+0x3660d0>
    5c70:	08000009 	stmdaeq	r0, {r0, r3}
    5c74:	9610016e 	ldrls	r0, [r0], -lr, ror #2
    5c78:	0b000002 	bleq	5c88 <__exidx_end+0xbe0>
    5c7c:	00029c04 	andeq	r9, r2, r4, lsl #24
    5c80:	a8010f00 	stmdage	r1, {r8, r9, sl, fp}
    5c84:	10000002 	andne	r0, r0, r2
    5c88:	0000008f 	andeq	r0, r0, pc, lsl #1
    5c8c:	019b0c00 	orrseq	r0, fp, r0, lsl #24
    5c90:	02b30000 	adcseq	r0, r3, #0
    5c94:	000d0000 	andeq	r0, sp, r0
    5c98:	0002a805 	andeq	sl, r2, r5, lsl #16
    5c9c:	08081100 	stmdaeq	r8, {r8, ip}
    5ca0:	7f080000 	svcvc	0x00080000
    5ca4:	02b31601 	adcseq	r1, r3, #1048576	; 0x100000
    5ca8:	01010000 	mrseq	r0, (UNDEF: 1)
    5cac:	00036611 	andeq	r6, r3, r1, lsl r6
    5cb0:	01820800 	orreq	r0, r2, r0, lsl #16
    5cb4:	0000c214 	andeq	ip, r0, r4, lsl r2
    5cb8:	11010100 	mrsne	r0, (UNDEF: 17)
    5cbc:	00000343 	andeq	r0, r0, r3, asr #6
    5cc0:	0e02d808 	cdpeq	8, 0, cr13, cr2, cr8, {0}
    5cc4:	000000b6 	strheq	r0, [r0], -r6
    5cc8:	08120101 	ldmdaeq	r2, {r0, r8}
    5ccc:	09030308 	stmdbeq	r3, {r3, r8, r9}
    5cd0:	0000030c 	andeq	r0, r0, ip, lsl #6
    5cd4:	00383213 	eorseq	r3, r8, r3, lsl r2
    5cd8:	03070800 	movweq	r0, #30720	; 0x7800
    5cdc:	00008f07 	andeq	r8, r0, r7, lsl #30
    5ce0:	dc130000 	ldcle	0, cr0, [r3], {-0}
    5ce4:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    5ce8:	c7080308 	strgt	r0, [r8, -r8, lsl #6]
    5cec:	04000000 	streq	r0, [r0], #-0
    5cf0:	03fb0e00 	mvnseq	r0, #0, 28
    5cf4:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    5cf8:	02e50303 	rsceq	r0, r5, #201326592	; 0xc000000
    5cfc:	33140000 	tstcc	r4, #0
    5d00:	30000000 	andcc	r0, r0, r0
    5d04:	08030b08 	stmdaeq	r3, {r3, r8, r9, fp}
    5d08:	0000037c 	andeq	r0, r0, ip, ror r3
    5d0c:	001add13 	andseq	sp, sl, r3, lsl sp
    5d10:	03140800 	tsteq	r4, #0, 16
    5d14:	00008f08 	andeq	r8, r0, r8, lsl #30
    5d18:	54130000 	ldrpl	r0, [r3], #-0
    5d1c:	08000009 	stmdaeq	r0, {r0, r3}
    5d20:	8f080315 	svchi	0x00080315
    5d24:	02000000 	andeq	r0, r0, #0
    5d28:	0049a213 	subeq	sl, r9, r3, lsl r2
    5d2c:	03160800 	tsteq	r6, #0, 16
    5d30:	0002890b 	andeq	r8, r2, fp, lsl #18
    5d34:	05130400 	ldreq	r0, [r3, #-1024]	; 0xfffffc00
    5d38:	08000044 	stmdaeq	r0, {r2, r6}
    5d3c:	c7090317 	smladgt	r9, r7, r3, r0
    5d40:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    5d44:	00000713 	andeq	r0, r0, r3, lsl r7
    5d48:	03180800 	tsteq	r8, #0, 16
    5d4c:	00037c0f 	andeq	r7, r3, pc, lsl #24
    5d50:	c7130c00 	ldrgt	r0, [r3, -r0, lsl #24]
    5d54:	08000007 	stmdaeq	r0, {r0, r1, r2}
    5d58:	8c150319 	ldchi	3, cr0, [r5], {25}
    5d5c:	2c000003 	stccs	0, cr0, [r0], {3}
    5d60:	030c0c00 	movweq	r0, #52224	; 0xcc00
    5d64:	038c0000 	orreq	r0, ip, #0
    5d68:	88150000 	ldmdahi	r5, {}	; <UNPREDICTABLE>
    5d6c:	03000000 	movweq	r0, #0
    5d70:	19040b00 	stmdbne	r4, {r8, r9, fp}
    5d74:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    5d78:	00000949 	andeq	r0, r0, r9, asr #18
    5d7c:	1b031c08 	blne	ccda4 <__ccfg+0xacdfc>
    5d80:	00000319 	andeq	r0, r0, r9, lsl r3
    5d84:	00092911 	andeq	r2, r9, r1, lsl r9
    5d88:	031e0800 	tsteq	lr, #0, 16
    5d8c:	0003ae14 	andeq	sl, r3, r4, lsl lr
    5d90:	0b010100 	bleq	46198 <__ccfg+0x261f0>
    5d94:	00039204 	andeq	r9, r3, r4, lsl #4
    5d98:	058b0a00 	streq	r0, [fp, #2560]	; 0xa00
    5d9c:	1d090000 	stcne	0, cr0, [r9, #-0]
    5da0:	00008f13 	andeq	r8, r0, r3, lsl pc
    5da4:	0a010100 	beq	461ac <__ccfg+0x26204>
    5da8:	00000276 	andeq	r0, r0, r6, ror r2
    5dac:	a01a1e09 	andsge	r1, sl, r9, lsl #28
    5db0:	01000000 	mrseq	r0, (UNDEF: 0)
    5db4:	09960a01 	ldmibeq	r6, {r0, r9, fp}
    5db8:	1e090000 	cdpne	0, 0, cr0, cr9, cr0, {0}
    5dbc:	0000a024 	andeq	sl, r0, r4, lsr #32
    5dc0:	0a010100 	beq	461c8 <__ccfg+0x26220>
    5dc4:	000009b2 			; <UNDEFINED> instruction: 0x000009b2
    5dc8:	ae142209 	cdpge	2, 1, cr2, cr4, cr9, {0}
    5dcc:	01000003 	tsteq	r0, r3
    5dd0:	18581601 	ldmdane	r8, {r0, r9, sl, ip}^
    5dd4:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    5dd8:	0002960f 	andeq	r9, r2, pc, lsl #12
    5ddc:	00030500 	andeq	r0, r3, r0, lsl #10
    5de0:	16000000 	strne	r0, [r0], -r0
    5de4:	000018a5 	andeq	r1, r0, r5, lsr #17
    5de8:	8f0d0901 	svchi	0x000d0901
    5dec:	05000000 	streq	r0, [r0, #-0]
    5df0:	00000003 	andeq	r0, r0, r3
    5df4:	026d1700 	rsbeq	r1, sp, #0, 14
    5df8:	0a010000 	beq	45e00 <__ccfg+0x25e58>
    5dfc:	aa03050c 	bge	c7234 <__ccfg+0xa728c>
    5e00:	18000046 	stmdane	r0, {r1, r2, r6}
    5e04:	0018ba01 	andseq	fp, r8, r1, lsl #20
    5e08:	06580100 	ldrbeq	r0, [r8], -r0, lsl #2
    5e0c:	00000001 	andeq	r0, r0, r1
    5e10:	00000000 	andeq	r0, r0, r0
    5e14:	479c0100 	ldrmi	r0, [ip, r0, lsl #2]
    5e18:	19000004 	stmdbne	r0, {r2}
    5e1c:	00746361 	rsbseq	r6, r4, r1, ror #6
    5e20:	961d5801 	ldrls	r5, [sp], -r1, lsl #16
    5e24:	16000002 	strne	r0, [r0], -r2
    5e28:	00000021 	andeq	r0, r0, r1, lsr #32
    5e2c:	18ad0118 	stmiane	sp!, {r3, r4, r8}
    5e30:	1c010000 	stcne	0, cr0, [r1], {-0}
    5e34:	00000101 	andeq	r0, r0, r1, lsl #2
    5e38:	00000000 	andeq	r0, r0, r0
    5e3c:	9c010000 	stcls	0, cr0, [r1], {-0}
    5e40:	000004de 	ldrdeq	r0, [r0], -lr
    5e44:	0009781a 	andeq	r7, r9, sl, lsl r8
    5e48:	011c0100 	tsteq	ip, r0, lsl #2
    5e4c:	0000008f 	andeq	r0, r0, pc, lsl #1
    5e50:	00002152 	andeq	r2, r0, r2, asr r1
    5e54:	0018531b 	andseq	r5, r8, fp, lsl r3
    5e58:	01210100 			; <UNDEFINED> instruction: 0x01210100
    5e5c:	00000000 	andeq	r0, r0, r0
    5e60:	0018601b 	andseq	r6, r8, fp, lsl r0
    5e64:	01300100 	teqeq	r0, r0, lsl #2
    5e68:	00000000 	andeq	r0, r0, r0
    5e6c:	0019b21b 	andseq	fp, r9, fp, lsl r2
    5e70:	01370100 	teqeq	r7, r0, lsl #2
    5e74:	00000000 	andeq	r0, r0, r0
    5e78:	0004de1c 	andeq	sp, r4, ip, lsl lr
    5e7c:	00000000 	andeq	r0, r0, r0
    5e80:	00095800 	andeq	r5, r9, r0, lsl #16
    5e84:	072b0100 	streq	r0, [fp, -r0, lsl #2]!
    5e88:	000004ad 	andeq	r0, r0, sp, lsr #9
    5e8c:	0004ec1d 	andeq	lr, r4, sp, lsl ip
    5e90:	de1c0000 	cdple	0, 1, cr0, cr12, cr0, {0}
    5e94:	00000004 	andeq	r0, r0, r4
    5e98:	80000000 	andhi	r0, r0, r0
    5e9c:	01000009 	tsteq	r0, r9
    5ea0:	04c7073e 	strbeq	r0, [r7], #1854	; 0x73e
    5ea4:	ec1d0000 	ldc	0, cr0, [sp], {-0}
    5ea8:	00000004 	andeq	r0, r0, r4
    5eac:	0004de1e 	andeq	sp, r4, lr, lsl lr
    5eb0:	00000000 	andeq	r0, r0, r0
    5eb4:	00099800 	andeq	r9, r9, r0, lsl #16
    5eb8:	074a0100 	strbeq	r0, [sl, -r0, lsl #2]
    5ebc:	0004ec1d 	andeq	lr, r4, sp, lsl ip
    5ec0:	1f000000 	svcne	0x00000000
    5ec4:	000017dd 	ldrdeq	r1, [r0], -sp
    5ec8:	0101a402 	tsteq	r1, r2, lsl #8
    5ecc:	00000067 	andeq	r0, r0, r7, rrx
    5ed0:	0d302003 	ldceq	0, cr2, [r0, #-12]!
    5ed4:	a4020000 	strge	r0, [r2], #-0
    5ed8:	00006718 	andeq	r6, r0, r8, lsl r7
    5edc:	a7000000 	strge	r0, [r0, -r0]
    5ee0:	0300000a 	movweq	r0, #10
    5ee4:	00170f00 	andseq	r0, r7, r0, lsl #30
    5ee8:	bd010400 	cfstrslt	mvf0, [r1, #-0]
    5eec:	0c000000 	stceq	0, cr0, [r0], {-0}
    5ef0:	00001940 	andeq	r1, r0, r0, asr #18
    5ef4:	000006e4 	andeq	r0, r0, r4, ror #13
    5ef8:	00000b58 	andeq	r0, r0, r8, asr fp
    5efc:	00000000 	andeq	r0, r0, r0
    5f00:	0000407a 	andeq	r4, r0, sl, ror r0
    5f04:	8a060102 	bhi	186314 <__ccfg+0x16636c>
    5f08:	02000009 	andeq	r0, r0, #9
    5f0c:	08440502 	stmdaeq	r4, {r1, r8, sl}^
    5f10:	04020000 	streq	r0, [r2], #-0
    5f14:	00063705 	andeq	r3, r6, r5, lsl #14
    5f18:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    5f1c:	00000632 	andeq	r0, r0, r2, lsr r6
    5f20:	0008e103 	andeq	lr, r8, r3, lsl #2
    5f24:	182e0400 	stmdane	lr!, {sl}
    5f28:	0000004d 	andeq	r0, r0, sp, asr #32
    5f2c:	88080102 	stmdahi	r8, {r1, r8}
    5f30:	03000009 	movweq	r0, #9
    5f34:	0000040a 	andeq	r0, r0, sl, lsl #8
    5f38:	60193104 	andsvs	r3, r9, r4, lsl #2
    5f3c:	02000000 	andeq	r0, r0, #0
    5f40:	0a800702 	beq	fe007b50 <_estack+0xde002b50>
    5f44:	a1030000 	mrsge	r0, (UNDEF: 3)
    5f48:	04000009 	streq	r0, [r0], #-9
    5f4c:	00731934 	rsbseq	r1, r3, r4, lsr r9
    5f50:	04020000 	streq	r0, [r2], #-0
    5f54:	0003cf07 	andeq	ip, r3, r7, lsl #30
    5f58:	07080200 	streq	r0, [r8, -r0, lsl #4]
    5f5c:	000003ca 	andeq	r0, r0, sl, asr #7
    5f60:	69050404 	stmdbvs	r5, {r2, sl}
    5f64:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    5f68:	03d40704 	bicseq	r0, r4, #4, 14	; 0x100000
    5f6c:	d4030000 	strle	r0, [r3], #-0
    5f70:	05000007 	streq	r0, [r0, #-7]
    5f74:	00411226 	subeq	r1, r1, r6, lsr #4
    5f78:	ae030000 	cdpge	0, 0, cr0, cr3, cr0, {0}
    5f7c:	05000024 	streq	r0, [r0, #-36]	; 0xffffffdc
    5f80:	00541227 	subseq	r1, r4, r7, lsr #4
    5f84:	9b050000 	blls	145f8c <__ccfg+0x125fe4>
    5f88:	06000000 	streq	r0, [r0], -r0
    5f8c:	0000009b 	muleq	r0, fp, r0
    5f90:	0019c703 	andseq	ip, r9, r3, lsl #14
    5f94:	122b0500 	eorne	r0, fp, #0, 10
    5f98:	00000041 	andeq	r0, r0, r1, asr #32
    5f9c:	0000b106 	andeq	fp, r0, r6, lsl #2
    5fa0:	00b10500 	adcseq	r0, r1, r0, lsl #10
    5fa4:	ff030000 			; <UNDEFINED> instruction: 0xff030000
    5fa8:	05000024 	streq	r0, [r0, #-36]	; 0xffffffdc
    5fac:	0067122c 	rsbeq	r1, r7, ip, lsr #4
    5fb0:	c7050000 	strgt	r0, [r5, -r0]
    5fb4:	03000000 	movweq	r0, #0
    5fb8:	00000538 	andeq	r0, r0, r8, lsr r5
    5fbc:	67122d05 	ldrvs	r2, [r2, -r5, lsl #26]
    5fc0:	07000000 	streq	r0, [r0, -r0]
    5fc4:	09320508 	ldmdbeq	r2!, {r3, r8, sl}
    5fc8:	00000172 	andeq	r0, r0, r2, ror r1
    5fcc:	00003e08 	andeq	r3, r0, r8, lsl #28
    5fd0:	07340500 	ldreq	r0, [r4, -r0, lsl #10]!
    5fd4:	000000b1 	strheq	r0, [r0], -r1
    5fd8:	00070101 	andeq	r0, r7, r1, lsl #2
    5fdc:	00053e08 	andeq	r3, r5, r8, lsl #28
    5fe0:	03350500 	teqeq	r5, #0, 10
    5fe4:	000000b1 	strheq	r0, [r0], -r1
    5fe8:	00060101 	andeq	r0, r6, r1, lsl #2
    5fec:	00026f08 	andeq	r6, r2, r8, lsl #30
    5ff0:	03360500 	teqeq	r6, #0, 10
    5ff4:	000000b1 	strheq	r0, [r0], -r1
    5ff8:	00050101 	andeq	r0, r5, r1, lsl #2
    5ffc:	00057808 	andeq	r7, r5, r8, lsl #16
    6000:	03370500 	teqeq	r7, #0, 10
    6004:	000000b1 	strheq	r0, [r0], -r1
    6008:	00040101 	andeq	r0, r4, r1, lsl #2
    600c:	00086508 	andeq	r6, r8, r8, lsl #10
    6010:	03380500 	teqeq	r8, #0, 10
    6014:	000000b1 	strheq	r0, [r0], -r1
    6018:	00000401 	andeq	r0, r0, r1, lsl #8
    601c:	00054509 	andeq	r4, r5, r9, lsl #10
    6020:	073a0500 	ldreq	r0, [sl, -r0, lsl #10]!
    6024:	000000b1 	strheq	r0, [r0], -r1
    6028:	075e0901 	ldrbeq	r0, [lr, -r1, lsl #18]
    602c:	3c050000 	stccc	0, cr0, [r5], {-0}
    6030:	0000b103 	andeq	fp, r0, r3, lsl #2
    6034:	52090200 	andpl	r0, r9, #0, 4
    6038:	0500000b 	streq	r0, [r0, #-11]
    603c:	00b1033d 	adcseq	r0, r1, sp, lsr r3
    6040:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    6044:	00000793 	muleq	r0, r3, r7
    6048:	c7083f05 	strgt	r3, [r8, -r5, lsl #30]
    604c:	04000000 	streq	r0, [r0], #-0
    6050:	02c10300 	sbceq	r0, r1, #0, 6
    6054:	41050000 	mrsmi	r0, (UNDEF: 5)
    6058:	0000e403 	andeq	lr, r0, r3, lsl #8
    605c:	01720600 	cmneq	r2, r0, lsl #12
    6060:	7f0a0000 	svcvc	0x000a0000
    6064:	05000005 	streq	r0, [r0, #-5]
    6068:	017e1a43 	cmneq	lr, r3, asr #20
    606c:	01010000 	mrseq	r0, (UNDEF: 1)
    6070:	0001b10a 	andeq	fp, r1, sl, lsl #2
    6074:	0e450500 	cdpeq	5, 4, cr0, cr5, cr0, {0}
    6078:	0000019f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
    607c:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    6080:	000001a5 	andeq	r0, r0, r5, lsr #3
    6084:	91080102 	tstls	r8, r2, lsl #2
    6088:	05000009 	streq	r0, [r0, #-9]
    608c:	000001a5 	andeq	r0, r0, r5, lsr #3
    6090:	0002ca0a 	andeq	ip, r2, sl, lsl #20
    6094:	1e450500 	cdpne	5, 4, cr0, cr5, cr0, {0}
    6098:	0000019f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
    609c:	08070101 	stmdaeq	r7, {r0, r8}
    60a0:	f0098f06 			; <UNDEFINED> instruction: 0xf0098f06
    60a4:	09000001 	stmdbeq	r0, {r0}
    60a8:	0000064f 	andeq	r0, r0, pc, asr #12
    60ac:	670b9006 	strvs	r9, [fp, -r6]
    60b0:	00000000 	andeq	r0, r0, r0
    60b4:	000c8409 	andeq	r8, ip, r9, lsl #8
    60b8:	08910600 	ldmeq	r1, {r9, sl}
    60bc:	0000009b 	muleq	r0, fp, r0
    60c0:	01f40904 	mvnseq	r0, r4, lsl #18
    60c4:	92060000 	andls	r0, r6, #0
    60c8:	0000bd10 	andeq	fp, r0, r0, lsl sp
    60cc:	03000600 	movweq	r0, #1536	; 0x600
    60d0:	00000a0b 	andeq	r0, r0, fp, lsl #20
    60d4:	bf039306 	svclt	0x00039306
    60d8:	0c000001 	stceq	0, cr0, [r0], {1}
    60dc:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    60e0:	00000207 	andeq	r0, r0, r7, lsl #4
    60e4:	b40a000d 	strlt	r0, [sl], #-13
    60e8:	06000007 	streq	r0, [r0], -r7
    60ec:	01fc0f99 			; <UNDEFINED> instruction: 0x01fc0f99
    60f0:	01010000 	mrseq	r0, (UNDEF: 1)
    60f4:	00c2040b 	sbceq	r0, r2, fp, lsl #8
    60f8:	01070000 	mrseq	r0, (UNDEF: 7)
    60fc:	45099107 	strmi	r9, [r9, #-263]	; 0xfffffef9
    6100:	08000002 	stmdaeq	r0, {r1}
    6104:	0000079a 	muleq	r0, sl, r7
    6108:	b1079307 	tstlt	r7, r7, lsl #6
    610c:	01000000 	mrseq	r0, (UNDEF: 0)
    6110:	08000107 	stmdaeq	r0, {r0, r1, r2, r8}
    6114:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
    6118:	b1039407 	tstlt	r3, r7, lsl #8
    611c:	01000000 	mrseq	r0, (UNDEF: 0)
    6120:	00000001 	andeq	r0, r0, r1
    6124:	00087103 	andeq	r7, r8, r3, lsl #2
    6128:	03960700 	orrseq	r0, r6, #0, 14
    612c:	0000021b 	andeq	r0, r0, fp, lsl r2
    6130:	00024505 	andeq	r4, r2, r5, lsl #10
    6134:	02510c00 	subseq	r0, r1, #0, 24
    6138:	02610000 	rsbeq	r0, r1, #0
    613c:	000d0000 	andeq	r0, sp, r0
    6140:	00025605 	andeq	r5, r2, r5, lsl #12
    6144:	03830a00 	orreq	r0, r3, #0, 20
    6148:	9c070000 	stcls	0, cr0, [r7], {-0}
    614c:	00026117 	andeq	r6, r2, r7, lsl r1
    6150:	0c010100 	stfeqs	f0, [r1], {-0}
    6154:	000000a7 	andeq	r0, r0, r7, lsr #1
    6158:	0000027f 	andeq	r0, r0, pc, ror r2
    615c:	7405000d 	strvc	r0, [r5], #-13
    6160:	0a000002 	beq	6170 <__exidx_end+0x10c8>
    6164:	000004f8 	strdeq	r0, [r0], -r8
    6168:	7f130608 	svcvc	0x00130608
    616c:	01000002 	tsteq	r0, r2
    6170:	07400a01 	strbeq	r0, [r0, -r1, lsl #20]
    6174:	c3060000 	movwgt	r0, #24576	; 0x6000
    6178:	0000c70e 	andeq	ip, r0, lr, lsl #14
    617c:	0e010100 	adfeqs	f0, f1, f0
    6180:	000009aa 	andeq	r0, r0, sl, lsr #19
    6184:	10016e09 	andne	r6, r1, r9, lsl #28
    6188:	000002ad 	andeq	r0, r0, sp, lsr #5
    618c:	02b3040b 	adcseq	r0, r3, #184549376	; 0xb000000
    6190:	010f0000 	mrseq	r0, CPSR
    6194:	000002bf 			; <UNDEFINED> instruction: 0x000002bf
    6198:	00009b10 	andeq	r9, r0, r0, lsl fp
    619c:	ac0c0000 	stcge	0, cr0, [ip], {-0}
    61a0:	ca000001 	bgt	61ac <__exidx_end+0x1104>
    61a4:	0d000002 	stceq	0, cr0, [r0, #-8]
    61a8:	02bf0500 	adcseq	r0, pc, #0, 10
    61ac:	08110000 	ldmdaeq	r1, {}	; <UNPREDICTABLE>
    61b0:	09000008 	stmdbeq	r0, {r3}
    61b4:	ca16017f 	bgt	5867b8 <__ccfg+0x566810>
    61b8:	01000002 	tsteq	r0, r2
    61bc:	03661101 	cmneq	r6, #1073741824	; 0x40000000
    61c0:	82090000 	andhi	r0, r9, #0
    61c4:	00d31401 	sbcseq	r1, r3, r1, lsl #8
    61c8:	01010000 	mrseq	r0, (UNDEF: 1)
    61cc:	00034311 	andeq	r4, r3, r1, lsl r3
    61d0:	02d80900 	sbcseq	r0, r8, #0, 18
    61d4:	0000c70e 	andeq	ip, r0, lr, lsl #14
    61d8:	12010100 	andne	r0, r1, #0, 2
    61dc:	03030908 	movweq	r0, #14600	; 0x3908
    61e0:	00032309 	andeq	r2, r3, r9, lsl #6
    61e4:	38321300 	ldmdacc	r2!, {r8, r9, ip}
    61e8:	07090000 	streq	r0, [r9, -r0]
    61ec:	009b0703 	addseq	r0, fp, r3, lsl #14
    61f0:	13000000 	movwne	r0, #0
    61f4:	00000bdc 	ldrdeq	r0, [r0], -ip
    61f8:	08030809 	stmdaeq	r3, {r0, r3, fp}
    61fc:	000000d8 	ldrdeq	r0, [r0], -r8
    6200:	fb0e0004 	blx	38621a <__ccfg+0x366272>
    6204:	09000003 	stmdbeq	r0, {r0, r1}
    6208:	fc030309 	stc2	3, cr0, [r3], {9}
    620c:	14000002 	strne	r0, [r0], #-2
    6210:	00000033 	andeq	r0, r0, r3, lsr r0
    6214:	030b0930 	movweq	r0, #47408	; 0xb930
    6218:	00039308 	andeq	r9, r3, r8, lsl #6
    621c:	1add1300 	bne	ff74ae24 <_estack+0xdf745e24>
    6220:	14090000 	strne	r0, [r9], #-0
    6224:	009b0803 	addseq	r0, fp, r3, lsl #16
    6228:	13000000 	movwne	r0, #0
    622c:	00000954 	andeq	r0, r0, r4, asr r9
    6230:	08031509 	stmdaeq	r3, {r0, r3, r8, sl, ip}
    6234:	0000009b 	muleq	r0, fp, r0
    6238:	49a21302 	stmibmi	r2!, {r1, r8, r9, ip}
    623c:	16090000 	strne	r0, [r9], -r0
    6240:	02a00b03 	adceq	r0, r0, #3072	; 0xc00
    6244:	13040000 	movwne	r0, #16384	; 0x4000
    6248:	00004405 	andeq	r4, r0, r5, lsl #8
    624c:	09031709 	stmdbeq	r3, {r0, r3, r8, r9, sl, ip}
    6250:	000000d8 	ldrdeq	r0, [r0], -r8
    6254:	00071308 	andeq	r1, r7, r8, lsl #6
    6258:	18090000 	stmdane	r9, {}	; <UNPREDICTABLE>
    625c:	03930f03 	orrseq	r0, r3, #3, 30
    6260:	130c0000 	movwne	r0, #49152	; 0xc000
    6264:	000007c7 	andeq	r0, r0, r7, asr #15
    6268:	15031909 	strne	r1, [r3, #-2313]	; 0xfffff6f7
    626c:	000003a3 	andeq	r0, r0, r3, lsr #7
    6270:	230c002c 	movwcs	r0, #49196	; 0xc02c
    6274:	a3000003 	movwge	r0, #3
    6278:	15000003 	strne	r0, [r0, #-3]
    627c:	00000088 	andeq	r0, r0, r8, lsl #1
    6280:	040b0003 	streq	r0, [fp], #-3
    6284:	00000330 	andeq	r0, r0, r0, lsr r3
    6288:	0009490e 	andeq	r4, r9, lr, lsl #18
    628c:	031c0900 	tsteq	ip, #0, 18
    6290:	0003301b 	andeq	r3, r3, fp, lsl r0
    6294:	09291100 	stmdbeq	r9!, {r8, ip}
    6298:	1e090000 	cdpne	0, 0, cr0, cr9, cr0, {0}
    629c:	03c51403 	biceq	r1, r5, #50331648	; 0x3000000
    62a0:	01010000 	mrseq	r0, (UNDEF: 1)
    62a4:	03a9040b 			; <UNDEFINED> instruction: 0x03a9040b
    62a8:	8b0a0000 	blhi	2862b0 <__ccfg+0x266308>
    62ac:	0a000005 	beq	62c8 <__exidx_end+0x1220>
    62b0:	009b131d 	addseq	r1, fp, sp, lsl r3
    62b4:	01010000 	mrseq	r0, (UNDEF: 1)
    62b8:	0002760a 	andeq	r7, r2, sl, lsl #12
    62bc:	1a1e0a00 	bne	788ac4 <__ccfg+0x768b1c>
    62c0:	000000ac 	andeq	r0, r0, ip, lsr #1
    62c4:	960a0101 	strls	r0, [sl], -r1, lsl #2
    62c8:	0a000009 	beq	62f4 <__exidx_end+0x124c>
    62cc:	00ac241e 	adceq	r2, ip, lr, lsl r4
    62d0:	01010000 	mrseq	r0, (UNDEF: 1)
    62d4:	0009b20a 	andeq	fp, r9, sl, lsl #4
    62d8:	14220a00 	strtne	r0, [r2], #-2560	; 0xfffff600
    62dc:	000003c5 	andeq	r0, r0, r5, asr #7
    62e0:	2e160101 	mufcss	f0, f6, f1
    62e4:	01000009 	tsteq	r0, r9
    62e8:	00c70f0f 	sbceq	r0, r7, pc, lsl #30
    62ec:	03050000 	movweq	r0, #20480	; 0x5000
    62f0:	00000000 	andeq	r0, r0, r0
    62f4:	000a3716 	andeq	r3, sl, r6, lsl r7
    62f8:	150f0100 	strne	r0, [pc, #-256]	; 6200 <__exidx_end+0x1158>
    62fc:	000000c7 	andeq	r0, r0, r7, asr #1
    6300:	00000305 	andeq	r0, r0, r5, lsl #6
    6304:	9e160000 	cdpls	0, 1, cr0, cr6, cr0, {0}
    6308:	01000019 	tsteq	r0, r9, lsl r0
    630c:	02151410 	andseq	r1, r5, #16, 8	; 0x10000000
    6310:	03050000 	movweq	r0, #20480	; 0x5000
    6314:	00000000 	andeq	r0, r0, r0
    6318:	00190316 	andseq	r0, r9, r6, lsl r3
    631c:	0d120100 	ldfeqs	f0, [r2, #-0]
    6320:	000000b1 	strheq	r0, [r0], -r1
    6324:	05b80305 	ldreq	r0, [r8, #773]!	; 0x305
    6328:	92162000 	andsls	r2, r6, #0
    632c:	01000019 	tsteq	r0, r9, lsl r0
    6330:	00b10313 	adcseq	r0, r1, r3, lsl r3
    6334:	03050000 	movweq	r0, #20480	; 0x5000
    6338:	200005b9 			; <UNDEFINED> instruction: 0x200005b9
    633c:	00126d16 	andseq	r6, r2, r6, lsl sp
    6340:	0d150100 	ldfeqs	f0, [r5, #-0]
    6344:	0000009b 	muleq	r0, fp, r0
    6348:	00000305 	andeq	r0, r0, r5, lsl #6
    634c:	01170000 	tsteq	r7, r0
    6350:	000018cf 	andeq	r1, r0, pc, asr #17
    6354:	00061303 	andeq	r1, r6, r3, lsl #6
    6358:	00000000 	andeq	r0, r0, r0
    635c:	01000000 	mrseq	r0, (UNDEF: 0)
    6360:	a301189c 	movwge	r1, #6300	; 0x189c
    6364:	03000019 	movweq	r0, #25
    6368:	c7010708 	strgt	r0, [r1, -r8, lsl #14]
	...
    6374:	01000000 	mrseq	r0, (UNDEF: 0)
    6378:	0004bc9c 	muleq	r4, ip, ip
    637c:	72651900 	rsbvc	r1, r5, #0, 18
    6380:	19080300 	stmdbne	r8, {r8, r9}
    6384:	000004bc 			; <UNDEFINED> instruction: 0x000004bc
    6388:	00002186 	andeq	r2, r0, r6, lsl #3
    638c:	7572651a 	ldrbvc	r6, [r2, #-1306]!	; 0xfffffae6
    6390:	24080300 	strcs	r0, [r8], #-768	; 0xfffffd00
    6394:	000004c2 	andeq	r0, r0, r2, asr #9
    6398:	0b005101 	bleq	1a7a4 <__exidx_end+0x156fc>
    639c:	00008f04 	andeq	r8, r0, r4, lsl #30
    63a0:	c7040b00 	strgt	r0, [r4, -r0, lsl #22]
    63a4:	1b000000 	blne	63ac <__exidx_end+0x1304>
    63a8:	00192601 	andseq	r2, r9, r1, lsl #12
    63ac:	01600100 	cmneq	r0, r0, lsl #2
    63b0:	009b0106 	addseq	r0, fp, r6, lsl #2
	...
    63bc:	9c010000 	stcls	0, cr0, [r1], {-0}
    63c0:	000004f6 	strdeq	r0, [r0], -r6
    63c4:	0074731c 	rsbseq	r7, r4, ip, lsl r3
    63c8:	14016001 	strne	r6, [r1], #-1
    63cc:	0000009b 	muleq	r0, fp, r0
    63d0:	00002199 	muleq	r0, r9, r1
    63d4:	1d011d00 	stcne	13, cr1, [r1, #-0]
    63d8:	01000019 	tsteq	r0, r9, lsl r0
    63dc:	0006015b 	andeq	r0, r6, fp, asr r1
    63e0:	00000000 	andeq	r0, r0, r0
    63e4:	01000000 	mrseq	r0, (UNDEF: 0)
    63e8:	fa011b9c 	blx	4d260 <__ccfg+0x2d2b8>
    63ec:	01000018 	tsteq	r0, r8, lsl r0
    63f0:	01060121 	tsteq	r6, r1, lsr #2
    63f4:	0000009b 	muleq	r0, fp, r0
	...
    6400:	05c09c01 	strbeq	r9, [r0, #3073]	; 0xc01
    6404:	731c0000 	tstvc	ip, #0
    6408:	21010074 	tstcs	r1, r4, ror r0
    640c:	009b1501 	addseq	r1, fp, r1, lsl #10
    6410:	21ac0000 			; <UNDEFINED> instruction: 0x21ac0000
    6414:	611c0000 	tstvs	ip, r0
    6418:	01210100 			; <UNDEFINED> instruction: 0x01210100
    641c:	0000c71f 	andeq	ip, r0, pc, lsl r7
    6420:	0021bf00 	eoreq	fp, r1, r0, lsl #30
    6424:	00731c00 	rsbseq	r1, r3, r0, lsl #24
    6428:	2e012101 	adfcss	f2, f1, f1
    642c:	00000215 	andeq	r0, r0, r5, lsl r2
    6430:	000021dd 	ldrdeq	r2, [r0], -sp
    6434:	6e656c1c 	mcrvs	12, 3, r6, cr5, cr12, {0}
    6438:	01210100 			; <UNDEFINED> instruction: 0x01210100
    643c:	00009b36 	andeq	r9, r0, r6, lsr fp
    6440:	0021f000 	eoreq	pc, r1, r0
    6444:	6c621e00 	stclvs	14, cr1, [r2], #-0
    6448:	01230100 			; <UNDEFINED> instruction: 0x01230100
    644c:	00009b07 	andeq	r9, r0, r7, lsl #22
    6450:	00220300 	eoreq	r0, r2, r0, lsl #6
    6454:	19111f00 	ldmdbne	r1, {r8, r9, sl, fp, ip}
    6458:	32010000 	andcc	r0, r1, #0
    645c:	00000101 	andeq	r0, r0, r1, lsl #2
    6460:	f6200000 			; <UNDEFINED> instruction: 0xf6200000
    6464:	00000009 	andeq	r0, r0, r9
    6468:	40000000 	andmi	r0, r0, r0
    646c:	0100000b 	tsteq	r0, fp
    6470:	a3030143 	movwge	r0, #12611	; 0x3143
    6474:	21000005 	tstcs	r0, r5
    6478:	00000a12 	andeq	r0, r0, r2, lsl sl
    647c:	000a0521 	andeq	r0, sl, r1, lsr #10
    6480:	f6220000 			; <UNDEFINED> instruction: 0xf6220000
    6484:	00000009 	andeq	r0, r0, r9
    6488:	00000000 	andeq	r0, r0, r0
    648c:	01000000 	mrseq	r0, (UNDEF: 0)
    6490:	21030150 	tstcs	r3, r0, asr r1
    6494:	00000a12 	andeq	r0, r0, r2, lsl sl
    6498:	000a0521 	andeq	r0, sl, r1, lsr #10
    649c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    64a0:	0018f101 	andseq	pc, r8, r1, lsl #2
    64a4:	06cb0100 	strbeq	r0, [fp], r0, lsl #2
    64a8:	00009b01 	andeq	r9, r0, r1, lsl #22
	...
    64b4:	819c0100 	orrshi	r0, ip, r0, lsl #2
    64b8:	19000006 	stmdbne	r0, {r1, r2}
    64bc:	01007473 	tsteq	r0, r3, ror r4
    64c0:	009b15cb 	addseq	r1, fp, fp, asr #11
    64c4:	222c0000 	eorcs	r0, ip, #0
    64c8:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
    64cc:	01000019 	tsteq	r0, r9, lsl r0
    64d0:	00c71fcb 	sbceq	r1, r7, fp, asr #31
    64d4:	224a0000 	subcs	r0, sl, #0
    64d8:	dd230000 	stcle	0, cr0, [r3, #-0]
    64dc:	01000018 	tsteq	r0, r8, lsl r0
    64e0:	00c72bcb 	sbceq	r2, r7, fp, asr #23
    64e4:	22730000 	rsbscs	r0, r3, #0
    64e8:	c9240000 	stmdbgt	r4!, {}	; <UNPREDICTABLE>
    64ec:	01000018 	tsteq	r0, r8, lsl r0
    64f0:	000001e6 	andeq	r0, r0, r6, ror #3
    64f4:	b1240000 			; <UNDEFINED> instruction: 0xb1240000
    64f8:	01000019 	tsteq	r0, r9, lsl r0
    64fc:	000001ea 	andeq	r0, r0, sl, ror #3
    6500:	5e250000 	cdppl	0, 2, cr0, cr5, cr0, {0}
    6504:	00000008 	andeq	r0, r0, r8
    6508:	10000000 	andne	r0, r0, r0
    650c:	0100000b 	tsteq	r0, fp
    6510:	782604fc 	stmdavc	r6!, {r2, r3, r4, r5, r6, r7, sl}
    6514:	91000008 	tstls	r0, r8
    6518:	26000022 	strcs	r0, [r0], -r2, lsr #32
    651c:	0000086c 	andeq	r0, r0, ip, ror #16
    6520:	000022a4 	andeq	r2, r0, r4, lsr #5
    6524:	0009f627 	andeq	pc, r9, r7, lsr #12
    6528:	00000000 	andeq	r0, r0, r0
    652c:	000b2800 	andeq	r2, fp, r0, lsl #16
    6530:	02430100 	subeq	r0, r3, #0, 2
    6534:	00000664 	andeq	r0, r0, r4, ror #12
    6538:	000a1221 	andeq	r1, sl, r1, lsr #4
    653c:	0a052100 	beq	14e944 <__ccfg+0x12e99c>
    6540:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    6544:	000009f6 	strdeq	r0, [r0], -r6
	...
    6550:	21024801 	tstcs	r2, r1, lsl #16
    6554:	00000a12 	andeq	r0, r0, r2, lsl sl
    6558:	000a0521 	andeq	r0, sl, r1, lsr #10
    655c:	00000000 	andeq	r0, r0, r0
    6560:	19330118 	ldmdbne	r3!, {r3, r4, r8}
    6564:	b0010000 	andlt	r0, r1, r0
    6568:	009b0106 	addseq	r0, fp, r6, lsl #2
	...
    6574:	9c010000 	stcls	0, cr0, [r1], {-0}
    6578:	00000704 	andeq	r0, r0, r4, lsl #14
    657c:	01006119 	tsteq	r0, r9, lsl r1
    6580:	00c715b0 	strheq	r1, [r7], #80	; 0x50
    6584:	22b70000 	adcscs	r0, r7, #0
    6588:	73190000 	tstvc	r9, #0
    658c:	1eb00100 	frdnes	f0, f0, f0
    6590:	00000704 	andeq	r0, r0, r4, lsl #14
    6594:	000022e0 	andeq	r2, r0, r0, ror #5
    6598:	6e656c19 	mcrvs	12, 3, r6, cr5, cr9, {0}
    659c:	26b00100 	ldrtcs	r0, [r0], r0, lsl #2
    65a0:	0000009b 	muleq	r0, fp, r0
    65a4:	00002314 	andeq	r2, r0, r4, lsl r3
    65a8:	0009f627 	andeq	pc, r9, r7, lsr #12
    65ac:	00000000 	andeq	r0, r0, r0
    65b0:	000af800 	andeq	pc, sl, r0, lsl #16
    65b4:	02ba0100 	adcseq	r0, sl, #0, 2
    65b8:	000006e8 	andeq	r0, r0, r8, ror #13
    65bc:	000a1221 	andeq	r1, sl, r1, lsr #4
    65c0:	0a052100 	beq	14e9c8 <__ccfg+0x12ea20>
    65c4:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    65c8:	000009f6 	strdeq	r0, [r0], -r6
	...
    65d4:	2102c401 	tstcs	r2, r1, lsl #8
    65d8:	00000a12 	andeq	r0, r0, r2, lsl sl
    65dc:	000a0521 	andeq	r0, sl, r1, lsr #10
    65e0:	0b000000 	bleq	65e8 <__exidx_end+0x1540>
    65e4:	0000b104 	andeq	fp, r0, r4, lsl #2
    65e8:	e8011700 	stmda	r1, {r8, r9, sl, ip}
    65ec:	01000018 	tsteq	r0, r8, lsl r0
    65f0:	1f2006a8 	svcne	0x002006a8
    65f4:	1f340000 	svcne	0x00340000
    65f8:	9c010000 	stcls	0, cr0, [r1], {-0}
    65fc:	19090129 	stmdbne	r9, {r0, r3, r5, r8}
    6600:	93010000 	movwls	r0, #4096	; 0x1000
    6604:	00009b06 	andeq	r9, r0, r6, lsl #22
    6608:	001f0c00 	andseq	r0, pc, r0, lsl #24
    660c:	001f2000 	andseq	r2, pc, r0
    6610:	2a9c0100 	bcs	fe706a18 <_estack+0xde701a18>
    6614:	000019ab 	andeq	r1, r0, fp, lsr #19
    6618:	a80d8201 	stmdage	sp, {r0, r9, pc}
    661c:	e800001e 	stmda	r0, {r1, r2, r3, r4}
    6620:	0100001e 	tsteq	r0, lr, lsl r0
    6624:	0007969c 	muleq	r7, ip, r6
    6628:	079f2800 	ldreq	r2, [pc, r0, lsl #16]
    662c:	1ec20000 	cdpne	0, 12, cr0, cr2, cr0, {0}
    6630:	1ed60000 	cdpne	0, 13, cr0, cr6, cr0, {0}
    6634:	8a010000 	bhi	4663c <__ccfg+0x26694>
    6638:	09f62703 	ldmibeq	r6!, {r0, r1, r8, r9, sl, sp}^
    663c:	1ec20000 	cdpne	0, 12, cr0, cr2, cr0, {0}
    6640:	0ac80000 	beq	ff206648 <_estack+0xdf201648>
    6644:	72010000 	andvc	r0, r1, #0
    6648:	00077902 	andeq	r7, r7, r2, lsl #18
    664c:	0a122100 	beq	48ea54 <__ccfg+0x46eaac>
    6650:	05210000 	streq	r0, [r1, #-0]!
    6654:	0000000a 	andeq	r0, r0, sl
    6658:	0009f625 	andeq	pc, r9, r5, lsr #12
    665c:	001ece00 	andseq	ip, lr, r0, lsl #28
    6660:	000ae000 	andeq	lr, sl, r0
    6664:	02740100 	rsbseq	r0, r4, #0, 2
    6668:	000a1221 	andeq	r1, sl, r1, lsr #4
    666c:	0a052100 	beq	14ea74 <__ccfg+0x12eacc>
    6670:	00000000 	andeq	r0, r0, r0
    6674:	198b2b00 	stmibne	fp, {r8, r9, fp, sp}
    6678:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    667c:	982b010d 	stmdals	fp!, {r0, r2, r3, r8}
    6680:	01000019 	tsteq	r0, r9, lsl r0
    6684:	2b010d6d 	blcs	49c40 <__ccfg+0x29c98>
    6688:	000019b7 			; <UNDEFINED> instruction: 0x000019b7
    668c:	010d6601 	tsteq	sp, r1, lsl #12
    6690:	0019bd2c 	andseq	fp, r9, ip, lsr #26
    6694:	0d580100 	ldfeqe	f0, [r8, #-0]
    6698:	001e5401 	andseq	r5, lr, r1, lsl #8
    669c:	001ea800 	andseq	sl, lr, r0, lsl #16
    66a0:	429c0100 	addsmi	r0, ip, #0, 2
    66a4:	19000008 	stmdbne	r0, {r3}
    66a8:	01007473 	tsteq	r0, r3, ror r4
    66ac:	009b1958 	addseq	r1, fp, r8, asr r9
    66b0:	23320000 	teqcs	r2, #0
    66b4:	64190000 	ldrvs	r0, [r9], #-0
    66b8:	01006c65 	tsteq	r0, r5, ror #24
    66bc:	009b2258 	addseq	r2, fp, r8, asr r2
    66c0:	23450000 	movtcs	r0, #20480	; 0x5000
    66c4:	42250000 	eormi	r0, r5, #0
    66c8:	5c000008 	stcpl	0, cr0, [r0], {8}
    66cc:	8000001e 	andhi	r0, r0, lr, lsl r0
    66d0:	0100000a 	tsteq	r0, sl
    66d4:	802d135c 	eorhi	r1, sp, ip, asr r3
    66d8:	2e00000a 	cdpcs	0, 0, cr0, cr0, cr10, {0}
    66dc:	00000853 	andeq	r0, r0, r3, asr r8
    66e0:	00002358 	andeq	r2, r0, r8, asr r3
    66e4:	0009f627 	andeq	pc, r9, r7, lsr #12
    66e8:	001e5c00 	andseq	r5, lr, r0, lsl #24
    66ec:	000aa000 	andeq	sl, sl, r0
    66f0:	02510100 	subseq	r0, r1, #0, 2
    66f4:	00000824 	andeq	r0, r0, r4, lsr #16
    66f8:	000a1221 	andeq	r1, sl, r1, lsr #4
    66fc:	0a052100 	beq	14eb04 <__ccfg+0x12eb5c>
    6700:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    6704:	000009f6 	strdeq	r0, [r0], -r6
    6708:	00001e76 	andeq	r1, r0, r6, ror lr
    670c:	00001e7a 	andeq	r1, r0, sl, ror lr
    6710:	21025401 	tstcs	r2, r1, lsl #8
    6714:	00000a12 	andeq	r0, r0, r2, lsl sl
    6718:	000a0521 	andeq	r0, sl, r1, lsr #10
    671c:	00000000 	andeq	r0, r0, r0
    6720:	193b2f00 	ldmdbne	fp!, {r8, r9, sl, fp, sp}
    6724:	4b010000 	blmi	4672c <__ccfg+0x26784>
    6728:	0000b10d 	andeq	fp, r0, sp, lsl #2
    672c:	085e0100 	ldmdaeq	lr, {r8}^
    6730:	72300000 	eorsvc	r0, r0, #0
    6734:	074f0100 	strbeq	r0, [pc, -r0, lsl #2]
    6738:	000000b1 	strheq	r0, [r0], -r1
    673c:	19173100 	ldmdbne	r7, {r8, ip, sp}
    6740:	41010000 	mrsmi	r0, (UNDEF: 1)
    6744:	8301010d 	movwhi	r0, #4365	; 0x110d
    6748:	32000008 	andcc	r0, r0, #8
    674c:	00646d63 	rsbeq	r6, r4, r3, ror #26
    6750:	b1194101 	tstlt	r9, r1, lsl #2
    6754:	32000000 	andcc	r0, r0, #0
    6758:	41010061 	tstmi	r1, r1, rrx
    675c:	0000c724 	andeq	ip, r0, r4, lsr #14
    6760:	e22c0000 	eor	r0, ip, #0
    6764:	01000018 	tsteq	r0, r8, lsl r0
    6768:	3c010d3a 	stccc	13, cr0, [r1], {58}	; 0x3a
    676c:	5400001e 	strpl	r0, [r0], #-30	; 0xffffffe2
    6770:	0100001e 	tsteq	r0, lr, lsl r0
    6774:	0008e59c 	muleq	r8, ip, r5
    6778:	6d631900 			; <UNDEFINED> instruction: 0x6d631900
    677c:	3a010064 	bcc	46914 <__ccfg+0x2696c>
    6780:	0000b119 	andeq	fp, r0, r9, lsl r1
    6784:	00236b00 	eoreq	r6, r3, r0, lsl #22
    6788:	09f62700 	ldmibeq	r6!, {r8, r9, sl, sp}^
    678c:	1e3c0000 	cdpne	0, 3, cr0, cr12, cr0, {0}
    6790:	0a680000 	beq	1a06798 <__ccfg+0x19e67f0>
    6794:	3c010000 	stccc	0, cr0, [r1], {-0}
    6798:	0008c902 	andeq	ip, r8, r2, lsl #18
    679c:	0a122100 	beq	48eba4 <__ccfg+0x46ebfc>
    67a0:	05210000 	streq	r0, [r1, #-0]!
    67a4:	0000000a 	andeq	r0, r0, sl
    67a8:	0009f628 	andeq	pc, r9, r8, lsr #12
    67ac:	001e4800 	andseq	r4, lr, r0, lsl #16
    67b0:	001e4c00 	andseq	r4, lr, r0, lsl #24
    67b4:	023e0100 	eorseq	r0, lr, #0, 2
    67b8:	000a1221 	andeq	r1, sl, r1, lsr #4
    67bc:	0a052100 	beq	14ebc4 <__ccfg+0x12ec1c>
    67c0:	00000000 	andeq	r0, r0, r0
    67c4:	0019cc2c 	andseq	ip, r9, ip, lsr #24
    67c8:	0d290100 	stfeqs	f0, [r9, #-0]
    67cc:	001e0c01 	andseq	r0, lr, r1, lsl #24
    67d0:	001e3c00 	andseq	r3, lr, r0, lsl #24
    67d4:	799c0100 	ldmibvc	ip, {r8}
    67d8:	19000009 	stmdbne	r0, {r0, r3}
    67dc:	29010062 	stmdbcs	r1, {r1, r5, r6}
    67e0:	0000b11c 	andeq	fp, r0, ip, lsl r1
    67e4:	00237e00 	eoreq	r7, r3, r0, lsl #28
    67e8:	00693000 	rsbeq	r3, r9, r0
    67ec:	81062b01 	tsthi	r6, r1, lsl #22
    67f0:	27000000 	strcs	r0, [r0, -r0]
    67f4:	00000a3d 	andeq	r0, r0, sp, lsr sl
    67f8:	00001e14 	andeq	r1, r0, r4, lsl lr
    67fc:	00000a30 	andeq	r0, r0, r0, lsr sl
    6800:	2e033201 	cdpcs	2, 0, cr3, cr3, cr1, {0}
    6804:	21000009 	tstcs	r0, r9
    6808:	00000a4c 	andeq	r0, r0, ip, asr #20
    680c:	0a3d3300 	beq	f53414 <__ccfg+0xf3346c>
    6810:	1e200000 	cdpne	0, 2, cr0, cr0, cr0, {0}
    6814:	1e240000 	cdpne	0, 2, cr0, cr4, cr0, {0}
    6818:	2f010000 	svccs	0x00010000
    681c:	00094804 	andeq	r4, r9, r4, lsl #16
    6820:	0a4c2100 	beq	130ec28 <__ccfg+0x12eec80>
    6824:	33000000 	movwcc	r0, #0
    6828:	00000a20 	andeq	r0, r0, r0, lsr #20
    682c:	00001e24 	andeq	r1, r0, r4, lsr #28
    6830:	00001e26 	andeq	r1, r0, r6, lsr #28
    6834:	62043101 	andvs	r3, r4, #1073741824	; 0x40000000
    6838:	21000009 	tstcs	r0, r9
    683c:	00000a2f 	andeq	r0, r0, pc, lsr #20
    6840:	0a202500 	beq	80fc48 <__ccfg+0x7efca0>
    6844:	1e2c0000 	cdpne	0, 2, cr0, cr12, cr0, {0}
    6848:	0a500000 	beq	1406850 <__ccfg+0x13e68a8>
    684c:	33010000 	movwcc	r0, #4096	; 0x1000
    6850:	0a2f2103 	beq	bcec64 <__ccfg+0xbaecbc>
    6854:	00000000 	andeq	r0, r0, r0
    6858:	0019c334 	andseq	ip, r9, r4, lsr r3
    685c:	0d190100 	ldfeqs	f0, [r9, #-0]
    6860:	000000b1 	strheq	r0, [r0], -r1
    6864:	00001dd8 	ldrdeq	r1, [r0], -r8
    6868:	00001e0c 	andeq	r1, r0, ip, lsl #28
    686c:	09f69c01 	ldmibeq	r6!, {r0, sl, fp, ip, pc}^
    6870:	69300000 	ldmdbvs	r0!, {}	; <UNPREDICTABLE>
    6874:	061b0100 	ldreq	r0, [fp], -r0, lsl #2
    6878:	00000081 	andeq	r0, r0, r1, lsl #1
    687c:	01006235 	tsteq	r0, r5, lsr r2
    6880:	00b1071c 	adcseq	r0, r1, ip, lsl r7
    6884:	239c0000 	orrscs	r0, ip, #0
    6888:	3d270000 	stccc	0, cr0, [r7, #-0]
    688c:	dc00000a 	stcle	0, cr0, [r0], {10}
    6890:	d000001d 	andle	r0, r0, sp, lsl r0
    6894:	01000009 	tsteq	r0, r9
    6898:	09c50322 	stmibeq	r5, {r1, r5, r8, r9}^
    689c:	4c210000 	stcmi	0, cr0, [r1], #-0
    68a0:	0000000a 	andeq	r0, r0, sl
    68a4:	000a2027 	andeq	r2, sl, r7, lsr #32
    68a8:	001de200 	andseq	lr, sp, r0, lsl #4
    68ac:	0009f800 	andeq	pc, r9, r0, lsl #16
    68b0:	03230100 			; <UNDEFINED> instruction: 0x03230100
    68b4:	000009df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    68b8:	000a2f21 	andeq	r2, sl, r1, lsr #30
    68bc:	5a250000 	bpl	9468c4 <__ccfg+0x92691c>
    68c0:	e400000a 	str	r0, [r0], #-10
    68c4:	1000001d 	andne	r0, r0, sp, lsl r0
    68c8:	0100000a 	tsteq	r0, sl
    68cc:	6c210720 	stcvs	7, cr0, [r1], #-128	; 0xffffff80
    68d0:	0000000a 	andeq	r0, r0, sl
    68d4:	0b5f3600 	bleq	17d40dc <__ccfg+0x17b4134>
    68d8:	06020000 	streq	r0, [r2], -r0
    68dc:	03010102 	movweq	r0, #4354	; 0x1102
    68e0:	00000a20 	andeq	r0, r0, r0, lsr #20
    68e4:	000d3037 	andeq	r3, sp, r7, lsr r0
    68e8:	02060200 	andeq	r0, r6, #0, 4
    68ec:	00006723 	andeq	r6, r0, r3, lsr #14
    68f0:	10363700 	eorsne	r3, r6, r0, lsl #14
    68f4:	06020000 	streq	r0, [r2], -r0
    68f8:	00673702 	rsbeq	r3, r7, r2, lsl #14
    68fc:	36000000 	strcc	r0, [r0], -r0
    6900:	00000e9b 	muleq	r0, fp, lr
    6904:	01015402 	tsteq	r1, r2, lsl #8
    6908:	0a3d0301 	beq	f47514 <__ccfg+0xf2756c>
    690c:	30370000 	eorscc	r0, r7, r0
    6910:	0200000d 	andeq	r0, r0, #13
    6914:	67190154 			; <UNDEFINED> instruction: 0x67190154
    6918:	00000000 	andeq	r0, r0, r0
    691c:	000fa036 	andeq	sl, pc, r6, lsr r0	; <UNPREDICTABLE>
    6920:	011e0200 	tsteq	lr, r0, lsl #4
    6924:	5a030101 	bpl	c6d30 <__ccfg+0xa6d88>
    6928:	3700000a 	strcc	r0, [r0, -sl]
    692c:	00000d30 	andeq	r0, r0, r0, lsr sp
    6930:	17011e02 	strne	r1, [r1, -r2, lsl #28]
    6934:	00000067 	andeq	r0, r0, r7, rrx
    6938:	17dd3800 	ldrbne	r3, [sp, r0, lsl #16]
    693c:	a4020000 	strge	r0, [r2], #-0
    6940:	00670101 	rsbeq	r0, r7, r1, lsl #2
    6944:	79030000 	stmdbvc	r3, {}	; <UNPREDICTABLE>
    6948:	3900000a 	stmdbcc	r0, {r1, r3}
    694c:	00000d30 	andeq	r0, r0, r0, lsr sp
    6950:	6718a402 	ldrvs	sl, [r8, -r2, lsl #8]
    6954:	00000000 	andeq	r0, r0, r0
    6958:	0007963a 	andeq	r9, r7, sl, lsr r6
    695c:	001ee800 	andseq	lr, lr, r0, lsl #16
    6960:	001f0c00 	andseq	r0, pc, r0, lsl #24
    6964:	289c0100 	ldmcs	ip, {r8}
    6968:	00000796 	muleq	r0, r6, r7
    696c:	00001ef2 	strdeq	r1, [r0], -r2
    6970:	00001f06 	andeq	r1, r0, r6, lsl #30
    6974:	3b0d7801 	blcc	364980 <__ccfg+0x3449d8>
    6978:	000007a8 	andeq	r0, r0, r8, lsr #15
    697c:	00001efc 	strdeq	r1, [r0], -ip
    6980:	00001f02 	andeq	r1, r0, r2, lsl #30
    6984:	00037c01 	andeq	r7, r3, r1, lsl #24
    6988:	04120000 	ldreq	r0, [r2], #-0
    698c:	00030000 	andeq	r0, r3, r0
    6990:	00001ab5 			; <UNDEFINED> instruction: 0x00001ab5
    6994:	00bd0104 	adcseq	r0, sp, r4, lsl #2
    6998:	df0c0000 	svcle	0x000c0000
    699c:	e4000019 	str	r0, [r0], #-25	; 0xffffffe7
    69a0:	d8000006 	stmdale	r0, {r1, r2}
    69a4:	0000000b 	andeq	r0, r0, fp
    69a8:	af000000 	svcge	0x00000000
    69ac:	02000049 	andeq	r0, r0, #73	; 0x49
    69b0:	098a0601 	stmibeq	sl, {r0, r9, sl}
    69b4:	02020000 	andeq	r0, r2, #0
    69b8:	00084405 	andeq	r4, r8, r5, lsl #8
    69bc:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    69c0:	00000637 	andeq	r0, r0, r7, lsr r6
    69c4:	32050802 	andcc	r0, r5, #131072	; 0x20000
    69c8:	03000006 	movweq	r0, #6
    69cc:	000008e1 	andeq	r0, r0, r1, ror #17
    69d0:	4d182e02 	ldcmi	14, cr2, [r8, #-8]
    69d4:	02000000 	andeq	r0, r0, #0
    69d8:	09880801 	stmibeq	r8, {r0, fp}
    69dc:	0a030000 	beq	c69e4 <__ccfg+0xa6a3c>
    69e0:	02000004 	andeq	r0, r0, #4
    69e4:	00601931 	rsbeq	r1, r0, r1, lsr r9
    69e8:	02020000 	andeq	r0, r2, #0
    69ec:	000a8007 	andeq	r8, sl, r7
    69f0:	09a10300 	stmibeq	r1!, {r8, r9}
    69f4:	34020000 	strcc	r0, [r2], #-0
    69f8:	00007319 	andeq	r7, r0, r9, lsl r3
    69fc:	07040200 	streq	r0, [r4, -r0, lsl #4]
    6a00:	000003cf 	andeq	r0, r0, pc, asr #7
    6a04:	ca070802 	bgt	1c8a14 <__ccfg+0x1a8a6c>
    6a08:	04000003 	streq	r0, [r0], #-3
    6a0c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    6a10:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    6a14:	0003d407 	andeq	sp, r3, r7, lsl #8
    6a18:	24ae0300 	strtcs	r0, [lr], #768	; 0x300
    6a1c:	27030000 	strcs	r0, [r3, -r0]
    6a20:	00005412 	andeq	r5, r0, r2, lsl r4
    6a24:	008f0500 	addeq	r0, pc, r0, lsl #10
    6a28:	c7030000 	strgt	r0, [r3, -r0]
    6a2c:	03000019 	movweq	r0, #25
    6a30:	0041122b 	subeq	r1, r1, fp, lsr #4
    6a34:	a0060000 	andge	r0, r6, r0
    6a38:	03000000 	movweq	r0, #0
    6a3c:	000024ff 	strdeq	r2, [r0], -pc	; <UNPREDICTABLE>
    6a40:	67122c03 	ldrvs	r2, [r2, -r3, lsl #24]
    6a44:	05000000 	streq	r0, [r0, #-0]
    6a48:	000000b1 	strheq	r0, [r0], -r1
    6a4c:	00053803 	andeq	r3, r5, r3, lsl #16
    6a50:	122d0300 	eorne	r0, sp, #0, 6
    6a54:	00000067 	andeq	r0, r0, r7, rrx
    6a58:	32030807 	andcc	r0, r3, #458752	; 0x70000
    6a5c:	00015c09 	andeq	r5, r1, r9, lsl #24
    6a60:	003e0800 	eorseq	r0, lr, r0, lsl #16
    6a64:	34030000 	strcc	r0, [r3], #-0
    6a68:	0000a007 	andeq	sl, r0, r7
    6a6c:	07010100 	streq	r0, [r1, -r0, lsl #2]
    6a70:	053e0800 	ldreq	r0, [lr, #-2048]!	; 0xfffff800
    6a74:	35030000 	strcc	r0, [r3, #-0]
    6a78:	0000a003 	andeq	sl, r0, r3
    6a7c:	06010100 	streq	r0, [r1], -r0, lsl #2
    6a80:	026f0800 	rsbeq	r0, pc, #0, 16
    6a84:	36030000 	strcc	r0, [r3], -r0
    6a88:	0000a003 	andeq	sl, r0, r3
    6a8c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    6a90:	05780800 	ldrbeq	r0, [r8, #-2048]!	; 0xfffff800
    6a94:	37030000 	strcc	r0, [r3, -r0]
    6a98:	0000a003 	andeq	sl, r0, r3
    6a9c:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    6aa0:	08650800 	stmdaeq	r5!, {fp}^
    6aa4:	38030000 	stmdacc	r3, {}	; <UNPREDICTABLE>
    6aa8:	0000a003 	andeq	sl, r0, r3
    6aac:	00040100 	andeq	r0, r4, r0, lsl #2
    6ab0:	05450900 	strbeq	r0, [r5, #-2304]	; 0xfffff700
    6ab4:	3a030000 	bcc	c6abc <__ccfg+0xa6b14>
    6ab8:	0000a007 	andeq	sl, r0, r7
    6abc:	5e090100 	adfple	f0, f1, f0
    6ac0:	03000007 	movweq	r0, #7
    6ac4:	00a0033c 	adceq	r0, r0, ip, lsr r3
    6ac8:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    6acc:	00000b52 	andeq	r0, r0, r2, asr fp
    6ad0:	a0033d03 	andge	r3, r3, r3, lsl #26
    6ad4:	03000000 	movweq	r0, #0
    6ad8:	00079309 	andeq	r9, r7, r9, lsl #6
    6adc:	083f0300 	ldmdaeq	pc!, {r8, r9}	; <UNPREDICTABLE>
    6ae0:	000000b1 	strheq	r0, [r0], -r1
    6ae4:	c1030004 	tstgt	r3, r4
    6ae8:	03000002 	movweq	r0, #2
    6aec:	00ce0341 	sbceq	r0, lr, r1, asr #6
    6af0:	5c060000 	stcpl	0, cr0, [r6], {-0}
    6af4:	0a000001 	beq	6b00 <__exidx_end+0x1a58>
    6af8:	0000057f 	andeq	r0, r0, pc, ror r5
    6afc:	681a4303 	ldmdavs	sl, {r0, r1, r8, r9, lr}
    6b00:	01000001 	tsteq	r0, r1
    6b04:	01b10a01 			; <UNDEFINED> instruction: 0x01b10a01
    6b08:	45030000 	strmi	r0, [r3, #-0]
    6b0c:	0001890e 	andeq	r8, r1, lr, lsl #18
    6b10:	0b010100 	bleq	46f18 <__ccfg+0x26f70>
    6b14:	00018f04 	andeq	r8, r1, r4, lsl #30
    6b18:	08010200 	stmdaeq	r1, {r9}
    6b1c:	00000991 	muleq	r0, r1, r9
    6b20:	00018f05 	andeq	r8, r1, r5, lsl #30
    6b24:	02ca0a00 	sbceq	r0, sl, #0, 20
    6b28:	45030000 	strmi	r0, [r3, #-0]
    6b2c:	0001891e 	andeq	r8, r1, lr, lsl r9
    6b30:	07010100 	streq	r0, [r1, -r0, lsl #2]
    6b34:	098f0408 	stmibeq	pc, {r3, sl}	; <UNPREDICTABLE>
    6b38:	000001da 	ldrdeq	r0, [r0], -sl
    6b3c:	00064f09 	andeq	r4, r6, r9, lsl #30
    6b40:	0b900400 	bleq	fe407b48 <_estack+0xde402b48>
    6b44:	00000067 	andeq	r0, r0, r7, rrx
    6b48:	0c840900 			; <UNDEFINED> instruction: 0x0c840900
    6b4c:	91040000 	mrsls	r0, (UNDEF: 4)
    6b50:	00008f08 	andeq	r8, r0, r8, lsl #30
    6b54:	f4090400 	vst3.8	{d0-d2}, [r9], r0
    6b58:	04000001 	streq	r0, [r0], #-1
    6b5c:	00ac1092 	umlaleq	r1, ip, r2, r0
    6b60:	00060000 	andeq	r0, r6, r0
    6b64:	000a0b03 	andeq	r0, sl, r3, lsl #22
    6b68:	03930400 	orrseq	r0, r3, #0, 8
    6b6c:	000001a9 	andeq	r0, r0, r9, lsr #3
    6b70:	0001da0c 	andeq	sp, r1, ip, lsl #20
    6b74:	0001f100 	andeq	pc, r1, r0, lsl #2
    6b78:	0a000d00 	beq	9f80 <__exidx_end+0x4ed8>
    6b7c:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
    6b80:	e60f9904 	str	r9, [pc], -r4, lsl #18
    6b84:	01000001 	tsteq	r0, r1
    6b88:	05010701 	streq	r0, [r1, #-1793]	; 0xfffff8ff
    6b8c:	02290991 	eoreq	r0, r9, #2375680	; 0x244000
    6b90:	9a080000 	bls	206b98 <__ccfg+0x1e6bf0>
    6b94:	05000007 	streq	r0, [r0, #-7]
    6b98:	00a00793 	umlaleq	r0, r0, r3, r7	; <UNPREDICTABLE>
    6b9c:	07010000 	streq	r0, [r1, -r0]
    6ba0:	b4080001 	strlt	r0, [r8], #-1
    6ba4:	05000004 	streq	r0, [r0, #-4]
    6ba8:	00a00394 	umlaleq	r0, r0, r4, r3	; <UNPREDICTABLE>
    6bac:	01010000 	mrseq	r0, (UNDEF: 1)
    6bb0:	03000000 	movweq	r0, #0
    6bb4:	00000871 	andeq	r0, r0, r1, ror r8
    6bb8:	ff039605 			; <UNDEFINED> instruction: 0xff039605
    6bbc:	05000001 	streq	r0, [r0, #-1]
    6bc0:	00000229 	andeq	r0, r0, r9, lsr #4
    6bc4:	0002350c 	andeq	r3, r2, ip, lsl #10
    6bc8:	00024500 	andeq	r4, r2, r0, lsl #10
    6bcc:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    6bd0:	0000023a 	andeq	r0, r0, sl, lsr r2
    6bd4:	0003830a 	andeq	r8, r3, sl, lsl #6
    6bd8:	179c0500 	ldrne	r0, [ip, r0, lsl #10]
    6bdc:	00000245 	andeq	r0, r0, r5, asr #4
    6be0:	9b0c0101 	blls	306fec <__ccfg+0x2e7044>
    6be4:	63000000 	movwvs	r0, #0
    6be8:	0d000002 	stceq	0, cr0, [r0, #-8]
    6bec:	02580500 	subseq	r0, r8, #0, 10
    6bf0:	f80a0000 			; <UNDEFINED> instruction: 0xf80a0000
    6bf4:	06000004 	streq	r0, [r0], -r4
    6bf8:	02631306 	rsbeq	r1, r3, #402653184	; 0x18000000
    6bfc:	01010000 	mrseq	r0, (UNDEF: 1)
    6c00:	0007400a 	andeq	r4, r7, sl
    6c04:	0ec30400 	cdpeq	4, 12, cr0, cr3, cr0, {0}
    6c08:	000000b1 	strheq	r0, [r0], -r1
    6c0c:	aa0e0101 	bge	387018 <__ccfg+0x367070>
    6c10:	07000009 	streq	r0, [r0, -r9]
    6c14:	9110016e 	tstls	r0, lr, ror #2
    6c18:	0b000002 	bleq	6c28 <__exidx_end+0x1b80>
    6c1c:	00029704 	andeq	r9, r2, r4, lsl #14
    6c20:	a3010f00 	movwge	r0, #7936	; 0x1f00
    6c24:	10000002 	andne	r0, r0, r2
    6c28:	0000008f 	andeq	r0, r0, pc, lsl #1
    6c2c:	01960c00 	orrseq	r0, r6, r0, lsl #24
    6c30:	02ae0000 	adceq	r0, lr, #0
    6c34:	000d0000 	andeq	r0, sp, r0
    6c38:	0002a305 	andeq	sl, r2, r5, lsl #6
    6c3c:	08081100 	stmdaeq	r8, {r8, ip}
    6c40:	7f070000 	svcvc	0x00070000
    6c44:	02ae1601 	adceq	r1, lr, #1048576	; 0x100000
    6c48:	01010000 	mrseq	r0, (UNDEF: 1)
    6c4c:	00036611 	andeq	r6, r3, r1, lsl r6
    6c50:	01820700 	orreq	r0, r2, r0, lsl #14
    6c54:	0000bd14 	andeq	fp, r0, r4, lsl sp
    6c58:	11010100 	mrsne	r0, (UNDEF: 17)
    6c5c:	00000343 	andeq	r0, r0, r3, asr #6
    6c60:	0e02d807 	cdpeq	8, 0, cr13, cr2, cr7, {0}
    6c64:	000000b1 	strheq	r0, [r0], -r1
    6c68:	08120101 	ldmdaeq	r2, {r0, r8}
    6c6c:	09030307 	stmdbeq	r3, {r0, r1, r2, r8, r9}
    6c70:	00000307 	andeq	r0, r0, r7, lsl #6
    6c74:	00383213 	eorseq	r3, r8, r3, lsl r2
    6c78:	03070700 	movweq	r0, #30464	; 0x7700
    6c7c:	00008f07 	andeq	r8, r0, r7, lsl #30
    6c80:	dc130000 	ldcle	0, cr0, [r3], {-0}
    6c84:	0700000b 	streq	r0, [r0, -fp]
    6c88:	c2080308 	andgt	r0, r8, #8, 6	; 0x20000000
    6c8c:	04000000 	streq	r0, [r0], #-0
    6c90:	03fb0e00 	mvnseq	r0, #0, 28
    6c94:	09070000 	stmdbeq	r7, {}	; <UNPREDICTABLE>
    6c98:	02e00303 	rsceq	r0, r0, #201326592	; 0xc000000
    6c9c:	33140000 	tstcc	r4, #0
    6ca0:	30000000 	andcc	r0, r0, r0
    6ca4:	08030b07 	stmdaeq	r3, {r0, r1, r2, r8, r9, fp}
    6ca8:	00000377 	andeq	r0, r0, r7, ror r3
    6cac:	001add13 	andseq	sp, sl, r3, lsl sp
    6cb0:	03140700 	tsteq	r4, #0, 14
    6cb4:	00008f08 	andeq	r8, r0, r8, lsl #30
    6cb8:	54130000 	ldrpl	r0, [r3], #-0
    6cbc:	07000009 	streq	r0, [r0, -r9]
    6cc0:	8f080315 	svchi	0x00080315
    6cc4:	02000000 	andeq	r0, r0, #0
    6cc8:	0049a213 	subeq	sl, r9, r3, lsl r2
    6ccc:	03160700 	tsteq	r6, #0, 14
    6cd0:	0002840b 	andeq	r8, r2, fp, lsl #8
    6cd4:	05130400 	ldreq	r0, [r3, #-1024]	; 0xfffffc00
    6cd8:	07000044 	streq	r0, [r0, -r4, asr #32]
    6cdc:	c2090317 	andgt	r0, r9, #1543503872	; 0x5c000000
    6ce0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    6ce4:	00000713 	andeq	r0, r0, r3, lsl r7
    6ce8:	03180700 	tsteq	r8, #0, 14
    6cec:	0003770f 	andeq	r7, r3, pc, lsl #14
    6cf0:	c7130c00 	ldrgt	r0, [r3, -r0, lsl #24]
    6cf4:	07000007 	streq	r0, [r0, -r7]
    6cf8:	87150319 			; <UNDEFINED> instruction: 0x87150319
    6cfc:	2c000003 	stccs	0, cr0, [r0], {3}
    6d00:	03070c00 	movweq	r0, #31744	; 0x7c00
    6d04:	03870000 	orreq	r0, r7, #0
    6d08:	88150000 	ldmdahi	r5, {}	; <UNPREDICTABLE>
    6d0c:	03000000 	movweq	r0, #0
    6d10:	14040b00 	strne	r0, [r4], #-2816	; 0xfffff500
    6d14:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    6d18:	00000949 	andeq	r0, r0, r9, asr #18
    6d1c:	1b031c07 	blne	cdd40 <__ccfg+0xadd98>
    6d20:	00000314 	andeq	r0, r0, r4, lsl r3
    6d24:	00092911 	andeq	r2, r9, r1, lsl r9
    6d28:	031e0700 	tsteq	lr, #0, 14
    6d2c:	0003a914 	andeq	sl, r3, r4, lsl r9
    6d30:	0b010100 	bleq	47138 <__ccfg+0x27190>
    6d34:	00038d04 	andeq	r8, r3, r4, lsl #26
    6d38:	19d50a00 	ldmibne	r5, {r9, fp}^
    6d3c:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    6d40:	0001890e 	andeq	r8, r1, lr, lsl #18
    6d44:	16010100 	strne	r0, [r1], -r0, lsl #2
    6d48:	001a1e01 	andseq	r1, sl, r1, lsl #28
    6d4c:	050d0100 	streq	r0, [sp, #-256]	; 0xffffff00
    6d50:	00008101 	andeq	r8, r0, r1, lsl #2
    6d54:	001f3400 	andseq	r3, pc, r0, lsl #8
    6d58:	001fac00 	andseq	sl, pc, r0, lsl #24
    6d5c:	179c0100 	ldrne	r0, [ip, r0, lsl #2]
    6d60:	01007473 	tsteq	r0, r3, ror r4
    6d64:	008f120d 	addeq	r1, pc, sp, lsl #4
    6d68:	23ba0000 			; <UNDEFINED> instruction: 0x23ba0000
    6d6c:	62170000 	andsvs	r0, r7, #0
    6d70:	01006675 	tsteq	r0, r5, ror r6
    6d74:	01891c0d 	orreq	r1, r9, sp, lsl #24
    6d78:	23d80000 	bicscs	r0, r8, #0
    6d7c:	6c170000 	ldcvs	0, cr0, [r7], {-0}
    6d80:	01006e65 	tsteq	r0, r5, ror #28
    6d84:	0081250d 	addeq	r2, r1, sp, lsl #10
    6d88:	242d0000 	strtcs	r0, [sp], #-0
    6d8c:	b8180000 	ldmdalt	r8, {}	; <UNPREDICTABLE>
    6d90:	01000021 	tsteq	r0, r1, lsr #32
    6d94:	00810611 	addeq	r0, r1, r1, lsl r6
    6d98:	24820000 	strcs	r0, [r2], #0
    6d9c:	00000000 	andeq	r0, r0, r0
    6da0:	0000044c 	andeq	r0, r0, ip, asr #8
    6da4:	1c040003 	stcne	0, cr0, [r4], {3}
    6da8:	01040000 	mrseq	r0, (UNDEF: 4)
    6dac:	000000bd 	strheq	r0, [r0], -sp
    6db0:	001a2e0c 	andseq	r2, sl, ip, lsl #28
    6db4:	0006e400 	andeq	lr, r6, r0, lsl #8
    6db8:	000be800 	andeq	lr, fp, r0, lsl #16
    6dbc:	00000000 	andeq	r0, r0, r0
    6dc0:	004b7400 	subeq	r7, fp, r0, lsl #8
    6dc4:	06010200 	streq	r0, [r1], -r0, lsl #4
    6dc8:	0000098a 	andeq	r0, r0, sl, lsl #19
    6dcc:	44050202 	strmi	r0, [r5], #-514	; 0xfffffdfe
    6dd0:	02000008 	andeq	r0, r0, #8
    6dd4:	06370504 	ldrteq	r0, [r7], -r4, lsl #10
    6dd8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    6ddc:	00063205 	andeq	r3, r6, r5, lsl #4
    6de0:	08e10300 	stmiaeq	r1!, {r8, r9}^
    6de4:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    6de8:	00004d18 	andeq	r4, r0, r8, lsl sp
    6dec:	08010200 	stmdaeq	r1, {r9}
    6df0:	00000988 	andeq	r0, r0, r8, lsl #19
    6df4:	00040a03 	andeq	r0, r4, r3, lsl #20
    6df8:	19310200 	ldmdbne	r1!, {r9}
    6dfc:	00000060 	andeq	r0, r0, r0, rrx
    6e00:	80070202 	andhi	r0, r7, r2, lsl #4
    6e04:	0300000a 	movweq	r0, #10
    6e08:	000009a1 	andeq	r0, r0, r1, lsr #19
    6e0c:	73193402 	tstvc	r9, #33554432	; 0x2000000
    6e10:	02000000 	andeq	r0, r0, #0
    6e14:	03cf0704 	biceq	r0, pc, #4, 14	; 0x100000
    6e18:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    6e1c:	0003ca07 	andeq	ip, r3, r7, lsl #20
    6e20:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    6e24:	00746e69 	rsbseq	r6, r4, r9, ror #28
    6e28:	d4070402 	strle	r0, [r7], #-1026	; 0xfffffbfe
    6e2c:	03000003 	movweq	r0, #3
    6e30:	00000456 	andeq	r0, r0, r6, asr r4
    6e34:	9b1b2803 	blls	6d0e48 <__ccfg+0x6b0ea0>
    6e38:	05000000 	streq	r0, [r0, #-0]
    6e3c:	00000911 	andeq	r0, r0, r1, lsl r9
    6e40:	b3000904 	movwlt	r0, #2308	; 0x904
    6e44:	06000000 	streq	r0, [r0], -r0
    6e48:	00000a12 	andeq	r0, r0, r2, lsl sl
    6e4c:	000000b3 	strheq	r0, [r0], -r3
    6e50:	07000100 	streq	r0, [r0, -r0, lsl #2]
    6e54:	09130304 	ldmdbeq	r3, {r2, r8, r9}
    6e58:	63030000 	movwvs	r0, #12288	; 0x3000
    6e5c:	00008f18 	andeq	r8, r0, r8, lsl pc
    6e60:	24ae0300 	strtcs	r0, [lr], #768	; 0x300
    6e64:	27040000 	strcs	r0, [r4, -r0]
    6e68:	00005412 	andeq	r5, r0, r2, lsl r4
    6e6c:	00c10800 	sbceq	r0, r1, r0, lsl #16
    6e70:	c7030000 	strgt	r0, [r3, -r0]
    6e74:	04000019 	streq	r0, [r0], #-25	; 0xffffffe7
    6e78:	0041122b 	subeq	r1, r1, fp, lsr #4
    6e7c:	d2090000 	andle	r0, r9, #0
    6e80:	03000000 	movweq	r0, #0
    6e84:	000024ff 	strdeq	r2, [r0], -pc	; <UNPREDICTABLE>
    6e88:	67122c04 	ldrvs	r2, [r2, -r4, lsl #24]
    6e8c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    6e90:	000000e3 	andeq	r0, r0, r3, ror #1
    6e94:	00053803 	andeq	r3, r5, r3, lsl #16
    6e98:	122d0400 	eorne	r0, sp, #0, 8
    6e9c:	00000067 	andeq	r0, r0, r7, rrx
    6ea0:	3204080a 	andcc	r0, r4, #655360	; 0xa0000
    6ea4:	00018e09 	andeq	r8, r1, r9, lsl #28
    6ea8:	003e0b00 	eorseq	r0, lr, r0, lsl #22
    6eac:	34040000 	strcc	r0, [r4], #-0
    6eb0:	0000d207 	andeq	sp, r0, r7, lsl #4
    6eb4:	07010100 	streq	r0, [r1, -r0, lsl #2]
    6eb8:	053e0b00 	ldreq	r0, [lr, #-2816]!	; 0xfffff500
    6ebc:	35040000 	strcc	r0, [r4, #-0]
    6ec0:	0000d203 	andeq	sp, r0, r3, lsl #4
    6ec4:	06010100 	streq	r0, [r1], -r0, lsl #2
    6ec8:	026f0b00 	rsbeq	r0, pc, #0, 22
    6ecc:	36040000 	strcc	r0, [r4], -r0
    6ed0:	0000d203 	andeq	sp, r0, r3, lsl #4
    6ed4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    6ed8:	05780b00 	ldrbeq	r0, [r8, #-2816]!	; 0xfffff500
    6edc:	37040000 	strcc	r0, [r4, -r0]
    6ee0:	0000d203 	andeq	sp, r0, r3, lsl #4
    6ee4:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    6ee8:	08650b00 	stmdaeq	r5!, {r8, r9, fp}^
    6eec:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    6ef0:	0000d203 	andeq	sp, r0, r3, lsl #4
    6ef4:	00040100 	andeq	r0, r4, r0, lsl #2
    6ef8:	05450c00 	strbeq	r0, [r5, #-3072]	; 0xfffff400
    6efc:	3a040000 	bcc	106f04 <__ccfg+0xe6f5c>
    6f00:	0000d207 	andeq	sp, r0, r7, lsl #4
    6f04:	5e0c0100 	adfple	f0, f4, f0
    6f08:	04000007 	streq	r0, [r0], #-7
    6f0c:	00d2033c 	sbcseq	r0, r2, ip, lsr r3
    6f10:	0c020000 	stceq	0, cr0, [r2], {-0}
    6f14:	00000b52 	andeq	r0, r0, r2, asr fp
    6f18:	d2033d04 	andle	r3, r3, #4, 26	; 0x100
    6f1c:	03000000 	movweq	r0, #0
    6f20:	0007930c 	andeq	r9, r7, ip, lsl #6
    6f24:	083f0400 	ldmdaeq	pc!, {sl}	; <UNPREDICTABLE>
    6f28:	000000e3 	andeq	r0, r0, r3, ror #1
    6f2c:	c1030004 	tstgt	r3, r4
    6f30:	04000002 	streq	r0, [r0], #-2
    6f34:	01000341 	tsteq	r0, r1, asr #6
    6f38:	8e090000 	cdphi	0, 0, cr0, cr9, cr0, {0}
    6f3c:	0d000001 	stceq	0, cr0, [r0, #-4]
    6f40:	0000057f 	andeq	r0, r0, pc, ror r5
    6f44:	9a1a4304 	bls	697b5c <__ccfg+0x677bb4>
    6f48:	01000001 	tsteq	r0, r1
    6f4c:	01b10d01 			; <UNDEFINED> instruction: 0x01b10d01
    6f50:	45040000 	strmi	r0, [r4, #-0]
    6f54:	0001bb0e 	andeq	fp, r1, lr, lsl #22
    6f58:	0e010100 	adfeqs	f0, f1, f0
    6f5c:	0001c104 	andeq	ip, r1, r4, lsl #2
    6f60:	08010200 	stmdaeq	r1, {r9}
    6f64:	00000991 	muleq	r0, r1, r9
    6f68:	0001c108 	andeq	ip, r1, r8, lsl #2
    6f6c:	02ca0d00 	sbceq	r0, sl, #0, 26
    6f70:	45040000 	strmi	r0, [r4, #-0]
    6f74:	0001bb1e 	andeq	fp, r1, lr, lsl fp
    6f78:	0a010100 	beq	47380 <__ccfg+0x273d8>
    6f7c:	098f0508 	stmibeq	pc, {r3, r8, sl}	; <UNPREDICTABLE>
    6f80:	0000020c 	andeq	r0, r0, ip, lsl #4
    6f84:	00064f0c 	andeq	r4, r6, ip, lsl #30
    6f88:	0b900500 	bleq	fe408390 <_estack+0xde403390>
    6f8c:	00000067 	andeq	r0, r0, r7, rrx
    6f90:	0c840c00 	stceq	12, cr0, [r4], {0}
    6f94:	91050000 	mrsls	r0, (UNDEF: 5)
    6f98:	0000c108 	andeq	ip, r0, r8, lsl #2
    6f9c:	f40c0400 	vst3.8	{d0-d2}, [ip], r0
    6fa0:	05000001 	streq	r0, [r0, #-1]
    6fa4:	00de1092 	smullseq	r1, lr, r2, r0
    6fa8:	00060000 	andeq	r0, r6, r0
    6fac:	000a0b03 	andeq	r0, sl, r3, lsl #22
    6fb0:	03930500 	orrseq	r0, r3, #0, 10
    6fb4:	000001db 	ldrdeq	r0, [r0], -fp
    6fb8:	00020c0f 	andeq	r0, r2, pc, lsl #24
    6fbc:	00022300 	andeq	r2, r2, r0, lsl #6
    6fc0:	0d001000 	stceq	0, cr1, [r0, #-0]
    6fc4:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
    6fc8:	180f9905 	stmdane	pc, {r0, r2, r8, fp, ip, pc}	; <UNPREDICTABLE>
    6fcc:	01000002 	tsteq	r0, r2
    6fd0:	06010a01 	streq	r0, [r1], -r1, lsl #20
    6fd4:	025b0991 	subseq	r0, fp, #2375680	; 0x244000
    6fd8:	9a0b0000 	bls	2c6fe0 <__ccfg+0x2a7038>
    6fdc:	06000007 	streq	r0, [r0], -r7
    6fe0:	00d20793 	smullseq	r0, r2, r3, r7
    6fe4:	07010000 	streq	r0, [r1, -r0]
    6fe8:	b40b0001 	strlt	r0, [fp], #-1
    6fec:	06000004 	streq	r0, [r0], -r4
    6ff0:	00d20394 	smullseq	r0, r2, r4, r3
    6ff4:	01010000 	mrseq	r0, (UNDEF: 1)
    6ff8:	03000000 	movweq	r0, #0
    6ffc:	00000871 	andeq	r0, r0, r1, ror r8
    7000:	31039606 	tstcc	r3, r6, lsl #12
    7004:	08000002 	stmdaeq	r0, {r1}
    7008:	0000025b 	andeq	r0, r0, fp, asr r2
    700c:	0002670f 	andeq	r6, r2, pc, lsl #14
    7010:	00027700 	andeq	r7, r2, r0, lsl #14
    7014:	08001000 	stmdaeq	r0, {ip}
    7018:	0000026c 	andeq	r0, r0, ip, ror #4
    701c:	0003830d 	andeq	r8, r3, sp, lsl #6
    7020:	179c0600 	ldrne	r0, [ip, r0, lsl #12]
    7024:	00000277 	andeq	r0, r0, r7, ror r2
    7028:	cd0f0101 	stfgts	f0, [pc, #-4]	; 702c <__exidx_end+0x1f84>
    702c:	95000000 	strls	r0, [r0, #-0]
    7030:	10000002 	andne	r0, r0, r2
    7034:	028a0800 	addeq	r0, sl, #0, 16
    7038:	f80d0000 			; <UNDEFINED> instruction: 0xf80d0000
    703c:	07000004 	streq	r0, [r0, -r4]
    7040:	02951306 	addseq	r1, r5, #402653184	; 0x18000000
    7044:	01010000 	mrseq	r0, (UNDEF: 1)
    7048:	0007400d 	andeq	r4, r7, sp
    704c:	0ec30500 	cdpeq	5, 12, cr0, cr3, cr0, {0}
    7050:	000000e3 	andeq	r0, r0, r3, ror #1
    7054:	aa110101 	bge	447460 <__ccfg+0x4274b8>
    7058:	08000009 	stmdaeq	r0, {r0, r3}
    705c:	c310016e 	tstgt	r0, #-2147483621	; 0x8000001b
    7060:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    7064:	0002c904 	andeq	ip, r2, r4, lsl #18
    7068:	d5011200 	strle	r1, [r1, #-512]	; 0xfffffe00
    706c:	13000002 	movwne	r0, #2
    7070:	000000c1 	andeq	r0, r0, r1, asr #1
    7074:	01c80f00 	biceq	r0, r8, r0, lsl #30
    7078:	02e00000 	rsceq	r0, r0, #0
    707c:	00100000 	andseq	r0, r0, r0
    7080:	0002d508 	andeq	sp, r2, r8, lsl #10
    7084:	08081400 	stmdaeq	r8, {sl, ip}
    7088:	7f080000 	svcvc	0x00080000
    708c:	02e01601 	rsceq	r1, r0, #1048576	; 0x100000
    7090:	01010000 	mrseq	r0, (UNDEF: 1)
    7094:	00036614 	andeq	r6, r3, r4, lsl r6
    7098:	01820800 	orreq	r0, r2, r0, lsl #16
    709c:	0000ef14 	andeq	lr, r0, r4, lsl pc
    70a0:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    70a4:	00000343 	andeq	r0, r0, r3, asr #6
    70a8:	0e02d808 	cdpeq	8, 0, cr13, cr2, cr8, {0}
    70ac:	000000e3 	andeq	r0, r0, r3, ror #1
    70b0:	08150101 	ldmdaeq	r5, {r0, r8}
    70b4:	09030308 	stmdbeq	r3, {r3, r8, r9}
    70b8:	00000339 	andeq	r0, r0, r9, lsr r3
    70bc:	00383216 	eorseq	r3, r8, r6, lsl r2
    70c0:	03070800 	movweq	r0, #30720	; 0x7800
    70c4:	0000c107 	andeq	ip, r0, r7, lsl #2
    70c8:	dc160000 	ldcle	0, cr0, [r6], {-0}
    70cc:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    70d0:	f4080308 	vst2.8	{d0-d3}, [r8], r8
    70d4:	04000000 	streq	r0, [r0], #-0
    70d8:	03fb1100 	mvnseq	r1, #0, 2
    70dc:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    70e0:	03120303 	tsteq	r2, #201326592	; 0xc000000
    70e4:	33170000 	tstcc	r7, #0
    70e8:	30000000 	andcc	r0, r0, r0
    70ec:	08030b08 	stmdaeq	r3, {r3, r8, r9, fp}
    70f0:	000003a9 	andeq	r0, r0, r9, lsr #7
    70f4:	001add16 	andseq	sp, sl, r6, lsl sp
    70f8:	03140800 	tsteq	r4, #0, 16
    70fc:	0000c108 	andeq	ip, r0, r8, lsl #2
    7100:	54160000 	ldrpl	r0, [r6], #-0
    7104:	08000009 	stmdaeq	r0, {r0, r3}
    7108:	c1080315 	tstgt	r8, r5, lsl r3
    710c:	02000000 	andeq	r0, r0, #0
    7110:	0049a216 	subeq	sl, r9, r6, lsl r2
    7114:	03160800 	tsteq	r6, #0, 16
    7118:	0002b60b 	andeq	fp, r2, fp, lsl #12
    711c:	05160400 	ldreq	r0, [r6, #-1024]	; 0xfffffc00
    7120:	08000044 	stmdaeq	r0, {r2, r6}
    7124:	f4090317 	vst2.8	{d0-d3}, [r9 :64], r7
    7128:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    712c:	00000716 	andeq	r0, r0, r6, lsl r7
    7130:	03180800 	tsteq	r8, #0, 16
    7134:	0003a90f 	andeq	sl, r3, pc, lsl #18
    7138:	c7160c00 	ldrgt	r0, [r6, -r0, lsl #24]
    713c:	08000007 	stmdaeq	r0, {r0, r1, r2}
    7140:	b9150319 	ldmdblt	r5, {r0, r3, r4, r8, r9}
    7144:	2c000003 	stccs	0, cr0, [r0], {3}
    7148:	03390f00 	teqeq	r9, #0, 30
    714c:	03b90000 			; <UNDEFINED> instruction: 0x03b90000
    7150:	88180000 	ldmdahi	r8, {}	; <UNPREDICTABLE>
    7154:	03000000 	movweq	r0, #0
    7158:	46040e00 	strmi	r0, [r4], -r0, lsl #28
    715c:	11000003 	tstne	r0, r3
    7160:	00000949 	andeq	r0, r0, r9, asr #18
    7164:	1b031c08 	blne	ce18c <__ccfg+0xae1e4>
    7168:	00000346 	andeq	r0, r0, r6, asr #6
    716c:	00092914 	andeq	r2, r9, r4, lsl r9
    7170:	031e0800 	tsteq	lr, #0, 16
    7174:	0003db14 	andeq	sp, r3, r4, lsl fp
    7178:	0e010100 	adfeqs	f0, f1, f0
    717c:	0003bf04 	andeq	fp, r3, r4, lsl #30
    7180:	25011900 	strcs	r1, [r1, #-2304]	; 0xfffff700
    7184:	0100001a 	tsteq	r0, sl, lsl r0
    7188:	8101050c 	tsthi	r1, ip, lsl #10
    718c:	ac000000 	stcge	0, cr0, [r0], {-0}
    7190:	0000001f 	andeq	r0, r0, pc, lsl r0
    7194:	01000020 	tsteq	r0, r0, lsr #32
    7198:	0004499c 	muleq	r4, ip, r9
    719c:	74731a00 	ldrbtvc	r1, [r3], #-2560	; 0xfffff600
    71a0:	140c0100 	strne	r0, [ip], #-256	; 0xffffff00
    71a4:	000000c1 	andeq	r0, r0, r1, asr #1
    71a8:	000024cc 	andeq	r2, r0, ip, asr #9
    71ac:	01006d1b 	tsteq	r0, fp, lsl sp
    71b0:	0449240c 	strbeq	r2, [r9], #-1036	; 0xfffffbf4
    71b4:	91020000 	mrsls	r0, (UNDEF: 2)
    71b8:	b81d1c74 	ldmdalt	sp, {r2, r4, r5, r6, sl, fp, ip}
    71bc:	01000021 	tsteq	r0, r1, lsr #32
    71c0:	0081060e 	addeq	r0, r1, lr, lsl #12
    71c4:	24df0000 	ldrbcs	r0, [pc], #0	; 71cc <__exidx_end+0x2124>
    71c8:	621e0000 	andsvs	r0, lr, #0
    71cc:	01006675 	tsteq	r0, r5, ror r6
    71d0:	01bb080f 			; <UNDEFINED> instruction: 0x01bb080f
    71d4:	251e0000 	ldrcs	r0, [lr, #-0]
    71d8:	611f0000 	tstvs	pc, r0
    71dc:	10010070 	andne	r0, r1, r0, ror r0
    71e0:	0000b50a 	andeq	fp, r0, sl, lsl #10
    71e4:	5c910200 	lfmpl	f0, 4, [r1], {0}
    71e8:	c8040e00 	stmdagt	r4, {r9, sl, fp}
    71ec:	00000001 	andeq	r0, r0, r1
    71f0:	0000044c 	andeq	r0, r0, ip, asr #8
    71f4:	1db00003 	ldcne	0, cr0, [r0, #12]!
    71f8:	01040000 	mrseq	r0, (UNDEF: 4)
    71fc:	000000bd 	strheq	r0, [r0], -sp
    7200:	001a6f0c 	andseq	r6, sl, ip, lsl #30
    7204:	0006e400 	andeq	lr, r6, r0, lsl #8
    7208:	000bf800 	andeq	pc, fp, r0, lsl #16
    720c:	00000000 	andeq	r0, r0, r0
    7210:	004d1600 	subeq	r1, sp, r0, lsl #12
    7214:	06010200 	streq	r0, [r1], -r0, lsl #4
    7218:	0000098a 	andeq	r0, r0, sl, lsl #19
    721c:	44050202 	strmi	r0, [r5], #-514	; 0xfffffdfe
    7220:	02000008 	andeq	r0, r0, #8
    7224:	06370504 	ldrteq	r0, [r7], -r4, lsl #10
    7228:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    722c:	00063205 	andeq	r3, r6, r5, lsl #4
    7230:	08e10300 	stmiaeq	r1!, {r8, r9}^
    7234:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    7238:	00004d18 	andeq	r4, r0, r8, lsl sp
    723c:	08010200 	stmdaeq	r1, {r9}
    7240:	00000988 	andeq	r0, r0, r8, lsl #19
    7244:	00040a03 	andeq	r0, r4, r3, lsl #20
    7248:	19310200 	ldmdbne	r1!, {r9}
    724c:	00000060 	andeq	r0, r0, r0, rrx
    7250:	80070202 	andhi	r0, r7, r2, lsl #4
    7254:	0300000a 	movweq	r0, #10
    7258:	000009a1 	andeq	r0, r0, r1, lsr #19
    725c:	73193402 	tstvc	r9, #33554432	; 0x2000000
    7260:	02000000 	andeq	r0, r0, #0
    7264:	03cf0704 	biceq	r0, pc, #4, 14	; 0x100000
    7268:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    726c:	0003ca07 	andeq	ip, r3, r7, lsl #20
    7270:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    7274:	00746e69 	rsbseq	r6, r4, r9, ror #28
    7278:	d4070402 	strle	r0, [r7], #-1026	; 0xfffffbfe
    727c:	03000003 	movweq	r0, #3
    7280:	00000456 	andeq	r0, r0, r6, asr r4
    7284:	9b1b2803 	blls	6d1298 <__ccfg+0x6b12f0>
    7288:	05000000 	streq	r0, [r0, #-0]
    728c:	00000911 	andeq	r0, r0, r1, lsl r9
    7290:	b3000904 	movwlt	r0, #2308	; 0x904
    7294:	06000000 	streq	r0, [r0], -r0
    7298:	00000a12 	andeq	r0, r0, r2, lsl sl
    729c:	000000b3 	strheq	r0, [r0], -r3
    72a0:	07000100 	streq	r0, [r0, -r0, lsl #2]
    72a4:	09130304 	ldmdbeq	r3, {r2, r8, r9}
    72a8:	63030000 	movwvs	r0, #12288	; 0x3000
    72ac:	00008f18 	andeq	r8, r0, r8, lsl pc
    72b0:	24ae0300 	strtcs	r0, [lr], #768	; 0x300
    72b4:	27040000 	strcs	r0, [r4, -r0]
    72b8:	00005412 	andeq	r5, r0, r2, lsl r4
    72bc:	00c10800 	sbceq	r0, r1, r0, lsl #16
    72c0:	c7030000 	strgt	r0, [r3, -r0]
    72c4:	04000019 	streq	r0, [r0], #-25	; 0xffffffe7
    72c8:	0041122b 	subeq	r1, r1, fp, lsr #4
    72cc:	d2090000 	andle	r0, r9, #0
    72d0:	03000000 	movweq	r0, #0
    72d4:	000024ff 	strdeq	r2, [r0], -pc	; <UNPREDICTABLE>
    72d8:	67122c04 	ldrvs	r2, [r2, -r4, lsl #24]
    72dc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    72e0:	000000e3 	andeq	r0, r0, r3, ror #1
    72e4:	00053803 	andeq	r3, r5, r3, lsl #16
    72e8:	122d0400 	eorne	r0, sp, #0, 8
    72ec:	00000067 	andeq	r0, r0, r7, rrx
    72f0:	3204080a 	andcc	r0, r4, #655360	; 0xa0000
    72f4:	00018e09 	andeq	r8, r1, r9, lsl #28
    72f8:	003e0b00 	eorseq	r0, lr, r0, lsl #22
    72fc:	34040000 	strcc	r0, [r4], #-0
    7300:	0000d207 	andeq	sp, r0, r7, lsl #4
    7304:	07010100 	streq	r0, [r1, -r0, lsl #2]
    7308:	053e0b00 	ldreq	r0, [lr, #-2816]!	; 0xfffff500
    730c:	35040000 	strcc	r0, [r4, #-0]
    7310:	0000d203 	andeq	sp, r0, r3, lsl #4
    7314:	06010100 	streq	r0, [r1], -r0, lsl #2
    7318:	026f0b00 	rsbeq	r0, pc, #0, 22
    731c:	36040000 	strcc	r0, [r4], -r0
    7320:	0000d203 	andeq	sp, r0, r3, lsl #4
    7324:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    7328:	05780b00 	ldrbeq	r0, [r8, #-2816]!	; 0xfffff500
    732c:	37040000 	strcc	r0, [r4, -r0]
    7330:	0000d203 	andeq	sp, r0, r3, lsl #4
    7334:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    7338:	08650b00 	stmdaeq	r5!, {r8, r9, fp}^
    733c:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    7340:	0000d203 	andeq	sp, r0, r3, lsl #4
    7344:	00040100 	andeq	r0, r4, r0, lsl #2
    7348:	05450c00 	strbeq	r0, [r5, #-3072]	; 0xfffff400
    734c:	3a040000 	bcc	107354 <__ccfg+0xe73ac>
    7350:	0000d207 	andeq	sp, r0, r7, lsl #4
    7354:	5e0c0100 	adfple	f0, f4, f0
    7358:	04000007 	streq	r0, [r0], #-7
    735c:	00d2033c 	sbcseq	r0, r2, ip, lsr r3
    7360:	0c020000 	stceq	0, cr0, [r2], {-0}
    7364:	00000b52 	andeq	r0, r0, r2, asr fp
    7368:	d2033d04 	andle	r3, r3, #4, 26	; 0x100
    736c:	03000000 	movweq	r0, #0
    7370:	0007930c 	andeq	r9, r7, ip, lsl #6
    7374:	083f0400 	ldmdaeq	pc!, {sl}	; <UNPREDICTABLE>
    7378:	000000e3 	andeq	r0, r0, r3, ror #1
    737c:	c1030004 	tstgt	r3, r4
    7380:	04000002 	streq	r0, [r0], #-2
    7384:	01000341 	tsteq	r0, r1, asr #6
    7388:	8e090000 	cdphi	0, 0, cr0, cr9, cr0, {0}
    738c:	0d000001 	stceq	0, cr0, [r0, #-4]
    7390:	0000057f 	andeq	r0, r0, pc, ror r5
    7394:	9a1a4304 	bls	697fac <__ccfg+0x678004>
    7398:	01000001 	tsteq	r0, r1
    739c:	01b10d01 			; <UNDEFINED> instruction: 0x01b10d01
    73a0:	45040000 	strmi	r0, [r4, #-0]
    73a4:	0001bb0e 	andeq	fp, r1, lr, lsl #22
    73a8:	0e010100 	adfeqs	f0, f1, f0
    73ac:	0001c104 	andeq	ip, r1, r4, lsl #2
    73b0:	08010200 	stmdaeq	r1, {r9}
    73b4:	00000991 	muleq	r0, r1, r9
    73b8:	0001c108 	andeq	ip, r1, r8, lsl #2
    73bc:	02ca0d00 	sbceq	r0, sl, #0, 26
    73c0:	45040000 	strmi	r0, [r4, #-0]
    73c4:	0001bb1e 	andeq	fp, r1, lr, lsl fp
    73c8:	0a010100 	beq	477d0 <__ccfg+0x27828>
    73cc:	098f0508 	stmibeq	pc, {r3, r8, sl}	; <UNPREDICTABLE>
    73d0:	0000020c 	andeq	r0, r0, ip, lsl #4
    73d4:	00064f0c 	andeq	r4, r6, ip, lsl #30
    73d8:	0b900500 	bleq	fe4087e0 <_estack+0xde4037e0>
    73dc:	00000067 	andeq	r0, r0, r7, rrx
    73e0:	0c840c00 	stceq	12, cr0, [r4], {0}
    73e4:	91050000 	mrsls	r0, (UNDEF: 5)
    73e8:	0000c108 	andeq	ip, r0, r8, lsl #2
    73ec:	f40c0400 	vst3.8	{d0-d2}, [ip], r0
    73f0:	05000001 	streq	r0, [r0, #-1]
    73f4:	00de1092 	smullseq	r1, lr, r2, r0
    73f8:	00060000 	andeq	r0, r6, r0
    73fc:	000a0b03 	andeq	r0, sl, r3, lsl #22
    7400:	03930500 	orrseq	r0, r3, #0, 10
    7404:	000001db 	ldrdeq	r0, [r0], -fp
    7408:	00020c0f 	andeq	r0, r2, pc, lsl #24
    740c:	00022300 	andeq	r2, r2, r0, lsl #6
    7410:	0d001000 	stceq	0, cr1, [r0, #-0]
    7414:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
    7418:	180f9905 	stmdane	pc, {r0, r2, r8, fp, ip, pc}	; <UNPREDICTABLE>
    741c:	01000002 	tsteq	r0, r2
    7420:	06010a01 	streq	r0, [r1], -r1, lsl #20
    7424:	025b0991 	subseq	r0, fp, #2375680	; 0x244000
    7428:	9a0b0000 	bls	2c7430 <__ccfg+0x2a7488>
    742c:	06000007 	streq	r0, [r0], -r7
    7430:	00d20793 	smullseq	r0, r2, r3, r7
    7434:	07010000 	streq	r0, [r1, -r0]
    7438:	b40b0001 	strlt	r0, [fp], #-1
    743c:	06000004 	streq	r0, [r0], -r4
    7440:	00d20394 	smullseq	r0, r2, r4, r3
    7444:	01010000 	mrseq	r0, (UNDEF: 1)
    7448:	03000000 	movweq	r0, #0
    744c:	00000871 	andeq	r0, r0, r1, ror r8
    7450:	31039606 	tstcc	r3, r6, lsl #12
    7454:	08000002 	stmdaeq	r0, {r1}
    7458:	0000025b 	andeq	r0, r0, fp, asr r2
    745c:	0002670f 	andeq	r6, r2, pc, lsl #14
    7460:	00027700 	andeq	r7, r2, r0, lsl #14
    7464:	08001000 	stmdaeq	r0, {ip}
    7468:	0000026c 	andeq	r0, r0, ip, ror #4
    746c:	0003830d 	andeq	r8, r3, sp, lsl #6
    7470:	179c0600 	ldrne	r0, [ip, r0, lsl #12]
    7474:	00000277 	andeq	r0, r0, r7, ror r2
    7478:	cd0f0101 	stfgts	f0, [pc, #-4]	; 747c <__exidx_end+0x23d4>
    747c:	95000000 	strls	r0, [r0, #-0]
    7480:	10000002 	andne	r0, r0, r2
    7484:	028a0800 	addeq	r0, sl, #0, 16
    7488:	f80d0000 			; <UNDEFINED> instruction: 0xf80d0000
    748c:	07000004 	streq	r0, [r0, -r4]
    7490:	02951306 	addseq	r1, r5, #402653184	; 0x18000000
    7494:	01010000 	mrseq	r0, (UNDEF: 1)
    7498:	0007400d 	andeq	r4, r7, sp
    749c:	0ec30500 	cdpeq	5, 12, cr0, cr3, cr0, {0}
    74a0:	000000e3 	andeq	r0, r0, r3, ror #1
    74a4:	aa110101 	bge	4478b0 <__ccfg+0x427908>
    74a8:	08000009 	stmdaeq	r0, {r0, r3}
    74ac:	c310016e 	tstgt	r0, #-2147483621	; 0x8000001b
    74b0:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    74b4:	0002c904 	andeq	ip, r2, r4, lsl #18
    74b8:	d5011200 	strle	r1, [r1, #-512]	; 0xfffffe00
    74bc:	13000002 	movwne	r0, #2
    74c0:	000000c1 	andeq	r0, r0, r1, asr #1
    74c4:	01c80f00 	biceq	r0, r8, r0, lsl #30
    74c8:	02e00000 	rsceq	r0, r0, #0
    74cc:	00100000 	andseq	r0, r0, r0
    74d0:	0002d508 	andeq	sp, r2, r8, lsl #10
    74d4:	08081400 	stmdaeq	r8, {sl, ip}
    74d8:	7f080000 	svcvc	0x00080000
    74dc:	02e01601 	rsceq	r1, r0, #1048576	; 0x100000
    74e0:	01010000 	mrseq	r0, (UNDEF: 1)
    74e4:	00036614 	andeq	r6, r3, r4, lsl r6
    74e8:	01820800 	orreq	r0, r2, r0, lsl #16
    74ec:	0000ef14 	andeq	lr, r0, r4, lsl pc
    74f0:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    74f4:	00000343 	andeq	r0, r0, r3, asr #6
    74f8:	0e02d808 	cdpeq	8, 0, cr13, cr2, cr8, {0}
    74fc:	000000e3 	andeq	r0, r0, r3, ror #1
    7500:	08150101 	ldmdaeq	r5, {r0, r8}
    7504:	09030308 	stmdbeq	r3, {r3, r8, r9}
    7508:	00000339 	andeq	r0, r0, r9, lsr r3
    750c:	00383216 	eorseq	r3, r8, r6, lsl r2
    7510:	03070800 	movweq	r0, #30720	; 0x7800
    7514:	0000c107 	andeq	ip, r0, r7, lsl #2
    7518:	dc160000 	ldcle	0, cr0, [r6], {-0}
    751c:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    7520:	f4080308 	vst2.8	{d0-d3}, [r8], r8
    7524:	04000000 	streq	r0, [r0], #-0
    7528:	03fb1100 	mvnseq	r1, #0, 2
    752c:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    7530:	03120303 	tsteq	r2, #201326592	; 0xc000000
    7534:	33170000 	tstcc	r7, #0
    7538:	30000000 	andcc	r0, r0, r0
    753c:	08030b08 	stmdaeq	r3, {r3, r8, r9, fp}
    7540:	000003a9 	andeq	r0, r0, r9, lsr #7
    7544:	001add16 	andseq	sp, sl, r6, lsl sp
    7548:	03140800 	tsteq	r4, #0, 16
    754c:	0000c108 	andeq	ip, r0, r8, lsl #2
    7550:	54160000 	ldrpl	r0, [r6], #-0
    7554:	08000009 	stmdaeq	r0, {r0, r3}
    7558:	c1080315 	tstgt	r8, r5, lsl r3
    755c:	02000000 	andeq	r0, r0, #0
    7560:	0049a216 	subeq	sl, r9, r6, lsl r2
    7564:	03160800 	tsteq	r6, #0, 16
    7568:	0002b60b 	andeq	fp, r2, fp, lsl #12
    756c:	05160400 	ldreq	r0, [r6, #-1024]	; 0xfffffc00
    7570:	08000044 	stmdaeq	r0, {r2, r6}
    7574:	f4090317 	vst2.8	{d0-d3}, [r9 :64], r7
    7578:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    757c:	00000716 	andeq	r0, r0, r6, lsl r7
    7580:	03180800 	tsteq	r8, #0, 16
    7584:	0003a90f 	andeq	sl, r3, pc, lsl #18
    7588:	c7160c00 	ldrgt	r0, [r6, -r0, lsl #24]
    758c:	08000007 	stmdaeq	r0, {r0, r1, r2}
    7590:	b9150319 	ldmdblt	r5, {r0, r3, r4, r8, r9}
    7594:	2c000003 	stccs	0, cr0, [r0], {3}
    7598:	03390f00 	teqeq	r9, #0, 30
    759c:	03b90000 			; <UNDEFINED> instruction: 0x03b90000
    75a0:	88180000 	ldmdahi	r8, {}	; <UNPREDICTABLE>
    75a4:	03000000 	movweq	r0, #0
    75a8:	46040e00 	strmi	r0, [r4], -r0, lsl #28
    75ac:	11000003 	tstne	r0, r3
    75b0:	00000949 	andeq	r0, r0, r9, asr #18
    75b4:	1b031c08 	blne	ce5dc <__ccfg+0xae634>
    75b8:	00000346 	andeq	r0, r0, r6, asr #6
    75bc:	00092914 	andeq	r2, r9, r4, lsl r9
    75c0:	031e0800 	tsteq	lr, #0, 16
    75c4:	0003db14 	andeq	sp, r3, r4, lsl fp
    75c8:	0e010100 	adfeqs	f0, f1, f0
    75cc:	0003bf04 	andeq	fp, r3, r4, lsl #30
    75d0:	19d50d00 	ldmibne	r5, {r8, sl, fp}^
    75d4:	0a010000 	beq	475dc <__ccfg+0x27634>
    75d8:	0001bb0e 	andeq	fp, r1, lr, lsl #22
    75dc:	19010100 	stmdbne	r1, {r8}
    75e0:	001aaf01 	andseq	sl, sl, r1, lsl #30
    75e4:	050e0100 	streq	r0, [lr, #-256]	; 0xffffff00
    75e8:	00008101 	andeq	r8, r0, r1, lsl #2
    75ec:	00200000 	eoreq	r0, r0, r0
    75f0:	00206000 	eoreq	r6, r0, r0
    75f4:	499c0100 	ldmibmi	ip, {r8}
    75f8:	1a000004 	bne	7610 <__exidx_end+0x2568>
    75fc:	01007473 	tsteq	r0, r3, ror r4
    7600:	00c1130e 	sbceq	r1, r1, lr, lsl #6
    7604:	25520000 	ldrbcs	r0, [r2, #-0]
    7608:	661b0000 	ldrvs	r0, [fp], -r0
    760c:	0100746d 	tsteq	r0, sp, ror #8
    7610:	0449230e 	strbeq	r2, [r9], #-782	; 0xfffffcf2
    7614:	91020000 	mrsls	r0, (UNDEF: 2)
    7618:	b81d1c74 	ldmdalt	sp, {r2, r4, r5, r6, sl, fp, ip}
    761c:	01000021 	tsteq	r0, r1, lsr #32
    7620:	00810613 	addeq	r0, r1, r3, lsl r6
    7624:	25700000 	ldrbcs	r0, [r0, #-0]!
    7628:	611e0000 	tstvs	lr, r0
    762c:	14010070 	strne	r0, [r1], #-112	; 0xffffff90
    7630:	0000b50a 	andeq	fp, r0, sl, lsl #10
    7634:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    7638:	c8040e00 	stmdagt	r4, {r9, sl, fp}
    763c:	00000001 	andeq	r0, r0, r1
    7640:	00002474 	andeq	r2, r0, r4, ror r4
    7644:	1f4b0003 	svcne	0x004b0003
    7648:	01040000 	mrseq	r0, (UNDEF: 4)
    764c:	000000bd 	strheq	r0, [r0], -sp
    7650:	001ec70c 	andseq	ip, lr, ip, lsl #14
    7654:	0006e400 	andeq	lr, r6, r0, lsl #8
    7658:	000d8000 	andeq	r8, sp, r0
    765c:	00000000 	andeq	r0, r0, r0
    7660:	004ec900 	subeq	ip, lr, r0, lsl #18
    7664:	27470200 	strbcs	r0, [r7, -r0, lsl #4]
    7668:	22060000 	andcs	r0, r6, #0
    766c:	00003117 	andeq	r3, r0, r7, lsl r1
    7670:	06010300 	streq	r0, [r1], -r0, lsl #6
    7674:	0000098a 	andeq	r0, r0, sl, lsl #19
    7678:	002d7e02 	eoreq	r7, sp, r2, lsl #28
    767c:	18250600 	stmdane	r5!, {r9, sl}
    7680:	00000044 	andeq	r0, r0, r4, asr #32
    7684:	44050203 	strmi	r0, [r5], #-515	; 0xfffffdfd
    7688:	03000008 	movweq	r0, #8
    768c:	06370504 	ldrteq	r0, [r7], -r4, lsl #10
    7690:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    7694:	00063205 	andeq	r3, r6, r5, lsl #4
    7698:	08e10200 	stmiaeq	r1!, {r9}^
    769c:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
    76a0:	00006518 	andeq	r6, r0, r8, lsl r5
    76a4:	08010300 	stmdaeq	r1, {r8, r9}
    76a8:	00000988 	andeq	r0, r0, r8, lsl #19
    76ac:	00040a02 	andeq	r0, r4, r2, lsl #20
    76b0:	19310600 	ldmdbne	r1!, {r9, sl}
    76b4:	00000078 	andeq	r0, r0, r8, ror r0
    76b8:	80070203 	andhi	r0, r7, r3, lsl #4
    76bc:	0200000a 	andeq	r0, r0, #10
    76c0:	000009a1 	andeq	r0, r0, r1, lsr #19
    76c4:	90193406 	andsls	r3, r9, r6, lsl #8
    76c8:	04000000 	streq	r0, [r0], #-0
    76cc:	0000007f 	andeq	r0, r0, pc, ror r0
    76d0:	cf070403 	svcgt	0x00070403
    76d4:	05000003 	streq	r0, [r0, #-3]
    76d8:	00000090 	muleq	r0, r0, r0
    76dc:	ca070803 	bgt	1c96f0 <__ccfg+0x1a9748>
    76e0:	06000003 	streq	r0, [r0], -r3
    76e4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    76e8:	04030074 	streq	r0, [r3], #-116	; 0xffffff8c
    76ec:	0003d407 	andeq	sp, r3, r7, lsl #8
    76f0:	09420700 	stmdbeq	r2, {r8, r9, sl}^
    76f4:	5e070000 	cdppl	0, 0, cr0, cr7, cr0, {0}
    76f8:	00aa1701 	adceq	r1, sl, r1, lsl #14
    76fc:	bc020000 	stclt	0, cr0, [r2], {-0}
    7700:	0800000a 	stmdaeq	r0, {r1, r3}
    7704:	004b0e2e 	subeq	r0, fp, lr, lsr #28
    7708:	a3020000 	movwge	r0, #8192	; 0x2000
    770c:	08000002 	stmdaeq	r0, {r1}
    7710:	004b0e74 	subeq	r0, fp, r4, ror lr
    7714:	04080000 	streq	r0, [r8], #-0
    7718:	f803a508 			; <UNDEFINED> instruction: 0xf803a508
    771c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    7720:	000005c8 	andeq	r0, r0, r8, asr #11
    7724:	b10ca708 	tstlt	ip, r8, lsl #14
    7728:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    772c:	0000088b 	andeq	r0, r0, fp, lsl #17
    7730:	f813a808 			; <UNDEFINED> instruction: 0xf813a808
    7734:	00000000 	andeq	r0, r0, r0
    7738:	0000650a 	andeq	r6, r0, sl, lsl #10
    773c:	00010800 	andeq	r0, r1, r0, lsl #16
    7740:	00aa0b00 	adceq	r0, sl, r0, lsl #22
    7744:	00030000 	andeq	r0, r3, r0
    7748:	a208080c 	andge	r0, r8, #12, 16	; 0xc0000
    774c:	00012c09 	andeq	r2, r1, r9, lsl #24
    7750:	035e0d00 	cmpeq	lr, #0, 26
    7754:	a4080000 	strge	r0, [r8], #-0
    7758:	0000a307 	andeq	sl, r0, r7, lsl #6
    775c:	eb0d0000 	bl	347764 <__ccfg+0x3277bc>
    7760:	08000004 	stmdaeq	r0, {r2}
    7764:	00d605a9 	sbcseq	r0, r6, r9, lsr #11
    7768:	00040000 	andeq	r0, r4, r0
    776c:	00073502 	andeq	r3, r7, r2, lsl #10
    7770:	03aa0800 			; <UNDEFINED> instruction: 0x03aa0800
    7774:	00000108 	andeq	r0, r0, r8, lsl #2
    7778:	8a02040e 	bhi	887b8 <__ccfg+0x68810>
    777c:	09000006 	stmdbeq	r0, {r1, r2}
    7780:	00901916 	addseq	r1, r0, r6, lsl r9
    7784:	16020000 	strne	r0, [r2], -r0
    7788:	0a000002 	beq	7798 <__exidx_end+0x26f0>
    778c:	00a30d0c 	adceq	r0, r3, ip, lsl #26
    7790:	96020000 	strls	r0, [r2], -r0
    7794:	09000005 	stmdbeq	r0, {r0, r2}
    7798:	01461b23 	cmpeq	r6, r3, lsr #22
    779c:	e30f0000 	movw	r0, #61440	; 0xf000
    77a0:	18000002 	stmdane	r0, {r1}
    77a4:	b8083409 	stmdalt	r8, {r0, r3, sl, ip, sp}
    77a8:	0d000001 	stceq	0, cr0, [r0, #-4]
    77ac:	00000b16 	andeq	r0, r0, r6, lsl fp
    77b0:	b8133609 	ldmdalt	r3, {r0, r3, r9, sl, ip, sp}
    77b4:	00000001 	andeq	r0, r0, r1
    77b8:	006b5f10 	rsbeq	r5, fp, r0, lsl pc
    77bc:	a3073709 	movwge	r3, #30473	; 0x7709
    77c0:	04000000 	streq	r0, [r0], #-0
    77c4:	0008f10d 	andeq	pc, r8, sp, lsl #2
    77c8:	0b370900 	bleq	dc9bd0 <__ccfg+0xda9c28>
    77cc:	000000a3 	andeq	r0, r0, r3, lsr #1
    77d0:	3f860d08 	svccc	0x00860d08
    77d4:	37090000 	strcc	r0, [r9, -r0]
    77d8:	0000a314 	andeq	sl, r0, r4, lsl r3
    77dc:	f60d0c00 			; <UNDEFINED> instruction: 0xf60d0c00
    77e0:	09000003 	stmdbeq	r0, {r0, r1}
    77e4:	00a31b37 	adceq	r1, r3, r7, lsr fp
    77e8:	10100000 	andsne	r0, r0, r0
    77ec:	0900785f 	stmdbeq	r0, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}
    77f0:	01be0b38 			; <UNDEFINED> instruction: 0x01be0b38
    77f4:	00140000 	andseq	r0, r4, r0
    77f8:	015e0411 	cmpeq	lr, r1, lsl r4
    77fc:	3a0a0000 	bcc	287804 <__ccfg+0x26785c>
    7800:	ce000001 	cdpgt	0, 0, cr0, cr0, cr1, {0}
    7804:	0b000001 	bleq	7810 <__exidx_end+0x2768>
    7808:	000000aa 	andeq	r0, r0, sl, lsr #1
    780c:	0c0f0000 	stceq	0, cr0, [pc], {-0}
    7810:	24000009 	strcs	r0, [r0], #-9
    7814:	51083c09 	tstpl	r8, r9, lsl #24
    7818:	0d000002 	stceq	0, cr0, [r0, #-8]
    781c:	00000486 	andeq	r0, r0, r6, lsl #9
    7820:	a3093e09 	movwge	r3, #40457	; 0x9e09
    7824:	00000000 	andeq	r0, r0, r0
    7828:	0003900d 	andeq	r9, r3, sp
    782c:	093f0900 	ldmdbeq	pc!, {r8, fp}	; <UNPREDICTABLE>
    7830:	000000a3 	andeq	r0, r0, r3, lsr #1
    7834:	03390d04 	teqeq	r9, #4, 26	; 0x100
    7838:	40090000 	andmi	r0, r9, r0
    783c:	0000a309 	andeq	sl, r0, r9, lsl #6
    7840:	4c0d0800 	stcmi	8, cr0, [sp], {-0}
    7844:	09000005 	stmdbeq	r0, {r0, r2}
    7848:	00a30941 	adceq	r0, r3, r1, asr #18
    784c:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    7850:	000007be 			; <UNDEFINED> instruction: 0x000007be
    7854:	a3094209 	movwge	r4, #37385	; 0x9209
    7858:	10000000 	andne	r0, r0, r0
    785c:	0008a50d 	andeq	sl, r8, sp, lsl #10
    7860:	09430900 	stmdbeq	r3, {r8, fp}^
    7864:	000000a3 	andeq	r0, r0, r3, lsr #1
    7868:	02fe0d14 	rscseq	r0, lr, #20, 26	; 0x500
    786c:	44090000 	strmi	r0, [r9], #-0
    7870:	0000a309 	andeq	sl, r0, r9, lsl #6
    7874:	8f0d1800 	svchi	0x000d1800
    7878:	09000004 	stmdbeq	r0, {r2}
    787c:	00a30945 	adceq	r0, r3, r5, asr #18
    7880:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
    7884:	00000753 	andeq	r0, r0, r3, asr r7
    7888:	a3094609 	movwge	r4, #38409	; 0x9609
    788c:	20000000 	andcs	r0, r0, r0
    7890:	00611200 	rsbeq	r1, r1, r0, lsl #4
    7894:	01080000 	mrseq	r0, (UNDEF: 8)
    7898:	96084f09 	strls	r4, [r8], -r9, lsl #30
    789c:	0d000002 	stceq	0, cr0, [r0, #-8]
    78a0:	00000a4a 	andeq	r0, r0, sl, asr #20
    78a4:	960a5009 	strls	r5, [sl], -r9
    78a8:	00000002 	andeq	r0, r0, r2
    78ac:	00096c0d 	andeq	r6, r9, sp, lsl #24
    78b0:	09510900 	ldmdbeq	r1, {r8, fp}^
    78b4:	00000296 	muleq	r0, r6, r2
    78b8:	0ab31380 	beq	feccc6c0 <_estack+0xdecc76c0>
    78bc:	53090000 	movwpl	r0, #36864	; 0x9000
    78c0:	00013a0a 	andeq	r3, r1, sl, lsl #20
    78c4:	13010000 	movwne	r0, #4096	; 0x1000
    78c8:	00000b01 	andeq	r0, r0, r1, lsl #22
    78cc:	3a0a5609 	bcc	29d0f8 <__ccfg+0x27d150>
    78d0:	04000001 	streq	r0, [r0], #-1
    78d4:	380a0001 	stmdacc	sl, {r0}
    78d8:	a6000001 	strge	r0, [r0], -r1
    78dc:	0b000002 	bleq	78ec <__exidx_end+0x2844>
    78e0:	000000aa 	andeq	r0, r0, sl, lsr #1
    78e4:	2b12001f 	blcs	487968 <__ccfg+0x4679c0>
    78e8:	90000008 	andls	r0, r0, r8
    78ec:	08620901 	stmdaeq	r2!, {r0, r8, fp}^
    78f0:	000002e9 	andeq	r0, r0, r9, ror #5
    78f4:	000b160d 	andeq	r1, fp, sp, lsl #12
    78f8:	12630900 	rsbne	r0, r3, #0, 18
    78fc:	000002e9 	andeq	r0, r0, r9, ror #5
    7900:	049e0d00 	ldreq	r0, [lr], #3328	; 0xd00
    7904:	64090000 	strvs	r0, [r9], #-0
    7908:	0000a306 	andeq	sl, r0, r6, lsl #6
    790c:	ab0d0400 	blge	348914 <__ccfg+0x32896c>
    7910:	09000002 	stmdbeq	r0, {r1}
    7914:	02ef0966 	rsceq	r0, pc, #1671168	; 0x198000
    7918:	0d080000 	stceq	0, cr0, [r8, #-0]
    791c:	00000061 	andeq	r0, r0, r1, rrx
    7920:	511e6709 	tstpl	lr, r9, lsl #14
    7924:	88000002 	stmdahi	r0, {r1}
    7928:	a6041100 	strge	r1, [r4], -r0, lsl #2
    792c:	0a000002 	beq	793c <__exidx_end+0x2894>
    7930:	000002ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    7934:	000002ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    7938:	0000aa0b 	andeq	sl, r0, fp, lsl #20
    793c:	11001f00 	tstne	r0, r0, lsl #30
    7940:	00030504 	andeq	r0, r3, r4, lsl #10
    7944:	0f011400 	svceq	0x00011400
    7948:	00000a04 	andeq	r0, r0, r4, lsl #20
    794c:	087a0908 	ldmdaeq	sl!, {r3, r8, fp}^
    7950:	0000032f 	andeq	r0, r0, pc, lsr #6
    7954:	00064e0d 	andeq	r4, r6, sp, lsl #28
    7958:	117b0900 	cmnne	fp, r0, lsl #18
    795c:	0000032f 	andeq	r0, r0, pc, lsr #6
    7960:	19a50d00 	stmibne	r5!, {r8, sl, fp}
    7964:	7c090000 	stcvc	0, cr0, [r9], {-0}
    7968:	0000a306 	andeq	sl, r0, r6, lsl #6
    796c:	11000400 	tstne	r0, r0, lsl #8
    7970:	00006504 	andeq	r6, r0, r4, lsl #10
    7974:	03ee0f00 	mvneq	r0, #0, 30
    7978:	09680000 	stmdbeq	r8!, {}^	; <UNPREDICTABLE>
    797c:	047808ba 	ldrbteq	r0, [r8], #-2234	; 0xfffff746
    7980:	5f100000 	svcpl	0x00100000
    7984:	bb090070 	bllt	247b4c <__ccfg+0x227ba4>
    7988:	00032f12 	andeq	r2, r3, r2, lsl pc
    798c:	5f100000 	svcpl	0x00100000
    7990:	bc090072 	stclt	0, cr0, [r9], {114}	; 0x72
    7994:	0000a307 	andeq	sl, r0, r7, lsl #6
    7998:	5f100400 	svcpl	0x00100400
    799c:	bd090077 	stclt	0, cr0, [r9, #-476]	; 0xfffffe24
    79a0:	0000a307 	andeq	sl, r0, r7, lsl #6
    79a4:	f30d0800 	vsub.i8	d0, d13, d0
    79a8:	09000001 	stmdbeq	r0, {r0}
    79ac:	004409be 	strheq	r0, [r4], #-158	; 0xffffff62
    79b0:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    79b4:	000006bf 			; <UNDEFINED> instruction: 0x000006bf
    79b8:	4409bf09 	strmi	fp, [r9], #-3849	; 0xfffff0f7
    79bc:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    79c0:	66625f10 	uqadd16vs	r5, r2, r0
    79c4:	11c00900 	bicne	r0, r0, r0, lsl #18
    79c8:	00000307 	andeq	r0, r0, r7, lsl #6
    79cc:	01ea0d10 	mvneq	r0, r0, lsl sp
    79d0:	c1090000 	mrsgt	r0, (UNDEF: 9)
    79d4:	0000a307 	andeq	sl, r0, r7, lsl #6
    79d8:	b00d1800 	andlt	r1, sp, r0, lsl #16
    79dc:	09000002 	stmdbeq	r0, {r1}
    79e0:	01380ac8 	teqeq	r8, r8, asr #21
    79e4:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
    79e8:	00001935 	andeq	r1, r0, r5, lsr r9
    79ec:	fd1dca09 	ldc2	10, cr12, [sp, #-36]	; 0xffffffdc	; <UNPREDICTABLE>
    79f0:	20000005 	andcs	r0, r0, r5
    79f4:	0018fc0d 	andseq	pc, r8, sp, lsl #24
    79f8:	1dcc0900 	vstrne.16	s1, [ip]	; <UNPREDICTABLE>
    79fc:	00000628 	andeq	r0, r0, r8, lsr #12
    7a00:	0b270d24 	bleq	9cae98 <__ccfg+0x9aaef0>
    7a04:	cf090000 	svcgt	0x00090000
    7a08:	00064d0d 	andeq	r4, r6, sp, lsl #26
    7a0c:	ea0d2800 	b	351a14 <__ccfg+0x331a6c>
    7a10:	09000018 	stmdbeq	r0, {r3, r4}
    7a14:	066809d0 			; <UNDEFINED> instruction: 0x066809d0
    7a18:	102c0000 	eorne	r0, ip, r0
    7a1c:	0062755f 	rsbeq	r7, r2, pc, asr r5
    7a20:	0711d309 	ldreq	sp, [r1, -r9, lsl #6]
    7a24:	30000003 	andcc	r0, r0, r3
    7a28:	70755f10 	rsbsvc	r5, r5, r0, lsl pc
    7a2c:	12d40900 	sbcsne	r0, r4, #0, 18
    7a30:	0000032f 	andeq	r0, r0, pc, lsr #6
    7a34:	755f1038 	ldrbvc	r1, [pc, #-56]	; 7a04 <__exidx_end+0x295c>
    7a38:	d5090072 	strle	r0, [r9, #-114]	; 0xffffff8e
    7a3c:	0000a307 	andeq	sl, r0, r7, lsl #6
    7a40:	3e0d3c00 	cdpcc	12, 0, cr3, cr13, cr0, {0}
    7a44:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    7a48:	066e11d8 			; <UNDEFINED> instruction: 0x066e11d8
    7a4c:	0d400000 	stcleq	0, cr0, [r0, #-0]
    7a50:	00000acd 	andeq	r0, r0, sp, asr #21
    7a54:	7e11d909 	vnmlsvc.f16	s26, s2, s18	; <UNPREDICTABLE>
    7a58:	43000006 	movwmi	r0, #6
    7a5c:	626c5f10 	rsbvs	r5, ip, #16, 30	; 0x40
    7a60:	11dc0900 	bicsne	r0, ip, r0, lsl #18
    7a64:	00000307 	andeq	r0, r0, r7, lsl #6
    7a68:	09030d44 	stmdbeq	r3, {r2, r6, r8, sl, fp}
    7a6c:	df090000 	svcle	0x00090000
    7a70:	0000a307 	andeq	sl, r0, r7, lsl #6
    7a74:	3b0d4c00 	blcc	35aa7c <__ccfg+0x33aad4>
    7a78:	09000004 	stmdbeq	r0, {r2}
    7a7c:	00be0ae0 	adcseq	r0, lr, r0, ror #21
    7a80:	0d500000 	ldcleq	0, cr0, [r0, #-0]
    7a84:	00004404 	andeq	r4, r0, r4, lsl #8
    7a88:	9712e309 	ldrls	lr, [r2, -r9, lsl #6]
    7a8c:	54000004 	strpl	r0, [r0], #-4
    7a90:	00091b0d 	andeq	r1, r9, sp, lsl #22
    7a94:	0ce70900 			; <UNDEFINED> instruction: 0x0ce70900
    7a98:	00000152 	andeq	r0, r0, r2, asr r1
    7a9c:	08330d58 	ldmdaeq	r3!, {r3, r4, r6, r8, sl, fp}
    7aa0:	e9090000 	stmdb	r9, {}	; <UNPREDICTABLE>
    7aa4:	00012c0e 	andeq	r2, r1, lr, lsl #24
    7aa8:	f90d5c00 			; <UNDEFINED> instruction: 0xf90d5c00
    7aac:	0900000a 	stmdbeq	r0, {r1, r3}
    7ab0:	00a309ea 	adceq	r0, r3, sl, ror #19
    7ab4:	00640000 	rsbeq	r0, r4, r0
    7ab8:	00a30115 	adceq	r0, r3, r5, lsl r1
    7abc:	04970000 	ldreq	r0, [r7], #0
    7ac0:	97160000 	ldrls	r0, [r6, -r0]
    7ac4:	16000004 	strne	r0, [r0], -r4
    7ac8:	00000138 	andeq	r0, r0, r8, lsr r1
    7acc:	0005eb16 	andeq	lr, r5, r6, lsl fp
    7ad0:	00a31600 	adceq	r1, r3, r0, lsl #12
    7ad4:	11000000 	mrsne	r0, (UNDEF: 0)
    7ad8:	0004a204 	andeq	sl, r4, r4, lsl #4
    7adc:	04970400 	ldreq	r0, [r7], #1024	; 0x400
    7ae0:	42170000 	andsmi	r0, r7, #0
    7ae4:	28000044 	stmdacs	r0, {r2, r6}
    7ae8:	02650904 	rsbeq	r0, r5, #4, 18	; 0x10000
    7aec:	0005eb08 	andeq	lr, r5, r8, lsl #22
    7af0:	07841800 	streq	r1, [r4, r0, lsl #16]
    7af4:	67090000 	strvs	r0, [r9, -r0]
    7af8:	00a30702 	adceq	r0, r3, r2, lsl #14
    7afc:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    7b00:	0000061c 	andeq	r0, r0, ip, lsl r6
    7b04:	0b026c09 	bleq	a2b30 <__ccfg+0x82b88>
    7b08:	000006da 	ldrdeq	r0, [r0], -sl
    7b0c:	028d1804 	addeq	r1, sp, #4, 16	; 0x40000
    7b10:	6c090000 	stcvs	0, cr0, [r9], {-0}
    7b14:	06da1402 	ldrbeq	r1, [sl], r2, lsl #8
    7b18:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    7b1c:	00000b2d 	andeq	r0, r0, sp, lsr #22
    7b20:	1e026c09 	cdpne	12, 0, cr6, cr2, cr9, {0}
    7b24:	000006da 	ldrdeq	r0, [r0], -sl
    7b28:	0499180c 	ldreq	r1, [r9], #2060	; 0x80c
    7b2c:	6e090000 	cdpvs	0, 0, cr0, cr9, cr0, {0}
    7b30:	00a30802 	adceq	r0, r3, r2, lsl #16
    7b34:	18100000 	ldmdane	r0, {}	; <UNPREDICTABLE>
    7b38:	0000044b 	andeq	r0, r0, fp, asr #8
    7b3c:	08026f09 	stmdaeq	r2, {r0, r3, r8, r9, sl, fp, sp, lr}
    7b40:	000008da 	ldrdeq	r0, [r0], -sl
    7b44:	0ae01814 	beq	ff80db9c <_estack+0xdf808b9c>
    7b48:	72090000 	andvc	r0, r9, #0
    7b4c:	00a30702 	adceq	r0, r3, r2, lsl #14
    7b50:	18300000 	ldmdane	r0!, {}	; <UNPREDICTABLE>
    7b54:	00003e32 	andeq	r3, r0, r2, lsr lr
    7b58:	16027309 	strne	r7, [r2], -r9, lsl #6
    7b5c:	000008f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    7b60:	05e21834 	strbeq	r1, [r2, #2100]!	; 0x834
    7b64:	75090000 	strvc	r0, [r9, #-0]
    7b68:	00a30702 	adceq	r0, r3, r2, lsl #14
    7b6c:	18380000 	ldmdane	r8!, {}	; <UNPREDICTABLE>
    7b70:	0000072b 	andeq	r0, r0, fp, lsr #14
    7b74:	0a027709 	beq	a57a0 <__ccfg+0x857f8>
    7b78:	00000902 	andeq	r0, r0, r2, lsl #18
    7b7c:	0308183c 	movweq	r1, #34876	; 0x883c
    7b80:	7a090000 	bvc	247b88 <__ccfg+0x227be0>
    7b84:	01b81302 			; <UNDEFINED> instruction: 0x01b81302
    7b88:	18400000 	stmdane	r0, {}^	; <UNPREDICTABLE>
    7b8c:	000003b4 			; <UNDEFINED> instruction: 0x000003b4
    7b90:	07027b09 	streq	r7, [r2, -r9, lsl #22]
    7b94:	000000a3 	andeq	r0, r0, r3, lsr #1
    7b98:	04f31844 	ldrbteq	r1, [r3], #2116	; 0x844
    7b9c:	7c090000 	stcvc	0, cr0, [r9], {-0}
    7ba0:	01b81302 			; <UNDEFINED> instruction: 0x01b81302
    7ba4:	18480000 	stmdane	r8, {}^	; <UNPREDICTABLE>
    7ba8:	00000654 	andeq	r0, r0, r4, asr r6
    7bac:	14027d09 	strne	r7, [r2], #-3337	; 0xfffff2f7
    7bb0:	00000908 	andeq	r0, r0, r8, lsl #18
    7bb4:	08e9184c 	stmiaeq	r9!, {r2, r3, r6, fp, ip}^
    7bb8:	80090000 	andhi	r0, r9, r0
    7bbc:	00a30702 	adceq	r0, r3, r2, lsl #14
    7bc0:	18500000 	ldmdane	r0, {}^	; <UNPREDICTABLE>
    7bc4:	00000980 	andeq	r0, r0, r0, lsl #19
    7bc8:	09028109 	stmdbeq	r2, {r0, r3, r8, pc}
    7bcc:	000005eb 	andeq	r0, r0, fp, ror #11
    7bd0:	099a1854 	ldmibeq	sl, {r2, r4, r6, fp, ip}
    7bd4:	a4090000 	strge	r0, [r9], #-0
    7bd8:	08b50702 	ldmeq	r5!, {r1, r8, r9, sl}
    7bdc:	19580000 	ldmdbne	r8, {}^	; <UNPREDICTABLE>
    7be0:	0000082b 	andeq	r0, r0, fp, lsr #16
    7be4:	1302a809 	movwne	sl, #10249	; 0x2809
    7be8:	000002e9 	andeq	r0, r0, r9, ror #5
    7bec:	6f190148 	svcvs	0x00190148
    7bf0:	09000005 	stmdbeq	r0, {r0, r2}
    7bf4:	a61202a9 	ldrge	r0, [r2], -r9, lsr #5
    7bf8:	4c000002 	stcmi	0, cr0, [r0], {2}
    7bfc:	05561901 	ldrbeq	r1, [r6, #-2305]	; 0xfffff6ff
    7c00:	ad090000 	stcge	0, cr0, [r9, #-0]
    7c04:	091a0c02 	ldmdbeq	sl, {r1, sl, fp}
    7c08:	02dc0000 	sbcseq	r0, ip, #0
    7c0c:	000a2719 	andeq	r2, sl, r9, lsl r7
    7c10:	02b20900 	adcseq	r0, r2, #0, 18
    7c14:	00069b10 	andeq	r9, r6, r0, lsl fp
    7c18:	1902e000 	stmdbne	r2, {sp, lr, pc}
    7c1c:	0000086c 	andeq	r0, r0, ip, ror #16
    7c20:	0a02b409 	beq	b4c4c <__ccfg+0x94ca4>
    7c24:	00000926 	andeq	r0, r0, r6, lsr #18
    7c28:	110002ec 	smlattne	r0, ip, r2, r0
    7c2c:	0005f104 	andeq	pc, r5, r4, lsl #2
    7c30:	08010300 	stmdaeq	r1, {r8, r9}
    7c34:	00000991 	muleq	r0, r1, r9
    7c38:	0005f104 	andeq	pc, r5, r4, lsl #2
    7c3c:	78041100 	stmdavc	r4, {r8, ip}
    7c40:	15000004 	strne	r0, [r0, #-4]
    7c44:	0000a301 	andeq	sl, r0, r1, lsl #6
    7c48:	00062200 	andeq	r2, r6, r0, lsl #4
    7c4c:	04971600 	ldreq	r1, [r7], #1536	; 0x600
    7c50:	38160000 	ldmdacc	r6, {}	; <UNPREDICTABLE>
    7c54:	16000001 	strne	r0, [r0], -r1
    7c58:	00000622 	andeq	r0, r0, r2, lsr #12
    7c5c:	0000a316 	andeq	sl, r0, r6, lsl r3
    7c60:	04110000 	ldreq	r0, [r1], #-0
    7c64:	000005f8 	strdeq	r0, [r0], -r8
    7c68:	06030411 			; <UNDEFINED> instruction: 0x06030411
    7c6c:	01150000 	tsteq	r5, r0
    7c70:	000000ca 	andeq	r0, r0, sl, asr #1
    7c74:	0000064d 	andeq	r0, r0, sp, asr #12
    7c78:	00049716 	andeq	r9, r4, r6, lsl r7
    7c7c:	01381600 	teqeq	r8, r0, lsl #12
    7c80:	ca160000 	bgt	587c88 <__ccfg+0x567ce0>
    7c84:	16000000 	strne	r0, [r0], -r0
    7c88:	000000a3 	andeq	r0, r0, r3, lsr #1
    7c8c:	2e041100 	adfcss	f1, f4, f0
    7c90:	15000006 	strne	r0, [r0, #-6]
    7c94:	0000a301 	andeq	sl, r0, r1, lsl #6
    7c98:	00066800 	andeq	r6, r6, r0, lsl #16
    7c9c:	04971600 	ldreq	r1, [r7], #1536	; 0x600
    7ca0:	38160000 	ldmdacc	r6, {}	; <UNPREDICTABLE>
    7ca4:	00000001 	andeq	r0, r0, r1
    7ca8:	06530411 			; <UNDEFINED> instruction: 0x06530411
    7cac:	650a0000 	strvs	r0, [sl, #-0]
    7cb0:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
    7cb4:	0b000006 	bleq	7cd4 <__exidx_end+0x2c2c>
    7cb8:	000000aa 	andeq	r0, r0, sl, lsr #1
    7cbc:	650a0002 	strvs	r0, [sl, #-2]
    7cc0:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
    7cc4:	0b000006 	bleq	7ce4 <__exidx_end+0x2c3c>
    7cc8:	000000aa 	andeq	r0, r0, sl, lsr #1
    7ccc:	29070000 	stmdbcs	r7, {}	; <UNPREDICTABLE>
    7cd0:	09000004 	stmdbeq	r0, {r2}
    7cd4:	351a0124 	ldrcc	r0, [sl, #-292]	; 0xfffffedc
    7cd8:	1a000003 	bne	7cec <__exidx_end+0x2c44>
    7cdc:	00004458 	andeq	r4, r0, r8, asr r4
    7ce0:	0128090c 			; <UNDEFINED> instruction: 0x0128090c
    7ce4:	0006d408 	andeq	sp, r6, r8, lsl #8
    7ce8:	0b161800 	bleq	58dcf0 <__ccfg+0x56dd48>
    7cec:	2a090000 	bcs	247cf4 <__ccfg+0x227d4c>
    7cf0:	06d41101 	ldrbeq	r1, [r4], r1, lsl #2
    7cf4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    7cf8:	0000093b 	andeq	r0, r0, fp, lsr r9
    7cfc:	07012b09 	streq	r2, [r1, -r9, lsl #22]
    7d00:	000000a3 	andeq	r0, r0, r3, lsr #1
    7d04:	05ce1804 	strbeq	r1, [lr, #2052]	; 0x804
    7d08:	2c090000 	stccs	0, cr0, [r9], {-0}
    7d0c:	06da0b01 	ldrbeq	r0, [sl], r1, lsl #22
    7d10:	00080000 	andeq	r0, r8, r0
    7d14:	069b0411 			; <UNDEFINED> instruction: 0x069b0411
    7d18:	04110000 	ldreq	r0, [r1], #-0
    7d1c:	0000068e 	andeq	r0, r0, lr, lsl #13
    7d20:	0003a01a 	andeq	sl, r3, sl, lsl r0
    7d24:	44090e00 	strmi	r0, [r9], #-3584	; 0xfffff200
    7d28:	07190801 	ldreq	r0, [r9, -r1, lsl #16]
    7d2c:	5e180000 	cdppl	0, 1, cr0, cr8, cr0, {0}
    7d30:	09000012 	stmdbeq	r0, {r1, r4}
    7d34:	19120145 	ldmdbne	r2, {r0, r2, r6, r8}
    7d38:	00000007 	andeq	r0, r0, r7
    7d3c:	00067918 	andeq	r7, r6, r8, lsl r9
    7d40:	01460900 	cmpeq	r6, r0, lsl #18
    7d44:	00071912 	andeq	r1, r7, r2, lsl r9
    7d48:	03180600 	tsteq	r8, #0, 12
    7d4c:	09000011 	stmdbeq	r0, {r0, r4}
    7d50:	78120147 	ldmdavc	r2, {r0, r1, r2, r6, r8}
    7d54:	0c000000 	stceq	0, cr0, [r0], {-0}
    7d58:	00780a00 	rsbseq	r0, r8, r0, lsl #20
    7d5c:	07290000 	streq	r0, [r9, -r0]!
    7d60:	aa0b0000 	bge	2c7d68 <__ccfg+0x2a7dc0>
    7d64:	02000000 	andeq	r0, r0, #0
    7d68:	09d01b00 	ldmibeq	r0, {r8, r9, fp, ip}^
    7d6c:	3e070285 	cdpcc	2, 0, cr0, cr7, cr5, {4}
    7d70:	18000008 	stmdane	r0, {r3}
    7d74:	00000ad3 	ldrdeq	r0, [r0], -r3
    7d78:	18028709 	stmdane	r2, {r0, r3, r8, r9, sl, pc}
    7d7c:	000000aa 	andeq	r0, r0, sl, lsr #1
    7d80:	0a2f1800 	beq	bcdd88 <__ccfg+0xbadde0>
    7d84:	88090000 	stmdahi	r9, {}	; <UNPREDICTABLE>
    7d88:	05eb1202 	strbeq	r1, [fp, #514]!	; 0x202
    7d8c:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
    7d90:	000003e1 	andeq	r0, r0, r1, ror #7
    7d94:	10028909 	andne	r8, r2, r9, lsl #18
    7d98:	0000083e 	andeq	r0, r0, lr, lsr r8
    7d9c:	08bd1808 	popeq	{r3, fp, ip}
    7da0:	8a090000 	bhi	247da8 <__ccfg+0x227e00>
    7da4:	01ce1702 	biceq	r1, lr, r2, lsl #14
    7da8:	18240000 	stmdane	r4!, {}	; <UNPREDICTABLE>
    7dac:	00000623 	andeq	r0, r0, r3, lsr #12
    7db0:	0f028b09 	svceq	0x00028b09
    7db4:	000000a3 	andeq	r0, r0, r3, lsr #1
    7db8:	0b111848 	bleq	44dee0 <__ccfg+0x42df38>
    7dbc:	8c090000 	stchi	0, cr0, [r9], {-0}
    7dc0:	009c2c02 	addseq	r2, ip, r2, lsl #24
    7dc4:	18500000 	ldmdane	r0, {}^	; <UNPREDICTABLE>
    7dc8:	00000085 	andeq	r0, r0, r5, lsl #1
    7dcc:	1a028d09 	bne	ab1f8 <__ccfg+0x8b250>
    7dd0:	000006e0 	andeq	r0, r0, r0, ror #13
    7dd4:	052b1858 	streq	r1, [fp, #-2136]!	; 0xfffff7a8
    7dd8:	8e090000 	cdphi	0, 0, cr0, cr9, cr0, {0}
    7ddc:	012c1602 			; <UNDEFINED> instruction: 0x012c1602
    7de0:	18680000 	stmdane	r8!, {}^	; <UNPREDICTABLE>
    7de4:	00000a3c 	andeq	r0, r0, ip, lsr sl
    7de8:	16028f09 	strne	r8, [r2], -r9, lsl #30
    7dec:	0000012c 	andeq	r0, r0, ip, lsr #2
    7df0:	006f1870 	rsbeq	r1, pc, r0, ror r8	; <UNPREDICTABLE>
    7df4:	90090000 	andls	r0, r9, r0
    7df8:	012c1602 			; <UNDEFINED> instruction: 0x012c1602
    7dfc:	18780000 	ldmdane	r8!, {}^	; <UNPREDICTABLE>
    7e00:	000008f9 	strdeq	r0, [r0], -r9
    7e04:	10029109 	andne	r9, r2, r9, lsl #2
    7e08:	0000084e 	andeq	r0, r0, lr, asr #16
    7e0c:	03be1880 			; <UNDEFINED> instruction: 0x03be1880
    7e10:	92090000 	andls	r0, r9, #0
    7e14:	085e1002 	ldmdaeq	lr, {r1, ip}^
    7e18:	18880000 	stmne	r8, {}	; <UNPREDICTABLE>
    7e1c:	000009bd 			; <UNDEFINED> instruction: 0x000009bd
    7e20:	0f029309 	svceq	0x00029309
    7e24:	000000a3 	andeq	r0, r0, r3, lsr #1
    7e28:	026118a0 	rsbeq	r1, r1, #160, 16	; 0xa00000
    7e2c:	94090000 	strls	r0, [r9], #-0
    7e30:	012c1602 			; <UNDEFINED> instruction: 0x012c1602
    7e34:	18a40000 	stmiane	r4!, {}	; <UNPREDICTABLE>
    7e38:	00000560 	andeq	r0, r0, r0, ror #10
    7e3c:	16029509 	strne	r9, [r2], -r9, lsl #10
    7e40:	0000012c 	andeq	r0, r0, ip, lsr #2
    7e44:	04a318ac 	strteq	r1, [r3], #2220	; 0x8ac
    7e48:	96090000 	strls	r0, [r9], -r0
    7e4c:	012c1602 			; <UNDEFINED> instruction: 0x012c1602
    7e50:	18b40000 	ldmne	r4!, {}	; <UNPREDICTABLE>
    7e54:	000006b0 			; <UNDEFINED> instruction: 0x000006b0
    7e58:	16029709 	strne	r9, [r2], -r9, lsl #14
    7e5c:	0000012c 	andeq	r0, r0, ip, lsr #2
    7e60:	051a18bc 	ldreq	r1, [sl, #-2236]	; 0xfffff744
    7e64:	98090000 	stmdals	r9, {}	; <UNPREDICTABLE>
    7e68:	012c1602 			; <UNDEFINED> instruction: 0x012c1602
    7e6c:	18c40000 	stmiane	r4, {}^	; <UNPREDICTABLE>
    7e70:	00000782 	andeq	r0, r0, r2, lsl #15
    7e74:	08029909 	stmdaeq	r2, {r0, r3, r8, fp, ip, pc}
    7e78:	000000a3 	andeq	r0, r0, r3, lsr #1
    7e7c:	f10a00cc 	cpsie	if,#12
    7e80:	4e000005 	cdpmi	0, 0, cr0, cr0, cr5, {0}
    7e84:	0b000008 	bleq	7eac <__exidx_end+0x2e04>
    7e88:	000000aa 	andeq	r0, r0, sl, lsr #1
    7e8c:	f10a0019 	cpsie	,#25
    7e90:	5e000005 	cdppl	0, 0, cr0, cr0, cr5, {0}
    7e94:	0b000008 	bleq	7ebc <__exidx_end+0x2e14>
    7e98:	000000aa 	andeq	r0, r0, sl, lsr #1
    7e9c:	f10a0007 	cpsie	,#7
    7ea0:	6e000005 	cdpvs	0, 0, cr0, cr0, cr5, {0}
    7ea4:	0b000008 	bleq	7ecc <__exidx_end+0x2e24>
    7ea8:	000000aa 	andeq	r0, r0, sl, lsr #1
    7eac:	f01b0017 			; <UNDEFINED> instruction: 0xf01b0017
    7eb0:	07029e09 	streq	r9, [r2, -r9, lsl #28]
    7eb4:	00000895 	muleq	r0, r5, r8
    7eb8:	00039918 	andeq	r9, r3, r8, lsl r9
    7ebc:	02a10900 	adceq	r0, r1, #0, 18
    7ec0:	0008951b 	andeq	r9, r8, fp, lsl r5
    7ec4:	35180000 	ldrcc	r0, [r8, #-0]
    7ec8:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    7ecc:	a51802a2 	ldrge	r0, [r8, #-674]	; 0xfffffd5e
    7ed0:	78000008 	stmdavc	r0, {r3}
    7ed4:	032f0a00 			; <UNDEFINED> instruction: 0x032f0a00
    7ed8:	08a50000 	stmiaeq	r5!, {}	; <UNPREDICTABLE>
    7edc:	aa0b0000 	bge	2c7ee4 <__ccfg+0x2a7f3c>
    7ee0:	1d000000 	stcne	0, cr0, [r0, #-0]
    7ee4:	00aa0a00 	adceq	r0, sl, r0, lsl #20
    7ee8:	08b50000 	ldmeq	r5!, {}	; <UNPREDICTABLE>
    7eec:	aa0b0000 	bge	2c7ef4 <__ccfg+0x2a7f4c>
    7ef0:	1d000000 	stcne	0, cr0, [r0, #-0]
    7ef4:	09f01c00 	ldmibeq	r0!, {sl, fp, ip}^
    7ef8:	da030283 	ble	c890c <__ccfg+0xa8964>
    7efc:	1d000008 	stcne	0, cr0, [r0, #-32]	; 0xffffffe0
    7f00:	00004442 	andeq	r4, r0, r2, asr #8
    7f04:	0b029a09 	bleq	ae730 <__ccfg+0x8e788>
    7f08:	00000729 	andeq	r0, r0, r9, lsr #14
    7f0c:	0008d71d 	andeq	sp, r8, sp, lsl r7
    7f10:	02a30900 	adceq	r0, r3, #0, 18
    7f14:	00086e0b 	andeq	r6, r8, fp, lsl #28
    7f18:	f10a0000 	cpsie	,#0
    7f1c:	ea000005 	b	7f38 <__exidx_end+0x2e90>
    7f20:	0b000008 	bleq	7f48 <__exidx_end+0x2ea0>
    7f24:	000000aa 	andeq	r0, r0, sl, lsr #1
    7f28:	1c1e0018 	ldcne	0, cr0, [lr], {24}
    7f2c:	0100000b 	tsteq	r0, fp
    7f30:	08ea0411 	stmiaeq	sl!, {r0, r4, sl}^
    7f34:	011f0000 	tsteq	pc, r0
    7f38:	00000902 	andeq	r0, r0, r2, lsl #18
    7f3c:	00049716 	andeq	r9, r4, r6, lsl r7
    7f40:	04110000 	ldreq	r0, [r1], #-0
    7f44:	000008f6 	strdeq	r0, [r0], -r6
    7f48:	01b80411 			; <UNDEFINED> instruction: 0x01b80411
    7f4c:	011f0000 	tsteq	pc, r0
    7f50:	0000091a 	andeq	r0, r0, sl, lsl r9
    7f54:	0000a316 	andeq	sl, r0, r6, lsl r3
    7f58:	04110000 	ldreq	r0, [r1], #-0
    7f5c:	00000920 	andeq	r0, r0, r0, lsr #18
    7f60:	090e0411 	stmdbeq	lr, {r0, r4, sl}
    7f64:	8e0a0000 	cdphi	0, 0, cr0, cr10, cr0, {0}
    7f68:	36000006 	strcc	r0, [r0], -r6
    7f6c:	0b000009 	bleq	7f98 <__exidx_end+0x2ef0>
    7f70:	000000aa 	andeq	r0, r0, sl, lsr #1
    7f74:	99200002 	stmdbls	r0!, {r1}
    7f78:	09000008 	stmdbeq	r0, {r3}
    7f7c:	97170333 			; <UNDEFINED> instruction: 0x97170333
    7f80:	01000004 	tsteq	r0, r4
    7f84:	08922001 	ldmeq	r2, {r0, sp}
    7f88:	34090000 	strcc	r0, [r9], #-0
    7f8c:	049d1d03 	ldreq	r1, [sp], #3331	; 0xd03
    7f90:	01010000 	mrseq	r0, (UNDEF: 1)
    7f94:	00208602 	eoreq	r8, r0, r2, lsl #12
    7f98:	123b0b00 	eorsne	r0, fp, #0, 22
    7f9c:	0000007f 	andeq	r0, r0, pc, ror r0
    7fa0:	400b080c 	andmi	r0, fp, ip, lsl #16
    7fa4:	00098409 	andeq	r8, r9, r9, lsl #8
    7fa8:	1b9d0d00 	blne	fe74b3b0 <_estack+0xde7463b0>
    7fac:	410b0000 	mrsmi	r0, (UNDEF: 11)
    7fb0:	0009840d 	andeq	r8, r9, sp, lsl #8
    7fb4:	cd0d0000 	stcgt	0, cr0, [sp, #-0]
    7fb8:	0b00001d 	bleq	8034 <__exidx_end+0x2f8c>
    7fbc:	09840d42 	stmibeq	r4, {r1, r6, r8, sl, fp}
    7fc0:	00040000 	andeq	r0, r4, r0
    7fc4:	00590411 	subseq	r0, r9, r1, lsl r4
    7fc8:	d9020000 	stmdble	r2, {}	; <UNPREDICTABLE>
    7fcc:	0b000022 	bleq	805c <__exidx_end+0x2fb4>
    7fd0:	09600343 	stmdbeq	r0!, {r0, r1, r6, r8, r9}^
    7fd4:	4e020000 	cdpmi	0, 0, cr0, cr2, cr0, {0}
    7fd8:	0c00001e 	stceq	0, cr0, [r0], {30}
    7fdc:	09a22b3c 	stmibeq	r2!, {r2, r3, r4, r5, r8, r9, fp, sp}
    7fe0:	ec0f0000 	stc	0, cr0, [pc], {-0}
    7fe4:	10000020 	andne	r0, r0, r0, lsr #32
    7fe8:	fe156f0c 	cdp2	15, 1, cr6, cr5, cr12, {0}
    7fec:	0d000009 	stceq	0, cr0, [r0, #-36]	; 0xffffffdc
    7ff0:	00001acc 	andeq	r1, r0, ip, asr #21
    7ff4:	6c0d700c 	stcvs	0, cr7, [sp], {12}
    7ff8:	00000000 	andeq	r0, r0, r0
    7ffc:	0005d40d 	andeq	sp, r5, sp, lsl #8
    8000:	0d710c00 	ldcleq	12, cr0, [r1, #-0]
    8004:	0000006c 	andeq	r0, r0, ip, rrx
    8008:	1e2c0d02 	cdpne	13, 2, cr0, cr12, cr2, {0}
    800c:	740c0000 	strvc	r0, [ip], #-0
    8010:	000bc013 	andeq	ip, fp, r3, lsl r0
    8014:	c40d0400 	strgt	r0, [sp], #-1024	; 0xfffffc00
    8018:	0c00001b 	stceq	0, cr0, [r0], {27}
    801c:	09540c75 	ldmdbeq	r4, {r0, r2, r4, r5, r6, sl, fp}^
    8020:	0d080000 	stceq	0, cr0, [r8, #-0]
    8024:	00001e5c 	andeq	r1, r0, ip, asr lr
    8028:	4c067d0c 	stcmi	13, cr7, [r6], {12}
    802c:	0c00000b 	stceq	0, cr0, [r0], {11}
    8030:	001da60d 	andseq	sl, sp, sp, lsl #12
    8034:	06810c00 	streq	r0, [r1], r0, lsl #24
    8038:	00000b96 	muleq	r0, r6, fp
    803c:	3802000d 	stmdacc	r2, {r0, r2, r3}
    8040:	0c00001c 	stceq	0, cr0, [r0], {28}
    8044:	0a0a2a3f 	beq	292948 <__ccfg+0x2729a0>
    8048:	2b0f0000 	blcs	3c8050 <__ccfg+0x3a80a8>
    804c:	1800001c 	stmdane	r0, {r2, r3, r4}
    8050:	c115e00c 	tstgt	r5, ip
    8054:	0d00000a 	stceq	0, cr0, [r0, #-40]	; 0xffffffd8
    8058:	00001acc 	andeq	r1, r0, ip, asr #21
    805c:	6c0de10c 	stfvsd	f6, [sp], {12}
    8060:	00000000 	andeq	r0, r0, r0
    8064:	0005d40d 	andeq	sp, r5, sp, lsl #8
    8068:	0de20c00 	stcleq	12, cr0, [r2]
    806c:	0000006c 	andeq	r0, r0, ip, rrx
    8070:	1e2c0d02 	cdpne	13, 2, cr0, cr12, cr2, {0}
    8074:	e50c0000 	str	r0, [ip, #-0]
    8078:	000bc013 	andeq	ip, fp, r3, lsl r0
    807c:	c40d0400 	strgt	r0, [sp], #-1024	; 0xfffffc00
    8080:	0c00001b 	stceq	0, cr0, [r0], {27}
    8084:	09540ce6 	ldmdbeq	r4, {r1, r2, r5, r6, r7, sl, fp}^
    8088:	0d080000 	stceq	0, cr0, [r8, #-0]
    808c:	00001e5c 	andeq	r1, r0, ip, asr lr
    8090:	cc06ee0c 	stcgt	14, cr14, [r6], {12}
    8094:	0c00000b 	stceq	0, cr0, [r0], {11}
    8098:	001da60d 	andseq	sl, sp, sp, lsl #12
    809c:	06f20c00 	ldrbteq	r0, [r2], r0, lsl #24
    80a0:	00000c16 	andeq	r0, r0, r6, lsl ip
    80a4:	21ff0d0d 	mvnscs	r0, sp, lsl #26
    80a8:	f30c0000 	vhadd.u8	d0, d12, d0
    80ac:	00006c0d 	andeq	r6, r0, sp, lsl #24
    80b0:	4f0d0e00 	svcmi	0x000d0e00
    80b4:	0c00001f 	stceq	0, cr0, [r0], {31}
    80b8:	006c0df4 	strdeq	r0, [ip], #-212	; 0xffffff2c	; <UNPREDICTABLE>
    80bc:	0d100000 	ldceq	0, cr0, [r0, #-0]
    80c0:	00001c6b 	andeq	r1, r0, fp, ror #24
    80c4:	4006fa0c 	andmi	pc, r6, ip, lsl #20
    80c8:	1200000c 	andne	r0, r0, #12
    80cc:	001e0c0d 	andseq	r0, lr, sp, lsl #24
    80d0:	0cfb0c00 	ldcleq	12, cr0, [fp]
    80d4:	00000059 	andeq	r0, r0, r9, asr r0
    80d8:	215b0d13 	cmpcs	fp, r3, lsl sp
    80dc:	fc0c0000 	stc2	0, cr0, [ip], {-0}
    80e0:	0000590c 	andeq	r5, r0, ip, lsl #18
    80e4:	640d1400 	strvs	r1, [sp], #-1024	; 0xfffffc00
    80e8:	0c000021 	stceq	0, cr0, [r0], {33}	; 0x21
    80ec:	00590cfd 	ldrsheq	r0, [r9], #-205	; 0xffffff33
    80f0:	0d150000 	ldceq	0, cr0, [r5, #-0]
    80f4:	0000216d 	andeq	r2, r0, sp, ror #2
    80f8:	6c0dfe0c 	stcvs	14, cr15, [sp], {12}
    80fc:	16000000 	strne	r0, [r0], -r0
    8100:	227a0200 	rsbscs	r0, sl, #0, 4
    8104:	440c0000 	strmi	r0, [ip], #-0
    8108:	000acd36 	andeq	ip, sl, r6, lsr sp
    810c:	22611a00 	rsbcs	r1, r1, #0, 20
    8110:	0c140000 	ldceq	0, cr0, [r4], {-0}
    8114:	4c15019f 	ldfmis	f0, [r5], {159}	; 0x9f
    8118:	1800000b 	stmdane	r0, {r0, r1, r3}
    811c:	00001acc 	andeq	r1, r0, ip, asr #21
    8120:	0d01a00c 	stceq	0, cr10, [r1, #-48]	; 0xffffffd0
    8124:	0000006c 	andeq	r0, r0, ip, rrx
    8128:	05d41800 	ldrbeq	r1, [r4, #2048]	; 0x800
    812c:	a10c0000 	mrsge	r0, (UNDEF: 12)
    8130:	006c0d01 	rsbeq	r0, ip, r1, lsl #26
    8134:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
    8138:	00001e2c 	andeq	r1, r0, ip, lsr #28
    813c:	1301a40c 	movwne	sl, #5132	; 0x140c
    8140:	00000bc0 	andeq	r0, r0, r0, asr #23
    8144:	1bc41804 	blne	ff10e15c <_estack+0xdf10915c>
    8148:	a50c0000 	strge	r0, [ip, #-0]
    814c:	09540c01 	ldmdbeq	r4, {r0, sl, fp}^
    8150:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    8154:	00001e5c 	andeq	r1, r0, ip, asr lr
    8158:	0601ad0c 	streq	sl, [r1], -ip, lsl #26
    815c:	00000c6a 	andeq	r0, r0, sl, ror #24
    8160:	1da6180c 	stcne	8, cr1, [r6, #48]!	; 0x30
    8164:	b10c0000 	mrslt	r0, (UNDEF: 12)
    8168:	0cb90601 	ldceq	6, cr0, [r9], #4
    816c:	180d0000 	stmdane	sp, {}	; <UNPREDICTABLE>
    8170:	00001e0c 	andeq	r1, r0, ip, lsl #28
    8174:	0d01b20c 	sfmeq	f3, 1, [r1, #-48]	; 0xffffffd0
    8178:	0000006c 	andeq	r0, r0, ip, rrx
    817c:	1cfa180e 	ldclne	8, cr1, [sl], #56	; 0x38
    8180:	b30c0000 	movwlt	r0, #49152	; 0xc000
    8184:	09540c01 	ldmdbeq	r4, {r0, sl, fp}^
    8188:	00100000 	andseq	r0, r0, r0
    818c:	760c010c 	strvc	r0, [ip], -ip, lsl #2
    8190:	000b9604 	andeq	r9, fp, r4, lsl #12
    8194:	231f2100 	tstcs	pc, #0, 2
    8198:	770c0000 	strvc	r0, [ip, -r0]
    819c:	0000590f 	andeq	r5, r0, pc, lsl #18
    81a0:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    81a4:	1cad2100 	stfnes	f2, [sp]
    81a8:	780c0000 	stmdavc	ip, {}	; <UNPREDICTABLE>
    81ac:	0000590f 	andeq	r5, r0, pc, lsl #18
    81b0:	03010100 	movweq	r0, #4352	; 0x1100
    81b4:	1d6d2100 	stfnee	f2, [sp, #-0]
    81b8:	7a0c0000 	bvc	3081c0 <__ccfg+0x2e8218>
    81bc:	0000590f 	andeq	r5, r0, pc, lsl #18
    81c0:	01020100 	mrseq	r0, (UNDEF: 18)
    81c4:	1b3b2100 	blne	ed05cc <__ccfg+0xeb0624>
    81c8:	7b0c0000 	blvc	3081d0 <__ccfg+0x2e8228>
    81cc:	0000590f 	andeq	r5, r0, pc, lsl #18
    81d0:	00010100 	andeq	r0, r1, r0, lsl #2
    81d4:	010c0000 	mrseq	r0, (UNDEF: 12)
    81d8:	c0047e0c 	andgt	r7, r4, ip, lsl #28
    81dc:	2100000b 	tstcs	r0, fp
    81e0:	00002189 	andeq	r2, r0, r9, lsl #3
    81e4:	590f7f0c 	stmdbpl	pc, {r2, r3, r8, r9, sl, fp, ip, sp, lr}	; <UNPREDICTABLE>
    81e8:	01000000 	mrseq	r0, (UNDEF: 0)
    81ec:	21000404 	tstcs	r0, r4, lsl #8
    81f0:	000022e5 	andeq	r2, r0, r5, ror #5
    81f4:	590f800c 	stmdbpl	pc, {r2, r3, pc}	; <UNPREDICTABLE>
    81f8:	01000000 	mrseq	r0, (UNDEF: 0)
    81fc:	00000004 	andeq	r0, r0, r4
    8200:	09960411 	ldmibeq	r6, {r0, r4, sl}
    8204:	04110000 	ldreq	r0, [r1], #-0
    8208:	0000007f 	andeq	r0, r0, pc, ror r0
    820c:	e70c010c 	str	r0, [ip, -ip, lsl #2]
    8210:	000c1604 	andeq	r1, ip, r4, lsl #12
    8214:	231f2100 	tstcs	pc, #0, 2
    8218:	e80c0000 	stmda	ip, {}	; <UNPREDICTABLE>
    821c:	0000590f 	andeq	r5, r0, pc, lsl #18
    8220:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    8224:	1cad2100 	stfnes	f2, [sp]
    8228:	e90c0000 	stmdb	ip, {}	; <UNPREDICTABLE>
    822c:	0000590f 	andeq	r5, r0, pc, lsl #18
    8230:	03010100 	movweq	r0, #4352	; 0x1100
    8234:	1d6d2100 	stfnee	f2, [sp, #-0]
    8238:	eb0c0000 	bl	308240 <__ccfg+0x2e8298>
    823c:	0000590f 	andeq	r5, r0, pc, lsl #18
    8240:	01020100 	mrseq	r0, (UNDEF: 18)
    8244:	1b3b2100 	blne	ed064c <__ccfg+0xeb06a4>
    8248:	ec0c0000 	stc	0, cr0, [ip], {-0}
    824c:	0000590f 	andeq	r5, r0, pc, lsl #18
    8250:	00010100 	andeq	r0, r1, r0, lsl #2
    8254:	010c0000 	mrseq	r0, (UNDEF: 12)
    8258:	4004ef0c 	andmi	lr, r4, ip, lsl #30
    825c:	2100000c 	tstcs	r0, ip
    8260:	00002189 	andeq	r2, r0, r9, lsl #3
    8264:	590ff00c 	stmdbpl	pc, {r2, r3, ip, sp, lr, pc}	; <UNPREDICTABLE>
    8268:	01000000 	mrseq	r0, (UNDEF: 0)
    826c:	21000404 	tstcs	r0, r4, lsl #8
    8270:	000022e5 	andeq	r2, r0, r5, ror #5
    8274:	590ff10c 	stmdbpl	pc, {r2, r3, r8, ip, sp, lr, pc}	; <UNPREDICTABLE>
    8278:	01000000 	mrseq	r0, (UNDEF: 0)
    827c:	00000004 	andeq	r0, r0, r4
    8280:	f50c010c 			; <UNDEFINED> instruction: 0xf50c010c
    8284:	000c6a04 	andeq	r6, ip, r4, lsl #20
    8288:	1c972100 	ldfnes	f2, [r7], {0}
    828c:	f60c0000 			; <UNDEFINED> instruction: 0xf60c0000
    8290:	0000590f 	andeq	r5, r0, pc, lsl #18
    8294:	07010100 	streq	r0, [r1, -r0, lsl #2]
    8298:	23082100 	movwcs	r2, #33024	; 0x8100
    829c:	f80c0000 			; <UNDEFINED> instruction: 0xf80c0000
    82a0:	0000590f 	andeq	r5, r0, pc, lsl #18
    82a4:	01060100 	mrseq	r0, (UNDEF: 22)
    82a8:	011b0000 	tsteq	fp, r0
    82ac:	0401a60c 	streq	sl, [r1], #-1548	; 0xfffff9f4
    82b0:	00000cb9 			; <UNDEFINED> instruction: 0x00000cb9
    82b4:	00231f22 	eoreq	r1, r3, r2, lsr #30
    82b8:	01a70c00 			; <UNDEFINED> instruction: 0x01a70c00
    82bc:	0000590f 	andeq	r5, r0, pc, lsl #18
    82c0:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    82c4:	1cad2200 	sfmne	f2, 4, [sp]
    82c8:	a80c0000 	stmdage	ip, {}	; <UNPREDICTABLE>
    82cc:	00590f01 	subseq	r0, r9, r1, lsl #30
    82d0:	01010000 	mrseq	r0, (UNDEF: 1)
    82d4:	6d220003 	stcvs	0, cr0, [r2, #-12]!
    82d8:	0c00001d 	stceq	0, cr0, [r0], {29}
    82dc:	590f01aa 	stmdbpl	pc, {r1, r3, r5, r7, r8}	; <UNPREDICTABLE>
    82e0:	01000000 	mrseq	r0, (UNDEF: 0)
    82e4:	22000102 	andcs	r0, r0, #-2147483648	; 0x80000000
    82e8:	00001b3b 	andeq	r1, r0, fp, lsr fp
    82ec:	0f01ab0c 	svceq	0x0001ab0c
    82f0:	00000059 	andeq	r0, r0, r9, asr r0
    82f4:	00000101 	andeq	r0, r0, r1, lsl #2
    82f8:	0c011b00 			; <UNDEFINED> instruction: 0x0c011b00
    82fc:	e60401ae 	str	r0, [r4], -lr, lsr #3
    8300:	2200000c 	andcs	r0, r0, #12
    8304:	00002189 	andeq	r2, r0, r9, lsl #3
    8308:	0f01af0c 	svceq	0x0001af0c
    830c:	00000059 	andeq	r0, r0, r9, asr r0
    8310:	00040401 	andeq	r0, r4, r1, lsl #8
    8314:	0022e522 	eoreq	lr, r2, r2, lsr #10
    8318:	01b00c00 	lslseq	r0, r0, #24
    831c:	0000590f 	andeq	r5, r0, pc, lsl #18
    8320:	00040100 	andeq	r0, r4, r0, lsl #2
    8324:	04110000 	ldreq	r0, [r1], #-0
    8328:	0000098a 	andeq	r0, r0, sl, lsl #19
    832c:	0021d402 	eoreq	sp, r1, r2, lsl #8
    8330:	2f3d0d00 	svccs	0x003d0d00
    8334:	00000cf8 	strdeq	r0, [r0], -r8
    8338:	0021e60f 	eoreq	lr, r1, pc, lsl #12
    833c:	780d1800 	stmdavc	sp, {fp, ip}
    8340:	000d8815 	andeq	r8, sp, r5, lsl r8
    8344:	1acc0d00 	bne	ff30b74c <_estack+0xdf30674c>
    8348:	790d0000 	stmdbvc	sp, {}	; <UNPREDICTABLE>
    834c:	00006c0d 	andeq	r6, r0, sp, lsl #24
    8350:	d40d0000 	strle	r0, [sp], #-0
    8354:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
    8358:	006c0d7a 	rsbeq	r0, ip, sl, ror sp
    835c:	0d020000 	stceq	0, cr0, [r2, #-0]
    8360:	00001e2c 	andeq	r1, r0, ip, lsr #28
    8364:	c0137d0d 	andsgt	r7, r3, sp, lsl #26
    8368:	0400000b 	streq	r0, [r0], #-11
    836c:	001bc40d 	andseq	ip, fp, sp, lsl #8
    8370:	0c7e0d00 	ldcleq	13, cr0, [lr], #-0
    8374:	00000954 	andeq	r0, r0, r4, asr r9
    8378:	1e5c0d08 	cdpne	13, 5, cr0, cr12, cr8, {0}
    837c:	860d0000 	strhi	r0, [sp], -r0
    8380:	0010f306 	andseq	pc, r0, r6, lsl #6
    8384:	a60d0c00 	strge	r0, [sp], -r0, lsl #24
    8388:	0d00001d 	stceq	0, cr0, [r0, #-116]	; 0xffffff8c
    838c:	113d068a 	teqne	sp, sl, lsl #13
    8390:	0d0d0000 	stceq	0, cr0, [sp, #-0]
    8394:	00001c09 	andeq	r1, r0, r9, lsl #24
    8398:	6706930d 	strvs	r9, [r6, -sp, lsl #6]
    839c:	0e000011 	mcreq	0, 0, r0, cr0, cr1, {0}
    83a0:	0021820d 	eoreq	r8, r1, sp, lsl #4
    83a4:	0c940d00 	ldceq	13, cr0, [r4], {0}
    83a8:	00000059 	andeq	r0, r0, r9, asr r0
    83ac:	1ea80d0f 	cdpne	13, 10, cr0, cr8, cr15, {0}
    83b0:	950d0000 	strls	r0, [sp, #-0]
    83b4:	00007f0d 	andeq	r7, r0, sp, lsl #30
    83b8:	f90d1000 			; <UNDEFINED> instruction: 0xf90d1000
    83bc:	0d00001a 	stceq	0, cr0, [r0, #-104]	; 0xffffff98
    83c0:	09840d96 	stmibeq	r4, {r1, r2, r4, r7, r8, sl, fp}
    83c4:	00140000 	andseq	r0, r4, r0
    83c8:	00203802 	eoreq	r3, r0, r2, lsl #16
    83cc:	2f3e0d00 	svccs	0x003e0d00
    83d0:	00000d94 	muleq	r0, r4, sp
    83d4:	001d310f 	andseq	r3, sp, pc, lsl #2
    83d8:	9f0d2400 	svcls	0x000d2400
    83dc:	000e7215 	andeq	r7, lr, r5, lsl r2
    83e0:	1acc0d00 	bne	ff30b7e8 <_estack+0xdf3067e8>
    83e4:	a00d0000 	andge	r0, sp, r0
    83e8:	00006c0d 	andeq	r6, r0, sp, lsl #24
    83ec:	d40d0000 	strle	r0, [sp], #-0
    83f0:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
    83f4:	006c0da1 	rsbeq	r0, ip, r1, lsr #27
    83f8:	0d020000 	stceq	0, cr0, [r2, #-0]
    83fc:	00001e2c 	andeq	r1, r0, ip, lsr #28
    8400:	c013a40d 	andsgt	sl, r3, sp, lsl #8
    8404:	0400000b 	streq	r0, [r0], #-11
    8408:	001bc40d 	andseq	ip, fp, sp, lsl #8
    840c:	0ca50d00 	stceq	13, cr0, [r5]
    8410:	00000954 	andeq	r0, r0, r4, asr r9
    8414:	1e5c0d08 	cdpne	13, 5, cr0, cr12, cr8, {0}
    8418:	ad0d0000 	stcge	0, cr0, [sp, #-0]
    841c:	0011a106 	andseq	sl, r1, r6, lsl #2
    8420:	a60d0c00 	strge	r0, [sp], -r0, lsl #24
    8424:	0d00001d 	stceq	0, cr0, [r0, #-116]	; 0xffffff8c
    8428:	11eb06b1 	strhne	r0, [fp, #97]!	; 0x61
    842c:	0d0d0000 	stceq	0, cr0, [sp, #-0]
    8430:	00001c09 	andeq	r1, r0, r9, lsl #24
    8434:	1506c30d 	strne	ip, [r6, #-781]	; 0xfffffcf3
    8438:	0e000012 	mcreq	0, 0, r0, cr0, cr2, {0}
    843c:	001f960d 	andseq	r9, pc, sp, lsl #12
    8440:	06cd0d00 	strbeq	r0, [sp], r0, lsl #26
    8444:	0000129f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    8448:	1ea80d0f 	cdpne	13, 10, cr0, cr8, cr15, {0}
    844c:	ce0d0000 	cdpgt	0, 0, cr0, cr13, cr0, {0}
    8450:	00007f0d 	andeq	r7, r0, sp, lsl #30
    8454:	e50d1000 	str	r1, [sp, #-0]
    8458:	0d00001c 	stceq	0, cr0, [r0, #-112]	; 0xffffff90
    845c:	00590ccf 	subseq	r0, r9, pc, asr #25
    8460:	0d140000 	ldceq	0, cr0, [r4, #-0]
    8464:	00001fe8 	andeq	r1, r0, r8, ror #31
    8468:	590cd10d 	stmdbpl	ip, {r0, r2, r3, r8, ip, lr, pc}
    846c:	15000000 	strne	r0, [r0, #-0]
    8470:	001ff10d 	andseq	pc, pc, sp, lsl #2
    8474:	0cd20d00 	ldcleq	13, cr0, [r2], {0}
    8478:	00000059 	andeq	r0, r0, r9, asr r0
    847c:	1d430d16 	stclne	13, cr0, [r3, #-88]	; 0xffffffa8
    8480:	db0d0000 	blle	348488 <__ccfg+0x3284e0>
    8484:	00131906 	andseq	r1, r3, r6, lsl #18
    8488:	390d1700 	stmdbcc	sp, {r8, r9, sl, ip}
    848c:	0d000022 	stceq	0, cr0, [r0, #-136]	; 0xffffff78
    8490:	09540cdc 	ldmdbeq	r4, {r2, r3, r4, r6, r7, sl, fp}^
    8494:	0d180000 	ldceq	0, cr0, [r8, #-0]
    8498:	00001d77 	andeq	r1, r0, r7, ror sp
    849c:	e611dd0d 	ldr	sp, [r1], -sp, lsl #26
    84a0:	1c00000c 	stcne	0, cr0, [r0], {12}
    84a4:	001b5e0d 	andseq	r5, fp, sp, lsl #28
    84a8:	0dde0d00 	ldcleq	13, cr0, [lr]
    84ac:	00000984 	andeq	r0, r0, r4, lsl #19
    84b0:	4e020020 	cdpmi	0, 0, cr0, cr2, cr0, {1}
    84b4:	0d00001d 	stceq	0, cr0, [r0, #-116]	; 0xffffff8c
    84b8:	0e7e2f41 	cdpeq	15, 7, cr2, cr14, cr1, {2}
    84bc:	291a0000 	ldmdbcs	sl, {}	; <UNPREDICTABLE>
    84c0:	1c00001b 	stcne	0, cr0, [r0], {27}
    84c4:	15017d0d 	strne	r7, [r1, #-3341]	; 0xfffff2f3
    84c8:	00000f6d 	andeq	r0, r0, sp, ror #30
    84cc:	001acc18 	andseq	ip, sl, r8, lsl ip
    84d0:	017e0d00 	cmneq	lr, r0, lsl #26
    84d4:	00006c0d 	andeq	r6, r0, sp, lsl #24
    84d8:	d4180000 	ldrle	r0, [r8], #-0
    84dc:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
    84e0:	6c0d017f 	stfvss	f0, [sp], {127}	; 0x7f
    84e4:	02000000 	andeq	r0, r0, #0
    84e8:	001e2c18 	andseq	r2, lr, r8, lsl ip
    84ec:	01820d00 	orreq	r0, r2, r0, lsl #26
    84f0:	000bc013 	andeq	ip, fp, r3, lsl r0
    84f4:	c4180400 	ldrgt	r0, [r8], #-1024	; 0xfffffc00
    84f8:	0d00001b 	stceq	0, cr0, [r0, #-108]	; 0xffffff94
    84fc:	540c0183 	strpl	r0, [ip], #-387	; 0xfffffe7d
    8500:	08000009 	stmdaeq	r0, {r0, r3}
    8504:	001e5c18 	andseq	r5, lr, r8, lsl ip
    8508:	018b0d00 	orreq	r0, fp, r0, lsl #26
    850c:	00136306 	andseq	r6, r3, r6, lsl #6
    8510:	a6180c00 	ldrge	r0, [r8], -r0, lsl #24
    8514:	0d00001d 	stceq	0, cr0, [r0, #-116]	; 0xffffff8c
    8518:	b206018f 	andlt	r0, r6, #-1073741789	; 0xc0000023
    851c:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    8520:	00221318 	eoreq	r1, r2, r8, lsl r3
    8524:	01950d00 	orrseq	r0, r5, r0, lsl #26
    8528:	0013df06 	andseq	sp, r3, r6, lsl #30
    852c:	0c180e00 	ldceq	14, cr0, [r8], {-0}
    8530:	0d00001e 	stceq	0, cr0, [r0, #-120]	; 0xffffff88
    8534:	590c0196 	stmdbpl	ip, {r1, r2, r4, r7, r8}
    8538:	0f000000 	svceq	0x00000000
    853c:	0022d218 	eoreq	sp, r2, r8, lsl r2
    8540:	01a30d00 			; <UNDEFINED> instruction: 0x01a30d00
    8544:	00140c06 	andseq	r0, r4, r6, lsl #24
    8548:	8d181000 	ldchi	0, cr1, [r8, #-0]
    854c:	0d00001d 	stceq	0, cr0, [r0, #-116]	; 0xffffff8c
    8550:	250b01a4 	strcs	r0, [fp, #-420]	; 0xfffffe5c
    8554:	11000000 	mrsne	r0, (UNDEF: 0)
    8558:	00205d18 	eoreq	r5, r0, r8, lsl sp
    855c:	01a50d00 			; <UNDEFINED> instruction: 0x01a50d00
    8560:	0000590c 	andeq	r5, r0, ip, lsl #18
    8564:	9a181200 	bls	60cd6c <__ccfg+0x5ecdc4>
    8568:	0d000022 	stceq	0, cr0, [r0, #-136]	; 0xffffff78
    856c:	590c01a7 	stmdbpl	ip, {r0, r1, r2, r5, r7, r8}
    8570:	13000000 	movwne	r0, #0
    8574:	001f1418 	andseq	r1, pc, r8, lsl r4	; <UNPREDICTABLE>
    8578:	01a90d00 			; <UNDEFINED> instruction: 0x01a90d00
    857c:	00006c0d 	andeq	r6, r0, sp, lsl #24
    8580:	ef181400 	svc	0x00181400
    8584:	0d00001c 	stceq	0, cr0, [r0, #-112]	; 0xffffff90
    8588:	7d0601af 	stfvcs	f0, [r6, #-700]	; 0xfffffd44
    858c:	16000014 			; <UNDEFINED> instruction: 0x16000014
    8590:	001df218 	andseq	pc, sp, r8, lsl r2	; <UNPREDICTABLE>
    8594:	01b70d00 			; <UNDEFINED> instruction: 0x01b70d00
    8598:	0014aa06 	andseq	sl, r4, r6, lsl #20
    859c:	00181700 	andseq	r1, r8, r0, lsl #14
    85a0:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    85a4:	540c01b8 	strpl	r0, [ip], #-440	; 0xfffffe48
    85a8:	18000009 	stmdane	r0, {r0, r3}
    85ac:	20190200 	andscs	r0, r9, r0, lsl #4
    85b0:	430d0000 	movwmi	r0, #53248	; 0xd000
    85b4:	000f793c 	andeq	r7, pc, ip, lsr r9	; <UNPREDICTABLE>
    85b8:	1ffa1a00 	svcne	0x00fa1a00
    85bc:	0d280000 	stceq	0, cr0, [r8, #-0]
    85c0:	7615021a 			; <UNDEFINED> instruction: 0x7615021a
    85c4:	18000010 	stmdane	r0, {r4}
    85c8:	00001acc 	andeq	r1, r0, ip, asr #21
    85cc:	0d021b0d 	vstreq	d1, [r2, #-52]	; 0xffffffcc
    85d0:	0000006c 	andeq	r0, r0, ip, rrx
    85d4:	05d41800 	ldrbeq	r1, [r4, #2048]	; 0x800
    85d8:	1d0d0000 	stcne	0, cr0, [sp, #-0]
    85dc:	006c0d02 	rsbeq	r0, ip, r2, lsl #26
    85e0:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
    85e4:	00001e2c 	andeq	r1, r0, ip, lsr #28
    85e8:	1302200d 	movwne	r2, #8205	; 0x200d
    85ec:	00000bc0 	andeq	r0, r0, r0, asr #23
    85f0:	1bc41804 	blne	ff10e608 <_estack+0xdf109608>
    85f4:	210d0000 	mrscs	r0, (UNDEF: 13)
    85f8:	09540c02 	ldmdbeq	r4, {r1, sl, fp}^
    85fc:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    8600:	00001e5c 	andeq	r1, r0, ip, asr lr
    8604:	0602290d 	streq	r2, [r2], -sp, lsl #18
    8608:	000014f9 	strdeq	r1, [r0], -r9
    860c:	1da6180c 	stcne	8, cr1, [r6, #48]!	; 0x30
    8610:	2d0d0000 	stccs	0, cr0, [sp, #-0]
    8614:	15480602 	strbne	r0, [r8, #-1538]	; 0xfffff9fe
    8618:	180d0000 	stmdane	sp, {}	; <UNPREDICTABLE>
    861c:	00001ac1 	andeq	r1, r0, r1, asr #21
    8620:	0602330d 	streq	r3, [r2], -sp, lsl #6
    8624:	00001575 	andeq	r1, r0, r5, ror r5
    8628:	1e15180e 	cdpne	8, 1, cr1, cr5, cr14, {0}
    862c:	380d0000 	stmdacc	sp, {}	; <UNPREDICTABLE>
    8630:	15a20602 	strne	r0, [r2, #1538]!	; 0x602
    8634:	18100000 	ldmdane	r0, {}	; <UNPREDICTABLE>
    8638:	00001c4d 	andeq	r1, r0, sp, asr #24
    863c:	0c02390d 			; <UNDEFINED> instruction: 0x0c02390d
    8640:	00000059 	andeq	r0, r0, r9, asr r0
    8644:	1e9e1814 	mrcne	8, 4, r1, cr14, cr4, {0}
    8648:	410d0000 	mrsmi	r0, (UNDEF: 13)
    864c:	15cf0602 	strbne	r0, [pc, #1538]	; 8c56 <__exidx_end+0x3bae>
    8650:	18150000 	ldmdane	r5, {}	; <UNPREDICTABLE>
    8654:	00001bb9 			; <UNDEFINED> instruction: 0x00001bb9
    8658:	0602550d 	streq	r5, [r2], -sp, lsl #10
    865c:	000015fc 	strdeq	r1, [r0], -ip
    8660:	10831816 	addne	r1, r3, r6, lsl r8
    8664:	680d0000 	stmdavs	sp, {}	; <UNPREDICTABLE>
    8668:	165c0602 	ldrbne	r0, [ip], -r2, lsl #12
    866c:	18180000 	ldmdane	r8, {}	; <UNPREDICTABLE>
    8670:	00001c45 	andeq	r1, r0, r5, asr #24
    8674:	0d02690d 	vstreq.16	s12, [r2, #-26]	; 0xffffffe6	; <UNPREDICTABLE>
    8678:	0000006c 	andeq	r0, r0, ip, rrx
    867c:	2079181a 	rsbscs	r1, r9, sl, lsl r8
    8680:	6a0d0000 	bvs	348688 <__ccfg+0x3286e0>
    8684:	0bc60e02 	bleq	ff18be94 <_estack+0xdf186e94>
    8688:	181c0000 	ldmdane	ip, {}	; <UNPREDICTABLE>
    868c:	00001afe 	strdeq	r1, [r0], -lr
    8690:	0d026c0d 	stceq	12, cr6, [r2, #-52]	; 0xffffffcc
    8694:	0000006c 	andeq	r0, r0, ip, rrx
    8698:	1e341820 	cdpne	8, 3, cr1, cr4, cr0, {1}
    869c:	700d0000 	andvc	r0, sp, r0
    86a0:	00380c02 	eorseq	r0, r8, r2, lsl #24
    86a4:	18220000 	stmdane	r2!, {}	; <UNPREDICTABLE>
    86a8:	00001f71 	andeq	r1, r0, r1, ror pc
    86ac:	0c02730d 	stceq	3, cr7, [r2], {13}
    86b0:	00000059 	andeq	r0, r0, r9, asr r0
    86b4:	ad020024 	stcge	0, cr0, [r2, #-144]	; 0xffffff70
    86b8:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
    86bc:	10823048 	addne	r3, r2, r8, asr #32
    86c0:	9a1a0000 	bls	6886c8 <__ccfg+0x668720>
    86c4:	0c000020 	stceq	0, cr0, [r0], {32}
    86c8:	1503750d 	strne	r7, [r3, #-1293]	; 0xfffffaf3
    86cc:	000010f3 	strdeq	r1, [r0], -r3
    86d0:	00215018 	eoreq	r5, r1, r8, lsl r0
    86d4:	03760d00 	cmneq	r6, #0, 26
    86d8:	00006c0d 	andeq	r6, r0, sp, lsl #24
    86dc:	83180000 	tsthi	r8, #0
    86e0:	0d00001b 	stceq	0, cr0, [r0, #-108]	; 0xffffff94
    86e4:	6c0d0377 	stcvs	3, cr0, [sp], {119}	; 0x77
    86e8:	02000000 	andeq	r0, r0, #0
    86ec:	001b7018 	andseq	r7, fp, r8, lsl r0
    86f0:	03780d00 	cmneq	r8, #0, 26
    86f4:	0000590c 	andeq	r5, r0, ip, lsl #18
    86f8:	52180400 	andspl	r0, r8, #0, 8
    86fc:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
    8700:	590c0379 	stmdbpl	ip, {r0, r3, r4, r5, r6, r8, r9}
    8704:	05000000 	streq	r0, [r0, #-0]
    8708:	001dd818 	andseq	sp, sp, r8, lsl r8
    870c:	037a0d00 	cmneq	sl, #0, 26
    8710:	0000590c 	andeq	r5, r0, ip, lsl #18
    8714:	bc180600 	ldclt	6, cr0, [r8], {-0}
    8718:	0d00001d 	stceq	0, cr0, [r0, #-116]	; 0xffffff8c
    871c:	250b037b 	strcs	r0, [fp, #-891]	; 0xfffffc85
    8720:	07000000 	streq	r0, [r0, -r0]
    8724:	000ac318 	andeq	ip, sl, r8, lsl r3
    8728:	037c0d00 	cmneq	ip, #0, 26
    872c:	0009540c 	andeq	r5, r9, ip, lsl #8
    8730:	0c000800 	stceq	8, cr0, [r0], {-0}
    8734:	047f0d01 	ldrbteq	r0, [pc], #-3329	; 873c <__exidx_end+0x3694>
    8738:	0000113d 	andeq	r1, r0, sp, lsr r1
    873c:	00231f21 	eoreq	r1, r3, r1, lsr #30
    8740:	0f800d00 	svceq	0x00800d00
    8744:	00000059 	andeq	r0, r0, r9, asr r0
    8748:	00040401 	andeq	r0, r4, r1, lsl #8
    874c:	001cad21 	andseq	sl, ip, r1, lsr #26
    8750:	0f810d00 	svceq	0x00810d00
    8754:	00000059 	andeq	r0, r0, r9, asr r0
    8758:	00030101 	andeq	r0, r3, r1, lsl #2
    875c:	001d6d21 	andseq	r6, sp, r1, lsr #26
    8760:	0f830d00 	svceq	0x00830d00
    8764:	00000059 	andeq	r0, r0, r9, asr r0
    8768:	00010201 	andeq	r0, r1, r1, lsl #4
    876c:	001b3b21 	andseq	r3, fp, r1, lsr #22
    8770:	0f840d00 	svceq	0x00840d00
    8774:	00000059 	andeq	r0, r0, r9, asr r0
    8778:	00000101 	andeq	r0, r0, r1, lsl #2
    877c:	0d010c00 	stceq	12, cr0, [r1, #-0]
    8780:	11670487 	smulbbne	r7, r7, r4
    8784:	89210000 	stmdbhi	r1!, {}	; <UNPREDICTABLE>
    8788:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    878c:	00590f88 	subseq	r0, r9, r8, lsl #31
    8790:	04010000 	streq	r0, [r1], #-0
    8794:	e5210004 	str	r0, [r1, #-4]!
    8798:	0d000022 	stceq	0, cr0, [r0, #-136]	; 0xffffff78
    879c:	00590f89 	subseq	r0, r9, r9, lsl #31
    87a0:	04010000 	streq	r0, [r1], #-0
    87a4:	0c000000 	stceq	0, cr0, [r0], {-0}
    87a8:	048b0d01 	streq	r0, [fp], #3329	; 0xd01
    87ac:	000011a1 	andeq	r1, r0, r1, lsr #3
    87b0:	00222421 	eoreq	r2, r2, r1, lsr #8
    87b4:	0f8c0d00 	svceq	0x008c0d00
    87b8:	00000059 	andeq	r0, r0, r9, asr r0
    87bc:	00070101 	andeq	r0, r7, r1, lsl #2
    87c0:	0022ac21 	eoreq	sl, r2, r1, lsr #24
    87c4:	0f8f0d00 	svceq	0x008f0d00
    87c8:	00000059 	andeq	r0, r0, r9, asr r0
    87cc:	00040101 	andeq	r0, r4, r1, lsl #2
    87d0:	001af121 	andseq	pc, sl, r1, lsr #2
    87d4:	0f910d00 	svceq	0x00910d00
    87d8:	00000059 	andeq	r0, r0, r9, asr r0
    87dc:	00030101 	andeq	r0, r3, r1, lsl #2
    87e0:	0d010c00 	stceq	12, cr0, [r1, #-0]
    87e4:	11eb04a6 	mvnne	r0, r6, lsr #9
    87e8:	1f210000 	svcne	0x00210000
    87ec:	0d000023 	stceq	0, cr0, [r0, #-140]	; 0xffffff74
    87f0:	00590fa7 	subseq	r0, r9, r7, lsr #31
    87f4:	04010000 	streq	r0, [r1], #-0
    87f8:	ad210004 	stcge	0, cr0, [r1, #-16]!
    87fc:	0d00001c 	stceq	0, cr0, [r0, #-112]	; 0xffffff90
    8800:	00590fa8 	subseq	r0, r9, r8, lsr #31
    8804:	01010000 	mrseq	r0, (UNDEF: 1)
    8808:	6d210003 	stcvs	0, cr0, [r1, #-12]!
    880c:	0d00001d 	stceq	0, cr0, [r0, #-116]	; 0xffffff8c
    8810:	00590faa 	subseq	r0, r9, sl, lsr #31
    8814:	02010000 	andeq	r0, r1, #0
    8818:	3b210001 	blcc	848824 <__ccfg+0x82887c>
    881c:	0d00001b 	stceq	0, cr0, [r0, #-108]	; 0xffffff94
    8820:	00590fab 	subseq	r0, r9, fp, lsr #31
    8824:	01010000 	mrseq	r0, (UNDEF: 1)
    8828:	0c000000 	stceq	0, cr0, [r0], {-0}
    882c:	04ae0d01 	strteq	r0, [lr], #3329	; 0xd01
    8830:	00001215 	andeq	r1, r0, r5, lsl r2
    8834:	00218921 	eoreq	r8, r1, r1, lsr #18
    8838:	0faf0d00 	svceq	0x00af0d00
    883c:	00000059 	andeq	r0, r0, r9, asr r0
    8840:	00040401 	andeq	r0, r4, r1, lsl #8
    8844:	0022e521 	eoreq	lr, r2, r1, lsr #10
    8848:	0fb00d00 	svceq	0x00b00d00
    884c:	00000059 	andeq	r0, r0, r9, asr r0
    8850:	00000401 	andeq	r0, r0, r1, lsl #8
    8854:	0d010c00 	stceq	12, cr0, [r1, #-0]
    8858:	129f04b2 	addsne	r0, pc, #-1308622848	; 0xb2000000
    885c:	24210000 	strtcs	r0, [r1], #-0
    8860:	0d000022 	stceq	0, cr0, [r0, #-136]	; 0xffffff78
    8864:	00590fb3 	ldrheq	r0, [r9], #-243	; 0xffffff0d
    8868:	01010000 	mrseq	r0, (UNDEF: 1)
    886c:	66210007 	strtvs	r0, [r1], -r7
    8870:	0d00001b 	stceq	0, cr0, [r0, #-108]	; 0xffffff94
    8874:	00590fb5 	ldrheq	r0, [r9], #-245	; 0xffffff0b
    8878:	01010000 	mrseq	r0, (UNDEF: 1)
    887c:	fa210006 	blx	84889c <__ccfg+0x8288f4>
    8880:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
    8884:	00590fb7 	ldrheq	r0, [r9], #-247	; 0xffffff09
    8888:	01010000 	mrseq	r0, (UNDEF: 1)
    888c:	ac210005 	stcge	0, cr0, [r1], #-20	; 0xffffffec
    8890:	0d000022 	stceq	0, cr0, [r0, #-136]	; 0xffffff78
    8894:	00590fb9 	ldrheq	r0, [r9], #-249	; 0xffffff07
    8898:	01010000 	mrseq	r0, (UNDEF: 1)
    889c:	f1210004 			; <UNDEFINED> instruction: 0xf1210004
    88a0:	0d00001a 	stceq	0, cr0, [r0, #-104]	; 0xffffff98
    88a4:	00590fbb 	ldrheq	r0, [r9], #-251	; 0xffffff05
    88a8:	01010000 	mrseq	r0, (UNDEF: 1)
    88ac:	41210003 			; <UNDEFINED> instruction: 0x41210003
    88b0:	0d000022 	stceq	0, cr0, [r0, #-136]	; 0xffffff78
    88b4:	00590fbd 	ldrheq	r0, [r9], #-253	; 0xffffff03
    88b8:	01010000 	mrseq	r0, (UNDEF: 1)
    88bc:	7e210002 	cdpvc	0, 2, cr0, cr1, cr2, {0}
    88c0:	0d00001d 	stceq	0, cr0, [r0, #-116]	; 0xffffff8c
    88c4:	00590fbf 	ldrheq	r0, [r9], #-255	; 0xffffff01
    88c8:	01010000 	mrseq	r0, (UNDEF: 1)
    88cc:	05210001 	streq	r0, [r1, #-1]!
    88d0:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    88d4:	00590fc1 	subseq	r0, r9, r1, asr #31
    88d8:	01010000 	mrseq	r0, (UNDEF: 1)
    88dc:	0c000000 	stceq	0, cr0, [r0], {-0}
    88e0:	04c40d01 	strbeq	r0, [r4], #3329	; 0xd01
    88e4:	00001319 	andeq	r1, r0, r9, lsl r3
    88e8:	001e3c21 	andseq	r3, lr, r1, lsr #24
    88ec:	0fc50d00 	svceq	0x00c50d00
    88f0:	00000059 	andeq	r0, r0, r9, asr r0
    88f4:	00070101 	andeq	r0, r7, r1, lsl #2
    88f8:	001c7521 	andseq	r7, ip, r1, lsr #10
    88fc:	0fc60d00 	svceq	0x00c60d00
    8900:	00000059 	andeq	r0, r0, r9, asr r0
    8904:	00060101 	andeq	r0, r6, r1, lsl #2
    8908:	001db021 	andseq	fp, sp, r1, lsr #32
    890c:	0fc80d00 	svceq	0x00c80d00
    8910:	00000059 	andeq	r0, r0, r9, asr r0
    8914:	00040101 	andeq	r0, r4, r1, lsl #2
    8918:	001d1921 	andseq	r1, sp, r1, lsr #18
    891c:	0fc90d00 	svceq	0x00c90d00
    8920:	00000059 	andeq	r0, r0, r9, asr r0
    8924:	00030101 	andeq	r0, r3, r1, lsl #2
    8928:	00208e21 	eoreq	r8, r0, r1, lsr #28
    892c:	0fca0d00 	svceq	0x00ca0d00
    8930:	00000059 	andeq	r0, r0, r9, asr r0
    8934:	00020101 	andeq	r0, r2, r1, lsl #2
    8938:	001bce21 	andseq	ip, fp, r1, lsr #28
    893c:	0fcb0d00 	svceq	0x00cb0d00
    8940:	00000059 	andeq	r0, r0, r9, asr r0
    8944:	00010101 	andeq	r0, r1, r1, lsl #2
    8948:	001ad621 	andseq	sp, sl, r1, lsr #12
    894c:	0fcc0d00 	svceq	0x00cc0d00
    8950:	00000059 	andeq	r0, r0, r9, asr r0
    8954:	00000101 	andeq	r0, r0, r1, lsl #2
    8958:	0d010c00 	stceq	12, cr0, [r1, #-0]
    895c:	136304d4 	cmnne	r3, #212, 8	; 0xd4000000
    8960:	1f210000 	svcne	0x00210000
    8964:	0d000023 	stceq	0, cr0, [r0, #-140]	; 0xffffff74
    8968:	00590fd5 	ldrsbeq	r0, [r9], #-245	; 0xffffff0b
    896c:	04010000 	streq	r0, [r1], #-0
    8970:	ad210004 	stcge	0, cr0, [r1, #-16]!
    8974:	0d00001c 	stceq	0, cr0, [r0, #-112]	; 0xffffff90
    8978:	00590fd6 	ldrsbeq	r0, [r9], #-246	; 0xffffff0a
    897c:	01010000 	mrseq	r0, (UNDEF: 1)
    8980:	6d210003 	stcvs	0, cr0, [r1, #-12]!
    8984:	0d00001d 	stceq	0, cr0, [r0, #-116]	; 0xffffff8c
    8988:	00590fd8 	ldrsbeq	r0, [r9], #-248	; 0xffffff08
    898c:	02010000 	andeq	r0, r1, #0
    8990:	3b210001 	blcc	84899c <__ccfg+0x8289f4>
    8994:	0d00001b 	stceq	0, cr0, [r0, #-108]	; 0xffffff94
    8998:	00590fd9 	ldrsbeq	r0, [r9], #-249	; 0xffffff07
    899c:	01010000 	mrseq	r0, (UNDEF: 1)
    89a0:	1b000000 	blne	89a8 <__exidx_end+0x3900>
    89a4:	01840d01 	orreq	r0, r4, r1, lsl #26
    89a8:	0013b204 	andseq	fp, r3, r4, lsl #4
    89ac:	231f2200 	tstcs	pc, #0, 4
    89b0:	850d0000 	strhi	r0, [sp, #-0]
    89b4:	00590f01 	subseq	r0, r9, r1, lsl #30
    89b8:	04010000 	streq	r0, [r1], #-0
    89bc:	ad220004 	stcge	0, cr0, [r2, #-16]!
    89c0:	0d00001c 	stceq	0, cr0, [r0, #-112]	; 0xffffff90
    89c4:	590f0186 	stmdbpl	pc, {r1, r2, r7, r8}	; <UNPREDICTABLE>
    89c8:	01000000 	mrseq	r0, (UNDEF: 0)
    89cc:	22000301 	andcs	r0, r0, #67108864	; 0x4000000
    89d0:	00001d6d 	andeq	r1, r0, sp, ror #26
    89d4:	0f01880d 	svceq	0x0001880d
    89d8:	00000059 	andeq	r0, r0, r9, asr r0
    89dc:	00010201 	andeq	r0, r1, r1, lsl #4
    89e0:	001b3b22 	andseq	r3, fp, r2, lsr #22
    89e4:	01890d00 	orreq	r0, r9, r0, lsl #26
    89e8:	0000590f 	andeq	r5, r0, pc, lsl #18
    89ec:	00010100 	andeq	r0, r1, r0, lsl #2
    89f0:	011b0000 	tsteq	fp, r0
    89f4:	04018c0d 	streq	r8, [r1], #-3085	; 0xfffff3f3
    89f8:	000013df 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    89fc:	00218922 	eoreq	r8, r1, r2, lsr #18
    8a00:	018d0d00 	orreq	r0, sp, r0, lsl #26
    8a04:	0000590f 	andeq	r5, r0, pc, lsl #18
    8a08:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    8a0c:	22e52200 	rsccs	r2, r5, #0, 4
    8a10:	8e0d0000 	cdphi	0, 0, cr0, cr13, cr0, {0}
    8a14:	00590f01 	subseq	r0, r9, r1, lsl #30
    8a18:	04010000 	streq	r0, [r1], #-0
    8a1c:	1b000000 	blne	8a24 <__exidx_end+0x397c>
    8a20:	01900d01 	orrseq	r0, r0, r1, lsl #26
    8a24:	00140c04 	andseq	r0, r4, r4, lsl #24
    8a28:	1e8a2200 	cdpne	2, 8, cr2, cr10, cr0, {0}
    8a2c:	910d0000 	mrsls	r0, (UNDEF: 13)
    8a30:	00590f01 	subseq	r0, r9, r1, lsl #30
    8a34:	01010000 	mrseq	r0, (UNDEF: 1)
    8a38:	b1220007 			; <UNDEFINED> instruction: 0xb1220007
    8a3c:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    8a40:	590f0193 	stmdbpl	pc, {r0, r1, r4, r7, r8}	; <UNPREDICTABLE>
    8a44:	01000000 	mrseq	r0, (UNDEF: 0)
    8a48:	00000601 	andeq	r0, r0, r1, lsl #12
    8a4c:	970d011b 	smladls	sp, fp, r1, r0
    8a50:	147d0401 	ldrbtne	r0, [sp], #-1025	; 0xfffffbff
    8a54:	eb220000 	bl	888a5c <__ccfg+0x868ab4>
    8a58:	0d000022 	stceq	0, cr0, [r0, #-136]	; 0xffffff78
    8a5c:	590f0198 	stmdbpl	pc, {r3, r4, r7, r8}	; <UNPREDICTABLE>
    8a60:	01000000 	mrseq	r0, (UNDEF: 0)
    8a64:	22000701 	andcs	r0, r0, #262144	; 0x40000
    8a68:	00001e81 	andeq	r1, r0, r1, lsl #29
    8a6c:	0f01990d 	svceq	0x0001990d
    8a70:	00000059 	andeq	r0, r0, r9, asr r0
    8a74:	00060101 	andeq	r0, r6, r1, lsl #2
    8a78:	000d8c22 	andeq	r8, sp, r2, lsr #24
    8a7c:	019a0d00 	orrseq	r0, sl, r0, lsl #26
    8a80:	0000590f 	andeq	r5, r0, pc, lsl #18
    8a84:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    8a88:	1f6a2200 	svcne	0x006a2200
    8a8c:	9c0d0000 	stcls	0, cr0, [sp], {-0}
    8a90:	00590f01 	subseq	r0, r9, r1, lsl #30
    8a94:	01010000 	mrseq	r0, (UNDEF: 1)
    8a98:	f8220004 			; <UNDEFINED> instruction: 0xf8220004
    8a9c:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    8aa0:	590f019f 	stmdbpl	pc, {r0, r1, r2, r3, r4, r7, r8}	; <UNPREDICTABLE>
    8aa4:	01000000 	mrseq	r0, (UNDEF: 0)
    8aa8:	22000301 	andcs	r0, r0, #67108864	; 0x4000000
    8aac:	00001f44 	andeq	r1, r0, r4, asr #30
    8ab0:	0f01a10d 	svceq	0x0001a10d
    8ab4:	00000059 	andeq	r0, r0, r9, asr r0
    8ab8:	00020101 	andeq	r0, r2, r1, lsl #2
    8abc:	0d011b00 	vstreq	d1, [r1, #-0]
    8ac0:	aa0401aa 	bge	109170 <__ccfg+0xe91c8>
    8ac4:	22000014 	andcs	r0, r0, #20
    8ac8:	00001cb5 			; <UNDEFINED> instruction: 0x00001cb5
    8acc:	0f01ab0d 	svceq	0x0001ab0d
    8ad0:	00000059 	andeq	r0, r0, r9, asr r0
    8ad4:	00040401 	andeq	r0, r4, r1, lsl #8
    8ad8:	001d9522 	andseq	r9, sp, r2, lsr #10
    8adc:	01ad0d00 			; <UNDEFINED> instruction: 0x01ad0d00
    8ae0:	0000590f 	andeq	r5, r0, pc, lsl #18
    8ae4:	00040100 	andeq	r0, r4, r0, lsl #2
    8ae8:	011b0000 	tsteq	fp, r0
    8aec:	0401b00d 	streq	fp, [r1], #-13
    8af0:	000014f9 	strdeq	r1, [r0], -r9
    8af4:	00231f22 	eoreq	r1, r3, r2, lsr #30
    8af8:	01b10d00 			; <UNDEFINED> instruction: 0x01b10d00
    8afc:	0000590f 	andeq	r5, r0, pc, lsl #18
    8b00:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    8b04:	1cad2200 	sfmne	f2, 4, [sp]
    8b08:	b20d0000 	andlt	r0, sp, #0
    8b0c:	00590f01 	subseq	r0, r9, r1, lsl #30
    8b10:	01010000 	mrseq	r0, (UNDEF: 1)
    8b14:	6d220003 	stcvs	0, cr0, [r2, #-12]!
    8b18:	0d00001d 	stceq	0, cr0, [r0, #-116]	; 0xffffff8c
    8b1c:	590f01b4 	stmdbpl	pc, {r2, r4, r5, r7, r8}	; <UNPREDICTABLE>
    8b20:	01000000 	mrseq	r0, (UNDEF: 0)
    8b24:	22000102 	andcs	r0, r0, #-2147483648	; 0x80000000
    8b28:	00001b3b 	andeq	r1, r0, fp, lsr fp
    8b2c:	0f01b50d 	svceq	0x0001b50d
    8b30:	00000059 	andeq	r0, r0, r9, asr r0
    8b34:	00000101 	andeq	r0, r0, r1, lsl #2
    8b38:	0d011b00 	vstreq	d1, [r1, #-0]
    8b3c:	48040222 	stmdami	r4, {r1, r5, r9}
    8b40:	22000015 	andcs	r0, r0, #21
    8b44:	0000231f 	andeq	r2, r0, pc, lsl r3
    8b48:	0f02230d 	svceq	0x0002230d
    8b4c:	00000059 	andeq	r0, r0, r9, asr r0
    8b50:	00040401 	andeq	r0, r4, r1, lsl #8
    8b54:	001cad22 	andseq	sl, ip, r2, lsr #26
    8b58:	02240d00 	eoreq	r0, r4, #0, 26
    8b5c:	0000590f 	andeq	r5, r0, pc, lsl #18
    8b60:	03010100 	movweq	r0, #4352	; 0x1100
    8b64:	1d6d2200 	sfmne	f2, 2, [sp, #-0]
    8b68:	260d0000 	strcs	r0, [sp], -r0
    8b6c:	00590f02 	subseq	r0, r9, r2, lsl #30
    8b70:	02010000 	andeq	r0, r1, #0
    8b74:	3b220001 	blcc	888b80 <__ccfg+0x868bd8>
    8b78:	0d00001b 	stceq	0, cr0, [r0, #-108]	; 0xffffff94
    8b7c:	590f0227 	stmdbpl	pc, {r0, r1, r2, r5, r9}	; <UNPREDICTABLE>
    8b80:	01000000 	mrseq	r0, (UNDEF: 0)
    8b84:	00000001 	andeq	r0, r0, r1
    8b88:	2a0d011b 	bcs	348ffc <__ccfg+0x329054>
    8b8c:	15750402 	ldrbne	r0, [r5, #-1026]!	; 0xfffffbfe
    8b90:	89220000 	stmdbhi	r2!, {}	; <UNPREDICTABLE>
    8b94:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    8b98:	590f022b 	stmdbpl	pc, {r0, r1, r3, r5, r9}	; <UNPREDICTABLE>
    8b9c:	01000000 	mrseq	r0, (UNDEF: 0)
    8ba0:	22000404 	andcs	r0, r0, #4, 8	; 0x4000000
    8ba4:	000022e5 	andeq	r2, r0, r5, ror #5
    8ba8:	0f022c0d 	svceq	0x00022c0d
    8bac:	00000059 	andeq	r0, r0, r9, asr r0
    8bb0:	00000401 	andeq	r0, r0, r1, lsl #8
    8bb4:	0d021b00 	vstreq	d1, [r2, #-0]
    8bb8:	a204022e 	andge	r0, r4, #-536870910	; 0xe0000002
    8bbc:	22000015 	andcs	r0, r0, #21
    8bc0:	00001dc5 	andeq	r1, r0, r5, asr #27
    8bc4:	10022f0d 	andne	r2, r2, sp, lsl #30
    8bc8:	0000006c 	andeq	r0, r0, ip, rrx
    8bcc:	000d0302 	andeq	r0, sp, r2, lsl #6
    8bd0:	0022c822 	eoreq	ip, r2, r2, lsr #16
    8bd4:	02320d00 	eorseq	r0, r2, #0, 26
    8bd8:	00006c10 	andeq	r6, r0, r0, lsl ip
    8bdc:	000d0200 	andeq	r0, sp, r0, lsl #4
    8be0:	041b0000 	ldreq	r0, [fp], #-0
    8be4:	0402340d 	streq	r3, [r2], #-1037	; 0xfffffbf3
    8be8:	000015cf 	andeq	r1, r0, pc, asr #11
    8bec:	001f5922 	andseq	r5, pc, r2, lsr #18
    8bf0:	02350d00 	eorseq	r0, r5, #0, 26
    8bf4:	00007f10 	andeq	r7, r0, r0, lsl pc
    8bf8:	1c040400 	cfstrsne	mvf0, [r4], {-0}
    8bfc:	20692200 	rsbcs	r2, r9, r0, lsl #4
    8c00:	370d0000 	strcc	r0, [sp, -r0]
    8c04:	007f1002 	rsbseq	r1, pc, r2
    8c08:	15040000 	strne	r0, [r4, #-0]
    8c0c:	1b000003 	blne	8c20 <__exidx_end+0x3b78>
    8c10:	023a0d01 	eorseq	r0, sl, #1, 26	; 0x40
    8c14:	0015fc04 	andseq	pc, r5, r4, lsl #24
    8c18:	21bd2200 			; <UNDEFINED> instruction: 0x21bd2200
    8c1c:	3b0d0000 	blcc	348c24 <__ccfg+0x328c7c>
    8c20:	00590f02 	subseq	r0, r9, r2, lsl #30
    8c24:	06010000 	streq	r0, [r1], -r0
    8c28:	93220002 			; <UNDEFINED> instruction: 0x93220002
    8c2c:	0d00001b 	stceq	0, cr0, [r0, #-108]	; 0xffffff94
    8c30:	590f023d 	stmdbpl	pc, {r0, r2, r3, r4, r5, r9}	; <UNPREDICTABLE>
    8c34:	01000000 	mrseq	r0, (UNDEF: 0)
    8c38:	00000002 	andeq	r0, r0, r2
    8c3c:	420d021b 	andmi	r0, sp, #-1342177279	; 0xb0000001
    8c40:	165c0402 	ldrbne	r0, [ip], -r2, lsl #8
    8c44:	62220000 	eorvs	r0, r2, #0
    8c48:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    8c4c:	6c100243 	lfmvs	f0, 4, [r0], {67}	; 0x43
    8c50:	02000000 	andeq	r0, r0, #0
    8c54:	22000a06 	andcs	r0, r0, #24576	; 0x6000
    8c58:	00001dff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    8c5c:	1002440d 	andne	r4, r2, sp, lsl #8
    8c60:	0000006c 	andeq	r0, r0, ip, rrx
    8c64:	00090102 	andeq	r0, r9, r2, lsl #2
    8c68:	001fca22 	andseq	ip, pc, r2, lsr #20
    8c6c:	02460d00 	subeq	r0, r6, #0, 26
    8c70:	00006c10 	andeq	r6, r0, r0, lsl ip
    8c74:	08010200 	stmdaeq	r1, {r9}
    8c78:	1b7b2200 	blne	1ed1480 <__ccfg+0x1eb14d8>
    8c7c:	480d0000 	stmdami	sp, {}	; <UNPREDICTABLE>
    8c80:	006c1002 	rsbeq	r1, ip, r2
    8c84:	04020000 	streq	r0, [r2], #-0
    8c88:	1e220004 	cdpne	0, 2, cr0, cr2, cr4, {0}
    8c8c:	0d00001b 	stceq	0, cr0, [r0, #-108]	; 0xffffff94
    8c90:	6c10024d 	lfmvs	f0, 4, [r0], {77}	; 0x4d
    8c94:	02000000 	andeq	r0, r0, #0
    8c98:	00000003 	andeq	r0, r0, r3
    8c9c:	560d021b 			; <UNDEFINED> instruction: 0x560d021b
    8ca0:	16ab0402 	strtne	r0, [fp], r2, lsl #8
    8ca4:	60220000 	eorvs	r0, r2, r0
    8ca8:	0d00001d 	stceq	0, cr0, [r0, #-116]	; 0xffffff8c
    8cac:	6c100257 	lfmvs	f0, 4, [r0], {87}	; 0x57
    8cb0:	02000000 	andeq	r0, r0, #0
    8cb4:	22000d03 	andcs	r0, r0, #3, 26	; 0xc0
    8cb8:	00001cff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    8cbc:	10025d0d 	andne	r5, r2, sp, lsl #26
    8cc0:	0000006c 	andeq	r0, r0, ip, rrx
    8cc4:	000c0102 	andeq	r0, ip, r2, lsl #2
    8cc8:	001c9f22 	andseq	r9, ip, r2, lsr #30
    8ccc:	025f0d00 	subseq	r0, pc, #0, 26
    8cd0:	00006c10 	andeq	r6, r0, r0, lsl ip
    8cd4:	06060200 	streq	r0, [r6], -r0, lsl #4
    8cd8:	1f9d2200 	svcne	0x009d2200
    8cdc:	660d0000 	strvs	r0, [sp], -r0
    8ce0:	006c1002 	rsbeq	r1, ip, r2
    8ce4:	01020000 	mrseq	r0, (UNDEF: 2)
    8ce8:	02000005 	andeq	r0, r0, #5
    8cec:	00002125 	andeq	r2, r0, r5, lsr #2
    8cf0:	b7343c0e 	ldrlt	r3, [r4, -lr, lsl #24]!
    8cf4:	0f000016 	svceq	0x00000016
    8cf8:	0000210e 	andeq	r2, r0, lr, lsl #2
    8cfc:	155e0e0c 	ldrbne	r0, [lr, #-3596]	; 0xfffff1f4
    8d00:	00001706 	andeq	r1, r0, r6, lsl #14
    8d04:	001bdf0d 	andseq	sp, fp, sp, lsl #30
    8d08:	0d5f0e00 	ldcleq	14, cr0, [pc, #-0]	; 8d10 <__exidx_end+0x3c68>
    8d0c:	00000984 	andeq	r0, r0, r4, lsl #19
    8d10:	05d40d00 	ldrbeq	r0, [r4, #3328]	; 0xd00
    8d14:	600e0000 	andvs	r0, lr, r0
    8d18:	0000590c 	andeq	r5, r0, ip, lsl #18
    8d1c:	830d0400 	movwhi	r0, #54272	; 0xd400
    8d20:	0e000010 	mcreq	0, 0, r0, cr0, cr0, {0}
    8d24:	1706066e 	strne	r0, [r6, -lr, ror #12]
    8d28:	0d050000 	stceq	0, cr0, [r5, #-0]
    8d2c:	000014fd 	strdeq	r1, [r0], -sp
    8d30:	6c0d6f0e 	stcvs	15, cr6, [sp], {14}
    8d34:	06000000 	streq	r0, [r0], -r0
    8d38:	0044050d 	subeq	r0, r4, sp, lsl #10
    8d3c:	0c710e00 	ldcleq	14, cr0, [r1], #-0
    8d40:	00000059 	andeq	r0, r0, r9, asr r0
    8d44:	010c0008 	tsteq	ip, r8
    8d48:	4004610e 	andmi	r6, r4, lr, lsl #2
    8d4c:	21000017 	tstcs	r0, r7, lsl r0
    8d50:	0000507a 	andeq	r5, r0, sl, ror r0
    8d54:	590f620e 	stmdbpl	pc, {r1, r2, r3, r9, sp, lr}	; <UNPREDICTABLE>
    8d58:	01000000 	mrseq	r0, (UNDEF: 0)
    8d5c:	21000602 	tstcs	r0, r2, lsl #12
    8d60:	000020e6 	andeq	r2, r0, r6, ror #1
    8d64:	590f670e 	stmdbpl	pc, {r1, r2, r3, r8, r9, sl, sp, lr}	; <UNPREDICTABLE>
    8d68:	01000000 	mrseq	r0, (UNDEF: 0)
    8d6c:	21000402 	tstcs	r0, r2, lsl #8
    8d70:	00001ba8 	andeq	r1, r0, r8, lsr #23
    8d74:	590f6c0e 	stmdbpl	pc, {r1, r2, r3, sl, fp, sp, lr}	; <UNPREDICTABLE>
    8d78:	01000000 	mrseq	r0, (UNDEF: 0)
    8d7c:	00000004 	andeq	r0, r0, r4
    8d80:	4802100c 	stmdami	r2, {r2, r3, ip}
    8d84:	00177e09 	andseq	r7, r7, r9, lsl #28
    8d88:	1d250d00 	stcne	13, cr0, [r5, #-0]
    8d8c:	49020000 	stmdbmi	r2, {}	; <UNPREDICTABLE>
    8d90:	00007f0d 	andeq	r7, r0, sp, lsl #30
    8d94:	860d0000 	strhi	r0, [sp], -r0
    8d98:	0200001c 	andeq	r0, r0, #28
    8d9c:	007f0d4a 	rsbseq	r0, pc, sl, asr #26
    8da0:	0d040000 	stceq	0, cr0, [r4, #-0]
    8da4:	000020d0 	ldrdeq	r2, [r0], -r0
    8da8:	7f0d4b02 	svcvc	0x000d4b02
    8dac:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8db0:	00222b0d 	eoreq	r2, r2, sp, lsl #22
    8db4:	0d4c0200 	sfmeq	f0, 2, [ip, #-0]
    8db8:	0000007f 	andeq	r0, r0, pc, ror r0
    8dbc:	4402000c 	strmi	r0, [r2], #-12
    8dc0:	0200001b 	andeq	r0, r0, #27
    8dc4:	1740034d 	strbne	r0, [r0, -sp, asr #6]
    8dc8:	8b0a0000 	blhi	288dd0 <__ccfg+0x268e28>
    8dcc:	9a000000 	bls	8dd4 <__exidx_end+0x3d2c>
    8dd0:	0b000017 	bleq	8e34 <__exidx_end+0x3d8c>
    8dd4:	000000aa 	andeq	r0, r0, sl, lsr #1
    8dd8:	8a0400a2 	bhi	109068 <__ccfg+0xe90c0>
    8ddc:	23000017 	movwcs	r0, #23
    8de0:	00001e69 	andeq	r1, r0, r9, ror #28
    8de4:	9a104904 	bls	41b1fc <__ccfg+0x3fb254>
    8de8:	05000017 	streq	r0, [r0, #-23]	; 0xffffffe9
    8dec:	004dd803 	subeq	sp, sp, r3, lsl #16
    8df0:	008b0a00 	addeq	r0, fp, r0, lsl #20
    8df4:	17c20000 	strbne	r0, [r2, r0]
    8df8:	aa240000 	bge	908e00 <__ccfg+0x8e8e58>
    8dfc:	ac000000 	stcge	0, cr0, [r0], {-0}
    8e00:	b1040001 	tstlt	r4, r1
    8e04:	23000017 	movwcs	r0, #23
    8e08:	00001eb8 			; <UNDEFINED> instruction: 0x00001eb8
    8e0c:	c2103a05 	andsgt	r3, r0, #20480	; 0x5000
    8e10:	05000017 	streq	r0, [r0, #-23]	; 0xffffffe9
    8e14:	00472403 	subeq	r2, r7, r3, lsl #8
    8e18:	24ae0200 	strtcs	r0, [lr], #512	; 0x200
    8e1c:	270f0000 	strcs	r0, [pc, -r0]
    8e20:	00006c12 	andeq	r6, r0, r2, lsl ip
    8e24:	17d90400 	ldrbne	r0, [r9, r0, lsl #8]
    8e28:	d9050000 	stmdble	r5, {}	; <UNPREDICTABLE>
    8e2c:	02000017 	andeq	r0, r0, #23
    8e30:	000019c7 	andeq	r1, r0, r7, asr #19
    8e34:	59122b0f 	ldmdbpl	r2, {r0, r1, r2, r3, r8, r9, fp, sp}
    8e38:	05000000 	streq	r0, [r0, #-0]
    8e3c:	000017ef 	andeq	r1, r0, pc, ror #15
    8e40:	0024ff02 	eoreq	pc, r4, r2, lsl #30
    8e44:	122c0f00 	eorne	r0, ip, #0, 30
    8e48:	0000007f 	andeq	r0, r0, pc, ror r0
    8e4c:	00180004 	andseq	r0, r8, r4
    8e50:	05380200 	ldreq	r0, [r8, #-512]!	; 0xfffffe00
    8e54:	2d0f0000 	stccs	0, cr0, [pc, #-0]	; 8e5c <__exidx_end+0x3db4>
    8e58:	00007f12 	andeq	r7, r0, r2, lsl pc
    8e5c:	09210200 	stmdbeq	r1!, {r9}
    8e60:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
    8e64:	00182910 	andseq	r2, r8, r0, lsl r9
    8e68:	d9041100 	stmdble	r4, {r8, ip}
    8e6c:	0c000017 	stceq	0, cr0, [r0], {23}
    8e70:	09320f08 	ldmdbeq	r2!, {r3, r8, r9, sl, fp}
    8e74:	000018bd 			; <UNDEFINED> instruction: 0x000018bd
    8e78:	00003e21 	andeq	r3, r0, r1, lsr #28
    8e7c:	07340f00 	ldreq	r0, [r4, -r0, lsl #30]!
    8e80:	000017ef 	andeq	r1, r0, pc, ror #15
    8e84:	00070101 	andeq	r0, r7, r1, lsl #2
    8e88:	00053e21 	andeq	r3, r5, r1, lsr #28
    8e8c:	03350f00 	teqeq	r5, #0, 30
    8e90:	000017ef 	andeq	r1, r0, pc, ror #15
    8e94:	00060101 	andeq	r0, r6, r1, lsl #2
    8e98:	00026f21 	andeq	r6, r2, r1, lsr #30
    8e9c:	03360f00 	teqeq	r6, #0, 30
    8ea0:	000017ef 	andeq	r1, r0, pc, ror #15
    8ea4:	00050101 	andeq	r0, r5, r1, lsl #2
    8ea8:	00057821 	andeq	r7, r5, r1, lsr #16
    8eac:	03370f00 	teqeq	r7, #0, 30
    8eb0:	000017ef 	andeq	r1, r0, pc, ror #15
    8eb4:	00040101 	andeq	r0, r4, r1, lsl #2
    8eb8:	00086521 	andeq	r6, r8, r1, lsr #10
    8ebc:	03380f00 	teqeq	r8, #0, 30
    8ec0:	000017ef 	andeq	r1, r0, pc, ror #15
    8ec4:	00000401 	andeq	r0, r0, r1, lsl #8
    8ec8:	0005450d 	andeq	r4, r5, sp, lsl #10
    8ecc:	073a0f00 	ldreq	r0, [sl, -r0, lsl #30]!
    8ed0:	000017ef 	andeq	r1, r0, pc, ror #15
    8ed4:	075e0d01 	ldrbeq	r0, [lr, -r1, lsl #26]
    8ed8:	3c0f0000 	stccc	0, cr0, [pc], {-0}
    8edc:	0017ef03 	andseq	lr, r7, r3, lsl #30
    8ee0:	520d0200 	andpl	r0, sp, #0, 4
    8ee4:	0f00000b 	svceq	0x0000000b
    8ee8:	17ef033d 			; <UNDEFINED> instruction: 0x17ef033d
    8eec:	0d030000 	stceq	0, cr0, [r3, #-0]
    8ef0:	00000793 	muleq	r0, r3, r7
    8ef4:	00083f0f 	andeq	r3, r8, pc, lsl #30
    8ef8:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
    8efc:	02c10200 	sbceq	r0, r1, #0, 4
    8f00:	410f0000 	mrsmi	r0, CPSR
    8f04:	00182f03 	andseq	r2, r8, r3, lsl #30
    8f08:	18bd0500 	popne	{r8, sl}
    8f0c:	7f250000 	svcvc	0x00250000
    8f10:	0f000005 	svceq	0x00000005
    8f14:	18c91a43 	stmiane	r9, {r0, r1, r6, r9, fp, ip}^
    8f18:	01010000 	mrseq	r0, (UNDEF: 1)
    8f1c:	0001b125 	andeq	fp, r1, r5, lsr #2
    8f20:	0e450f00 	cdpeq	15, 4, cr0, cr5, cr0, {0}
    8f24:	000005eb 	andeq	r0, r0, fp, ror #11
    8f28:	ca250101 	bgt	949334 <__ccfg+0x92938c>
    8f2c:	0f000002 	svceq	0x00000002
    8f30:	05eb1e45 	strbeq	r1, [fp, #3653]!	; 0xe45
    8f34:	01010000 	mrseq	r0, (UNDEF: 1)
    8f38:	8f10080c 	svchi	0x0010080c
    8f3c:	00192909 	andseq	r2, r9, r9, lsl #18
    8f40:	064f0d00 	strbeq	r0, [pc], -r0, lsl #26
    8f44:	90100000 	andsls	r0, r0, r0
    8f48:	00007f0b 	andeq	r7, r0, fp, lsl #30
    8f4c:	840d0000 	strhi	r0, [sp], #-0
    8f50:	1000000c 	andne	r0, r0, ip
    8f54:	17d90891 	bfine	r0, r1, #17, #9
    8f58:	0d040000 	stceq	0, cr0, [r4, #-0]
    8f5c:	000001f4 	strdeq	r0, [r0], -r4
    8f60:	fb109210 	blx	42d7aa <__ccfg+0x40d802>
    8f64:	06000017 			; <UNDEFINED> instruction: 0x06000017
    8f68:	0a0b0200 	beq	2c9770 <__ccfg+0x2a97c8>
    8f6c:	93100000 	tstls	r0, #0
    8f70:	0018f803 	andseq	pc, r8, r3, lsl #16
    8f74:	19290a00 	stmdbne	r9!, {r9, fp}
    8f78:	19400000 	stmdbne	r0, {}^	; <UNPREDICTABLE>
    8f7c:	00260000 	eoreq	r0, r6, r0
    8f80:	0007b425 	andeq	fp, r7, r5, lsr #8
    8f84:	0f991000 	svceq	0x00991000
    8f88:	00001935 	andeq	r1, r0, r5, lsr r9
    8f8c:	010c0101 	tsteq	ip, r1, lsl #2
    8f90:	78099111 	stmdavc	r9, {r0, r4, r8, ip, pc}
    8f94:	21000019 	tstcs	r0, r9, lsl r0
    8f98:	0000079a 	muleq	r0, sl, r7
    8f9c:	ef079311 	svc	0x00079311
    8fa0:	01000017 	tsteq	r0, r7, lsl r0
    8fa4:	21000107 	tstcs	r0, r7, lsl #2
    8fa8:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
    8fac:	ef039411 	svc	0x00039411
    8fb0:	01000017 	tsteq	r0, r7, lsl r0
    8fb4:	00000001 	andeq	r0, r0, r1
    8fb8:	00087102 	andeq	r7, r8, r2, lsl #2
    8fbc:	03961100 	orrseq	r1, r6, #0, 2
    8fc0:	0000194e 	andeq	r1, r0, lr, asr #18
    8fc4:	00197804 	andseq	r7, r9, r4, lsl #16
    8fc8:	19840a00 	stmibne	r4, {r9, fp}
    8fcc:	19940000 	ldmibne	r4, {}	; <UNPREDICTABLE>
    8fd0:	00260000 	eoreq	r0, r6, r0
    8fd4:	00198904 	andseq	r8, r9, r4, lsl #18
    8fd8:	03832500 	orreq	r2, r3, #0, 10
    8fdc:	9c110000 	ldcls	0, cr0, [r1], {-0}
    8fe0:	00199417 	andseq	r9, r9, r7, lsl r4
    8fe4:	0a010100 	beq	493ec <__ccfg+0x29444>
    8fe8:	000017e5 	andeq	r1, r0, r5, ror #15
    8fec:	000019b2 			; <UNDEFINED> instruction: 0x000019b2
    8ff0:	a7040026 	strge	r0, [r4, -r6, lsr #32]
    8ff4:	25000019 	strcs	r0, [r0, #-25]	; 0xffffffe7
    8ff8:	000004f8 	strdeq	r0, [r0], -r8
    8ffc:	b2130612 	andslt	r0, r3, #18874368	; 0x1200000
    9000:	01000019 	tsteq	r0, r9, lsl r0
    9004:	07402501 	strbeq	r2, [r0, -r1, lsl #10]
    9008:	c3100000 	tstgt	r0, #0
    900c:	0018000e 	andseq	r0, r8, lr
    9010:	07010100 	streq	r0, [r1, -r0, lsl #2]
    9014:	000009aa 	andeq	r0, r0, sl, lsr #19
    9018:	10016e13 	andne	r6, r1, r3, lsl lr
    901c:	000019e0 	andeq	r1, r0, r0, ror #19
    9020:	19e60411 	stmibne	r6!, {r0, r4, sl}^
    9024:	011f0000 	tsteq	pc, r0
    9028:	000019f2 	strdeq	r1, [r0], -r2
    902c:	0017d916 	andseq	sp, r7, r6, lsl r9
    9030:	f80a0000 			; <UNDEFINED> instruction: 0xf80a0000
    9034:	fd000005 	stc2	0, cr0, [r0, #-20]	; 0xffffffec
    9038:	26000019 			; <UNDEFINED> instruction: 0x26000019
    903c:	19f20400 	ldmibne	r2!, {sl}^
    9040:	08200000 	stmdaeq	r0!, {}	; <UNPREDICTABLE>
    9044:	13000008 	movwne	r0, #8
    9048:	fd16017f 	ldc2	1, cr0, [r6, #-508]	; 0xfffffe04
    904c:	01000019 	tsteq	r0, r9, lsl r0
    9050:	03662001 	cmneq	r6, #1
    9054:	82130000 	andshi	r0, r3, #0
    9058:	180c1401 	stmdane	ip, {r0, sl, ip}
    905c:	01010000 	mrseq	r0, (UNDEF: 1)
    9060:	00034320 	andeq	r4, r3, r0, lsr #6
    9064:	02d81300 	sbcseq	r1, r8, #0, 6
    9068:	0018000e 	andseq	r0, r8, lr
    906c:	1b010100 	blne	49474 <__ccfg+0x294cc>
    9070:	03031308 	movweq	r1, #13064	; 0x3308
    9074:	001a5609 	andseq	r5, sl, r9, lsl #12
    9078:	38321800 	ldmdacc	r2!, {fp, ip}
    907c:	07130000 	ldreq	r0, [r3, -r0]
    9080:	17d90703 	ldrbne	r0, [r9, r3, lsl #14]
    9084:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    9088:	00000bdc 	ldrdeq	r0, [r0], -ip
    908c:	08030813 	stmdaeq	r3, {r0, r1, r4, fp}
    9090:	00001811 	andeq	r1, r0, r1, lsl r8
    9094:	fb070004 	blx	1c90ae <__ccfg+0x1a9106>
    9098:	13000003 	movwne	r0, #3
    909c:	2f030309 	svccs	0x00030309
    90a0:	1a00001a 	bne	9110 <__exidx_end+0x4068>
    90a4:	00000033 	andeq	r0, r0, r3, lsr r0
    90a8:	030b1330 	movweq	r1, #45872	; 0xb330
    90ac:	001ac608 	andseq	ip, sl, r8, lsl #12
    90b0:	1add1800 	bne	ff74f0b8 <_estack+0xdf74a0b8>
    90b4:	14130000 	ldrne	r0, [r3], #-0
    90b8:	17d90803 	ldrbne	r0, [r9, r3, lsl #16]
    90bc:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    90c0:	00000954 	andeq	r0, r0, r4, asr r9
    90c4:	08031513 	stmdaeq	r3, {r0, r1, r4, r8, sl, ip}
    90c8:	000017d9 	ldrdeq	r1, [r0], -r9
    90cc:	49a21802 	stmibmi	r2!, {r1, fp, ip}
    90d0:	16130000 	ldrne	r0, [r3], -r0
    90d4:	19d30b03 	ldmibne	r3, {r0, r1, r8, r9, fp}^
    90d8:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
    90dc:	00004405 	andeq	r4, r0, r5, lsl #8
    90e0:	09031713 	stmdbeq	r3, {r0, r1, r4, r8, r9, sl, ip}
    90e4:	00001811 	andeq	r1, r0, r1, lsl r8
    90e8:	00071808 	andeq	r1, r7, r8, lsl #16
    90ec:	18130000 	ldmdane	r3, {}	; <UNPREDICTABLE>
    90f0:	1ac60f03 	bne	ff18cd04 <_estack+0xdf187d04>
    90f4:	180c0000 	stmdane	ip, {}	; <UNPREDICTABLE>
    90f8:	000007c7 	andeq	r0, r0, r7, asr #15
    90fc:	15031913 	strne	r1, [r3, #-2323]	; 0xfffff6ed
    9100:	00001ad6 	ldrdeq	r1, [r0], -r6
    9104:	560a002c 	strpl	r0, [sl], -ip, lsr #32
    9108:	d600001a 			; <UNDEFINED> instruction: 0xd600001a
    910c:	0b00001a 	bleq	917c <__exidx_end+0x40d4>
    9110:	000000aa 	andeq	r0, r0, sl, lsr #1
    9114:	04110003 	ldreq	r0, [r1], #-3
    9118:	00001a63 	andeq	r1, r0, r3, ror #20
    911c:	00094907 	andeq	r4, r9, r7, lsl #18
    9120:	031c1300 	tsteq	ip, #0, 6
    9124:	001a631b 	andseq	r6, sl, fp, lsl r3
    9128:	09292000 	stmdbeq	r9!, {sp}
    912c:	1e130000 	cdpne	0, 1, cr0, cr3, cr0, {0}
    9130:	1af81403 	bne	ffe0e144 <_estack+0xdfe09144>
    9134:	01010000 	mrseq	r0, (UNDEF: 1)
    9138:	1adc0411 	bne	ff70a184 <_estack+0xdf705184>
    913c:	8b250000 	blhi	949144 <__ccfg+0x92919c>
    9140:	14000005 	strne	r0, [r0], #-5
    9144:	17d9131d 	bfine	r1, sp, #6, #20
    9148:	01010000 	mrseq	r0, (UNDEF: 1)
    914c:	00027625 	andeq	r7, r2, r5, lsr #12
    9150:	1a1e1400 	bne	78e158 <__ccfg+0x76e1b0>
    9154:	000017ea 	andeq	r1, r0, sl, ror #15
    9158:	96250101 	strtls	r0, [r5], -r1, lsl #2
    915c:	14000009 	strne	r0, [r0], #-9
    9160:	17ea241e 			; <UNDEFINED> instruction: 0x17ea241e
    9164:	01010000 	mrseq	r0, (UNDEF: 1)
    9168:	0009b225 	andeq	fp, r9, r5, lsr #4
    916c:	14221400 	strtne	r1, [r2], #-1024	; 0xfffffc00
    9170:	00001af8 	strdeq	r1, [r0], -r8
    9174:	ea250101 	b	949580 <__ccfg+0x9295d8>
    9178:	1500001b 	strne	r0, [r0, #-27]	; 0xffffffe5
    917c:	0f6d2739 	svceq	0x006d2739
    9180:	01010000 	mrseq	r0, (UNDEF: 1)
    9184:	001e9525 	andseq	r9, lr, r5, lsr #10
    9188:	153a1500 	ldrne	r1, [sl, #-1280]!	; 0xfffffb00
    918c:	000009fe 	strdeq	r0, [r0], -lr
    9190:	fb250101 	blx	94959e <__ccfg+0x9295f6>
    9194:	15000022 	strne	r0, [r0, #-34]	; 0xffffffde
    9198:	0cec1a3b 	vstmiaeq	ip!, {s3-s61}
    919c:	01010000 	mrseq	r0, (UNDEF: 1)
    91a0:	00218e25 	eoreq	r8, r1, r5, lsr #28
    91a4:	1a3c1500 	bne	f0e5ac <__ccfg+0xeee604>
    91a8:	00000d88 	andeq	r0, r0, r8, lsl #27
    91ac:	93230101 			; <UNDEFINED> instruction: 0x93230101
    91b0:	01000022 	tsteq	r0, r2, lsr #32
    91b4:	00a30c24 	adceq	r0, r3, r4, lsr #24
    91b8:	03050000 	movweq	r0, #20480	; 0x5000
    91bc:	200005c8 	andcs	r0, r0, r8, asr #11
    91c0:	001b4d23 	andseq	r4, fp, r3, lsr #26
    91c4:	0d260100 	stfeqs	f0, [r6, #-0]
    91c8:	000017ef 	andeq	r1, r0, pc, ror #15
    91cc:	05d40305 	ldrbeq	r0, [r4, #773]	; 0x305
    91d0:	08232000 	stmdaeq	r3!, {sp}
    91d4:	01000012 	tsteq	r0, r2, lsl r0
    91d8:	17ef0327 	strbne	r0, [pc, r7, lsr #6]!
    91dc:	03050000 	movweq	r0, #20480	; 0x5000
    91e0:	200005c4 	andcs	r0, r0, r4, asr #11
    91e4:	001fc223 	andseq	ip, pc, r3, lsr #4
    91e8:	0d2a0100 	stfeqs	f0, [sl, #-0]
    91ec:	000017ef 	andeq	r1, r0, pc, ror #15
    91f0:	05f60305 	ldrbeq	r0, [r6, #773]!	; 0x305
    91f4:	bc232000 	stclt	0, cr2, [r3], #-0
    91f8:	0100001f 	tsteq	r0, pc, lsl r0
    91fc:	17ef0d43 	strbne	r0, [pc, r3, asr #26]!
    9200:	03050000 	movweq	r0, #20480	; 0x5000
    9204:	2000003a 	andcs	r0, r0, sl, lsr r0
    9208:	001c6323 	andseq	r6, ip, r3, lsr #6
    920c:	0d470100 	stfeqe	f0, [r7, #-0]
    9210:	000017ef 	andeq	r1, r0, pc, ror #15
    9214:	05bc0305 	ldreq	r0, [ip, #773]!	; 0x305
    9218:	e50a2000 	str	r2, [sl, #-0]
    921c:	ea000017 	b	9280 <__exidx_end+0x41d8>
    9220:	0b00001b 	bleq	9294 <__exidx_end+0x41ec>
    9224:	000000aa 	andeq	r0, r0, sl, lsr #1
    9228:	da040007 	ble	10924c <__ccfg+0xe92a4>
    922c:	2300001b 	movwcs	r0, #27
    9230:	0000204a 	andeq	r2, r0, sl, asr #32
    9234:	ea134e01 	b	4dca40 <__ccfg+0x4bca98>
    9238:	0500001b 	streq	r0, [r0, #-27]	; 0xffffffe5
    923c:	00471203 	subeq	r1, r7, r3, lsl #4
    9240:	22f42300 	rscscs	r2, r4, #0, 6
    9244:	52010000 	andpl	r0, r1, #0
    9248:	0017d90d 	andseq	sp, r7, sp, lsl #18
    924c:	cc030500 	cfstr32gt	mvfx0, [r3], {-0}
    9250:	23200005 			; <UNDEFINED> instruction: 0x23200005
    9254:	00001f7b 	andeq	r1, r0, fp, ror pc
    9258:	d9035301 	stmdble	r3, {r0, r8, r9, ip, lr}
    925c:	05000017 	streq	r0, [r0, #-23]	; 0xffffffe9
    9260:	0005f403 	andeq	pc, r5, r3, lsl #8
    9264:	21c92320 	biccs	r2, r9, r0, lsr #6
    9268:	54010000 	strpl	r0, [r1], #-0
    926c:	0017d903 	andseq	sp, r7, r3, lsl #18
    9270:	ba030500 	blt	ca678 <__ccfg+0xaa6d0>
    9274:	23200005 			; <UNDEFINED> instruction: 0x23200005
    9278:	00001b8a 	andeq	r1, r0, sl, lsl #23
    927c:	d9035501 	stmdble	r3, {r0, r8, sl, ip, lr}
    9280:	05000017 	streq	r0, [r0, #-23]	; 0xffffffe9
    9284:	00003803 	andeq	r3, r0, r3, lsl #16
    9288:	01040c20 	tsteq	r4, r0, lsr #24
    928c:	1c6b0959 			; <UNDEFINED> instruction: 0x1c6b0959
    9290:	70100000 	andsvc	r0, r0, r0
    9294:	5a010073 	bpl	49468 <__ccfg+0x294c0>
    9298:	0017d908 	andseq	sp, r7, r8, lsl #18
    929c:	72100000 	andsvc	r0, r0, #0
    92a0:	5b010077 	blpl	49484 <__ccfg+0x294dc>
    92a4:	0017d904 	andseq	sp, r7, r4, lsl #18
    92a8:	02000200 	andeq	r0, r0, #0, 4
    92ac:	00001f0a 	andeq	r1, r0, sl, lsl #30
    92b0:	49035c01 	stmdbmi	r3, {r0, sl, fp, ip, lr}
    92b4:	0400001c 	streq	r0, [r0], #-28	; 0xffffffe4
    92b8:	00001c6b 	andeq	r1, r0, fp, ror #24
    92bc:	001c770a 	andseq	r7, ip, sl, lsl #14
    92c0:	001c8c00 	andseq	r8, ip, r0, lsl #24
    92c4:	00aa0b00 	adceq	r0, sl, r0, lsl #22
    92c8:	00020000 	andeq	r0, r2, r0
    92cc:	001c7c04 	andseq	r7, ip, r4, lsl #24
    92d0:	1f3c2300 	svcne	0x003c2300
    92d4:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    92d8:	001c8c18 	andseq	r8, ip, r8, lsl ip
    92dc:	64030500 	strvs	r0, [r3], #-1280	; 0xfffffb00
    92e0:	23000050 	movwcs	r0, #80	; 0x50
    92e4:	00002072 	andeq	r2, r0, r2, ror r0
    92e8:	761b6601 	ldrvc	r6, [fp], -r1, lsl #12
    92ec:	05000010 	streq	r0, [r0, #-16]
    92f0:	0005e803 	andeq	lr, r5, r3, lsl #16
    92f4:	21b52320 			; <UNDEFINED> instruction: 0x21b52320
    92f8:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    92fc:	0018110e 	andseq	r1, r8, lr, lsl #2
    9300:	c0030500 	andgt	r0, r3, r0, lsl #10
    9304:	23200005 			; <UNDEFINED> instruction: 0x23200005
    9308:	00001c02 	andeq	r1, r0, r2, lsl #24
    930c:	11176901 	tstne	r7, r1, lsl #18
    9310:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
    9314:	0005d003 	andeq	sp, r5, r3
    9318:	221c2320 	andscs	r2, ip, #32, 6	; 0x80000000
    931c:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    9320:	000ac121 	andeq	ip, sl, r1, lsr #2
    9324:	24030500 	strcs	r0, [r3], #-1280	; 0xfffffb00
    9328:	23200000 	nopcs	{0}	; <UNPREDICTABLE>
    932c:	00001d86 	andeq	r1, r0, r6, lsl #27
    9330:	721a8301 	andsvc	r8, sl, #67108864	; 0x4000000
    9334:	0500000e 	streq	r0, [r0, #-14]
    9338:	00000803 	andeq	r0, r0, r3, lsl #16
    933c:	1aea2320 	bne	ffa91fc4 <_estack+0xdfa8cfc4>
    9340:	c1010000 	mrsgt	r0, (UNDEF: 1)
    9344:	00177e11 	andseq	r7, r7, r1, lsl lr
    9348:	d8030500 	stmdale	r3, {r8, sl}
    934c:	27200005 	strcs	r0, [r0, -r5]!
    9350:	000020dc 	ldrdeq	r2, [r0], -ip
    9354:	0c020a01 			; <UNDEFINED> instruction: 0x0c020a01
    9358:	000000a3 	andeq	r0, r0, r3, lsr #1
    935c:	1c110128 	ldfnes	f0, [r1], {40}	; 0x28
    9360:	d7010000 	strle	r0, [r1, -r0]
    9364:	c0010603 	andgt	r0, r1, r3, lsl #12
    9368:	34000027 	strcc	r0, [r0], #-39	; 0xffffffd9
    936c:	01000029 	tsteq	r0, r9, lsr #32
    9370:	001da59c 	mulseq	sp, ip, r5
    9374:	68702900 	ldmdavs	r0!, {r8, fp, sp}^
    9378:	d7010079 	smlsdxle	r1, r9, r0, r0
    937c:	00a31703 	adceq	r1, r3, r3, lsl #14
    9380:	25ba0000 	ldrcs	r0, [sl, #0]!
    9384:	6d290000 	stcvs	0, cr0, [r9, #-0]
    9388:	01007362 	tsteq	r0, r2, ror #6
    938c:	a32003d7 			; <UNDEFINED> instruction: 0xa32003d7
    9390:	04000000 	streq	r0, [r0], #-0
    9394:	2a000026 	bcs	9434 <__exidx_end+0x438c>
    9398:	00001e35 	andeq	r1, r0, r5, lsr lr
    939c:	000027e4 	andeq	r2, r0, r4, ror #15
    93a0:	00000d28 	andeq	r0, r0, r8, lsr #26
    93a4:	0203f001 	andeq	pc, r3, #1
    93a8:	00001d93 	muleq	r0, r3, sp
    93ac:	000d282b 	andeq	r2, sp, fp, lsr #16
    93b0:	1e432c00 	cdpne	12, 4, cr2, cr3, cr0, {0}
    93b4:	4e2d0000 	cdpmi	0, 2, cr0, cr13, cr0, {0}
    93b8:	2d00001e 	stccs	0, cr0, [r0, #-120]	; 0xffffff88
    93bc:	2d000026 	stccs	0, cr0, [r0, #-152]	; 0xffffff68
    93c0:	00001e5a 	andeq	r1, r0, sl, asr lr
    93c4:	0000264c 	andeq	r2, r0, ip, asr #12
    93c8:	001e662d 	andseq	r6, lr, sp, lsr #12
    93cc:	00267500 	eoreq	r7, r6, r0, lsl #10
    93d0:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    93d4:	00001fcc 	andeq	r1, r0, ip, asr #31
    93d8:	0000289a 	muleq	r0, sl, r8
    93dc:	00000d68 	andeq	r0, r0, r8, ror #26
    93e0:	02041401 	andeq	r1, r4, #16777216	; 0x1000000
    93e4:	1eb12f00 	cdpne	15, 11, cr2, cr1, cr0, {0}
    93e8:	4a010000 	bmi	493f0 <__ccfg+0x29448>
    93ec:	a3010c03 	movwge	r0, #7171	; 0x1c03
    93f0:	80000000 	andhi	r0, r0, r0
    93f4:	10000020 	andne	r0, r0, r0, lsr #32
    93f8:	01000022 	tsteq	r0, r2, lsr #32
    93fc:	001e359c 	mulseq	lr, ip, r5
    9400:	706f2900 	rsbvc	r2, pc, r0, lsl #18
    9404:	4a010074 	bmi	495dc <__ccfg+0x29634>
    9408:	00a31803 	adceq	r1, r3, r3, lsl #16
    940c:	26a90000 	strtcs	r0, [r9], r0
    9410:	76290000 	strtvc	r0, [r9], -r0
    9414:	01006c61 	tsteq	r0, r1, ror #24
    9418:	1d25034a 	stcne	3, cr0, [r5, #-296]!	; 0xfffffed8
    941c:	35000018 	strcc	r0, [r0, #-24]	; 0xffffffe8
    9420:	30000027 	andcc	r0, r0, r7, lsr #32
    9424:	00746572 	rsbseq	r6, r4, r2, ror r5
    9428:	06034c01 	streq	r4, [r3], -r1, lsl #24
    942c:	000000a3 	andeq	r0, r0, r3, lsr #1
    9430:	000027ed 	andeq	r2, r0, sp, ror #15
    9434:	001da131 	andseq	sl, sp, r1, lsr r1
    9438:	03cf0100 	biceq	r0, pc, #0, 2
    943c:	00210801 	eoreq	r0, r1, r1, lsl #16
    9440:	1faa3100 	svcne	0x00aa3100
    9444:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    9448:	20c20103 	sbccs	r0, r2, r3, lsl #2
    944c:	56310000 	ldrtpl	r0, [r1], -r0
    9450:	01000021 	tsteq	r0, r1, lsr #32
    9454:	0c0103cd 	stceq	3, cr0, [r1], {205}	; 0xcd
    9458:	32000021 	andcc	r0, r0, #33	; 0x21
    945c:	000020c2 	andeq	r2, r0, r2, asr #1
    9460:	000020ec 	andeq	r2, r0, ip, ror #1
    9464:	01006a30 	tsteq	r0, r0, lsr sl
    9468:	a3040359 	movwge	r0, #17241	; 0x4359
    946c:	37000000 	strcc	r0, [r0, -r0]
    9470:	00000028 	andeq	r0, r0, r8, lsr #32
    9474:	1e203300 	cdpne	3, 2, cr3, cr0, cr0, {0}
    9478:	07010000 	streq	r0, [r1, -r0]
    947c:	73010d03 	movwvc	r0, #7427	; 0x1d03
    9480:	3400001e 	strcc	r0, [r0], #-30	; 0xffffffe2
    9484:	0b010069 	bleq	49630 <__ccfg+0x29688>
    9488:	00a30603 	adceq	r0, r3, r3, lsl #12
    948c:	72340000 	eorsvc	r0, r4, #0
    9490:	0c010065 	stceq	0, cr0, [r1], {101}	; 0x65
    9494:	1e731a03 	vaddne.f32	s3, s6, s6
    9498:	64340000 	ldrtvs	r0, [r4], #-0
    949c:	0c010061 	stceq	0, cr0, [r1], {97}	; 0x61
    94a0:	1e731f03 	cdpne	15, 7, cr1, cr3, cr3, {0}
    94a4:	64340000 	ldrtvs	r0, [r4], #-0
    94a8:	0c010062 	stceq	0, cr0, [r1], {98}	; 0x62
    94ac:	1e732403 	cdpne	4, 7, cr2, cr3, cr3, {0}
    94b0:	11000000 	mrsne	r0, (UNDEF: 0)
    94b4:	0016ab04 	andseq	sl, r6, r4, lsl #22
    94b8:	1d012800 	stcne	8, cr2, [r1, #-0]
    94bc:	0100001c 	tsteq	r0, ip, lsl r0
    94c0:	0101020d 	tsteq	r1, sp, lsl #4
    94c4:	00002560 	andeq	r2, r0, r0, ror #10
    94c8:	00002750 	andeq	r2, r0, r0, asr r7
    94cc:	1efd9c01 	cdpne	12, 15, cr9, cr13, cr1, {0}
    94d0:	78350000 	ldmdavc	r5!, {}	; <UNPREDICTABLE>
    94d4:	01000009 	tsteq	r0, r9
    94d8:	d901020d 	stmdble	r1, {r0, r2, r3, r9}
    94dc:	4a000017 	bmi	9540 <__exidx_end+0x4498>
    94e0:	31000028 	tstcc	r0, r8, lsr #32
    94e4:	00001b54 	andeq	r1, r0, r4, asr fp
    94e8:	01021601 	tsteq	r2, r1, lsl #12
    94ec:	00002574 	andeq	r2, r0, r4, ror r5
    94f0:	0020232e 	eoreq	r2, r0, lr, lsr #6
    94f4:	0025d600 	eoreq	sp, r5, r0, lsl #12
    94f8:	000cc800 	andeq	ip, ip, r0, lsl #16
    94fc:	02250100 	eoreq	r0, r5, #0, 2
    9500:	1ff32a04 	svcne	0x00f32a04
    9504:	25da0000 	ldrbcs	r0, [sl]
    9508:	0ce00000 	stcleq	0, cr0, [r0]
    950c:	26010000 	strcs	r0, [r1], -r0
    9510:	1eeb0402 	cdpne	4, 14, cr0, cr11, cr2, {0}
    9514:	e02b0000 	eor	r0, fp, r0
    9518:	2d00000c 	stccs	0, cr0, [r0, #-48]	; 0xffffffd0
    951c:	00002001 	andeq	r2, r0, r1
    9520:	00002873 	andeq	r2, r0, r3, ror r8
    9524:	00200d2c 	eoreq	r0, r0, ip, lsr #26
    9528:	36000000 	strcc	r0, [r0], -r0
    952c:	00002023 	andeq	r2, r0, r3, lsr #32
    9530:	0000265e 	andeq	r2, r0, lr, asr r6
    9534:	00002668 	andeq	r2, r0, r8, ror #12
    9538:	03026501 	movweq	r6, #9473	; 0x2501
    953c:	9b012800 	blls	53544 <__ccfg+0x3359c>
    9540:	01000021 	tsteq	r0, r1, lsr #32
    9544:	010601ec 	smlatteq	r6, ip, r1, r0
    9548:	00002750 	andeq	r2, r0, r0, asr r7
    954c:	000027c0 	andeq	r2, r0, r0, asr #15
    9550:	1f629c01 	svcne	0x00629c01
    9554:	10370000 	eorsne	r0, r7, r0
    9558:	2f00000d 	svccs	0x0000000d
    955c:	3000001f 	andcc	r0, r0, pc, lsl r0
    9560:	fe01006a 	cdp2	0, 0, cr0, cr1, cr10, {3}
    9564:	00a30201 	adceq	r0, r3, r1, lsl #4
    9568:	28920000 	ldmcs	r2, {}	; <UNPREDICTABLE>
    956c:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    9570:	000021d5 	ldrdeq	r2, [r0], -r5
    9574:	00002764 	andeq	r2, r0, r4, ror #14
    9578:	0000276e 	andeq	r2, r0, lr, ror #14
    957c:	0201f801 	andeq	pc, r1, #65536	; 0x10000
    9580:	00001f4a 	andeq	r1, r0, sl, asr #30
    9584:	0021e439 	eoreq	lr, r1, r9, lsr r4
    9588:	f23a0000 	vhadd.s<illegal width 64>	d0, d10, d0
    958c:	6e000021 	cdpvs	0, 0, cr0, cr0, cr1, {1}
    9590:	f8000027 			; <UNDEFINED> instruction: 0xf8000027
    9594:	0100000c 	tsteq	r0, ip
    9598:	390201fb 	stmdbcc	r2, {r0, r1, r3, r4, r5, r6, r7, r8}
    959c:	00002200 	andeq	r2, r0, r0, lsl #4
    95a0:	da3b0000 	ble	ec95a8 <__ccfg+0xea9600>
    95a4:	0100001f 	tsteq	r0, pc, lsl r0
    95a8:	900d01b5 			; <UNDEFINED> instruction: 0x900d01b5
    95ac:	60000024 	andvs	r0, r0, r4, lsr #32
    95b0:	01000025 	tsteq	r0, r5, lsr #32
    95b4:	001fcc9c 	mulseq	pc, ip, ip	; <UNPREDICTABLE>
    95b8:	62643000 	rsbvs	r3, r4, #0
    95bc:	01b70100 			; <UNDEFINED> instruction: 0x01b70100
    95c0:	001e731a 	andseq	r7, lr, sl, lsl r3
    95c4:	0028a500 	eoreq	sl, r8, r0, lsl #10
    95c8:	00693400 	rsbeq	r3, r9, r0, lsl #8
    95cc:	0601b801 	streq	fp, [r1], -r1, lsl #16
    95d0:	000000a3 	andeq	r0, r0, r3, lsr #1
    95d4:	006c7030 	rsbeq	r7, ip, r0, lsr r0
    95d8:	0901b801 	stmdbeq	r1, {r0, fp, ip, sp, pc}
    95dc:	000000a3 	andeq	r0, r0, r3, lsr #1
    95e0:	000028e7 	andeq	r2, r0, r7, ror #17
    95e4:	00726e30 	rsbseq	r6, r2, r0, lsr lr
    95e8:	0d01b801 	stceq	8, cr11, [r1, #-4]
    95ec:	000000a3 	andeq	r0, r0, r3, lsr #1
    95f0:	000028fa 	strdeq	r2, [r0], -sl
    95f4:	00220d3a 	eoreq	r0, r2, sl, lsr sp
    95f8:	00249000 	eoreq	r9, r4, r0
    95fc:	000c9800 	andeq	r9, ip, r0, lsl #16
    9600:	01c10100 	biceq	r0, r1, r0, lsl #2
    9604:	221b3902 	andscs	r3, fp, #32768	; 0x8000
    9608:	00000000 	andeq	r0, r0, r0
    960c:	001f1f3c 	andseq	r1, pc, ip, lsr pc	; <UNPREDICTABLE>
    9610:	01ab0100 			; <UNDEFINED> instruction: 0x01ab0100
    9614:	353d010d 	ldrcc	r0, [sp, #-269]!	; 0xfffffef3
    9618:	0100001f 	tsteq	r0, pc, lsl r0
    961c:	600d01a0 	andvs	r0, sp, r0, lsr #3
    9620:	80000020 	andhi	r0, r0, r0, lsr #32
    9624:	01000020 	tsteq	r0, r0, lsr #32
    9628:	1fd43c9c 	svcne	0x00d43c9c
    962c:	95010000 	strls	r0, [r1, #-0]
    9630:	33010d01 	movwcc	r0, #7425	; 0x1d01
    9634:	00001de3 	andeq	r1, r0, r3, ror #27
    9638:	0d018001 	stceq	0, cr8, [r1, #-4]
    963c:	00201901 	eoreq	r1, r0, r1, lsl #18
    9640:	65723400 	ldrbvs	r3, [r2, #-1024]!	; 0xfffffc00
    9644:	01840100 	orreq	r0, r4, r0, lsl #2
    9648:	001e731a 	andseq	r7, lr, sl, lsl r3
    964c:	00693400 	rsbeq	r3, r9, r0, lsl #8
    9650:	06018501 	streq	r8, [r1], -r1, lsl #10
    9654:	000000a3 	andeq	r0, r0, r3, lsr #1
    9658:	1e7a3c00 	cdpne	12, 7, cr3, cr10, cr0, {0}
    965c:	61010000 	mrsvs	r0, (UNDEF: 1)
    9660:	3e010d01 	cdpcc	13, 0, cr0, cr1, cr1, {0}
    9664:	00001ae4 	andeq	r1, r0, r4, ror #21
    9668:	010dff01 	tsteq	sp, r1, lsl #30	; <UNPREDICTABLE>
    966c:	001bb03f 	andseq	fp, fp, pc, lsr r0
    9670:	0de20100 	stfeqe	f0, [r2]
    9674:	205f0101 	subscs	r0, pc, r1, lsl #2
    9678:	63400000 	movtvs	r0, #0
    967c:	0100646d 	tsteq	r0, sp, ror #8
    9680:	0bc026e2 	bleq	ff013210 <_estack+0xdf00e210>
    9684:	a6410000 	strbge	r0, [r1], -r0
    9688:	01000022 	tsteq	r0, r2, lsr #32
    968c:	180031e2 	stmdane	r0, {r1, r5, r6, r7, r8, ip, sp}
    9690:	ad410000 	stclge	0, cr0, [r1, #-0]
    9694:	01000021 	tsteq	r0, r1, lsr #32
    9698:	18003ee2 	stmdane	r0, {r1, r5, r6, r7, r9, sl, fp, ip, sp}
    969c:	3f000000 	svccc	0x00000000
    96a0:	00001ab7 			; <UNDEFINED> instruction: 0x00001ab7
    96a4:	010dc501 	tsteq	sp, r1, lsl #10
    96a8:	00209201 	eoreq	r9, r0, r1, lsl #4
    96ac:	6d634000 	stclvs	0, cr4, [r3, #-0]
    96b0:	c5010064 	strgt	r0, [r1, #-100]	; 0xffffff9c
    96b4:	0018001e 	andseq	r0, r8, lr, lsl r0
    96b8:	65724200 	ldrbvs	r4, [r2, #-512]!	; 0xfffffe00
    96bc:	ca010073 	bgt	49890 <__ccfg+0x298e8>
    96c0:	0000a306 	andeq	sl, r0, r6, lsl #6
    96c4:	6e634200 	cdpvs	2, 6, cr4, cr3, cr0, {0}
    96c8:	cd010074 	stcgt	0, cr0, [r1, #-464]	; 0xfffffe30
    96cc:	0000a306 	andeq	sl, r0, r6, lsl #6
    96d0:	9b430000 	blls	10c96d8 <__ccfg+0x10a9730>
    96d4:	0300000e 	movweq	r0, #14
    96d8:	01010154 	tsteq	r1, r4, asr r1
    96dc:	0020af03 	eoreq	sl, r0, r3, lsl #30
    96e0:	0d304400 	cfldrseq	mvf4, [r0, #-0]
    96e4:	54030000 	strpl	r0, [r3], #-0
    96e8:	007f1901 	rsbseq	r1, pc, r1, lsl #18
    96ec:	43000000 	movwmi	r0, #0
    96f0:	00000fa0 	andeq	r0, r0, r0, lsr #31
    96f4:	01011e03 	tsteq	r1, r3, lsl #28
    96f8:	20cc0301 	sbccs	r0, ip, r1, lsl #6
    96fc:	30440000 	subcc	r0, r4, r0
    9700:	0300000d 	movweq	r0, #13
    9704:	7f17011e 	svcvc	0x0017011e
    9708:	00000000 	andeq	r0, r0, r0
    970c:	00213c43 	eoreq	r3, r1, r3, asr #24
    9710:	01ea0500 	mvneq	r0, r0, lsl #10
    9714:	61030115 	tstvs	r3, r5, lsl r1
    9718:	34000021 	strcc	r0, [r0], #-33	; 0xffffffdf
    971c:	05005370 	streq	r5, [r0, #-880]	; 0xfffffc90
    9720:	611401f2 			; <UNDEFINED> instruction: 0x611401f2
    9724:	34000021 	strcc	r0, [r0], #-33	; 0xffffffdf
    9728:	05004470 	streq	r4, [r0, #-1136]	; 0xfffffb90
    972c:	671c01f3 			; <UNDEFINED> instruction: 0x671c01f3
    9730:	34000021 	strcc	r0, [r0], #-33	; 0xffffffdf
    9734:	05003174 	streq	r3, [r0, #-372]	; 0xfffffe8c
    9738:	7f0d01f4 	svcvc	0x000d01f4
    973c:	34000000 	strcc	r0, [r0], #-0
    9740:	05003274 	streq	r3, [r0, #-628]	; 0xfffffd8c
    9744:	7f1101f4 	svcvc	0x001101f4
    9748:	34000000 	strcc	r0, [r0], #-0
    974c:	05003374 	streq	r3, [r0, #-884]	; 0xfffffc8c
    9750:	7f1501f4 	svcvc	0x001501f4
    9754:	34000000 	strcc	r0, [r0], #-0
    9758:	05003474 	streq	r3, [r0, #-1140]	; 0xfffffb8c
    975c:	7f1901f4 	svcvc	0x001901f4
    9760:	34000000 	strcc	r0, [r0], #-0
    9764:	05003574 	streq	r3, [r0, #-1396]	; 0xfffffa8c
    9768:	7f1d01f4 	svcvc	0x001d01f4
    976c:	34000000 	strcc	r0, [r0], #-0
    9770:	05003674 	streq	r3, [r0, #-1652]	; 0xfffff98c
    9774:	7f2101f4 	svcvc	0x002101f4
    9778:	34000000 	strcc	r0, [r0], #-0
    977c:	05003774 	streq	r3, [r0, #-1908]	; 0xfffff88c
    9780:	7f2501f4 	svcvc	0x002501f4
    9784:	34000000 	strcc	r0, [r0], #-0
    9788:	05003874 	streq	r3, [r0, #-2164]	; 0xfffff78c
    978c:	7f2901f4 	svcvc	0x002901f4
    9790:	27000000 	strcs	r0, [r0, -r0]
    9794:	00002176 	andeq	r2, r0, r6, ror r1
    9798:	0d01f505 	cfstr32eq	mvfx15, [r1, #-20]	; 0xffffffec
    979c:	0000007f 	andeq	r0, r0, pc, ror r0
    97a0:	8b041100 	blhi	10dba8 <__ccfg+0xedc00>
    97a4:	11000000 	mrsne	r0, (UNDEF: 0)
    97a8:	00009704 	andeq	r9, r0, r4, lsl #14
    97ac:	1f824500 	svcne	0x00824500
    97b0:	2f040000 	svccs	0x00040000
    97b4:	03011501 	movweq	r1, #5377	; 0x1501
    97b8:	001c5245 	andseq	r5, ip, r5, asr #4
    97bc:	01220400 			; <UNDEFINED> instruction: 0x01220400
    97c0:	43030115 	movwmi	r0, #12565	; 0x3115
    97c4:	00001b09 	andeq	r1, r0, r9, lsl #22
    97c8:	15011104 	strne	r1, [r1, #-260]	; 0xfffffefc
    97cc:	21ad0301 			; <UNDEFINED> instruction: 0x21ad0301
    97d0:	09270000 	stmdbeq	r7!, {}	; <UNPREDICTABLE>
    97d4:	04000022 	streq	r0, [r0], #-34	; 0xffffffde
    97d8:	840d0113 	strhi	r0, [sp], #-275	; 0xfffffeed
    97dc:	27000009 	strcs	r0, [r0, -r9]
    97e0:	00001cc0 	andeq	r1, r0, r0, asr #25
    97e4:	0e011404 	cdpeq	4, 0, cr1, cr1, cr4, {0}
    97e8:	00000bc6 	andeq	r0, r0, r6, asr #23
    97ec:	22b44500 	adcscs	r4, r4, #0, 10
    97f0:	0d040000 	stceq	0, cr0, [r4, #-0]
    97f4:	03011501 	movweq	r1, #5377	; 0x1501
    97f8:	00224d43 	eoreq	r4, r2, r3, asr #26
    97fc:	01040400 	tsteq	r4, r0, lsl #8
    9800:	d5030115 	strle	r0, [r3, #-277]	; 0xfffffeeb
    9804:	27000021 	strcs	r0, [r0, -r1, lsr #32]
    9808:	00001cca 	andeq	r1, r0, sl, asr #25
    980c:	0e010604 	cfmadd32eq	mvax0, mvfx0, mvfx1, mvfx4
    9810:	00000bc6 	andeq	r0, r0, r6, asr #23
    9814:	1f264300 	svcne	0x00264300
    9818:	1d020000 	stcne	0, cr0, [r2, #-0]
    981c:	03010101 	movweq	r0, #4353	; 0x1101
    9820:	000021f2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    9824:	001de944 	andseq	lr, sp, r4, asr #18
    9828:	011d0200 	tsteq	sp, r0, lsl #4
    982c:	00007f19 	andeq	r7, r0, r9, lsl pc
    9830:	d43f0000 	ldrtle	r0, [pc], #-0	; 9838 <__exidx_end+0x4790>
    9834:	0200001c 	andeq	r0, r0, #28
    9838:	030101f7 	movweq	r0, #4599	; 0x11f7
    983c:	0000220d 	andeq	r2, r0, sp, lsl #4
    9840:	001de941 	andseq	lr, sp, r1, asr #18
    9844:	1bf70200 	blne	ffdca04c <_estack+0xdfdc504c>
    9848:	0000007f 	andeq	r0, r0, pc, ror r0
    984c:	1d083f00 	stcne	15, cr3, [r8, #-0]
    9850:	aa020000 	bge	89858 <__ccfg+0x698b0>
    9854:	28030101 	stmdacs	r3, {r0, r8}
    9858:	41000022 	tstmi	r0, r2, lsr #32
    985c:	00001de9 	andeq	r1, r0, r9, ror #27
    9860:	7f1baa02 	svcvc	0x001baa02
    9864:	00000000 	andeq	r0, r0, r0
    9868:	0020c046 	eoreq	ip, r0, r6, asr #32
    986c:	019c0200 	orrseq	r0, ip, r0, lsl #4
    9870:	10460301 	subne	r0, r6, r1, lsl #6
    9874:	02000023 	andeq	r0, r0, #35	; 0x23
    9878:	03010179 	movweq	r0, #4473	; 0x1179
    987c:	00205f47 	eoreq	r5, r0, r7, asr #30
    9880:	00221000 	eoreq	r1, r2, r0
    9884:	00225800 	eoreq	r5, r2, r0, lsl #16
    9888:	8b9c0100 	blhi	fe709c90 <_estack+0xde704c90>
    988c:	48000022 	stmdami	r0, {r1, r5}
    9890:	0000206d 	andeq	r2, r0, sp, rrx
    9894:	00002918 	andeq	r2, r0, r8, lsl r9
    9898:	0020792d 	eoreq	r7, r0, sp, lsr #18
    989c:	00293600 	eoreq	r3, r9, r0, lsl #12
    98a0:	20852c00 	addcs	r2, r5, r0, lsl #24
    98a4:	5f490000 	svcpl	0x00490000
    98a8:	26000020 	strcs	r0, [r0], -r0, lsr #32
    98ac:	28000022 	stmdacs	r0, {r1, r5}
    98b0:	01000022 	tsteq	r0, r2, lsr #32
    98b4:	6d480dc5 	stclvs	13, cr0, [r8, #-788]	; 0xfffffcec
    98b8:	6a000020 	bvs	9940 <__exidx_end+0x4898>
    98bc:	2c000029 	stccs	0, cr0, [r0], {41}	; 0x29
    98c0:	00002079 	andeq	r2, r0, r9, ror r0
    98c4:	0020852c 	eoreq	r8, r0, ip, lsr #10
    98c8:	47000000 	strmi	r0, [r0, -r0]
    98cc:	00001fe9 	andeq	r1, r0, r9, ror #31
    98d0:	00002258 	andeq	r2, r0, r8, asr r2
    98d4:	0000227c 	andeq	r2, r0, ip, ror r2
    98d8:	22b09c01 	adcscs	r9, r0, #256	; 0x100
    98dc:	e9360000 	ldmdb	r6!, {}	; <UNPREDICTABLE>
    98e0:	6200001f 	andvs	r0, r0, #31
    98e4:	70000022 	andvc	r0, r0, r2, lsr #32
    98e8:	01000022 	tsteq	r0, r2, lsr #32
    98ec:	000d0195 	muleq	sp, r5, r1
    98f0:	00201947 	eoreq	r1, r0, r7, asr #18
    98f4:	00227c00 	eoreq	r7, r2, r0, lsl #24
    98f8:	0022d800 	eoreq	sp, r2, r0, lsl #16
    98fc:	199c0100 	ldmibne	ip, {r8}
    9900:	4a000023 	bmi	9994 <__exidx_end+0x48ec>
    9904:	00002019 	andeq	r2, r0, r9, lsl r0
    9908:	00002286 	andeq	r2, r0, r6, lsl #5
    990c:	000022c2 	andeq	r2, r0, r2, asr #5
    9910:	0d016101 	stfeqs	f6, [r1, #-4]
    9914:	0022282e 	eoreq	r2, r2, lr, lsr #16
    9918:	00228600 	eoreq	r8, r2, r0, lsl #12
    991c:	000c0800 	andeq	r0, ip, r0, lsl #16
    9920:	016f0100 	cmneq	pc, r0, lsl #2
    9924:	20923802 	addscs	r3, r2, r2, lsl #16
    9928:	22ae0000 	adccs	r0, lr, #0
    992c:	22b60000 	adcscs	r0, r6, #0
    9930:	7a010000 	bvc	49938 <__ccfg+0x29990>
    9934:	23000201 	movwcs	r0, #513	; 0x201
    9938:	a1390000 	teqge	r9, r0
    993c:	00000020 	andeq	r0, r0, r0, lsr #32
    9940:	0020924a 	eoreq	r9, r0, sl, asr #4
    9944:	0022b600 	eoreq	fp, r2, r0, lsl #12
    9948:	0022ba00 	eoreq	fp, r2, r0, lsl #20
    994c:	017a0100 	cmneq	sl, r0, lsl #2
    9950:	20a13902 	adccs	r3, r1, r2, lsl #18
    9954:	00000000 	andeq	r0, r0, r0
    9958:	202c4700 	eorcs	r4, ip, r0, lsl #14
    995c:	22d80000 	sbcscs	r0, r8, #0
    9960:	23100000 	tstcs	r0, #0
    9964:	9c010000 	stcls	0, cr0, [r1], {-0}
    9968:	00002344 	andeq	r2, r0, r4, asr #6
    996c:	00203a48 	eoreq	r3, r0, r8, asr #20
    9970:	00297d00 	eoreq	r7, r9, r0, lsl #26
    9974:	20464800 	subcs	r4, r6, r0, lsl #16
    9978:	299b0000 	ldmibcs	fp, {}	; <UNPREDICTABLE>
    997c:	52390000 	eorspl	r0, r9, #0
    9980:	00000020 	andeq	r0, r0, r0, lsr #32
    9984:	0020234b 	eoreq	r2, r0, fp, asr #6
    9988:	00231000 	eoreq	r1, r3, r0
    998c:	00249000 	eoreq	r9, r4, r0
    9990:	2a9c0100 	bcs	fe709d98 <_estack+0xde704d98>
    9994:	000020af 	andeq	r2, r0, pc, lsr #1
    9998:	00002310 	andeq	r2, r0, r0, lsl r3
    999c:	00000c28 	andeq	r0, r0, r8, lsr #24
    99a0:	02010801 	andeq	r0, r1, #65536	; 0x10000
    99a4:	0000236e 	andeq	r2, r0, lr, ror #6
    99a8:	0020be39 	eoreq	fp, r0, r9, lsr lr
    99ac:	af380000 	svcge	0x00380000
    99b0:	1c000020 	stcne	0, cr0, [r0], {32}
    99b4:	20000023 	andcs	r0, r0, r3, lsr #32
    99b8:	01000023 	tsteq	r0, r3, lsr #32
    99bc:	89020108 	stmdbhi	r2, {r3, r8}
    99c0:	39000023 	stmdbcc	r0, {r0, r1, r5}
    99c4:	000020be 	strheq	r2, [r0], -lr
    99c8:	22322e00 	eorscs	r2, r2, #0, 28
    99cc:	233e0000 	teqcs	lr, #0
    99d0:	0c400000 	mareq	acc0, r0, r0
    99d4:	1a010000 	bne	499dc <__ccfg+0x29a34>
    99d8:	6d2a0201 	sfmvs	f0, 4, [sl, #-4]!
    99dc:	4c000021 	stcmi	0, cr0, [r0], {33}	; 0x21
    99e0:	58000023 	stmdapl	r0, {r0, r1, r5}
    99e4:	0100000c 	tsteq	r0, ip
    99e8:	0b020121 	bleq	89e74 <__ccfg+0x69ecc>
    99ec:	3a000024 	bcc	9a84 <__exidx_end+0x49dc>
    99f0:	00002178 	andeq	r2, r0, r8, ror r1
    99f4:	0000234c 	andeq	r2, r0, ip, asr #6
    99f8:	00000c58 	andeq	r0, r0, r8, asr ip
    99fc:	04013104 	streq	r3, [r1], #-260	; 0xfffffefc
    9a00:	0021b838 	eoreq	fp, r1, r8, lsr r8
    9a04:	00234c00 	eoreq	r4, r3, r0, lsl #24
    9a08:	00235800 	eoreq	r5, r3, r0, lsl #16
    9a0c:	01250400 			; <UNDEFINED> instruction: 0x01250400
    9a10:	0023df04 	eoreq	sp, r3, r4, lsl #30
    9a14:	21c74c00 	biccs	r4, r7, r0, lsl #24
    9a18:	041c0000 	ldreq	r0, [ip], #-0
    9a1c:	3a002100 	bcc	11e24 <__exidx_end+0xcd7c>
    9a20:	00002183 	andeq	r2, r0, r3, lsl #3
    9a24:	00002358 	andeq	r2, r0, r8, asr r3
    9a28:	00000c60 	andeq	r0, r0, r0, ror #24
    9a2c:	04012604 	streq	r2, [r1], #-1540	; 0xfffff9fc
    9a30:	000c602b 	andeq	r6, ip, fp, lsr #32
    9a34:	21924c00 	orrscs	r4, r2, r0, lsl #24
    9a38:	03400000 	movteq	r0, #0
    9a3c:	9f4c2100 	svcls	0x004c2100
    9a40:	bc000021 	stclt	0, cr0, [r0], {33}	; 0x21
    9a44:	00210003 	eoreq	r0, r1, r3
    9a48:	3a000000 	bcc	9a50 <__exidx_end+0x49a8>
    9a4c:	000020cc 	andeq	r2, r0, ip, asr #1
    9a50:	0000235c 	andeq	r2, r0, ip, asr r3
    9a54:	00000c78 	andeq	r0, r0, r8, ror ip
    9a58:	02012201 	andeq	r2, r1, #268435456	; 0x10000000
    9a5c:	000c782b 	andeq	r7, ip, fp, lsr #16
    9a60:	20db2d00 	sbcscs	r2, fp, r0, lsl #26
    9a64:	29b90000 	ldmibcs	r9!, {}	; <UNPREDICTABLE>
    9a68:	e72d0000 	str	r0, [sp, -r0]!
    9a6c:	cc000020 	stcgt	0, cr0, [r0], {32}
    9a70:	2c000029 	stccs	0, cr0, [r0], {41}	; 0x29
    9a74:	000020f3 	strdeq	r2, [r0], -r3
    9a78:	0020ff2d 	eoreq	pc, r0, sp, lsr #30
    9a7c:	0029ea00 	eoreq	lr, r9, r0, lsl #20
    9a80:	210b2c00 	tstcs	fp, r0, lsl #24
    9a84:	172d0000 	strne	r0, [sp, -r0]!
    9a88:	fd000021 	stc2	0, cr0, [r0, #-132]	; 0xffffff7c
    9a8c:	2c000029 	stccs	0, cr0, [r0], {41}	; 0x29
    9a90:	00002123 	andeq	r2, r0, r3, lsr #2
    9a94:	00212f2d 	eoreq	r2, r1, sp, lsr #30
    9a98:	002a1000 	eoreq	r1, sl, r0
    9a9c:	213b2d00 	teqcs	fp, r0, lsl #26
    9aa0:	2a230000 	bcs	8c9aa8 <__ccfg+0x8a9b00>
    9aa4:	472d0000 	strmi	r0, [sp, -r0]!
    9aa8:	4e000021 	cdpmi	0, 0, cr0, cr0, cr1, {1}
    9aac:	2c00002a 	stccs	0, cr0, [r0], {42}	; 0x2a
    9ab0:	00002153 	andeq	r2, r0, r3, asr r1
    9ab4:	00000000 	andeq	r0, r0, r0
    9ab8:	00000731 	andeq	r0, r0, r1, lsr r7
    9abc:	239a0003 	orrscs	r0, sl, #3
    9ac0:	01040000 	mrseq	r0, (UNDEF: 4)
    9ac4:	000000bd 	strheq	r0, [r0], -sp
    9ac8:	00232b0c 	eoreq	r2, r3, ip, lsl #22
    9acc:	0006e400 	andeq	lr, r6, r0, lsl #8
    9ad0:	000de000 	andeq	lr, sp, r0
    9ad4:	00000000 	andeq	r0, r0, r0
    9ad8:	005b7600 	subseq	r7, fp, r0, lsl #12
    9adc:	06010200 	streq	r0, [r1], -r0, lsl #4
    9ae0:	0000098a 	andeq	r0, r0, sl, lsl #19
    9ae4:	44050202 	strmi	r0, [r5], #-514	; 0xfffffdfe
    9ae8:	02000008 	andeq	r0, r0, #8
    9aec:	06370504 	ldrteq	r0, [r7], -r4, lsl #10
    9af0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    9af4:	00063205 	andeq	r3, r6, r5, lsl #4
    9af8:	08e10300 	stmiaeq	r1!, {r8, r9}^
    9afc:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    9b00:	00004d17 	andeq	r4, r0, r7, lsl sp
    9b04:	08010200 	stmdaeq	r1, {r9}
    9b08:	00000988 	andeq	r0, r0, r8, lsl #19
    9b0c:	00040a03 	andeq	r0, r4, r3, lsl #20
    9b10:	1c310200 	lfmne	f0, 4, [r1], #-0
    9b14:	00000060 	andeq	r0, r0, r0, rrx
    9b18:	80070202 	andhi	r0, r7, r2, lsl #4
    9b1c:	0300000a 	movweq	r0, #10
    9b20:	000009a1 	andeq	r0, r0, r1, lsr #19
    9b24:	731b3402 	tstvc	fp, #33554432	; 0x2000000
    9b28:	02000000 	andeq	r0, r0, #0
    9b2c:	03cf0704 	biceq	r0, pc, #4, 14	; 0x100000
    9b30:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    9b34:	0003ca07 	andeq	ip, r3, r7, lsl #20
    9b38:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    9b3c:	00746e69 	rsbseq	r6, r4, r9, ror #28
    9b40:	d4070402 	strle	r0, [r7], #-1026	; 0xfffffbfe
    9b44:	03000003 	movweq	r0, #3
    9b48:	00000456 	andeq	r0, r0, r6, asr r4
    9b4c:	9b1b2803 	blls	6d3b60 <__ccfg+0x6b3bb8>
    9b50:	05000000 	streq	r0, [r0, #-0]
    9b54:	00000911 	andeq	r0, r0, r1, lsl r9
    9b58:	b3000a04 	movwlt	r0, #2564	; 0xa04
    9b5c:	06000000 	streq	r0, [r0], -r0
    9b60:	00000a12 	andeq	r0, r0, r2, lsl sl
    9b64:	000000b3 	strheq	r0, [r0], -r3
    9b68:	07000100 	streq	r0, [r0, -r0, lsl #2]
    9b6c:	09130304 	ldmdbeq	r3, {r2, r8, r9}
    9b70:	63030000 	movwvs	r0, #12288	; 0x3000
    9b74:	00008f18 	andeq	r8, r0, r8, lsl pc
    9b78:	24ae0300 	strtcs	r0, [lr], #768	; 0x300
    9b7c:	27040000 	strcs	r0, [r4, -r0]
    9b80:	00005412 	andeq	r5, r0, r2, lsl r4
    9b84:	00c10800 	sbceq	r0, r1, r0, lsl #16
    9b88:	c7030000 	strgt	r0, [r3, -r0]
    9b8c:	04000019 	streq	r0, [r0], #-25	; 0xffffffe7
    9b90:	0041112b 	subeq	r1, r1, fp, lsr #2
    9b94:	d2090000 	andle	r0, r9, #0
    9b98:	03000000 	movweq	r0, #0
    9b9c:	000024ff 	strdeq	r2, [r0], -pc	; <UNPREDICTABLE>
    9ba0:	67122c04 	ldrvs	r2, [r2, -r4, lsl #24]
    9ba4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    9ba8:	000000e3 	andeq	r0, r0, r3, ror #1
    9bac:	00053803 	andeq	r3, r5, r3, lsl #16
    9bb0:	122d0400 	eorne	r0, sp, #0, 8
    9bb4:	00000067 	andeq	r0, r0, r7, rrx
    9bb8:	00092103 	andeq	r2, r9, r3, lsl #2
    9bbc:	0f2e0400 	svceq	0x002e0400
    9bc0:	0000010c 	andeq	r0, r0, ip, lsl #2
    9bc4:	00c1040a 	sbceq	r0, r1, sl, lsl #8
    9bc8:	080b0000 	stmdaeq	fp, {}	; <UNPREDICTABLE>
    9bcc:	a0093204 	andge	r3, r9, r4, lsl #4
    9bd0:	0c000001 	stceq	0, cr0, [r0], {1}
    9bd4:	0000003e 	andeq	r0, r0, lr, lsr r0
    9bd8:	d2073404 	andle	r3, r7, #4, 8	; 0x4000000
    9bdc:	01000000 	mrseq	r0, (UNDEF: 0)
    9be0:	0c000701 	stceq	7, cr0, [r0], {1}
    9be4:	0000053e 	andeq	r0, r0, lr, lsr r5
    9be8:	d2033504 	andle	r3, r3, #4, 10	; 0x1000000
    9bec:	01000000 	mrseq	r0, (UNDEF: 0)
    9bf0:	0c000601 	stceq	6, cr0, [r0], {1}
    9bf4:	0000026f 	andeq	r0, r0, pc, ror #4
    9bf8:	d2033604 	andle	r3, r3, #4, 12	; 0x400000
    9bfc:	01000000 	mrseq	r0, (UNDEF: 0)
    9c00:	0c000501 	cfstr32eq	mvfx0, [r0], {1}
    9c04:	00000578 	andeq	r0, r0, r8, ror r5
    9c08:	d2033704 	andle	r3, r3, #4, 14	; 0x100000
    9c0c:	01000000 	mrseq	r0, (UNDEF: 0)
    9c10:	0c000401 	cfstrseq	mvf0, [r0], {1}
    9c14:	00000865 	andeq	r0, r0, r5, ror #16
    9c18:	d2033804 	andle	r3, r3, #4, 16	; 0x40000
    9c1c:	01000000 	mrseq	r0, (UNDEF: 0)
    9c20:	0d000004 	stceq	0, cr0, [r0, #-16]
    9c24:	00000545 	andeq	r0, r0, r5, asr #10
    9c28:	d2073a04 	andle	r3, r7, #4, 20	; 0x4000
    9c2c:	01000000 	mrseq	r0, (UNDEF: 0)
    9c30:	00075e0d 	andeq	r5, r7, sp, lsl #28
    9c34:	033c0400 	teqeq	ip, #0, 8
    9c38:	000000d2 	ldrdeq	r0, [r0], -r2
    9c3c:	0b520d02 	bleq	148d04c <__ccfg+0x146d0a4>
    9c40:	3d040000 	stccc	0, cr0, [r4, #-0]
    9c44:	0000d203 	andeq	sp, r0, r3, lsl #4
    9c48:	930d0300 	movwls	r0, #54016	; 0xd300
    9c4c:	04000007 	streq	r0, [r0], #-7
    9c50:	00e3083f 	rsceq	r0, r3, pc, lsr r8
    9c54:	00040000 	andeq	r0, r4, r0
    9c58:	0002c103 	andeq	ip, r2, r3, lsl #2
    9c5c:	03410400 	movteq	r0, #5120	; 0x1400
    9c60:	00000112 	andeq	r0, r0, r2, lsl r1
    9c64:	0001a009 	andeq	sl, r1, r9
    9c68:	057f0e00 	ldrbeq	r0, [pc, #-3584]!	; 8e70 <__exidx_end+0x3dc8>
    9c6c:	43040000 	movwmi	r0, #16384	; 0x4000
    9c70:	0001ac1a 	andeq	sl, r1, sl, lsl ip
    9c74:	0e010100 	adfeqs	f0, f1, f0
    9c78:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
    9c7c:	cd0e4504 	cfstr32gt	mvfx4, [lr, #-16]
    9c80:	01000001 	tsteq	r0, r1
    9c84:	d3040a01 	movwle	r0, #18945	; 0x4a01
    9c88:	02000001 	andeq	r0, r0, #1
    9c8c:	09910801 	ldmibeq	r1, {r0, fp}
    9c90:	d3080000 	movwle	r0, #32768	; 0x8000
    9c94:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    9c98:	000002ca 	andeq	r0, r0, sl, asr #5
    9c9c:	cd1e4504 	cfldr32gt	mvfx4, [lr, #-16]
    9ca0:	01000001 	tsteq	r0, r1
    9ca4:	05080b01 	streq	r0, [r8, #-2817]	; 0xfffff4ff
    9ca8:	021e098f 	andseq	r0, lr, #2342912	; 0x23c000
    9cac:	4f0d0000 	svcmi	0x000d0000
    9cb0:	05000006 	streq	r0, [r0, #-6]
    9cb4:	00670b90 	mlseq	r7, r0, fp, r0
    9cb8:	0d000000 	stceq	0, cr0, [r0, #-0]
    9cbc:	00000c84 	andeq	r0, r0, r4, lsl #25
    9cc0:	c1079105 	tstgt	r7, r5, lsl #2
    9cc4:	04000000 	streq	r0, [r0], #-0
    9cc8:	0001f40d 	andeq	pc, r1, sp, lsl #8
    9ccc:	10920500 	addsne	r0, r2, r0, lsl #10
    9cd0:	000000de 	ldrdeq	r0, [r0], -lr
    9cd4:	0b030006 	bleq	c9cf4 <__ccfg+0xa9d4c>
    9cd8:	0500000a 	streq	r0, [r0, #-10]
    9cdc:	01ed0393 			; <UNDEFINED> instruction: 0x01ed0393
    9ce0:	1e0f0000 	cdpne	0, 0, cr0, cr15, cr0, {0}
    9ce4:	35000002 	strcc	r0, [r0, #-2]
    9ce8:	10000002 	andne	r0, r0, r2
    9cec:	07b40e00 	ldreq	r0, [r4, r0, lsl #28]!
    9cf0:	99050000 	stmdbls	r5, {}	; <UNPREDICTABLE>
    9cf4:	00022a0f 	andeq	r2, r2, pc, lsl #20
    9cf8:	0b010100 	bleq	4a100 <__ccfg+0x2a158>
    9cfc:	09910601 	ldmibeq	r1, {r0, r9, sl}
    9d00:	0000026d 	andeq	r0, r0, sp, ror #4
    9d04:	00079a0c 	andeq	r9, r7, ip, lsl #20
    9d08:	07930600 	ldreq	r0, [r3, r0, lsl #12]
    9d0c:	000000d2 	ldrdeq	r0, [r0], -r2
    9d10:	00010701 	andeq	r0, r1, r1, lsl #14
    9d14:	0004b40c 	andeq	fp, r4, ip, lsl #8
    9d18:	03940600 	orrseq	r0, r4, #0, 12
    9d1c:	000000d2 	ldrdeq	r0, [r0], -r2
    9d20:	00000101 	andeq	r0, r0, r1, lsl #2
    9d24:	08710300 	ldmdaeq	r1!, {r8, r9}^
    9d28:	96060000 	strls	r0, [r6], -r0
    9d2c:	00024303 	andeq	r4, r2, r3, lsl #6
    9d30:	026d0800 	rsbeq	r0, sp, #0, 16
    9d34:	790f0000 	stmdbvc	pc, {}	; <UNPREDICTABLE>
    9d38:	89000002 	stmdbhi	r0, {r1}
    9d3c:	10000002 	andne	r0, r0, r2
    9d40:	027e0800 	rsbseq	r0, lr, #0, 16
    9d44:	830e0000 	movwhi	r0, #57344	; 0xe000
    9d48:	06000003 	streq	r0, [r0], -r3
    9d4c:	0289179c 	addeq	r1, r9, #156, 14	; 0x2700000
    9d50:	01010000 	mrseq	r0, (UNDEF: 1)
    9d54:	0000cd0f 	andeq	ip, r0, pc, lsl #26
    9d58:	0002a700 	andeq	sl, r2, r0, lsl #14
    9d5c:	08001000 	stmdaeq	r0, {ip}
    9d60:	0000029c 	muleq	r0, ip, r2
    9d64:	0004f80e 	andeq	pc, r4, lr, lsl #16
    9d68:	13060700 	movwne	r0, #26368	; 0x6700
    9d6c:	000002a7 	andeq	r0, r0, r7, lsr #5
    9d70:	400e0101 	andmi	r0, lr, r1, lsl #2
    9d74:	05000007 	streq	r0, [r0, #-7]
    9d78:	00e30ec3 	rsceq	r0, r3, r3, asr #29
    9d7c:	01010000 	mrseq	r0, (UNDEF: 1)
    9d80:	0009aa11 	andeq	sl, r9, r1, lsl sl
    9d84:	016e0800 	cmneq	lr, r0, lsl #16
    9d88:	0002d510 	andeq	sp, r2, r0, lsl r5
    9d8c:	db040a00 	blle	10c594 <__ccfg+0xec5ec>
    9d90:	12000002 	andne	r0, r0, #2
    9d94:	0002e701 	andeq	lr, r2, r1, lsl #14
    9d98:	00c11300 	sbceq	r1, r1, r0, lsl #6
    9d9c:	0f000000 	svceq	0x00000000
    9da0:	000001da 	ldrdeq	r0, [r0], -sl
    9da4:	000002f2 	strdeq	r0, [r0], -r2
    9da8:	e7080010 	smlad	r8, r0, r0, r0
    9dac:	14000002 	strne	r0, [r0], #-2
    9db0:	00000808 	andeq	r0, r0, r8, lsl #16
    9db4:	13017f08 	movwne	r7, #7944	; 0x1f08
    9db8:	000002f2 	strdeq	r0, [r0], -r2
    9dbc:	66140101 	ldrvs	r0, [r4], -r1, lsl #2
    9dc0:	08000003 	stmdaeq	r0, {r0, r1}
    9dc4:	ef140182 	svc	0x00140182
    9dc8:	01000000 	mrseq	r0, (UNDEF: 0)
    9dcc:	09040b01 	stmdbeq	r4, {r0, r8, r9, fp}
    9dd0:	03390908 	teqeq	r9, #8, 18	; 0x20000
    9dd4:	fa0d0000 	blx	349ddc <__ccfg+0x329e34>
    9dd8:	09000001 	stmdbeq	r0, {r0}
    9ddc:	00c1070f 	sbceq	r0, r1, pc, lsl #14
    9de0:	0d000000 	stceq	0, cr0, [r0, #-0]
    9de4:	000009e5 	andeq	r0, r0, r5, ror #19
    9de8:	c1031009 	tstgt	r3, r9
    9dec:	02000000 	andeq	r0, r0, #0
    9df0:	0a9c0300 	beq	fe70a9f8 <_estack+0xde7059f8>
    9df4:	11090000 	mrsne	r0, (UNDEF: 9)
    9df8:	00031503 	andeq	r1, r3, r3, lsl #10
    9dfc:	09200b00 	stmdbeq	r0!, {r8, r9, fp}
    9e00:	03b70916 			; <UNDEFINED> instruction: 0x03b70916
    9e04:	430d0000 	movwmi	r0, #53248	; 0xd000
    9e08:	09000004 	stmdbeq	r0, {r2}
    9e0c:	03d10817 	bicseq	r0, r1, #1507328	; 0x170000
    9e10:	0d000000 	stceq	0, cr0, [r0, #-0]
    9e14:	0000078b 	andeq	r0, r0, fp, lsl #15
    9e18:	ec081809 	stc	8, cr1, [r8], {9}
    9e1c:	04000003 	streq	r0, [r0], #-3
    9e20:	0009330d 	andeq	r3, r9, sp, lsl #6
    9e24:	08190900 	ldmdaeq	r9, {r8, fp}
    9e28:	00000422 	andeq	r0, r0, r2, lsr #8
    9e2c:	09dd0d08 	ldmibeq	sp, {r3, r8, sl, fp}^
    9e30:	1a090000 	bne	249e38 <__ccfg+0x229e90>
    9e34:	00043d08 	andeq	r3, r4, r8, lsl #26
    9e38:	cc0d0c00 	stcgt	12, cr0, [sp], {-0}
    9e3c:	09000007 	stmdbeq	r0, {r0, r1, r2}
    9e40:	0453081b 	ldrbeq	r0, [r3], #-2075	; 0xfffff7e5
    9e44:	0d100000 	ldceq	0, cr0, [r0, #-0]
    9e48:	0000083c 	andeq	r0, r0, ip, lsr r8
    9e4c:	53081c09 	movwpl	r1, #35849	; 0x8c09
    9e50:	14000004 	strne	r0, [r0], #-4
    9e54:	0001dd0d 	andeq	sp, r1, sp, lsl #26
    9e58:	081d0900 	ldmdaeq	sp, {r8, fp}
    9e5c:	00000453 	andeq	r0, r0, r3, asr r4
    9e60:	02b80d18 	adcseq	r0, r8, #24, 26	; 0x600
    9e64:	1e090000 	cdpne	0, 0, cr0, cr9, cr0, {0}
    9e68:	00008106 	andeq	r8, r0, r6, lsl #2
    9e6c:	15001c00 	strne	r1, [r0, #-3072]	; 0xfffff400
    9e70:	00008101 	andeq	r8, r0, r1, lsl #2
    9e74:	0003d100 	andeq	sp, r3, r0, lsl #2
    9e78:	00811300 	addeq	r1, r1, r0, lsl #6
    9e7c:	81130000 	tsthi	r3, r0
    9e80:	13000000 	movwne	r0, #0
    9e84:	000000b5 	strheq	r0, [r0], -r5
    9e88:	b7040a00 	strlt	r0, [r4, -r0, lsl #20]
    9e8c:	15000003 	strne	r0, [r0, #-3]
    9e90:	00008101 	andeq	r8, r0, r1, lsl #2
    9e94:	0003ec00 	andeq	lr, r3, r0, lsl #24
    9e98:	00811300 	addeq	r1, r1, r0, lsl #6
    9e9c:	81130000 	tsthi	r3, r0
    9ea0:	00000000 	andeq	r0, r0, r0
    9ea4:	03d7040a 	bicseq	r0, r7, #167772160	; 0xa000000
    9ea8:	01150000 	tsteq	r5, r0
    9eac:	00000081 	andeq	r0, r0, r1, lsl #1
    9eb0:	00000416 	andeq	r0, r0, r6, lsl r4
    9eb4:	00008113 	andeq	r8, r0, r3, lsl r1
    9eb8:	01001300 	mrseq	r1, LR_irq
    9ebc:	81130000 	tsthi	r3, r0
    9ec0:	13000000 	movwne	r0, #0
    9ec4:	00000416 	andeq	r0, r0, r6, lsl r4
    9ec8:	00041c13 	andeq	r1, r4, r3, lsl ip
    9ecc:	040a0000 	streq	r0, [sl], #-0
    9ed0:	00000081 	andeq	r0, r0, r1, lsl #1
    9ed4:	0339040a 	teqeq	r9, #167772160	; 0xa000000
    9ed8:	040a0000 	streq	r0, [sl], #-0
    9edc:	000003f2 	strdeq	r0, [r0], -r2
    9ee0:	00810115 	addeq	r0, r1, r5, lsl r1
    9ee4:	043d0000 	ldrteq	r0, [sp], #-0
    9ee8:	00130000 	andseq	r0, r3, r0
    9eec:	13000001 	movwne	r0, #1
    9ef0:	0000041c 	andeq	r0, r0, ip, lsl r4
    9ef4:	28040a00 	stmdacs	r4, {r9, fp}
    9ef8:	15000004 	strne	r0, [r0, #-4]
    9efc:	00008101 	andeq	r8, r0, r1, lsl #2
    9f00:	00045300 	andeq	r5, r4, r0, lsl #6
    9f04:	01001300 	mrseq	r1, LR_irq
    9f08:	0a000000 	beq	9f10 <__exidx_end+0x4e68>
    9f0c:	00044304 	andeq	r4, r4, r4, lsl #6
    9f10:	0a520300 	beq	148ab18 <__ccfg+0x146ab70>
    9f14:	1f090000 	svcne	0x00090000
    9f18:	00034503 	andeq	r4, r3, r3, lsl #10
    9f1c:	04590800 	ldrbeq	r0, [r9], #-2048	; 0xfffff800
    9f20:	43140000 	tstmi	r4, #0
    9f24:	08000003 	stmdaeq	r0, {r0, r1}
    9f28:	e30e02d8 	movw	r0, #58072	; 0xe2d8
    9f2c:	01000000 	mrseq	r0, (UNDEF: 0)
    9f30:	08081601 	stmdaeq	r8, {r0, r9, sl, ip}
    9f34:	a0090303 	andge	r0, r9, r3, lsl #6
    9f38:	17000004 	strne	r0, [r0, -r4]
    9f3c:	00003832 	andeq	r3, r0, r2, lsr r8
    9f40:	07030708 	streq	r0, [r3, -r8, lsl #14]
    9f44:	000000c1 	andeq	r0, r0, r1, asr #1
    9f48:	0bdc1700 	bleq	ff70fb50 <_estack+0xdf70ab50>
    9f4c:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    9f50:	00f40803 	rscseq	r0, r4, r3, lsl #16
    9f54:	00040000 	andeq	r0, r4, r0
    9f58:	0003fb11 	andeq	pc, r3, r1, lsl fp	; <UNPREDICTABLE>
    9f5c:	03090800 	movweq	r0, #38912	; 0x9800
    9f60:	00047903 	andeq	r7, r4, r3, lsl #18
    9f64:	00331800 	eorseq	r1, r3, r0, lsl #16
    9f68:	08300000 	ldmdaeq	r0!, {}	; <UNPREDICTABLE>
    9f6c:	1008030b 	andne	r0, r8, fp, lsl #6
    9f70:	17000005 	strne	r0, [r0, -r5]
    9f74:	00001add 	ldrdeq	r1, [r0], -sp
    9f78:	07031408 	streq	r1, [r3, -r8, lsl #8]
    9f7c:	000000c1 	andeq	r0, r0, r1, asr #1
    9f80:	09541700 	ldmdbeq	r4, {r8, r9, sl, ip}^
    9f84:	15080000 	strne	r0, [r8, #-0]
    9f88:	00c10703 	sbceq	r0, r1, r3, lsl #14
    9f8c:	17020000 	strne	r0, [r2, -r0]
    9f90:	000049a2 	andeq	r4, r0, r2, lsr #19
    9f94:	0a031608 	beq	cf7bc <__ccfg+0xaf814>
    9f98:	000002c8 	andeq	r0, r0, r8, asr #5
    9f9c:	44051704 	strmi	r1, [r5], #-1796	; 0xfffff8fc
    9fa0:	17080000 	strne	r0, [r8, -r0]
    9fa4:	00f40803 	rscseq	r0, r4, r3, lsl #16
    9fa8:	17080000 	strne	r0, [r8, -r0]
    9fac:	00000007 	andeq	r0, r0, r7
    9fb0:	0f031808 	svceq	0x00031808
    9fb4:	00000510 	andeq	r0, r0, r0, lsl r5
    9fb8:	07c7170c 	strbeq	r1, [r7, ip, lsl #14]
    9fbc:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
    9fc0:	05201503 	streq	r1, [r0, #-1283]!	; 0xfffffafd
    9fc4:	002c0000 	eoreq	r0, ip, r0
    9fc8:	0004a00f 	andeq	sl, r4, pc
    9fcc:	00052000 	andeq	r2, r5, r0
    9fd0:	00881900 	addeq	r1, r8, r0, lsl #18
    9fd4:	00030000 	andeq	r0, r3, r0
    9fd8:	04ad040a 	strteq	r0, [sp], #1034	; 0x40a
    9fdc:	49110000 	ldmdbmi	r1, {}	; <UNPREDICTABLE>
    9fe0:	08000009 	stmdaeq	r0, {r0, r3}
    9fe4:	ad1b031c 	ldcge	3, cr0, [fp, #-112]	; 0xffffff90
    9fe8:	14000004 	strne	r0, [r0], #-4
    9fec:	00000929 	andeq	r0, r0, r9, lsr #18
    9ff0:	14031e08 	strne	r1, [r3], #-3592	; 0xfffff1f8
    9ff4:	00000542 	andeq	r0, r0, r2, asr #10
    9ff8:	040a0101 	streq	r0, [sl], #-257	; 0xfffffeff
    9ffc:	00000526 	andeq	r0, r0, r6, lsr #10
    a000:	00000e1a 	andeq	r0, r0, sl, lsl lr
    a004:	111a0100 	tstne	sl, r0, lsl #2
    a008:	00000465 	andeq	r0, r0, r5, ror #8
    a00c:	88030501 	stmdahi	r3, {r0, r8, sl}
    a010:	1b000050 	blne	a158 <__exidx_end+0x50b0>
    a014:	00002391 	muleq	r0, r1, r3
    a018:	160d1f01 	strne	r1, [sp], -r1, lsl #30
    a01c:	05000004 	streq	r0, [r0, #-4]
    a020:	0005f803 	andeq	pc, r5, r3, lsl #16
    a024:	237d1c20 	cmncs	sp, #32, 24	; 0x2000
    a028:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    a02c:	0081010c 	addeq	r0, r1, ip, lsl #2
    a030:	29880000 	stmibcs	r8, {}	; <UNPREDICTABLE>
    a034:	298c0000 	stmibcs	ip, {}	; <UNPREDICTABLE>
    a038:	9c010000 	stcls	0, cr0, [r1], {-0}
    a03c:	00000597 	muleq	r0, r7, r5
    a040:	0100701d 	tsteq	r0, sp, lsl r0
    a044:	01002258 	tsteq	r0, r8, asr r2
    a048:	2a610000 	bcs	184a050 <__ccfg+0x182a0a8>
    a04c:	1c000000 	stcne	0, cr0, [r0], {-0}
    a050:	0000233c 	andeq	r2, r0, ip, lsr r3
    a054:	010c5201 	tsteq	ip, r1, lsl #4
    a058:	00000081 	andeq	r0, r0, r1, lsl #1
    a05c:	00002984 	andeq	r2, r0, r4, lsl #19
    a060:	00002988 	andeq	r2, r0, r8, lsl #19
    a064:	05c19c01 	strbeq	r9, [r1, #3073]	; 0xc01
    a068:	701d0000 	andsvc	r0, sp, r0
    a06c:	22520100 	subscs	r0, r2, #0, 2
    a070:	00000100 	andeq	r0, r0, r0, lsl #2
    a074:	00002a74 	andeq	r2, r0, r4, ror sl
    a078:	23631c00 	cmncs	r3, #0, 24
    a07c:	4d010000 	stcmi	0, cr0, [r1, #-0]
    a080:	0081010c 	addeq	r0, r1, ip, lsl #2
    a084:	297c0000 	ldmdbcs	ip!, {}^	; <UNPREDICTABLE>
    a088:	29840000 	stmibcs	r4, {}	; <UNPREDICTABLE>
    a08c:	9c010000 	stcls	0, cr0, [r1], {-0}
    a090:	000005f9 	strdeq	r0, [r0], -r9
    a094:	0100701d 	tsteq	r0, sp, lsl r0
    a098:	0100224d 	tsteq	r0, sp, asr #4
    a09c:	2a870000 	bcs	fe1ca0a4 <_estack+0xde1c50a4>
    a0a0:	8a1e0000 	bhi	78a0a8 <__ccfg+0x76a100>
    a0a4:	01000023 	tsteq	r0, r3, lsr #32
    a0a8:	041c2f4d 	ldreq	r2, [ip], #-3917	; 0xfffff0b3
    a0ac:	51010000 	mrspl	r0, (UNDEF: 1)
    a0b0:	23491c00 	movtcs	r1, #39936	; 0x9c00
    a0b4:	42010000 	andmi	r0, r1, #0
    a0b8:	0081010c 	addeq	r0, r1, ip, lsl #2
    a0bc:	29580000 	ldmdbcs	r8, {}^	; <UNPREDICTABLE>
    a0c0:	297c0000 	ldmdbcs	ip!, {}^	; <UNPREDICTABLE>
    a0c4:	9c010000 	stcls	0, cr0, [r1], {-0}
    a0c8:	00000662 	andeq	r0, r0, r2, ror #12
    a0cc:	7968701d 	stmdbvc	r8!, {r0, r2, r3, r4, ip, sp, lr}^
    a0d0:	1e420100 	dvfnes	f0, f2, f0
    a0d4:	00000081 	andeq	r0, r0, r1, lsl #1
    a0d8:	00002a9a 	muleq	r0, sl, sl
    a0dc:	0100701d 	tsteq	r0, sp, lsl r0
    a0e0:	01002b42 	tsteq	r0, r2, asr #22
    a0e4:	2ab80000 	bcs	fee0a0ec <_estack+0xdee050ec>
    a0e8:	6c1d0000 	ldcvs	0, cr0, [sp], {-0}
    a0ec:	01006e65 	tsteq	r0, r5, ror #28
    a0f0:	00813242 	addeq	r3, r1, r2, asr #4
    a0f4:	2acb0000 	bcs	ff2ca0fc <_estack+0xdf2c50fc>
    a0f8:	731d0000 	tstvc	sp, #0
    a0fc:	01007365 	tsteq	r0, r5, ror #6
    a100:	04163c42 	ldreq	r3, [r6], #-3138	; 0xfffff3be
    a104:	2ade0000 	bcs	ff78a10c <_estack+0xdf78510c>
    a108:	8a1e0000 	bhi	78a110 <__ccfg+0x76a168>
    a10c:	01000023 	tsteq	r0, r3, lsr #32
    a110:	041c1743 	ldreq	r1, [ip], #-1859	; 0xfffff8bd
    a114:	91020000 	mrsls	r0, (UNDEF: 2)
    a118:	701c0000 	andsvc	r0, ip, r0
    a11c:	01000023 	tsteq	r0, r3, lsr #32
    a120:	81010c37 	tsthi	r1, r7, lsr ip
    a124:	34000000 	strcc	r0, [r0], #-0
    a128:	58000029 	stmdapl	r0, {r0, r3, r5}
    a12c:	01000029 	tsteq	r0, r9, lsr #32
    a130:	00069b9c 	muleq	r6, ip, fp
    a134:	68701d00 	ldmdavs	r0!, {r8, sl, fp, ip}^
    a138:	37010079 	smlsdxcc	r1, r9, r0, r0
    a13c:	0000811e 	andeq	r8, r0, lr, lsl r1
    a140:	002af100 	eoreq	pc, sl, r0, lsl #2
    a144:	64661f00 	strbtvs	r1, [r6], #-3840	; 0xfffff100
    a148:	27370100 	ldrcs	r0, [r7, -r0, lsl #2]!
    a14c:	00000081 	andeq	r0, r0, r1, lsl #1
    a150:	20005101 	andcs	r5, r0, r1, lsl #2
    a154:	00002356 	andeq	r2, r0, r6, asr r3
    a158:	010c2101 	tsteq	ip, r1, lsl #2
    a15c:	00000081 	andeq	r0, r0, r1, lsl #1
    a160:	0006db01 	andeq	sp, r6, r1, lsl #22
    a164:	68702100 	ldmdavs	r0!, {r8, sp}^
    a168:	21010079 	tstcs	r1, r9, ror r0
    a16c:	0000811e 	andeq	r8, r0, lr, lsl r1
    a170:	64662100 	strbtvs	r2, [r6], #-256	; 0xffffff00
    a174:	27210100 	strcs	r0, [r1, -r0, lsl #2]!
    a178:	00000081 	andeq	r0, r0, r1, lsl #1
    a17c:	0014b922 	andseq	fp, r4, r2, lsr #18
    a180:	33210100 			; <UNDEFINED> instruction: 0x33210100
    a184:	000000b5 	strheq	r0, [r0], -r5
    a188:	01006923 	tsteq	r0, r3, lsr #18
    a18c:	00810625 	addeq	r0, r1, r5, lsr #12
    a190:	24000000 	strcs	r0, [r0], #-0
    a194:	0000069b 	muleq	r0, fp, r6
    a198:	0000298c 	andeq	r2, r0, ip, lsl #19
    a19c:	000029d4 	ldrdeq	r2, [r0], -r4
    a1a0:	ad259c01 	stcge	12, cr9, [r5, #-4]!
    a1a4:	0f000006 	svceq	0x00000006
    a1a8:	2500002b 	strcs	r0, [r0, #-43]	; 0xffffffd5
    a1ac:	000006b9 			; <UNDEFINED> instruction: 0x000006b9
    a1b0:	00002b2d 	andeq	r2, r0, sp, lsr #22
    a1b4:	0006c425 	andeq	ip, r6, r5, lsr #8
    a1b8:	002b4b00 	eoreq	r4, fp, r0, lsl #22
    a1bc:	06d02600 	ldrbeq	r2, [r0], r0, lsl #12
    a1c0:	9b270000 	blls	9ca1c8 <__ccfg+0x9aa220>
    a1c4:	c2000006 	andgt	r0, r0, #6
    a1c8:	d4000029 	strle	r0, [r0], #-41	; 0xffffffd7
    a1cc:	01000029 	tsteq	r0, r9, lsr #32
    a1d0:	ad280c21 	stcge	12, cr0, [r8, #-132]!	; 0xffffff7c
    a1d4:	01000006 	tsteq	r0, r6
    a1d8:	06b92855 	ssateq	r2, #26, r5, asr #16
    a1dc:	56010000 	strpl	r0, [r1], -r0
    a1e0:	0006c429 	andeq	ip, r6, r9, lsr #8
    a1e4:	06d02600 	ldrbeq	r2, [r0], r0, lsl #12
    a1e8:	00000000 	andeq	r0, r0, r0
    a1ec:	00042d00 	andeq	r2, r4, r0, lsl #26
    a1f0:	cc000300 	stcgt	3, cr0, [r0], {-0}
    a1f4:	04000025 	streq	r0, [r0], #-37	; 0xffffffdb
    a1f8:	0000bd01 	andeq	fp, r0, r1, lsl #26
    a1fc:	239b0c00 	orrscs	r0, fp, #0, 24
    a200:	06e40000 	strbteq	r0, [r4], r0
    a204:	0e300000 	cdpeq	0, 3, cr0, cr0, cr0, {0}
    a208:	00000000 	andeq	r0, r0, r0
    a20c:	5e220000 	cdppl	0, 2, cr0, cr2, cr0, {0}
    a210:	01020000 	mrseq	r0, (UNDEF: 2)
    a214:	00098a06 	andeq	r8, r9, r6, lsl #20
    a218:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    a21c:	00000844 	andeq	r0, r0, r4, asr #16
    a220:	37050402 	strcc	r0, [r5, -r2, lsl #8]
    a224:	02000006 	andeq	r0, r0, #6
    a228:	06320508 	ldrteq	r0, [r2], -r8, lsl #10
    a22c:	e1030000 	mrs	r0, (UNDEF: 3)
    a230:	02000008 	andeq	r0, r0, #8
    a234:	004d182e 	subeq	r1, sp, lr, lsr #16
    a238:	01020000 	mrseq	r0, (UNDEF: 2)
    a23c:	00098808 	andeq	r8, r9, r8, lsl #16
    a240:	040a0300 	streq	r0, [sl], #-768	; 0xfffffd00
    a244:	31020000 	mrscc	r0, (UNDEF: 2)
    a248:	00006019 	andeq	r6, r0, r9, lsl r0
    a24c:	07020200 	streq	r0, [r2, -r0, lsl #4]
    a250:	00000a80 	andeq	r0, r0, r0, lsl #21
    a254:	0009a103 	andeq	sl, r9, r3, lsl #2
    a258:	19340200 	ldmdbne	r4!, {r9}
    a25c:	00000073 	andeq	r0, r0, r3, ror r0
    a260:	cf070402 	svcgt	0x00070402
    a264:	02000003 	andeq	r0, r0, #3
    a268:	03ca0708 	biceq	r0, sl, #8, 14	; 0x200000
    a26c:	04040000 	streq	r0, [r4], #-0
    a270:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    a274:	07040200 	streq	r0, [r4, -r0, lsl #4]
    a278:	000003d4 	ldrdeq	r0, [r0], -r4
    a27c:	0024ae03 	eoreq	sl, r4, r3, lsl #28
    a280:	12270300 	eorne	r0, r7, #0, 6
    a284:	00000054 	andeq	r0, r0, r4, asr r0
    a288:	00008f05 	andeq	r8, r0, r5, lsl #30
    a28c:	19c70300 	stmibne	r7, {r8, r9}^
    a290:	2b030000 	blcs	ca298 <__ccfg+0xaa2f0>
    a294:	00004112 	andeq	r4, r0, r2, lsl r1
    a298:	00a00600 	adceq	r0, r0, r0, lsl #12
    a29c:	ff030000 			; <UNDEFINED> instruction: 0xff030000
    a2a0:	03000024 	movweq	r0, #36	; 0x24
    a2a4:	0067122c 	rsbeq	r1, r7, ip, lsr #4
    a2a8:	b1050000 	mrslt	r0, (UNDEF: 5)
    a2ac:	03000000 	movweq	r0, #0
    a2b0:	00000538 	andeq	r0, r0, r8, lsr r5
    a2b4:	67122d03 	ldrvs	r2, [r2, -r3, lsl #26]
    a2b8:	07000000 	streq	r0, [r0, -r0]
    a2bc:	09320308 	ldmdbeq	r2!, {r3, r8, r9}
    a2c0:	0000015c 	andeq	r0, r0, ip, asr r1
    a2c4:	00003e08 	andeq	r3, r0, r8, lsl #28
    a2c8:	07340300 	ldreq	r0, [r4, -r0, lsl #6]!
    a2cc:	000000a0 	andeq	r0, r0, r0, lsr #1
    a2d0:	00070101 	andeq	r0, r7, r1, lsl #2
    a2d4:	00053e08 	andeq	r3, r5, r8, lsl #28
    a2d8:	03350300 	teqeq	r5, #0, 6
    a2dc:	000000a0 	andeq	r0, r0, r0, lsr #1
    a2e0:	00060101 	andeq	r0, r6, r1, lsl #2
    a2e4:	00026f08 	andeq	r6, r2, r8, lsl #30
    a2e8:	03360300 	teqeq	r6, #0, 6
    a2ec:	000000a0 	andeq	r0, r0, r0, lsr #1
    a2f0:	00050101 	andeq	r0, r5, r1, lsl #2
    a2f4:	00057808 	andeq	r7, r5, r8, lsl #16
    a2f8:	03370300 	teqeq	r7, #0, 6
    a2fc:	000000a0 	andeq	r0, r0, r0, lsr #1
    a300:	00040101 	andeq	r0, r4, r1, lsl #2
    a304:	00086508 	andeq	r6, r8, r8, lsl #10
    a308:	03380300 	teqeq	r8, #0, 6
    a30c:	000000a0 	andeq	r0, r0, r0, lsr #1
    a310:	00000401 	andeq	r0, r0, r1, lsl #8
    a314:	00054509 	andeq	r4, r5, r9, lsl #10
    a318:	073a0300 	ldreq	r0, [sl, -r0, lsl #6]!
    a31c:	000000a0 	andeq	r0, r0, r0, lsr #1
    a320:	075e0901 	ldrbeq	r0, [lr, -r1, lsl #18]
    a324:	3c030000 	stccc	0, cr0, [r3], {-0}
    a328:	0000a003 	andeq	sl, r0, r3
    a32c:	52090200 	andpl	r0, r9, #0, 4
    a330:	0300000b 	movweq	r0, #11
    a334:	00a0033d 	adceq	r0, r0, sp, lsr r3
    a338:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    a33c:	00000793 	muleq	r0, r3, r7
    a340:	b1083f03 	tstlt	r8, r3, lsl #30
    a344:	04000000 	streq	r0, [r0], #-0
    a348:	02c10300 	sbceq	r0, r1, #0, 6
    a34c:	41030000 	mrsmi	r0, (UNDEF: 3)
    a350:	0000ce03 	andeq	ip, r0, r3, lsl #28
    a354:	015c0600 	cmpeq	ip, r0, lsl #12
    a358:	7f0a0000 	svcvc	0x000a0000
    a35c:	03000005 	movweq	r0, #5
    a360:	01681a43 	cmneq	r8, r3, asr #20
    a364:	01010000 	mrseq	r0, (UNDEF: 1)
    a368:	0001b10a 	andeq	fp, r1, sl, lsl #2
    a36c:	0e450300 	cdpeq	3, 4, cr0, cr5, cr0, {0}
    a370:	00000189 	andeq	r0, r0, r9, lsl #3
    a374:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    a378:	0000018f 	andeq	r0, r0, pc, lsl #3
    a37c:	91080102 	tstls	r8, r2, lsl #2
    a380:	05000009 	streq	r0, [r0, #-9]
    a384:	0000018f 	andeq	r0, r0, pc, lsl #3
    a388:	0002ca0a 	andeq	ip, r2, sl, lsl #20
    a38c:	1e450300 	cdpne	3, 4, cr0, cr5, cr0, {0}
    a390:	00000189 	andeq	r0, r0, r9, lsl #3
    a394:	08070101 	stmdaeq	r7, {r0, r8}
    a398:	da098f04 	ble	26dfb0 <__ccfg+0x24e008>
    a39c:	09000001 	stmdbeq	r0, {r0}
    a3a0:	0000064f 	andeq	r0, r0, pc, asr #12
    a3a4:	670b9004 	strvs	r9, [fp, -r4]
    a3a8:	00000000 	andeq	r0, r0, r0
    a3ac:	000c8409 	andeq	r8, ip, r9, lsl #8
    a3b0:	08910400 	ldmeq	r1, {sl}
    a3b4:	0000008f 	andeq	r0, r0, pc, lsl #1
    a3b8:	01f40904 	mvnseq	r0, r4, lsl #18
    a3bc:	92040000 	andls	r0, r4, #0
    a3c0:	0000ac10 	andeq	sl, r0, r0, lsl ip
    a3c4:	03000600 	movweq	r0, #1536	; 0x600
    a3c8:	00000a0b 	andeq	r0, r0, fp, lsl #20
    a3cc:	a9039304 	stmdbge	r3, {r2, r8, r9, ip, pc}
    a3d0:	0c000001 	stceq	0, cr0, [r0], {1}
    a3d4:	000001da 	ldrdeq	r0, [r0], -sl
    a3d8:	000001f1 	strdeq	r0, [r0], -r1
    a3dc:	b40a000d 	strlt	r0, [sl], #-13
    a3e0:	04000007 	streq	r0, [r0], #-7
    a3e4:	01e60f99 	strexheq	r0, r9, [r6]
    a3e8:	01010000 	mrseq	r0, (UNDEF: 1)
    a3ec:	91050107 	tstls	r5, r7, lsl #2
    a3f0:	00022909 	andeq	r2, r2, r9, lsl #18
    a3f4:	079a0800 	ldreq	r0, [sl, r0, lsl #16]
    a3f8:	93050000 	movwls	r0, #20480	; 0x5000
    a3fc:	0000a007 	andeq	sl, r0, r7
    a400:	01070100 	mrseq	r0, (UNDEF: 23)
    a404:	04b40800 	ldrteq	r0, [r4], #2048	; 0x800
    a408:	94050000 	strls	r0, [r5], #-0
    a40c:	0000a003 	andeq	sl, r0, r3
    a410:	00010100 	andeq	r0, r1, r0, lsl #2
    a414:	71030000 	mrsvc	r0, (UNDEF: 3)
    a418:	05000008 	streq	r0, [r0, #-8]
    a41c:	01ff0396 			; <UNDEFINED> instruction: 0x01ff0396
    a420:	29050000 	stmdbcs	r5, {}	; <UNPREDICTABLE>
    a424:	0c000002 	stceq	0, cr0, [r0], {2}
    a428:	00000235 	andeq	r0, r0, r5, lsr r2
    a42c:	00000245 	andeq	r0, r0, r5, asr #4
    a430:	3a05000d 	bcc	14a46c <__ccfg+0x12a4c4>
    a434:	0a000002 	beq	a444 <__exidx_end+0x539c>
    a438:	00000383 	andeq	r0, r0, r3, lsl #7
    a43c:	45179c05 	ldrmi	r9, [r7, #-3077]	; 0xfffff3fb
    a440:	01000002 	tsteq	r0, r2
    a444:	009b0c01 	addseq	r0, fp, r1, lsl #24
    a448:	02630000 	rsbeq	r0, r3, #0
    a44c:	000d0000 	andeq	r0, sp, r0
    a450:	00025805 	andeq	r5, r2, r5, lsl #16
    a454:	04f80a00 	ldrbteq	r0, [r8], #2560	; 0xa00
    a458:	06060000 	streq	r0, [r6], -r0
    a45c:	00026313 	andeq	r6, r2, r3, lsl r3
    a460:	0a010100 	beq	4a868 <__ccfg+0x2a8c0>
    a464:	00000740 	andeq	r0, r0, r0, asr #14
    a468:	b10ec304 	tstlt	lr, r4, lsl #6
    a46c:	01000000 	mrseq	r0, (UNDEF: 0)
    a470:	09aa0e01 	stmibeq	sl!, {r0, r9, sl, fp}
    a474:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
    a478:	02911001 	addseq	r1, r1, #1
    a47c:	040b0000 	streq	r0, [fp], #-0
    a480:	00000297 	muleq	r0, r7, r2
    a484:	02a3010f 	adceq	r0, r3, #-1073741821	; 0xc0000003
    a488:	8f100000 	svchi	0x00100000
    a48c:	00000000 	andeq	r0, r0, r0
    a490:	0001960c 	andeq	r9, r1, ip, lsl #12
    a494:	0002ae00 	andeq	sl, r2, r0, lsl #28
    a498:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    a49c:	000002a3 	andeq	r0, r0, r3, lsr #5
    a4a0:	00080811 	andeq	r0, r8, r1, lsl r8
    a4a4:	017f0700 	cmneq	pc, r0, lsl #14
    a4a8:	0002ae16 	andeq	sl, r2, r6, lsl lr
    a4ac:	11010100 	mrsne	r0, (UNDEF: 17)
    a4b0:	00000366 	andeq	r0, r0, r6, ror #6
    a4b4:	14018207 	strne	r8, [r1], #-519	; 0xfffffdf9
    a4b8:	000000bd 	strheq	r0, [r0], -sp
    a4bc:	43110101 	tstmi	r1, #1073741824	; 0x40000000
    a4c0:	07000003 	streq	r0, [r0, -r3]
    a4c4:	b10e02d8 	ldrdlt	r0, [lr, -r8]
    a4c8:	01000000 	mrseq	r0, (UNDEF: 0)
    a4cc:	07081201 	streq	r1, [r8, -r1, lsl #4]
    a4d0:	07090303 	streq	r0, [r9, -r3, lsl #6]
    a4d4:	13000003 	movwne	r0, #3
    a4d8:	00003832 	andeq	r3, r0, r2, lsr r8
    a4dc:	07030707 	streq	r0, [r3, -r7, lsl #14]
    a4e0:	0000008f 	andeq	r0, r0, pc, lsl #1
    a4e4:	0bdc1300 	bleq	ff70f0ec <_estack+0xdf70a0ec>
    a4e8:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
    a4ec:	00c20803 	sbceq	r0, r2, r3, lsl #16
    a4f0:	00040000 	andeq	r0, r4, r0
    a4f4:	0003fb0e 	andeq	pc, r3, lr, lsl #22
    a4f8:	03090700 	movweq	r0, #38656	; 0x9700
    a4fc:	0002e003 	andeq	lr, r2, r3
    a500:	00331400 	eorseq	r1, r3, r0, lsl #8
    a504:	07300000 	ldreq	r0, [r0, -r0]!
    a508:	7708030b 	strvc	r0, [r8, -fp, lsl #6]
    a50c:	13000003 	movwne	r0, #3
    a510:	00001add 	ldrdeq	r1, [r0], -sp
    a514:	08031407 	stmdaeq	r3, {r0, r1, r2, sl, ip}
    a518:	0000008f 	andeq	r0, r0, pc, lsl #1
    a51c:	09541300 	ldmdbeq	r4, {r8, r9, ip}^
    a520:	15070000 	strne	r0, [r7, #-0]
    a524:	008f0803 	addeq	r0, pc, r3, lsl #16
    a528:	13020000 	movwne	r0, #8192	; 0x2000
    a52c:	000049a2 	andeq	r4, r0, r2, lsr #19
    a530:	0b031607 	bleq	cfd54 <__ccfg+0xafdac>
    a534:	00000284 	andeq	r0, r0, r4, lsl #5
    a538:	44051304 	strmi	r1, [r5], #-772	; 0xfffffcfc
    a53c:	17070000 	strne	r0, [r7, -r0]
    a540:	00c20903 	sbceq	r0, r2, r3, lsl #18
    a544:	13080000 	movwne	r0, #32768	; 0x8000
    a548:	00000007 	andeq	r0, r0, r7
    a54c:	0f031807 	svceq	0x00031807
    a550:	00000377 	andeq	r0, r0, r7, ror r3
    a554:	07c7130c 	strbeq	r1, [r7, ip, lsl #6]
    a558:	19070000 	stmdbne	r7, {}	; <UNPREDICTABLE>
    a55c:	03871503 	orreq	r1, r7, #12582912	; 0xc00000
    a560:	002c0000 	eoreq	r0, ip, r0
    a564:	0003070c 	andeq	r0, r3, ip, lsl #14
    a568:	00038700 	andeq	r8, r3, r0, lsl #14
    a56c:	00881500 	addeq	r1, r8, r0, lsl #10
    a570:	00030000 	andeq	r0, r3, r0
    a574:	0314040b 	tsteq	r4, #184549376	; 0xb000000
    a578:	490e0000 	stmdbmi	lr, {}	; <UNPREDICTABLE>
    a57c:	07000009 	streq	r0, [r0, -r9]
    a580:	141b031c 	ldrne	r0, [fp], #-796	; 0xfffffce4
    a584:	11000003 	tstne	r0, r3
    a588:	00000929 	andeq	r0, r0, r9, lsr #18
    a58c:	14031e07 	strne	r1, [r3], #-3591	; 0xfffff1f9
    a590:	000003a9 	andeq	r0, r0, r9, lsr #7
    a594:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    a598:	0000038d 	andeq	r0, r0, sp, lsl #7
    a59c:	23e50116 	mvncs	r0, #-2147483643	; 0x80000005
    a5a0:	1d010000 	stcne	0, cr0, [r1, #-0]
    a5a4:	29d40101 	ldmibcs	r4, {r0, r8}^
    a5a8:	2a440000 	bcs	110a5b0 <__ccfg+0x10ea608>
    a5ac:	9c010000 	stcls	0, cr0, [r1], {-0}
    a5b0:	0000042a 	andeq	r0, r0, sl, lsr #8
    a5b4:	00097817 	andeq	r7, r9, r7, lsl r8
    a5b8:	011d0100 	tsteq	sp, r0, lsl #2
    a5bc:	0000008f 	andeq	r0, r0, pc, lsl #1
    a5c0:	00002b69 	andeq	r2, r0, r9, ror #22
    a5c4:	00440518 	subeq	r0, r4, r8, lsl r5
    a5c8:	011d0100 	tsteq	sp, r0, lsl #2
    a5cc:	0000042a 	andeq	r0, r0, sl, lsr #8
    a5d0:	00002b92 	muleq	r0, r2, fp
    a5d4:	0023f119 	eoreq	pc, r3, r9, lsl r1	; <UNPREDICTABLE>
    a5d8:	01300100 	teqeq	r0, r0, lsl #2
    a5dc:	000e181a 	andeq	r1, lr, sl, lsl r8
    a5e0:	74701b00 	ldrbtvc	r1, [r0], #-2816	; 0xfffff500
    a5e4:	22010072 	andcs	r0, r1, #114	; 0x72
    a5e8:	00042a15 	andeq	r2, r4, r5, lsl sl
    a5ec:	00030500 	andeq	r0, r3, r0, lsl #10
    a5f0:	1b200006 	blne	80a610 <__ccfg+0x7ea668>
    a5f4:	006e656c 	rsbeq	r6, lr, ip, ror #10
    a5f8:	810d2301 	tsthi	sp, r1, lsl #6
    a5fc:	05000000 	streq	r0, [r0, #-0]
    a600:	0005fc03 	andeq	pc, r5, r3, lsl #24
    a604:	23df1820 	bicscs	r1, pc, #32, 16	; 0x200000
    a608:	24010000 	strcs	r0, [r1], #-0
    a60c:	00008106 	andeq	r8, r0, r6, lsl #2
    a610:	002bbc00 	eoreq	fp, fp, r0, lsl #24
    a614:	0b000000 	bleq	a61c <__exidx_end+0x5574>
    a618:	00019604 	andeq	r9, r1, r4, lsl #12
    a61c:	04400000 	strbeq	r0, [r0], #-0
    a620:	00030000 	andeq	r0, r3, r0
    a624:	00002740 	andeq	r2, r0, r0, asr #14
    a628:	00bd0104 	adcseq	r0, sp, r4, lsl #2
    a62c:	070c0000 	streq	r0, [ip, -r0]
    a630:	e4000024 	str	r0, [r0], #-36	; 0xffffffdc
    a634:	60000006 	andvs	r0, r0, r6
    a638:	0000000e 	andeq	r0, r0, lr
    a63c:	c7000000 	strgt	r0, [r0, -r0]
    a640:	0200005f 	andeq	r0, r0, #95	; 0x5f
    a644:	098a0601 	stmibeq	sl, {r0, r9, sl}
    a648:	02020000 	andeq	r0, r2, #0
    a64c:	00084405 	andeq	r4, r8, r5, lsl #8
    a650:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    a654:	00000637 	andeq	r0, r0, r7, lsr r6
    a658:	32050802 	andcc	r0, r5, #131072	; 0x20000
    a65c:	03000006 	movweq	r0, #6
    a660:	000008e1 	andeq	r0, r0, r1, ror #17
    a664:	4d182e02 	ldcmi	14, cr2, [r8, #-8]
    a668:	02000000 	andeq	r0, r0, #0
    a66c:	09880801 	stmibeq	r8, {r0, fp}
    a670:	0a030000 	beq	ca678 <__ccfg+0xaa6d0>
    a674:	02000004 	andeq	r0, r0, #4
    a678:	00601931 	rsbeq	r1, r0, r1, lsr r9
    a67c:	02020000 	andeq	r0, r2, #0
    a680:	000a8007 	andeq	r8, sl, r7
    a684:	09a10300 	stmibeq	r1!, {r8, r9}
    a688:	34020000 	strcc	r0, [r2], #-0
    a68c:	00007319 	andeq	r7, r0, r9, lsl r3
    a690:	07040200 	streq	r0, [r4, -r0, lsl #4]
    a694:	000003cf 	andeq	r0, r0, pc, asr #7
    a698:	ca070802 	bgt	1cc6a8 <__ccfg+0x1ac700>
    a69c:	04000003 	streq	r0, [r0], #-3
    a6a0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    a6a4:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    a6a8:	0003d407 	andeq	sp, r3, r7, lsl #8
    a6ac:	24ae0300 	strtcs	r0, [lr], #768	; 0x300
    a6b0:	27030000 	strcs	r0, [r3, -r0]
    a6b4:	00005412 	andeq	r5, r0, r2, lsl r4
    a6b8:	008f0500 	addeq	r0, pc, r0, lsl #10
    a6bc:	c7030000 	strgt	r0, [r3, -r0]
    a6c0:	03000019 	movweq	r0, #25
    a6c4:	0041122b 	subeq	r1, r1, fp, lsr #4
    a6c8:	a0060000 	andge	r0, r6, r0
    a6cc:	03000000 	movweq	r0, #0
    a6d0:	000024ff 	strdeq	r2, [r0], -pc	; <UNPREDICTABLE>
    a6d4:	67122c03 	ldrvs	r2, [r2, -r3, lsl #24]
    a6d8:	05000000 	streq	r0, [r0, #-0]
    a6dc:	000000b1 	strheq	r0, [r0], -r1
    a6e0:	00053803 	andeq	r3, r5, r3, lsl #16
    a6e4:	122d0300 	eorne	r0, sp, #0, 6
    a6e8:	00000067 	andeq	r0, r0, r7, rrx
    a6ec:	00092103 	andeq	r2, r9, r3, lsl #2
    a6f0:	102e0300 	eorne	r0, lr, r0, lsl #6
    a6f4:	000000da 	ldrdeq	r0, [r0], -sl
    a6f8:	008f0407 	addeq	r0, pc, r7, lsl #8
    a6fc:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    a700:	6e093203 	cdpvs	2, 0, cr3, cr9, cr3, {0}
    a704:	09000001 	stmdbeq	r0, {r0}
    a708:	0000003e 	andeq	r0, r0, lr, lsr r0
    a70c:	a0073403 	andge	r3, r7, r3, lsl #8
    a710:	01000000 	mrseq	r0, (UNDEF: 0)
    a714:	09000701 	stmdbeq	r0, {r0, r8, r9, sl}
    a718:	0000053e 	andeq	r0, r0, lr, lsr r5
    a71c:	a0033503 	andge	r3, r3, r3, lsl #10
    a720:	01000000 	mrseq	r0, (UNDEF: 0)
    a724:	09000601 	stmdbeq	r0, {r0, r9, sl}
    a728:	0000026f 	andeq	r0, r0, pc, ror #4
    a72c:	a0033603 	andge	r3, r3, r3, lsl #12
    a730:	01000000 	mrseq	r0, (UNDEF: 0)
    a734:	09000501 	stmdbeq	r0, {r0, r8, sl}
    a738:	00000578 	andeq	r0, r0, r8, ror r5
    a73c:	a0033703 	andge	r3, r3, r3, lsl #14
    a740:	01000000 	mrseq	r0, (UNDEF: 0)
    a744:	09000401 	stmdbeq	r0, {r0, sl}
    a748:	00000865 	andeq	r0, r0, r5, ror #16
    a74c:	a0033803 	andge	r3, r3, r3, lsl #16
    a750:	01000000 	mrseq	r0, (UNDEF: 0)
    a754:	0a000004 	beq	a76c <__exidx_end+0x56c4>
    a758:	00000545 	andeq	r0, r0, r5, asr #10
    a75c:	a0073a03 	andge	r3, r7, r3, lsl #20
    a760:	01000000 	mrseq	r0, (UNDEF: 0)
    a764:	00075e0a 	andeq	r5, r7, sl, lsl #28
    a768:	033c0300 	teqeq	ip, #0, 6
    a76c:	000000a0 	andeq	r0, r0, r0, lsr #1
    a770:	0b520a02 	bleq	148cf80 <__ccfg+0x146cfd8>
    a774:	3d030000 	stccc	0, cr0, [r3, #-0]
    a778:	0000a003 	andeq	sl, r0, r3
    a77c:	930a0300 	movwls	r0, #41728	; 0xa300
    a780:	03000007 	movweq	r0, #7
    a784:	00b1083f 	adcseq	r0, r1, pc, lsr r8
    a788:	00040000 	andeq	r0, r4, r0
    a78c:	0002c103 	andeq	ip, r2, r3, lsl #2
    a790:	03410300 	movteq	r0, #4864	; 0x1300
    a794:	000000e0 	andeq	r0, r0, r0, ror #1
    a798:	00016e06 	andeq	r6, r1, r6, lsl #28
    a79c:	057f0b00 	ldrbeq	r0, [pc, #-2816]!	; 9ca4 <__exidx_end+0x4bfc>
    a7a0:	43030000 	movwmi	r0, #12288	; 0x3000
    a7a4:	00017a1a 	andeq	r7, r1, sl, lsl sl
    a7a8:	0b010100 	bleq	4abb0 <__ccfg+0x2ac08>
    a7ac:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
    a7b0:	9b0e4503 	blls	39bbc4 <__ccfg+0x37bc1c>
    a7b4:	01000001 	tsteq	r0, r1
    a7b8:	a1040701 	tstge	r4, r1, lsl #14
    a7bc:	02000001 	andeq	r0, r0, #1
    a7c0:	09910801 	ldmibeq	r1, {r0, fp}
    a7c4:	a1050000 	mrsge	r0, (UNDEF: 5)
    a7c8:	0b000001 	bleq	a7d4 <__exidx_end+0x572c>
    a7cc:	000002ca 	andeq	r0, r0, sl, asr #5
    a7d0:	9b1e4503 	blls	79bbe4 <__ccfg+0x77bc3c>
    a7d4:	01000001 	tsteq	r0, r1
    a7d8:	04080801 	streq	r0, [r8], #-2049	; 0xfffff7ff
    a7dc:	01ec098f 	mvneq	r0, pc, lsl #19
    a7e0:	4f0a0000 	svcmi	0x000a0000
    a7e4:	04000006 	streq	r0, [r0], #-6
    a7e8:	00670b90 	mlseq	r7, r0, fp, r0
    a7ec:	0a000000 	beq	a7f4 <__exidx_end+0x574c>
    a7f0:	00000c84 	andeq	r0, r0, r4, lsl #25
    a7f4:	8f089104 	svchi	0x00089104
    a7f8:	04000000 	streq	r0, [r0], #-0
    a7fc:	0001f40a 	andeq	pc, r1, sl, lsl #8
    a800:	10920400 	addsne	r0, r2, r0, lsl #8
    a804:	000000ac 	andeq	r0, r0, ip, lsr #1
    a808:	0b030006 	bleq	ca828 <__ccfg+0xaa880>
    a80c:	0400000a 	streq	r0, [r0], #-10
    a810:	01bb0393 			; <UNDEFINED> instruction: 0x01bb0393
    a814:	ec0c0000 	stc	0, cr0, [ip], {-0}
    a818:	03000001 	movweq	r0, #1
    a81c:	0d000002 	stceq	0, cr0, [r0, #-8]
    a820:	07b40b00 	ldreq	r0, [r4, r0, lsl #22]!
    a824:	99040000 	stmdbls	r4, {}	; <UNPREDICTABLE>
    a828:	0001f80f 	andeq	pc, r1, pc, lsl #16
    a82c:	08010100 	stmdaeq	r1, {r8}
    a830:	09910501 	ldmibeq	r1, {r0, r8, sl}
    a834:	0000023b 	andeq	r0, r0, fp, lsr r2
    a838:	00079a09 	andeq	r9, r7, r9, lsl #20
    a83c:	07930500 	ldreq	r0, [r3, r0, lsl #10]
    a840:	000000a0 	andeq	r0, r0, r0, lsr #1
    a844:	00010701 	andeq	r0, r1, r1, lsl #14
    a848:	0004b409 	andeq	fp, r4, r9, lsl #8
    a84c:	03940500 	orrseq	r0, r4, #0, 10
    a850:	000000a0 	andeq	r0, r0, r0, lsr #1
    a854:	00000101 	andeq	r0, r0, r1, lsl #2
    a858:	08710300 	ldmdaeq	r1!, {r8, r9}^
    a85c:	96050000 	strls	r0, [r5], -r0
    a860:	00021103 	andeq	r1, r2, r3, lsl #2
    a864:	023b0500 	eorseq	r0, fp, #0, 10
    a868:	470c0000 	strmi	r0, [ip, -r0]
    a86c:	57000002 	strpl	r0, [r0, -r2]
    a870:	0d000002 	stceq	0, cr0, [r0, #-8]
    a874:	024c0500 	subeq	r0, ip, #0, 10
    a878:	830b0000 	movwhi	r0, #45056	; 0xb000
    a87c:	05000003 	streq	r0, [r0, #-3]
    a880:	0257179c 	subseq	r1, r7, #156, 14	; 0x2700000
    a884:	01010000 	mrseq	r0, (UNDEF: 1)
    a888:	00009b0c 	andeq	r9, r0, ip, lsl #22
    a88c:	00027500 	andeq	r7, r2, r0, lsl #10
    a890:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    a894:	0000026a 	andeq	r0, r0, sl, ror #4
    a898:	0004f80b 	andeq	pc, r4, fp, lsl #16
    a89c:	13060600 	movwne	r0, #26112	; 0x6600
    a8a0:	00000275 	andeq	r0, r0, r5, ror r2
    a8a4:	400b0101 	andmi	r0, fp, r1, lsl #2
    a8a8:	04000007 	streq	r0, [r0], #-7
    a8ac:	00b10ec3 	adcseq	r0, r1, r3, asr #29
    a8b0:	01010000 	mrseq	r0, (UNDEF: 1)
    a8b4:	0009aa0e 	andeq	sl, r9, lr, lsl #20
    a8b8:	016e0700 	cmneq	lr, r0, lsl #14
    a8bc:	0002a310 	andeq	sl, r2, r0, lsl r3
    a8c0:	a9040700 	stmdbge	r4, {r8, r9, sl}
    a8c4:	0f000002 	svceq	0x00000002
    a8c8:	0002b501 	andeq	fp, r2, r1, lsl #10
    a8cc:	008f1000 	addeq	r1, pc, r0
    a8d0:	0c000000 	stceq	0, cr0, [r0], {-0}
    a8d4:	000001a8 	andeq	r0, r0, r8, lsr #3
    a8d8:	000002c0 	andeq	r0, r0, r0, asr #5
    a8dc:	b505000d 	strlt	r0, [r5, #-13]
    a8e0:	11000002 	tstne	r0, r2
    a8e4:	00000808 	andeq	r0, r0, r8, lsl #16
    a8e8:	16017f07 	strne	r7, [r1], -r7, lsl #30
    a8ec:	000002c0 	andeq	r0, r0, r0, asr #5
    a8f0:	66110101 	ldrvs	r0, [r1], -r1, lsl #2
    a8f4:	07000003 	streq	r0, [r0, -r3]
    a8f8:	bd140182 	ldflts	f0, [r4, #-520]	; 0xfffffdf8
    a8fc:	01000000 	mrseq	r0, (UNDEF: 0)
    a900:	03431101 	movteq	r1, #12545	; 0x3101
    a904:	d8070000 	stmdale	r7, {}	; <UNPREDICTABLE>
    a908:	00b10e02 	adcseq	r0, r1, r2, lsl #28
    a90c:	01010000 	mrseq	r0, (UNDEF: 1)
    a910:	03070812 	movweq	r0, #30738	; 0x7812
    a914:	03190903 	tsteq	r9, #49152	; 0xc000
    a918:	32130000 	andscc	r0, r3, #0
    a91c:	07000038 	smladxeq	r0, r8, r0, r0
    a920:	8f070307 	svchi	0x00070307
    a924:	00000000 	andeq	r0, r0, r0
    a928:	000bdc13 	andeq	sp, fp, r3, lsl ip
    a92c:	03080700 	movweq	r0, #34560	; 0x8700
    a930:	0000c208 	andeq	ip, r0, r8, lsl #4
    a934:	0e000400 	cfcpyseq	mvf0, mvf0
    a938:	000003fb 	strdeq	r0, [r0], -fp
    a93c:	03030907 	movweq	r0, #14599	; 0x3907
    a940:	000002f2 	strdeq	r0, [r0], -r2
    a944:	00003314 	andeq	r3, r0, r4, lsl r3
    a948:	0b073000 	bleq	1d6950 <__ccfg+0x1b69a8>
    a94c:	03890803 	orreq	r0, r9, #196608	; 0x30000
    a950:	dd130000 	ldcle	0, cr0, [r3, #-0]
    a954:	0700001a 	smladeq	r0, sl, r0, r0
    a958:	8f080314 	svchi	0x00080314
    a95c:	00000000 	andeq	r0, r0, r0
    a960:	00095413 	andeq	r5, r9, r3, lsl r4
    a964:	03150700 	tsteq	r5, #0, 14
    a968:	00008f08 	andeq	r8, r0, r8, lsl #30
    a96c:	a2130200 	andsge	r0, r3, #0, 4
    a970:	07000049 	streq	r0, [r0, -r9, asr #32]
    a974:	960b0316 			; <UNDEFINED> instruction: 0x960b0316
    a978:	04000002 	streq	r0, [r0], #-2
    a97c:	00440513 	subeq	r0, r4, r3, lsl r5
    a980:	03170700 	tsteq	r7, #0, 14
    a984:	0000c209 	andeq	ip, r0, r9, lsl #4
    a988:	07130800 	ldreq	r0, [r3, -r0, lsl #16]
    a98c:	07000000 	streq	r0, [r0, -r0]
    a990:	890f0318 	stmdbhi	pc, {r3, r4, r8, r9}	; <UNPREDICTABLE>
    a994:	0c000003 	stceq	0, cr0, [r0], {3}
    a998:	0007c713 	andeq	ip, r7, r3, lsl r7
    a99c:	03190700 	tsteq	r9, #0, 14
    a9a0:	00039915 	andeq	r9, r3, r5, lsl r9
    a9a4:	0c002c00 	stceq	12, cr2, [r0], {-0}
    a9a8:	00000319 	andeq	r0, r0, r9, lsl r3
    a9ac:	00000399 	muleq	r0, r9, r3
    a9b0:	00008815 	andeq	r8, r0, r5, lsl r8
    a9b4:	07000300 	streq	r0, [r0, -r0, lsl #6]
    a9b8:	00032604 	andeq	r2, r3, r4, lsl #12
    a9bc:	09490e00 	stmdbeq	r9, {r9, sl, fp}^
    a9c0:	1c070000 	stcne	0, cr0, [r7], {-0}
    a9c4:	03261b03 			; <UNDEFINED> instruction: 0x03261b03
    a9c8:	29110000 	ldmdbcs	r1, {}	; <UNPREDICTABLE>
    a9cc:	07000009 	streq	r0, [r0, -r9]
    a9d0:	bb14031e 	bllt	50b650 <__ccfg+0x4eb6a8>
    a9d4:	01000003 	tsteq	r0, r3
    a9d8:	9f040701 	svcls	0x00040701
    a9dc:	16000003 	strne	r0, [r0], -r3
    a9e0:	000019d5 	ldrdeq	r1, [r0], -r5
    a9e4:	9b070d01 	blls	1cddf0 <__ccfg+0x1ade48>
    a9e8:	01000001 	tsteq	r0, r1
    a9ec:	06040305 	streq	r0, [r4], -r5, lsl #6
    a9f0:	01172000 	tsteq	r7, r0
    a9f4:	000023fc 	strdeq	r2, [r0], -ip
    a9f8:	01012301 	tsteq	r1, r1, lsl #6
    a9fc:	00002a44 	andeq	r2, r0, r4, asr #20
    aa00:	00002b60 	andeq	r2, r0, r0, ror #22
    aa04:	78189c01 	ldmdavc	r8, {r0, sl, fp, ip, pc}
    aa08:	01000009 	tsteq	r0, r9
    aa0c:	008f0123 	addeq	r0, pc, r3, lsr #2
    aa10:	2bcf0000 	blcs	ff3caa18 <_estack+0xdf3c5a18>
    aa14:	05190000 	ldreq	r0, [r9, #-0]
    aa18:	01000044 	tsteq	r0, r4, asr #32
    aa1c:	00ce0123 	sbceq	r0, lr, r3, lsr #2
    aa20:	2bed0000 	blcs	ffb4aa28 <_estack+0xdfb45a28>
    aa24:	401a0000 	andsmi	r0, sl, r0
    aa28:	1b00000e 	blne	aa68 <__exidx_end+0x59c0>
    aa2c:	00727470 	rsbseq	r7, r2, r0, ror r4
    aa30:	9b0f2801 	blls	3d4a3c <__ccfg+0x3b4a94>
    aa34:	05000001 	streq	r0, [r0, #-1]
    aa38:	00060c03 	andeq	r0, r6, r3, lsl #24
    aa3c:	656c1b20 	strbvs	r1, [ip, #-2848]!	; 0xfffff4e0
    aa40:	2901006e 	stmdbcs	r1, {r1, r2, r3, r5, r6}
    aa44:	0000810d 	andeq	r8, r0, sp, lsl #2
    aa48:	08030500 	stmdaeq	r3, {r8, sl}
    aa4c:	19200006 	stmdbne	r0!, {r1, r2}
    aa50:	000023df 	ldrdeq	r2, [r0], -pc	; <UNPREDICTABLE>
    aa54:	81062a01 	tsthi	r6, r1, lsl #20
    aa58:	43000000 	movwmi	r0, #0
    aa5c:	0000002c 	andeq	r0, r0, ip, lsr #32
    aa60:	05f00000 	ldrbeq	r0, [r0, #0]!
    aa64:	00030000 	andeq	r0, r3, r0
    aa68:	000028b8 			; <UNDEFINED> instruction: 0x000028b8
    aa6c:	00bd0104 	adcseq	r0, sp, r4, lsl #2
    aa70:	4a0c0000 	bmi	30aa78 <__ccfg+0x2eaad0>
    aa74:	e4000024 	str	r0, [r0], #-36	; 0xffffffdc
    aa78:	e8000006 	stmda	r0, {r1, r2}
    aa7c:	0000000e 	andeq	r0, r0, lr
    aa80:	16000000 	strne	r0, [r0], -r0
    aa84:	02000062 	andeq	r0, r0, #98	; 0x62
    aa88:	098a0601 	stmibeq	sl, {r0, r9, sl}
    aa8c:	02020000 	andeq	r0, r2, #0
    aa90:	00084405 	andeq	r4, r8, r5, lsl #8
    aa94:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    aa98:	00000637 	andeq	r0, r0, r7, lsr r6
    aa9c:	32050802 	andcc	r0, r5, #131072	; 0x20000
    aaa0:	03000006 	movweq	r0, #6
    aaa4:	000008e1 	andeq	r0, r0, r1, ror #17
    aaa8:	4d182e02 	ldcmi	14, cr2, [r8, #-8]
    aaac:	02000000 	andeq	r0, r0, #0
    aab0:	09880801 	stmibeq	r8, {r0, fp}
    aab4:	0a030000 	beq	caabc <__ccfg+0xaab14>
    aab8:	02000004 	andeq	r0, r0, #4
    aabc:	00601931 	rsbeq	r1, r0, r1, lsr r9
    aac0:	02020000 	andeq	r0, r2, #0
    aac4:	000a8007 	andeq	r8, sl, r7
    aac8:	09a10300 	stmibeq	r1!, {r8, r9}
    aacc:	34020000 	strcc	r0, [r2], #-0
    aad0:	00007319 	andeq	r7, r0, r9, lsl r3
    aad4:	07040200 	streq	r0, [r4, -r0, lsl #4]
    aad8:	000003cf 	andeq	r0, r0, pc, asr #7
    aadc:	ca070802 	bgt	1ccaec <__ccfg+0x1acb44>
    aae0:	04000003 	streq	r0, [r0], #-3
    aae4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    aae8:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    aaec:	0003d407 	andeq	sp, r3, r7, lsl #8
    aaf0:	04560300 	ldrbeq	r0, [r6], #-768	; 0xfffffd00
    aaf4:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    aaf8:	00009b1b 	andeq	r9, r0, fp, lsl fp
    aafc:	09110500 	ldmdbeq	r1, {r8, sl}
    ab00:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    ab04:	0000b300 	andeq	fp, r0, r0, lsl #6
    ab08:	0a120600 	beq	48c310 <__ccfg+0x46c368>
    ab0c:	00b30000 	adcseq	r0, r3, r0
    ab10:	01000000 	mrseq	r0, (UNDEF: 0)
    ab14:	03040700 	movweq	r0, #18176	; 0x4700
    ab18:	00000913 	andeq	r0, r0, r3, lsl r9
    ab1c:	8f186303 	svchi	0x00186303
    ab20:	03000000 	movweq	r0, #0
    ab24:	000024ae 	andeq	r2, r0, lr, lsr #9
    ab28:	54122704 	ldrpl	r2, [r2], #-1796	; 0xfffff8fc
    ab2c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    ab30:	000000c1 	andeq	r0, r0, r1, asr #1
    ab34:	0019c703 	andseq	ip, r9, r3, lsl #14
    ab38:	122b0400 	eorne	r0, fp, #0, 8
    ab3c:	00000041 	andeq	r0, r0, r1, asr #32
    ab40:	0000d209 	andeq	sp, r0, r9, lsl #4
    ab44:	24ff0300 	ldrbtcs	r0, [pc], #768	; ab4c <__exidx_end+0x5aa4>
    ab48:	2c040000 	stccs	0, cr0, [r4], {-0}
    ab4c:	00006712 	andeq	r6, r0, r2, lsl r7
    ab50:	00e30800 	rsceq	r0, r3, r0, lsl #16
    ab54:	38030000 	stmdacc	r3, {}	; <UNPREDICTABLE>
    ab58:	04000005 	streq	r0, [r0], #-5
    ab5c:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    ab60:	21030000 	mrscs	r0, (UNDEF: 3)
    ab64:	04000009 	streq	r0, [r0], #-9
    ab68:	010c102e 	tsteq	ip, lr, lsr #32
    ab6c:	040a0000 	streq	r0, [sl], #-0
    ab70:	000000c1 	andeq	r0, r0, r1, asr #1
    ab74:	3204080b 	andcc	r0, r4, #720896	; 0xb0000
    ab78:	0001a009 	andeq	sl, r1, r9
    ab7c:	003e0c00 	eorseq	r0, lr, r0, lsl #24
    ab80:	34040000 	strcc	r0, [r4], #-0
    ab84:	0000d207 	andeq	sp, r0, r7, lsl #4
    ab88:	07010100 	streq	r0, [r1, -r0, lsl #2]
    ab8c:	053e0c00 	ldreq	r0, [lr, #-3072]!	; 0xfffff400
    ab90:	35040000 	strcc	r0, [r4, #-0]
    ab94:	0000d203 	andeq	sp, r0, r3, lsl #4
    ab98:	06010100 	streq	r0, [r1], -r0, lsl #2
    ab9c:	026f0c00 	rsbeq	r0, pc, #0, 24
    aba0:	36040000 	strcc	r0, [r4], -r0
    aba4:	0000d203 	andeq	sp, r0, r3, lsl #4
    aba8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    abac:	05780c00 	ldrbeq	r0, [r8, #-3072]!	; 0xfffff400
    abb0:	37040000 	strcc	r0, [r4, -r0]
    abb4:	0000d203 	andeq	sp, r0, r3, lsl #4
    abb8:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    abbc:	08650c00 	stmdaeq	r5!, {sl, fp}^
    abc0:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    abc4:	0000d203 	andeq	sp, r0, r3, lsl #4
    abc8:	00040100 	andeq	r0, r4, r0, lsl #2
    abcc:	05450d00 	strbeq	r0, [r5, #-3328]	; 0xfffff300
    abd0:	3a040000 	bcc	10abd8 <__ccfg+0xeac30>
    abd4:	0000d207 	andeq	sp, r0, r7, lsl #4
    abd8:	5e0d0100 	adfple	f0, f5, f0
    abdc:	04000007 	streq	r0, [r0], #-7
    abe0:	00d2033c 	sbcseq	r0, r2, ip, lsr r3
    abe4:	0d020000 	stceq	0, cr0, [r2, #-0]
    abe8:	00000b52 	andeq	r0, r0, r2, asr fp
    abec:	d2033d04 	andle	r3, r3, #4, 26	; 0x100
    abf0:	03000000 	movweq	r0, #0
    abf4:	0007930d 	andeq	r9, r7, sp, lsl #6
    abf8:	083f0400 	ldmdaeq	pc!, {sl}	; <UNPREDICTABLE>
    abfc:	000000e3 	andeq	r0, r0, r3, ror #1
    ac00:	c1030004 	tstgt	r3, r4
    ac04:	04000002 	streq	r0, [r0], #-2
    ac08:	01120341 	tsteq	r2, r1, asr #6
    ac0c:	a0090000 	andge	r0, r9, r0
    ac10:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    ac14:	0000057f 	andeq	r0, r0, pc, ror r5
    ac18:	ac1a4304 	ldcge	3, cr4, [sl], {4}
    ac1c:	01000001 	tsteq	r0, r1
    ac20:	01b10e01 			; <UNDEFINED> instruction: 0x01b10e01
    ac24:	45040000 	strmi	r0, [r4, #-0]
    ac28:	0001cd0e 	andeq	ip, r1, lr, lsl #26
    ac2c:	0a010100 	beq	4b034 <__ccfg+0x2b08c>
    ac30:	0001d304 	andeq	sp, r1, r4, lsl #6
    ac34:	08010200 	stmdaeq	r1, {r9}
    ac38:	00000991 	muleq	r0, r1, r9
    ac3c:	0001d308 	andeq	sp, r1, r8, lsl #6
    ac40:	02ca0e00 	sbceq	r0, sl, #0, 28
    ac44:	45040000 	strmi	r0, [r4, #-0]
    ac48:	0001cd1e 	andeq	ip, r1, lr, lsl sp
    ac4c:	0b010100 	bleq	4b054 <__ccfg+0x2b0ac>
    ac50:	098f0508 	stmibeq	pc, {r3, r8, sl}	; <UNPREDICTABLE>
    ac54:	0000021e 	andeq	r0, r0, lr, lsl r2
    ac58:	00064f0d 	andeq	r4, r6, sp, lsl #30
    ac5c:	0b900500 	bleq	fe40c064 <_estack+0xde407064>
    ac60:	00000067 	andeq	r0, r0, r7, rrx
    ac64:	0c840d00 	stceq	13, cr0, [r4], {0}
    ac68:	91050000 	mrsls	r0, (UNDEF: 5)
    ac6c:	0000c108 	andeq	ip, r0, r8, lsl #2
    ac70:	f40d0400 	vst3.8	{d0-d2}, [sp], r0
    ac74:	05000001 	streq	r0, [r0, #-1]
    ac78:	00de1092 	smullseq	r1, lr, r2, r0
    ac7c:	00060000 	andeq	r0, r6, r0
    ac80:	000a0b03 	andeq	r0, sl, r3, lsl #22
    ac84:	03930500 	orrseq	r0, r3, #0, 10
    ac88:	000001ed 	andeq	r0, r0, sp, ror #3
    ac8c:	00021e0f 	andeq	r1, r2, pc, lsl #28
    ac90:	00023500 	andeq	r3, r2, r0, lsl #10
    ac94:	0e001000 	cdpeq	0, 0, cr1, cr0, cr0, {0}
    ac98:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
    ac9c:	2a0f9905 	bcs	3f10b8 <__ccfg+0x3d1110>
    aca0:	01000002 	tsteq	r0, r2
    aca4:	06010b01 	streq	r0, [r1], -r1, lsl #22
    aca8:	026d0991 	rsbeq	r0, sp, #2375680	; 0x244000
    acac:	9a0c0000 	bls	30acb4 <__ccfg+0x2ead0c>
    acb0:	06000007 	streq	r0, [r0], -r7
    acb4:	00d20793 	smullseq	r0, r2, r3, r7
    acb8:	07010000 	streq	r0, [r1, -r0]
    acbc:	b40c0001 	strlt	r0, [ip], #-1
    acc0:	06000004 	streq	r0, [r0], -r4
    acc4:	00d20394 	smullseq	r0, r2, r4, r3
    acc8:	01010000 	mrseq	r0, (UNDEF: 1)
    accc:	03000000 	movweq	r0, #0
    acd0:	00000871 	andeq	r0, r0, r1, ror r8
    acd4:	43039606 	movwmi	r9, #13830	; 0x3606
    acd8:	08000002 	stmdaeq	r0, {r1}
    acdc:	0000026d 	andeq	r0, r0, sp, ror #4
    ace0:	0002790f 	andeq	r7, r2, pc, lsl #18
    ace4:	00028900 	andeq	r8, r2, r0, lsl #18
    ace8:	08001000 	stmdaeq	r0, {ip}
    acec:	0000027e 	andeq	r0, r0, lr, ror r2
    acf0:	0003830e 	andeq	r8, r3, lr, lsl #6
    acf4:	179c0600 	ldrne	r0, [ip, r0, lsl #12]
    acf8:	00000289 	andeq	r0, r0, r9, lsl #5
    acfc:	cd0f0101 	stfgts	f0, [pc, #-4]	; ad00 <__exidx_end+0x5c58>
    ad00:	a7000000 	strge	r0, [r0, -r0]
    ad04:	10000002 	andne	r0, r0, r2
    ad08:	029c0800 	addseq	r0, ip, #0, 16
    ad0c:	f80e0000 			; <UNDEFINED> instruction: 0xf80e0000
    ad10:	07000004 	streq	r0, [r0, -r4]
    ad14:	02a71306 	adceq	r1, r7, #402653184	; 0x18000000
    ad18:	01010000 	mrseq	r0, (UNDEF: 1)
    ad1c:	0007400e 	andeq	r4, r7, lr
    ad20:	0ec30500 	cdpeq	5, 12, cr0, cr3, cr0, {0}
    ad24:	000000e3 	andeq	r0, r0, r3, ror #1
    ad28:	aa110101 	bge	44b134 <__ccfg+0x42b18c>
    ad2c:	08000009 	stmdaeq	r0, {r0, r3}
    ad30:	d510016e 	ldrle	r0, [r0, #-366]	; 0xfffffe92
    ad34:	0a000002 	beq	ad44 <__exidx_end+0x5c9c>
    ad38:	0002db04 	andeq	sp, r2, r4, lsl #22
    ad3c:	e7011200 	str	r1, [r1, -r0, lsl #4]
    ad40:	13000002 	movwne	r0, #2
    ad44:	000000c1 	andeq	r0, r0, r1, asr #1
    ad48:	01da0f00 	bicseq	r0, sl, r0, lsl #30
    ad4c:	02f20000 	rscseq	r0, r2, #0
    ad50:	00100000 	andseq	r0, r0, r0
    ad54:	0002e708 	andeq	lr, r2, r8, lsl #14
    ad58:	08081400 	stmdaeq	r8, {sl, ip}
    ad5c:	7f080000 	svcvc	0x00080000
    ad60:	02f21601 	rscseq	r1, r2, #1048576	; 0x100000
    ad64:	01010000 	mrseq	r0, (UNDEF: 1)
    ad68:	00036614 	andeq	r6, r3, r4, lsl r6
    ad6c:	01820800 	orreq	r0, r2, r0, lsl #16
    ad70:	0000ef14 	andeq	lr, r0, r4, lsl pc
    ad74:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    ad78:	00000343 	andeq	r0, r0, r3, asr #6
    ad7c:	0e02d808 	cdpeq	8, 0, cr13, cr2, cr8, {0}
    ad80:	000000e3 	andeq	r0, r0, r3, ror #1
    ad84:	08150101 	ldmdaeq	r5, {r0, r8}
    ad88:	09030308 	stmdbeq	r3, {r3, r8, r9}
    ad8c:	0000034b 	andeq	r0, r0, fp, asr #6
    ad90:	00383216 	eorseq	r3, r8, r6, lsl r2
    ad94:	03070800 	movweq	r0, #30720	; 0x7800
    ad98:	0000c107 	andeq	ip, r0, r7, lsl #2
    ad9c:	dc160000 	ldcle	0, cr0, [r6], {-0}
    ada0:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    ada4:	f4080308 	vst2.8	{d0-d3}, [r8], r8
    ada8:	04000000 	streq	r0, [r0], #-0
    adac:	03fb1100 	mvnseq	r1, #0, 2
    adb0:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    adb4:	03240303 			; <UNDEFINED> instruction: 0x03240303
    adb8:	33170000 	tstcc	r7, #0
    adbc:	30000000 	andcc	r0, r0, r0
    adc0:	08030b08 	stmdaeq	r3, {r3, r8, r9, fp}
    adc4:	000003bb 			; <UNDEFINED> instruction: 0x000003bb
    adc8:	001add16 	andseq	sp, sl, r6, lsl sp
    adcc:	03140800 	tsteq	r4, #0, 16
    add0:	0000c108 	andeq	ip, r0, r8, lsl #2
    add4:	54160000 	ldrpl	r0, [r6], #-0
    add8:	08000009 	stmdaeq	r0, {r0, r3}
    addc:	c1080315 	tstgt	r8, r5, lsl r3
    ade0:	02000000 	andeq	r0, r0, #0
    ade4:	0049a216 	subeq	sl, r9, r6, lsl r2
    ade8:	03160800 	tsteq	r6, #0, 16
    adec:	0002c80b 	andeq	ip, r2, fp, lsl #16
    adf0:	05160400 	ldreq	r0, [r6, #-1024]	; 0xfffffc00
    adf4:	08000044 	stmdaeq	r0, {r2, r6}
    adf8:	f4090317 	vst2.8	{d0-d3}, [r9 :64], r7
    adfc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    ae00:	00000716 	andeq	r0, r0, r6, lsl r7
    ae04:	03180800 	tsteq	r8, #0, 16
    ae08:	0003bb0f 	andeq	fp, r3, pc, lsl #22
    ae0c:	c7160c00 	ldrgt	r0, [r6, -r0, lsl #24]
    ae10:	08000007 	stmdaeq	r0, {r0, r1, r2}
    ae14:	cb150319 	blgt	54ba80 <__ccfg+0x52bad8>
    ae18:	2c000003 	stccs	0, cr0, [r0], {3}
    ae1c:	034b0f00 	movteq	r0, #48896	; 0xbf00
    ae20:	03cb0000 	biceq	r0, fp, #0
    ae24:	88180000 	ldmdahi	r8, {}	; <UNPREDICTABLE>
    ae28:	03000000 	movweq	r0, #0
    ae2c:	58040a00 	stmdapl	r4, {r9, fp}
    ae30:	11000003 	tstne	r0, r3
    ae34:	00000949 	andeq	r0, r0, r9, asr #18
    ae38:	1b031c08 	blne	d1e60 <__ccfg+0xb1eb8>
    ae3c:	00000358 	andeq	r0, r0, r8, asr r3
    ae40:	00092914 	andeq	r2, r9, r4, lsl r9
    ae44:	031e0800 	tsteq	lr, #0, 16
    ae48:	0003ed14 	andeq	lr, r3, r4, lsl sp
    ae4c:	0a010100 	beq	4b254 <__ccfg+0x2b2ac>
    ae50:	0003d104 	andeq	sp, r3, r4, lsl #2
    ae54:	a0011900 	andge	r1, r1, r0, lsl #18
    ae58:	01000024 	tsteq	r0, r4, lsr #32
    ae5c:	cd010791 	stcgt	7, cr0, [r1, #-580]	; 0xfffffdbc
    ae60:	b0000001 	andlt	r0, r0, r1
    ae64:	0000002d 	andeq	r0, r0, sp, lsr #32
    ae68:	0100002e 	tsteq	r0, lr, lsr #32
    ae6c:	0004689c 	muleq	r4, ip, r8
    ae70:	65721a00 	ldrbvs	r1, [r2, #-2560]!	; 0xfffff600
    ae74:	91010073 	tstls	r1, r3, ror r0
    ae78:	0001cd14 	andeq	ip, r1, r4, lsl sp
    ae7c:	002c6100 	eoreq	r6, ip, r0, lsl #2
    ae80:	6d661a00 	vstmdbvs	r6!, {s3-s2}
    ae84:	25910100 	ldrcs	r0, [r1, #256]	; 0x100
    ae88:	00000468 	andeq	r0, r0, r8, ror #8
    ae8c:	00002cab 	andeq	r2, r0, fp, lsr #25
    ae90:	0071611a 	rsbseq	r6, r1, sl, lsl r1
    ae94:	b5319101 	ldrlt	r9, [r1, #-257]!	; 0xfffffeff
    ae98:	ea000000 	b	aea0 <__exidx_end+0x5df8>
    ae9c:	1b00002c 	blne	af54 <__exidx_end+0x5eac>
    aea0:	006c6d66 	rsbeq	r6, ip, r6, ror #26
    aea4:	c1079301 	tstgt	r7, r1, lsl #6
    aea8:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    aeac:	1b00002d 	blne	af68 <__exidx_end+0x5ec0>
    aeb0:	93010064 	movwls	r0, #4196	; 0x1064
    aeb4:	0000c10c 	andeq	ip, r0, ip, lsl #2
    aeb8:	002d3c00 	eoreq	r3, sp, r0, lsl #24
    aebc:	24881c00 	strcs	r1, [r8], #3072	; 0xc00
    aec0:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    aec4:	002dda01 	eoreq	sp, sp, r1, lsl #20
    aec8:	040a0000 	streq	r0, [sl], #-0
    aecc:	000001da 	ldrdeq	r0, [r0], -sl
    aed0:	2493011d 	ldrcs	r0, [r3], #285	; 0x11d
    aed4:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    aed8:	00c10106 	sbceq	r0, r1, r6, lsl #2
    aedc:	2b800000 	blcs	fe00aee4 <_estack+0xde005ee4>
    aee0:	2db00000 	ldccs	0, cr0, [r0]
    aee4:	9c010000 	stcls	0, cr0, [r1], {-0}
    aee8:	7365721a 	cmnvc	r5, #-1610612735	; 0xa0000001
    aeec:	1a080100 	bne	20b2f4 <__ccfg+0x1eb34c>
    aef0:	000001cd 	andeq	r0, r0, sp, asr #3
    aef4:	00002d4f 	andeq	r2, r0, pc, asr #26
    aef8:	01006e1a 	tsteq	r0, sl, lsl lr
    aefc:	00c12408 	sbceq	r2, r1, r8, lsl #8
    af00:	2d620000 	stclcs	0, cr0, [r2, #-0]
    af04:	661a0000 	ldrvs	r0, [sl], -r0
    af08:	0801006d 	stmdaeq	r1, {r0, r2, r3, r5, r6}
    af0c:	00046833 	andeq	r6, r4, r3, lsr r8
    af10:	002d7500 	eoreq	r7, sp, r0, lsl #10
    af14:	70611a00 	rsbvc	r1, r1, r0, lsl #20
    af18:	3f080100 	svccc	0x00080100
    af1c:	000000b5 	strheq	r0, [r0], -r5
    af20:	00002d9e 	muleq	r0, lr, sp
    af24:	0100631b 	tsteq	r0, fp, lsl r3
    af28:	01d3070a 	bicseq	r0, r3, sl, lsl #14
    af2c:	2e400000 	cdpcs	0, 4, cr0, cr0, cr0, {0}
    af30:	641e0000 	ldrvs	r0, [lr], #-0
    af34:	070b0100 	streq	r0, [fp, -r0, lsl #2]
    af38:	000000c1 	andeq	r0, r0, r1, asr #1
    af3c:	23549104 	cmpcs	r4, #4, 2
    af40:	248e1f06 	strcs	r1, [lr], #3846	; 0xf06
    af44:	0d010000 	stceq	0, cr0, [r1, #-0]
    af48:	2b600107 	blcs	180b36c <__ccfg+0x17eb3c4>
    af4c:	2b800000 	blcs	fe00af54 <_estack+0xde005f54>
    af50:	9c010000 	stcls	0, cr0, [r1], {-0}
    af54:	23007c05 	movwcs	r7, #3077	; 0xc05
    af58:	05090608 	streq	r0, [r9, #-1544]	; 0xfffff9f8
    af5c:	63200000 	nopvs	{0}	; <UNPREDICTABLE>
    af60:	120d0100 	andne	r0, sp, #0, 2
    af64:	000000c1 	andeq	r0, r0, r1, asr #1
    af68:	21005001 	tstcs	r0, r1
    af6c:	006c6f45 	rsbeq	r6, ip, r5, asr #30
    af70:	ba018801 	blt	6cf7c <__ccfg+0x4cfd4>
    af74:	2100002b 	tstcs	r0, fp, lsr #32
    af78:	00746552 	rsbseq	r6, r4, r2, asr r5
    af7c:	1c018b01 			; <UNDEFINED> instruction: 0x1c018b01
    af80:	2200002c 	andcs	r0, r0, #44	; 0x2c
    af84:	00000e98 	muleq	r0, r8, lr
    af88:	00000545 	andeq	r0, r0, r5, asr #10
    af8c:	6c617623 	stclvs	6, cr7, [r1], #-140	; 0xffffff74
    af90:	0a3a0100 	beq	e8b398 <__ccfg+0xe6b3f0>
    af94:	000000c1 	andeq	r0, r0, r1, asr #1
    af98:	0100691b 	tsteq	r0, fp, lsl r9
    af9c:	0081133a 	addeq	r1, r1, sl, lsr r3
    afa0:	2f260000 	svccs	0x00260000
    afa4:	22000000 	andcs	r0, r0, #0
    afa8:	00000e70 	andeq	r0, r0, r0, ror lr
    afac:	0000056d 	andeq	r0, r0, sp, ror #10
    afb0:	6c61761b 	stclvs	6, cr7, [r1], #-108	; 0xffffff94
    afb4:	0a460100 	beq	118b3bc <__ccfg+0x116b414>
    afb8:	000000c1 	andeq	r0, r0, r1, asr #1
    afbc:	00002f39 	andeq	r2, r0, r9, lsr pc
    afc0:	0100691b 	tsteq	r0, fp, lsl r9
    afc4:	00c10f46 	sbceq	r0, r1, r6, asr #30
    afc8:	2f620000 	svccs	0x00620000
    afcc:	22000000 	andcs	r0, r0, #0
    afd0:	00000ed0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    afd4:	00000595 	muleq	r0, r5, r5
    afd8:	6c61761b 	stclvs	6, cr7, [r1], #-108	; 0xffffff94
    afdc:	0c550100 	ldfeqe	f0, [r5], {-0}
    afe0:	000000e3 	andeq	r0, r0, r3, ror #1
    afe4:	00002f8b 	andeq	r2, r0, fp, lsl #31
    afe8:	0100691b 	tsteq	r0, fp, lsl r9
    afec:	00e31155 	rsceq	r1, r3, r5, asr r1
    aff0:	2f9e0000 	svccs	0x009e0000
    aff4:	24000000 	strcs	r0, [r0], #-0
    aff8:	00002d3e 	andeq	r2, r0, lr, lsr sp
    affc:	00002d68 	andeq	r2, r0, r8, ror #26
    b000:	000005bf 			; <UNDEFINED> instruction: 0x000005bf
    b004:	6c61761e 	stclvs	6, cr7, [r1], #-120	; 0xffffff88
    b008:	0c600100 	stfeqe	f0, [r0], #-0
    b00c:	000000e3 	andeq	r0, r0, r3, ror #1
    b010:	691b5901 	ldmdbvs	fp, {r0, r8, fp, ip, lr}
    b014:	0a610100 	beq	184b41c <__ccfg+0x182b474>
    b018:	00000081 	andeq	r0, r0, r1, lsl #1
    b01c:	00002fc7 	andeq	r2, r0, r7, asr #31
    b020:	0eb82200 	cdpeq	2, 11, cr2, cr8, cr0, {0}
    b024:	05d90000 	ldrbeq	r0, [r9]
    b028:	761b0000 	ldrvc	r0, [fp], -r0
    b02c:	01006c61 	tsteq	r0, r1, ror #24
    b030:	00c10a71 	sbceq	r0, r1, r1, ror sl
    b034:	2fda0000 	svccs	0x00da0000
    b038:	25000000 	strcs	r0, [r0, #-0]
    b03c:	00002d86 	andeq	r2, r0, r6, lsl #27
    b040:	00002da2 	andeq	r2, r0, r2, lsr #27
    b044:	0074731b 	rsbseq	r7, r4, fp, lsl r3
    b048:	cd0b7801 	stcgt	8, cr7, [fp, #-4]
    b04c:	fa000001 	blx	b058 <__exidx_end+0x5fb0>
    b050:	0000002f 	andeq	r0, r0, pc, lsr #32
    b054:	058f0000 	streq	r0, [pc]	; b05c <__exidx_end+0x5fb4>
    b058:	00030000 	andeq	r0, r3, r0
    b05c:	00002aca 	andeq	r2, r0, sl, asr #21
    b060:	00bd0104 	adcseq	r0, sp, r4, lsl #2
    b064:	b30c0000 	movwlt	r0, #49152	; 0xc000
    b068:	e4000024 	str	r0, [r0], #-36	; 0xffffffdc
    b06c:	90000006 	andls	r0, r0, r6
    b070:	0000000f 	andeq	r0, r0, pc
    b074:	d7000000 	strle	r0, [r0, -r0]
    b078:	02000065 	andeq	r0, r0, #101	; 0x65
    b07c:	098a0601 	stmibeq	sl, {r0, r9, sl}
    b080:	02020000 	andeq	r0, r2, #0
    b084:	00084405 	andeq	r4, r8, r5, lsl #8
    b088:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    b08c:	00000637 	andeq	r0, r0, r7, lsr r6
    b090:	32050802 	andcc	r0, r5, #131072	; 0x20000
    b094:	03000006 	movweq	r0, #6
    b098:	000008e1 	andeq	r0, r0, r1, ror #17
    b09c:	4d182e02 	ldcmi	14, cr2, [r8, #-8]
    b0a0:	02000000 	andeq	r0, r0, #0
    b0a4:	09880801 	stmibeq	r8, {r0, fp}
    b0a8:	0a030000 	beq	cb0b0 <__ccfg+0xab108>
    b0ac:	02000004 	andeq	r0, r0, #4
    b0b0:	00601931 	rsbeq	r1, r0, r1, lsr r9
    b0b4:	02020000 	andeq	r0, r2, #0
    b0b8:	000a8007 	andeq	r8, sl, r7
    b0bc:	09a10300 	stmibeq	r1!, {r8, r9}
    b0c0:	34020000 	strcc	r0, [r2], #-0
    b0c4:	00007319 	andeq	r7, r0, r9, lsl r3
    b0c8:	07040200 	streq	r0, [r4, -r0, lsl #4]
    b0cc:	000003cf 	andeq	r0, r0, pc, asr #7
    b0d0:	ca070802 	bgt	1cd0e0 <__ccfg+0x1ad138>
    b0d4:	04000003 	streq	r0, [r0], #-3
    b0d8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    b0dc:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    b0e0:	0003d407 	andeq	sp, r3, r7, lsl #8
    b0e4:	04560300 	ldrbeq	r0, [r6], #-768	; 0xfffffd00
    b0e8:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    b0ec:	00009b1b 	andeq	r9, r0, fp, lsl fp
    b0f0:	09110500 	ldmdbeq	r1, {r8, sl}
    b0f4:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    b0f8:	0000b300 	andeq	fp, r0, r0, lsl #6
    b0fc:	0a120600 	beq	48c904 <__ccfg+0x46c95c>
    b100:	00b30000 	adcseq	r0, r3, r0
    b104:	01000000 	mrseq	r0, (UNDEF: 0)
    b108:	03040700 	movweq	r0, #18176	; 0x4700
    b10c:	00000913 	andeq	r0, r0, r3, lsl r9
    b110:	8f186303 	svchi	0x00186303
    b114:	03000000 	movweq	r0, #0
    b118:	000007d4 	ldrdeq	r0, [r0], -r4
    b11c:	41122604 	tstmi	r2, r4, lsl #12
    b120:	03000000 	movweq	r0, #0
    b124:	000024ae 	andeq	r2, r0, lr, lsr #9
    b128:	54122704 	ldrpl	r2, [r2], #-1796	; 0xfffff8fc
    b12c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    b130:	000000cd 	andeq	r0, r0, sp, asr #1
    b134:	0019c703 	andseq	ip, r9, r3, lsl #14
    b138:	122b0400 	eorne	r0, fp, #0, 8
    b13c:	00000041 	andeq	r0, r0, r1, asr #32
    b140:	0000de09 	andeq	sp, r0, r9, lsl #28
    b144:	24ff0300 	ldrbtcs	r0, [pc], #768	; b14c <__exidx_end+0x60a4>
    b148:	2c040000 	stccs	0, cr0, [r4], {-0}
    b14c:	00006712 	andeq	r6, r0, r2, lsl r7
    b150:	00ef0800 	rsceq	r0, pc, r0, lsl #16
    b154:	38030000 	stmdacc	r3, {}	; <UNPREDICTABLE>
    b158:	04000005 	streq	r0, [r0], #-5
    b15c:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    b160:	040a0000 	streq	r0, [sl], #-0
    b164:	000000cd 	andeq	r0, r0, sp, asr #1
    b168:	3204080b 	andcc	r0, r4, #720896	; 0xb0000
    b16c:	0001a009 	andeq	sl, r1, r9
    b170:	003e0c00 	eorseq	r0, lr, r0, lsl #24
    b174:	34040000 	strcc	r0, [r4], #-0
    b178:	0000de07 	andeq	sp, r0, r7, lsl #28
    b17c:	07010100 	streq	r0, [r1, -r0, lsl #2]
    b180:	053e0c00 	ldreq	r0, [lr, #-3072]!	; 0xfffff400
    b184:	35040000 	strcc	r0, [r4, #-0]
    b188:	0000de03 	andeq	sp, r0, r3, lsl #28
    b18c:	06010100 	streq	r0, [r1], -r0, lsl #2
    b190:	026f0c00 	rsbeq	r0, pc, #0, 24
    b194:	36040000 	strcc	r0, [r4], -r0
    b198:	0000de03 	andeq	sp, r0, r3, lsl #28
    b19c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    b1a0:	05780c00 	ldrbeq	r0, [r8, #-3072]!	; 0xfffff400
    b1a4:	37040000 	strcc	r0, [r4, -r0]
    b1a8:	0000de03 	andeq	sp, r0, r3, lsl #28
    b1ac:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    b1b0:	08650c00 	stmdaeq	r5!, {sl, fp}^
    b1b4:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    b1b8:	0000de03 	andeq	sp, r0, r3, lsl #28
    b1bc:	00040100 	andeq	r0, r4, r0, lsl #2
    b1c0:	05450d00 	strbeq	r0, [r5, #-3328]	; 0xfffff300
    b1c4:	3a040000 	bcc	10b1cc <__ccfg+0xeb224>
    b1c8:	0000de07 	andeq	sp, r0, r7, lsl #28
    b1cc:	5e0d0100 	adfple	f0, f5, f0
    b1d0:	04000007 	streq	r0, [r0], #-7
    b1d4:	00de033c 	sbcseq	r0, lr, ip, lsr r3
    b1d8:	0d020000 	stceq	0, cr0, [r2, #-0]
    b1dc:	00000b52 	andeq	r0, r0, r2, asr fp
    b1e0:	de033d04 	cdple	13, 0, cr3, cr3, cr4, {0}
    b1e4:	03000000 	movweq	r0, #0
    b1e8:	0007930d 	andeq	r9, r7, sp, lsl #6
    b1ec:	083f0400 	ldmdaeq	pc!, {sl}	; <UNPREDICTABLE>
    b1f0:	000000ef 	andeq	r0, r0, pc, ror #1
    b1f4:	c1030004 	tstgt	r3, r4
    b1f8:	04000002 	streq	r0, [r0], #-2
    b1fc:	01120341 	tsteq	r2, r1, asr #6
    b200:	a0090000 	andge	r0, r9, r0
    b204:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    b208:	0000057f 	andeq	r0, r0, pc, ror r5
    b20c:	ac1a4304 	ldcge	3, cr4, [sl], {4}
    b210:	01000001 	tsteq	r0, r1
    b214:	01b10e01 			; <UNDEFINED> instruction: 0x01b10e01
    b218:	45040000 	strmi	r0, [r4, #-0]
    b21c:	0001cd0e 	andeq	ip, r1, lr, lsl #26
    b220:	0a010100 	beq	4b628 <__ccfg+0x2b680>
    b224:	0001d304 	andeq	sp, r1, r4, lsl #6
    b228:	08010200 	stmdaeq	r1, {r9}
    b22c:	00000991 	muleq	r0, r1, r9
    b230:	0001d308 	andeq	sp, r1, r8, lsl #6
    b234:	02ca0e00 	sbceq	r0, sl, #0, 28
    b238:	45040000 	strmi	r0, [r4, #-0]
    b23c:	0001cd1e 	andeq	ip, r1, lr, lsl sp
    b240:	0b010100 	bleq	4b648 <__ccfg+0x2b6a0>
    b244:	098f0508 	stmibeq	pc, {r3, r8, sl}	; <UNPREDICTABLE>
    b248:	0000021e 	andeq	r0, r0, lr, lsl r2
    b24c:	00064f0d 	andeq	r4, r6, sp, lsl #30
    b250:	0b900500 	bleq	fe40c658 <_estack+0xde407658>
    b254:	00000067 	andeq	r0, r0, r7, rrx
    b258:	0c840d00 	stceq	13, cr0, [r4], {0}
    b25c:	91050000 	mrsls	r0, (UNDEF: 5)
    b260:	0000cd08 	andeq	ip, r0, r8, lsl #26
    b264:	f40d0400 	vst3.8	{d0-d2}, [sp], r0
    b268:	05000001 	streq	r0, [r0, #-1]
    b26c:	00ea1092 	smlaleq	r1, sl, r2, r0
    b270:	00060000 	andeq	r0, r6, r0
    b274:	000a0b03 	andeq	r0, sl, r3, lsl #22
    b278:	03930500 	orrseq	r0, r3, #0, 10
    b27c:	000001ed 	andeq	r0, r0, sp, ror #3
    b280:	00021e0f 	andeq	r1, r2, pc, lsl #28
    b284:	00023500 	andeq	r3, r2, r0, lsl #10
    b288:	0e001000 	cdpeq	0, 0, cr1, cr0, cr0, {0}
    b28c:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
    b290:	2a0f9905 	bcs	3f16ac <__ccfg+0x3d1704>
    b294:	01000002 	tsteq	r0, r2
    b298:	06010b01 	streq	r0, [r1], -r1, lsl #22
    b29c:	026d0991 	rsbeq	r0, sp, #2375680	; 0x244000
    b2a0:	9a0c0000 	bls	30b2a8 <__ccfg+0x2eb300>
    b2a4:	06000007 	streq	r0, [r0], -r7
    b2a8:	00de0793 	smullseq	r0, lr, r3, r7
    b2ac:	07010000 	streq	r0, [r1, -r0]
    b2b0:	b40c0001 	strlt	r0, [ip], #-1
    b2b4:	06000004 	streq	r0, [r0], -r4
    b2b8:	00de0394 	smullseq	r0, lr, r4, r3
    b2bc:	01010000 	mrseq	r0, (UNDEF: 1)
    b2c0:	03000000 	movweq	r0, #0
    b2c4:	00000871 	andeq	r0, r0, r1, ror r8
    b2c8:	43039606 	movwmi	r9, #13830	; 0x3606
    b2cc:	08000002 	stmdaeq	r0, {r1}
    b2d0:	0000026d 	andeq	r0, r0, sp, ror #4
    b2d4:	0002790f 	andeq	r7, r2, pc, lsl #18
    b2d8:	00028900 	andeq	r8, r2, r0, lsl #18
    b2dc:	08001000 	stmdaeq	r0, {ip}
    b2e0:	0000027e 	andeq	r0, r0, lr, ror r2
    b2e4:	0003830e 	andeq	r8, r3, lr, lsl #6
    b2e8:	179c0600 	ldrne	r0, [ip, r0, lsl #12]
    b2ec:	00000289 	andeq	r0, r0, r9, lsl #5
    b2f0:	d90f0101 	stmdble	pc, {r0, r8}	; <UNPREDICTABLE>
    b2f4:	a7000000 	strge	r0, [r0, -r0]
    b2f8:	10000002 	andne	r0, r0, r2
    b2fc:	029c0800 	addseq	r0, ip, #0, 16
    b300:	f80e0000 			; <UNDEFINED> instruction: 0xf80e0000
    b304:	07000004 	streq	r0, [r0, -r4]
    b308:	02a71306 	adceq	r1, r7, #402653184	; 0x18000000
    b30c:	01010000 	mrseq	r0, (UNDEF: 1)
    b310:	0007400e 	andeq	r4, r7, lr
    b314:	0ec30500 	cdpeq	5, 12, cr0, cr3, cr0, {0}
    b318:	000000ef 	andeq	r0, r0, pc, ror #1
    b31c:	aa110101 	bge	44b728 <__ccfg+0x42b780>
    b320:	08000009 	stmdaeq	r0, {r0, r3}
    b324:	d510016e 	ldrle	r0, [r0, #-366]	; 0xfffffe92
    b328:	0a000002 	beq	b338 <__exidx_end+0x6290>
    b32c:	0002db04 	andeq	sp, r2, r4, lsl #22
    b330:	e7011200 	str	r1, [r1, -r0, lsl #4]
    b334:	13000002 	movwne	r0, #2
    b338:	000000cd 	andeq	r0, r0, sp, asr #1
    b33c:	01da0f00 	bicseq	r0, sl, r0, lsl #30
    b340:	02f20000 	rscseq	r0, r2, #0
    b344:	00100000 	andseq	r0, r0, r0
    b348:	0002e708 	andeq	lr, r2, r8, lsl #14
    b34c:	08081400 	stmdaeq	r8, {sl, ip}
    b350:	7f080000 	svcvc	0x00080000
    b354:	02f21601 	rscseq	r1, r2, #1048576	; 0x100000
    b358:	01010000 	mrseq	r0, (UNDEF: 1)
    b35c:	00036614 	andeq	r6, r3, r4, lsl r6
    b360:	01820800 	orreq	r0, r2, r0, lsl #16
    b364:	0000fb14 	andeq	pc, r0, r4, lsl fp	; <UNPREDICTABLE>
    b368:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    b36c:	00000343 	andeq	r0, r0, r3, asr #6
    b370:	0e02d808 	cdpeq	8, 0, cr13, cr2, cr8, {0}
    b374:	000000ef 	andeq	r0, r0, pc, ror #1
    b378:	08150101 	ldmdaeq	r5, {r0, r8}
    b37c:	09030308 	stmdbeq	r3, {r3, r8, r9}
    b380:	0000034b 	andeq	r0, r0, fp, asr #6
    b384:	00383216 	eorseq	r3, r8, r6, lsl r2
    b388:	03070800 	movweq	r0, #30720	; 0x7800
    b38c:	0000cd07 	andeq	ip, r0, r7, lsl #26
    b390:	dc160000 	ldcle	0, cr0, [r6], {-0}
    b394:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    b398:	00080308 	andeq	r0, r8, r8, lsl #6
    b39c:	04000001 	streq	r0, [r0], #-1
    b3a0:	03fb1100 	mvnseq	r1, #0, 2
    b3a4:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    b3a8:	03240303 			; <UNDEFINED> instruction: 0x03240303
    b3ac:	33170000 	tstcc	r7, #0
    b3b0:	30000000 	andcc	r0, r0, r0
    b3b4:	08030b08 	stmdaeq	r3, {r3, r8, r9, fp}
    b3b8:	000003bb 			; <UNDEFINED> instruction: 0x000003bb
    b3bc:	001add16 	andseq	sp, sl, r6, lsl sp
    b3c0:	03140800 	tsteq	r4, #0, 16
    b3c4:	0000cd08 	andeq	ip, r0, r8, lsl #26
    b3c8:	54160000 	ldrpl	r0, [r6], #-0
    b3cc:	08000009 	stmdaeq	r0, {r0, r3}
    b3d0:	cd080315 	stcgt	3, cr0, [r8, #-84]	; 0xffffffac
    b3d4:	02000000 	andeq	r0, r0, #0
    b3d8:	0049a216 	subeq	sl, r9, r6, lsl r2
    b3dc:	03160800 	tsteq	r6, #0, 16
    b3e0:	0002c80b 	andeq	ip, r2, fp, lsl #16
    b3e4:	05160400 	ldreq	r0, [r6, #-1024]	; 0xfffffc00
    b3e8:	08000044 	stmdaeq	r0, {r2, r6}
    b3ec:	00090317 	andeq	r0, r9, r7, lsl r3
    b3f0:	08000001 	stmdaeq	r0, {r0}
    b3f4:	00000716 	andeq	r0, r0, r6, lsl r7
    b3f8:	03180800 	tsteq	r8, #0, 16
    b3fc:	0003bb0f 	andeq	fp, r3, pc, lsl #22
    b400:	c7160c00 	ldrgt	r0, [r6, -r0, lsl #24]
    b404:	08000007 	stmdaeq	r0, {r0, r1, r2}
    b408:	cb150319 	blgt	54c074 <__ccfg+0x52c0cc>
    b40c:	2c000003 	stccs	0, cr0, [r0], {3}
    b410:	034b0f00 	movteq	r0, #48896	; 0xbf00
    b414:	03cb0000 	biceq	r0, fp, #0
    b418:	88180000 	ldmdahi	r8, {}	; <UNPREDICTABLE>
    b41c:	03000000 	movweq	r0, #0
    b420:	58040a00 	stmdapl	r4, {r9, fp}
    b424:	11000003 	tstne	r0, r3
    b428:	00000949 	andeq	r0, r0, r9, asr #18
    b42c:	1b031c08 	blne	d2454 <__ccfg+0xb24ac>
    b430:	00000358 	andeq	r0, r0, r8, asr r3
    b434:	00092914 	andeq	r2, r9, r4, lsl r9
    b438:	031e0800 	tsteq	lr, #0, 16
    b43c:	0003ed14 	andeq	lr, r3, r4, lsl sp
    b440:	0a010100 	beq	4b848 <__ccfg+0x2b8a0>
    b444:	0003d104 	andeq	sp, r3, r4, lsl #2
    b448:	f1011900 			; <UNDEFINED> instruction: 0xf1011900
    b44c:	01000024 	tsteq	r0, r4, lsr #32
    b450:	81010508 	tsthi	r1, r8, lsl #10
    b454:	00000000 	andeq	r0, r0, r0
    b458:	9000002e 	andls	r0, r0, lr, lsr #32
    b45c:	01000031 	tsteq	r0, r1, lsr r0
    b460:	0005869c 	muleq	r5, ip, r6
    b464:	75621a00 	strbvc	r1, [r2, #-2560]!	; 0xfffff600
    b468:	08010066 	stmdaeq	r1, {r1, r2, r5, r6}
    b46c:	00058618 	andeq	r8, r5, r8, lsl r6
    b470:	00300d00 	eorseq	r0, r0, r0, lsl #26
    b474:	6d661a00 	vstmdbvs	r6!, {s3-s2}
    b478:	08010074 	stmdaeq	r1, {r2, r4, r5, r6}
    b47c:	00058629 	andeq	r8, r5, r9, lsr #12
    b480:	00320400 	eorseq	r0, r2, r0, lsl #8
    b484:	70611a00 	rsbvc	r1, r1, r0, lsl #20
    b488:	36080100 	strcc	r0, [r8], -r0, lsl #2
    b48c:	000000b5 	strheq	r0, [r0], -r5
    b490:	00003238 	andeq	r3, r0, r8, lsr r2
    b494:	00636e1b 	rsbeq	r6, r3, fp, lsl lr
    b498:	81060a01 	tsthi	r6, r1, lsl #20
    b49c:	d1000000 	mrsle	r0, (UNDEF: 0)
    b4a0:	1c000032 	stcne	0, cr0, [r0], {50}	; 0x32
    b4a4:	000024a6 	andeq	r2, r0, r6, lsr #9
    b4a8:	1c114e01 	ldcne	14, cr4, [r1], {1}
    b4ac:	000024f7 	strdeq	r2, [r0], -r7
    b4b0:	1d165501 	cfldr32ne	mvfx5, [r6, #-4]
    b4b4:	00002ec2 	andeq	r2, r0, r2, asr #29
    b4b8:	00002f32 	andeq	r2, r0, r2, lsr pc
    b4bc:	00000488 	andeq	r0, r0, r8, lsl #9
    b4c0:	7061761e 	rsbvc	r7, r1, lr, lsl r6
    b4c4:	114e0100 	mrsne	r0, (UNDEF: 94)
    b4c8:	0000010c 	andeq	r0, r0, ip, lsl #2
    b4cc:	6d1b5601 	ldcvs	6, cr5, [fp, #-4]
    b4d0:	4e010066 	cdpmi	0, 0, cr0, cr1, cr6, {3}
    b4d4:	0000c111 	andeq	ip, r0, r1, lsl r1
    b4d8:	00335200 	eorseq	r5, r3, r0, lsl #4
    b4dc:	321d0000 	andscc	r0, sp, #0
    b4e0:	7a00002f 	bvc	b5a4 <__exidx_end+0x64fc>
    b4e4:	a400002f 	strge	r0, [r0], #-47	; 0xffffffd1
    b4e8:	1e000004 	cdpne	0, 0, cr0, cr0, cr4, {0}
    b4ec:	00706176 	rsbseq	r6, r0, r6, ror r1
    b4f0:	0c114f01 	ldceq	15, cr4, [r1], {1}
    b4f4:	01000001 	tsteq	r0, r1
    b4f8:	401f005e 	andsmi	r0, pc, lr, asr r0	; <UNPREDICTABLE>
    b4fc:	d500000f 	strle	r0, [r0, #-15]
    b500:	1e000004 	cdpne	0, 0, cr0, cr0, cr4, {0}
    b504:	00706176 	rsbseq	r6, r0, r6, ror r1
    b508:	0c115001 	ldceq	0, cr5, [r1], {1}
    b50c:	01000001 	tsteq	r0, r1
    b510:	6364205e 	cmnvs	r4, #94	; 0x5e
    b514:	11500100 	cmpne	r0, r0, lsl #2
    b518:	00000081 	andeq	r0, r0, r1, lsl #1
    b51c:	0100631b 	tsteq	r0, fp, lsl r3
    b520:	01d31150 	bicseq	r1, r3, r0, asr r1
    b524:	33700000 	cmncc	r0, #0
    b528:	1f000000 	svcne	0x00000000
    b52c:	00000f58 	andeq	r0, r0, r8, asr pc
    b530:	000004fc 	strdeq	r0, [r0], -ip
    b534:	7061761e 	rsbvc	r7, r1, lr, lsl r6
    b538:	16550100 	ldrbne	r0, [r5], -r0, lsl #2
    b53c:	0000058c 	andeq	r0, r0, ip, lsl #11
    b540:	6d1b5e01 	ldcvs	14, cr5, [fp, #-4]
    b544:	55010066 	strpl	r0, [r1, #-102]	; 0xffffff9a
    b548:	0000c116 	andeq	ip, r0, r6, lsl r1
    b54c:	00338e00 	eorseq	r8, r3, r0, lsl #28
    b550:	081f0000 	ldmdaeq	pc, {}	; <UNPREDICTABLE>
    b554:	1400000f 	strne	r0, [r0], #-15
    b558:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
    b55c:	00706176 	rsbseq	r6, r0, r6, ror r1
    b560:	8c165601 	ldchi	6, cr5, [r6], {1}
    b564:	01000005 	tsteq	r0, r5
    b568:	701f005e 	andsvc	r0, pc, lr, asr r0	; <UNPREDICTABLE>
    b56c:	4500000f 	strmi	r0, [r0, #-15]
    b570:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
    b574:	00706176 	rsbseq	r6, r0, r6, ror r1
    b578:	8c165701 	ldchi	7, cr5, [r6], {1}
    b57c:	01000005 	tsteq	r0, r5
    b580:	6364205e 	cmnvs	r4, #94	; 0x5e
    b584:	16570100 	ldrbne	r0, [r7], -r0, lsl #2
    b588:	00000081 	andeq	r0, r0, r1, lsl #1
    b58c:	0100631b 	tsteq	r0, fp, lsl r3
    b590:	01d31657 	bicseq	r1, r3, r7, asr r6
    b594:	33ac0000 			; <UNDEFINED> instruction: 0x33ac0000
    b598:	1d000000 	stcne	0, cr0, [r0, #-0]
    b59c:	00003142 	andeq	r3, r0, r2, asr #2
    b5a0:	00003156 	andeq	r3, r0, r6, asr r1
    b5a4:	0000056f 	andeq	r0, r0, pc, ror #10
    b5a8:	0100631b 	tsteq	r0, fp, lsl r3
    b5ac:	01d3095c 	bicseq	r0, r3, ip, asr r9
    b5b0:	33ca0000 	biccc	r0, sl, #0
    b5b4:	731e0000 	tstvc	lr, #0
    b5b8:	01007061 	tsteq	r0, r1, rrx
    b5bc:	01cd0d5c 	biceq	r0, sp, ip, asr sp
    b5c0:	56010000 	strpl	r0, [r1], -r0
    b5c4:	0f202100 	svceq	0x00202100
    b5c8:	731b0000 	tstvc	fp, #0
    b5cc:	01007061 	tsteq	r0, r1, rrx
    b5d0:	01cd0a66 	biceq	r0, sp, r6, ror #20
    b5d4:	33dd0000 	bicscc	r0, sp, #0
    b5d8:	00000000 	andeq	r0, r0, r0
    b5dc:	01da040a 	bicseq	r0, sl, sl, lsl #8
    b5e0:	040a0000 	streq	r0, [sl], #-0
    b5e4:	000000ef 	andeq	r0, r0, pc, ror #1
    b5e8:	001fea00 	andseq	lr, pc, r0, lsl #20
    b5ec:	86000300 	strhi	r0, [r0], -r0, lsl #6
    b5f0:	0400002c 	streq	r0, [r0], #-44	; 0xffffffd4
    b5f4:	0000bd01 	andeq	fp, r0, r1, lsl #26
    b5f8:	25050c00 	strcs	r0, [r5, #-3072]	; 0xfffff400
    b5fc:	06e40000 	strbteq	r0, [r4], r0
    b600:	68a10000 	stmiavs	r1!, {}	; <UNPREDICTABLE>
    b604:	01020000 	mrseq	r0, (UNDEF: 2)
    b608:	00098a06 	andeq	r8, r9, r6, lsl #20
    b60c:	2d7e0300 	ldclcs	3, cr0, [lr, #-0]
    b610:	25010000 	strcs	r0, [r1, #-0]
    b614:	00003018 	andeq	r3, r0, r8, lsl r0
    b618:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    b61c:	00000844 	andeq	r0, r0, r4, asr #16
    b620:	37050402 	strcc	r0, [r5, -r2, lsl #8]
    b624:	02000006 	andeq	r0, r0, #6
    b628:	06320508 	ldrteq	r0, [r2], -r8, lsl #10
    b62c:	e1030000 	mrs	r0, (UNDEF: 3)
    b630:	01000008 	tsteq	r0, r8
    b634:	0051182e 	subseq	r1, r1, lr, lsr #16
    b638:	01020000 	mrseq	r0, (UNDEF: 2)
    b63c:	00098808 	andeq	r8, r9, r8, lsl #16
    b640:	040a0300 	streq	r0, [sl], #-768	; 0xfffffd00
    b644:	31010000 	mrscc	r0, (UNDEF: 1)
    b648:	00006419 	andeq	r6, r0, r9, lsl r4
    b64c:	07020200 	streq	r0, [r2, -r0, lsl #4]
    b650:	00000a80 	andeq	r0, r0, r0, lsl #21
    b654:	0009a103 	andeq	sl, r9, r3, lsl #2
    b658:	19340100 	ldmdbne	r4!, {r8}
    b65c:	0000007c 	andeq	r0, r0, ip, ror r0
    b660:	00006b04 	andeq	r6, r0, r4, lsl #22
    b664:	07040200 	streq	r0, [r4, -r0, lsl #4]
    b668:	000003cf 	andeq	r0, r0, pc, asr #7
    b66c:	ca070802 	bgt	1cd67c <__ccfg+0x1ad6d4>
    b670:	05000003 	streq	r0, [r0, #-3]
    b674:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    b678:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    b67c:	0003d407 	andeq	sp, r3, r7, lsl #8
    b680:	254e0300 	strbcs	r0, [lr, #-768]	; 0xfffffd00
    b684:	56010000 	strpl	r0, [r1], -r0
    b688:	0000911a 	andeq	r9, r0, sl, lsl r1
    b68c:	09420600 	stmdbeq	r2, {r9, sl}^
    b690:	5e020000 	cdppl	0, 0, cr0, cr2, cr0, {0}
    b694:	00911701 	addseq	r1, r1, r1, lsl #14
    b698:	bc030000 	stclt	0, cr0, [r3], {-0}
    b69c:	0300000a 	movweq	r0, #10
    b6a0:	00370e2e 	eorseq	r0, r7, lr, lsr #28
    b6a4:	a3030000 	movwge	r0, #12288	; 0x3000
    b6a8:	03000002 	movweq	r0, #2
    b6ac:	00370e74 	eorseq	r0, r7, r4, ror lr
    b6b0:	04070000 	streq	r0, [r7], #-0
    b6b4:	eb03a503 	bl	f4ac8 <__ccfg+0xd4b20>
    b6b8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    b6bc:	000005c8 	andeq	r0, r0, r8, asr #11
    b6c0:	a40ca703 	strge	sl, [ip], #-1795	; 0xfffff8fd
    b6c4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    b6c8:	0000088b 	andeq	r0, r0, fp, lsl #17
    b6cc:	eb13a803 	bl	4f56e0 <__ccfg+0x4d5738>
    b6d0:	00000000 	andeq	r0, r0, r0
    b6d4:	00005109 	andeq	r5, r0, r9, lsl #2
    b6d8:	0000fb00 	andeq	pc, r0, r0, lsl #22
    b6dc:	00910a00 	addseq	r0, r1, r0, lsl #20
    b6e0:	00030000 	andeq	r0, r3, r0
    b6e4:	a203080b 	andge	r0, r3, #720896	; 0xb0000
    b6e8:	00011f09 	andeq	r1, r1, r9, lsl #30
    b6ec:	035e0c00 	cmpeq	lr, #0, 24
    b6f0:	a4030000 	strge	r0, [r3], #-0
    b6f4:	00008a07 	andeq	r8, r0, r7, lsl #20
    b6f8:	eb0c0000 	bl	30b700 <__ccfg+0x2eb758>
    b6fc:	03000004 	movweq	r0, #4
    b700:	00c905a9 	sbceq	r0, r9, r9, lsr #11
    b704:	00040000 	andeq	r0, r4, r0
    b708:	00073503 	andeq	r3, r7, r3, lsl #10
    b70c:	03aa0300 			; <UNDEFINED> instruction: 0x03aa0300
    b710:	000000fb 	strdeq	r0, [r0], -fp
    b714:	8a03040d 	bhi	cc750 <__ccfg+0xac7a8>
    b718:	04000006 	streq	r0, [r0], #-6
    b71c:	007c1916 	rsbseq	r1, ip, r6, lsl r9
    b720:	16030000 	strne	r0, [r3], -r0
    b724:	05000002 	streq	r0, [r0, #-2]
    b728:	008a0d0c 	addeq	r0, sl, ip, lsl #26
    b72c:	96030000 	strls	r0, [r3], -r0
    b730:	04000005 	streq	r0, [r0], #-5
    b734:	01391b23 	teqeq	r9, r3, lsr #22
    b738:	e30e0000 	movw	r0, #57344	; 0xe000
    b73c:	18000002 	stmdane	r0, {r1}
    b740:	ab083404 	blge	218758 <__ccfg+0x1f87b0>
    b744:	0c000001 	stceq	0, cr0, [r0], {1}
    b748:	00000b16 	andeq	r0, r0, r6, lsl fp
    b74c:	ab133604 	blge	4d8f64 <__ccfg+0x4b8fbc>
    b750:	00000001 	andeq	r0, r0, r1
    b754:	006b5f0f 	rsbeq	r5, fp, pc, lsl #30
    b758:	8a073704 	bhi	1d9370 <__ccfg+0x1b93c8>
    b75c:	04000000 	streq	r0, [r0], #-0
    b760:	0008f10c 	andeq	pc, r8, ip, lsl #2
    b764:	0b370400 	bleq	dcc76c <__ccfg+0xdac7c4>
    b768:	0000008a 	andeq	r0, r0, sl, lsl #1
    b76c:	3f860c08 	svccc	0x00860c08
    b770:	37040000 	strcc	r0, [r4, -r0]
    b774:	00008a14 	andeq	r8, r0, r4, lsl sl
    b778:	f60c0c00 			; <UNDEFINED> instruction: 0xf60c0c00
    b77c:	04000003 	streq	r0, [r0], #-3
    b780:	008a1b37 	addeq	r1, sl, r7, lsr fp
    b784:	0f100000 	svceq	0x00100000
    b788:	0400785f 	streq	r7, [r0], #-2143	; 0xfffff7a1
    b78c:	01b10b38 			; <UNDEFINED> instruction: 0x01b10b38
    b790:	00140000 	andseq	r0, r4, r0
    b794:	01510410 	cmpeq	r1, r0, lsl r4
    b798:	2d090000 	stccs	0, cr0, [r9, #-0]
    b79c:	c1000001 	tstgt	r0, r1
    b7a0:	0a000001 	beq	b7ac <__exidx_end+0x6704>
    b7a4:	00000091 	muleq	r0, r1, r0
    b7a8:	0c0e0000 	stceq	0, cr0, [lr], {-0}
    b7ac:	24000009 	strcs	r0, [r0], #-9
    b7b0:	44083c04 	strmi	r3, [r8], #-3076	; 0xfffff3fc
    b7b4:	0c000002 	stceq	0, cr0, [r0], {2}
    b7b8:	00000486 	andeq	r0, r0, r6, lsl #9
    b7bc:	8a093e04 	bhi	25afd4 <__ccfg+0x23b02c>
    b7c0:	00000000 	andeq	r0, r0, r0
    b7c4:	0003900c 	andeq	r9, r3, ip
    b7c8:	093f0400 	ldmdbeq	pc!, {sl}	; <UNPREDICTABLE>
    b7cc:	0000008a 	andeq	r0, r0, sl, lsl #1
    b7d0:	03390c04 	teqeq	r9, #4, 24	; 0x400
    b7d4:	40040000 	andmi	r0, r4, r0
    b7d8:	00008a09 	andeq	r8, r0, r9, lsl #20
    b7dc:	4c0c0800 	stcmi	8, cr0, [ip], {-0}
    b7e0:	04000005 	streq	r0, [r0], #-5
    b7e4:	008a0941 	addeq	r0, sl, r1, asr #18
    b7e8:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    b7ec:	000007be 			; <UNDEFINED> instruction: 0x000007be
    b7f0:	8a094204 	bhi	25c008 <__ccfg+0x23c060>
    b7f4:	10000000 	andne	r0, r0, r0
    b7f8:	0008a50c 	andeq	sl, r8, ip, lsl #10
    b7fc:	09430400 	stmdbeq	r3, {sl}^
    b800:	0000008a 	andeq	r0, r0, sl, lsl #1
    b804:	02fe0c14 	rscseq	r0, lr, #20, 24	; 0x1400
    b808:	44040000 	strmi	r0, [r4], #-0
    b80c:	00008a09 	andeq	r8, r0, r9, lsl #20
    b810:	8f0c1800 	svchi	0x000c1800
    b814:	04000004 	streq	r0, [r0], #-4
    b818:	008a0945 	addeq	r0, sl, r5, asr #18
    b81c:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    b820:	00000753 	andeq	r0, r0, r3, asr r7
    b824:	8a094604 	bhi	25d03c <__ccfg+0x23d094>
    b828:	20000000 	andcs	r0, r0, r0
    b82c:	00611100 	rsbeq	r1, r1, r0, lsl #2
    b830:	01080000 	mrseq	r0, (UNDEF: 8)
    b834:	89084f04 	stmdbhi	r8, {r2, r8, r9, sl, fp, lr}
    b838:	0c000002 	stceq	0, cr0, [r0], {2}
    b83c:	00000a4a 	andeq	r0, r0, sl, asr #20
    b840:	890a5004 	stmdbhi	sl, {r2, ip, lr}
    b844:	00000002 	andeq	r0, r0, r2
    b848:	00096c0c 	andeq	r6, r9, ip, lsl #24
    b84c:	09510400 	ldmdbeq	r1, {sl}^
    b850:	00000289 	andeq	r0, r0, r9, lsl #5
    b854:	0ab31280 	beq	fecd025c <_estack+0xdeccb25c>
    b858:	53040000 	movwpl	r0, #16384	; 0x4000
    b85c:	00012d0a 	andeq	r2, r1, sl, lsl #26
    b860:	12010000 	andne	r0, r1, #0
    b864:	00000b01 	andeq	r0, r0, r1, lsl #22
    b868:	2d0a5604 	stccs	6, cr5, [sl, #-16]
    b86c:	04000001 	streq	r0, [r0], #-1
    b870:	2b090001 	blcs	24b87c <__ccfg+0x22b8d4>
    b874:	99000001 	stmdbls	r0, {r0}
    b878:	0a000002 	beq	b888 <__exidx_end+0x67e0>
    b87c:	00000091 	muleq	r0, r1, r0
    b880:	2b11001f 	blcs	44b904 <__ccfg+0x42b95c>
    b884:	90000008 	andls	r0, r0, r8
    b888:	08620401 	stmdaeq	r2!, {r0, sl}^
    b88c:	000002dc 	ldrdeq	r0, [r0], -ip
    b890:	000b160c 	andeq	r1, fp, ip, lsl #12
    b894:	12630400 	rsbne	r0, r3, #0, 8
    b898:	000002dc 	ldrdeq	r0, [r0], -ip
    b89c:	049e0c00 	ldreq	r0, [lr], #3072	; 0xc00
    b8a0:	64040000 	strvs	r0, [r4], #-0
    b8a4:	00008a06 	andeq	r8, r0, r6, lsl #20
    b8a8:	ab0c0400 	blge	30c8b0 <__ccfg+0x2ec908>
    b8ac:	04000002 	streq	r0, [r0], #-2
    b8b0:	02e20966 	rsceq	r0, r2, #1671168	; 0x198000
    b8b4:	0c080000 	stceq	0, cr0, [r8], {-0}
    b8b8:	00000061 	andeq	r0, r0, r1, rrx
    b8bc:	441e6704 	ldrmi	r6, [lr], #-1796	; 0xfffff8fc
    b8c0:	88000002 	stmdahi	r0, {r1}
    b8c4:	99041000 	stmdbls	r4, {ip}
    b8c8:	09000002 	stmdbeq	r0, {r1}
    b8cc:	000002f2 	strdeq	r0, [r0], -r2
    b8d0:	000002f2 	strdeq	r0, [r0], -r2
    b8d4:	0000910a 	andeq	r9, r0, sl, lsl #2
    b8d8:	10001f00 	andne	r1, r0, r0, lsl #30
    b8dc:	0002f804 	andeq	pc, r2, r4, lsl #16
    b8e0:	0e011300 	cdpeq	3, 0, cr1, cr1, cr0, {0}
    b8e4:	00000a04 	andeq	r0, r0, r4, lsl #20
    b8e8:	087a0408 	ldmdaeq	sl!, {r3, sl}^
    b8ec:	00000322 	andeq	r0, r0, r2, lsr #6
    b8f0:	00064e0c 	andeq	r4, r6, ip, lsl #28
    b8f4:	117b0400 	cmnne	fp, r0, lsl #8
    b8f8:	00000322 	andeq	r0, r0, r2, lsr #6
    b8fc:	19a50c00 	stmibne	r5!, {sl, fp}
    b900:	7c040000 	stcvc	0, cr0, [r4], {-0}
    b904:	00008a06 	andeq	r8, r0, r6, lsl #20
    b908:	10000400 	andne	r0, r0, r0, lsl #8
    b90c:	00005104 	andeq	r5, r0, r4, lsl #2
    b910:	03ee0e00 	mvneq	r0, #0, 28
    b914:	04680000 	strbteq	r0, [r8], #-0
    b918:	046b08ba 	strbteq	r0, [fp], #-2234	; 0xfffff746
    b91c:	5f0f0000 	svcpl	0x000f0000
    b920:	bb040070 	bllt	10bae8 <__ccfg+0xebb40>
    b924:	00032212 	andeq	r2, r3, r2, lsl r2
    b928:	5f0f0000 	svcpl	0x000f0000
    b92c:	bc040072 	stclt	0, cr0, [r4], {114}	; 0x72
    b930:	00008a07 	andeq	r8, r0, r7, lsl #20
    b934:	5f0f0400 	svcpl	0x000f0400
    b938:	bd040077 	stclt	0, cr0, [r4, #-476]	; 0xfffffe24
    b93c:	00008a07 	andeq	r8, r0, r7, lsl #20
    b940:	f30c0800 	vsub.i8	d0, d12, d0
    b944:	04000001 	streq	r0, [r0], #-1
    b948:	003009be 	ldrhteq	r0, [r0], -lr
    b94c:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    b950:	000006bf 			; <UNDEFINED> instruction: 0x000006bf
    b954:	3009bf04 	andcc	fp, r9, r4, lsl #30
    b958:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    b95c:	66625f0f 	strbtvs	r5, [r2], -pc, lsl #30
    b960:	11c00400 	bicne	r0, r0, r0, lsl #8
    b964:	000002fa 	strdeq	r0, [r0], -sl
    b968:	01ea0c10 	mvneq	r0, r0, lsl ip
    b96c:	c1040000 	mrsgt	r0, (UNDEF: 4)
    b970:	00008a07 	andeq	r8, r0, r7, lsl #20
    b974:	b00c1800 	andlt	r1, ip, r0, lsl #16
    b978:	04000002 	streq	r0, [r0], #-2
    b97c:	012b0ac8 	smlawteq	fp, r8, sl, r0
    b980:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    b984:	00001935 	andeq	r1, r0, r5, lsr r9
    b988:	f01dca04 			; <UNDEFINED> instruction: 0xf01dca04
    b98c:	20000005 	andcs	r0, r0, r5
    b990:	0018fc0c 	andseq	pc, r8, ip, lsl #24
    b994:	1dcc0400 	cfstrdne	mvd0, [ip]
    b998:	0000061b 	andeq	r0, r0, fp, lsl r6
    b99c:	0b270c24 	bleq	9cea34 <__ccfg+0x9aea8c>
    b9a0:	cf040000 	svcgt	0x00040000
    b9a4:	0006400d 	andeq	r4, r6, sp
    b9a8:	ea0c2800 	b	3159b0 <__ccfg+0x2f5a08>
    b9ac:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
    b9b0:	065b09d0 			; <UNDEFINED> instruction: 0x065b09d0
    b9b4:	0f2c0000 	svceq	0x002c0000
    b9b8:	0062755f 	rsbeq	r7, r2, pc, asr r5
    b9bc:	fa11d304 	blx	4805d4 <__ccfg+0x46062c>
    b9c0:	30000002 	andcc	r0, r0, r2
    b9c4:	70755f0f 	rsbsvc	r5, r5, pc, lsl #30
    b9c8:	12d40400 	sbcsne	r0, r4, #0, 8
    b9cc:	00000322 	andeq	r0, r0, r2, lsr #6
    b9d0:	755f0f38 	ldrbvc	r0, [pc, #-3896]	; aaa0 <__exidx_end+0x59f8>
    b9d4:	d5040072 	strle	r0, [r4, #-114]	; 0xffffff8e
    b9d8:	00008a07 	andeq	r8, r0, r7, lsl #20
    b9dc:	3e0c3c00 	cdpcc	12, 0, cr3, cr12, cr0, {0}
    b9e0:	0400000b 	streq	r0, [r0], #-11
    b9e4:	066111d8 			; <UNDEFINED> instruction: 0x066111d8
    b9e8:	0c400000 	mareq	acc0, r0, r0
    b9ec:	00000acd 	andeq	r0, r0, sp, asr #21
    b9f0:	7111d904 	tstvc	r1, r4, lsl #18
    b9f4:	43000006 	movwmi	r0, #6
    b9f8:	626c5f0f 	rsbvs	r5, ip, #15, 30	; 0x3c
    b9fc:	11dc0400 	bicsne	r0, ip, r0, lsl #8
    ba00:	000002fa 	strdeq	r0, [r0], -sl
    ba04:	09030c44 	stmdbeq	r3, {r2, r6, sl, fp}
    ba08:	df040000 	svcle	0x00040000
    ba0c:	00008a07 	andeq	r8, r0, r7, lsl #20
    ba10:	3b0c4c00 	blcc	31ea18 <__ccfg+0x2fea70>
    ba14:	04000004 	streq	r0, [r0], #-4
    ba18:	00b10ae0 	adcseq	r0, r1, r0, ror #21
    ba1c:	0c500000 	mraeq	r0, r0, acc0
    ba20:	00004404 	andeq	r4, r0, r4, lsl #8
    ba24:	8a12e304 	bhi	4c463c <__ccfg+0x4a4694>
    ba28:	54000004 	strpl	r0, [r0], #-4
    ba2c:	00091b0c 	andeq	r1, r9, ip, lsl #22
    ba30:	0ce70400 	cfstrdeq	mvd0, [r7]
    ba34:	00000145 	andeq	r0, r0, r5, asr #2
    ba38:	08330c58 	ldmdaeq	r3!, {r3, r4, r6, sl, fp}
    ba3c:	e9040000 	stmdb	r4, {}	; <UNPREDICTABLE>
    ba40:	00011f0e 	andeq	r1, r1, lr, lsl #30
    ba44:	f90c5c00 			; <UNDEFINED> instruction: 0xf90c5c00
    ba48:	0400000a 	streq	r0, [r0], #-10
    ba4c:	008a09ea 	addeq	r0, sl, sl, ror #19
    ba50:	00640000 	rsbeq	r0, r4, r0
    ba54:	008a0114 	addeq	r0, sl, r4, lsl r1
    ba58:	048a0000 	streq	r0, [sl], #0
    ba5c:	8a150000 	bhi	54ba64 <__ccfg+0x52babc>
    ba60:	15000004 	strne	r0, [r0, #-4]
    ba64:	0000012b 	andeq	r0, r0, fp, lsr #2
    ba68:	0005de15 	andeq	sp, r5, r5, lsl lr
    ba6c:	008a1500 	addeq	r1, sl, r0, lsl #10
    ba70:	10000000 	andne	r0, r0, r0
    ba74:	00049504 	andeq	r9, r4, r4, lsl #10
    ba78:	048a0400 	streq	r0, [sl], #1024	; 0x400
    ba7c:	42160000 	andsmi	r0, r6, #0
    ba80:	28000044 	stmdacs	r0, {r2, r6}
    ba84:	02650404 	rsbeq	r0, r5, #4, 8	; 0x4000000
    ba88:	0005de08 	andeq	sp, r5, r8, lsl #28
    ba8c:	07841700 	streq	r1, [r4, r0, lsl #14]
    ba90:	67040000 	strvs	r0, [r4, -r0]
    ba94:	008a0702 	addeq	r0, sl, r2, lsl #14
    ba98:	17000000 	strne	r0, [r0, -r0]
    ba9c:	0000061c 	andeq	r0, r0, ip, lsl r6
    baa0:	0b026c04 	bleq	a6ab8 <__ccfg+0x86b10>
    baa4:	000006cd 	andeq	r0, r0, sp, asr #13
    baa8:	028d1704 	addeq	r1, sp, #4, 14	; 0x100000
    baac:	6c040000 	stcvs	0, cr0, [r4], {-0}
    bab0:	06cd1402 	strbeq	r1, [sp], r2, lsl #8
    bab4:	17080000 	strne	r0, [r8, -r0]
    bab8:	00000b2d 	andeq	r0, r0, sp, lsr #22
    babc:	1e026c04 	cdpne	12, 0, cr6, cr2, cr4, {0}
    bac0:	000006cd 	andeq	r0, r0, sp, asr #13
    bac4:	0499170c 	ldreq	r1, [r9], #1804	; 0x70c
    bac8:	6e040000 	cdpvs	0, 0, cr0, cr4, cr0, {0}
    bacc:	008a0802 	addeq	r0, sl, r2, lsl #16
    bad0:	17100000 	ldrne	r0, [r0, -r0]
    bad4:	0000044b 	andeq	r0, r0, fp, asr #8
    bad8:	08026f04 	stmdaeq	r2, {r2, r8, r9, sl, fp, sp, lr}
    badc:	000008cd 	andeq	r0, r0, sp, asr #17
    bae0:	0ae01714 	beq	ff811738 <_estack+0xdf80c738>
    bae4:	72040000 	andvc	r0, r4, #0
    bae8:	008a0702 	addeq	r0, sl, r2, lsl #14
    baec:	17300000 	ldrne	r0, [r0, -r0]!
    baf0:	00003e32 	andeq	r3, r0, r2, lsr lr
    baf4:	16027304 	strne	r7, [r2], -r4, lsl #6
    baf8:	000008e3 	andeq	r0, r0, r3, ror #17
    bafc:	05e21734 	strbeq	r1, [r2, #1844]!	; 0x734
    bb00:	75040000 	strvc	r0, [r4, #-0]
    bb04:	008a0702 	addeq	r0, sl, r2, lsl #14
    bb08:	17380000 	ldrne	r0, [r8, -r0]!
    bb0c:	0000072b 	andeq	r0, r0, fp, lsr #14
    bb10:	0a027704 	beq	a9728 <__ccfg+0x89780>
    bb14:	000008f5 	strdeq	r0, [r0], -r5
    bb18:	0308173c 	movweq	r1, #34620	; 0x873c
    bb1c:	7a040000 	bvc	10bb24 <__ccfg+0xebb7c>
    bb20:	01ab1302 			; <UNDEFINED> instruction: 0x01ab1302
    bb24:	17400000 	strbne	r0, [r0, -r0]
    bb28:	000003b4 			; <UNDEFINED> instruction: 0x000003b4
    bb2c:	07027b04 	streq	r7, [r2, -r4, lsl #22]
    bb30:	0000008a 	andeq	r0, r0, sl, lsl #1
    bb34:	04f31744 	ldrbteq	r1, [r3], #1860	; 0x744
    bb38:	7c040000 	stcvc	0, cr0, [r4], {-0}
    bb3c:	01ab1302 			; <UNDEFINED> instruction: 0x01ab1302
    bb40:	17480000 	strbne	r0, [r8, -r0]
    bb44:	00000654 	andeq	r0, r0, r4, asr r6
    bb48:	14027d04 	strne	r7, [r2], #-3332	; 0xfffff2fc
    bb4c:	000008fb 	strdeq	r0, [r0], -fp
    bb50:	08e9174c 	stmiaeq	r9!, {r2, r3, r6, r8, r9, sl, ip}^
    bb54:	80040000 	andhi	r0, r4, r0
    bb58:	008a0702 	addeq	r0, sl, r2, lsl #14
    bb5c:	17500000 	ldrbne	r0, [r0, -r0]
    bb60:	00000980 	andeq	r0, r0, r0, lsl #19
    bb64:	09028104 	stmdbeq	r2, {r2, r8, pc}
    bb68:	000005de 	ldrdeq	r0, [r0], -lr
    bb6c:	099a1754 	ldmibeq	sl, {r2, r4, r6, r8, r9, sl, ip}
    bb70:	a4040000 	strge	r0, [r4], #-0
    bb74:	08a80702 	stmiaeq	r8!, {r1, r8, r9, sl}
    bb78:	18580000 	ldmdane	r8, {}^	; <UNPREDICTABLE>
    bb7c:	0000082b 	andeq	r0, r0, fp, lsr #16
    bb80:	1302a804 	movwne	sl, #10244	; 0x2804
    bb84:	000002dc 	ldrdeq	r0, [r0], -ip
    bb88:	6f180148 	svcvs	0x00180148
    bb8c:	04000005 	streq	r0, [r0], #-5
    bb90:	991202a9 	ldmdbls	r2, {r0, r3, r5, r7, r9}
    bb94:	4c000002 	stcmi	0, cr0, [r0], {2}
    bb98:	05561801 	ldrbeq	r1, [r6, #-2049]	; 0xfffff7ff
    bb9c:	ad040000 	stcge	0, cr0, [r4, #-0]
    bba0:	090d0c02 	stmdbeq	sp, {r1, sl, fp}
    bba4:	02dc0000 	sbcseq	r0, ip, #0
    bba8:	000a2718 	andeq	r2, sl, r8, lsl r7
    bbac:	02b20400 	adcseq	r0, r2, #0, 8
    bbb0:	00068e10 	andeq	r8, r6, r0, lsl lr
    bbb4:	1802e000 	stmdane	r2, {sp, lr, pc}
    bbb8:	0000086c 	andeq	r0, r0, ip, ror #16
    bbbc:	0a02b404 	beq	b8bd4 <__ccfg+0x98c2c>
    bbc0:	00000919 	andeq	r0, r0, r9, lsl r9
    bbc4:	100002ec 	andne	r0, r0, ip, ror #5
    bbc8:	0005e404 	andeq	lr, r5, r4, lsl #8
    bbcc:	08010200 	stmdaeq	r1, {r9}
    bbd0:	00000991 	muleq	r0, r1, r9
    bbd4:	0005e404 	andeq	lr, r5, r4, lsl #8
    bbd8:	6b041000 	blvs	10fbe0 <__ccfg+0xefc38>
    bbdc:	14000004 	strne	r0, [r0], #-4
    bbe0:	00008a01 	andeq	r8, r0, r1, lsl #20
    bbe4:	00061500 	andeq	r1, r6, r0, lsl #10
    bbe8:	048a1500 	streq	r1, [sl], #1280	; 0x500
    bbec:	2b150000 	blcs	54bbf4 <__ccfg+0x52bc4c>
    bbf0:	15000001 	strne	r0, [r0, #-1]
    bbf4:	00000615 	andeq	r0, r0, r5, lsl r6
    bbf8:	00008a15 	andeq	r8, r0, r5, lsl sl
    bbfc:	04100000 	ldreq	r0, [r0], #-0
    bc00:	000005eb 	andeq	r0, r0, fp, ror #11
    bc04:	05f60410 	ldrbeq	r0, [r6, #1040]!	; 0x410
    bc08:	01140000 	tsteq	r4, r0
    bc0c:	000000bd 	strheq	r0, [r0], -sp
    bc10:	00000640 	andeq	r0, r0, r0, asr #12
    bc14:	00048a15 	andeq	r8, r4, r5, lsl sl
    bc18:	012b1500 			; <UNDEFINED> instruction: 0x012b1500
    bc1c:	bd150000 	ldclt	0, cr0, [r5, #-0]
    bc20:	15000000 	strne	r0, [r0, #-0]
    bc24:	0000008a 	andeq	r0, r0, sl, lsl #1
    bc28:	21041000 	mrscs	r1, (UNDEF: 4)
    bc2c:	14000006 	strne	r0, [r0], #-6
    bc30:	00008a01 	andeq	r8, r0, r1, lsl #20
    bc34:	00065b00 	andeq	r5, r6, r0, lsl #22
    bc38:	048a1500 	streq	r1, [sl], #1280	; 0x500
    bc3c:	2b150000 	blcs	54bc44 <__ccfg+0x52bc9c>
    bc40:	00000001 	andeq	r0, r0, r1
    bc44:	06460410 			; <UNDEFINED> instruction: 0x06460410
    bc48:	51090000 	mrspl	r0, (UNDEF: 9)
    bc4c:	71000000 	mrsvc	r0, (UNDEF: 0)
    bc50:	0a000006 	beq	bc70 <__exidx_end+0x6bc8>
    bc54:	00000091 	muleq	r0, r1, r0
    bc58:	51090002 	tstpl	r9, r2
    bc5c:	81000000 	mrshi	r0, (UNDEF: 0)
    bc60:	0a000006 	beq	bc80 <__exidx_end+0x6bd8>
    bc64:	00000091 	muleq	r0, r1, r0
    bc68:	29060000 	stmdbcs	r6, {}	; <UNPREDICTABLE>
    bc6c:	04000004 	streq	r0, [r0], #-4
    bc70:	281a0124 	ldmdacs	sl, {r2, r5, r8}
    bc74:	19000003 	stmdbne	r0, {r0, r1}
    bc78:	00004458 	andeq	r4, r0, r8, asr r4
    bc7c:	0128040c 			; <UNDEFINED> instruction: 0x0128040c
    bc80:	0006c708 	andeq	ip, r6, r8, lsl #14
    bc84:	0b161700 	bleq	59188c <__ccfg+0x5718e4>
    bc88:	2a040000 	bcs	10bc90 <__ccfg+0xebce8>
    bc8c:	06c71101 	strbeq	r1, [r7], r1, lsl #2
    bc90:	17000000 	strne	r0, [r0, -r0]
    bc94:	0000093b 	andeq	r0, r0, fp, lsr r9
    bc98:	07012b04 	streq	r2, [r1, -r4, lsl #22]
    bc9c:	0000008a 	andeq	r0, r0, sl, lsl #1
    bca0:	05ce1704 	strbeq	r1, [lr, #1796]	; 0x704
    bca4:	2c040000 	stccs	0, cr0, [r4], {-0}
    bca8:	06cd0b01 	strbeq	r0, [sp], r1, lsl #22
    bcac:	00080000 	andeq	r0, r8, r0
    bcb0:	068e0410 	pkhbteq	r0, lr, r0, lsl #8
    bcb4:	04100000 	ldreq	r0, [r0], #-0
    bcb8:	00000681 	andeq	r0, r0, r1, lsl #13
    bcbc:	0003a019 	andeq	sl, r3, r9, lsl r0
    bcc0:	44040e00 	strmi	r0, [r4], #-3584	; 0xfffff200
    bcc4:	070c0801 	streq	r0, [ip, -r1, lsl #16]
    bcc8:	5e170000 	cdppl	0, 1, cr0, cr7, cr0, {0}
    bccc:	04000012 	streq	r0, [r0], #-18	; 0xffffffee
    bcd0:	0c120145 	ldfeqs	f0, [r2], {69}	; 0x45
    bcd4:	00000007 	andeq	r0, r0, r7
    bcd8:	00067917 	andeq	r7, r6, r7, lsl r9
    bcdc:	01460400 	cmpeq	r6, r0, lsl #8
    bce0:	00070c12 	andeq	r0, r7, r2, lsl ip
    bce4:	03170600 	tsteq	r7, #0, 12
    bce8:	04000011 	streq	r0, [r0], #-17	; 0xffffffef
    bcec:	64120147 	ldrvs	r0, [r2], #-327	; 0xfffffeb9
    bcf0:	0c000000 	stceq	0, cr0, [r0], {-0}
    bcf4:	00640900 	rsbeq	r0, r4, r0, lsl #18
    bcf8:	071c0000 	ldreq	r0, [ip, -r0]
    bcfc:	910a0000 	mrsls	r0, (UNDEF: 10)
    bd00:	02000000 	andeq	r0, r0, #0
    bd04:	04d01a00 	ldrbeq	r1, [r0], #2560	; 0xa00
    bd08:	31070285 	smlabbcc	r7, r5, r2, r0
    bd0c:	17000008 	strne	r0, [r0, -r8]
    bd10:	00000ad3 	ldrdeq	r0, [r0], -r3
    bd14:	18028704 	stmdane	r2, {r2, r8, r9, sl, pc}
    bd18:	00000091 	muleq	r0, r1, r0
    bd1c:	0a2f1700 	beq	bd1924 <__ccfg+0xbb197c>
    bd20:	88040000 	stmdahi	r4, {}	; <UNPREDICTABLE>
    bd24:	05de1202 	ldrbeq	r1, [lr, #514]	; 0x202
    bd28:	17040000 	strne	r0, [r4, -r0]
    bd2c:	000003e1 	andeq	r0, r0, r1, ror #7
    bd30:	10028904 	andne	r8, r2, r4, lsl #18
    bd34:	00000831 	andeq	r0, r0, r1, lsr r8
    bd38:	08bd1708 	popeq	{r3, r8, r9, sl, ip}
    bd3c:	8a040000 	bhi	10bd44 <__ccfg+0xebd9c>
    bd40:	01c11702 	biceq	r1, r1, r2, lsl #14
    bd44:	17240000 	strne	r0, [r4, -r0]!
    bd48:	00000623 	andeq	r0, r0, r3, lsr #12
    bd4c:	0f028b04 	svceq	0x00028b04
    bd50:	0000008a 	andeq	r0, r0, sl, lsl #1
    bd54:	0b111748 	bleq	451a7c <__ccfg+0x431ad4>
    bd58:	8c040000 	stchi	0, cr0, [r4], {-0}
    bd5c:	00832c02 	addeq	r2, r3, r2, lsl #24
    bd60:	17500000 	ldrbne	r0, [r0, -r0]
    bd64:	00000085 	andeq	r0, r0, r5, lsl #1
    bd68:	1a028d04 	bne	af180 <__ccfg+0x8f1d8>
    bd6c:	000006d3 	ldrdeq	r0, [r0], -r3
    bd70:	052b1758 	streq	r1, [fp, #-1880]!	; 0xfffff8a8
    bd74:	8e040000 	cdphi	0, 0, cr0, cr4, cr0, {0}
    bd78:	011f1602 	tsteq	pc, r2, lsl #12
    bd7c:	17680000 	strbne	r0, [r8, -r0]!
    bd80:	00000a3c 	andeq	r0, r0, ip, lsr sl
    bd84:	16028f04 	strne	r8, [r2], -r4, lsl #30
    bd88:	0000011f 	andeq	r0, r0, pc, lsl r1
    bd8c:	006f1770 	rsbeq	r1, pc, r0, ror r7	; <UNPREDICTABLE>
    bd90:	90040000 	andls	r0, r4, r0
    bd94:	011f1602 	tsteq	pc, r2, lsl #12
    bd98:	17780000 	ldrbne	r0, [r8, -r0]!
    bd9c:	000008f9 	strdeq	r0, [r0], -r9
    bda0:	10029104 	andne	r9, r2, r4, lsl #2
    bda4:	00000841 	andeq	r0, r0, r1, asr #16
    bda8:	03be1780 			; <UNDEFINED> instruction: 0x03be1780
    bdac:	92040000 	andls	r0, r4, #0
    bdb0:	08511002 	ldmdaeq	r1, {r1, ip}^
    bdb4:	17880000 	strne	r0, [r8, r0]
    bdb8:	000009bd 			; <UNDEFINED> instruction: 0x000009bd
    bdbc:	0f029304 	svceq	0x00029304
    bdc0:	0000008a 	andeq	r0, r0, sl, lsl #1
    bdc4:	026117a0 	rsbeq	r1, r1, #160, 14	; 0x2800000
    bdc8:	94040000 	strls	r0, [r4], #-0
    bdcc:	011f1602 	tsteq	pc, r2, lsl #12
    bdd0:	17a40000 	strne	r0, [r4, r0]!
    bdd4:	00000560 	andeq	r0, r0, r0, ror #10
    bdd8:	16029504 	strne	r9, [r2], -r4, lsl #10
    bddc:	0000011f 	andeq	r0, r0, pc, lsl r1
    bde0:	04a317ac 	strteq	r1, [r3], #1964	; 0x7ac
    bde4:	96040000 	strls	r0, [r4], -r0
    bde8:	011f1602 	tsteq	pc, r2, lsl #12
    bdec:	17b40000 	ldrne	r0, [r4, r0]!
    bdf0:	000006b0 			; <UNDEFINED> instruction: 0x000006b0
    bdf4:	16029704 	strne	r9, [r2], -r4, lsl #14
    bdf8:	0000011f 	andeq	r0, r0, pc, lsl r1
    bdfc:	051a17bc 	ldreq	r1, [sl, #-1980]	; 0xfffff844
    be00:	98040000 	stmdals	r4, {}	; <UNPREDICTABLE>
    be04:	011f1602 	tsteq	pc, r2, lsl #12
    be08:	17c40000 	strbne	r0, [r4, r0]
    be0c:	00000782 	andeq	r0, r0, r2, lsl #15
    be10:	08029904 	stmdaeq	r2, {r2, r8, fp, ip, pc}
    be14:	0000008a 	andeq	r0, r0, sl, lsl #1
    be18:	e40900cc 	str	r0, [r9], #-204	; 0xffffff34
    be1c:	41000005 	tstmi	r0, r5
    be20:	0a000008 	beq	be48 <__exidx_end+0x6da0>
    be24:	00000091 	muleq	r0, r1, r0
    be28:	e4090019 	str	r0, [r9], #-25	; 0xffffffe7
    be2c:	51000005 	tstpl	r0, r5
    be30:	0a000008 	beq	be58 <__exidx_end+0x6db0>
    be34:	00000091 	muleq	r0, r1, r0
    be38:	e4090007 	str	r0, [r9], #-7
    be3c:	61000005 	tstvs	r0, r5
    be40:	0a000008 	beq	be68 <__exidx_end+0x6dc0>
    be44:	00000091 	muleq	r0, r1, r0
    be48:	f01a0017 			; <UNDEFINED> instruction: 0xf01a0017
    be4c:	07029e04 	streq	r9, [r2, -r4, lsl #28]
    be50:	00000888 	andeq	r0, r0, r8, lsl #17
    be54:	00039917 	andeq	r9, r3, r7, lsl r9
    be58:	02a10400 	adceq	r0, r1, #0, 8
    be5c:	0008881b 	andeq	r8, r8, fp, lsl r8
    be60:	35170000 	ldrcc	r0, [r7, #-0]
    be64:	0400000b 	streq	r0, [r0], #-11
    be68:	981802a2 	ldmdals	r8, {r1, r5, r7, r9}
    be6c:	78000008 	stmdavc	r0, {r3}
    be70:	03220900 			; <UNDEFINED> instruction: 0x03220900
    be74:	08980000 	ldmeq	r8, {}	; <UNPREDICTABLE>
    be78:	910a0000 	mrsls	r0, (UNDEF: 10)
    be7c:	1d000000 	stcne	0, cr0, [r0, #-0]
    be80:	00910900 	addseq	r0, r1, r0, lsl #18
    be84:	08a80000 	stmiaeq	r8!, {}	; <UNPREDICTABLE>
    be88:	910a0000 	mrsls	r0, (UNDEF: 10)
    be8c:	1d000000 	stcne	0, cr0, [r0, #-0]
    be90:	04f01b00 	ldrbteq	r1, [r0], #2816	; 0xb00
    be94:	cd030283 	sfmgt	f0, 4, [r3, #-524]	; 0xfffffdf4
    be98:	1c000008 	stcne	0, cr0, [r0], {8}
    be9c:	00004442 	andeq	r4, r0, r2, asr #8
    bea0:	0b029a04 	bleq	b26b8 <__ccfg+0x92710>
    bea4:	0000071c 	andeq	r0, r0, ip, lsl r7
    bea8:	0008d71c 	andeq	sp, r8, ip, lsl r7
    beac:	02a30400 	adceq	r0, r3, #0, 8
    beb0:	0008610b 	andeq	r6, r8, fp, lsl #2
    beb4:	e4090000 	str	r0, [r9], #-0
    beb8:	dd000005 	stcle	0, cr0, [r0, #-20]	; 0xffffffec
    bebc:	0a000008 	beq	bee4 <__exidx_end+0x6e3c>
    bec0:	00000091 	muleq	r0, r1, r0
    bec4:	1c1d0018 	ldcne	0, cr0, [sp], {24}
    bec8:	0100000b 	tsteq	r0, fp
    becc:	08dd0410 	ldmeq	sp, {r4, sl}^
    bed0:	011e0000 	tsteq	lr, r0
    bed4:	000008f5 	strdeq	r0, [r0], -r5
    bed8:	00048a15 	andeq	r8, r4, r5, lsl sl
    bedc:	04100000 	ldreq	r0, [r0], #-0
    bee0:	000008e9 	andeq	r0, r0, r9, ror #17
    bee4:	01ab0410 			; <UNDEFINED> instruction: 0x01ab0410
    bee8:	011e0000 	tsteq	lr, r0
    beec:	0000090d 	andeq	r0, r0, sp, lsl #18
    bef0:	00008a15 	andeq	r8, r0, r5, lsl sl
    bef4:	04100000 	ldreq	r0, [r0], #-0
    bef8:	00000913 	andeq	r0, r0, r3, lsl r9
    befc:	09010410 	stmdbeq	r1, {r4, sl}
    bf00:	81090000 	mrshi	r0, (UNDEF: 9)
    bf04:	29000006 	stmdbcs	r0, {r1, r2}
    bf08:	0a000009 	beq	bf34 <__exidx_end+0x6e8c>
    bf0c:	00000091 	muleq	r0, r1, r0
    bf10:	991f0002 	ldmdbls	pc, {r1}	; <UNPREDICTABLE>
    bf14:	04000008 	streq	r0, [r0], #-8
    bf18:	8a170333 	bhi	5ccbec <__ccfg+0x5acc44>
    bf1c:	01000004 	tsteq	r0, r4
    bf20:	08921f01 	ldmeq	r2, {r0, r8, r9, sl, fp, ip}
    bf24:	34040000 	strcc	r0, [r4], #-0
    bf28:	04901d03 	ldreq	r1, [r0], #3331	; 0xd03
    bf2c:	01010000 	mrseq	r0, (UNDEF: 1)
    bf30:	00208603 	eoreq	r8, r0, r3, lsl #12
    bf34:	123b0600 	eorsne	r0, fp, #0, 12
    bf38:	0000006b 	andeq	r0, r0, fp, rrx
    bf3c:	4006080b 	andmi	r0, r6, fp, lsl #16
    bf40:	00097709 	andeq	r7, r9, r9, lsl #14
    bf44:	1b9d0c00 	blne	fe74ef4c <_estack+0xde749f4c>
    bf48:	41060000 	mrsmi	r0, (UNDEF: 6)
    bf4c:	0009770d 	andeq	r7, r9, sp, lsl #14
    bf50:	cd0c0000 	stcgt	0, cr0, [ip, #-0]
    bf54:	0600001d 			; <UNDEFINED> instruction: 0x0600001d
    bf58:	09770d42 	ldmdbeq	r7!, {r1, r6, r8, sl, fp}^
    bf5c:	00040000 	andeq	r0, r4, r0
    bf60:	00450410 	subeq	r0, r5, r0, lsl r4
    bf64:	d9030000 	stmdble	r3, {}	; <UNPREDICTABLE>
    bf68:	06000022 	streq	r0, [r0], -r2, lsr #32
    bf6c:	09530343 	ldmdbeq	r3, {r0, r1, r6, r8, r9}^
    bf70:	4e030000 	cdpmi	0, 0, cr0, cr3, cr0, {0}
    bf74:	0700001e 	smladeq	r0, lr, r0, r0
    bf78:	09952b3c 	ldmibeq	r5, {r2, r3, r4, r5, r8, r9, fp, sp}
    bf7c:	ec0e0000 	stc	0, cr0, [lr], {-0}
    bf80:	10000020 	andne	r0, r0, r0, lsr #32
    bf84:	f1156f07 			; <UNDEFINED> instruction: 0xf1156f07
    bf88:	0c000009 	stceq	0, cr0, [r0], {9}
    bf8c:	00001acc 	andeq	r1, r0, ip, asr #21
    bf90:	580d7007 	stmdapl	sp, {r0, r1, r2, ip, sp, lr}
    bf94:	00000000 	andeq	r0, r0, r0
    bf98:	0005d40c 	andeq	sp, r5, ip, lsl #8
    bf9c:	0d710700 	ldcleq	7, cr0, [r1, #-0]
    bfa0:	00000058 	andeq	r0, r0, r8, asr r0
    bfa4:	1e2c0c02 	cdpne	12, 2, cr0, cr12, cr2, {0}
    bfa8:	74070000 	strvc	r0, [r7], #-0
    bfac:	000b2813 	andeq	r2, fp, r3, lsl r8
    bfb0:	c40c0400 	strgt	r0, [ip], #-1024	; 0xfffffc00
    bfb4:	0700001b 	smladeq	r0, fp, r0, r0
    bfb8:	09470c75 	stmdbeq	r7, {r0, r2, r4, r5, r6, sl, fp}^
    bfbc:	0c080000 	stceq	0, cr0, [r8], {-0}
    bfc0:	00001e5c 	andeq	r1, r0, ip, asr lr
    bfc4:	b4067d07 	strlt	r7, [r6], #-3335	; 0xfffff2f9
    bfc8:	0c00000a 	stceq	0, cr0, [r0], {10}
    bfcc:	001da60c 	andseq	sl, sp, ip, lsl #12
    bfd0:	06810700 	streq	r0, [r1], r0, lsl #14
    bfd4:	00000afe 	strdeq	r0, [r0], -lr
    bfd8:	3803000d 	stmdacc	r3, {r0, r2, r3}
    bfdc:	0700001c 	smladeq	r0, ip, r0, r0
    bfe0:	09fd2a3f 	ldmibeq	sp!, {r0, r1, r2, r3, r4, r5, r9, fp, sp}^
    bfe4:	2b0e0000 	blcs	38bfec <__ccfg+0x36c044>
    bfe8:	1800001c 	stmdane	r0, {r2, r3, r4}
    bfec:	b415e007 	ldrlt	lr, [r5], #-7
    bff0:	0c00000a 	stceq	0, cr0, [r0], {10}
    bff4:	00001acc 	andeq	r1, r0, ip, asr #21
    bff8:	580de107 	stmdapl	sp, {r0, r1, r2, r8, sp, lr, pc}
    bffc:	00000000 	andeq	r0, r0, r0
    c000:	0005d40c 	andeq	sp, r5, ip, lsl #8
    c004:	0de20700 	stcleq	7, cr0, [r2]
    c008:	00000058 	andeq	r0, r0, r8, asr r0
    c00c:	1e2c0c02 	cdpne	12, 2, cr0, cr12, cr2, {0}
    c010:	e5070000 	str	r0, [r7, #-0]
    c014:	000b2813 	andeq	r2, fp, r3, lsl r8
    c018:	c40c0400 	strgt	r0, [ip], #-1024	; 0xfffffc00
    c01c:	0700001b 	smladeq	r0, fp, r0, r0
    c020:	09470ce6 	stmdbeq	r7, {r1, r2, r5, r6, r7, sl, fp}^
    c024:	0c080000 	stceq	0, cr0, [r8], {-0}
    c028:	00001e5c 	andeq	r1, r0, ip, asr lr
    c02c:	3406ee07 	strcc	lr, [r6], #-3591	; 0xfffff1f9
    c030:	0c00000b 	stceq	0, cr0, [r0], {11}
    c034:	001da60c 	andseq	sl, sp, ip, lsl #12
    c038:	06f20700 	ldrbteq	r0, [r2], r0, lsl #14
    c03c:	00000b7e 	andeq	r0, r0, lr, ror fp
    c040:	21ff0c0d 	mvnscs	r0, sp, lsl #24
    c044:	f3070000 	vhadd.u8	d0, d7, d0
    c048:	0000580d 	andeq	r5, r0, sp, lsl #16
    c04c:	4f0c0e00 	svcmi	0x000c0e00
    c050:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    c054:	00580df4 	ldrsheq	r0, [r8], #-212	; 0xffffff2c
    c058:	0c100000 	ldceq	0, cr0, [r0], {-0}
    c05c:	00001c6b 	andeq	r1, r0, fp, ror #24
    c060:	a806fa07 	stmdage	r6, {r0, r1, r2, r9, fp, ip, sp, lr, pc}
    c064:	1200000b 	andne	r0, r0, #11
    c068:	001e0c0c 	andseq	r0, lr, ip, lsl #24
    c06c:	0cfb0700 	ldcleq	7, cr0, [fp]
    c070:	00000045 	andeq	r0, r0, r5, asr #32
    c074:	215b0c13 	cmpcs	fp, r3, lsl ip
    c078:	fc070000 	stc2	0, cr0, [r7], {-0}
    c07c:	0000450c 	andeq	r4, r0, ip, lsl #10
    c080:	640c1400 	strvs	r1, [ip], #-1024	; 0xfffffc00
    c084:	07000021 	streq	r0, [r0, -r1, lsr #32]
    c088:	00450cfd 	strdeq	r0, [r5], #-205	; 0xffffff33
    c08c:	0c150000 	ldceq	0, cr0, [r5], {-0}
    c090:	0000216d 	andeq	r2, r0, sp, ror #2
    c094:	580dfe07 	stmdapl	sp, {r0, r1, r2, r9, sl, fp, ip, sp, lr, pc}
    c098:	16000000 	strne	r0, [r0], -r0
    c09c:	07010b00 	streq	r0, [r1, -r0, lsl #22]
    c0a0:	0afe0476 	beq	fff8d280 <_estack+0xdff88280>
    c0a4:	1f200000 	svcne	0x00200000
    c0a8:	07000023 	streq	r0, [r0, -r3, lsr #32]
    c0ac:	00450f77 	subeq	r0, r5, r7, ror pc
    c0b0:	04010000 	streq	r0, [r1], #-0
    c0b4:	ad200004 	stcge	0, cr0, [r0, #-16]!
    c0b8:	0700001c 	smladeq	r0, ip, r0, r0
    c0bc:	00450f78 	subeq	r0, r5, r8, ror pc
    c0c0:	01010000 	mrseq	r0, (UNDEF: 1)
    c0c4:	6d200003 	stcvs	0, cr0, [r0, #-12]!
    c0c8:	0700001d 	smladeq	r0, sp, r0, r0
    c0cc:	00450f7a 	subeq	r0, r5, sl, ror pc
    c0d0:	02010000 	andeq	r0, r1, #0
    c0d4:	3b200001 	blcc	80c0e0 <__ccfg+0x7ec138>
    c0d8:	0700001b 	smladeq	r0, fp, r0, r0
    c0dc:	00450f7b 	subeq	r0, r5, fp, ror pc
    c0e0:	01010000 	mrseq	r0, (UNDEF: 1)
    c0e4:	0b000000 	bleq	c0ec <__exidx_end+0x7044>
    c0e8:	047e0701 	ldrbteq	r0, [lr], #-1793	; 0xfffff8ff
    c0ec:	00000b28 	andeq	r0, r0, r8, lsr #22
    c0f0:	00218920 	eoreq	r8, r1, r0, lsr #18
    c0f4:	0f7f0700 	svceq	0x007f0700
    c0f8:	00000045 	andeq	r0, r0, r5, asr #32
    c0fc:	00040401 	andeq	r0, r4, r1, lsl #8
    c100:	0022e520 	eoreq	lr, r2, r0, lsr #10
    c104:	0f800700 	svceq	0x00800700
    c108:	00000045 	andeq	r0, r0, r5, asr #32
    c10c:	00000401 	andeq	r0, r0, r1, lsl #8
    c110:	89041000 	stmdbhi	r4, {ip}
    c114:	10000009 	andne	r0, r0, r9
    c118:	00006b04 	andeq	r6, r0, r4, lsl #22
    c11c:	07010b00 	streq	r0, [r1, -r0, lsl #22]
    c120:	0b7e04e7 	bleq	1f8d4c4 <__ccfg+0x1f6d51c>
    c124:	1f200000 	svcne	0x00200000
    c128:	07000023 	streq	r0, [r0, -r3, lsr #32]
    c12c:	00450fe8 	subeq	r0, r5, r8, ror #31
    c130:	04010000 	streq	r0, [r1], #-0
    c134:	ad200004 	stcge	0, cr0, [r0, #-16]!
    c138:	0700001c 	smladeq	r0, ip, r0, r0
    c13c:	00450fe9 	subeq	r0, r5, r9, ror #31
    c140:	01010000 	mrseq	r0, (UNDEF: 1)
    c144:	6d200003 	stcvs	0, cr0, [r0, #-12]!
    c148:	0700001d 	smladeq	r0, sp, r0, r0
    c14c:	00450feb 	subeq	r0, r5, fp, ror #31
    c150:	02010000 	andeq	r0, r1, #0
    c154:	3b200001 	blcc	80c160 <__ccfg+0x7ec1b8>
    c158:	0700001b 	smladeq	r0, fp, r0, r0
    c15c:	00450fec 	subeq	r0, r5, ip, ror #31
    c160:	01010000 	mrseq	r0, (UNDEF: 1)
    c164:	0b000000 	bleq	c16c <__exidx_end+0x70c4>
    c168:	04ef0701 	strbteq	r0, [pc], #1793	; c170 <__exidx_end+0x70c8>
    c16c:	00000ba8 	andeq	r0, r0, r8, lsr #23
    c170:	00218920 	eoreq	r8, r1, r0, lsr #18
    c174:	0ff00700 	svceq	0x00f00700
    c178:	00000045 	andeq	r0, r0, r5, asr #32
    c17c:	00040401 	andeq	r0, r4, r1, lsl #8
    c180:	0022e520 	eoreq	lr, r2, r0, lsr #10
    c184:	0ff10700 	svceq	0x00f10700
    c188:	00000045 	andeq	r0, r0, r5, asr #32
    c18c:	00000401 	andeq	r0, r0, r1, lsl #8
    c190:	07010b00 	streq	r0, [r1, -r0, lsl #22]
    c194:	0bd204f5 	bleq	ff48d570 <_estack+0xdf488570>
    c198:	97200000 	strls	r0, [r0, -r0]!
    c19c:	0700001c 	smladeq	r0, ip, r0, r0
    c1a0:	00450ff6 	strdeq	r0, [r5], #-246	; 0xffffff0a
    c1a4:	01010000 	mrseq	r0, (UNDEF: 1)
    c1a8:	08200007 	stmdaeq	r0!, {r0, r1, r2}
    c1ac:	07000023 	streq	r0, [r0, -r3, lsr #32]
    c1b0:	00450ff8 	strdeq	r0, [r5], #-248	; 0xffffff08
    c1b4:	06010000 	streq	r0, [r1], -r0
    c1b8:	10000001 	andne	r0, r0, r1
    c1bc:	00097d04 	andeq	r7, r9, r4, lsl #26
    c1c0:	21d40300 	bicscs	r0, r4, r0, lsl #6
    c1c4:	3d080000 	stccc	0, cr0, [r8, #-0]
    c1c8:	000be42f 	andeq	lr, fp, pc, lsr #8
    c1cc:	21e60e00 	mvncs	r0, r0, lsl #28
    c1d0:	08180000 	ldmdaeq	r8, {}	; <UNPREDICTABLE>
    c1d4:	0c741578 	cfldr64eq	mvdx1, [r4], #-480	; 0xfffffe20
    c1d8:	cc0c0000 	stcgt	0, cr0, [ip], {-0}
    c1dc:	0800001a 	stmdaeq	r0, {r1, r3, r4}
    c1e0:	00580d79 	subseq	r0, r8, r9, ror sp
    c1e4:	0c000000 	stceq	0, cr0, [r0], {-0}
    c1e8:	000005d4 	ldrdeq	r0, [r0], -r4
    c1ec:	580d7a08 	stmdapl	sp, {r3, r9, fp, ip, sp, lr}
    c1f0:	02000000 	andeq	r0, r0, #0
    c1f4:	001e2c0c 	andseq	r2, lr, ip, lsl #24
    c1f8:	137d0800 	cmnne	sp, #0, 16
    c1fc:	00000b28 	andeq	r0, r0, r8, lsr #22
    c200:	1bc40c04 	blne	ff10f218 <_estack+0xdf10a218>
    c204:	7e080000 	cdpvc	0, 0, cr0, cr8, cr0, {0}
    c208:	0009470c 	andeq	r4, r9, ip, lsl #14
    c20c:	5c0c0800 	stcpl	8, cr0, [ip], {-0}
    c210:	0800001e 	stmdaeq	r0, {r1, r2, r3, r4}
    c214:	0e670686 	cdpeq	6, 6, cr0, cr7, cr6, {4}
    c218:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    c21c:	00001da6 	andeq	r1, r0, r6, lsr #27
    c220:	b1068a08 	tstlt	r6, r8, lsl #20
    c224:	0d00000e 	stceq	0, cr0, [r0, #-56]	; 0xffffffc8
    c228:	001c090c 	andseq	r0, ip, ip, lsl #18
    c22c:	06930800 	ldreq	r0, [r3], r0, lsl #16
    c230:	00000edb 	ldrdeq	r0, [r0], -fp
    c234:	21820c0e 	orrcs	r0, r2, lr, lsl #24
    c238:	94080000 	strls	r0, [r8], #-0
    c23c:	0000450c 	andeq	r4, r0, ip, lsl #10
    c240:	a80c0f00 	stmdage	ip, {r8, r9, sl, fp}
    c244:	0800001e 	stmdaeq	r0, {r1, r2, r3, r4}
    c248:	006b0d95 	mlseq	fp, r5, sp, r0
    c24c:	0c100000 	ldceq	0, cr0, [r0], {-0}
    c250:	00001af9 	strdeq	r1, [r0], -r9
    c254:	770d9608 	strvc	r9, [sp, -r8, lsl #12]
    c258:	14000009 	strne	r0, [r0], #-9
    c25c:	20380300 	eorscs	r0, r8, r0, lsl #6
    c260:	3e080000 	cdpcc	0, 0, cr0, cr8, cr0, {0}
    c264:	000c802f 	andeq	r8, ip, pc, lsr #32
    c268:	1d310e00 	ldcne	14, cr0, [r1, #-0]
    c26c:	08240000 	stmdaeq	r4!, {}	; <UNPREDICTABLE>
    c270:	0d5e159f 	cfldr64eq	mvdx1, [lr, #-636]	; 0xfffffd84
    c274:	cc0c0000 	stcgt	0, cr0, [ip], {-0}
    c278:	0800001a 	stmdaeq	r0, {r1, r3, r4}
    c27c:	00580da0 	subseq	r0, r8, r0, lsr #27
    c280:	0c000000 	stceq	0, cr0, [r0], {-0}
    c284:	000005d4 	ldrdeq	r0, [r0], -r4
    c288:	580da108 	stmdapl	sp, {r3, r8, sp, pc}
    c28c:	02000000 	andeq	r0, r0, #0
    c290:	001e2c0c 	andseq	r2, lr, ip, lsl #24
    c294:	13a40800 			; <UNDEFINED> instruction: 0x13a40800
    c298:	00000b28 	andeq	r0, r0, r8, lsr #22
    c29c:	1bc40c04 	blne	ff10f2b4 <_estack+0xdf10a2b4>
    c2a0:	a5080000 	strge	r0, [r8, #-0]
    c2a4:	0009470c 	andeq	r4, r9, ip, lsl #14
    c2a8:	5c0c0800 	stcpl	8, cr0, [ip], {-0}
    c2ac:	0800001e 	stmdaeq	r0, {r1, r2, r3, r4}
    c2b0:	0f1506ad 	svceq	0x001506ad
    c2b4:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    c2b8:	00001da6 	andeq	r1, r0, r6, lsr #27
    c2bc:	5f06b108 	svcpl	0x0006b108
    c2c0:	0d00000f 	stceq	0, cr0, [r0, #-60]	; 0xffffffc4
    c2c4:	001c090c 	andseq	r0, ip, ip, lsl #18
    c2c8:	06c30800 	strbeq	r0, [r3], r0, lsl #16
    c2cc:	00000f89 	andeq	r0, r0, r9, lsl #31
    c2d0:	1f960c0e 	svcne	0x00960c0e
    c2d4:	cd080000 	stcgt	0, cr0, [r8, #-0]
    c2d8:	00101306 	andseq	r1, r0, r6, lsl #6
    c2dc:	a80c0f00 	stmdage	ip, {r8, r9, sl, fp}
    c2e0:	0800001e 	stmdaeq	r0, {r1, r2, r3, r4}
    c2e4:	006b0dce 	rsbeq	r0, fp, lr, asr #27
    c2e8:	0c100000 	ldceq	0, cr0, [r0], {-0}
    c2ec:	00001ce5 	andeq	r1, r0, r5, ror #25
    c2f0:	450ccf08 	strmi	ip, [ip, #-3848]	; 0xfffff0f8
    c2f4:	14000000 	strne	r0, [r0], #-0
    c2f8:	001fe80c 	andseq	lr, pc, ip, lsl #16
    c2fc:	0cd10800 	ldcleq	8, cr0, [r1], {0}
    c300:	00000045 	andeq	r0, r0, r5, asr #32
    c304:	1ff10c15 	svcne	0x00f10c15
    c308:	d2080000 	andle	r0, r8, #0
    c30c:	0000450c 	andeq	r4, r0, ip, lsl #10
    c310:	430c1600 	movwmi	r1, #50688	; 0xc600
    c314:	0800001d 	stmdaeq	r0, {r0, r2, r3, r4}
    c318:	108d06db 	ldrdne	r0, [sp], fp
    c31c:	0c170000 	ldceq	0, cr0, [r7], {-0}
    c320:	00002239 	andeq	r2, r0, r9, lsr r2
    c324:	470cdc08 	strmi	sp, [ip, -r8, lsl #24]
    c328:	18000009 	stmdane	r0, {r0, r3}
    c32c:	001d770c 	andseq	r7, sp, ip, lsl #14
    c330:	11dd0800 	bicsne	r0, sp, r0, lsl #16
    c334:	00000bd2 	ldrdeq	r0, [r0], -r2
    c338:	1b5e0c1c 	blne	178f3b0 <__ccfg+0x176f408>
    c33c:	de080000 	cdple	0, 0, cr0, cr8, cr0, {0}
    c340:	0009770d 	andeq	r7, r9, sp, lsl #14
    c344:	03002000 	movweq	r2, #0
    c348:	00002019 	andeq	r2, r0, r9, lsl r0
    c34c:	6a3c4308 	bvs	f1cf74 <__ccfg+0xefcfcc>
    c350:	1900000d 	stmdbne	r0, {r0, r2, r3}
    c354:	00001ffa 	strdeq	r1, [r0], -sl
    c358:	021a0828 	andseq	r0, sl, #40, 16	; 0x280000
    c35c:	000e6715 	andeq	r6, lr, r5, lsl r7
    c360:	1acc1700 	bne	ff311f68 <_estack+0xdf30cf68>
    c364:	1b080000 	blne	20c36c <__ccfg+0x1ec3c4>
    c368:	00580d02 	subseq	r0, r8, r2, lsl #26
    c36c:	17000000 	strne	r0, [r0, -r0]
    c370:	000005d4 	ldrdeq	r0, [r0], -r4
    c374:	0d021d08 	stceq	13, cr1, [r2, #-32]	; 0xffffffe0
    c378:	00000058 	andeq	r0, r0, r8, asr r0
    c37c:	1e2c1702 	cdpne	7, 2, cr1, cr12, cr2, {0}
    c380:	20080000 	andcs	r0, r8, r0
    c384:	0b281302 	bleq	a10f94 <__ccfg+0x9f0fec>
    c388:	17040000 	strne	r0, [r4, -r0]
    c38c:	00001bc4 	andeq	r1, r0, r4, asr #23
    c390:	0c022108 	stfeqs	f2, [r2], {8}
    c394:	00000947 	andeq	r0, r0, r7, asr #18
    c398:	1e5c1708 	cdpne	7, 5, cr1, cr12, cr8, {0}
    c39c:	29080000 	stmdbcs	r8, {}	; <UNPREDICTABLE>
    c3a0:	10d70602 	sbcsne	r0, r7, r2, lsl #12
    c3a4:	170c0000 	strne	r0, [ip, -r0]
    c3a8:	00001da6 	andeq	r1, r0, r6, lsr #27
    c3ac:	06022d08 	streq	r2, [r2], -r8, lsl #26
    c3b0:	00001126 	andeq	r1, r0, r6, lsr #2
    c3b4:	1ac1170d 	bne	ff051ff0 <_estack+0xdf04cff0>
    c3b8:	33080000 	movwcc	r0, #32768	; 0x8000
    c3bc:	11530602 	cmpne	r3, r2, lsl #12
    c3c0:	170e0000 	strne	r0, [lr, -r0]
    c3c4:	00001e15 	andeq	r1, r0, r5, lsl lr
    c3c8:	06023808 	streq	r3, [r2], -r8, lsl #16
    c3cc:	00001180 	andeq	r1, r0, r0, lsl #3
    c3d0:	1c4d1710 	mcrrne	7, 1, r1, sp, cr0
    c3d4:	39080000 	stmdbcc	r8, {}	; <UNPREDICTABLE>
    c3d8:	00450c02 	subeq	r0, r5, r2, lsl #24
    c3dc:	17140000 	ldrne	r0, [r4, -r0]
    c3e0:	00001e9e 	muleq	r0, lr, lr
    c3e4:	06024108 	streq	r4, [r2], -r8, lsl #2
    c3e8:	000011ad 	andeq	r1, r0, sp, lsr #3
    c3ec:	1bb91715 	blne	fee52048 <_estack+0xdee4d048>
    c3f0:	55080000 	strpl	r0, [r8, #-0]
    c3f4:	11da0602 	bicsne	r0, sl, r2, lsl #12
    c3f8:	17160000 	ldrne	r0, [r6, -r0]
    c3fc:	00001083 	andeq	r1, r0, r3, lsl #1
    c400:	06026808 	streq	r6, [r2], -r8, lsl #16
    c404:	0000123a 	andeq	r1, r0, sl, lsr r2
    c408:	1c451718 	mcrrne	7, 1, r1, r5, cr8
    c40c:	69080000 	stmdbvs	r8, {}	; <UNPREDICTABLE>
    c410:	00580d02 	subseq	r0, r8, r2, lsl #26
    c414:	171a0000 	ldrne	r0, [sl, -r0]
    c418:	00002079 	andeq	r2, r0, r9, ror r0
    c41c:	0e026a08 	vmlaeq.f32	s12, s4, s16
    c420:	00000b2e 	andeq	r0, r0, lr, lsr #22
    c424:	1afe171c 	bne	fff9209c <_estack+0xdff8d09c>
    c428:	6c080000 	stcvs	0, cr0, [r8], {-0}
    c42c:	00580d02 	subseq	r0, r8, r2, lsl #26
    c430:	17200000 	strne	r0, [r0, -r0]!
    c434:	00001e34 	andeq	r1, r0, r4, lsr lr
    c438:	0c027008 	stceq	0, cr7, [r2], {8}
    c43c:	00000024 	andeq	r0, r0, r4, lsr #32
    c440:	1f711722 	svcne	0x00711722
    c444:	73080000 	movwvc	r0, #32768	; 0x8000
    c448:	00450c02 	subeq	r0, r5, r2, lsl #24
    c44c:	00240000 	eoreq	r0, r4, r0
    c450:	7f08010b 	svcvc	0x0008010b
    c454:	000eb104 	andeq	fp, lr, r4, lsl #2
    c458:	231f2000 	tstcs	pc, #0
    c45c:	80080000 	andhi	r0, r8, r0
    c460:	0000450f 	andeq	r4, r0, pc, lsl #10
    c464:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    c468:	1cad2000 	stcne	0, cr2, [sp]
    c46c:	81080000 	mrshi	r0, (UNDEF: 8)
    c470:	0000450f 	andeq	r4, r0, pc, lsl #10
    c474:	03010100 	movweq	r0, #4352	; 0x1100
    c478:	1d6d2000 	stclne	0, cr2, [sp, #-0]
    c47c:	83080000 	movwhi	r0, #32768	; 0x8000
    c480:	0000450f 	andeq	r4, r0, pc, lsl #10
    c484:	01020100 	mrseq	r0, (UNDEF: 18)
    c488:	1b3b2000 	blne	ed4490 <__ccfg+0xeb44e8>
    c48c:	84080000 	strhi	r0, [r8], #-0
    c490:	0000450f 	andeq	r4, r0, pc, lsl #10
    c494:	00010100 	andeq	r0, r1, r0, lsl #2
    c498:	010b0000 	mrseq	r0, (UNDEF: 11)
    c49c:	db048708 	blle	12e0c4 <__ccfg+0x10e11c>
    c4a0:	2000000e 	andcs	r0, r0, lr
    c4a4:	00002189 	andeq	r2, r0, r9, lsl #3
    c4a8:	450f8808 	strmi	r8, [pc, #-2056]	; bca8 <__exidx_end+0x6c00>
    c4ac:	01000000 	mrseq	r0, (UNDEF: 0)
    c4b0:	20000404 	andcs	r0, r0, r4, lsl #8
    c4b4:	000022e5 	andeq	r2, r0, r5, ror #5
    c4b8:	450f8908 	strmi	r8, [pc, #-2312]	; bbb8 <__exidx_end+0x6b10>
    c4bc:	01000000 	mrseq	r0, (UNDEF: 0)
    c4c0:	00000004 	andeq	r0, r0, r4
    c4c4:	8b08010b 	blhi	20c8f8 <__ccfg+0x1ec950>
    c4c8:	000f1504 	andeq	r1, pc, r4, lsl #10
    c4cc:	22242000 	eorcs	r2, r4, #0
    c4d0:	8c080000 	stchi	0, cr0, [r8], {-0}
    c4d4:	0000450f 	andeq	r4, r0, pc, lsl #10
    c4d8:	07010100 	streq	r0, [r1, -r0, lsl #2]
    c4dc:	22ac2000 	adccs	r2, ip, #0
    c4e0:	8f080000 	svchi	0x00080000
    c4e4:	0000450f 	andeq	r4, r0, pc, lsl #10
    c4e8:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    c4ec:	1af12000 	bne	ffc544f4 <_estack+0xdfc4f4f4>
    c4f0:	91080000 	mrsls	r0, (UNDEF: 8)
    c4f4:	0000450f 	andeq	r4, r0, pc, lsl #10
    c4f8:	03010100 	movweq	r0, #4352	; 0x1100
    c4fc:	010b0000 	mrseq	r0, (UNDEF: 11)
    c500:	5f04a608 	svcpl	0x0004a608
    c504:	2000000f 	andcs	r0, r0, pc
    c508:	0000231f 	andeq	r2, r0, pc, lsl r3
    c50c:	450fa708 	strmi	sl, [pc, #-1800]	; be0c <__exidx_end+0x6d64>
    c510:	01000000 	mrseq	r0, (UNDEF: 0)
    c514:	20000404 	andcs	r0, r0, r4, lsl #8
    c518:	00001cad 	andeq	r1, r0, sp, lsr #25
    c51c:	450fa808 	strmi	sl, [pc, #-2056]	; bd1c <__exidx_end+0x6c74>
    c520:	01000000 	mrseq	r0, (UNDEF: 0)
    c524:	20000301 	andcs	r0, r0, r1, lsl #6
    c528:	00001d6d 	andeq	r1, r0, sp, ror #26
    c52c:	450faa08 	strmi	sl, [pc, #-2568]	; bb2c <__exidx_end+0x6a84>
    c530:	01000000 	mrseq	r0, (UNDEF: 0)
    c534:	20000102 	andcs	r0, r0, r2, lsl #2
    c538:	00001b3b 	andeq	r1, r0, fp, lsr fp
    c53c:	450fab08 	strmi	sl, [pc, #-2824]	; ba3c <__exidx_end+0x6994>
    c540:	01000000 	mrseq	r0, (UNDEF: 0)
    c544:	00000001 	andeq	r0, r0, r1
    c548:	ae08010b 	adfgee	f0, f0, #3.0
    c54c:	000f8904 	andeq	r8, pc, r4, lsl #18
    c550:	21892000 	orrcs	r2, r9, r0
    c554:	af080000 	svcge	0x00080000
    c558:	0000450f 	andeq	r4, r0, pc, lsl #10
    c55c:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    c560:	22e52000 	rsccs	r2, r5, #0
    c564:	b0080000 	andlt	r0, r8, r0
    c568:	0000450f 	andeq	r4, r0, pc, lsl #10
    c56c:	00040100 	andeq	r0, r4, r0, lsl #2
    c570:	010b0000 	mrseq	r0, (UNDEF: 11)
    c574:	1304b208 	movwne	fp, #16904	; 0x4208
    c578:	20000010 	andcs	r0, r0, r0, lsl r0
    c57c:	00002224 	andeq	r2, r0, r4, lsr #4
    c580:	450fb308 	strmi	fp, [pc, #-776]	; c280 <__exidx_end+0x71d8>
    c584:	01000000 	mrseq	r0, (UNDEF: 0)
    c588:	20000701 	andcs	r0, r0, r1, lsl #14
    c58c:	00001b66 	andeq	r1, r0, r6, ror #22
    c590:	450fb508 	strmi	fp, [pc, #-1288]	; c090 <__exidx_end+0x6fe8>
    c594:	01000000 	mrseq	r0, (UNDEF: 0)
    c598:	20000601 	andcs	r0, r0, r1, lsl #12
    c59c:	000020fa 	strdeq	r2, [r0], -sl
    c5a0:	450fb708 	strmi	fp, [pc, #-1800]	; bea0 <__exidx_end+0x6df8>
    c5a4:	01000000 	mrseq	r0, (UNDEF: 0)
    c5a8:	20000501 	andcs	r0, r0, r1, lsl #10
    c5ac:	000022ac 	andeq	r2, r0, ip, lsr #5
    c5b0:	450fb908 	strmi	fp, [pc, #-2312]	; bcb0 <__exidx_end+0x6c08>
    c5b4:	01000000 	mrseq	r0, (UNDEF: 0)
    c5b8:	20000401 	andcs	r0, r0, r1, lsl #8
    c5bc:	00001af1 	strdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    c5c0:	450fbb08 	strmi	fp, [pc, #-2824]	; bac0 <__exidx_end+0x6a18>
    c5c4:	01000000 	mrseq	r0, (UNDEF: 0)
    c5c8:	20000301 	andcs	r0, r0, r1, lsl #6
    c5cc:	00002241 	andeq	r2, r0, r1, asr #4
    c5d0:	450fbd08 	strmi	fp, [pc, #-3336]	; b8d0 <__exidx_end+0x6828>
    c5d4:	01000000 	mrseq	r0, (UNDEF: 0)
    c5d8:	20000201 	andcs	r0, r0, r1, lsl #4
    c5dc:	00001d7e 	andeq	r1, r0, lr, ror sp
    c5e0:	450fbf08 	strmi	fp, [pc, #-3848]	; b6e0 <__exidx_end+0x6638>
    c5e4:	01000000 	mrseq	r0, (UNDEF: 0)
    c5e8:	20000101 	andcs	r0, r0, r1, lsl #2
    c5ec:	00002105 	andeq	r2, r0, r5, lsl #2
    c5f0:	450fc108 	strmi	ip, [pc, #-264]	; c4f0 <__exidx_end+0x7448>
    c5f4:	01000000 	mrseq	r0, (UNDEF: 0)
    c5f8:	00000001 	andeq	r0, r0, r1
    c5fc:	c408010b 	strgt	r0, [r8], #-267	; 0xfffffef5
    c600:	00108d04 	andseq	r8, r0, r4, lsl #26
    c604:	1e3c2000 	cdpne	0, 3, cr2, cr12, cr0, {0}
    c608:	c5080000 	strgt	r0, [r8, #-0]
    c60c:	0000450f 	andeq	r4, r0, pc, lsl #10
    c610:	07010100 	streq	r0, [r1, -r0, lsl #2]
    c614:	1c752000 	ldclne	0, cr2, [r5], #-0
    c618:	c6080000 	strgt	r0, [r8], -r0
    c61c:	0000450f 	andeq	r4, r0, pc, lsl #10
    c620:	06010100 	streq	r0, [r1], -r0, lsl #2
    c624:	1db02000 	ldcne	0, cr2, [r0]
    c628:	c8080000 	stmdagt	r8, {}	; <UNPREDICTABLE>
    c62c:	0000450f 	andeq	r4, r0, pc, lsl #10
    c630:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    c634:	1d192000 	ldcne	0, cr2, [r9, #-0]
    c638:	c9080000 	stmdbgt	r8, {}	; <UNPREDICTABLE>
    c63c:	0000450f 	andeq	r4, r0, pc, lsl #10
    c640:	03010100 	movweq	r0, #4352	; 0x1100
    c644:	208e2000 	addcs	r2, lr, r0
    c648:	ca080000 	bgt	20c650 <__ccfg+0x1ec6a8>
    c64c:	0000450f 	andeq	r4, r0, pc, lsl #10
    c650:	02010100 	andeq	r0, r1, #0, 2
    c654:	1bce2000 	blne	ff39465c <_estack+0xdf38f65c>
    c658:	cb080000 	blgt	20c660 <__ccfg+0x1ec6b8>
    c65c:	0000450f 	andeq	r4, r0, pc, lsl #10
    c660:	01010100 	mrseq	r0, (UNDEF: 17)
    c664:	1ad62000 	bne	ff59466c <_estack+0xdf58f66c>
    c668:	cc080000 	stcgt	0, cr0, [r8], {-0}
    c66c:	0000450f 	andeq	r4, r0, pc, lsl #10
    c670:	00010100 	andeq	r0, r1, r0, lsl #2
    c674:	010b0000 	mrseq	r0, (UNDEF: 11)
    c678:	d704d408 	strle	sp, [r4, -r8, lsl #8]
    c67c:	20000010 	andcs	r0, r0, r0, lsl r0
    c680:	0000231f 	andeq	r2, r0, pc, lsl r3
    c684:	450fd508 	strmi	sp, [pc, #-1288]	; c184 <__exidx_end+0x70dc>
    c688:	01000000 	mrseq	r0, (UNDEF: 0)
    c68c:	20000404 	andcs	r0, r0, r4, lsl #8
    c690:	00001cad 	andeq	r1, r0, sp, lsr #25
    c694:	450fd608 	strmi	sp, [pc, #-1544]	; c094 <__exidx_end+0x6fec>
    c698:	01000000 	mrseq	r0, (UNDEF: 0)
    c69c:	20000301 	andcs	r0, r0, r1, lsl #6
    c6a0:	00001d6d 	andeq	r1, r0, sp, ror #26
    c6a4:	450fd808 	strmi	sp, [pc, #-2056]	; bea4 <__exidx_end+0x6dfc>
    c6a8:	01000000 	mrseq	r0, (UNDEF: 0)
    c6ac:	20000102 	andcs	r0, r0, r2, lsl #2
    c6b0:	00001b3b 	andeq	r1, r0, fp, lsr fp
    c6b4:	450fd908 	strmi	sp, [pc, #-2312]	; bdb4 <__exidx_end+0x6d0c>
    c6b8:	01000000 	mrseq	r0, (UNDEF: 0)
    c6bc:	00000001 	andeq	r0, r0, r1
    c6c0:	2208011a 	andcs	r0, r8, #-2147483642	; 0x80000006
    c6c4:	11260402 			; <UNDEFINED> instruction: 0x11260402
    c6c8:	1f210000 	svcne	0x00210000
    c6cc:	08000023 	stmdaeq	r0, {r0, r1, r5}
    c6d0:	450f0223 	strmi	r0, [pc, #-547]	; c4b5 <__exidx_end+0x740d>
    c6d4:	01000000 	mrseq	r0, (UNDEF: 0)
    c6d8:	21000404 	tstcs	r0, r4, lsl #8
    c6dc:	00001cad 	andeq	r1, r0, sp, lsr #25
    c6e0:	0f022408 	svceq	0x00022408
    c6e4:	00000045 	andeq	r0, r0, r5, asr #32
    c6e8:	00030101 	andeq	r0, r3, r1, lsl #2
    c6ec:	001d6d21 	andseq	r6, sp, r1, lsr #26
    c6f0:	02260800 	eoreq	r0, r6, #0, 16
    c6f4:	0000450f 	andeq	r4, r0, pc, lsl #10
    c6f8:	01020100 	mrseq	r0, (UNDEF: 18)
    c6fc:	1b3b2100 	blne	ed4b04 <__ccfg+0xeb4b5c>
    c700:	27080000 	strcs	r0, [r8, -r0]
    c704:	00450f02 	subeq	r0, r5, r2, lsl #30
    c708:	01010000 	mrseq	r0, (UNDEF: 1)
    c70c:	1a000000 	bne	c714 <__exidx_end+0x766c>
    c710:	022a0801 	eoreq	r0, sl, #65536	; 0x10000
    c714:	00115304 	andseq	r5, r1, r4, lsl #6
    c718:	21892100 	orrcs	r2, r9, r0, lsl #2
    c71c:	2b080000 	blcs	20c724 <__ccfg+0x1ec77c>
    c720:	00450f02 	subeq	r0, r5, r2, lsl #30
    c724:	04010000 	streq	r0, [r1], #-0
    c728:	e5210004 	str	r0, [r1, #-4]!
    c72c:	08000022 	stmdaeq	r0, {r1, r5}
    c730:	450f022c 	strmi	r0, [pc, #-556]	; c50c <__exidx_end+0x7464>
    c734:	01000000 	mrseq	r0, (UNDEF: 0)
    c738:	00000004 	andeq	r0, r0, r4
    c73c:	2e08021a 	mcrcs	2, 0, r0, cr8, cr10, {0}
    c740:	11800402 	orrne	r0, r0, r2, lsl #8
    c744:	c5210000 	strgt	r0, [r1, #-0]!
    c748:	0800001d 	stmdaeq	r0, {r0, r2, r3, r4}
    c74c:	5810022f 	ldmdapl	r0, {r0, r1, r2, r3, r5, r9}
    c750:	02000000 	andeq	r0, r0, #0
    c754:	21000d03 	tstcs	r0, r3, lsl #26
    c758:	000022c8 	andeq	r2, r0, r8, asr #5
    c75c:	10023208 	andne	r3, r2, r8, lsl #4
    c760:	00000058 	andeq	r0, r0, r8, asr r0
    c764:	00000d02 	andeq	r0, r0, r2, lsl #26
    c768:	08041a00 	stmdaeq	r4, {r9, fp, ip}
    c76c:	ad040234 	sfmge	f0, 4, [r4, #-208]	; 0xffffff30
    c770:	21000011 	tstcs	r0, r1, lsl r0
    c774:	00001f59 	andeq	r1, r0, r9, asr pc
    c778:	10023508 	andne	r3, r2, r8, lsl #10
    c77c:	0000006b 	andeq	r0, r0, fp, rrx
    c780:	001c0404 	andseq	r0, ip, r4, lsl #8
    c784:	00206921 	eoreq	r6, r0, r1, lsr #18
    c788:	02370800 	eorseq	r0, r7, #0, 16
    c78c:	00006b10 	andeq	r6, r0, r0, lsl fp
    c790:	03150400 	tsteq	r5, #0, 8
    c794:	011a0000 	tsteq	sl, r0
    c798:	04023a08 	streq	r3, [r2], #-2568	; 0xfffff5f8
    c79c:	000011da 	ldrdeq	r1, [r0], -sl
    c7a0:	0021bd21 	eoreq	fp, r1, r1, lsr #26
    c7a4:	023b0800 	eorseq	r0, fp, #0, 16
    c7a8:	0000450f 	andeq	r4, r0, pc, lsl #10
    c7ac:	02060100 	andeq	r0, r6, #0, 2
    c7b0:	1b932100 	blne	fe4d4bb8 <_estack+0xde4cfbb8>
    c7b4:	3d080000 	stccc	0, cr0, [r8, #-0]
    c7b8:	00450f02 	subeq	r0, r5, r2, lsl #30
    c7bc:	02010000 	andeq	r0, r1, #0
    c7c0:	1a000000 	bne	c7c8 <__exidx_end+0x7720>
    c7c4:	02420802 	subeq	r0, r2, #131072	; 0x20000
    c7c8:	00123a04 	andseq	r3, r2, r4, lsl #20
    c7cc:	1f622100 	svcne	0x00622100
    c7d0:	43080000 	movwmi	r0, #32768	; 0x8000
    c7d4:	00581002 	subseq	r1, r8, r2
    c7d8:	06020000 	streq	r0, [r2], -r0
    c7dc:	ff21000a 			; <UNDEFINED> instruction: 0xff21000a
    c7e0:	0800001d 	stmdaeq	r0, {r0, r2, r3, r4}
    c7e4:	58100244 	ldmdapl	r0, {r2, r6, r9}
    c7e8:	02000000 	andeq	r0, r0, #0
    c7ec:	21000901 	tstcs	r0, r1, lsl #18
    c7f0:	00001fca 	andeq	r1, r0, sl, asr #31
    c7f4:	10024608 	andne	r4, r2, r8, lsl #12
    c7f8:	00000058 	andeq	r0, r0, r8, asr r0
    c7fc:	00080102 	andeq	r0, r8, r2, lsl #2
    c800:	001b7b21 	andseq	r7, fp, r1, lsr #22
    c804:	02480800 	subeq	r0, r8, #0, 16
    c808:	00005810 	andeq	r5, r0, r0, lsl r8
    c80c:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    c810:	1b1e2100 	blne	794c18 <__ccfg+0x774c70>
    c814:	4d080000 	stcmi	0, cr0, [r8, #-0]
    c818:	00581002 	subseq	r1, r8, r2
    c81c:	03020000 	movweq	r0, #8192	; 0x2000
    c820:	1a000000 	bne	c828 <__exidx_end+0x7780>
    c824:	02560802 	subseq	r0, r6, #131072	; 0x20000
    c828:	00128904 	andseq	r8, r2, r4, lsl #18
    c82c:	1d602100 	stfnee	f2, [r0, #-0]
    c830:	57080000 	strpl	r0, [r8, -r0]
    c834:	00581002 	subseq	r1, r8, r2
    c838:	03020000 	movweq	r0, #8192	; 0x2000
    c83c:	ff21000d 			; <UNDEFINED> instruction: 0xff21000d
    c840:	0800001c 	stmdaeq	r0, {r2, r3, r4}
    c844:	5810025d 	ldmdapl	r0, {r0, r2, r3, r4, r6, r9}
    c848:	02000000 	andeq	r0, r0, #0
    c84c:	21000c01 	tstcs	r0, r1, lsl #24
    c850:	00001c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    c854:	10025f08 	andne	r5, r2, r8, lsl #30
    c858:	00000058 	andeq	r0, r0, r8, asr r0
    c85c:	00060602 	andeq	r0, r6, r2, lsl #12
    c860:	001f9d21 	andseq	r9, pc, r1, lsr #26
    c864:	02660800 	rsbeq	r0, r6, #0, 16
    c868:	00005810 	andeq	r5, r0, r0, lsl r8
    c86c:	05010200 	streq	r0, [r1, #-512]	; 0xfffffe00
    c870:	77090000 	strvc	r0, [r9, -r0]
    c874:	99000000 	stmdbls	r0, {}	; <UNPREDICTABLE>
    c878:	0a000012 	beq	c8c8 <__exidx_end+0x7820>
    c87c:	00000091 	muleq	r0, r1, r0
    c880:	890400a2 	stmdbhi	r4, {r1, r5, r7}
    c884:	22000012 	andcs	r0, r0, #18
    c888:	00001e69 	andeq	r1, r0, r9, ror #28
    c88c:	99104909 	ldmdbls	r0, {r0, r3, r8, fp, lr}
    c890:	8c000012 	stchi	0, cr0, [r0], {18}
    c894:	0004ad02 	andeq	sl, r4, r2, lsl #26
    c898:	00044921 	andeq	r4, r4, r1, lsr #18
    c89c:	00047d21 	andeq	r7, r4, r1, lsr #26
    c8a0:	00048121 	andeq	r8, r4, r1, lsr #2
    c8a4:	00051121 	andeq	r1, r5, r1, lsr #2
    c8a8:	00059121 	andeq	r9, r5, r1, lsr #2
    c8ac:	00064121 	andeq	r4, r6, r1, lsr #2
    c8b0:	10b5f821 	adcsne	pc, r5, r1, lsr #16
    c8b4:	0eb5f847 	cdpeq	8, 11, cr15, cr5, cr7, {2}
    c8b8:	01210046 			; <UNDEFINED> instruction: 0x01210046
    c8bc:	3004ad25 	andcc	sl, r4, r5, lsr #26
    c8c0:	03480a47 	movteq	r0, #35399	; 0x8a47
    c8c4:	0ff00078 	svceq	0x00f00078
    c8c8:	0b079bf8 	bleq	1f38b0 <__ccfg+0x1d3908>
    c8cc:	204c12d0 	ldrdcs	r1, [ip], #-32	; 0xffffffe0
    c8d0:	0728ff78 			; <UNDEFINED> instruction: 0x0728ff78
    c8d4:	2121ffd0 	ldrdcs	pc, [r1, -r0]!
    c8d8:	0f490e70 	svceq	0x00490e70
    c8dc:	20022424 	andcs	r2, r2, r4, lsr #8
    c8e0:	c8316043 	ldmdagt	r1!, {r0, r1, r6, sp, lr}
    c8e4:	f8bdf882 			; <UNDEFINED> instruction: 0xf8bdf882
    c8e8:	004801b5 	strheq	r0, [r8], #-21	; 0xffffffeb
    c8ec:	00026b47 	andeq	r6, r2, r7, asr #22
    c8f0:	004ce521 	subeq	lr, ip, r1, lsr #10
    c8f4:	01480900 	cmpeq	r8, r0, lsl #18
    c8f8:	004808e0 	subeq	r0, r8, r0, ror #17
    c8fc:	054c060c 	strbeq	r0, [ip, #-1548]	; 0xfffff9f4
    c900:	ff782249 			; <UNDEFINED> instruction: 0xff782249
    c904:	cad1012a 	bgt	ff44cdb4 <_estack+0xdf447db4>
    c908:	6070227a 	rsbsvs	r2, r0, sl, ror r2
    c90c:	7082c831 	addvc	ip, r2, r1, lsr r8
    c910:	001c8046 	andseq	r8, ip, r6, asr #32
    c914:	08620047 	stmdaeq	r2!, {r0, r1, r2, r6}^
    c918:	0006a440 	andeq	sl, r6, r0, asr #8
    c91c:	080f0721 	stmdaeq	pc, {r0, r5, r8, r9, sl}	; <UNPREDICTABLE>
    c920:	08b4f008 	ldmeq	r4!, {r3, ip, sp, lr, pc}
    c924:	03b57047 			; <UNDEFINED> instruction: 0x03b57047
    c928:	01461546 	cmpeq	r6, r6, asr #10
    c92c:	00d00629 	sbcseq	r0, r0, r9, lsr #12
    c930:	11d00629 	bicsne	r0, r0, r9, lsr #12
    c934:	ff46284a 			; <UNDEFINED> instruction: 0xff46284a
    c938:	70ffbbf7 	ldrshtvc	fp, [pc], #183
    c93c:	00480fbd 	strheq	r0, [r8], #-253	; 0xffffff03
    c940:	05480fe0 	strbeq	r0, [r8, #-4064]	; 0xfffff020
    c944:	03428324 	movteq	r8, #8996	; 0x2324
    c948:	640840d8 	strvs	r4, [r8], #-216	; 0xffffff28
    c94c:	f92c001e 			; <UNDEFINED> instruction: 0xf92c001e
    c950:	0140e3dc 	ldrdeq	lr, [r0, #-60]	; 0xffffffc4
    c954:	18034020 	stmdane	r3, {r5, lr}
    c958:	010b8218 	tsteq	fp, r8, lsl r2
    c95c:	06d00729 	ldrbeq	r0, [r0], r9, lsr #14
    c960:	80230049 	eorhi	r0, r3, r9, asr #32
    c964:	ff462831 			; <UNDEFINED> instruction: 0xff462831
    c968:	e0ffa5f7 	ldrsht	sl, [pc], #87
    c96c:	02bd70b2 	adcseq	r7, sp, #178	; 0xb2
    c970:	6c4b0449 	cfstrdvs	mvd0, [fp], {73}	; 0x49
    c974:	00e7f631 	rsceq	pc, r7, r1, lsr r6	; <UNPREDICTABLE>
    c978:	005c8300 	subseq	r8, ip, r0, lsl #6
    c97c:	86bca000 	ldrthi	sl, [ip], r0
    c980:	0d830023 	stceq	0, cr0, [r3, #140]	; 0x8c
    c984:	00067423 	andeq	r7, r6, r3, lsr #8
    c988:	1ab5f821 	bne	fed8aa14 <_estack+0xded85a14>
    c98c:	7146054e 	cmpvc	r6, lr, asr #10
    c990:	cc48196b 	mcrrgt	9, 6, r1, r8, cr11	; <UNPREDICTABLE>
    c994:	0001e409 	andeq	lr, r1, r9, lsl #8
    c998:	18d0112d 	ldmne	r0, {r0, r2, r3, r5, r8, ip}^
    c99c:	02780949 	rsbseq	r0, r8, #1196032	; 0x124000
    c9a0:	00d00f29 	sbcseq	r0, r0, r9, lsr #30
    c9a4:	7243047b 	subvc	r0, r3, #2063597568	; 0x7b000000
    c9a8:	152001b6 	strne	r0, [r0, #-438]!	; 0xfffffe4a
    c9ac:	b802404f 	stmdalt	r2, {r0, r1, r2, r3, r6, lr}
    c9b0:	20481147 	subcs	r1, r8, r7, asr #2
    c9b4:	c1880038 	orrgt	r0, r8, r8, lsr r0
    c9b8:	0407c909 	streq	ip, [r7], #-2313	; 0xfffff6f7
    c9bc:	c0e016d0 	ldrdgt	r1, [r0], #96	; 0x60	; <UNPREDICTABLE>
    c9c0:	40e7f07a 	rscmi	pc, r7, sl, ror r0	; <UNPREDICTABLE>
    c9c4:	0fe7ee7b 	svceq	0x00e7ee7b
    c9c8:	cc637449 	cfstrdgt	mvd7, [r3], #-292	; 0xfffffedc
    c9cc:	c00a4061 	andgt	r4, sl, r1, rrx
    c9d0:	01d00c07 	bicseq	r0, r0, r7, lsl #24
    c9d4:	31038020 	tstcc	r3, r0, lsr #32
    c9d8:	012d006b 			; <UNDEFINED> instruction: 0x012d006b
    c9dc:	004301d0 	ldrdeq	r0, [r3], #-16
    c9e0:	084381e0 	stmdaeq	r3, {r5, r6, r7, r8, pc}^
    c9e4:	07633146 	strbeq	r3, [r3, -r6, asr #2]!
    c9e8:	48394049 	ldmdami	r9!, {r0, r3, r6, lr}
    c9ec:	b8200063 	stmdalt	r0!, {r0, r1, r5, r6}
    c9f0:	f8b66247 			; <UNDEFINED> instruction: 0xf8b66247
    c9f4:	000280bd 	strheq	r8, [r2], -sp
    c9f8:	00008821 	andeq	r8, r0, r1, lsr #16
    c9fc:	00029b21 	andeq	r9, r2, r1, lsr #22
    ca00:	003f7b21 	eorseq	r7, pc, r1, lsr #22
    ca04:	04404000 	strbeq	r4, [r0], #-0
    ca08:	22b51040 	adcscs	r1, r5, #64	; 0x40
    ca0c:	5121004a 			; <UNDEFINED> instruction: 0x5121004a
    ca10:	89492161 	stmdbhi	r9, {r0, r5, r6, r8, sp}^
    ca14:	0900c968 	stmdbeq	r0, {r3, r5, r6, r8, fp, lr, pc}
    ca18:	204921d4 	ldrdcs	r2, [r9], #-20	; 0xffffffec
    ca1c:	9805ca4b 	stmdals	r5, {r0, r1, r3, r6, r9, fp, lr, pc}
    ca20:	016b4b42 	cmneq	fp, r2, asr #22
    ca24:	004313d8 	ldrdeq	r1, [r3], #-56	; 0xffffffc8
    ca28:	4b4393e0 	blmi	10f19b0 <__ccfg+0x10d1a08>
    ca2c:	ff491d63 			; <UNDEFINED> instruction: 0xff491d63
    ca30:	10ff77f7 	ldrshtne	r7, [pc], #119
    ca34:	1ab538bd 	bne	fed5ad30 <_estack+0xded55d30>
    ca38:	007f284d 	rsbseq	r2, pc, sp, asr #16
    ca3c:	1ad12728 	bne	ff4566e4 <_estack+0xdf4516e4>
    ca40:	c0880048 	addgt	r0, r8, r8, asr #32
    ca44:	2207c009 	andcs	ip, r7, #9
    ca48:	604c12d1 	ldrdvs	r1, [ip], #-33	; 0xffffffdf
    ca4c:	1e280069 	cdpne	0, 2, cr0, cr8, cr9, {3}
    ca50:	004668d1 	ldrdeq	r6, [r6], #-129	; 0xffffff7f
    ca54:	68f845f0 	ldmvs	r8!, {r4, r5, r6, r7, r8, sl, lr}^
    ca58:	01780046 	cmneq	r8, r6, asr #32
    ca5c:	68d11728 	ldmvs	r1, {r3, r5, r8, r9, sl, ip}^
    ca60:	10784046 	rsbsne	r4, r8, r6, asr #32
    ca64:	08d21328 	ldmeq	r2, {r3, r5, r8, r9, ip}^
    ca68:	68616020 	stmdavs	r1!, {r5, sp, lr}^
    ca6c:	4009406a 	andmi	r4, r9, sl, rrx
    ca70:	0e602001 	cdpeq	0, 6, cr2, cr0, cr1, {0}
    ca74:	d121004a 			; <UNDEFINED> instruction: 0xd121004a
    ca78:	024a0d62 	subeq	r0, sl, #6272	; 0x1880
    ca7c:	01601121 	cmneq	r0, r1, lsr #2
    ca80:	20430821 	subcs	r0, r3, r1, lsr #16
    ca84:	08210360 	stmdaeq	r1!, {r5, r6, r8, r9}
    ca88:	20626843 	rsbcs	r6, r2, r3, asr #16
    ca8c:	09bd3860 	ldmibeq	sp!, {r5, r6, fp, ip, sp}
    ca90:	38478048 	stmdacc	r7, {r3, r6, pc}^
    ca94:	044000bd 	strbeq	r0, [r0], #-189	; 0xffffff43
    ca98:	00001840 	andeq	r1, r0, r0, asr #16
    ca9c:	93000021 	movwls	r0, #33	; 0x21
    caa0:	00028008 	andeq	r8, r2, r8
    caa4:	0068cf21 	rsbeq	ip, r8, r1, lsr #30
    caa8:	00006800 	andeq	r6, r0, r0, lsl #16
    caac:	04110021 	ldreq	r0, [r1], #-33	; 0xffffffdf
    cab0:	00e28040 	rsceq	r8, r2, r0, asr #32
    cab4:	003bc3e0 	eorseq	ip, fp, r0, ror #7
    cab8:	00490700 	subeq	r0, r9, r0, lsl #14
    cabc:	04d00028 	ldrbeq	r0, [r0], #40	; 0x28
    cac0:	724a0620 	subvc	r0, sl, #32, 12	; 0x2000000
    cac4:	c97809b6 	ldmdbgt	r8!, {r1, r2, r4, r5, r7, r8, fp}^
    cac8:	10d00107 	sbcsne	r0, r0, r7, lsl #2
    cacc:	80e00058 	rschi	r0, r0, r8, asr r0
    cad0:	40b66220 	adcsmi	r6, r6, r0, lsr #4
    cad4:	004770b2 	strheq	r7, [r7], #-2
    cad8:	00026b00 	andeq	r6, r2, r0, lsl #22
    cadc:	04605821 	strbteq	r5, [r0], #-2081	; 0xfffff7df
    cae0:	01b40340 			; <UNDEFINED> instruction: 0x01b40340
    cae4:	01900148 	orrseq	r0, r0, r8, asr #2
    cae8:	006fa5bd 	strhteq	sl, [pc], #-93
    caec:	00000000 	andeq	r0, r0, r0
    caf0:	03000100 	movweq	r0, #256	; 0x100
    caf4:	1f000a00 	svcne	0x00000a00
    caf8:	eb005900 	bl	22f00 <__ccfg+0x2f58>
    cafc:	ea023900 	b	9af04 <__ccfg+0x7af5c>
    cb00:	9709f904 	strls	pc, [r9, -r4, lsl #18]
    cb04:	a11feb12 	tstge	pc, r2, lsl fp	; <UNPREDICTABLE>
    cb08:	0a4a7832 	beq	12aabd8 <__ccfg+0x128ac30>
    cb0c:	8c82fa66 	vstmiahi	r2, {s30-s131}
    cb10:	17b6639e 			; <UNDEFINED> instruction: 0x17b6639e
    cb14:	edd664c9 	cfldrd	mvd6, [r6, #804]	; 0x324
    cb18:	e0e3c1de 	ldrd	ip, [r3], #30	; <UNPREDICTABLE>
    cb1c:	0000ffe5 	andeq	pc, r0, r5, ror #31
    cb20:	00770900 	rsbseq	r0, r7, r0, lsl #18
    cb24:	15490000 	strbne	r0, [r9, #-0]
    cb28:	91230000 			; <UNDEFINED> instruction: 0x91230000
    cb2c:	ac000000 	stcge	0, cr0, [r0], {-0}
    cb30:	38040001 	stmdacc	r4, {r0}
    cb34:	22000015 	andcs	r0, r0, #21
    cb38:	00001eb8 			; <UNDEFINED> instruction: 0x00001eb8
    cb3c:	49103a0a 	ldmdbmi	r0, {r1, r3, r9, fp, ip, sp}
    cb40:	b4000015 	strlt	r0, [r0], #-21	; 0xffffffeb
    cb44:	0061a306 	rsbeq	sl, r1, r6, lsl #6
    cb48:	07147f00 	ldreq	r7, [r4, -r0, lsl #30]
    cb4c:	f1004d13 			; <UNDEFINED> instruction: 0xf1004d13
    cb50:	131f2e24 	tstne	pc, #36, 28	; 0x240
    cb54:	3f0ab03f 	svccc	0x000ab03f
    cb58:	00ff0700 	rscseq	r0, pc, r0, lsl #14
    cb5c:	00403000 	subeq	r3, r0, r0
    cb60:	03400140 	movteq	r0, #320	; 0x140
    cb64:	0f400740 	svceq	0x00400740
    cb68:	cf404f40 	svcgt	0x00404f40
    cb6c:	cf41cf40 	svcgt	0x0041cf40
    cb70:	cf47cf43 	svcgt	0x0047cf43
    cb74:	cf3fcf4f 	svcgt	0x003fcf4f
    cb78:	cf1fcf2f 	svcgt	0x001fcf2f
    cb7c:	0000000f 	andeq	r0, r0, pc
    cb80:	08000f00 	stmdaeq	r0, {r8, r9, sl, fp}
    cb84:	3f000000 	svccc	0x00000000
    cb88:	40000000 	andmi	r0, r0, r0
    cb8c:	00003f00 	andeq	r3, r0, r0, lsl #30
    cb90:	68000400 	stmdavs	r0, {sl}
    cb94:	dc000e00 	stcle	14, cr0, [r0], {-0}
    cb98:	43000600 	movwmi	r0, #1536	; 0x600
    cb9c:	05001a00 	streq	r1, [r0, #-2560]	; 0xfffff600
    cba0:	00000000 	andeq	r0, r0, r0
    cba4:	00000200 	andeq	r0, r0, r0, lsl #4
    cba8:	00003f00 	andeq	r3, r0, r0, lsl #30
    cbac:	04000000 	streq	r0, [r0], #-0
    cbb0:	0000c000 	andeq	ip, r0, r0
    cbb4:	c0000400 	andgt	r0, r0, r0, lsl #8
    cbb8:	07000000 	streq	r0, [r0, -r0]
    cbbc:	00c05000 	sbceq	r5, r0, r0
    cbc0:	70700091 			; <UNDEFINED> instruction: 0x70700091
    cbc4:	009100c0 	addseq	r0, r1, r0, asr #1
    cbc8:	21318270 	teqcs	r1, r0, ror r2
    cbcc:	10913100 	addsne	r3, r1, r0, lsl #2
    cbd0:	017000b1 	ldrheq	r0, [r0, #-1]!
    cbd4:	00b10181 	adcseq	r0, r1, r1, lsl #3
    cbd8:	323182a1 	eorscc	r8, r1, #268435466	; 0x1000000a
    cbdc:	01b11091 			; <UNDEFINED> instruction: 0x01b11091
    cbe0:	41101191 			; <UNDEFINED> instruction: 0x41101191
    cbe4:	4f224181 	svcmi	0x00224181
    cbe8:	0006f140 	andeq	pc, r6, r0, asr #2
    cbec:	01c05170 	biceq	r5, r0, r0, ror r1
    cbf0:	10183091 	mulsne	r8, r1, r0
    cbf4:	08318339 	ldmdaeq	r1!, {r0, r3, r4, r5, r8, r9, pc}
    cbf8:	413118d0 	teqmi	r1, r0	; <illegal shifter operand>
    cbfc:	3100316f 	tstcc	r0, pc, ror #2
    cc00:	83b11091 			; <UNDEFINED> instruction: 0x83b11091
    cc04:	5b161414 	blpl	591c5c <__ccfg+0x571cb4>
    cc08:	25700068 	ldrbcs	r0, [r0, #-104]!	; 0xffffff98
    cc0c:	00c05010 	sbceq	r5, r0, r0, lsl r0
    cc10:	c0c3f491 	smullgt	pc, r3, r1, r4	; <UNPREDICTABLE>
    cc14:	031420c0 	tsteq	r4, #192	; 0xc0
    cc18:	4110316f 	tstmi	r0, pc, ror #2
    cc1c:	82c02204 	sbchi	r2, r0, #4, 4	; 0x40000000
    cc20:	31002131 	tstcc	r0, r1, lsr r1
    cc24:	63b11091 			; <UNDEFINED> instruction: 0x63b11091
    cc28:	41103139 	tstmi	r0, r9, lsr r1
    cc2c:	82c08204 	sbchi	r8, r0, #4, 4	; 0x40000000
    cc30:	31002131 	tstcc	r0, r1, lsr r1
    cc34:	63b11091 			; <UNDEFINED> instruction: 0x63b11091
    cc38:	a2103139 	andsge	r3, r0, #1073741838	; 0x4000000e
    cc3c:	213182c0 	teqcs	r1, r0, asr #5
    cc40:	10913100 	addsne	r3, r1, r0, lsl #2
    cc44:	151050b1 	ldrne	r5, [r0, #-177]	; 0xffffff4f
    cc48:	05140531 	ldreq	r0, [r4, #-1329]	; 0xfffffacf
    cc4c:	3f700092 	svccc	0x00700092
    cc50:	31c05264 	biccc	r5, r0, r4, ror #4
    cc54:	61063110 	tstvs	r6, r0, lsl r1
    cc58:	4202c131 	andmi	ip, r2, #1073741836	; 0x4000000c
    cc5c:	31c11264 	biccc	r1, r1, r4, ror #4
    cc60:	71392110 	teqvc	r9, r0, lsl r1
    cc64:	e1315106 	teq	r1, r6, lsl #2
    cc68:	00644202 	rsbeq	r4, r4, r2, lsl #4
    cc6c:	99658a70 	stmdbls	r5!, {r4, r5, r6, r9, fp, pc}^
    cc70:	20c08865 	sbccs	r8, r0, r5, ror #16
    cc74:	80395082 	eorshi	r5, r9, r2, lsl #1
    cc78:	9f1e0039 	svcls	0x001e0039
    cc7c:	01c04140 	biceq	r4, r0, r0, asr #2
    cc80:	18141830 	ldmdane	r4, {r4, r5, fp, ip}
    cc84:	30c0891a 	sbccc	r8, r0, sl, lsl r9
    cc88:	80396082 	eorshi	r6, r9, r2, lsl #1
    cc8c:	a91e0039 	ldmdbge	lr, {r0, r3, r4, r5}
    cc90:	01c04140 	biceq	r4, r0, r0, asr #2
    cc94:	19141930 	ldmdbne	r4, {r4, r5, r8, fp, ip}
    cc98:	36643c1a 			; <UNDEFINED> instruction: 0x36643c1a
    cc9c:	34b11091 	ldrtcc	r1, [r1], #145	; 0x91
    cca0:	54b11091 	ldrtpl	r1, [r1], #145	; 0x91
    cca4:	547100b0 	ldrbtpl	r0, [r1], #-176	; 0xffffff50
    cca8:	f0b064a0 			; <UNDEFINED> instruction: 0xf0b064a0
    ccac:	af220080 	svcge	0x00220080
    ccb0:	b0124040 	andslt	r4, r2, r0, asr #32
    ccb4:	53b03290 	movspl	r3, #144, 4
    ccb8:	53395382 	teqpl	r9, #134217730	; 0x8000002
    ccbc:	3f648539 	svccc	0x00648539
    ccc0:	22c11164 	sbccs	r1, r1, #100, 2
    ccc4:	706442c1 	rsbvc	r4, r4, r1, asr #5
    ccc8:	1168c2c1 	cmnne	r8, r1, asr #5
    cccc:	42c0c2c1 	sbcmi	ip, r0, #268435468	; 0x1000000c
    ccd0:	c7c17064 	strbgt	r7, [r1, r4, rrx]
    ccd4:	00c05068 	sbceq	r5, r0, r8, rrx
    ccd8:	98722791 	ldmdals	r2!, {r0, r4, r7, r8, r9, sl, sp}^
    ccdc:	14161592 	ldrne	r1, [r6], #-1426	; 0xfffffa6e
    cce0:	53104216 	tstpl	r0, #1610612737	; 0x60000001
    cce4:	21c1f010 	biccs	pc, r1, r0, lsl r0	; <UNPREDICTABLE>
    cce8:	31313182 	teqcc	r1, r2, lsl #3
    ccec:	31398139 	teqcc	r9, r9, lsr r1
    ccf0:	70b05131 	adcsvc	r5, r0, r1, lsr r1
    ccf4:	276572b2 			; <UNDEFINED> instruction: 0x276572b2
    ccf8:	70929972 	addsvc	r9, r2, r2, ror r9
    ccfc:	731062b2 	tstvc	r0, #536870923	; 0x2000000b
    cd00:	31c3f010 	biccc	pc, r3, r0, lsl r0	; <UNPREDICTABLE>
    cd04:	21312182 	teqcs	r1, r2, lsl #3
    cd08:	1b398139 	blne	e6d1f4 <__ccfg+0xe4d24c>
    cd0c:	e2657210 	rsb	r7, r5, #16, 4
    cd10:	603182c0 	eorsvs	r8, r1, r0, asr #5
    cd14:	80318082 	eorshi	r8, r1, r2, lsl #1
    cd18:	61000239 	tstvs	r0, r9, lsr r2
    cd1c:	327100b0 	rsbscc	r0, r1, #176	; 0xb0
    cd20:	51b11091 			; <UNDEFINED> instruction: 0x51b11091
    cd24:	27b061a0 	ldrcs	r6, [r0, r0, lsr #3]!
    cd28:	f3c23072 	vmvn.i32	<illegal reg q9.5>, #162	; 0x000000a2
    cd2c:	80000068 	andhi	r0, r0, r8, rrx
    cd30:	3290b012 	addscc	fp, r0, #18
    cd34:	507000b0 	ldrhtpl	r0, [r0], #-0
    cd38:	279100c0 	ldrcs	r0, [r1, r0, asr #1]
    cd3c:	62929972 	addsvs	r9, r2, #1867776	; 0x1c8000
    cd40:	f0107310 			; <UNDEFINED> instruction: 0xf0107310
    cd44:	218231c3 	orrcs	r3, r2, r3, asr #3
    cd48:	81392131 	teqhi	r9, r1, lsr r1
    cd4c:	70b05139 	adcsvc	r5, r0, r9, lsr r1
    cd50:	27657eb2 			; <UNDEFINED> instruction: 0x27657eb2
    cd54:	70929872 	addsvc	r9, r2, r2, ror r8
    cd58:	531042b2 	tstpl	r0, #536870923	; 0x2000000b
    cd5c:	21c1f010 	biccs	pc, r1, r0, lsl r0	; <UNPREDICTABLE>
    cd60:	31313182 	teqcc	r1, r2, lsl #3
    cd64:	31398139 	teqcc	r9, r9, lsr r1
    cd68:	7e101a31 			; <UNDEFINED> instruction: 0x7e101a31
    cd6c:	61a05165 	rorvs	r5, r5, #2
    cd70:	b07227b0 	ldrhtlt	r2, [r2], #-112	; 0xffffff90
    cd74:	3f6918c0 	svccc	0x006918c0
    cd78:	22c10164 	sbccs	r0, r1, #100, 2
    cd7c:	016442c1 	cmneq	r4, r1, asr #5
    cd80:	42c0c2c1 	sbcmi	ip, r0, #268435468	; 0x1000000c
    cd84:	3c1a1564 	cfldr32cc	mvfx1, [sl], {100}	; 0x64
    cd88:	10913564 	addsne	r3, r1, r4, ror #10
    cd8c:	858253b1 	strhi	r5, [r2, #945]	; 0x3b1
    cd90:	b012c064 	andslt	ip, r2, r4, rrx
    cd94:	00b03290 	umlalseq	r3, r0, r0, r2
    cd98:	72643f70 	rsbvc	r3, r4, #112, 30	; 0x1c0
    cd9c:	42c081c2 	sbcmi	r8, r0, #-2147483600	; 0x80000030
    cda0:	11c12264 	bicne	r2, r1, r4, ror #4
    cda4:	026442c1 	rsbeq	r4, r4, #268435468	; 0x1000000c
    cda8:	42c111c0 	sbcmi	r1, r1, #192, 2	; 0x30
    cdac:	31c06264 	biccc	r6, r0, r4, ror #4
    cdb0:	626442c3 	rsbvs	r4, r4, #805306380	; 0x3000000c
    cdb4:	42c111c3 	sbcmi	r1, r1, #-1073741776	; 0xc0000030
    cdb8:	11c30264 	bicne	r0, r3, r4, ror #4
    cdbc:	536442c1 	cmnpl	r4, #268435468	; 0x1000000c
    cdc0:	85395382 	ldrhi	r5, [r9, #-898]!	; 0xfffffc7e
    cdc4:	47c3e264 	strbmi	lr, [r3, r4, ror #4]
    cdc8:	40221164 	eormi	r1, r2, r4, ror #2
    cdcc:	81c24241 	bichi	r4, r2, r1, asr #4
    cdd0:	526442c8 	rsbpl	r4, r4, #200, 4	; 0x8000000c
    cdd4:	42c111c2 	sbcmi	r1, r1, #-2147483600	; 0x80000030
    cdd8:	e1c27264 	bic	r7, r2, r4, ror #4
    cddc:	026442ce 	rsbeq	r4, r4, #-536870900	; 0xe000000c
    cde0:	42c881c2 	sbcmi	r8, r8, #-2147483600	; 0x80000030
    cde4:	01c20264 	biceq	r0, r2, r4, ror #4
    cde8:	b06442c8 	rsblt	r4, r4, r8, asr #5
    cdec:	006954c0 	rsbeq	r5, r9, r0, asr #9
    cdf0:	42643f70 	rsbmi	r3, r4, #112, 30	; 0x1c0
    cdf4:	42c801c2 	sbcmi	r0, r8, #-2147483600	; 0x80000030
    cdf8:	11c25264 	bicne	r5, r2, r4, ror #4
    cdfc:	726442c0 	rsbvc	r4, r4, #192, 4
    ce00:	42c0e1c2 	sbcmi	lr, r0, #-2147483600	; 0x80000030
    ce04:	01c00264 	biceq	r0, r0, r4, ror #4
    ce08:	626442c1 	rsbvs	r4, r4, #268435468	; 0x1000000c
    ce0c:	42c301c0 	sbcmi	r0, r3, #192, 2	; 0x30
    ce10:	01c12264 	biceq	r2, r1, r4, ror #4
    ce14:	626442c1 	rsbvs	r4, r4, #268435468	; 0x1000000c
    ce18:	42c101c3 	sbcmi	r0, r1, #-1073741776	; 0xc0000030
    ce1c:	01c30264 	biceq	r0, r3, r4, ror #4
    ce20:	536442c1 	cmnpl	r4, #268435468	; 0x1000000c
    ce24:	00648582 	rsbeq	r8, r4, r2, lsl #11
    ce28:	00b06170 	adcseq	r6, r0, r0, ror r1
    ce2c:	23141271 	tstcs	r4, #268435463	; 0x10000007
    ce30:	334d7a1c 	movtcc	r7, #55836	; 0xda1c
    ce34:	00b11091 	umlalseq	r1, r1, r1, r0	; <UNPREDICTABLE>
    ce38:	10913270 	addsne	r3, r1, r0, ror r2
    ce3c:	006972b1 	strhteq	r7, [r9], #-33	; 0xffffffdf
    ce40:	00b06170 	adcseq	r6, r0, r0, ror r1
    ce44:	32181371 	andscc	r1, r8, #-1006632959	; 0xc4000001
    ce48:	3249861c 	subcc	r8, r9, #28, 12	; 0x1c00000
    ce4c:	00b11091 	umlalseq	r1, r1, r1, r0	; <UNPREDICTABLE>
    ce50:	10913370 	addsne	r3, r1, r0, ror r3
    ce54:	00697eb1 	strhteq	r7, [r9], #-225	; 0xffffff1f
    ce58:	47c0c270 			; <UNDEFINED> instruction: 0x47c0c270
    ce5c:	c2101564 	andsgt	r1, r0, #100, 10	; 0x19000000
    ce60:	471612c0 	ldrmi	r1, [r6, -r0, asr #5]
    ce64:	15314164 	ldrne	r4, [r1, #-356]!	; 0xfffffe9c
    ce68:	80c0c014 	sbchi	ip, r0, r4, lsl r0
    ce6c:	54140531 	ldrpl	r0, [r4], #-1329	; 0xfffffacf
    ce70:	0478a010 	ldrbteq	sl, [r8], #-16
    ce74:	e6700004 	ldrbt	r0, [r0], -r4
    ce78:	013186c0 	teqeq	r1, r0, asr #13
    ce7c:	671416cc 	ldrvs	r1, [r4, -ip, asr #13]
    ce80:	f0826110 			; <UNDEFINED> instruction: 0xf0826110
    ce84:	170401c3 	strne	r0, [r4, -r3, asr #3]
    ce88:	06700014 			; <UNDEFINED> instruction: 0x06700014
    ce8c:	0b720573 	bleq	1c8e460 <__ccfg+0x1c6e4b8>
    ce90:	50720e72 	rsbspl	r0, r2, r2, ror lr
    ce94:	817100b0 	ldrhhi	r0, [r1, #-0]!
    ce98:	50b06080 	adcspl	r6, r0, r0, lsl #1
    ce9c:	418092a0 	orrmi	r9, r0, r0, lsr #5
    cea0:	8045c322 	subhi	ip, r5, r2, lsr #6
    cea4:	10c1f180 	sbcne	pc, r1, r0, lsl #3
    cea8:	01163004 	tsteq	r6, r4
    ceac:	01140111 	tsteq	r4, r1, lsl r1
    ceb0:	d761d66c 	strble	sp, [r1, -ip, ror #12]!
    ceb4:	d961d861 	stmdble	r1!, {r0, r5, r6, fp, ip, lr, pc}^
    ceb8:	db61da61 	blle	1883844 <__ccfg+0x186389c>
    cebc:	de61dc61 	cdple	12, 6, cr13, cr1, cr1, {3}
    cec0:	e261e061 	rsb	lr, r1, #97	; 0x61
    cec4:	3661e461 	strbtcc	lr, [r1], -r1, ror #8
    cec8:	91633963 	cmnls	r3, r3, ror #18
    cecc:	21c0f280 	biccs	pc, r0, r0, lsl #5
    ced0:	82312104 	eorshi	r2, r1, #4, 2
    ced4:	122a4280 	eorne	r4, sl, #128, 4
    ced8:	01163214 	tsteq	r6, r4, lsl r2
    cedc:	01142111 	tsteq	r4, r1, lsl r1
    cee0:	0b61ee6c 	bleq	1888898 <__ccfg+0x18688f0>
    cee4:	3961f462 	stmdbcc	r1!, {r1, r5, r6, sl, ip, sp, lr, pc}^
    cee8:	0b61ee63 	bleq	188887c <__ccfg+0x18688d4>
    ceec:	3961f462 	stmdbcc	r1!, {r1, r5, r6, sl, ip, sp, lr, pc}^
    cef0:	e661e663 	strbt	lr, [r1], -r3, ror #12
    cef4:	e661e661 	strbt	lr, [r1], -r1, ror #12
    cef8:	e661e661 	strbt	lr, [r1], -r1, ror #12
    cefc:	e6649461 	strbt	r9, [r4], -r1, ror #8
    cf00:	e664f961 	strbt	pc, [r4], -r1, ror #18	; <UNPREDICTABLE>
    cf04:	e6652a61 	strbt	r2, [r5], -r1, ror #20
    cf08:	e6655661 	strbt	r5, [r5], -r1, ror #12
    cf0c:	e6674661 	strbt	r4, [r7], -r1, ror #12
    cf10:	b0121061 	andslt	r1, r2, r1, rrx
    cf14:	06720e90 			; <UNDEFINED> instruction: 0x06720e90
    cf18:	10720573 	rsbsne	r0, r2, r3, ror r5
    cf1c:	a7903012 			; <UNDEFINED> instruction: 0xa7903012
    cf20:	3ccff061 	stclcc	0, cr15, [pc], {97}	; 0x61
    cf24:	03c1d467 	biceq	sp, r1, #1728053248	; 0x67000000
    cf28:	54c3c0c0 	strbpl	ip, [r3], #192	; 0xc0
    cf2c:	50784064 	rsbspl	r4, r8, r4, rrx
    cf30:	10785091 			; <UNDEFINED> instruction: 0x10785091
    cf34:	20786092 			; <UNDEFINED> instruction: 0x20786092
    cf38:	30787092 			; <UNDEFINED> instruction: 0x30787092
    cf3c:	40788092 			; <UNDEFINED> instruction: 0x40788092
    cf40:	60789092 			; <UNDEFINED> instruction: 0x60789092
    cf44:	90783092 			; <UNDEFINED> instruction: 0x90783092
    cf48:	40821091 	umullmi	r1, r2, r1, r0
    cf4c:	0106f039 	tsteq	r6, r9, lsr r0	; <UNPREDICTABLE>
    cf50:	10311010 	eorsne	r1, r1, r0, lsl r0
    cf54:	42920014 	addsmi	r0, r2, #20
    cf58:	bc61e667 	stcllt	6, cr14, [r1], #-412	; 0xfffffe64
    cf5c:	54a0e2a0 	strtpl	lr, [r0], #672	; 0x2a0
    cf60:	5080f0a0 	addpl	pc, r0, r0, lsr #1
    cf64:	40461522 	submi	r1, r6, r2, lsr #10
    cf68:	2b220080 	blcs	88d170 <__ccfg+0x86d1c8>
    cf6c:	40620d47 	rsbmi	r0, r2, r7, asr #26
    cf70:	8d822da0 	stchi	13, cr2, [r2, #640]	; 0x280
    cf74:	10398d31 	eorsne	r8, r9, r1, lsr sp
    cf78:	10c0f182 	sbcne	pc, r0, r2, lsl #3
    cf7c:	1a100904 	bne	40f394 <__ccfg+0x3ef3ec>
    cf80:	1a394a82 	bne	e5f990 <__ccfg+0xe3f9e8>
    cf84:	80821004 	addhi	r1, r2, r4
    cf88:	0e041039 	mcreq	0, 0, r1, cr4, cr9, {1}
    cf8c:	bc10ab10 			; <UNDEFINED> instruction: 0xbc10ab10
    cf90:	6310c210 	tstvs	r0, #16, 4
    cf94:	e0722964 	rsbs	r2, r2, r4, ror #18
    cf98:	13673ccf 	cmnne	r7, #52992	; 0xcf00
    cf9c:	c8b003b0 	ldmgt	r0!, {r4, r5, r7, r8, r9}
    cfa0:	50b05366 	adcspl	r5, r0, r6, ror #6
    cfa4:	64b054b0 	ldrtvs	r5, [r0], #1200	; 0x4b0
    cfa8:	a5b013b0 	ldrge	r1, [r0, #944]!	; 0x3b0
    cfac:	e0821066 	add	r1, r2, r6, rrx
    cfb0:	ae463822 	cdpge	8, 4, cr3, cr6, cr2, {1}
    cfb4:	41710066 	cmnmi	r1, r6, rrx
    cfb8:	2b220180 	blcs	88d5c0 <__ccfg+0x86d618>
    cfbc:	1080f047 	addne	pc, r0, r7, asr #32
    cfc0:	f0464b22 			; <UNDEFINED> instruction: 0xf0464b22
    cfc4:	64471822 	strbvs	r1, [r7], #-2082	; 0xfffff7de
    cfc8:	382231b0 	stmdacc	r2!, {r4, r5, r7, r8, ip, sp}
    cfcc:	ceb06342 	cdpgt	3, 11, cr6, cr0, cr2, {2}
    cfd0:	e0821066 	add	r1, r2, r6, rrx
    cfd4:	70463822 	subvc	r3, r6, r2, lsr #16
    cfd8:	64623866 	strbtvs	r3, [r2], #-2150	; 0xfffff79a
    cfdc:	8f816fb0 	svchi	0x00816fb0
    cfe0:	d03d8f31 	eorsle	r8, sp, r1, lsr pc
    cfe4:	3c92ffdf 	ldccc	15, cr15, [r2], {223}	; 0xdf
    cfe8:	41710067 	cmnmi	r1, r7, rrx
    cfec:	2b220180 	blcs	88d5f4 <__ccfg+0x86d64c>
    cff0:	f0b06447 			; <UNDEFINED> instruction: 0xf0b06447
    cff4:	65225080 	strvs	r5, [r2, #-128]!	; 0xffffff80
    cff8:	11b06342 	asrsne	r6, r2, #6
    cffc:	6022c182 	eorvs	ip, r2, r2, lsl #3
    d000:	0566ce46 	strbeq	ip, [r6, #-3654]!	; 0xfffff1ba
    d004:	d1821167 	orrle	r1, r2, r7, ror #2
    d008:	70465222 	subvc	r5, r6, r2, lsr #4
    d00c:	61625266 	cmnvs	r2, r6, ror #4
    d010:	81817281 	orrhi	r7, r1, r1, lsl #5
    d014:	823d8131 	eorshi	r8, sp, #1073741836	; 0x4000000c
    d018:	c03d8231 	eorsgt	r8, sp, r1, lsr r2
    d01c:	0292f1ef 	addseq	pc, r2, #-1073741765	; 0xc000003b
    d020:	0b673c93 	bleq	19dc274 <__ccfg+0x19bc2cc>
    d024:	c081b062 	addgt	fp, r1, r2, rrx
    d028:	9781d391 			; <UNDEFINED> instruction: 0x9781d391
    d02c:	d3a29082 			; <UNDEFINED> instruction: 0xd3a29082
    d030:	f34e7f18 	vmaxnm.f32	d23, d14, d8
    d034:	e316130b 	tst	r6, #738197504	; 0x2c000000
    d038:	c34aa41c 	movtgt	sl, #42012	; 0xa41c
    d03c:	3b81e391 	blcc	fe085e88 <_estack+0xde080e88>
    d040:	ba629014 	blt	18b1098 <__ccfg+0x18910f0>
    d044:	23468b1c 	movtcs	r8, #27420	; 0x6b1c
    d048:	e34a8b1e 	movt	r8, #43806	; 0xab1e
    d04c:	904e8b1c 	subls	r8, lr, ip, lsl fp
    d050:	8b2207b2 	blhi	88ef20 <__ccfg+0x86ef78>
    d054:	1ba29042 	blne	fe8b1164 <_estack+0xde8ac164>
    d058:	e362961a 	cmn	r2, #27262976	; 0x1a00000
    d05c:	c34aa41c 	movtgt	sl, #42012	; 0xa41c
    d060:	3b81e391 	blcc	fe085eac <_estack+0xde080eac>
    d064:	a01cab18 	andsge	sl, ip, r8, lsl fp
    d068:	a21c9b4e 	andsge	r9, ip, #79872	; 0x13800
    d06c:	a41cbc4a 	ldrge	fp, [ip], #-3146	; 0xfffff3b6
    d070:	1010b242 	andsne	fp, r0, r2, asr #4
    d074:	9d22d082 	stcls	0, cr13, [r2, #-520]!	; 0xfffffdf8
    d078:	1080f042 	addne	pc, r0, r2, asr #32
    d07c:	6346a422 	movtvs	sl, #25634	; 0x6422
    d080:	a466a564 	strbtge	sl, [r6], #-1380	; 0xfffffa9c
    d084:	9410ab62 	ldrls	sl, [r0], #-2914	; 0xfffff49e
    d088:	94109b62 	ldrls	r9, [r0], #-2914	; 0xfffff49e
    d08c:	30700062 	rsbscc	r0, r0, r2, rrx
    d090:	10c0f182 	sbcne	pc, r0, r2, lsl #3
    d094:	00b06304 	adcseq	r6, r0, r4, lsl #6
    d098:	bc6aa871 	stcllt	8, cr10, [sl], #-452	; 0xfffffe3c
    d09c:	00b0e010 	adcseq	lr, r0, r0, lsl r0
    d0a0:	c281b270 	addgt	fp, r1, #112, 4
    d0a4:	0181d291 			; <UNDEFINED> instruction: 0x0181d291
    d0a8:	51181282 	tstpl	r8, r2, lsl #5
    d0ac:	41181281 	tstmi	r8, r1, lsl #5
    d0b0:	81318182 	teqhi	r1, r2, lsl #3
    d0b4:	bf1c123d 	svclt	0x001c123d
    d0b8:	32b0e24a 	adcscc	lr, r0, #-1610612732	; 0xa0000004
    d0bc:	f2dfb0b0 	vshr.s64	d27, d16, #33
    d0c0:	f1673c92 			; <UNDEFINED> instruction: 0xf1673c92
    d0c4:	c31421c7 	tstgt	r4, #-1073741775	; 0xc0000031
    d0c8:	62c8124e 	sbcvs	r1, r8, #-536870908	; 0xe0000004
    d0cc:	31917291 			; <UNDEFINED> instruction: 0x31917291
    d0d0:	00b0e1b0 	ldrhteq	lr, [r0], r0
    d0d4:	06c00870 	uxtab16eq	r0, r0, r0, ror #16
    d0d8:	60c800c0 	sbcvs	r0, r8, r0, asr #1
    d0dc:	00917091 	umullseq	r7, r1, r1, r0
    d0e0:	b0820170 	addlt	r0, r2, r0, ror r1
    d0e4:	d091c081 	addsle	ip, r1, r1, lsl #1
    d0e8:	51181081 	tstpl	r8, r1, lsl #1
    d0ec:	06181081 	ldreq	r1, [r8], -r1, lsl #1
    d0f0:	4280e114 	addmi	lr, r0, #20, 2
    d0f4:	82318282 	eorshi	r8, r1, #536870920	; 0x20000008
    d0f8:	e41c203d 	ldr	r2, [ip], #-61	; 0xffffffc3
    d0fc:	21b0e24a 	asrscs	lr, sl, #4
    d100:	3246e822 	subcc	lr, r6, #2228224	; 0x220000
    d104:	a01005b0 			; <UNDEFINED> instruction: 0xa01005b0
    d108:	3c92f5df 	cfldr32cc	mvfx15, [r2], {223}	; 0xdf
    d10c:	e8222167 	stmda	r2!, {r0, r1, r2, r5, r6, r8, sp}
    d110:	32a0e242 	adccc	lr, r0, #536870916	; 0x20000004
    d114:	418231b0 			; <UNDEFINED> instruction: 0x418231b0
    d118:	01c0f039 	biceq	pc, r0, r9, lsr r0	; <UNPREDICTABLE>
    d11c:	f61e0104 			; <UNDEFINED> instruction: 0xf61e0104
    d120:	10161842 	andsne	r1, r6, r2, asr #16
    d124:	083010c0 	ldmdaeq	r0!, {r6, r7, ip}
    d128:	6047041c 	subvs	r0, r7, ip, lsl r4
    d12c:	063c1010 			; <UNDEFINED> instruction: 0x063c1010
    d130:	61c7f110 	bicvs	pc, r7, r0, lsl r1	; <UNPREDICTABLE>
    d134:	164efa14 			; <UNDEFINED> instruction: 0x164efa14
    d138:	719166c8 	orrsvc	r6, r1, r8, asr #13
    d13c:	81318181 	teqhi	r1, r1, lsl #3
    d140:	011c163d 	tsteq	ip, sp, lsr r6
    d144:	3191764b 	orrscc	r7, r1, fp, asr #12
    d148:	08c006b0 	stmiaeq	r0, {r4, r5, r7, r9, sl}^
    d14c:	617000c0 	cmnvs	r0, r0, asr #1
    d150:	81318181 	teqhi	r1, r1, lsl #3
    d154:	8082403d 	addhi	r4, r2, sp, lsr r0
    d158:	f1180139 			; <UNDEFINED> instruction: 0xf1180139
    d15c:	014b171c 	cmpeq	fp, ip, lsl r7
    d160:	c080b014 	addgt	fp, r0, r4, lsl r0
    d164:	bc471722 	mcrrlt	7, 2, r1, r7, cr2
    d168:	90b033b0 	ldrhtls	r3, [r0], r0
    d16c:	0f92f1ef 	svceq	0x0092f1ef
    d170:	00673c93 	mlseq	r7, r3, ip, r3
    d174:	63a00370 	movvs	r0, #112, 6	; 0xc0000001
    d178:	efb064b0 	svc	0x00b064b0
    d17c:	006556b0 	strhteq	r5, [r5], #-96	; 0xffffffa0
    d180:	00804071 	addeq	r4, r0, r1, ror r0
    d184:	64472b22 	strbvs	r2, [r7], #-2850	; 0xfffff4de
    d188:	ef652ab0 	svc	0x00652ab0
    d18c:	407100a0 	rsbsmi	r0, r1, r0, lsr #1
    d190:	2b220080 	blcs	88d398 <__ccfg+0x86d3f0>
    d194:	03b06447 	movseq	r6, #1191182336	; 0x47000000
    d198:	016238b0 	strheq	r3, [r2, #-128]!	; 0xffffff80
    d19c:	82816282 	addhi	r6, r1, #536870920	; 0x20000008
    d1a0:	803d8231 	eorshi	r8, sp, r1, lsr r2
    d1a4:	0292f1ef 	addseq	pc, r2, #-1073741765	; 0xc000003b
    d1a8:	03673c93 	cmneq	r7, #37632	; 0x9300
    d1ac:	e66556a0 	strbt	r5, [r5], -r0, lsr #13
    d1b0:	6380a261 	orrvs	sl, r0, #268435462	; 0x10000006
    d1b4:	5061e664 	rsbpl	lr, r1, r4, ror #12
    d1b8:	e67100b0 			; <UNDEFINED> instruction: 0xe67100b0
    d1bc:	d092e061 	addsle	lr, r2, r1, rrx
    d1c0:	3d220082 	stccc	0, cr0, [r2, #-520]!	; 0xfffffdf8
    d1c4:	00b2c047 	adcseq	ip, r2, r7, asr #32
    d1c8:	f080a070 			; <UNDEFINED> instruction: 0xf080a070
    d1cc:	30435922 	subcc	r5, r3, r2, lsr #18
    d1d0:	62c102b0 	sbcvs	r0, r1, #176, 4
    d1d4:	a0c00131 	sbcge	r0, r0, r1, lsr r1
    d1d8:	521e0080 	andspl	r0, lr, #128	; 0x80
    d1dc:	5322f043 	msrpl	CPSR_x, #67	; 0x43
    d1e0:	60f5a043 	rscsvs	sl, r5, r3, asr #32
    d1e4:	53396031 	teqpl	r9, #49	; 0x31
    d1e8:	10102063 	andsne	r2, r0, r3, rrx
    d1ec:	236f131a 	cmncs	pc, #1744830464	; 0x68000000
    d1f0:	1216116e 	andsne	r1, r6, #-2147483621	; 0x8000001b
    d1f4:	006b5416 	rsbeq	r5, fp, r6, lsl r4
    d1f8:	24ae0370 	strtcs	r0, [lr], #880	; 0x370
    d1fc:	270b0000 	strcs	r0, [fp, -r0]
    d200:	00005812 	andeq	r5, r0, r2, lsl r8
    d204:	1c100400 	cfldrsne	mvf0, [r0], {-0}
    d208:	10240000 	eorne	r0, r4, r0
    d20c:	0300001c 	movweq	r0, #28
    d210:	000019c7 	andeq	r1, r0, r7, asr #19
    d214:	45122b0b 	ldrmi	r2, [r2, #-2827]	; 0xfffff4f5
    d218:	24000000 	strcs	r0, [r0], #-0
    d21c:	00001c26 	andeq	r1, r0, r6, lsr #24
    d220:	0024ff03 	eoreq	pc, r4, r3, lsl #30
    d224:	122c0b00 	eorne	r0, ip, #0, 22
    d228:	0000006b 	andeq	r0, r0, fp, rrx
    d22c:	001c3704 	andseq	r3, ip, r4, lsl #14
    d230:	05380300 	ldreq	r0, [r8, #-768]!	; 0xfffffd00
    d234:	2d0b0000 	stccs	0, cr0, [fp, #-0]
    d238:	00006b12 	andeq	r6, r0, r2, lsl fp
    d23c:	0b080b00 	bleq	20fe44 <__ccfg+0x1efe9c>
    d240:	1ce20932 			; <UNDEFINED> instruction: 0x1ce20932
    d244:	3e200000 	cdpcc	0, 2, cr0, cr0, cr0, {0}
    d248:	0b000000 	bleq	d250 <__exidx_end+0x81a8>
    d24c:	1c260734 	stcne	7, cr0, [r6], #-208	; 0xffffff30
    d250:	01010000 	mrseq	r0, (UNDEF: 1)
    d254:	3e200007 	cdpcc	0, 2, cr0, cr0, cr7, {0}
    d258:	0b000005 	bleq	d274 <__exidx_end+0x81cc>
    d25c:	1c260335 	stcne	3, cr0, [r6], #-212	; 0xffffff2c
    d260:	01010000 	mrseq	r0, (UNDEF: 1)
    d264:	6f200006 	svcvs	0x00200006
    d268:	0b000002 	bleq	d278 <__exidx_end+0x81d0>
    d26c:	1c260336 	stcne	3, cr0, [r6], #-216	; 0xffffff28
    d270:	01010000 	mrseq	r0, (UNDEF: 1)
    d274:	78200005 	stmdavc	r0!, {r0, r2}
    d278:	0b000005 	bleq	d294 <__exidx_end+0x81ec>
    d27c:	1c260337 	stcne	3, cr0, [r6], #-220	; 0xffffff24
    d280:	01010000 	mrseq	r0, (UNDEF: 1)
    d284:	65200004 	strvs	r0, [r0, #-4]!
    d288:	0b000008 	bleq	d2b0 <__exidx_end+0x8208>
    d28c:	1c260338 	stcne	3, cr0, [r6], #-224	; 0xffffff20
    d290:	04010000 	streq	r0, [r1], #-0
    d294:	450c0000 	strmi	r0, [ip, #-0]
    d298:	0b000005 	bleq	d2b4 <__exidx_end+0x820c>
    d29c:	1c26073a 	stcne	7, cr0, [r6], #-232	; 0xffffff18
    d2a0:	0c010000 	stceq	0, cr0, [r1], {-0}
    d2a4:	0000075e 	andeq	r0, r0, lr, asr r7
    d2a8:	26033c0b 	strcs	r3, [r3], -fp, lsl #24
    d2ac:	0200001c 	andeq	r0, r0, #28
    d2b0:	000b520c 	andeq	r5, fp, ip, lsl #4
    d2b4:	033d0b00 	teqeq	sp, #0, 22
    d2b8:	00001c26 	andeq	r1, r0, r6, lsr #24
    d2bc:	07930c03 	ldreq	r0, [r3, r3, lsl #24]
    d2c0:	3f0b0000 	svccc	0x000b0000
    d2c4:	001c3708 	andseq	r3, ip, r8, lsl #14
    d2c8:	03000400 	movweq	r0, #1024	; 0x400
    d2cc:	000002c1 	andeq	r0, r0, r1, asr #5
    d2d0:	5403410b 	strpl	r4, [r3], #-267	; 0xfffffef5
    d2d4:	2400001c 	strcs	r0, [r0], #-28	; 0xffffffe4
    d2d8:	00001ce2 	andeq	r1, r0, r2, ror #25
    d2dc:	00057f25 	andeq	r7, r5, r5, lsr #30
    d2e0:	1a430b00 	bne	10cfee8 <__ccfg+0x10aff40>
    d2e4:	00001cee 	andeq	r1, r0, lr, ror #25
    d2e8:	b1250101 			; <UNDEFINED> instruction: 0xb1250101
    d2ec:	0b000001 	bleq	d2f8 <__exidx_end+0x8250>
    d2f0:	05de0e45 	ldrbeq	r0, [lr, #3653]	; 0xe45
    d2f4:	01010000 	mrseq	r0, (UNDEF: 1)
    d2f8:	0002ca25 	andeq	ip, r2, r5, lsr #20
    d2fc:	1e450b00 	vmlane.f64	d16, d5, d0
    d300:	000005de 	ldrdeq	r0, [r0], -lr
    d304:	080b0101 	stmdaeq	fp, {r0, r8}
    d308:	4e098f0c 	cdpmi	15, 0, cr8, cr9, cr12, {0}
    d30c:	0c00001d 	stceq	0, cr0, [r0], {29}
    d310:	0000064f 	andeq	r0, r0, pc, asr #12
    d314:	6b0b900c 	blvs	2f134c <__ccfg+0x2d13a4>
    d318:	00000000 	andeq	r0, r0, r0
    d31c:	000c840c 	andeq	r8, ip, ip, lsl #8
    d320:	08910c00 	ldmeq	r1, {sl, fp}
    d324:	00001c10 	andeq	r1, r0, r0, lsl ip
    d328:	01f40c04 	mvnseq	r0, r4, lsl #24
    d32c:	920c0000 	andls	r0, ip, #0
    d330:	001c3210 	andseq	r3, ip, r0, lsl r2
    d334:	03000600 	movweq	r0, #1536	; 0x600
    d338:	00000a0b 	andeq	r0, r0, fp, lsl #20
    d33c:	1d03930c 	stcne	3, cr9, [r3, #-48]	; 0xffffffd0
    d340:	0900001d 	stmdbeq	r0, {r0, r2, r3, r4}
    d344:	00001d4e 	andeq	r1, r0, lr, asr #26
    d348:	00001d65 	andeq	r1, r0, r5, ror #26
    d34c:	b4250026 	strtlt	r0, [r5], #-38	; 0xffffffda
    d350:	0c000007 	stceq	0, cr0, [r0], {7}
    d354:	1d5a0f99 	ldclne	15, cr0, [sl, #-612]	; 0xfffffd9c
    d358:	01010000 	mrseq	r0, (UNDEF: 1)
    d35c:	910d010b 	tstls	sp, fp, lsl #2
    d360:	001d9d09 	andseq	r9, sp, r9, lsl #26
    d364:	079a2000 	ldreq	r2, [sl, r0]
    d368:	930d0000 	movwls	r0, #53248	; 0xd000
    d36c:	001c2607 	andseq	r2, ip, r7, lsl #12
    d370:	01070100 	mrseq	r0, (UNDEF: 23)
    d374:	04b42000 	ldrteq	r2, [r4], #0
    d378:	940d0000 	strls	r0, [sp], #-0
    d37c:	001c2603 	andseq	r2, ip, r3, lsl #12
    d380:	00010100 	andeq	r0, r1, r0, lsl #2
    d384:	71030000 	mrsvc	r0, (UNDEF: 3)
    d388:	0d000008 	stceq	0, cr0, [r0, #-32]	; 0xffffffe0
    d38c:	1d730396 	ldclne	3, cr0, [r3, #-600]!	; 0xfffffda8
    d390:	9d040000 	stcls	0, cr0, [r4, #-0]
    d394:	0900001d 	stmdbeq	r0, {r0, r2, r3, r4}
    d398:	00001da9 	andeq	r1, r0, r9, lsr #27
    d39c:	00001db9 			; <UNDEFINED> instruction: 0x00001db9
    d3a0:	ae040026 	cdpge	0, 0, cr0, cr4, cr6, {1}
    d3a4:	2500001d 	strcs	r0, [r0, #-29]	; 0xffffffe3
    d3a8:	00000383 	andeq	r0, r0, r3, lsl #7
    d3ac:	b9179c0d 	ldmdblt	r7, {r0, r2, r3, sl, fp, ip, pc}
    d3b0:	0100001d 	tsteq	r0, sp, lsl r0
    d3b4:	1c1c0901 			; <UNDEFINED> instruction: 0x1c1c0901
    d3b8:	1dd70000 	ldclne	0, cr0, [r7]
    d3bc:	00260000 	eoreq	r0, r6, r0
    d3c0:	001dcc04 	andseq	ip, sp, r4, lsl #24
    d3c4:	04f82500 	ldrbteq	r2, [r8], #1280	; 0x500
    d3c8:	060e0000 	streq	r0, [lr], -r0
    d3cc:	001dd713 	andseq	sp, sp, r3, lsl r7
    d3d0:	25010100 	strcs	r0, [r1, #-256]	; 0xffffff00
    d3d4:	00000740 	andeq	r0, r0, r0, asr #14
    d3d8:	370ec30c 	strcc	ip, [lr, -ip, lsl #6]
    d3dc:	0100001c 	tsteq	r0, ip, lsl r0
    d3e0:	09aa0601 	stmibeq	sl!, {r0, r9, sl}
    d3e4:	6e0f0000 	cdpvs	0, 0, cr0, cr15, cr0, {0}
    d3e8:	1e051001 	cdpne	0, 0, cr1, cr5, cr1, {0}
    d3ec:	04100000 	ldreq	r0, [r0], #-0
    d3f0:	00001e0b 	andeq	r1, r0, fp, lsl #28
    d3f4:	1e17011e 	mrcne	1, 0, r0, cr7, cr14, {0}
    d3f8:	10150000 	andsne	r0, r5, r0
    d3fc:	0000001c 	andeq	r0, r0, ip, lsl r0
    d400:	0005eb09 	andeq	lr, r5, r9, lsl #22
    d404:	001e2200 	andseq	r2, lr, r0, lsl #4
    d408:	04002600 	streq	r2, [r0], #-1536	; 0xfffffa00
    d40c:	00001e17 	andeq	r1, r0, r7, lsl lr
    d410:	0008081f 	andeq	r0, r8, pc, lsl r8
    d414:	017f0f00 	cmneq	pc, r0, lsl #30
    d418:	001e2216 	andseq	r2, lr, r6, lsl r2
    d41c:	1f010100 	svcne	0x00010100
    d420:	00000366 	andeq	r0, r0, r6, ror #6
    d424:	1401820f 	strne	r8, [r1], #-527	; 0xfffffdf1
    d428:	00001c43 	andeq	r1, r0, r3, asr #24
    d42c:	431f0101 	tstmi	pc, #1073741824	; 0x40000000
    d430:	0f000003 	svceq	0x00000003
    d434:	370e02d8 			; <UNDEFINED> instruction: 0x370e02d8
    d438:	0100001c 	tsteq	r0, ip, lsl r0
    d43c:	0f081a01 	svceq	0x00081a01
    d440:	7b090303 	blvc	24e054 <__ccfg+0x22e0ac>
    d444:	1700001e 	smladne	r0, lr, r0, r0
    d448:	00003832 	andeq	r3, r0, r2, lsr r8
    d44c:	0703070f 	streq	r0, [r3, -pc, lsl #14]
    d450:	00001c10 	andeq	r1, r0, r0, lsl ip
    d454:	0bdc1700 	bleq	ff71305c <_estack+0xdf70e05c>
    d458:	080f0000 	stmdaeq	pc, {}	; <UNPREDICTABLE>
    d45c:	1c480803 	mcrrne	8, 0, r0, r8, cr3
    d460:	00040000 	andeq	r0, r4, r0
    d464:	0003fb06 	andeq	pc, r3, r6, lsl #22
    d468:	03090f00 	movweq	r0, #40704	; 0x9f00
    d46c:	001e5403 	andseq	r5, lr, r3, lsl #8
    d470:	00331900 	eorseq	r1, r3, r0, lsl #18
    d474:	0f300000 	svceq	0x00300000
    d478:	eb08030b 	bl	20e0ac <__ccfg+0x1ee104>
    d47c:	1700001e 	smladne	r0, lr, r0, r0
    d480:	00001add 	ldrdeq	r1, [r0], -sp
    d484:	0803140f 	stmdaeq	r3, {r0, r1, r2, r3, sl, ip}
    d488:	00001c10 	andeq	r1, r0, r0, lsl ip
    d48c:	09541700 	ldmdbeq	r4, {r8, r9, sl, ip}^
    d490:	150f0000 	strne	r0, [pc, #-0]	; d498 <__exidx_end+0x83f0>
    d494:	1c100803 	ldcne	8, cr0, [r0], {3}
    d498:	17020000 	strne	r0, [r2, -r0]
    d49c:	000049a2 	andeq	r4, r0, r2, lsr #19
    d4a0:	0b03160f 	bleq	d2ce4 <__ccfg+0xb2d3c>
    d4a4:	00001df8 	strdeq	r1, [r0], -r8
    d4a8:	44051704 	strmi	r1, [r5], #-1796	; 0xfffff8fc
    d4ac:	170f0000 	strne	r0, [pc, -r0]
    d4b0:	1c480903 	mcrrne	9, 0, r0, r8, cr3	; <UNPREDICTABLE>
    d4b4:	17080000 	strne	r0, [r8, -r0]
    d4b8:	00000007 	andeq	r0, r0, r7
    d4bc:	0f03180f 	svceq	0x0003180f
    d4c0:	00001eeb 	andeq	r1, r0, fp, ror #29
    d4c4:	07c7170c 	strbeq	r1, [r7, ip, lsl #14]
    d4c8:	190f0000 	stmdbne	pc, {}	; <UNPREDICTABLE>
    d4cc:	1efb1503 	cdpne	5, 15, cr1, cr11, cr3, {0}
    d4d0:	002c0000 	eoreq	r0, ip, r0
    d4d4:	001e7b09 	andseq	r7, lr, r9, lsl #22
    d4d8:	001efb00 	andseq	pc, lr, r0, lsl #22
    d4dc:	00910a00 	addseq	r0, r1, r0, lsl #20
    d4e0:	00030000 	andeq	r0, r3, r0
    d4e4:	1e880410 	mcrne	4, 4, r0, cr8, cr0, {0}
    d4e8:	49060000 	stmdbmi	r6, {}	; <UNPREDICTABLE>
    d4ec:	0f000009 	svceq	0x00000009
    d4f0:	881b031c 	ldmdahi	fp, {r2, r3, r4, r8, r9}
    d4f4:	1f00001e 	svcne	0x0000001e
    d4f8:	00000929 	andeq	r0, r0, r9, lsr #18
    d4fc:	14031e0f 	strne	r1, [r3], #-3599	; 0xfffff1f1
    d500:	00001f1d 	andeq	r1, r0, sp, lsl pc
    d504:	04100101 	ldreq	r0, [r0], #-257	; 0xfffffeff
    d508:	00001f01 	andeq	r1, r0, r1, lsl #30
    d50c:	00058b25 	andeq	r8, r5, r5, lsr #22
    d510:	131d1000 	tstne	sp, #0
    d514:	00001c10 	andeq	r1, r0, r0, lsl ip
    d518:	76250101 	strtvc	r0, [r5], -r1, lsl #2
    d51c:	10000002 	andne	r0, r0, r2
    d520:	1c211a1e 			; <UNDEFINED> instruction: 0x1c211a1e
    d524:	01010000 	mrseq	r0, (UNDEF: 1)
    d528:	00099625 	andeq	r9, r9, r5, lsr #12
    d52c:	241e1000 	ldrcs	r1, [lr], #-0
    d530:	00001c21 	andeq	r1, r0, r1, lsr #24
    d534:	b2250101 	eorlt	r0, r5, #1073741824	; 0x40000000
    d538:	10000009 	andne	r0, r0, r9
    d53c:	1f1d1422 	svcne	0x001d1422
    d540:	01010000 	mrseq	r0, (UNDEF: 1)
    d544:	001bea25 	andseq	lr, fp, r5, lsr #20
    d548:	27391100 	ldrcs	r1, [r9, -r0, lsl #2]!
    d54c:	00000d5e 	andeq	r0, r0, lr, asr sp
    d550:	95250101 	strls	r0, [r5, #-257]!	; 0xfffffeff
    d554:	1100001e 	tstne	r0, lr, lsl r0
    d558:	09f1153a 	ldmibeq	r1!, {r1, r3, r4, r5, r8, sl, ip}^
    d55c:	01010000 	mrseq	r0, (UNDEF: 1)
    d560:	0022fb25 	eoreq	pc, r2, r5, lsr #22
    d564:	1a3b1100 	bne	ed196c <__ccfg+0xeb19c4>
    d568:	00000bd8 	ldrdeq	r0, [r0], -r8
    d56c:	8e250101 	sufhis	f0, f5, f1
    d570:	11000021 	tstne	r0, r1, lsr #32
    d574:	0c741a3c 			; <UNDEFINED> instruction: 0x0c741a3c
    d578:	01010000 	mrseq	r0, (UNDEF: 1)
    d57c:	00006b09 	andeq	r6, r0, r9, lsl #22
    d580:	001fa300 	andseq	sl, pc, r0, lsl #6
    d584:	00910a00 	addseq	r0, r1, r0, lsl #20
    d588:	00140000 	andseq	r0, r4, r0
    d58c:	00255827 	eoreq	r5, r5, r7, lsr #16
    d590:	113d1200 	teqne	sp, r0, lsl #4
    d594:	00001f93 	muleq	r0, r3, pc	; <UNPREDICTABLE>
    d598:	00b80305 	adcseq	r0, r8, r5, lsl #6
    d59c:	5b282000 	blpl	a155a4 <__ccfg+0x9f55fc>
    d5a0:	1200001f 	andne	r0, r0, #31
    d5a4:	03052072 	movweq	r2, #20594	; 0x5072
    d5a8:	20000054 	andcs	r0, r0, r4, asr r0
    d5ac:	001f6928 	andseq	r6, pc, r8, lsr #18
    d5b0:	0e961200 	cdpeq	2, 9, cr1, cr6, cr0, {0}
    d5b4:	003c0305 	eorseq	r0, ip, r5, lsl #6
    d5b8:	77282000 	strvc	r2, [r8, -r0]!
    d5bc:	1200001f 	andne	r0, r0, #31
    d5c0:	030513ad 	movweq	r1, #21421	; 0x53ad
    d5c4:	200000a0 	andcs	r0, r0, r0, lsr #1
    d5c8:	001f8528 	andseq	r8, pc, r8, lsr #10
    d5cc:	13c21200 	bicne	r1, r2, #0, 4
    d5d0:	007c0305 	rsbseq	r0, ip, r5, lsl #6
    d5d4:	8a002000 	bhi	155dc <__exidx_end+0x10534>
    d5d8:	04000001 	streq	r0, [r0], #-1
    d5dc:	002eab00 	eoreq	sl, lr, r0, lsl #22
    d5e0:	db010400 	blle	4e5e8 <__ccfg+0x2e640>
    d5e4:	01000025 	tsteq	r0, r5, lsr #32
    d5e8:	000025c0 	andeq	r2, r0, r0, asr #11
    d5ec:	000026a2 	andeq	r2, r0, r2, lsr #13
    d5f0:	00000fa0 	andeq	r0, r0, r0, lsr #31
    d5f4:	00000000 	andeq	r0, r0, r0
    d5f8:	00006b2e 	andeq	r6, r0, lr, lsr #22
    d5fc:	8a060102 	bhi	18da0c <__ccfg+0x16da64>
    d600:	03000009 	movweq	r0, #9
    d604:	000008df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    d608:	00371d02 	eorseq	r1, r7, r2, lsl #26
    d60c:	01020000 	mrseq	r0, (UNDEF: 2)
    d610:	00098808 	andeq	r8, r9, r8, lsl #16
    d614:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    d618:	00000844 	andeq	r0, r0, r4, asr #16
    d61c:	80070202 	andhi	r0, r7, r2, lsl #4
    d620:	0200000a 	andeq	r0, r0, #10
    d624:	06370504 	ldrteq	r0, [r7], -r4, lsl #10
    d628:	9f030000 	svcls	0x00030000
    d62c:	02000009 	andeq	r0, r0, #9
    d630:	00005e41 	andeq	r5, r0, r1, asr #28
    d634:	07040200 	streq	r0, [r4, -r0, lsl #4]
    d638:	000003cf 	andeq	r0, r0, pc, asr #7
    d63c:	32050802 	andcc	r0, r5, #131072	; 0x20000
    d640:	02000006 	andeq	r0, r0, #6
    d644:	03ca0708 	biceq	r0, sl, #8, 14	; 0x200000
    d648:	04040000 	streq	r0, [r4], #-0
    d64c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    d650:	07040200 	streq	r0, [r4, -r0, lsl #4]
    d654:	000003d4 	ldrdeq	r0, [r0], -r4
    d658:	0008e103 	andeq	lr, r8, r3, lsl #2
    d65c:	2c140300 	ldccs	3, cr0, [r4], {-0}
    d660:	03000000 	movweq	r0, #0
    d664:	000009a1 	andeq	r0, r0, r1, lsr #19
    d668:	00532003 	subseq	r2, r3, r3
    d66c:	84030000 	strhi	r0, [r3], #-0
    d670:	04000025 	streq	r0, [r0], #-37	; 0xffffffdb
    d674:	0000a233 	andeq	sl, r0, r3, lsr r2
    d678:	a8040500 	stmdage	r4, {r8, sl}
    d67c:	06000000 	streq	r0, [r0], -r0
    d680:	00269003 	eoreq	r9, r6, r3
    d684:	b4340400 	ldrtlt	r0, [r4], #-1024	; 0xfffffc00
    d688:	05000000 	streq	r0, [r0, #-0]
    d68c:	0000ba04 	andeq	fp, r0, r4, lsl #20
    d690:	00c50700 	sbceq	r0, r5, r0, lsl #14
    d694:	81080000 	mrshi	r0, (UNDEF: 8)
    d698:	00000000 	andeq	r0, r0, r0
    d69c:	0025b309 	eoreq	fp, r5, r9, lsl #6
    d6a0:	90990500 	addsls	r0, r9, r0, lsl #10
    d6a4:	28000031 	stmdacs	r0, {r0, r4, r5}
    d6a8:	01000000 	mrseq	r0, (UNDEF: 0)
    d6ac:	00010b9c 	muleq	r1, ip, fp
    d6b0:	268b0a00 	strcs	r0, [fp], r0, lsl #20
    d6b4:	35010000 	strcc	r0, [r1, #-0]
    d6b8:	00000097 	muleq	r0, r7, r0
    d6bc:	000033fb 	strdeq	r3, [r0], -fp
    d6c0:	0025630b 	eoreq	r6, r5, fp, lsl #6
    d6c4:	0b370100 	bleq	dcdacc <__ccfg+0xdadb24>
    d6c8:	40000001 	andmi	r0, r0, r1
    d6cc:	0c000034 	stceq	0, cr0, [r0], {52}	; 0x34
    d6d0:	00003198 	muleq	r0, r8, r1
    d6d4:	00000177 	andeq	r0, r0, r7, ror r1
    d6d8:	0031b20d 	eorseq	fp, r1, sp, lsl #4
    d6dc:	00018200 	andeq	r8, r1, r0, lsl #4
    d6e0:	01020000 	mrseq	r0, (UNDEF: 2)
    d6e4:	00124002 	andseq	r4, r2, r2
    d6e8:	256f0e00 	strbcs	r0, [pc, #-3584]!	; c8f0 <__exidx_end+0x7848>
    d6ec:	9a050000 	bls	14d6f4 <__ccfg+0x12d74c>
    d6f0:	00000000 	andeq	r0, r0, r0
    d6f4:	0000002c 	andeq	r0, r0, ip, lsr #32
    d6f8:	01779c01 	cmneq	r7, r1, lsl #24
    d6fc:	8b0a0000 	blhi	28d704 <__ccfg+0x26d75c>
    d700:	01000026 	tsteq	r0, r6, lsr #32
    d704:	0000a940 	andeq	sl, r0, r0, asr #18
    d708:	00347500 	eorseq	r7, r4, r0, lsl #10
    d70c:	27020a00 	strcs	r0, [r2, -r0, lsl #20]
    d710:	40010000 	andmi	r0, r1, r0
    d714:	00000081 	andeq	r0, r0, r1, lsl #1
    d718:	000034ba 			; <UNDEFINED> instruction: 0x000034ba
    d71c:	0025630b 	eoreq	r6, r5, fp, lsl #6
    d720:	0b420100 	bleq	108db28 <__ccfg+0x106db80>
    d724:	db000001 	blle	d730 <__exidx_end+0x8688>
    d728:	0c000034 	stceq	0, cr0, [r0], {52}	; 0x34
    d72c:	00000000 	andeq	r0, r0, r0
    d730:	00000177 	andeq	r0, r0, r7, ror r1
    d734:	0000000f 	andeq	r0, r0, pc
    d738:	00016d00 	andeq	r6, r1, r0, lsl #26
    d73c:	50011000 	andpl	r1, r1, r0
    d740:	00007702 	andeq	r7, r0, r2, lsl #14
    d744:	0000000d 	andeq	r0, r0, sp
    d748:	00018200 	andeq	r8, r1, r0, lsl #4
    d74c:	95110000 	ldrls	r0, [r1, #-0]
    d750:	06000025 	streq	r0, [r0], -r5, lsr #32
    d754:	00008c6a 	andeq	r8, r0, sl, ror #24
    d758:	25a41100 	strcs	r1, [r4, #256]!	; 0x100
    d75c:	84060000 	strhi	r0, [r6], #-0
    d760:	0000008c 	andeq	r0, r0, ip, lsl #1
    d764:	0000d500 	andeq	sp, r0, r0, lsl #10
    d768:	97000400 	strls	r0, [r0, -r0, lsl #8]
    d76c:	0400002f 	streq	r0, [r0], #-47	; 0xffffffd1
    d770:	0025db01 	eoreq	sp, r5, r1, lsl #22
    d774:	274e0100 	strbcs	r0, [lr, -r0, lsl #2]
    d778:	26a20000 	strtcs	r0, [r2], r0
    d77c:	0fb80000 	svceq	0x00b80000
    d780:	00000000 	andeq	r0, r0, r0
    d784:	6cce0000 	stclvs	0, cr0, [lr], {0}
    d788:	45020000 	strmi	r0, [r2, #-0]
    d78c:	02000027 	andeq	r0, r0, #39	; 0x27
    d790:	0000301b 	andeq	r3, r0, fp, lsl r0
    d794:	06010300 	streq	r0, [r1], -r0, lsl #6
    d798:	0000098a 	andeq	r0, r0, sl, lsl #19
    d79c:	88080103 	stmdahi	r8, {r0, r1, r8}
    d7a0:	03000009 	movweq	r0, #9
    d7a4:	08440502 	stmdaeq	r4, {r1, r8, sl}^
    d7a8:	02030000 	andeq	r0, r3, #0
    d7ac:	000a8007 	andeq	r8, sl, r7
    d7b0:	273b0200 	ldrcs	r0, [fp, -r0, lsl #4]!
    d7b4:	3f020000 	svccc	0x00020000
    d7b8:	00000057 	andeq	r0, r0, r7, asr r0
    d7bc:	37050403 	strcc	r0, [r5, -r3, lsl #8]
    d7c0:	03000006 	movweq	r0, #6
    d7c4:	03cf0704 	biceq	r0, pc, #4, 14	; 0x100000
    d7c8:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    d7cc:	00063205 	andeq	r3, r6, r5, lsl #4
    d7d0:	07080300 	streq	r0, [r8, -r0, lsl #6]
    d7d4:	000003ca 	andeq	r0, r0, sl, asr #7
    d7d8:	69050404 	stmdbvs	r5, {r2, sl}
    d7dc:	0300746e 	movweq	r7, #1134	; 0x46e
    d7e0:	03d40704 	bicseq	r0, r4, #4, 14	; 0x100000
    d7e4:	47020000 	strmi	r0, [r2, -r0]
    d7e8:	03000027 	movweq	r0, #39	; 0x27
    d7ec:	00002513 	andeq	r2, r0, r3, lsl r5
    d7f0:	273d0200 	ldrcs	r0, [sp, -r0, lsl #4]!
    d7f4:	1f030000 	svcne	0x00030000
    d7f8:	0000004c 	andeq	r0, r0, ip, asr #32
    d7fc:	00270c05 	eoreq	r0, r7, r5, lsl #24
    d800:	8caa0400 	cfstrshi	mvf0, [sl]
    d804:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    d808:	30000031 	andcc	r0, r0, r1, lsr r0
    d80c:	01000000 	mrseq	r0, (UNDEF: 0)
    d810:	277f069c 			; <UNDEFINED> instruction: 0x277f069c
    d814:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    d818:	0000008c 	andeq	r0, r0, ip, lsl #1
    d81c:	00003510 	andeq	r3, r0, r0, lsl r5
    d820:	00277006 	eoreq	r7, r7, r6
    d824:	8c3f0100 	ldfhis	f0, [pc], #-0	; d82c <__exidx_end+0x8784>
    d828:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    d82c:	07000035 	smladxeq	r0, r5, r0, r0
    d830:	0000272e 	andeq	r2, r0, lr, lsr #14
    d834:	00814001 	addeq	r4, r1, r1
    d838:	51010000 	mrspl	r0, (UNDEF: 1)
    d83c:	01430000 	mrseq	r0, (UNDEF: 67)
    d840:	00040000 	andeq	r0, r4, r0
    d844:	00003006 	andeq	r3, r0, r6
    d848:	25db0104 	ldrbcs	r0, [fp, #260]	; 0x104
    d84c:	30010000 	andcc	r0, r1, r0
    d850:	a2000028 	andge	r0, r0, #40	; 0x28
    d854:	c8000026 	stmdagt	r0, {r1, r2, r5}
    d858:	0000000f 	andeq	r0, r0, pc
    d85c:	39000000 	stmdbcc	r0, {}	; <UNPREDICTABLE>
    d860:	0200006e 	andeq	r0, r0, #110	; 0x6e
    d864:	098a0601 	stmibeq	sl, {r0, r9, sl}
    d868:	01020000 	mrseq	r0, (UNDEF: 2)
    d86c:	00098808 	andeq	r8, r9, r8, lsl #16
    d870:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    d874:	00000844 	andeq	r0, r0, r4, asr #16
    d878:	80070202 	andhi	r0, r7, r2, lsl #4
    d87c:	0200000a 	andeq	r0, r0, #10
    d880:	06370504 	ldrteq	r0, [r7], -r4, lsl #10
    d884:	9f030000 	svcls	0x00030000
    d888:	02000009 	andeq	r0, r0, #9
    d88c:	00005341 	andeq	r5, r0, r1, asr #6
    d890:	07040200 	streq	r0, [r4, -r0, lsl #4]
    d894:	000003cf 	andeq	r0, r0, pc, asr #7
    d898:	32050802 	andcc	r0, r5, #131072	; 0x20000
    d89c:	03000006 	movweq	r0, #6
    d8a0:	000027da 	ldrdeq	r2, [r0], -sl
    d8a4:	006c5b02 	rsbeq	r5, ip, r2, lsl #22
    d8a8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    d8ac:	0003ca07 	andeq	ip, r3, r7, lsl #20
    d8b0:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    d8b4:	00746e69 	rsbseq	r6, r4, r9, ror #28
    d8b8:	d4070402 	strle	r0, [r7], #-1026	; 0xfffffbfe
    d8bc:	03000003 	movweq	r0, #3
    d8c0:	000009a1 	andeq	r0, r0, r1, lsr #19
    d8c4:	00482003 	subeq	r2, r8, r3
    d8c8:	dc030000 	stcle	0, cr0, [r3], {-0}
    d8cc:	03000027 	movweq	r0, #39	; 0x27
    d8d0:	00006126 	andeq	r6, r0, r6, lsr #2
    d8d4:	27a50500 	strcs	r0, [r5, r0, lsl #10]!
    d8d8:	45040000 	strmi	r0, [r4, #-0]
    d8dc:	00008103 	andeq	r8, r0, r3, lsl #2
    d8e0:	0031e800 	eorseq	lr, r1, r0, lsl #16
    d8e4:	00002000 	andeq	r2, r0, r0
    d8e8:	dd9c0100 	ldfles	f0, [ip]
    d8ec:	06000000 	streq	r0, [r0], -r0
    d8f0:	00002796 	muleq	r0, r6, r7
    d8f4:	00814001 	addeq	r4, r1, r1
    d8f8:	355e0000 	ldrbcc	r0, [lr, #-0]
    d8fc:	e5060000 	str	r0, [r6, #-0]
    d900:	01000027 	tsteq	r0, r7, lsr #32
    d904:	00008141 	andeq	r8, r0, r1, asr #2
    d908:	00357100 	eorseq	r7, r5, r0, lsl #2
    d90c:	27c80700 	strbcs	r0, [r8, r0, lsl #14]
    d910:	42010000 	andmi	r0, r1, #0
    d914:	00000081 	andeq	r0, r0, r1, lsl #1
    d918:	05005201 	streq	r5, [r0, #-513]	; 0xfffffdff
    d91c:	000027f7 	strdeq	r2, [r0], -r7
    d920:	8c035304 	stchi	3, cr5, [r3], {4}
    d924:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    d928:	18000032 	stmdane	r0, {r1, r4, r5}
    d92c:	01000000 	mrseq	r0, (UNDEF: 0)
    d930:	00012f9c 	muleq	r1, ip, pc	; <UNPREDICTABLE>
    d934:	01080800 	tsteq	r8, r0, lsl #16
    d938:	00011659 	andeq	r1, r1, r9, asr r6
    d93c:	278a0900 	strcs	r0, [sl, r0, lsl #18]
    d940:	5a010000 	bpl	4d948 <__ccfg+0x2d9a0>
    d944:	0000008c 	andeq	r0, r0, ip, lsl #1
    d948:	00282309 	eoreq	r2, r8, r9, lsl #6
    d94c:	2f5b0100 	svccs	0x005b0100
    d950:	00000001 	andeq	r0, r0, r1
    d954:	0028180a 	eoreq	r1, r8, sl, lsl #16
    d958:	f75c0100 			; <UNDEFINED> instruction: 0xf75c0100
    d95c:	07000000 	streq	r0, [r0, -r0]
    d960:	000027c8 	andeq	r2, r0, r8, asr #15
    d964:	00815d01 	addeq	r5, r1, r1, lsl #26
    d968:	51010000 	mrspl	r0, (UNDEF: 1)
    d96c:	00810b00 	addeq	r0, r1, r0, lsl #22
    d970:	013f0000 	teqeq	pc, r0
    d974:	3f0c0000 	svccc	0x000c0000
    d978:	01000001 	tsteq	r0, r1
    d97c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    d980:	0000284f 	andeq	r2, r0, pc, asr #16
    d984:	00013600 	andeq	r3, r1, r0, lsl #12
    d988:	b0000400 	andlt	r0, r0, r0, lsl #8
    d98c:	04000030 	streq	r0, [r0], #-48	; 0xffffffd0
    d990:	0025db01 	eoreq	sp, r5, r1, lsl #22
    d994:	288d0100 	stmcs	sp, {r8}
    d998:	26a20000 	strtcs	r0, [r2], r0
    d99c:	0fe00000 	svceq	0x00e00000
    d9a0:	00000000 	andeq	r0, r0, r0
    d9a4:	6fe60000 	svcvs	0x00e60000
    d9a8:	01020000 	mrseq	r0, (UNDEF: 2)
    d9ac:	00098a06 	andeq	r8, r9, r6, lsl #20
    d9b0:	08010200 	stmdaeq	r1, {r9}
    d9b4:	00000988 	andeq	r0, r0, r8, lsl #19
    d9b8:	44050202 	strmi	r0, [r5], #-514	; 0xfffffdfe
    d9bc:	02000008 	andeq	r0, r0, #8
    d9c0:	0a800702 	beq	fe00f5d0 <_estack+0xde00a5d0>
    d9c4:	04020000 	streq	r0, [r2], #-0
    d9c8:	00063705 	andeq	r3, r6, r5, lsl #14
    d9cc:	099f0300 	ldmibeq	pc, {r8, r9}	; <UNPREDICTABLE>
    d9d0:	41020000 	mrsmi	r0, (UNDEF: 2)
    d9d4:	00000053 	andeq	r0, r0, r3, asr r0
    d9d8:	cf070402 	svcgt	0x00070402
    d9dc:	02000003 	andeq	r0, r0, #3
    d9e0:	06320508 	ldrteq	r0, [r2], -r8, lsl #10
    d9e4:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    d9e8:	0003ca07 	andeq	ip, r3, r7, lsl #20
    d9ec:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    d9f0:	00746e69 	rsbseq	r6, r4, r9, ror #28
    d9f4:	d4070402 	strle	r0, [r7], #-1026	; 0xfffffbfe
    d9f8:	03000003 	movweq	r0, #3
    d9fc:	000009a1 	andeq	r0, r0, r1, lsr #19
    da00:	00482003 	subeq	r2, r8, r3
    da04:	95050000 	strls	r0, [r5, #-0]
    da08:	04000025 	streq	r0, [r0], #-37	; 0xffffffdb
    da0c:	0000766a 	andeq	r7, r0, sl, ror #12
    da10:	00322000 	eorseq	r2, r2, r0
    da14:	00000800 	andeq	r0, r0, r0, lsl #16
    da18:	a69c0100 	ldrge	r0, [ip], r0, lsl #2
    da1c:	06000000 	streq	r0, [r0], -r0
    da20:	0000287b 	andeq	r2, r0, fp, ror r8
    da24:	00767701 	rsbseq	r7, r6, r1, lsl #14
    da28:	05000000 	streq	r0, [r0, #-0]
    da2c:	000028a8 	andeq	r2, r0, r8, lsr #17
    da30:	00767804 	rsbseq	r7, r6, r4, lsl #16
    da34:	00000000 	andeq	r0, r0, r0
    da38:	00060000 	andeq	r0, r6, r0
    da3c:	9c010000 	stcls	0, cr0, [r1], {-0}
    da40:	000000cb 	andeq	r0, r0, fp, asr #1
    da44:	00287b06 	eoreq	r7, r8, r6, lsl #22
    da48:	76c20100 	strbvc	r0, [r2], r0, lsl #2
    da4c:	00000000 	andeq	r0, r0, r0
    da50:	0025a405 	eoreq	sl, r5, r5, lsl #8
    da54:	76840400 	strvc	r0, [r4], r0, lsl #8
    da58:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    da5c:	08000032 	stmdaeq	r0, {r1, r4, r5}
    da60:	01000000 	mrseq	r0, (UNDEF: 0)
    da64:	0000f19c 	muleq	r0, ip, r1
    da68:	287b0700 	ldmdacs	fp!, {r8, r9, sl}^
    da6c:	0f010000 	svceq	0x00010000
    da70:	00007601 	andeq	r7, r0, r1, lsl #12
    da74:	58080000 	stmdapl	r8, {}	; <UNPREDICTABLE>
    da78:	04000028 	streq	r0, [r0], #-40	; 0xffffffd8
    da7c:	0076015b 	rsbseq	r0, r6, fp, asr r1
    da80:	00000000 	andeq	r0, r0, r0
    da84:	00060000 	andeq	r0, r6, r0
    da88:	9c010000 	stcls	0, cr0, [r1], {-0}
    da8c:	00000118 	andeq	r0, r0, r8, lsl r1
    da90:	00287b07 	eoreq	r7, r8, r7, lsl #22
    da94:	015a0100 	cmpeq	sl, r0, lsl #2
    da98:	00000076 	andeq	r0, r0, r6, ror r0
    da9c:	286c0900 	stmdacs	ip!, {r8, fp}^
    daa0:	6c040000 	stcvs	0, cr0, [r4], {-0}
    daa4:	00000001 	andeq	r0, r0, r1
    daa8:	00000800 	andeq	r0, r0, r0, lsl #16
    daac:	0a9c0100 	beq	fe70deb4 <_estack+0xde708eb4>
    dab0:	00002883 	andeq	r2, r0, r3, lsl #17
    dab4:	76019e01 	strvc	r9, [r1], -r1, lsl #28
    dab8:	01000000 	mrseq	r0, (UNDEF: 0)
    dabc:	bf000050 	svclt	0x00000050
    dac0:	04000008 	streq	r0, [r0], #-8
    dac4:	00316000 	eorseq	r6, r1, r0
    dac8:	db010400 	blle	4ead0 <__ccfg+0x2eb28>
    dacc:	01000025 	tsteq	r0, r5, lsr #32
    dad0:	000029d5 	ldrdeq	r2, [r0], -r5
    dad4:	000026a2 	andeq	r2, r0, r2, lsr #13
    dad8:	00001028 	andeq	r1, r0, r8, lsr #32
    dadc:	00000000 	andeq	r0, r0, r0
    dae0:	00007186 	andeq	r7, r0, r6, lsl #3
    dae4:	8a060102 	bhi	18def4 <__ccfg+0x16df4c>
    dae8:	03000009 	movweq	r0, #9
    daec:	000008df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    daf0:	00371d03 	eorseq	r1, r7, r3, lsl #26
    daf4:	01020000 	mrseq	r0, (UNDEF: 2)
    daf8:	00098808 	andeq	r8, r9, r8, lsl #16
    dafc:	2d7c0300 	ldclcs	3, cr0, [ip, #-0]
    db00:	29030000 	stmdbcs	r3, {}	; <UNPREDICTABLE>
    db04:	00000049 	andeq	r0, r0, r9, asr #32
    db08:	44050202 	strmi	r0, [r5], #-514	; 0xfffffdfe
    db0c:	03000008 	movweq	r0, #8
    db10:	00000408 	andeq	r0, r0, r8, lsl #8
    db14:	005b2b03 	subseq	r2, fp, r3, lsl #22
    db18:	02020000 	andeq	r0, r2, #0
    db1c:	000a8007 	andeq	r8, sl, r7
    db20:	273b0300 	ldrcs	r0, [fp, -r0, lsl #6]!
    db24:	3f030000 	svccc	0x00030000
    db28:	0000006d 	andeq	r0, r0, sp, rrx
    db2c:	37050402 	strcc	r0, [r5, -r2, lsl #8]
    db30:	03000006 	movweq	r0, #6
    db34:	0000099f 	muleq	r0, pc, r9	; <UNPREDICTABLE>
    db38:	007f4103 	rsbseq	r4, pc, r3, lsl #2
    db3c:	04020000 	streq	r0, [r2], #-0
    db40:	0003cf07 	andeq	ip, r3, r7, lsl #30
    db44:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    db48:	00000632 	andeq	r0, r0, r2, lsr r6
    db4c:	ca070802 	bgt	1cfb5c <__ccfg+0x1afbb4>
    db50:	04000003 	streq	r0, [r0], #-3
    db54:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    db58:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    db5c:	0003d407 	andeq	sp, r3, r7, lsl #8
    db60:	08e10300 	stmiaeq	r1!, {r8, r9}^
    db64:	14040000 	strne	r0, [r4], #-0
    db68:	0000002c 	andeq	r0, r0, ip, lsr #32
    db6c:	002d7e03 	eoreq	r7, sp, r3, lsl #28
    db70:	3e190400 	cfmulscc	mvf0, mvf9, mvf0
    db74:	03000000 	movweq	r0, #0
    db78:	0000040a 	andeq	r0, r0, sl, lsl #8
    db7c:	00501a04 	subseq	r1, r0, r4, lsl #20
    db80:	3d030000 	stccc	0, cr0, [r3, #-0]
    db84:	04000027 	streq	r0, [r0], #-39	; 0xffffffd9
    db88:	0000621f 	andeq	r6, r0, pc, lsl r2
    db8c:	09a10300 	stmibeq	r1!, {r8, r9}
    db90:	20040000 	andcs	r0, r4, r0
    db94:	00000074 	andeq	r0, r0, r4, ror r0
    db98:	00258403 	eoreq	r8, r5, r3, lsl #8
    db9c:	e4330500 	ldrt	r0, [r3], #-1280	; 0xfffffb00
    dba0:	05000000 	streq	r0, [r0, #-0]
    dba4:	0000ea04 	andeq	lr, r0, r4, lsl #20
    dba8:	04050600 	streq	r0, [r5], #-1536	; 0xfffffa00
    dbac:	000000f1 	strdeq	r0, [r0], -r1
    dbb0:	0000fc07 	andeq	pc, r0, r7, lsl #24
    dbb4:	00a20800 	adceq	r0, r2, r0, lsl #16
    dbb8:	03000000 	movweq	r0, #0
    dbbc:	00002ca5 	andeq	r2, r0, r5, lsr #25
    dbc0:	01074206 	tsteq	r7, r6, lsl #4
    dbc4:	04050000 	streq	r0, [r5], #-0
    dbc8:	0000010d 	andeq	r0, r0, sp, lsl #2
    dbcc:	0000ce09 	andeq	ip, r0, r9, lsl #28
    dbd0:	00012600 	andeq	r2, r1, r0, lsl #12
    dbd4:	01260800 			; <UNDEFINED> instruction: 0x01260800
    dbd8:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    dbdc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    dbe0:	000000ce 	andeq	r0, r0, lr, asr #1
    dbe4:	a2040500 	andge	r0, r4, #0, 10
    dbe8:	03000000 	movweq	r0, #0
    dbec:	00002e0d 	andeq	r2, r0, sp, lsl #28
    dbf0:	01374606 	teqeq	r7, r6, lsl #12
    dbf4:	04050000 	streq	r0, [r5], #-0
    dbf8:	0000013d 	andeq	r0, r0, sp, lsr r1
    dbfc:	0000ce0a 	andeq	ip, r0, sl, lsl #28
    dc00:	2e560300 	cdpcs	3, 5, cr0, cr6, cr0, {0}
    dc04:	48060000 	stmdami	r6, {}	; <UNPREDICTABLE>
    dc08:	00000137 	andeq	r0, r0, r7, lsr r1
    dc0c:	002b3d03 	eoreq	r3, fp, r3, lsl #26
    dc10:	584a0600 	stmdapl	sl, {r9, sl}^
    dc14:	05000001 	streq	r0, [r0, #-1]
    dc18:	00015e04 	andeq	r5, r1, r4, lsl #28
    dc1c:	00ce0900 	sbceq	r0, lr, r0, lsl #18
    dc20:	016d0000 	cmneq	sp, r0
    dc24:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    dc28:	00000000 	andeq	r0, r0, r0
    dc2c:	002a4c03 	eoreq	r4, sl, r3, lsl #24
    dc30:	374c0600 	strbcc	r0, [ip, -r0, lsl #12]
    dc34:	03000001 	movweq	r0, #1
    dc38:	000029ac 	andeq	r2, r0, ip, lsr #19
    dc3c:	01074e06 	tsteq	r7, r6, lsl #28
    dc40:	3c030000 	stccc	0, cr0, [r3], {-0}
    dc44:	0600002a 	streq	r0, [r0], -sl, lsr #32
    dc48:	0000e451 	andeq	lr, r0, r1, asr r4
    dc4c:	28d10300 	ldmcs	r1, {r8, r9}^
    dc50:	53060000 	movwpl	r0, #24576	; 0x6000
    dc54:	00000199 	muleq	r0, r9, r1
    dc58:	019f0405 	orrseq	r0, pc, r5, lsl #8
    dc5c:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
    dc60:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    dc64:	08000001 	stmdaeq	r0, {r0}
    dc68:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    dc6c:	0000b808 	andeq	fp, r0, r8, lsl #16
    dc70:	00b80800 	adcseq	r0, r8, r0, lsl #16
    dc74:	05000000 	streq	r0, [r0, #-0]
    dc78:	0000b804 	andeq	fp, r0, r4, lsl #16
    dc7c:	2cbb0300 	ldccs	3, cr0, [fp]
    dc80:	57060000 	strpl	r0, [r6, -r0]
    dc84:	000001c9 	andeq	r0, r0, r9, asr #3
    dc88:	01cf0405 	biceq	r0, pc, r5, lsl #8
    dc8c:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
    dc90:	e3000000 	movw	r0, #0
    dc94:	08000001 	stmdaeq	r0, {r0}
    dc98:	000001e3 	andeq	r0, r0, r3, ror #3
    dc9c:	0000ce08 	andeq	ip, r0, r8, lsl #28
    dca0:	04050000 	streq	r0, [r5], #-0
    dca4:	000000ce 	andeq	r0, r0, lr, asr #1
    dca8:	002aaf03 	eoreq	sl, sl, r3, lsl #30
    dcac:	c95a0600 	ldmdbgt	sl, {r9, sl}^
    dcb0:	03000001 	movweq	r0, #1
    dcb4:	00002b69 	andeq	r2, r0, r9, ror #22
    dcb8:	01c95d06 	biceq	r5, r9, r6, lsl #26
    dcbc:	e3030000 	movw	r0, #12288	; 0x3000
    dcc0:	06000028 	streq	r0, [r0], -r8, lsr #32
    dcc4:	0001c960 	andeq	ip, r1, r0, ror #18
    dcc8:	2cc90300 	stclcs	3, cr0, [r9], {0}
    dccc:	63060000 	movwvs	r0, #24576	; 0x6000
    dcd0:	000000e4 	andeq	r0, r0, r4, ror #1
    dcd4:	00292103 	eoreq	r2, r9, r3, lsl #2
    dcd8:	20650600 	rsbcs	r0, r5, r0, lsl #12
    dcdc:	05000002 	streq	r0, [r0, #-2]
    dce0:	00022604 	andeq	r2, r2, r4, lsl #12
    dce4:	02310700 	eorseq	r0, r1, #0, 14
    dce8:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    dcec:	00000000 	andeq	r0, r0, r0
    dcf0:	002e6703 	eoreq	r6, lr, r3, lsl #14
    dcf4:	20670600 	rsbcs	r0, r7, r0, lsl #12
    dcf8:	03000002 	movweq	r0, #2
    dcfc:	00002bab 	andeq	r2, r0, fp, lsr #23
    dd00:	00eb6906 	rsceq	r6, fp, r6, lsl #18
    dd04:	46030000 	strmi	r0, [r3], -r0
    dd08:	0600002e 	streq	r0, [r0], -lr, lsr #32
    dd0c:	0000eb6b 	andeq	lr, r0, fp, ror #22
    dd10:	2b780300 	blcs	1e0e918 <__ccfg+0x1dee970>
    dd14:	6d060000 	stcvs	0, cr0, [r6, #-0]
    dd18:	000000eb 	andeq	r0, r0, fp, ror #1
    dd1c:	002b8a03 	eoreq	r8, fp, r3, lsl #20
    dd20:	eb6f0600 	bl	1bcf528 <__ccfg+0x1baf580>
    dd24:	0b000000 	bleq	dd2c <__exidx_end+0x8c84>
    dd28:	557a064c 	ldrbpl	r0, [sl, #-1612]!	; 0xfffff9b4
    dd2c:	0c000003 	stceq	0, cr0, [r0], {3}
    dd30:	00002b4e 	andeq	r2, r0, lr, asr #22
    dd34:	00fc7c06 	rscseq	r7, ip, r6, lsl #24
    dd38:	0c000000 	stceq	0, cr0, [r0], {-0}
    dd3c:	00002e39 	andeq	r2, r0, r9, lsr lr
    dd40:	012c7d06 			; <UNDEFINED> instruction: 0x012c7d06
    dd44:	0c040000 	stceq	0, cr0, [r4], {-0}
    dd48:	00002b5f 	andeq	r2, r0, pc, asr fp
    dd4c:	01427e06 	cmpeq	r2, r6, lsl #28
    dd50:	0c080000 	stceq	0, cr0, [r8], {-0}
    dd54:	00002d58 	andeq	r2, r0, r8, asr sp
    dd58:	014d7f06 	cmpeq	sp, r6, lsl #30
    dd5c:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    dd60:	00002d6a 	andeq	r2, r0, sl, ror #26
    dd64:	016d8006 	cmneq	sp, r6
    dd68:	0c100000 	ldceq	0, cr0, [r0], {-0}
    dd6c:	00002a5d 	andeq	r2, r0, sp, asr sl
    dd70:	01788106 	cmneq	r8, r6, lsl #2
    dd74:	0c140000 	ldceq	0, cr0, [r4], {-0}
    dd78:	00002a19 	andeq	r2, r0, r9, lsl sl
    dd7c:	01838206 	orreq	r8, r3, r6, lsl #4
    dd80:	0c180000 	ldceq	0, cr0, [r8], {-0}
    dd84:	00002b54 	andeq	r2, r0, r4, asr fp
    dd88:	018e8306 	orreq	r8, lr, r6, lsl #6
    dd8c:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    dd90:	00002ce3 	andeq	r2, r0, r3, ror #25
    dd94:	01be8406 			; <UNDEFINED> instruction: 0x01be8406
    dd98:	0c200000 	stceq	0, cr0, [r0], #-0
    dd9c:	00002adb 	ldrdeq	r2, [r0], -fp
    dda0:	01e98506 	mvneq	r8, r6, lsl #10
    dda4:	0c240000 	stceq	0, cr0, [r4], #-0
    dda8:	00002b33 	andeq	r2, r0, r3, lsr fp
    ddac:	01f48606 	mvnseq	r8, r6, lsl #12
    ddb0:	0c280000 	stceq	0, cr0, [r8], #-0
    ddb4:	00002d98 	muleq	r0, r8, sp
    ddb8:	01ff8706 	mvnseq	r8, r6, lsl #14
    ddbc:	0c2c0000 	stceq	0, cr0, [ip], #-0
    ddc0:	00002a78 	andeq	r2, r0, r8, ror sl
    ddc4:	02158806 	andseq	r8, r5, #393216	; 0x60000
    ddc8:	0c300000 	ldceq	0, cr0, [r0], #-0
    ddcc:	00002d86 	andeq	r2, r0, r6, lsl #27
    ddd0:	02318906 	eorseq	r8, r1, #98304	; 0x18000
    ddd4:	0c340000 	ldceq	0, cr0, [r4], #-0
    ddd8:	00002962 	andeq	r2, r0, r2, ror #18
    dddc:	020a8a06 	andeq	r8, sl, #24576	; 0x6000
    dde0:	0c380000 	ldceq	0, cr0, [r8], #-0
    dde4:	00002b9a 	muleq	r0, sl, fp
    dde8:	023c8b06 	eorseq	r8, ip, #6144	; 0x1800
    ddec:	0c3c0000 	ldceq	0, cr0, [ip], #-0
    ddf0:	00002d39 	andeq	r2, r0, r9, lsr sp
    ddf4:	02478c06 	subeq	r8, r7, #1536	; 0x600
    ddf8:	0c400000 	mareq	acc0, r0, r0
    ddfc:	00002abd 			; <UNDEFINED> instruction: 0x00002abd
    de00:	02528d06 	subseq	r8, r2, #384	; 0x180
    de04:	0c440000 	mareq	acc0, r0, r4
    de08:	00002912 	andeq	r2, r0, r2, lsl r9
    de0c:	025d8e06 	subseq	r8, sp, #6, 28	; 0x60
    de10:	00480000 	subeq	r0, r8, r0
    de14:	002c6903 	eoreq	r6, ip, r3, lsl #18
    de18:	688f0600 	stmvs	pc, {r9, sl}	; <UNPREDICTABLE>
    de1c:	0b000002 	bleq	de2c <__exidx_end+0x8d84>
    de20:	a5540114 	ldrbge	r0, [r4, #-276]	; 0xfffffeec
    de24:	0c000003 	stceq	0, cr0, [r0], {3}
    de28:	000029bd 			; <UNDEFINED> instruction: 0x000029bd
    de2c:	00ce5501 	sbceq	r5, lr, r1, lsl #10
    de30:	0c000000 	stceq	0, cr0, [r0], {-0}
    de34:	00002c2f 	andeq	r2, r0, pc, lsr #24
    de38:	00ce5601 	sbceq	r5, lr, r1, lsl #12
    de3c:	0c040000 	stceq	0, cr0, [r4], {-0}
    de40:	00002932 	andeq	r2, r0, r2, lsr r9
    de44:	00ce5701 	sbceq	r5, lr, r1, lsl #14
    de48:	0c080000 	stceq	0, cr0, [r8], {-0}
    de4c:	000029f0 	strdeq	r2, [r0], -r0
    de50:	00ce5801 	sbceq	r5, lr, r1, lsl #16
    de54:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    de58:	00002975 	andeq	r2, r0, r5, ror r9
    de5c:	00c35901 	sbceq	r5, r3, r1, lsl #18
    de60:	00100000 	andseq	r0, r0, r0
    de64:	002c5a03 	eoreq	r5, ip, r3, lsl #20
    de68:	605a0100 	subsvs	r0, sl, r0, lsl #2
    de6c:	0d000003 	stceq	0, cr0, [r0, #-12]
    de70:	000028b9 			; <UNDEFINED> instruction: 0x000028b9
    de74:	d301f902 	movwle	pc, #6402	; 0x1902	; <UNPREDICTABLE>
    de78:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    de7c:	00002c88 	andeq	r2, r0, r8, lsl #25
    de80:	00ce6501 	sbceq	r6, lr, r1, lsl #10
    de84:	0a0e0000 	beq	38de8c <__ccfg+0x36dee4>
    de88:	01000029 	tsteq	r0, r9, lsr #32
    de8c:	0000ce65 	andeq	ip, r0, r5, ror #28
    de90:	f20f0000 	vhadd.s8	d0, d15, d0
    de94:	02000028 	andeq	r0, r0, #40	; 0x28
    de98:	00ce0110 	sbceq	r0, lr, r0, lsl r1
    de9c:	fb010000 	blx	4dea6 <__ccfg+0x2defe>
    dea0:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    dea4:	00002c88 	andeq	r2, r0, r8, lsl #25
    dea8:	00cea001 	sbceq	sl, lr, r1
    deac:	48100000 	ldmdami	r0, {}	; <UNPREDICTABLE>
    deb0:	0100002d 	tsteq	r0, sp, lsr #32
    deb4:	0000cea2 	andeq	ip, r0, r2, lsr #29
    deb8:	b0110000 	andslt	r0, r1, r0
    debc:	30000003 	andcc	r0, r0, r3
    dec0:	5c000032 	stcpl	0, cr0, [r0], {50}	; 0x32
    dec4:	01000000 	mrseq	r0, (UNDEF: 0)
    dec8:	0004b69c 	muleq	r4, ip, r6
    decc:	03bc1200 			; <UNDEFINED> instruction: 0x03bc1200
    ded0:	35840000 	strcc	r0, [r4]
    ded4:	c7120000 	ldrgt	r0, [r2, -r0]
    ded8:	b0000003 	andlt	r0, r0, r3
    dedc:	13000035 	movwne	r0, #53	; 0x35
    dee0:	0000326a 	andeq	r3, r0, sl, ror #4
    dee4:	00000014 	andeq	r0, r0, r4, lsl r0
    dee8:	00000461 	andeq	r0, r0, r1, ror #8
    deec:	0003bc12 	andeq	fp, r3, r2, lsl ip
    def0:	0035dc00 	eorseq	sp, r5, r0, lsl #24
    def4:	03c71200 	biceq	r1, r7, #0, 4
    def8:	35ef0000 	strbcc	r0, [pc, #0]!	; df00 <__exidx_end+0x8e58>
    defc:	7e140000 	cdpvc	0, 1, cr0, cr4, cr0, {0}
    df00:	02000032 	andeq	r0, r0, #50	; 0x32
    df04:	01150074 	tsteq	r5, r4, ror r0
    df08:	15320153 	ldrne	r0, [r2, #-339]!	; 0xfffffead
    df0c:	3c015201 	sfmcc	f5, 4, [r1], {1}
    df10:	01510115 	cmpeq	r1, r5, lsl r1
    df14:	50011530 	andpl	r1, r1, r0, lsr r5
    df18:	a0000c05 	andge	r0, r0, r5, lsl #24
    df1c:	0000400c 	andeq	r4, r0, ip
    df20:	00324e16 	eorseq	r4, r2, r6, lsl lr
    df24:	00760200 	rsbseq	r0, r6, r0, lsl #4
    df28:	0000048d 	andeq	r0, r0, sp, lsl #9
    df2c:	01530115 	cmpeq	r3, r5, lsl r1
    df30:	52011530 	andpl	r1, r1, #48, 10	; 0xc000000
    df34:	01153101 	tsteq	r5, r1, lsl #2
    df38:	15300151 	ldrne	r0, [r0, #-337]!	; 0xfffffeaf
    df3c:	0c055001 	stceq	0, cr5, [r5], {1}
    df40:	400ca000 	andmi	sl, ip, r0
    df44:	007d0215 	rsbseq	r0, sp, r5, lsl r2
    df48:	00007402 	andeq	r7, r0, r2, lsl #8
    df4c:	00326614 	eorseq	r6, r2, r4, lsl r6
    df50:	00760200 	rsbseq	r0, r6, r0, lsl #4
    df54:	01530115 	cmpeq	r3, r5, lsl r1
    df58:	52011531 	andpl	r1, r1, #205520896	; 0xc400000
    df5c:	01153201 	tsteq	r5, r1, lsl #4
    df60:	15300151 	ldrne	r0, [r0, #-337]!	; 0xfffffeaf
    df64:	0c055001 	stceq	0, cr5, [r5], {1}
    df68:	400ca000 	andmi	sl, ip, r0
    df6c:	007d0215 	rsbseq	r0, sp, r5, lsl r2
    df70:	00007402 	andeq	r7, r0, r2, lsl #8
    df74:	03d31100 	bicseq	r1, r3, #0, 2
    df78:	328c0000 	addcc	r0, ip, #0
    df7c:	002c0000 	eoreq	r0, ip, r0
    df80:	9c010000 	stcls	0, cr0, [r1], {-0}
    df84:	0000050d 	andeq	r0, r0, sp, lsl #10
    df88:	0003e412 	andeq	lr, r3, r2, lsl r4
    df8c:	00361000 	eorseq	r1, r6, r0
    df90:	03ef1700 	mvneq	r1, #0, 14
    df94:	50010000 	andpl	r0, r1, r0
    df98:	00101018 	andseq	r1, r0, r8, lsl r0
    df9c:	0004f400 	andeq	pc, r4, r0, lsl #8
    dfa0:	03e41900 	mvneq	r1, #0, 18
    dfa4:	1a040000 	bne	10dfac <__ccfg+0xee004>
    dfa8:	00001010 	andeq	r1, r0, r0, lsl r0
    dfac:	0003ef1b 	andeq	lr, r3, fp, lsl pc
    dfb0:	14000000 	strne	r0, [r0], #-0
    dfb4:	000032ac 	andeq	r3, r0, ip, lsr #5
    dfb8:	15007402 	strne	r7, [r0, #-1026]	; 0xfffffbfe
    dfbc:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
    dfc0:	50011534 	andpl	r1, r1, r4, lsr r5
    dfc4:	a0000c05 	andge	r0, r0, r5, lsl #24
    dfc8:	0000400c 	andeq	r4, r0, ip
    dfcc:	002e1e1c 	eoreq	r1, lr, ip, lsl lr
    dfd0:	01840200 	orreq	r0, r4, r0, lsl #4
    dfd4:	000000ce 	andeq	r0, r0, lr, asr #1
    dfd8:	00000000 	andeq	r0, r0, r0
    dfdc:	00000090 	muleq	r0, r0, r0
    dfe0:	05769c01 	ldrbeq	r9, [r6, #-3073]!	; 0xfffff3ff
    dfe4:	741d0000 	ldrvc	r0, [sp], #-0
    dfe8:	0100002c 	tsteq	r0, ip, lsr #32
    dfec:	0000cec2 	andeq	ip, r0, r2, asr #29
    dff0:	00363100 	eorseq	r3, r6, r0, lsl #2
    dff4:	2be71e00 	blcs	ff9d57fc <_estack+0xdf9d07fc>
    dff8:	c4010000 	strgt	r0, [r1], #-0
    dffc:	000000ce 	andeq	r0, r0, lr, asr #1
    e000:	0000365d 	andeq	r3, r0, sp, asr r6
    e004:	002c001e 	eoreq	r0, ip, lr, lsl r0
    e008:	c3c50100 	bicgt	r0, r5, #0, 2
    e00c:	70000000 	andvc	r0, r0, r0
    e010:	1e000036 	mcrne	0, 0, r0, cr0, cr6, {1}
    e014:	00002981 	andeq	r2, r0, r1, lsl #19
    e018:	00cec601 	sbceq	ip, lr, r1, lsl #12
    e01c:	36970000 	ldrcc	r0, [r7], r0
    e020:	001f0000 	andseq	r0, pc, r0
    e024:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    e028:	1f000008 	svcne	0x00000008
    e02c:	00000000 	andeq	r0, r0, r0
    e030:	000008aa 	andeq	r0, r0, sl, lsr #17
    e034:	2a252000 	bcs	95603c <__ccfg+0x936094>
    e038:	91020000 	mrsls	r0, (UNDEF: 2)
    e03c:	0032b801 	eorseq	fp, r2, r1, lsl #16
    e040:	00001800 	andeq	r1, r0, r0, lsl #16
    e044:	ae9c0100 	fmlgee	f0, f4, f0
    e048:	21000005 	tstcs	r0, r5
    e04c:	000032c2 	andeq	r3, r0, r2, asr #5
    e050:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
    e054:	000005a4 	andeq	r0, r0, r4, lsr #11
    e058:	01510115 	cmpeq	r1, r5, lsl r1
    e05c:	50011531 	andpl	r1, r1, r1, lsr r5
    e060:	1f003301 	svcne	0x00003301
    e064:	000032c6 	andeq	r3, r0, r6, asr #5
    e068:	0000089e 	muleq	r0, lr, r8
    e06c:	2c3e2200 	lfmcs	f2, 4, [lr], #-0
    e070:	22020000 	andcs	r0, r2, #0
    e074:	0005bb01 	andeq	fp, r5, r1, lsl #22
    e078:	01020300 	mrseq	r0, LR_svc
    e07c:	00124002 	andseq	r4, r2, r2
    e080:	2c932300 	ldccs	3, cr2, [r3], {0}
    e084:	40020000 	andmi	r0, r2, r0
    e088:	401c0301 	andsmi	r0, ip, r1, lsl #6
    e08c:	02000029 	andeq	r0, r0, #41	; 0x29
    e090:	05bb01a1 	ldreq	r0, [fp, #417]!	; 0x1a1
    e094:	32d00000 	sbcscc	r0, r0, #0
    e098:	00600000 	rsbeq	r0, r0, r0
    e09c:	9c010000 	stcls	0, cr0, [r1], {-0}
    e0a0:	00000677 	andeq	r0, r0, r7, ror r6
    e0a4:	002c1f24 	eoreq	r1, ip, r4, lsr #30
    e0a8:	01020100 	mrseq	r0, (UNDEF: 18)
    e0ac:	000000ce 	andeq	r0, r0, lr, asr #1
    e0b0:	000036eb 	andeq	r3, r0, fp, ror #13
    e0b4:	002cec24 	eoreq	lr, ip, r4, lsr #24
    e0b8:	01030100 	mrseq	r0, (UNDEF: 19)
    e0bc:	000000ce 	andeq	r0, r0, lr, asr #1
    e0c0:	000036fe 	strdeq	r3, [r0], -lr
    e0c4:	0005ae25 	andeq	sl, r5, r5, lsr #28
    e0c8:	0032dc00 	eorseq	sp, r2, r0, lsl #24
    e0cc:	00001000 	andeq	r1, r0, r0
    e0d0:	01090100 	mrseq	r0, (UNDEF: 25)
    e0d4:	0000063c 	andeq	r0, r0, ip, lsr r6
    e0d8:	0032ec14 	eorseq	lr, r2, r4, lsl ip
    e0dc:	00740200 	rsbseq	r0, r4, r0, lsl #4
    e0e0:	01530115 	cmpeq	r3, r5, lsl r1
    e0e4:	52011530 	andpl	r1, r1, #48, 10	; 0xc000000
    e0e8:	01153101 	tsteq	r5, r1, lsl #2
    e0ec:	34080251 	strcc	r0, [r8], #-593	; 0xfffffdaf
    e0f0:	05500115 	ldrbeq	r0, [r0, #-277]	; 0xfffffeeb
    e0f4:	0ca0000c 	stceq	0, cr0, [r0], #48	; 0x30
    e0f8:	25000040 	strcs	r0, [r0, #-64]	; 0xffffffc0
    e0fc:	000005c2 	andeq	r0, r0, r2, asr #11
    e100:	000032ee 	andeq	r3, r0, lr, ror #5
    e104:	00000008 	andeq	r0, r0, r8
    e108:	5a010a01 	bpl	50914 <__ccfg+0x3096c>
    e10c:	1f000006 	svcne	0x00000006
    e110:	000032f6 	strdeq	r3, [r0], -r6
    e114:	000008b5 			; <UNDEFINED> instruction: 0x000008b5
    e118:	32d82100 	sbcscc	r2, r8, #0, 2
    e11c:	03d30000 	bicseq	r0, r3, #0
    e120:	066d0000 	strbteq	r0, [sp], -r0
    e124:	01150000 	tsteq	r5, r0
    e128:	00310150 	eorseq	r0, r1, r0, asr r1
    e12c:	0032fa1f 	eorseq	pc, r2, pc, lsl sl	; <UNPREDICTABLE>
    e130:	00089e00 	andeq	r9, r8, r0, lsl #28
    e134:	8a200000 	bhi	80e13c <__ccfg+0x7ee194>
    e138:	0200002a 	andeq	r0, r0, #42	; 0x2a
    e13c:	333001ae 	teqcc	r0, #-2147483605	; 0x8000002b
    e140:	00340000 	eorseq	r0, r4, r0
    e144:	9c010000 	stcls	0, cr0, [r1], {-0}
    e148:	000006e9 	andeq	r0, r0, r9, ror #13
    e14c:	0005c225 	andeq	ip, r5, r5, lsr #4
    e150:	00334200 	eorseq	r4, r3, r0, lsl #4
    e154:	00000800 	andeq	r0, r0, r0, lsl #16
    e158:	012f0100 			; <UNDEFINED> instruction: 0x012f0100
    e15c:	000006ab 	andeq	r0, r0, fp, lsr #13
    e160:	00334a1f 	eorseq	r4, r3, pc, lsl sl
    e164:	0008b500 	andeq	fp, r8, r0, lsl #10
    e168:	3a210000 	bcc	84e170 <__ccfg+0x82e1c8>
    e16c:	b0000033 	andlt	r0, r0, r3, lsr r0
    e170:	c3000003 	movwgt	r0, #3
    e174:	15000006 	strne	r0, [r0, #-6]
    e178:	30015101 	andcc	r5, r1, r1, lsl #2
    e17c:	01500115 	cmpeq	r0, r5, lsl r1
    e180:	40210033 	eormi	r0, r1, r3, lsr r0
    e184:	d3000033 	movwle	r0, #51	; 0x33
    e188:	d6000003 	strle	r0, [r0], -r3
    e18c:	15000006 	strne	r0, [r0, #-6]
    e190:	31015001 	tstcc	r1, r1
    e194:	334e1f00 	movtcc	r1, #61184	; 0xef00
    e198:	089e0000 	ldmeq	lr, {}	; <UNPREDICTABLE>
    e19c:	561f0000 	ldrpl	r0, [pc], -r0
    e1a0:	aa000033 	bge	e274 <__exidx_end+0x91cc>
    e1a4:	00000008 	andeq	r0, r0, r8
    e1a8:	002ae41c 	eoreq	lr, sl, ip, lsl r4
    e1ac:	01f20200 	mvnseq	r0, r0, lsl #4
    e1b0:	000000c3 	andeq	r0, r0, r3, asr #1
    e1b4:	00000000 	andeq	r0, r0, r0
    e1b8:	00000038 	andeq	r0, r0, r8, lsr r0
    e1bc:	079a9c01 	ldreq	r9, [sl, r1, lsl #24]
    e1c0:	b2260000 	eorlt	r0, r6, #0
    e1c4:	0100002c 	tsteq	r0, ip, lsr #32
    e1c8:	00c3013c 	sbceq	r0, r3, ip, lsr r1
    e1cc:	37110000 	ldrcc	r0, [r1, -r0]
    e1d0:	15270000 	strne	r0, [r7, #-0]!
    e1d4:	0100002c 	tsteq	r0, ip, lsr #32
    e1d8:	00ce013f 	sbceq	r0, lr, pc, lsr r1
    e1dc:	51010000 	mrspl	r0, (UNDEF: 1)
    e1e0:	002e7827 	eoreq	r7, lr, r7, lsr #16
    e1e4:	01410100 	mrseq	r0, (UNDEF: 81)
    e1e8:	000000c3 	andeq	r0, r0, r3, asr #1
    e1ec:	40007105 	andmi	r7, r0, r5, lsl #2
    e1f0:	94279f26 	strtls	r9, [r7], #-3878	; 0xfffff0da
    e1f4:	01000029 	tsteq	r0, r9, lsr #32
    e1f8:	00c30143 	sbceq	r0, r3, r3, asr #2
    e1fc:	71070000 	mrsvc	r0, (UNDEF: 7)
    e200:	48244000 	stmdami	r4!, {lr}
    e204:	9c279f26 	stcls	15, cr9, [r7], #-152	; 0xffffff68
    e208:	01000029 	tsteq	r0, r9, lsr #32
    e20c:	00c30145 	sbceq	r0, r3, r5, asr #2
    e210:	71070000 	mrsvc	r0, (UNDEF: 7)
    e214:	48244800 	stmdami	r4!, {fp, lr}
    e218:	a4249f26 	strtge	r9, [r4], #-3878	; 0xfffff0da
    e21c:	01000029 	tsteq	r0, r9, lsr #32
    e220:	00c30147 	sbceq	r0, r3, r7, asr #2
    e224:	373f0000 	ldrcc	r0, [pc, -r0]!
    e228:	02240000 	eoreq	r0, r4, #0
    e22c:	0100002a 	tsteq	r0, sl, lsr #32
    e230:	00c30156 	sbceq	r0, r3, r6, asr r1
    e234:	37580000 	ldrbcc	r0, [r8, -r0]
    e238:	ba240000 	blt	90e240 <__ccfg+0x8ee298>
    e23c:	0100002b 	tsteq	r0, fp, lsr #32
    e240:	00c30157 	sbceq	r0, r3, r7, asr r1
    e244:	377b0000 	ldrbcc	r0, [fp, -r0]!
    e248:	64280000 	strtvs	r0, [r8], #-0
    e24c:	01580100 	cmpeq	r8, r0, lsl #2
    e250:	000000c3 	andeq	r0, r0, r3, asr #1
    e254:	000037a4 	andeq	r3, r0, r4, lsr #15
    e258:	2cfd1c00 	ldclcs	12, cr1, [sp]
    e25c:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
    e260:	0000ad02 	andeq	sl, r0, r2, lsl #26
    e264:	00000000 	andeq	r0, r0, r0
    e268:	00000c00 	andeq	r0, r0, r0, lsl #24
    e26c:	d59c0100 	ldrle	r0, [ip, #256]	; 0x100
    e270:	26000007 	strcs	r0, [r0], -r7
    e274:	00002bd3 	ldrdeq	r2, [r0], -r3
    e278:	c3016301 	movwgt	r6, #4865	; 0x1301
    e27c:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    e280:	24000038 	strcs	r0, [r0], #-56	; 0xffffffc8
    e284:	00002dac 	andeq	r2, r0, ip, lsr #27
    e288:	c3018501 	movwgt	r8, #5377	; 0x1501
    e28c:	3f000000 	svccc	0x00000000
    e290:	00000038 	andeq	r0, r0, r8, lsr r0
    e294:	002b0e1c 	eoreq	r0, fp, ip, lsl lr
    e298:	01c20200 	biceq	r0, r2, r0, lsl #4
    e29c:	000000ce 	andeq	r0, r0, lr, asr #1
    e2a0:	00000000 	andeq	r0, r0, r0
    e2a4:	00000034 	andeq	r0, r0, r4, lsr r0
    e2a8:	08429c01 	stmdaeq	r2, {r0, sl, fp, ip, pc}^
    e2ac:	ff240000 			; <UNDEFINED> instruction: 0xff240000
    e2b0:	0100002d 	tsteq	r0, sp, lsr #32
    e2b4:	00ce0192 	smulleq	r0, lr, r2, r1
    e2b8:	387f0000 	ldmdacc	pc!, {}^	; <UNPREDICTABLE>
    e2bc:	c4240000 	strtgt	r0, [r4], #-0
    e2c0:	0100001b 	tsteq	r0, fp, lsl r0
    e2c4:	00ce0193 	smulleq	r0, lr, r3, r1
    e2c8:	38a10000 	stmiacc	r1!, {}	; <UNPREDICTABLE>
    e2cc:	d1240000 			; <UNDEFINED> instruction: 0xd1240000
    e2d0:	0100002a 	tsteq	r0, sl, lsr #32
    e2d4:	00ce0194 	smulleq	r0, lr, r4, r1
    e2d8:	38b40000 	ldmcc	r4!, {}	; <UNPREDICTABLE>
    e2dc:	6f240000 	svcvs	0x00240000
    e2e0:	0100002a 	tsteq	r0, sl, lsr #32
    e2e4:	00ce0195 	smulleq	r0, lr, r5, r1
    e2e8:	38d70000 	ldmcc	r7, {}^	; <UNPREDICTABLE>
    e2ec:	001f0000 	andseq	r0, pc, r0
    e2f0:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    e2f4:	1f000008 	svcne	0x00000008
    e2f8:	00000000 	andeq	r0, r0, r0
    e2fc:	0000089e 	muleq	r0, lr, r8
    e300:	2dcb1c00 	stclcs	12, cr1, [fp]
    e304:	d3020000 	movwle	r0, #8192	; 0x2000
    e308:	0000ce01 	andeq	ip, r0, r1, lsl #28
    e30c:	00000000 	andeq	r0, r0, r0
    e310:	00001c00 	andeq	r1, r0, r0, lsl #24
    e314:	8d9c0100 	ldfhis	f0, [ip]
    e318:	24000008 	strcs	r0, [r0], #-8
    e31c:	00002c4f 	andeq	r2, r0, pc, asr #24
    e320:	ce01b701 	cdpgt	7, 0, cr11, cr1, cr1, {0}
    e324:	f3000000 	vhadd.u8	d0, d0, d0
    e328:	24000038 	strcs	r0, [r0], #-56	; 0xffffffc8
    e32c:	00002dbd 			; <UNDEFINED> instruction: 0x00002dbd
    e330:	ce01b801 	cdpgt	8, 0, cr11, cr1, cr1, {0}
    e334:	06000000 	streq	r0, [r0], -r0
    e338:	24000039 	strcs	r0, [r0], #-57	; 0xffffffc7
    e33c:	00002a0c 	andeq	r2, r0, ip, lsl #20
    e340:	ce01b901 	vmlagt.f16	s22, s2, s2	; <UNPREDICTABLE>
    e344:	21000000 	mrscs	r0, (UNDEF: 0)
    e348:	00000039 	andeq	r0, r0, r9, lsr r0
    e34c:	002bc629 	eoreq	ip, fp, r9, lsr #12
    e350:	a55c0100 	ldrbge	r0, [ip, #-256]	; 0xffffff00
    e354:	05000003 	streq	r0, [r0, #-3]
    e358:	00061003 	andeq	r1, r6, r3
    e35c:	27a52a20 	strcs	r2, [r5, r0, lsr #20]!
    e360:	45070000 	strmi	r0, [r7, #-0]
    e364:	0000ce03 	andeq	ip, r0, r3, lsl #28
    e368:	270c2b00 	strcs	r2, [ip, -r0, lsl #22]
    e36c:	aa080000 	bge	20e374 <__ccfg+0x1ee3cc>
    e370:	000000c3 	andeq	r0, r0, r3, asr #1
    e374:	0025b32c 	eoreq	fp, r5, ip, lsr #6
    e378:	08990600 	ldmeq	r9, {r9, sl}
    e37c:	000000d9 	ldrdeq	r0, [r0], -r9
    e380:	0ab40000 	beq	fed0e388 <_estack+0xded09388>
    e384:	00040000 	andeq	r0, r4, r0
    e388:	000033bd 			; <UNDEFINED> instruction: 0x000033bd
    e38c:	25db0104 	ldrbcs	r0, [fp, #260]	; 0x104
    e390:	9c010000 	stcls	0, cr0, [r1], {-0}
    e394:	a200002f 	andge	r0, r0, #47	; 0x2f
    e398:	80000026 	andhi	r0, r0, r6, lsr #32
    e39c:	00000010 	andeq	r0, r0, r0, lsl r0
    e3a0:	60000000 	andvs	r0, r0, r0
    e3a4:	02000074 	andeq	r0, r0, #116	; 0x74
    e3a8:	098a0601 	stmibeq	sl, {r0, r9, sl}
    e3ac:	df030000 	svcle	0x00030000
    e3b0:	03000008 	movweq	r0, #8
    e3b4:	0000371d 	andeq	r3, r0, sp, lsl r7
    e3b8:	08010200 	stmdaeq	r1, {r9}
    e3bc:	00000988 	andeq	r0, r0, r8, lsl #19
    e3c0:	002d7c03 	eoreq	r7, sp, r3, lsl #24
    e3c4:	49290300 	stmdbmi	r9!, {r8, r9}
    e3c8:	02000000 	andeq	r0, r0, #0
    e3cc:	08440502 	stmdaeq	r4, {r1, r8, sl}^
    e3d0:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    e3d4:	03000004 	movweq	r0, #4
    e3d8:	00005b2b 	andeq	r5, r0, fp, lsr #22
    e3dc:	07020200 	streq	r0, [r2, -r0, lsl #4]
    e3e0:	00000a80 	andeq	r0, r0, r0, lsl #21
    e3e4:	00273b03 	eoreq	r3, r7, r3, lsl #22
    e3e8:	6d3f0300 	ldcvs	3, cr0, [pc, #-0]	; e3f0 <__exidx_end+0x9348>
    e3ec:	02000000 	andeq	r0, r0, #0
    e3f0:	06370504 	ldrteq	r0, [r7], -r4, lsl #10
    e3f4:	9f030000 	svcls	0x00030000
    e3f8:	03000009 	movweq	r0, #9
    e3fc:	00007f41 	andeq	r7, r0, r1, asr #30
    e400:	07040200 	streq	r0, [r4, -r0, lsl #4]
    e404:	000003cf 	andeq	r0, r0, pc, asr #7
    e408:	32050802 	andcc	r0, r5, #131072	; 0x20000
    e40c:	02000006 	andeq	r0, r0, #6
    e410:	03ca0708 	biceq	r0, sl, #8, 14	; 0x200000
    e414:	04040000 	streq	r0, [r4], #-0
    e418:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    e41c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    e420:	000003d4 	ldrdeq	r0, [r0], -r4
    e424:	0008e103 	andeq	lr, r8, r3, lsl #2
    e428:	2c140400 	cfldrscs	mvf0, [r4], {-0}
    e42c:	03000000 	movweq	r0, #0
    e430:	00002d7e 	andeq	r2, r0, lr, ror sp
    e434:	003e1904 	eorseq	r1, lr, r4, lsl #18
    e438:	0a030000 	beq	ce440 <__ccfg+0xae498>
    e43c:	04000004 	streq	r0, [r0], #-4
    e440:	0000501a 	andeq	r5, r0, sl, lsl r0
    e444:	273d0300 	ldrcs	r0, [sp, -r0, lsl #6]!
    e448:	1f040000 	svcne	0x00040000
    e44c:	00000062 	andeq	r0, r0, r2, rrx
    e450:	0009a103 	andeq	sl, r9, r3, lsl #2
    e454:	74200400 	strtvc	r0, [r0], #-1024	; 0xfffffc00
    e458:	03000000 	movweq	r0, #0
    e45c:	00002ea5 	andeq	r2, r0, r5, lsr #29
    e460:	009bd405 	addseq	sp, fp, r5, lsl #8
    e464:	04020000 	streq	r0, [r2], #-0
    e468:	00284f07 	eoreq	r4, r8, r7, lsl #30
    e46c:	02040500 	andeq	r0, r4, #0, 10
    e470:	09910801 	ldmibeq	r1, {r0, fp}
    e474:	86030000 	strhi	r0, [r3], -r0
    e478:	06000020 	streq	r0, [r0], -r0, lsr #32
    e47c:	0000ce3b 	andeq	ip, r0, fp, lsr lr
    e480:	a2040600 	andge	r0, r4, #0, 12
    e484:	03000000 	movweq	r0, #0
    e488:	00001e4e 	andeq	r1, r0, lr, asr #28
    e48c:	01103c07 	tsteq	r0, r7, lsl #24
    e490:	ec070000 	stc	0, cr0, [r7], {-0}
    e494:	10000020 	andne	r0, r0, r0, lsr #32
    e498:	01656f07 	cmneq	r5, r7, lsl #30
    e49c:	cc080000 	stcgt	0, cr0, [r8], {-0}
    e4a0:	0700001a 	smladeq	r0, sl, r0, r0
    e4a4:	0000b870 	andeq	fp, r0, r0, ror r8
    e4a8:	d4080000 	strle	r0, [r8], #-0
    e4ac:	07000005 	streq	r0, [r0, -r5]
    e4b0:	0000b871 	andeq	fp, r0, r1, ror r8
    e4b4:	2c080200 	sfmcs	f0, 4, [r8], {-0}
    e4b8:	0700001e 	smladeq	r0, lr, r0, r0
    e4bc:	00026d74 	andeq	r6, r2, r4, ror sp
    e4c0:	c4080400 	strgt	r0, [r8], #-1024	; 0xfffffc00
    e4c4:	0700001b 	smladeq	r0, fp, r0, r0
    e4c8:	0000f475 	andeq	pc, r0, r5, ror r4	; <UNPREDICTABLE>
    e4cc:	5c080800 	stcpl	8, cr0, [r8], {-0}
    e4d0:	0700001e 	smladeq	r0, lr, r0, r0
    e4d4:	0002017d 	andeq	r0, r2, sp, ror r1
    e4d8:	a6080c00 	strge	r0, [r8], -r0, lsl #24
    e4dc:	0700001d 	smladeq	r0, sp, r0, r0
    e4e0:	00024681 	andeq	r4, r2, r1, lsl #13
    e4e4:	03000d00 	movweq	r0, #3328	; 0xd00
    e4e8:	00002fcd 	andeq	r2, r0, sp, asr #31
    e4ec:	01703e07 	cmneq	r0, r7, lsl #28
    e4f0:	b7070000 	strlt	r0, [r7, -r0]
    e4f4:	1800002f 	stmdane	r0, {r0, r1, r2, r3, r5}
    e4f8:	0201a507 	andeq	sl, r1, #29360128	; 0x1c00000
    e4fc:	cc080000 	stcgt	0, cr0, [r8], {-0}
    e500:	0700001a 	smladeq	r0, sl, r0, r0
    e504:	0000b8a6 	andeq	fp, r0, r6, lsr #17
    e508:	d4080000 	strle	r0, [r8], #-0
    e50c:	07000005 	streq	r0, [r0, -r5]
    e510:	0000b8a7 	andeq	fp, r0, r7, lsr #17
    e514:	2c080200 	sfmcs	f0, 4, [r8], {-0}
    e518:	0700001e 	smladeq	r0, lr, r0, r0
    e51c:	00026daa 	andeq	r6, r2, sl, lsr #27
    e520:	c4080400 	strgt	r0, [r8], #-1024	; 0xfffffc00
    e524:	0700001b 	smladeq	r0, fp, r0, r0
    e528:	0000f4ab 	andeq	pc, r0, fp, lsr #9
    e52c:	5c080800 	stcpl	8, cr0, [r8], {-0}
    e530:	0700001e 	smladeq	r0, lr, r0, r0
    e534:	000273b3 			; <UNDEFINED> instruction: 0x000273b3
    e538:	a6080c00 	strge	r0, [r8], -r0, lsl #24
    e53c:	0700001d 	smladeq	r0, sp, r0, r0
    e540:	0002b8b7 			; <UNDEFINED> instruction: 0x0002b8b7
    e544:	40080d00 	andmi	r0, r8, r0, lsl #26
    e548:	07000000 	streq	r0, [r0, -r0]
    e54c:	0000a2b8 			; <UNDEFINED> instruction: 0x0000a2b8
    e550:	71080e00 	tstvc	r8, r0, lsl #28
    e554:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    e558:	0000a2bf 			; <UNDEFINED> instruction: 0x0000a2bf
    e55c:	83080f00 	movwhi	r0, #36608	; 0x8f00
    e560:	07000010 	smladeq	r0, r0, r0, r0
    e564:	0002dfd4 	ldrdeq	sp, [r2], -r4
    e568:	45081000 	strmi	r1, [r8, #-0]
    e56c:	0700001c 	smladeq	r0, ip, r0, r0
    e570:	0000b8d5 	ldrdeq	fp, [r0], -r5
    e574:	79081200 	stmdbvc	r8, {r9, ip}
    e578:	07000020 	streq	r0, [r0, -r0, lsr #32]
    e57c:	000324d6 	ldrdeq	r2, [r3], -r6
    e580:	09001400 	stmdbeq	r0, {sl, ip}
    e584:	46760701 	ldrbtmi	r0, [r6], -r1, lsl #14
    e588:	0a000002 	beq	e598 <__exidx_end+0x94f0>
    e58c:	0000231f 	andeq	r2, r0, pc, lsl r3
    e590:	00a27707 	adceq	r7, r2, r7, lsl #14
    e594:	04010000 	streq	r0, [r1], #-0
    e598:	ad0a0004 	stcge	0, cr0, [sl, #-16]
    e59c:	0700001c 	smladeq	r0, ip, r0, r0
    e5a0:	0000a278 	andeq	sl, r0, r8, ror r2
    e5a4:	03010100 	movweq	r0, #4352	; 0x1100
    e5a8:	1d6d0a00 	vpushne	{s1-s0}
    e5ac:	7a070000 	bvc	1ce5b4 <__ccfg+0x1ae60c>
    e5b0:	000000a2 	andeq	r0, r0, r2, lsr #1
    e5b4:	00010201 	andeq	r0, r1, r1, lsl #4
    e5b8:	001b3b0a 	andseq	r3, fp, sl, lsl #22
    e5bc:	a27b0700 	rsbsge	r0, fp, #0, 14
    e5c0:	01000000 	mrseq	r0, (UNDEF: 0)
    e5c4:	00000001 	andeq	r0, r0, r1
    e5c8:	7e070109 	adfvcs	f0, f7, #1.0
    e5cc:	0000026d 	andeq	r0, r0, sp, ror #4
    e5d0:	0021890a 	eoreq	r8, r1, sl, lsl #18
    e5d4:	a27f0700 	rsbsge	r0, pc, #0, 14
    e5d8:	01000000 	mrseq	r0, (UNDEF: 0)
    e5dc:	0a000404 	beq	f5f4 <__exidx_end+0xa54c>
    e5e0:	000022e5 	andeq	r2, r0, r5, ror #5
    e5e4:	00a28007 	adceq	r8, r2, r7
    e5e8:	04010000 	streq	r0, [r1], #-0
    e5ec:	06000000 	streq	r0, [r0], -r0
    e5f0:	00010504 	andeq	r0, r1, r4, lsl #10
    e5f4:	07010900 	streq	r0, [r1, -r0, lsl #18]
    e5f8:	0002b8ac 	andeq	fp, r2, ip, lsr #17
    e5fc:	231f0a00 	tstcs	pc, #0, 20
    e600:	ad070000 	stcge	0, cr0, [r7, #-0]
    e604:	000000a2 	andeq	r0, r0, r2, lsr #1
    e608:	00040401 	andeq	r0, r4, r1, lsl #8
    e60c:	001cad0a 	andseq	sl, ip, sl, lsl #26
    e610:	a2ae0700 	adcge	r0, lr, #0, 14
    e614:	01000000 	mrseq	r0, (UNDEF: 0)
    e618:	0a000301 	beq	f224 <__exidx_end+0xa17c>
    e61c:	00001d6d 	andeq	r1, r0, sp, ror #26
    e620:	00a2b007 	adceq	fp, r2, r7
    e624:	02010000 	andeq	r0, r1, #0
    e628:	3b0a0001 	blcc	28e634 <__ccfg+0x26e68c>
    e62c:	0700001b 	smladeq	r0, fp, r0, r0
    e630:	0000a2b1 			; <UNDEFINED> instruction: 0x0000a2b1
    e634:	00010100 	andeq	r0, r1, r0, lsl #2
    e638:	01090000 	mrseq	r0, (UNDEF: 9)
    e63c:	02dfb407 	sbcseq	fp, pc, #117440512	; 0x7000000
    e640:	890a0000 	stmdbhi	sl, {}	; <UNPREDICTABLE>
    e644:	07000021 	streq	r0, [r0, -r1, lsr #32]
    e648:	0000a2b5 			; <UNDEFINED> instruction: 0x0000a2b5
    e64c:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    e650:	22e50a00 	rsccs	r0, r5, #0, 20
    e654:	b6070000 	strlt	r0, [r7], -r0
    e658:	000000a2 	andeq	r0, r0, r2, lsr #1
    e65c:	00000401 	andeq	r0, r0, r1, lsl #8
    e660:	07020900 	streq	r0, [r2, -r0, lsl #18]
    e664:	000324c2 	andeq	r2, r3, r2, asr #9
    e668:	1d600a00 	vstmdbne	r0!, {s1-s0}
    e66c:	c3070000 	movwgt	r0, #28672	; 0x7000
    e670:	000000b8 	strheq	r0, [r0], -r8
    e674:	000d0302 	andeq	r0, sp, r2, lsl #6
    e678:	001cff0a 	andseq	pc, ip, sl, lsl #30
    e67c:	b8c90700 	stmialt	r9, {r8, r9, sl}^
    e680:	02000000 	andeq	r0, r0, #0
    e684:	0a000c01 	beq	11690 <__exidx_end+0xc5e8>
    e688:	00001c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    e68c:	00b8cb07 	adcseq	ip, r8, r7, lsl #22
    e690:	06020000 	streq	r0, [r2], -r0
    e694:	9d0a0006 	stcls	0, cr0, [sl, #-24]	; 0xffffffe8
    e698:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    e69c:	0000b8d2 	ldrdeq	fp, [r0], -r2
    e6a0:	05010200 	streq	r0, [r1, #-512]	; 0xfffffe00
    e6a4:	04060000 	streq	r0, [r6], #-0
    e6a8:	000000ce 	andeq	r0, r0, lr, asr #1
    e6ac:	002eda03 	eoreq	sp, lr, r3, lsl #20
    e6b0:	35420800 	strbcc	r0, [r2, #-2048]	; 0xfffff800
    e6b4:	0b000003 	bleq	e6c8 <__exidx_end+0x9620>
    e6b8:	00002f6a 	andeq	r2, r0, sl, ror #30
    e6bc:	01c10820 	biceq	r0, r1, r0, lsr #16
    e6c0:	000003f9 	strdeq	r0, [r0], -r9
    e6c4:	001acc0c 	andseq	ip, sl, ip, lsl #24
    e6c8:	01c20800 	biceq	r0, r2, r0, lsl #16
    e6cc:	000000b8 	strheq	r0, [r0], -r8
    e6d0:	05d40c00 	ldrbeq	r0, [r4, #3072]	; 0xc00
    e6d4:	c3080000 	movwgt	r0, #32768	; 0x8000
    e6d8:	0000b801 	andeq	fp, r0, r1, lsl #16
    e6dc:	2c0c0200 	sfmcs	f0, 4, [ip], {-0}
    e6e0:	0800001e 	stmdaeq	r0, {r1, r2, r3, r4}
    e6e4:	026d01c6 	rsbeq	r0, sp, #-2147483599	; 0x80000031
    e6e8:	0c040000 	stceq	0, cr0, [r4], {-0}
    e6ec:	00001bc4 	andeq	r1, r0, r4, asr #23
    e6f0:	f401c708 	vst1.8	{d12}, [r1], r8
    e6f4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    e6f8:	001e5c0c 	andseq	r5, lr, ip, lsl #24
    e6fc:	01cf0800 	biceq	r0, pc, r0, lsl #16
    e700:	000004ef 	andeq	r0, r0, pc, ror #9
    e704:	1da60c0c 	stcne	12, cr0, [r6, #48]!	; 0x30
    e708:	d3080000 	movwle	r0, #32768	; 0x8000
    e70c:	00053901 	andeq	r3, r5, r1, lsl #18
    e710:	c10c0d00 	tstgt	ip, r0, lsl #26
    e714:	0800001a 	stmdaeq	r0, {r1, r3, r4}
    e718:	056301d9 	strbeq	r0, [r3, #-473]!	; 0xfffffe27
    e71c:	0c0e0000 	stceq	0, cr0, [lr], {-0}
    e720:	00001e15 	andeq	r1, r0, r5, lsl lr
    e724:	8d01de08 	stchi	14, cr13, [r1, #-32]	; 0xffffffe0
    e728:	10000005 	andne	r0, r0, r5
    e72c:	001c4d0c 	andseq	r4, ip, ip, lsl #26
    e730:	01df0800 	bicseq	r0, pc, r0, lsl #16
    e734:	000000a2 	andeq	r0, r0, r2, lsr #1
    e738:	1e9e0c14 	mrcne	12, 4, r0, cr14, cr4, {0}
    e73c:	e7080000 	str	r0, [r8, -r0]
    e740:	0005b701 	andeq	fp, r5, r1, lsl #14
    e744:	b90c1500 	stmdblt	ip, {r8, sl, ip}
    e748:	0800001b 	stmdaeq	r0, {r0, r1, r3, r4}
    e74c:	05e101fb 	strbeq	r0, [r1, #507]!	; 0x1fb
    e750:	0c160000 	ldceq	0, cr0, [r6], {-0}
    e754:	00001083 	andeq	r1, r0, r3, lsl #1
    e758:	3b020e08 	blcc	91f80 <__ccfg+0x71fd8>
    e75c:	18000006 	stmdane	r0, {r1, r2}
    e760:	001c450c 	andseq	r4, ip, ip, lsl #10
    e764:	020f0800 	andeq	r0, pc, #0, 16
    e768:	000000b8 	strheq	r0, [r0], -r8
    e76c:	20790c1a 	rsbscs	r0, r9, sl, lsl ip
    e770:	10080000 	andne	r0, r8, r0
    e774:	00032402 	andeq	r2, r3, r2, lsl #8
    e778:	03001c00 	movweq	r1, #3072	; 0xc00
    e77c:	00002019 	andeq	r2, r0, r9, lsl r0
    e780:	04044308 	streq	r4, [r4], #-776	; 0xfffffcf8
    e784:	fa0b0000 	blx	2ce78c <__ccfg+0x2ae7e4>
    e788:	2800001f 	stmdacs	r0, {r0, r1, r2, r3, r4}
    e78c:	ef021a08 	svc	0x00021a08
    e790:	0c000004 	stceq	0, cr0, [r0], {4}
    e794:	00001acc 	andeq	r1, r0, ip, asr #21
    e798:	b8021b08 	stmdalt	r2, {r3, r8, r9, fp, ip}
    e79c:	00000000 	andeq	r0, r0, r0
    e7a0:	0005d40c 	andeq	sp, r5, ip, lsl #8
    e7a4:	021d0800 	andseq	r0, sp, #0, 16
    e7a8:	000000b8 	strheq	r0, [r0], -r8
    e7ac:	1e2c0c02 	cdpne	12, 2, cr0, cr12, cr2, {0}
    e7b0:	20080000 	andcs	r0, r8, r0
    e7b4:	00026d02 	andeq	r6, r2, r2, lsl #26
    e7b8:	c40c0400 	strgt	r0, [ip], #-1024	; 0xfffffc00
    e7bc:	0800001b 	stmdaeq	r0, {r0, r1, r3, r4}
    e7c0:	00f40221 	rscseq	r0, r4, r1, lsr #4
    e7c4:	0c080000 	stceq	0, cr0, [r8], {-0}
    e7c8:	00001e5c 	andeq	r1, r0, ip, asr lr
    e7cc:	85022908 	strhi	r2, [r2, #-2312]	; 0xfffff6f8
    e7d0:	0c000006 	stceq	0, cr0, [r0], {6}
    e7d4:	001da60c 	andseq	sl, sp, ip, lsl #12
    e7d8:	022d0800 	eoreq	r0, sp, #0, 16
    e7dc:	000006cf 	andeq	r0, r0, pc, asr #13
    e7e0:	1ac10c0d 	bne	ff05181c <_estack+0xdf04c81c>
    e7e4:	33080000 	movwcc	r0, #32768	; 0x8000
    e7e8:	0006f902 	andeq	pc, r6, r2, lsl #18
    e7ec:	150c0e00 	strne	r0, [ip, #-3584]	; 0xfffff200
    e7f0:	0800001e 	stmdaeq	r0, {r1, r2, r3, r4}
    e7f4:	07230238 			; <UNDEFINED> instruction: 0x07230238
    e7f8:	0c100000 	ldceq	0, cr0, [r0], {-0}
    e7fc:	00001c4d 	andeq	r1, r0, sp, asr #24
    e800:	a2023908 	andge	r3, r2, #8, 18	; 0x20000
    e804:	14000000 	strne	r0, [r0], #-0
    e808:	001e9e0c 	andseq	r9, lr, ip, lsl #28
    e80c:	02410800 	subeq	r0, r1, #0, 16
    e810:	0000074d 	andeq	r0, r0, sp, asr #14
    e814:	1bb90c15 	blne	fee51870 <_estack+0xdee4c870>
    e818:	55080000 	strpl	r0, [r8, #-0]
    e81c:	00077702 	andeq	r7, r7, r2, lsl #14
    e820:	830c1600 	movwhi	r1, #50688	; 0xc600
    e824:	08000010 	stmdaeq	r0, {r4}
    e828:	07d10268 	ldrbeq	r0, [r1, r8, ror #4]
    e82c:	0c180000 	ldceq	0, cr0, [r8], {-0}
    e830:	00001c45 	andeq	r1, r0, r5, asr #24
    e834:	b8026908 	stmdalt	r2, {r3, r8, fp, sp, lr}
    e838:	1a000000 	bne	e840 <__exidx_end+0x9798>
    e83c:	0020790c 	eoreq	r7, r0, ip, lsl #18
    e840:	026a0800 	rsbeq	r0, sl, #0, 16
    e844:	00000324 	andeq	r0, r0, r4, lsr #6
    e848:	1afe0c1c 	bne	fff918c0 <_estack+0xdff8c8c0>
    e84c:	6c080000 	stcvs	0, cr0, [r8], {-0}
    e850:	0000b802 	andeq	fp, r0, r2, lsl #16
    e854:	340c2000 	strcc	r2, [ip], #-0
    e858:	0800001e 	stmdaeq	r0, {r1, r2, r3, r4}
    e85c:	00ad0270 	adceq	r0, sp, r0, ror r2
    e860:	0c220000 	stceq	0, cr0, [r2], #-0
    e864:	00001f71 	andeq	r1, r0, r1, ror pc
    e868:	a2027308 	andge	r7, r2, #8, 6	; 0x20000000
    e86c:	24000000 	strcs	r0, [r0], #-0
    e870:	08010d00 	stmdaeq	r1, {r8, sl, fp}
    e874:	053901c8 	ldreq	r0, [r9, #-456]!	; 0xfffffe38
    e878:	1f0e0000 	svcne	0x000e0000
    e87c:	08000023 	stmdaeq	r0, {r0, r1, r5}
    e880:	00a201c9 	adceq	r0, r2, r9, asr #3
    e884:	04010000 	streq	r0, [r1], #-0
    e888:	ad0e0004 	stcge	0, cr0, [lr, #-16]
    e88c:	0800001c 	stmdaeq	r0, {r2, r3, r4}
    e890:	00a201ca 	adceq	r0, r2, sl, asr #3
    e894:	01010000 	mrseq	r0, (UNDEF: 1)
    e898:	6d0e0003 	stcvs	0, cr0, [lr, #-12]
    e89c:	0800001d 	stmdaeq	r0, {r0, r2, r3, r4}
    e8a0:	00a201cc 	adceq	r0, r2, ip, asr #3
    e8a4:	02010000 	andeq	r0, r1, #0
    e8a8:	3b0e0001 	blcc	38e8b4 <__ccfg+0x36e90c>
    e8ac:	0800001b 	stmdaeq	r0, {r0, r1, r3, r4}
    e8b0:	00a201cd 	adceq	r0, r2, sp, asr #3
    e8b4:	01010000 	mrseq	r0, (UNDEF: 1)
    e8b8:	0d000000 	stceq	0, cr0, [r0, #-0]
    e8bc:	01d00801 	bicseq	r0, r0, r1, lsl #16
    e8c0:	00000563 	andeq	r0, r0, r3, ror #10
    e8c4:	0021890e 	eoreq	r8, r1, lr, lsl #18
    e8c8:	01d10800 	bicseq	r0, r1, r0, lsl #16
    e8cc:	000000a2 	andeq	r0, r0, r2, lsr #1
    e8d0:	00040401 	andeq	r0, r4, r1, lsl #8
    e8d4:	0022e50e 	eoreq	lr, r2, lr, lsl #10
    e8d8:	01d20800 	bicseq	r0, r2, r0, lsl #16
    e8dc:	000000a2 	andeq	r0, r0, r2, lsr #1
    e8e0:	00000401 	andeq	r0, r0, r1, lsl #8
    e8e4:	08020d00 	stmdaeq	r2, {r8, sl, fp}
    e8e8:	058d01d4 	streq	r0, [sp, #468]	; 0x1d4
    e8ec:	c50e0000 	strgt	r0, [lr, #-0]
    e8f0:	0800001d 	stmdaeq	r0, {r0, r2, r3, r4}
    e8f4:	00b801d5 	ldrsbteq	r0, [r8], r5
    e8f8:	03020000 	movweq	r0, #8192	; 0x2000
    e8fc:	c80e000d 	stmdagt	lr, {r0, r2, r3}
    e900:	08000022 	stmdaeq	r0, {r1, r5}
    e904:	00b801d8 	ldrsbteq	r0, [r8], r8
    e908:	0d020000 	stceq	0, cr0, [r2, #-0]
    e90c:	0d000000 	stceq	0, cr0, [r0, #-0]
    e910:	01da0804 	bicseq	r0, sl, r4, lsl #16
    e914:	000005b7 			; <UNDEFINED> instruction: 0x000005b7
    e918:	001f590e 	andseq	r5, pc, lr, lsl #18
    e91c:	01db0800 	bicseq	r0, fp, r0, lsl #16
    e920:	000000ce 	andeq	r0, r0, lr, asr #1
    e924:	001c0404 	andseq	r0, ip, r4, lsl #8
    e928:	0020690e 	eoreq	r6, r0, lr, lsl #18
    e92c:	01dd0800 	bicseq	r0, sp, r0, lsl #16
    e930:	000000ce 	andeq	r0, r0, lr, asr #1
    e934:	00031504 	andeq	r1, r3, r4, lsl #10
    e938:	08010d00 	stmdaeq	r1, {r8, sl, fp}
    e93c:	05e101e0 	strbeq	r0, [r1, #480]!	; 0x1e0
    e940:	bd0e0000 	stclt	0, cr0, [lr, #-0]
    e944:	08000021 	stmdaeq	r0, {r0, r5}
    e948:	00a201e1 	adceq	r0, r2, r1, ror #3
    e94c:	06010000 	streq	r0, [r1], -r0
    e950:	930e0002 	movwls	r0, #57346	; 0xe002
    e954:	0800001b 	stmdaeq	r0, {r0, r1, r3, r4}
    e958:	00a201e3 	adceq	r0, r2, r3, ror #3
    e95c:	02010000 	andeq	r0, r1, #0
    e960:	0d000000 	stceq	0, cr0, [r0, #-0]
    e964:	01e80802 	mvneq	r0, r2, lsl #16
    e968:	0000063b 	andeq	r0, r0, fp, lsr r6
    e96c:	001f620e 	andseq	r6, pc, lr, lsl #4
    e970:	01e90800 	mvneq	r0, r0, lsl #16
    e974:	000000b8 	strheq	r0, [r0], -r8
    e978:	000a0602 	andeq	r0, sl, r2, lsl #12
    e97c:	001dff0e 	andseq	pc, sp, lr, lsl #30
    e980:	01ea0800 	mvneq	r0, r0, lsl #16
    e984:	000000b8 	strheq	r0, [r0], -r8
    e988:	00090102 	andeq	r0, r9, r2, lsl #2
    e98c:	001fca0e 	andseq	ip, pc, lr, lsl #20
    e990:	01ec0800 	mvneq	r0, r0, lsl #16
    e994:	000000b8 	strheq	r0, [r0], -r8
    e998:	00080102 	andeq	r0, r8, r2, lsl #2
    e99c:	001b7b0e 	andseq	r7, fp, lr, lsl #22
    e9a0:	01ee0800 	mvneq	r0, r0, lsl #16
    e9a4:	000000b8 	strheq	r0, [r0], -r8
    e9a8:	00040402 	andeq	r0, r4, r2, lsl #8
    e9ac:	001b1e0e 	andseq	r1, fp, lr, lsl #28
    e9b0:	01f30800 	mvnseq	r0, r0, lsl #16
    e9b4:	000000b8 	strheq	r0, [r0], -r8
    e9b8:	00000302 	andeq	r0, r0, r2, lsl #6
    e9bc:	08020d00 	stmdaeq	r2, {r8, sl, fp}
    e9c0:	068501fc 			; <UNDEFINED> instruction: 0x068501fc
    e9c4:	600e0000 	andvs	r0, lr, r0
    e9c8:	0800001d 	stmdaeq	r0, {r0, r2, r3, r4}
    e9cc:	00b801fd 	ldrshteq	r0, [r8], sp
    e9d0:	03020000 	movweq	r0, #8192	; 0x2000
    e9d4:	ff0e000d 			; <UNDEFINED> instruction: 0xff0e000d
    e9d8:	0800001c 	stmdaeq	r0, {r2, r3, r4}
    e9dc:	00b80203 	adcseq	r0, r8, r3, lsl #4
    e9e0:	01020000 	mrseq	r0, (UNDEF: 2)
    e9e4:	9f0e000c 	svcls	0x000e000c
    e9e8:	0800001c 	stmdaeq	r0, {r2, r3, r4}
    e9ec:	00b80205 	adcseq	r0, r8, r5, lsl #4
    e9f0:	06020000 	streq	r0, [r2], -r0
    e9f4:	9d0e0006 	stcls	0, cr0, [lr, #-24]	; 0xffffffe8
    e9f8:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    e9fc:	00b8020c 	adcseq	r0, r8, ip, lsl #4
    ea00:	01020000 	mrseq	r0, (UNDEF: 2)
    ea04:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
    ea08:	02220801 	eoreq	r0, r2, #65536	; 0x10000
    ea0c:	000006cf 	andeq	r0, r0, pc, asr #13
    ea10:	00231f0e 	eoreq	r1, r3, lr, lsl #30
    ea14:	02230800 	eoreq	r0, r3, #0, 16
    ea18:	000000a2 	andeq	r0, r0, r2, lsr #1
    ea1c:	00040401 	andeq	r0, r4, r1, lsl #8
    ea20:	001cad0e 	andseq	sl, ip, lr, lsl #26
    ea24:	02240800 	eoreq	r0, r4, #0, 16
    ea28:	000000a2 	andeq	r0, r0, r2, lsr #1
    ea2c:	00030101 	andeq	r0, r3, r1, lsl #2
    ea30:	001d6d0e 	andseq	r6, sp, lr, lsl #26
    ea34:	02260800 	eoreq	r0, r6, #0, 16
    ea38:	000000a2 	andeq	r0, r0, r2, lsr #1
    ea3c:	00010201 	andeq	r0, r1, r1, lsl #4
    ea40:	001b3b0e 	andseq	r3, fp, lr, lsl #22
    ea44:	02270800 	eoreq	r0, r7, #0, 16
    ea48:	000000a2 	andeq	r0, r0, r2, lsr #1
    ea4c:	00000101 	andeq	r0, r0, r1, lsl #2
    ea50:	08010d00 	stmdaeq	r1, {r8, sl, fp}
    ea54:	06f9022a 	ldrbteq	r0, [r9], sl, lsr #4
    ea58:	890e0000 	stmdbhi	lr, {}	; <UNPREDICTABLE>
    ea5c:	08000021 	stmdaeq	r0, {r0, r5}
    ea60:	00a2022b 	adceq	r0, r2, fp, lsr #4
    ea64:	04010000 	streq	r0, [r1], #-0
    ea68:	e50e0004 	str	r0, [lr, #-4]
    ea6c:	08000022 	stmdaeq	r0, {r1, r5}
    ea70:	00a2022c 	adceq	r0, r2, ip, lsr #4
    ea74:	04010000 	streq	r0, [r1], #-0
    ea78:	0d000000 	stceq	0, cr0, [r0, #-0]
    ea7c:	022e0802 	eoreq	r0, lr, #131072	; 0x20000
    ea80:	00000723 	andeq	r0, r0, r3, lsr #14
    ea84:	001dc50e 	andseq	ip, sp, lr, lsl #10
    ea88:	022f0800 	eoreq	r0, pc, #0, 16
    ea8c:	000000b8 	strheq	r0, [r0], -r8
    ea90:	000d0302 	andeq	r0, sp, r2, lsl #6
    ea94:	0022c80e 	eoreq	ip, r2, lr, lsl #16
    ea98:	02320800 	eorseq	r0, r2, #0, 16
    ea9c:	000000b8 	strheq	r0, [r0], -r8
    eaa0:	00000d02 	andeq	r0, r0, r2, lsl #26
    eaa4:	08040d00 	stmdaeq	r4, {r8, sl, fp}
    eaa8:	074d0234 	smlaldxeq	r0, sp, r4, r2
    eaac:	590e0000 	stmdbpl	lr, {}	; <UNPREDICTABLE>
    eab0:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    eab4:	00ce0235 	sbceq	r0, lr, r5, lsr r2
    eab8:	04040000 	streq	r0, [r4], #-0
    eabc:	690e001c 	stmdbvs	lr, {r2, r3, r4}
    eac0:	08000020 	stmdaeq	r0, {r5}
    eac4:	00ce0237 	sbceq	r0, lr, r7, lsr r2
    eac8:	15040000 	strne	r0, [r4, #-0]
    eacc:	0d000003 	stceq	0, cr0, [r0, #-12]
    ead0:	023a0801 	eorseq	r0, sl, #65536	; 0x10000
    ead4:	00000777 	andeq	r0, r0, r7, ror r7
    ead8:	0021bd0e 	eoreq	fp, r1, lr, lsl #26
    eadc:	023b0800 	eorseq	r0, fp, #0, 16
    eae0:	000000a2 	andeq	r0, r0, r2, lsr #1
    eae4:	00020601 	andeq	r0, r2, r1, lsl #12
    eae8:	001b930e 	andseq	r9, fp, lr, lsl #6
    eaec:	023d0800 	eorseq	r0, sp, #0, 16
    eaf0:	000000a2 	andeq	r0, r0, r2, lsr #1
    eaf4:	00000201 	andeq	r0, r0, r1, lsl #4
    eaf8:	08020d00 	stmdaeq	r2, {r8, sl, fp}
    eafc:	07d10242 	ldrbeq	r0, [r1, r2, asr #4]
    eb00:	620e0000 	andvs	r0, lr, #0
    eb04:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    eb08:	00b80243 	adcseq	r0, r8, r3, asr #4
    eb0c:	06020000 	streq	r0, [r2], -r0
    eb10:	ff0e000a 			; <UNDEFINED> instruction: 0xff0e000a
    eb14:	0800001d 	stmdaeq	r0, {r0, r2, r3, r4}
    eb18:	00b80244 	adcseq	r0, r8, r4, asr #4
    eb1c:	01020000 	mrseq	r0, (UNDEF: 2)
    eb20:	ca0e0009 	bgt	38eb4c <__ccfg+0x36eba4>
    eb24:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    eb28:	00b80246 	adcseq	r0, r8, r6, asr #4
    eb2c:	01020000 	mrseq	r0, (UNDEF: 2)
    eb30:	7b0e0008 	blvc	38eb58 <__ccfg+0x36ebb0>
    eb34:	0800001b 	stmdaeq	r0, {r0, r1, r3, r4}
    eb38:	00b80248 	adcseq	r0, r8, r8, asr #4
    eb3c:	04020000 	streq	r0, [r2], #-0
    eb40:	1e0e0004 	cdpne	0, 0, cr0, cr14, cr4, {0}
    eb44:	0800001b 	stmdaeq	r0, {r0, r1, r3, r4}
    eb48:	00b8024d 	adcseq	r0, r8, sp, asr #4
    eb4c:	03020000 	movweq	r0, #8192	; 0x2000
    eb50:	0d000000 	stceq	0, cr0, [r0, #-0]
    eb54:	02560802 	subseq	r0, r6, #131072	; 0x20000
    eb58:	0000081b 	andeq	r0, r0, fp, lsl r8
    eb5c:	001d600e 	andseq	r6, sp, lr
    eb60:	02570800 	subseq	r0, r7, #0, 16
    eb64:	000000b8 	strheq	r0, [r0], -r8
    eb68:	000d0302 	andeq	r0, sp, r2, lsl #6
    eb6c:	001cff0e 	andseq	pc, ip, lr, lsl #30
    eb70:	025d0800 	subseq	r0, sp, #0, 16
    eb74:	000000b8 	strheq	r0, [r0], -r8
    eb78:	000c0102 	andeq	r0, ip, r2, lsl #2
    eb7c:	001c9f0e 	andseq	r9, ip, lr, lsl #30
    eb80:	025f0800 	subseq	r0, pc, #0, 16
    eb84:	000000b8 	strheq	r0, [r0], -r8
    eb88:	00060602 	andeq	r0, r6, r2, lsl #12
    eb8c:	001f9d0e 	andseq	r9, pc, lr, lsl #26
    eb90:	02660800 	rsbeq	r0, r6, #0, 16
    eb94:	000000b8 	strheq	r0, [r0], -r8
    eb98:	00050102 	andeq	r0, r5, r2, lsl #2
    eb9c:	02100900 	andseq	r0, r0, #0, 18
    eba0:	00085448 	andeq	r5, r8, r8, asr #8
    eba4:	1d250800 	stcne	8, cr0, [r5, #-0]
    eba8:	49020000 	stmdbmi	r2, {}	; <UNPREDICTABLE>
    ebac:	000000ce 	andeq	r0, r0, lr, asr #1
    ebb0:	1c860800 	stcne	8, cr0, [r6], {0}
    ebb4:	4a020000 	bmi	8ebbc <__ccfg+0x6ec14>
    ebb8:	000000ce 	andeq	r0, r0, lr, asr #1
    ebbc:	20d00804 	sbcscs	r0, r0, r4, lsl #16
    ebc0:	4b020000 	blmi	8ebc8 <__ccfg+0x6ec20>
    ebc4:	000000ce 	andeq	r0, r0, lr, asr #1
    ebc8:	222b0808 	eorcs	r0, fp, #8, 16	; 0x80000
    ebcc:	4c020000 	stcmi	0, cr0, [r2], {-0}
    ebd0:	000000ce 	andeq	r0, r0, lr, asr #1
    ebd4:	4403000c 	strmi	r0, [r3], #-12
    ebd8:	0200001b 	andeq	r0, r0, #27
    ebdc:	00081b4d 	andeq	r1, r8, sp, asr #22
    ebe0:	301e0f00 	andscc	r0, lr, r0, lsl #30
    ebe4:	3e020000 	cdpcc	0, 0, cr0, cr2, cr0, {0}
    ebe8:	80100301 	andshi	r0, r0, r1, lsl #6
    ebec:	0200002e 	andeq	r0, r0, #46	; 0x2e
    ebf0:	00ce0114 	sbceq	r0, lr, r4, lsl r1
    ebf4:	00000000 	andeq	r0, r0, r0
    ebf8:	00140000 	andseq	r0, r4, r0
    ebfc:	9c010000 	stcls	0, cr0, [r1], {-0}
    ec00:	00000890 	muleq	r0, r0, r8
    ec04:	002f3811 	eoreq	r3, pc, r1, lsl r8	; <UNPREDICTABLE>
    ec08:	ce6a0100 	powgte	f0, f2, f0
    ec0c:	01000000 	mrseq	r0, (UNDEF: 0)
    ec10:	06100050 			; <UNDEFINED> instruction: 0x06100050
    ec14:	02000030 	andeq	r0, r0, #48	; 0x30
    ec18:	00ce014c 	sbceq	r0, lr, ip, asr #2
    ec1c:	33640000 	cmncc	r4, #0
    ec20:	00280000 	eoreq	r0, r8, r0
    ec24:	9c010000 	stcls	0, cr0, [r1], {-0}
    ec28:	000008d8 	ldrdeq	r0, [r0], -r8
    ec2c:	704f7012 	subvc	r7, pc, r2, lsl r0	; <UNPREDICTABLE>
    ec30:	ce7a0100 	rpwgte	f0, f2, f0
    ec34:	3d000000 	stccc	0, cr0, [r0, #-0]
    ec38:	13000039 	movwne	r0, #57	; 0x39
    ec3c:	0000085f 	andeq	r0, r0, pc, asr r8
    ec40:	0000336c 	andeq	r3, r0, ip, ror #6
    ec44:	00000004 	andeq	r0, r0, r4
    ec48:	5f137e01 	svcpl	0x00137e01
    ec4c:	78000008 	stmdavc	r0, {r3}
    ec50:	06000033 			; <UNDEFINED> instruction: 0x06000033
    ec54:	01000000 	mrseq	r0, (UNDEF: 0)
    ec58:	08140083 	ldmdaeq	r4, {r0, r1, r7}
    ec5c:	0200002f 	andeq	r0, r0, #47	; 0x2f
    ec60:	338c0154 	orrcc	r0, ip, #84, 2
    ec64:	004c0000 	subeq	r0, ip, r0
    ec68:	9c010000 	stcls	0, cr0, [r1], {-0}
    ec6c:	00303515 	eorseq	r3, r0, r5, lsl r5
    ec70:	015c0200 	cmpeq	ip, r0, lsl #4
    ec74:	000033d8 	ldrdeq	r3, [r0], -r8
    ec78:	00000150 	andeq	r0, r0, r0, asr r1
    ec7c:	092a9c01 	stmdbeq	sl!, {r0, sl, fp, ip, pc}
    ec80:	2f160000 	svccs	0x00160000
    ec84:	0100002f 	tsteq	r0, pc, lsr #32
    ec88:	00026da4 	andeq	r6, r2, r4, lsr #27
    ec8c:	16500100 	ldrbne	r0, [r0], -r0, lsl #2
    ec90:	00002f85 	andeq	r2, r0, r5, lsl #31
    ec94:	092aa401 	stmdbeq	sl!, {r0, sl, sp, pc}
    ec98:	51010000 	mrspl	r0, (UNDEF: 1)
    ec9c:	00302d17 	eorseq	r2, r0, r7, lsl sp
    eca0:	94a60100 	strtls	r0, [r6], #256	; 0x100
    eca4:	5e000000 	cdppl	0, 0, cr0, cr0, cr0, {0}
    eca8:	00000039 	andeq	r0, r0, r9, lsr r0
    ecac:	08540406 	ldmdaeq	r4, {r1, r2, sl}^
    ecb0:	f7150000 			; <UNDEFINED> instruction: 0xf7150000
    ecb4:	0200002f 	andeq	r0, r0, #47	; 0x2f
    ecb8:	3528016c 	strcc	r0, [r8, #-364]!	; 0xfffffe94
    ecbc:	01180000 	tsteq	r8, r0
    ecc0:	9c010000 	stcls	0, cr0, [r1], {-0}
    ecc4:	000009ac 	andeq	r0, r0, ip, lsr #19
    ecc8:	002f2f18 	eoreq	r2, pc, r8, lsl pc	; <UNPREDICTABLE>
    eccc:	6df30100 	ldfvse	f0, [r3]
    ecd0:	7c000002 	stcvc	0, cr0, [r0], {2}
    ecd4:	17000039 	smladxne	r0, r9, r0, r0
    ecd8:	0000302d 	andeq	r3, r0, sp, lsr #32
    ecdc:	00c3f501 	sbceq	pc, r3, r1, lsl #10
    ece0:	399d0000 	ldmibcc	sp, {}	; <UNPREDICTABLE>
    ece4:	eb170000 	bl	5cecec <__ccfg+0x5aed44>
    ece8:	0100002f 	tsteq	r0, pc, lsr #32
    ecec:	0000cef6 	strdeq	ip, [r0], -r6
    ecf0:	0039ec00 	eorseq	lr, r9, r0, lsl #24
    ecf4:	2e9b1700 	cdpcs	7, 9, cr1, cr11, cr0, {0}
    ecf8:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
    ecfc:	00000324 	andeq	r0, r0, r4, lsr #6
    ed00:	00003a36 	andeq	r3, r0, r6, lsr sl
    ed04:	002eac19 	eoreq	sl, lr, r9, lsl ip
    ed08:	c3f80100 	mvnsgt	r0, #0, 2
    ed0c:	17000000 	strne	r0, [r0, -r0]
    ed10:	00002f8d 	andeq	r2, r0, sp, lsl #31
    ed14:	00cef901 	sbceq	pc, lr, r1, lsl #18
    ed18:	3a790000 	bcc	1e4ed20 <__ccfg+0x1e2ed78>
    ed1c:	20170000 	andscs	r0, r7, r0
    ed20:	0100002f 	tsteq	r0, pc, lsr #32
    ed24:	0000cefa 	strdeq	ip, [r0], -sl
    ed28:	003ad100 	eorseq	sp, sl, r0, lsl #2
    ed2c:	f5150000 			; <UNDEFINED> instruction: 0xf5150000
    ed30:	0200002e 	andeq	r0, r0, #46	; 0x2e
    ed34:	36400164 	strbcc	r0, [r0], -r4, ror #2
    ed38:	00200000 	eoreq	r0, r0, r0
    ed3c:	9c010000 	stcls	0, cr0, [r1], {-0}
    ed40:	000009d3 	ldrdeq	r0, [r0], -r3
    ed44:	002f851a 	eoreq	r8, pc, sl, lsl r5	; <UNPREDICTABLE>
    ed48:	01770100 	cmneq	r7, r0, lsl #2
    ed4c:	0000092a 	andeq	r0, r0, sl, lsr #18
    ed50:	00003b07 	andeq	r3, r0, r7, lsl #22
    ed54:	2f531500 	svccs	0x00531500
    ed58:	74020000 	strvc	r0, [r2], #-0
    ed5c:	00000001 	andeq	r0, r0, r1
    ed60:	00006000 	andeq	r6, r0, r0
    ed64:	379c0100 	ldrcc	r0, [ip, r0, lsl #2]
    ed68:	1b00000a 	blne	ed98 <__exidx_end+0x9cf0>
    ed6c:	00002209 	andeq	r2, r0, r9, lsl #4
    ed70:	ff018401 			; <UNDEFINED> instruction: 0xff018401
    ed74:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    ed78:	1b210003 	blne	84ed8c <__ccfg+0x82ede4>
    ed7c:	00001cc0 	andeq	r1, r0, r0, asr #25
    ed80:	24018501 	strcs	r8, [r1], #-1281	; 0xfffffaff
    ed84:	bc000003 	stclt	0, cr0, [r0], {3}
    ed88:	1c210003 	stcne	0, cr0, [r1], #-12
    ed8c:	89010069 	stmdbhi	r1, {r0, r3, r5, r6}
    ed90:	00009401 	andeq	r9, r0, r1, lsl #8
    ed94:	003b3500 	eorseq	r3, fp, r0, lsl #10
    ed98:	00001d00 	andeq	r1, r0, r0, lsl #26
    ed9c:	0a9c0000 	beq	fe70eda4 <_estack+0xde709da4>
    eda0:	011e0000 	tsteq	lr, r0
    eda4:	84080252 	strhi	r0, [r8], #-594	; 0xfffffdae
    eda8:	0251011e 	subseq	r0, r1, #-2147483641	; 0x80000007
    edac:	011eff08 	tsteq	lr, r8, lsl #30	; <UNPREDICTABLE>
    edb0:	380c0550 	stmdacc	ip, {r4, r6, r8, sl}
    edb4:	00210003 	eoreq	r0, r1, r3
    edb8:	2ebb1500 	cdpcs	5, 11, cr1, cr11, cr0, {0}
    edbc:	7c020000 	stcvc	0, cr0, [r2], {-0}
    edc0:	00366001 	eorseq	r6, r6, r1
    edc4:	00001c00 	andeq	r1, r0, r0, lsl #24
    edc8:	5c9c0100 	ldfpls	f0, [ip], {0}
    edcc:	1f00000a 	svcne	0x0000000a
    edd0:	00002fe3 	andeq	r2, r0, r3, ror #31
    edd4:	5c019601 	stcpl	6, cr9, [r1], {1}
    edd8:	0100000a 	tsteq	r0, sl
    eddc:	01020050 	qaddeq	r0, r0, r2
    ede0:	00124002 	andseq	r4, r2, r2
    ede4:	00b82000 	adcseq	r2, r8, r0
    ede8:	0a730000 	beq	1ccedf0 <__ccfg+0x1caee48>
    edec:	e4210000 	strt	r0, [r1], #-0
    edf0:	0b000000 	bleq	edf8 <__exidx_end+0x9d50>
    edf4:	2f402200 	svccs	0x00402200
    edf8:	52010000 	andpl	r0, r1, #0
    edfc:	00000a97 	muleq	r0, r7, sl
    ee00:	3d3bc318 	ldccc	3, cr12, [fp, #-96]!	; 0xffffffa0
    ee04:	713a5d3a 	teqvc	sl, sl, lsr sp
    ee08:	8f0aa13a 	svchi	0x000aa13a
    ee0c:	b33b0f3a 	teqlt	fp, #58, 30	; 0xe8
    ee10:	855e4909 	ldrbhi	r4, [lr, #-2313]	; 0xfffff6f7
    ee14:	853b2f0a 	ldrhi	r2, [fp, #-3850]!	; 0xfffff0f6
    ee18:	0a63233b 	beq	18d7b0c <__ccfg+0x18b7b64>
    ee1c:	b5240000 	strlt	r0, [r4, #-0]!
    ee20:	09000012 	stmdbeq	r0, {r1, r4}
    ee24:	0000eb19 	andeq	lr, r0, r9, lsl fp
    ee28:	00eb2500 	rsceq	r2, fp, r0, lsl #10
    ee2c:	94250000 	strtls	r0, [r5], #-0
    ee30:	25000000 	strcs	r0, [r0, #-0]
    ee34:	000000d9 	ldrdeq	r0, [r0], -r9
    ee38:	02070000 	andeq	r0, r7, #0
    ee3c:	00040000 	andeq	r0, r4, r0
    ee40:	000035dd 	ldrdeq	r3, [r0], -sp
    ee44:	25db0104 	ldrbcs	r0, [fp, #260]	; 0x104
    ee48:	05010000 	streq	r0, [r1, #-0]
    ee4c:	a2000031 	andge	r0, r0, #49	; 0x31
    ee50:	c8000026 	stmdagt	r0, {r1, r2, r5}
    ee54:	00000010 	andeq	r0, r0, r0, lsl r0
    ee58:	0b000000 	bleq	ee60 <__exidx_end+0x9db8>
    ee5c:	02000078 	andeq	r0, r0, #120	; 0x78
    ee60:	098a0601 	stmibeq	sl, {r0, r9, sl}
    ee64:	01020000 	mrseq	r0, (UNDEF: 2)
    ee68:	00098808 	andeq	r8, r9, r8, lsl #16
    ee6c:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    ee70:	00000844 	andeq	r0, r0, r4, asr #16
    ee74:	80070202 	andhi	r0, r7, r2, lsl #4
    ee78:	0200000a 	andeq	r0, r0, #10
    ee7c:	06370504 	ldrteq	r0, [r7], -r4, lsl #10
    ee80:	9f030000 	svcls	0x00030000
    ee84:	03000009 	movweq	r0, #9
    ee88:	00005341 	andeq	r5, r0, r1, asr #6
    ee8c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    ee90:	000003cf 	andeq	r0, r0, pc, asr #7
    ee94:	32050802 	andcc	r0, r5, #131072	; 0x20000
    ee98:	02000006 	andeq	r0, r0, #6
    ee9c:	03ca0708 	biceq	r0, sl, #8, 14	; 0x200000
    eea0:	04040000 	streq	r0, [r4], #-0
    eea4:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    eea8:	07040200 	streq	r0, [r4, -r0, lsl #4]
    eeac:	000003d4 	ldrdeq	r0, [r0], -r4
    eeb0:	0009a103 	andeq	sl, r9, r3, lsl #2
    eeb4:	48200400 	stmdami	r0!, {sl}
    eeb8:	05000000 	streq	r0, [r0, #-0]
    eebc:	00003162 	andeq	r3, r0, r2, ror #2
    eec0:	03033002 	movweq	r3, #12290	; 0x3002
    eec4:	0031cd06 	eorseq	ip, r1, r6, lsl #26
    eec8:	01fd0100 	mvnseq	r0, r0, lsl #2
    eecc:	00317505 	eorseq	r7, r1, r5, lsl #10
    eed0:	01820100 	orreq	r0, r2, r0, lsl #2
    eed4:	30500701 	subscc	r0, r0, r1, lsl #14
    eed8:	0d010000 	stceq	0, cr0, [r1, #-0]
    eedc:	00367c01 	eorseq	r7, r6, r1, lsl #24
    eee0:	0000d400 	andeq	sp, r0, r0, lsl #8
    eee4:	6d9c0100 	ldfvss	f0, [ip]
    eee8:	08000001 	stmdaeq	r0, {r0}
    eeec:	00003150 	andeq	r3, r0, r0, asr r1
    eef0:	76010d01 	strvc	r0, [r1], -r1, lsl #26
    eef4:	d9000000 	stmdble	r0, {}	; <UNPREDICTABLE>
    eef8:	0900003b 	stmdbeq	r0, {r0, r1, r3, r4, r5}
    eefc:	000031bc 			; <UNDEFINED> instruction: 0x000031bc
    ef00:	76010f01 	strvc	r0, [r1], -r1, lsl #30
    ef04:	05000000 	streq	r0, [r0, #-0]
    ef08:	0900003c 	stmdbeq	r0, {r2, r3, r4, r5}
    ef0c:	00003049 	andeq	r3, r0, r9, asr #32
    ef10:	76011001 	strvc	r1, [r1], -r1
    ef14:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    ef18:	0a00003c 	beq	f010 <__exidx_end+0x9f68>
    ef1c:	00000081 	andeq	r0, r0, r1, lsl #1
    ef20:	000036ae 	andeq	r3, r0, lr, lsr #13
    ef24:	00000006 	andeq	r0, r0, r6
    ef28:	0b013601 	bleq	5c734 <__ccfg+0x3c78c>
    ef2c:	000036d4 	ldrdeq	r3, [r0], -r4
    ef30:	0000002a 	andeq	r0, r0, sl, lsr #32
    ef34:	0000011f 	andeq	r0, r0, pc, lsl r1
    ef38:	00324209 	eorseq	r4, r2, r9, lsl #4
    ef3c:	01530100 	cmpeq	r3, r0, lsl #2
    ef40:	00000076 	andeq	r0, r0, r6, ror r0
    ef44:	00003c31 	andeq	r3, r0, r1, lsr ip
    ef48:	00319e09 	eorseq	r9, r1, r9, lsl #28
    ef4c:	01540100 	cmpeq	r4, r0, lsl #2
    ef50:	00000076 	andeq	r0, r0, r6, ror r0
    ef54:	00003c44 	andeq	r3, r0, r4, asr #24
    ef58:	36be0c00 	ldrtcc	r0, [lr], r0, lsl #24
    ef5c:	01c30000 	biceq	r0, r3, r0
    ef60:	01330000 	teqeq	r3, r0
    ef64:	010d0000 	mrseq	r0, (UNDEF: 13)
    ef68:	00740250 	rsbseq	r0, r4, r0, asr r2
    ef6c:	36c60c00 	strbcc	r0, [r6], r0, lsl #24
    ef70:	01d40000 	bicseq	r0, r4, r0
    ef74:	014d0000 	mrseq	r0, (UNDEF: 77)
    ef78:	010d0000 	mrseq	r0, (UNDEF: 13)
    ef7c:	00740251 	rsbseq	r0, r4, r1, asr r2
    ef80:	0250010d 	subseq	r0, r0, #1073741827	; 0x40000003
    ef84:	0c000075 	stceq	0, cr0, [r0], {117}	; 0x75
    ef88:	00003704 	andeq	r3, r0, r4, lsl #14
    ef8c:	000001ea 	andeq	r0, r0, sl, ror #3
    ef90:	00000161 	andeq	r0, r0, r1, ror #2
    ef94:	0250010d 	subseq	r0, r0, #1073741827	; 0x40000003
    ef98:	0e000074 	mcreq	0, 0, r0, cr0, cr4, {3}
    ef9c:	0000370e 	andeq	r3, r0, lr, lsl #14
    efa0:	0150010d 	cmpeq	r0, sp, lsl #2
    efa4:	0f000032 	svceq	0x00000032
    efa8:	00003188 	andeq	r3, r0, r8, lsl #3
    efac:	37505f07 	ldrbcc	r5, [r0, -r7, lsl #30]
    efb0:	00a40000 	adceq	r0, r4, r0
    efb4:	9c010000 	stcls	0, cr0, [r1], {-0}
    efb8:	000001c3 	andeq	r0, r0, r3, asr #3
    efbc:	00315010 	eorseq	r5, r1, r0, lsl r0
    efc0:	76720100 	ldrbtvc	r0, [r2], -r0, lsl #2
    efc4:	6f000000 	svcvs	0x00000000
    efc8:	1000003c 	andne	r0, r0, ip, lsr r0
    efcc:	000031a9 	andeq	r3, r0, r9, lsr #3
    efd0:	00767301 	rsbseq	r7, r6, r1, lsl #6
    efd4:	3c820000 	stccc	0, cr0, [r2], {0}
    efd8:	60110000 	andsvs	r0, r1, r0
    efdc:	fb000037 	blx	f0c2 <__exidx_end+0xa01a>
    efe0:	11000001 	tstne	r0, r1
    efe4:	00003774 	andeq	r3, r0, r4, ror r7
    efe8:	00000203 	andeq	r0, r0, r3, lsl #4
    efec:	00378412 	eorseq	r8, r7, r2, lsl r4
    eff0:	00009b00 	andeq	r9, r0, r0, lsl #22
    eff4:	50010d00 	andpl	r0, r1, r0, lsl #26
    eff8:	00007402 	andeq	r7, r0, r2, lsl #8
    effc:	30751300 	rsbscc	r1, r5, r0, lsl #6
    f000:	6c050000 	stcvs	0, cr0, [r5], {-0}
    f004:	000001d4 	ldrdeq	r0, [r0], -r4
    f008:	00007614 	andeq	r7, r0, r4, lsl r6
    f00c:	a5130000 	ldrge	r0, [r3, #-0]
    f010:	05000030 	streq	r0, [r0, #-48]	; 0xffffffd0
    f014:	0001ea73 	andeq	lr, r1, r3, ror sl
    f018:	00761400 	rsbseq	r1, r6, r0, lsl #8
    f01c:	76140000 	ldrvc	r0, [r4], -r0
    f020:	00000000 	andeq	r0, r0, r0
    f024:	0030d513 	eorseq	sp, r0, r3, lsl r5
    f028:	fb7a0500 	blx	1e90432 <__ccfg+0x1e7048a>
    f02c:	14000001 	strne	r0, [r0], #-1
    f030:	00000076 	andeq	r0, r0, r6, ror r0
    f034:	32051500 	andcc	r1, r5, #0, 10
    f038:	43060000 	movwmi	r0, #24576	; 0x6000
    f03c:	31221602 			; <UNDEFINED> instruction: 0x31221602
    f040:	fd050000 	stc2	0, cr0, [r5, #-0]
    f044:	000b1700 	andeq	r1, fp, r0, lsl #14
    f048:	1f000400 	svcne	0x00000400
    f04c:	04000037 	streq	r0, [r0], #-55	; 0xffffffc9
    f050:	0025db01 	eoreq	sp, r5, r1, lsl #22
    f054:	34850100 	strcc	r0, [r5], #256	; 0x100
    f058:	26a20000 	strtcs	r0, [r2], r0
    f05c:	11100000 	tstne	r0, r0
    f060:	00000000 	andeq	r0, r0, r0
    f064:	79f80000 	ldmibvc	r8!, {}^	; <UNPREDICTABLE>
    f068:	01020000 	mrseq	r0, (UNDEF: 2)
    f06c:	00098a06 	andeq	r8, r9, r6, lsl #20
    f070:	08010200 	stmdaeq	r1, {r9}
    f074:	00000988 	andeq	r0, r0, r8, lsl #19
    f078:	44050202 	strmi	r0, [r5], #-514	; 0xfffffdfe
    f07c:	02000008 	andeq	r0, r0, #8
    f080:	0a800702 	beq	fe010c90 <_estack+0xde00bc90>
    f084:	3b030000 	blcc	cf08c <__ccfg+0xaf0e4>
    f088:	04000027 	streq	r0, [r0], #-39	; 0xffffffd9
    f08c:	00004c3f 	andeq	r4, r0, pc, lsr ip
    f090:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    f094:	00000637 	andeq	r0, r0, r7, lsr r6
    f098:	00099f03 	andeq	r9, r9, r3, lsl #30
    f09c:	5e410400 	cdppl	4, 4, cr0, cr1, cr0, {0}
    f0a0:	02000000 	andeq	r0, r0, #0
    f0a4:	03cf0704 	biceq	r0, pc, #4, 14	; 0x100000
    f0a8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    f0ac:	00063205 	andeq	r3, r6, r5, lsl #4
    f0b0:	07080200 	streq	r0, [r8, -r0, lsl #4]
    f0b4:	000003ca 	andeq	r0, r0, sl, asr #7
    f0b8:	69050404 	stmdbvs	r5, {r2, sl}
    f0bc:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    f0c0:	03d40704 	bicseq	r0, r4, #4, 14	; 0x100000
    f0c4:	3d030000 	stccc	0, cr0, [r3, #-0]
    f0c8:	05000027 	streq	r0, [r0, #-39]	; 0xffffffd9
    f0cc:	0000411f 	andeq	r4, r0, pc, lsl r1
    f0d0:	09a10300 	stmibeq	r1!, {r8, r9}
    f0d4:	20050000 	andcs	r0, r5, r0
    f0d8:	00000053 	andeq	r0, r0, r3, asr r0
    f0dc:	00351805 	eorseq	r1, r5, r5, lsl #16
    f0e0:	81e90200 	mvnhi	r0, r0, lsl #4
    f0e4:	03000000 	movweq	r0, #0
    f0e8:	000000be 	strheq	r0, [r0], -lr
    f0ec:	00326806 	eorseq	r6, r2, r6, lsl #16
    f0f0:	8ce90200 	sfmhi	f0, 2, [r9]
    f0f4:	07000000 	streq	r0, [r0, -r0]
    f0f8:	00003571 	andeq	r3, r0, r1, ror r5
    f0fc:	0081ef02 	addeq	lr, r1, r2, lsl #30
    f100:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    f104:	0000329d 	muleq	r0, sp, r2
    f108:	008cab02 	addeq	sl, ip, r2, lsl #22
    f10c:	e7010000 	str	r0, [r1, -r0]
    f110:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    f114:	00003150 	andeq	r3, r0, r0, asr r1
    f118:	8c032901 			; <UNDEFINED> instruction: 0x8c032901
    f11c:	0a000000 	beq	f124 <__exidx_end+0xa07c>
    f120:	000035fa 	strdeq	r3, [r0], -sl
    f124:	8c032b01 			; <UNDEFINED> instruction: 0x8c032b01
    f128:	00000000 	andeq	r0, r0, r0
    f12c:	00355008 	eorseq	r5, r5, r8
    f130:	8c810200 	sfmhi	f0, 4, [r1], {0}
    f134:	01000000 	mrseq	r0, (UNDEF: 0)
    f138:	00000110 	andeq	r0, r0, r0, lsl r1
    f13c:	00315009 	eorseq	r5, r1, r9
    f140:	033c0100 	teqeq	ip, #0, 2
    f144:	0000008c 	andeq	r0, r0, ip, lsl #1
    f148:	0035c10a 	eorseq	ip, r5, sl, lsl #2
    f14c:	033e0100 	teqeq	lr, #0, 2
    f150:	0000008c 	andeq	r0, r0, ip, lsl #1
    f154:	33fe0800 	mvnscc	r0, #0, 16
    f158:	88020000 	stmdahi	r2, {}	; <UNPREDICTABLE>
    f15c:	0000008c 	andeq	r0, r0, ip, lsl #1
    f160:	00013901 	andeq	r3, r1, r1, lsl #18
    f164:	31500900 	cmpcc	r0, r0, lsl #18
    f168:	4f010000 	svcmi	0x00010000
    f16c:	00008c03 	andeq	r8, r0, r3, lsl #24
    f170:	35350a00 	ldrcc	r0, [r5, #-2560]!	; 0xfffff600
    f174:	51010000 	mrspl	r0, (UNDEF: 1)
    f178:	00008c03 	andeq	r8, r0, r3, lsl #24
    f17c:	62080000 	andvs	r0, r8, #0
    f180:	02000033 	andeq	r0, r0, #51	; 0x33
    f184:	00008cc8 	andeq	r8, r0, r8, asr #25
    f188:	016e0100 	cmneq	lr, r0, lsl #2
    f18c:	50090000 	andpl	r0, r9, r0
    f190:	01000031 	tsteq	r0, r1, lsr r0
    f194:	008c0362 	addeq	r0, ip, r2, ror #6
    f198:	f20a0000 	vhadd.s8	d0, d10, d0
    f19c:	01000032 	tsteq	r0, r2, lsr r0
    f1a0:	008c0364 	addeq	r0, ip, r4, ror #6
    f1a4:	330a0000 	movwcc	r0, #40960	; 0xa000
    f1a8:	01000034 	tsteq	r0, r4, lsr r0
    f1ac:	008c0365 	addeq	r0, ip, r5, ror #6
    f1b0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    f1b4:	00003465 	andeq	r3, r0, r5, ror #8
    f1b8:	008cb202 	addeq	fp, ip, r2, lsl #4
    f1bc:	a3010000 	movwge	r0, #4096	; 0x1000
    f1c0:	09000001 	stmdbeq	r0, {r0}
    f1c4:	00003150 	andeq	r3, r0, r0, asr r1
    f1c8:	8c039401 	cfstrshi	mvf9, [r3], {1}
    f1cc:	0a000000 	beq	f1d4 <__exidx_end+0xa12c>
    f1d0:	00003381 	andeq	r3, r0, r1, lsl #7
    f1d4:	8c039601 	stchi	6, cr9, [r3], {1}
    f1d8:	0a000000 	beq	f1e0 <__exidx_end+0xa138>
    f1dc:	00003433 	andeq	r3, r0, r3, lsr r4
    f1e0:	8c039701 	stchi	7, cr9, [r3], {1}
    f1e4:	00000000 	andeq	r0, r0, r0
    f1e8:	00333008 	eorseq	r3, r3, r8
    f1ec:	8cb90200 	lfmhi	f0, 4, [r9]
    f1f0:	01000000 	mrseq	r0, (UNDEF: 0)
    f1f4:	000001cc 	andeq	r0, r0, ip, asr #3
    f1f8:	00315009 	eorseq	r5, r1, r9
    f1fc:	03b40100 			; <UNDEFINED> instruction: 0x03b40100
    f200:	0000008c 	andeq	r0, r0, ip, lsl #1
    f204:	00343d0a 	eorseq	r3, r4, sl, lsl #26
    f208:	03b60100 			; <UNDEFINED> instruction: 0x03b60100
    f20c:	0000008c 	andeq	r0, r0, ip, lsl #1
    f210:	34db0800 	ldrbcc	r0, [fp], #2048	; 0x800
    f214:	df020000 	svcle	0x00020000
    f218:	0000008c 	andeq	r0, r0, ip, lsl #1
    f21c:	0001f501 	andeq	pc, r1, r1, lsl #10
    f220:	31500900 	cmpcc	r0, r0, lsl #18
    f224:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
    f228:	00008c03 	andeq	r8, r0, r3, lsl #24
    f22c:	361a0a00 	ldrcc	r0, [sl], -r0, lsl #20
    f230:	ca010000 	bgt	4f238 <__ccfg+0x2f290>
    f234:	00008c03 	andeq	r8, r0, r3, lsl #24
    f238:	9b080000 	blls	20f240 <__ccfg+0x1ef298>
    f23c:	02000035 	andeq	r0, r0, #53	; 0x35
    f240:	00008cd7 	ldrdeq	r8, [r0], -r7
    f244:	02120100 	andseq	r0, r2, #0, 2
    f248:	cd0a0000 	stcgt	0, cr0, [sl, #-0]
    f24c:	01000036 	tsteq	r0, r6, lsr r0
    f250:	008c0283 	addeq	r0, ip, r3, lsl #5
    f254:	0b000000 	bleq	f25c <__exidx_end+0xa1b4>
    f258:	00000ea9 	andeq	r0, r0, r9, lsr #29
    f25c:	0c03c403 	cfstrseq	mvf12, [r3], {3}
    f260:	000036aa 	andeq	r3, r0, sl, lsr #13
    f264:	f4010f02 			; <UNDEFINED> instruction: 0xf4010f02
    f268:	7c000037 	stcvc	0, cr0, [r0], {55}	; 0x37
    f26c:	01000000 	mrseq	r0, (UNDEF: 0)
    f270:	0002c49c 	muleq	r2, ip, r4
    f274:	31bc0d00 			; <UNDEFINED> instruction: 0x31bc0d00
    f278:	7f010000 	svcvc	0x00010000
    f27c:	0000008c 	andeq	r0, r0, ip, lsl #1
    f280:	00003c95 	muleq	r0, r5, ip
    f284:	0036c207 	eorseq	ip, r6, r7, lsl #4
    f288:	8c810100 	stfhis	f0, [r1], {0}
    f28c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    f290:	0000345a 	andeq	r3, r0, sl, asr r4
    f294:	00818201 	addeq	r8, r1, r1, lsl #4
    f298:	52010000 	andpl	r0, r1, #0
    f29c:	0032cd0f 	eorseq	ip, r2, pc, lsl #26
    f2a0:	81830100 	orrhi	r0, r3, r0, lsl #2
    f2a4:	b6000000 	strlt	r0, [r0], -r0
    f2a8:	0f00003c 	svceq	0x0000003c
    f2ac:	0000339b 	muleq	r0, fp, r3
    f2b0:	00818401 	addeq	r8, r1, r1, lsl #8
    f2b4:	3cc90000 	stclcc	0, cr0, [r9], {0}
    f2b8:	97100000 	ldrls	r0, [r0, -r0]
    f2bc:	02000000 	andeq	r0, r0, #0
    f2c0:	e0000038 	and	r0, r0, r8, lsr r0
    f2c4:	01000010 	tsteq	r0, r0, lsl r0
    f2c8:	00029b97 	muleq	r2, r7, fp
    f2cc:	00a71100 	adceq	r1, r7, r0, lsl #2
    f2d0:	e0120000 	ands	r0, r2, r0
    f2d4:	13000010 	movwne	r0, #16
    f2d8:	000000b2 	strheq	r0, [r0], -r2
    f2dc:	00005201 	andeq	r5, r0, r1, lsl #4
    f2e0:	00009714 	andeq	r9, r0, r4, lsl r7
    f2e4:	00380c00 	eorseq	r0, r8, r0, lsl #24
    f2e8:	00000600 	andeq	r0, r0, r0, lsl #12
    f2ec:	11980100 	orrsne	r0, r8, r0, lsl #2
    f2f0:	000000a7 	andeq	r0, r0, r7, lsr #1
    f2f4:	00380c15 	eorseq	r0, r8, r5, lsl ip
    f2f8:	00000600 	andeq	r0, r0, r0, lsl #12
    f2fc:	00b21600 	adcseq	r1, r2, r0, lsl #12
    f300:	3cf70000 	ldclcc	0, cr0, [r7]
    f304:	00000000 	andeq	r0, r0, r0
    f308:	30751700 	rsbscc	r1, r5, r0, lsl #14
    f30c:	6c020000 	stcvs	0, cr0, [r2], {-0}
    f310:	00003870 	andeq	r3, r0, r0, ror r8
    f314:	000000ac 	andeq	r0, r0, ip, lsr #1
    f318:	03439c01 	movteq	r9, #15361	; 0x3c01
    f31c:	bc0d0000 	stclt	0, cr0, [sp], {-0}
    f320:	01000031 	tsteq	r0, r1, lsr r0
    f324:	00008cbf 			; <UNDEFINED> instruction: 0x00008cbf
    f328:	003d0a00 	eorseq	r0, sp, r0, lsl #20
    f32c:	35dc0f00 	ldrbcc	r0, [ip, #3840]	; 0xf00
    f330:	c1010000 	mrsgt	r0, (UNDEF: 1)
    f334:	00000081 	andeq	r0, r0, r1, lsl #1
    f338:	00003d3e 	andeq	r3, r0, lr, lsr sp
    f33c:	0036f20f 	eorseq	pc, r6, pc, lsl #4
    f340:	81c20100 	bichi	r0, r2, r0, lsl #2
    f344:	67000000 	strvs	r0, [r0, -r0]
    f348:	1800003d 	stmdane	r0, {r0, r2, r3, r4, r5}
    f34c:	00000097 	muleq	r0, r7, r0
    f350:	000038a6 	andeq	r3, r0, r6, lsr #17
    f354:	00000006 	andeq	r0, r0, r6
    f358:	0332ee01 	teqeq	r2, #1, 28
    f35c:	a7110000 	ldrge	r0, [r1, -r0]
    f360:	15000000 	strne	r0, [r0, #-0]
    f364:	000038a6 	andeq	r3, r0, r6, lsr #17
    f368:	00000006 	andeq	r0, r0, r6
    f36c:	0000b216 	andeq	fp, r0, r6, lsl r2
    f370:	003d8e00 	eorseq	r8, sp, r0, lsl #28
    f374:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    f378:	00003894 	muleq	r0, r4, r8
    f37c:	0000021a 	andeq	r0, r0, sl, lsl r2
    f380:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    f384:	00000074 	andeq	r0, r0, r4, ror r0
    f388:	0032781b 	eorseq	r7, r2, fp, lsl r8
    f38c:	8ca40200 	sfmhi	f0, 4, [r4]
    f390:	1c000000 	stcne	0, cr0, [r0], {-0}
    f394:	5c000039 	stcpl	0, cr0, [r0], {57}	; 0x39
    f398:	01000000 	mrseq	r0, (UNDEF: 0)
    f39c:	0003bd9c 	muleq	r3, ip, sp
    f3a0:	31bc1c00 			; <UNDEFINED> instruction: 0x31bc1c00
    f3a4:	1f010000 	svcne	0x00010000
    f3a8:	00008c02 	andeq	r8, r0, r2, lsl #24
    f3ac:	003da100 	eorseq	sl, sp, r0, lsl #2
    f3b0:	358c1d00 	strcc	r1, [ip, #3328]	; 0xd00
    f3b4:	21010000 	mrscs	r0, (UNDEF: 1)
    f3b8:	00008c02 	andeq	r8, r0, r2, lsl #24
    f3bc:	003dc200 	eorseq	ip, sp, r0, lsl #4
    f3c0:	368e1d00 	strcc	r1, [lr], r0, lsl #26
    f3c4:	22010000 	andcs	r0, r1, #0
    f3c8:	00008c02 	andeq	r8, r0, r2, lsl #24
    f3cc:	003dd500 	eorseq	sp, sp, r0, lsl #10
    f3d0:	369c1d00 	ldrcc	r1, [ip], r0, lsl #26
    f3d4:	23010000 	movwcs	r0, #4096	; 0x1000
    f3d8:	00008c02 	andeq	r8, r0, r2, lsl #24
    f3dc:	003e2300 	eorseq	r2, lr, r0, lsl #6
    f3e0:	36db1d00 	ldrbcc	r1, [fp], r0, lsl #26
    f3e4:	24010000 	strcs	r0, [r1], #-0
    f3e8:	00008102 	andeq	r8, r0, r2, lsl #2
    f3ec:	003e8b00 	eorseq	r8, lr, r0, lsl #22
    f3f0:	36cd1d00 	strbcc	r1, [sp], r0, lsl #26
    f3f4:	25010000 	strcs	r0, [r1, #-0]
    f3f8:	00008c02 	andeq	r8, r0, r2, lsl #24
    f3fc:	003eaa00 	eorseq	sl, lr, r0, lsl #20
    f400:	b01b0000 	andslt	r0, fp, r0
    f404:	02000034 	andeq	r0, r0, #52	; 0x34
    f408:	00008cc1 	andeq	r8, r0, r1, asr #25
    f40c:	00397800 	eorseq	r7, r9, r0, lsl #16
    f410:	00001800 	andeq	r1, r0, r0, lsl #16
    f414:	e79c0100 	ldr	r0, [ip, r0, lsl #2]
    f418:	1d000003 	stcne	0, cr0, [r0, #-12]
    f41c:	000036cd 	andeq	r3, r0, sp, asr #13
    f420:	8c026701 	stchi	7, cr6, [r2], {1}
    f424:	cf000000 	svcgt	0x00000000
    f428:	0000003e 	andeq	r0, r0, lr, lsr r0
    f42c:	0001f51e 	andeq	pc, r1, lr, lsl r5	; <UNPREDICTABLE>
    f430:	00000000 	andeq	r0, r0, r0
    f434:	00001000 	andeq	r1, r0, r0
    f438:	049c0100 	ldreq	r0, [ip], #256	; 0x100
    f43c:	16000004 	strne	r0, [r0], -r4
    f440:	00000205 	andeq	r0, r0, r5, lsl #4
    f444:	00003ef6 	strdeq	r3, [r0], -r6
    f448:	33de1b00 	bicscc	r1, lr, #0, 22
    f44c:	9d020000 	stcls	0, cr0, [r2, #-0]
    f450:	0000008c 	andeq	r0, r0, ip, lsl #1
    f454:	00003990 	muleq	r0, r0, r9
    f458:	00000010 	andeq	r0, r0, r0, lsl r0
    f45c:	043e9c01 	ldrteq	r9, [lr], #-3073	; 0xfffff3ff
    f460:	cd1d0000 	ldcgt	0, cr0, [sp, #-0]
    f464:	01000036 	tsteq	r0, r6, lsr r0
    f468:	008c0297 	umulleq	r0, ip, r7, r2
    f46c:	3f0f0000 	svccc	0x000f0000
    f470:	8c1d0000 	ldchi	0, cr0, [sp], {-0}
    f474:	01000035 	tsteq	r0, r5, lsr r0
    f478:	008c0298 	umulleq	r0, ip, r8, r2
    f47c:	3f300000 	svccc	0x00300000
    f480:	1b000000 	blne	f488 <__exidx_end+0xa3e0>
    f484:	000033be 			; <UNDEFINED> instruction: 0x000033be
    f488:	008c9602 	addeq	r9, ip, r2, lsl #12
    f48c:	39a00000 	stmibcc	r0!, {}	; <UNPREDICTABLE>
    f490:	00140000 	andseq	r0, r4, r0
    f494:	9c010000 	stcls	0, cr0, [r1], {-0}
    f498:	00000478 	andeq	r0, r0, r8, ror r4
    f49c:	0036cd1d 	eorseq	ip, r6, sp, lsl sp
    f4a0:	02ba0100 	adcseq	r0, sl, #0, 2
    f4a4:	0000008c 	andeq	r0, r0, ip, lsl #1
    f4a8:	00003f43 	andeq	r3, r0, r3, asr #30
    f4ac:	00358c1d 	eorseq	r8, r5, sp, lsl ip
    f4b0:	02bb0100 	adcseq	r0, fp, #0, 2
    f4b4:	0000008c 	andeq	r0, r0, ip, lsl #1
    f4b8:	00003f64 	andeq	r3, r0, r4, ror #30
    f4bc:	366d1b00 	strbtcc	r1, [sp], -r0, lsl #22
    f4c0:	8f020000 	svchi	0x00020000
    f4c4:	0000008c 	andeq	r0, r0, ip, lsl #1
    f4c8:	000039b4 			; <UNDEFINED> instruction: 0x000039b4
    f4cc:	00000064 	andeq	r0, r0, r4, rrx
    f4d0:	04fe9c01 	ldrbteq	r9, [lr], #3073	; 0xc01
    f4d4:	501c0000 	andspl	r0, ip, r0
    f4d8:	01000031 	tsteq	r0, r1, lsr r0
    f4dc:	008c02db 	ldrdeq	r0, [ip], fp
    f4e0:	3f770000 	svccc	0x00770000
    f4e4:	cd1d0000 	ldcgt	0, cr0, [sp, #-0]
    f4e8:	01000036 	tsteq	r0, r6, lsr r0
    f4ec:	008c02dd 	ldrdeq	r0, [ip], sp
    f4f0:	3f980000 	svccc	0x00980000
    f4f4:	8c1d0000 	ldchi	0, cr0, [sp], {-0}
    f4f8:	01000035 	tsteq	r0, r5, lsr r0
    f4fc:	008c02de 	ldrdeq	r0, [ip], lr
    f500:	3fcc0000 	svccc	0x00cc0000
    f504:	e61d0000 	ldr	r0, [sp], -r0
    f508:	01000032 	tsteq	r0, r2, lsr r0
    f50c:	008c02df 	ldrdeq	r0, [ip], pc	; <UNPREDICTABLE>
    f510:	3fdf0000 	svccc	0x00df0000
    f514:	451d0000 	ldrmi	r0, [sp, #-0]
    f518:	01000036 	tsteq	r0, r6, lsr r0
    f51c:	008c02e0 	addeq	r0, ip, r0, ror #5
    f520:	400d0000 	andmi	r0, sp, r0
    f524:	820a0000 	andhi	r0, sl, #0
    f528:	01000035 	tsteq	r0, r5, lsr r0
    f52c:	008c02e1 	addeq	r0, ip, r1, ror #5
    f530:	561d0000 	ldrpl	r0, [sp], -r0
    f534:	01000033 	tsteq	r0, r3, lsr r0
    f538:	008102e2 	addeq	r0, r1, r2, ror #5
    f53c:	403b0000 	eorsmi	r0, fp, r0
    f540:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    f544:	000000be 	strheq	r0, [r0], -lr
    f548:	00003a18 	andeq	r3, r0, r8, lsl sl
    f54c:	00000014 	andeq	r0, r0, r4, lsl r0
    f550:	054a9c01 	strbeq	r9, [sl, #-3073]	; 0xfffff3ff
    f554:	ce1f0000 	cdpgt	0, 1, cr0, cr15, cr0, {0}
    f558:	b6000000 	strlt	r0, [r0], -r0
    f55c:	16000040 	strne	r0, [r0], -r0, asr #32
    f560:	000000da 	ldrdeq	r0, [r0], -sl
    f564:	000040d7 	ldrdeq	r4, [r0], -r7
    f568:	003a1a15 	eorseq	r1, sl, r5, lsl sl
    f56c:	00000a00 	andeq	r0, r0, r0, lsl #20
    f570:	00ce1f00 	sbceq	r1, lr, r0, lsl #30
    f574:	40f60000 	rscsmi	r0, r6, r0
    f578:	1a150000 	bne	54f580 <__ccfg+0x52f5d8>
    f57c:	0a00003a 	beq	f66c <__exidx_end+0xa5c4>
    f580:	16000000 	strne	r0, [r0], -r0
    f584:	000000da 	ldrdeq	r0, [r0], -sl
    f588:	00004117 	andeq	r4, r0, r7, lsl r1
    f58c:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    f590:	000000e7 	andeq	r0, r0, r7, ror #1
    f594:	00003a2c 	andeq	r3, r0, ip, lsr #20
    f598:	00000014 	andeq	r0, r0, r4, lsl r0
    f59c:	05969c01 	ldreq	r9, [r6, #3073]	; 0xc01
    f5a0:	f71f0000 			; <UNDEFINED> instruction: 0xf71f0000
    f5a4:	2a000000 	bcs	f5ac <__exidx_end+0xa504>
    f5a8:	16000041 	strne	r0, [r0], -r1, asr #32
    f5ac:	00000103 	andeq	r0, r0, r3, lsl #2
    f5b0:	0000414b 	andeq	r4, r0, fp, asr #2
    f5b4:	003a2e15 	eorseq	r2, sl, r5, lsl lr
    f5b8:	00000a00 	andeq	r0, r0, r0, lsl #20
    f5bc:	00f71f00 	rscseq	r1, r7, r0, lsl #30
    f5c0:	416a0000 	cmnmi	sl, r0
    f5c4:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
    f5c8:	0a00003a 	beq	f6b8 <__exidx_end+0xa610>
    f5cc:	16000000 	strne	r0, [r0], -r0
    f5d0:	00000103 	andeq	r0, r0, r3, lsl #2
    f5d4:	0000418b 	andeq	r4, r0, fp, lsl #3
    f5d8:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    f5dc:	00000110 	andeq	r0, r0, r0, lsl r1
    f5e0:	00003a40 	andeq	r3, r0, r0, asr #20
    f5e4:	00000014 	andeq	r0, r0, r4, lsl r0
    f5e8:	05e29c01 	strbeq	r9, [r2, #3073]!	; 0xc01
    f5ec:	201f0000 	andscs	r0, pc, r0
    f5f0:	9e000001 	cdpls	0, 0, cr0, cr0, cr1, {0}
    f5f4:	16000041 	strne	r0, [r0], -r1, asr #32
    f5f8:	0000012c 	andeq	r0, r0, ip, lsr #2
    f5fc:	000041bf 			; <UNDEFINED> instruction: 0x000041bf
    f600:	003a4215 	eorseq	r4, sl, r5, lsl r2
    f604:	00000a00 	andeq	r0, r0, r0, lsl #20
    f608:	01201f00 			; <UNDEFINED> instruction: 0x01201f00
    f60c:	41de0000 	bicsmi	r0, lr, r0
    f610:	42150000 	andsmi	r0, r5, #0
    f614:	0a00003a 	beq	f704 <__exidx_end+0xa65c>
    f618:	16000000 	strne	r0, [r0], -r0
    f61c:	0000012c 	andeq	r0, r0, ip, lsr #2
    f620:	000041ff 	strdeq	r4, [r0], -pc	; <UNPREDICTABLE>
    f624:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    f628:	00000139 	andeq	r0, r0, r9, lsr r1
    f62c:	00003a54 	andeq	r3, r0, r4, asr sl
    f630:	00000028 	andeq	r0, r0, r8, lsr #32
    f634:	063c9c01 	ldrteq	r9, [ip], -r1, lsl #24
    f638:	491f0000 	ldmdbmi	pc, {}	; <UNPREDICTABLE>
    f63c:	12000001 	andne	r0, r0, #1
    f640:	16000042 	strne	r0, [r0], -r2, asr #32
    f644:	00000155 	andeq	r0, r0, r5, asr r1
    f648:	00004233 	andeq	r4, r0, r3, lsr r2
    f64c:	00016120 	andeq	r6, r1, r0, lsr #2
    f650:	3a561500 	bcc	1594a58 <__ccfg+0x1574ab0>
    f654:	001c0000 	andseq	r0, ip, r0
    f658:	491f0000 	ldmdbmi	pc, {}	; <UNPREDICTABLE>
    f65c:	52000001 	andpl	r0, r0, #1
    f660:	15000042 	strne	r0, [r0, #-66]	; 0xffffffbe
    f664:	00003a56 	andeq	r3, r0, r6, asr sl
    f668:	0000001c 	andeq	r0, r0, ip, lsl r0
    f66c:	00015516 	andeq	r5, r1, r6, lsl r5
    f670:	00427300 	subeq	r7, r2, r0, lsl #6
    f674:	01611600 	cmneq	r1, r0, lsl #12
    f678:	42a00000 	adcmi	r0, r0, #0
    f67c:	00000000 	andeq	r0, r0, r0
    f680:	330b1b00 	movwcc	r1, #47872	; 0xbb00
    f684:	cf020000 	svcgt	0x00020000
    f688:	0000008c 	andeq	r0, r0, ip, lsl #1
    f68c:	00003a7c 	andeq	r3, r0, ip, ror sl
    f690:	00000010 	andeq	r0, r0, r0, lsl r0
    f694:	06669c01 	strbteq	r9, [r6], -r1, lsl #24
    f698:	a51d0000 	ldrge	r0, [sp, #-0]
    f69c:	01000033 	tsteq	r0, r3, lsr r0
    f6a0:	008c0384 	addeq	r0, ip, r4, lsl #7
    f6a4:	42b30000 	adcsmi	r0, r3, #0
    f6a8:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    f6ac:	0000016e 	andeq	r0, r0, lr, ror #2
    f6b0:	00003a8c 	andeq	r3, r0, ip, lsl #21
    f6b4:	0000002c 	andeq	r0, r0, ip, lsr #32
    f6b8:	06c09c01 	strbeq	r9, [r0], r1, lsl #24
    f6bc:	7e1f0000 	cdpvc	0, 1, cr0, cr15, cr0, {0}
    f6c0:	ce000001 	cdpgt	0, 0, cr0, cr0, cr1, {0}
    f6c4:	16000042 	strne	r0, [r0], -r2, asr #32
    f6c8:	0000018a 	andeq	r0, r0, sl, lsl #3
    f6cc:	000042ef 	andeq	r4, r0, pc, ror #5
    f6d0:	00019620 	andeq	r9, r1, r0, lsr #12
    f6d4:	3a8e1500 	bcc	fe394adc <_estack+0xde38fadc>
    f6d8:	001e0000 	andseq	r0, lr, r0
    f6dc:	7e1f0000 	cdpvc	0, 1, cr0, cr15, cr0, {0}
    f6e0:	12000001 	andne	r0, r0, #1
    f6e4:	15000043 	strne	r0, [r0, #-67]	; 0xffffffbd
    f6e8:	00003a8e 	andeq	r3, r0, lr, lsl #21
    f6ec:	0000001e 	andeq	r0, r0, lr, lsl r0
    f6f0:	00018a16 	andeq	r8, r1, r6, lsl sl
    f6f4:	00433300 	subeq	r3, r3, r0, lsl #6
    f6f8:	01961600 	orrseq	r1, r6, r0, lsl #12
    f6fc:	43600000 	cmnmi	r0, #0
    f700:	00000000 	andeq	r0, r0, r0
    f704:	01a31e00 			; <UNDEFINED> instruction: 0x01a31e00
    f708:	3ab80000 	bcc	fee0f710 <_estack+0xdee0a710>
    f70c:	00140000 	andseq	r0, r4, r0
    f710:	9c010000 	stcls	0, cr0, [r1], {-0}
    f714:	0000070c 	andeq	r0, r0, ip, lsl #14
    f718:	0001b31f 	andeq	fp, r1, pc, lsl r3
    f71c:	00437300 	subeq	r7, r3, r0, lsl #6
    f720:	01bf1600 			; <UNDEFINED> instruction: 0x01bf1600
    f724:	43940000 	orrsmi	r0, r4, #0
    f728:	ba150000 	blt	54f730 <__ccfg+0x52f788>
    f72c:	0a00003a 	beq	f81c <__exidx_end+0xa774>
    f730:	1f000000 	svcne	0x00000000
    f734:	000001b3 			; <UNDEFINED> instruction: 0x000001b3
    f738:	000043b3 			; <UNDEFINED> instruction: 0x000043b3
    f73c:	003aba15 	eorseq	fp, sl, r5, lsl sl
    f740:	00000a00 	andeq	r0, r0, r0, lsl #20
    f744:	01bf1600 			; <UNDEFINED> instruction: 0x01bf1600
    f748:	43d40000 	bicsmi	r0, r4, #0
    f74c:	00000000 	andeq	r0, r0, r0
    f750:	01cc1e00 	biceq	r1, ip, r0, lsl #28
    f754:	3acc0000 	bcc	ff30f75c <_estack+0xdf30a75c>
    f758:	00140000 	andseq	r0, r4, r0
    f75c:	9c010000 	stcls	0, cr0, [r1], {-0}
    f760:	00000758 	andeq	r0, r0, r8, asr r7
    f764:	0001dc1f 	andeq	sp, r1, pc, lsl ip
    f768:	0043e700 	subeq	lr, r3, r0, lsl #14
    f76c:	01e81600 	mvneq	r1, r0, lsl #12
    f770:	44080000 	strmi	r0, [r8], #-0
    f774:	ce150000 	cdpgt	0, 1, cr0, cr5, cr0, {0}
    f778:	0a00003a 	beq	f868 <__exidx_end+0xa7c0>
    f77c:	1f000000 	svcne	0x00000000
    f780:	000001dc 	ldrdeq	r0, [r0], -ip
    f784:	00004427 	andeq	r4, r0, r7, lsr #8
    f788:	003ace15 	eorseq	ip, sl, r5, lsl lr
    f78c:	00000a00 	andeq	r0, r0, r0, lsl #20
    f790:	01e81600 	mvneq	r1, r0, lsl #12
    f794:	44480000 	strbmi	r0, [r8], #-0
    f798:	00000000 	andeq	r0, r0, r0
    f79c:	30a51700 	adccc	r1, r5, r0, lsl #14
    f7a0:	73020000 	movwvc	r0, #8192	; 0x2000
    f7a4:	00003ae0 	andeq	r3, r0, r0, ror #21
    f7a8:	00000110 	andeq	r0, r0, r0, lsl r1
    f7ac:	09639c01 	stmdbeq	r3!, {r0, sl, fp, ip, pc}^
    f7b0:	501c0000 	andspl	r0, ip, r0
    f7b4:	01000031 	tsteq	r0, r1, lsr r0
    f7b8:	008c0127 	addeq	r0, ip, r7, lsr #2
    f7bc:	445b0000 	ldrbmi	r0, [fp], #-0
    f7c0:	bc1c0000 	ldclt	0, cr0, [ip], {-0}
    f7c4:	01000031 	tsteq	r0, r1, lsr r0
    f7c8:	008c0127 	addeq	r0, ip, r7, lsr #2
    f7cc:	44870000 	strmi	r0, [r7], #0
    f7d0:	0f1d0000 	svceq	0x001d0000
    f7d4:	01000035 	tsteq	r0, r5, lsr r0
    f7d8:	008c0129 	addeq	r0, ip, r9, lsr #2
    f7dc:	44a80000 	strtmi	r0, [r8], #0
    f7e0:	f5210000 			; <UNDEFINED> instruction: 0xf5210000
    f7e4:	10000001 	andne	r0, r0, r1
    f7e8:	f800003b 			; <UNDEFINED> instruction: 0xf800003b
    f7ec:	01000010 	tsteq	r0, r0, lsl r0
    f7f0:	07c10140 	strbeq	r0, [r1, r0, asr #2]
    f7f4:	f8120000 			; <UNDEFINED> instruction: 0xf8120000
    f7f8:	16000010 			; <UNDEFINED> instruction: 0x16000010
    f7fc:	00000205 	andeq	r0, r0, r5, lsl #4
    f800:	00004576 	andeq	r4, r0, r6, ror r5
    f804:	ea220000 	b	88f80c <__ccfg+0x86f864>
    f808:	4300003a 	movwmi	r0, #58	; 0x3a
    f80c:	d6000003 	strle	r0, [r0], -r3
    f810:	1a000007 	bne	f834 <__exidx_end+0xa78c>
    f814:	f3035001 	vhadd.u8	d5, d3, d1
    f818:	22005101 	andcs	r5, r0, #1073741824	; 0x40000000
    f81c:	00003af6 	strdeq	r3, [r0], -r6
    f820:	00000ad6 	ldrdeq	r0, [r0], -r6
    f824:	000007ef 	andeq	r0, r0, pc, ror #15
    f828:	0151011a 	cmpeq	r1, sl, lsl r1
    f82c:	50011a48 	andpl	r1, r1, r8, asr #20
    f830:	00007402 	andeq	r7, r0, r2, lsl #8
    f834:	003afa23 	eorseq	pc, sl, r3, lsr #20
    f838:	0003bd00 	andeq	fp, r3, r0, lsl #26
    f83c:	3b102400 	blcc	418844 <__ccfg+0x3f889c>
    f840:	76020000 	strvc	r0, [r2], -r0
    f844:	00081d00 	andeq	r1, r8, r0, lsl #26
    f848:	53011a00 	movwpl	r1, #6656	; 0x1a00
    f84c:	011a3001 	tsteq	sl, r1
    f850:	ff0a0352 			; <UNDEFINED> instruction: 0xff0a0352
    f854:	51011a03 	tstpl	r1, r3, lsl #20
    f858:	1a2c0802 	bne	b11868 <__ccfg+0xaf18c0>
    f85c:	74025001 	strvc	r5, [r2], #-1
    f860:	20220000 	eorcs	r0, r2, r0
    f864:	d600003b 			; <UNDEFINED> instruction: 0xd600003b
    f868:	3600000a 	strcc	r0, [r0], -sl
    f86c:	1a000008 	bne	f894 <__exidx_end+0xa7ec>
    f870:	4c015101 	stfmis	f5, [r1], {1}
    f874:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    f878:	23000074 	movwcs	r0, #116	; 0x74
    f87c:	00003b24 	andeq	r3, r0, r4, lsr #22
    f880:	00000404 	andeq	r0, r0, r4, lsl #8
    f884:	003b2e22 	eorseq	r2, fp, r2, lsr #28
    f888:	000ad600 	andeq	sp, sl, r0, lsl #12
    f88c:	00085800 	andeq	r5, r8, r0, lsl #16
    f890:	51011a00 	tstpl	r1, r0, lsl #20
    f894:	011a4401 	tsteq	sl, r1, lsl #8
    f898:	00740250 	rsbseq	r0, r4, r0, asr r2
    f89c:	3b322300 	blcc	c984a4 <__ccfg+0xc784fc>
    f8a0:	043e0000 	ldrteq	r0, [lr], #-0
    f8a4:	3c220000 	stccc	0, cr0, [r2], #-0
    f8a8:	d600003b 			; <UNDEFINED> instruction: 0xd600003b
    f8ac:	7a00000a 	bvc	f8dc <__exidx_end+0xa834>
    f8b0:	1a000008 	bne	f8d8 <__exidx_end+0xa830>
    f8b4:	40015101 	andmi	r5, r1, r1, lsl #2
    f8b8:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    f8bc:	22000074 	andcs	r0, r0, #116	; 0x74
    f8c0:	00003b42 	andeq	r3, r0, r2, asr #22
    f8c4:	00000478 	andeq	r0, r0, r8, ror r4
    f8c8:	0000088e 	andeq	r0, r0, lr, lsl #17
    f8cc:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    f8d0:	22000075 	andcs	r0, r0, #117	; 0x75
    f8d4:	00003b4c 	andeq	r3, r0, ip, asr #22
    f8d8:	00000ad6 	ldrdeq	r0, [r0], -r6
    f8dc:	000008a7 	andeq	r0, r0, r7, lsr #17
    f8e0:	0151011a 	cmpeq	r1, sl, lsl r1
    f8e4:	50011a3c 	andpl	r1, r1, ip, lsr sl
    f8e8:	00007402 	andeq	r7, r0, r2, lsl #8
    f8ec:	003b5222 	eorseq	r5, fp, r2, lsr #4
    f8f0:	0000e700 	andeq	lr, r0, r0, lsl #14
    f8f4:	0008bb00 	andeq	fp, r8, r0, lsl #22
    f8f8:	50011a00 	andpl	r1, r1, r0, lsl #20
    f8fc:	00007502 	andeq	r7, r0, r2, lsl #10
    f900:	003b6422 	eorseq	r6, fp, r2, lsr #8
    f904:	00011000 	andeq	r1, r1, r0
    f908:	0008cf00 	andeq	ip, r8, r0, lsl #30
    f90c:	50011a00 	andpl	r1, r1, r0, lsl #20
    f910:	00007502 	andeq	r7, r0, r2, lsl #10
    f914:	003b7222 	eorseq	r7, fp, r2, lsr #4
    f918:	00013900 	andeq	r3, r1, r0, lsl #18
    f91c:	0008e300 	andeq	lr, r8, r0, lsl #6
    f920:	50011a00 	andpl	r1, r1, r0, lsl #20
    f924:	00007502 	andeq	r7, r0, r2, lsl #10
    f928:	003b7c22 	eorseq	r7, fp, r2, lsr #24
    f92c:	000ad600 	andeq	sp, sl, r0, lsl #12
    f930:	0008fd00 	andeq	pc, r8, r0, lsl #26
    f934:	51011a00 	tstpl	r1, r0, lsl #20
    f938:	1a280802 	bne	a11948 <__ccfg+0x9f19a0>
    f93c:	74025001 	strvc	r5, [r2], #-1
    f940:	82220000 	eorhi	r0, r2, #0
    f944:	be00003b 	mcrlt	0, 0, r0, cr0, cr11, {1}
    f948:	11000000 	mrsne	r0, (UNDEF: 0)
    f94c:	1a000009 	bne	f978 <__exidx_end+0xa8d0>
    f950:	75025001 	strvc	r5, [r2, #-1]
    f954:	94220000 	strtls	r0, [r2], #-0
    f958:	a300003b 	movwge	r0, #59	; 0x3b
    f95c:	25000001 	strcs	r0, [r0, #-1]
    f960:	1a000009 	bne	f98c <__exidx_end+0xa8e4>
    f964:	75025001 	strvc	r5, [r2, #-1]
    f968:	a6220000 	strtge	r0, [r2], -r0
    f96c:	cc00003b 	stcgt	0, cr0, [r0], {59}	; 0x3b
    f970:	39000001 	stmdbcc	r0, {r0}
    f974:	1a000009 	bne	f9a0 <__exidx_end+0xa8f8>
    f978:	75025001 	strvc	r5, [r2, #-1]
    f97c:	ba220000 	blt	88f984 <__ccfg+0x86f9dc>
    f980:	6e00003b 	mcrvs	0, 0, r0, cr0, cr11, {1}
    f984:	4d000001 	stcmi	0, cr0, [r0, #-4]
    f988:	1a000009 	bne	f9b4 <__exidx_end+0xa90c>
    f98c:	75025001 	strvc	r5, [r2, #-1]
    f990:	c4190000 	ldrgt	r0, [r9], #-0
    f994:	d600003b 			; <UNDEFINED> instruction: 0xd600003b
    f998:	1a00000a 	bne	f9c8 <__exidx_end+0xa920>
    f99c:	38015101 	stmdacc	r1, {r0, r8, ip, lr}
    f9a0:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    f9a4:	00000074 	andeq	r0, r0, r4, ror r0
    f9a8:	00312217 	eorseq	r2, r1, r7, lsl r2
    f9ac:	f0fd0200 			; <UNDEFINED> instruction: 0xf0fd0200
    f9b0:	6400003b 	strvs	r0, [r0], #-59	; 0xffffffc5
    f9b4:	01000000 	mrseq	r0, (UNDEF: 0)
    f9b8:	0009899c 	muleq	r9, ip, r9
    f9bc:	32d91d00 	sbcscc	r1, r9, #0, 26
    f9c0:	eb010000 	bl	4f9c8 <__ccfg+0x2fa20>
    f9c4:	00008c03 	andeq	r8, r0, r3, lsl #24
    f9c8:	00458f00 	subeq	r8, r5, r0, lsl #30
    f9cc:	4f0c0000 	svcmi	0x000c0000
    f9d0:	02000036 	andeq	r0, r0, #54	; 0x36
    f9d4:	3c540106 	ldfcce	f0, [r4], {6}
    f9d8:	00280000 	eoreq	r0, r8, r0
    f9dc:	9c010000 	stcls	0, cr0, [r1], {-0}
    f9e0:	000009b0 			; <UNDEFINED> instruction: 0x000009b0
    f9e4:	0034a61c 	eorseq	sl, r4, ip, lsl r6
    f9e8:	04130100 	ldreq	r0, [r3], #-256	; 0xffffff00
    f9ec:	0000008c 	andeq	r0, r0, ip, lsl #1
    f9f0:	000045aa 	andeq	r4, r0, sl, lsr #11
    f9f4:	30d51700 	sbcscc	r1, r5, r0, lsl #14
    f9f8:	7a020000 	bvc	8fa00 <__ccfg+0x6fa58>
    f9fc:	00003c7c 	andeq	r3, r0, ip, ror ip
    fa00:	00000150 	andeq	r0, r0, r0, asr r1
    fa04:	0ad69c01 	beq	ff5b6a10 <_estack+0xdf5b1a10>
    fa08:	bc1c0000 	ldclt	0, cr0, [ip], {-0}
    fa0c:	01000031 	tsteq	r0, r1, lsr r0
    fa10:	008c019b 	umulleq	r0, ip, fp, r1
    fa14:	45cb0000 	strbmi	r0, [fp]
    fa18:	ed1d0000 	ldc	0, cr0, [sp, #-0]
    fa1c:	01000035 	tsteq	r0, r5, lsr r0
    fa20:	008c019d 	umulleq	r0, ip, sp, r1
    fa24:	46260000 	strtmi	r0, [r6], -r0
    fa28:	0f1d0000 	svceq	0x001d0000
    fa2c:	01000035 	tsteq	r0, r5, lsr r0
    fa30:	008c019e 	umulleq	r0, ip, lr, r1
    fa34:	46390000 	ldrtmi	r0, [r9], -r0
    fa38:	591d0000 	ldmdbpl	sp, {}	; <UNPREDICTABLE>
    fa3c:	01000032 	tsteq	r0, r2, lsr r0
    fa40:	008c019f 	umulleq	r0, ip, pc, r1	; <UNPREDICTABLE>
    fa44:	464c0000 	strbmi	r0, [ip], -r0
    fa48:	4c1d0000 	ldcmi	0, cr0, [sp], {-0}
    fa4c:	01000032 	tsteq	r0, r2, lsr r0
    fa50:	008c01a0 	addeq	r0, ip, r0, lsr #3
    fa54:	466a0000 	strbtmi	r0, [sl], -r0
    fa58:	12250000 	eorne	r0, r5, #0
    fa5c:	8e000002 	cdphi	0, 0, cr0, cr0, cr2, {0}
    fa60:	3e00003d 	mcrcc	0, 0, r0, cr0, cr13, {1}
    fa64:	01000000 	mrseq	r0, (UNDEF: 0)
    fa68:	06230216 			; <UNDEFINED> instruction: 0x06230216
    fa6c:	3c00003d 	stccc	0, cr0, [r0], {61}	; 0x3d
    fa70:	22000006 	andcs	r0, r0, #6
    fa74:	00003d28 	andeq	r3, r0, r8, lsr #26
    fa78:	00000af2 	strdeq	r0, [r0], -r2
    fa7c:	00000a46 	andeq	r0, r0, r6, asr #20
    fa80:	0151011a 	cmpeq	r1, sl, lsl r1
    fa84:	50011a31 	andpl	r1, r1, r1, lsr sl
    fa88:	22003401 	andcs	r3, r0, #16777216	; 0x1000000
    fa8c:	00003d2e 	andeq	r3, r0, lr, lsr #26
    fa90:	00000989 	andeq	r0, r0, r9, lsl #19
    fa94:	00000a5d 	andeq	r0, r0, sp, asr sl
    fa98:	0550011a 	ldrbeq	r0, [r0, #-282]	; 0xfffffee6
    fa9c:	8637bd0c 	ldrthi	fp, [r7], -ip, lsl #26
    faa0:	34230000 	strtcc	r0, [r3], #-0
    faa4:	0800003d 	stmdaeq	r0, {r0, r2, r3, r4, r5}
    faa8:	2200000b 	andcs	r0, r0, #11
    faac:	00003d3e 	andeq	r3, r0, lr, lsr sp
    fab0:	00000af2 	strdeq	r0, [r0], -r2
    fab4:	00000a7f 	andeq	r0, r0, pc, ror sl
    fab8:	0251011a 	subseq	r0, r1, #-2147483642	; 0x80000006
    fabc:	011a0074 	tsteq	sl, r4, ror r0
    fac0:	00340150 	eorseq	r0, r4, r0, asr r1
    fac4:	003d4422 	eorseq	r4, sp, r2, lsr #8
    fac8:	000b0800 	andeq	r0, fp, r0, lsl #16
    facc:	000a9200 	andeq	r9, sl, r0, lsl #4
    fad0:	50011a00 	andpl	r1, r1, r0, lsl #20
    fad4:	22003401 	andcs	r3, r0, #16777216	; 0x1000000
    fad8:	00003d54 	andeq	r3, r0, r4, asr sp
    fadc:	00000989 	andeq	r0, r0, r9, lsl #19
    fae0:	00000aac 	andeq	r0, r0, ip, lsr #21
    fae4:	0850011a 	ldmdaeq	r0, {r1, r3, r4, r8}^
    fae8:	ff0c0074 			; <UNDEFINED> instruction: 0xff0c0074
    faec:	1a00ffff 	bne	4faf0 <__ccfg+0x2fb48>
    faf0:	3d642600 	stclcc	6, cr2, [r4, #-0]
    faf4:	0acc0000 	beq	ff30fafc <_estack+0xdf30aafc>
    faf8:	011a0000 	tsteq	sl, r0
    fafc:	000c0552 	andeq	r0, ip, r2, asr r5
    fb00:	1a600060 	bne	180fc88 <__ccfg+0x17efce0>
    fb04:	37015101 	strcc	r5, [r1, -r1, lsl #2]
    fb08:	0450011a 	ldrbeq	r0, [r0], #-282	; 0xfffffee6
    fb0c:	25480074 	strbcs	r0, [r8, #-116]	; 0xffffff8c
    fb10:	3d7a2300 	ldclcc	3, cr2, [sl, #-0]
    fb14:	0af20000 	beq	ffc8fb1c <_estack+0xdfc8ab1c>
    fb18:	27000000 	strcs	r0, [r0, -r0]
    fb1c:	0000341f 	andeq	r3, r0, pc, lsl r4
    fb20:	f201ca06 	vpmax.s8	d12, d1, d6
    fb24:	2800000a 	stmdacs	r0, {r1, r3}
    fb28:	0000008c 	andeq	r0, r0, ip, lsl #1
    fb2c:	00008c28 	andeq	r8, r0, r8, lsr #24
    fb30:	008c2800 	addeq	r2, ip, r0, lsl #16
    fb34:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    fb38:	000028b9 			; <UNDEFINED> instruction: 0x000028b9
    fb3c:	0b08f907 	bleq	24df60 <__ccfg+0x22dfb8>
    fb40:	8c280000 	stchi	0, cr0, [r8], #-0
    fb44:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    fb48:	0000008c 	andeq	r0, r0, ip, lsl #1
    fb4c:	28f22a00 	ldmcs	r2!, {r9, fp, sp}^
    fb50:	10070000 	andne	r0, r7, r0
    fb54:	00008c01 	andeq	r8, r0, r1, lsl #24
    fb58:	008c2800 	addeq	r2, ip, r0, lsl #16
    fb5c:	00000000 	andeq	r0, r0, r0
    fb60:	00000923 	andeq	r0, r0, r3, lsr #18
    fb64:	39800004 	stmibcc	r0, {r2}
    fb68:	01040000 	mrseq	r0, (UNDEF: 4)
    fb6c:	000025db 	ldrdeq	r2, [r0], -fp
    fb70:	00379601 	eorseq	r9, r7, r1, lsl #12
    fb74:	0026a200 	eoreq	sl, r6, r0, lsl #4
    fb78:	0011e800 	andseq	lr, r1, r0, lsl #16
    fb7c:	00000000 	andeq	r0, r0, r0
    fb80:	007e5300 	rsbseq	r5, lr, r0, lsl #6
    fb84:	27450200 	strbcs	r0, [r5, -r0, lsl #4]
    fb88:	1b060000 	blne	18fb90 <__ccfg+0x16fbe8>
    fb8c:	00000030 	andeq	r0, r0, r0, lsr r0
    fb90:	8a060103 	bhi	18ffa4 <__ccfg+0x16fffc>
    fb94:	02000009 	andeq	r0, r0, #9
    fb98:	000008df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    fb9c:	00421d06 	subeq	r1, r2, r6, lsl #26
    fba0:	01030000 	mrseq	r0, (UNDEF: 3)
    fba4:	00098808 	andeq	r8, r9, r8, lsl #16
    fba8:	05020300 	streq	r0, [r2, #-768]	; 0xfffffd00
    fbac:	00000844 	andeq	r0, r0, r4, asr #16
    fbb0:	00040802 	andeq	r0, r4, r2, lsl #16
    fbb4:	5b2b0600 	blpl	ad13bc <__ccfg+0xab1414>
    fbb8:	03000000 	movweq	r0, #0
    fbbc:	0a800702 	beq	fe0117cc <_estack+0xde00c7cc>
    fbc0:	3b020000 	blcc	8fbc8 <__ccfg+0x6fc20>
    fbc4:	06000027 	streq	r0, [r0], -r7, lsr #32
    fbc8:	00006d3f 	andeq	r6, r0, pc, lsr sp
    fbcc:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
    fbd0:	00000637 	andeq	r0, r0, r7, lsr r6
    fbd4:	00099f02 	andeq	r9, r9, r2, lsl #30
    fbd8:	7f410600 	svcvc	0x00410600
    fbdc:	03000000 	movweq	r0, #0
    fbe0:	03cf0704 	biceq	r0, pc, #4, 14	; 0x100000
    fbe4:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    fbe8:	00063205 	andeq	r3, r6, r5, lsl #4
    fbec:	07080300 	streq	r0, [r8, -r0, lsl #6]
    fbf0:	000003ca 	andeq	r0, r0, sl, asr #7
    fbf4:	69050404 	stmdbvs	r5, {r2, sl}
    fbf8:	0300746e 	movweq	r7, #1134	; 0x46e
    fbfc:	03d40704 	bicseq	r0, r4, #4, 14	; 0x100000
    fc00:	47020000 	strmi	r0, [r2, -r0]
    fc04:	07000027 	streq	r0, [r0, -r7, lsr #32]
    fc08:	00002513 	andeq	r2, r0, r3, lsl r5
    fc0c:	08e10200 	stmiaeq	r1!, {r9}^
    fc10:	14070000 	strne	r0, [r7], #-0
    fc14:	00000037 	andeq	r0, r0, r7, lsr r0
    fc18:	00040a02 	andeq	r0, r4, r2, lsl #20
    fc1c:	501a0700 	andspl	r0, sl, r0, lsl #14
    fc20:	02000000 	andeq	r0, r0, #0
    fc24:	0000273d 	andeq	r2, r0, sp, lsr r7
    fc28:	00621f07 	rsbeq	r1, r2, r7, lsl #30
    fc2c:	a1020000 	mrsge	r0, (UNDEF: 2)
    fc30:	07000009 	streq	r0, [r0, -r9]
    fc34:	00007420 	andeq	r7, r0, r0, lsr #8
    fc38:	25840200 	strcs	r0, [r4, #512]	; 0x200
    fc3c:	33080000 	movwcc	r0, #32768	; 0x8000
    fc40:	000000e4 	andeq	r0, r0, r4, ror #1
    fc44:	00ea0405 	rsceq	r0, sl, r5, lsl #8
    fc48:	05060000 	streq	r0, [r6, #-0]
    fc4c:	0000f104 	andeq	pc, r0, r4, lsl #2
    fc50:	00fc0700 	rscseq	r0, ip, r0, lsl #14
    fc54:	ad080000 	stcge	0, cr0, [r8, #-0]
    fc58:	00000000 	andeq	r0, r0, r0
    fc5c:	002ca502 	eoreq	sl, ip, r2, lsl #10
    fc60:	07420900 	strbeq	r0, [r2, -r0, lsl #18]
    fc64:	05000001 	streq	r0, [r0, #-1]
    fc68:	00010d04 	andeq	r0, r1, r4, lsl #26
    fc6c:	00ce0900 	sbceq	r0, lr, r0, lsl #18
    fc70:	01260000 			; <UNDEFINED> instruction: 0x01260000
    fc74:	26080000 	strcs	r0, [r8], -r0
    fc78:	08000001 	stmdaeq	r0, {r0}
    fc7c:	000000ce 	andeq	r0, r0, lr, asr #1
    fc80:	0000ce08 	andeq	ip, r0, r8, lsl #28
    fc84:	04050000 	streq	r0, [r5], #-0
    fc88:	000000ad 	andeq	r0, r0, sp, lsr #1
    fc8c:	002e0d02 	eoreq	r0, lr, r2, lsl #26
    fc90:	37460900 	strbcc	r0, [r6, -r0, lsl #18]
    fc94:	05000001 	streq	r0, [r0, #-1]
    fc98:	00013d04 	andeq	r3, r1, r4, lsl #26
    fc9c:	00ce0a00 	sbceq	r0, lr, r0, lsl #20
    fca0:	56020000 	strpl	r0, [r2], -r0
    fca4:	0900002e 	stmdbeq	r0, {r1, r2, r3, r5}
    fca8:	00013748 	andeq	r3, r1, r8, asr #14
    fcac:	2b3d0200 	blcs	f504b4 <__ccfg+0xf3050c>
    fcb0:	4a090000 	bmi	24fcb8 <__ccfg+0x22fd10>
    fcb4:	00000158 	andeq	r0, r0, r8, asr r1
    fcb8:	015e0405 	cmpeq	lr, r5, lsl #8
    fcbc:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
    fcc0:	6d000000 	stcvs	0, cr0, [r0, #-0]
    fcc4:	08000001 	stmdaeq	r0, {r0}
    fcc8:	000000ce 	andeq	r0, r0, lr, asr #1
    fccc:	2a4c0200 	bcs	13104d4 <__ccfg+0x12f052c>
    fcd0:	4c090000 	stcmi	0, cr0, [r9], {-0}
    fcd4:	00000137 	andeq	r0, r0, r7, lsr r1
    fcd8:	0029ac02 	eoreq	sl, r9, r2, lsl #24
    fcdc:	074e0900 	strbeq	r0, [lr, -r0, lsl #18]
    fce0:	02000001 	andeq	r0, r0, #1
    fce4:	00002a3c 	andeq	r2, r0, ip, lsr sl
    fce8:	00e45109 	rsceq	r5, r4, r9, lsl #2
    fcec:	d1020000 	mrsle	r0, (UNDEF: 2)
    fcf0:	09000028 	stmdbeq	r0, {r3, r5}
    fcf4:	00019953 	andeq	r9, r1, r3, asr r9
    fcf8:	9f040500 	svcls	0x00040500
    fcfc:	09000001 	stmdbeq	r0, {r0}
    fd00:	000000ce 	andeq	r0, r0, lr, asr #1
    fd04:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    fd08:	0001b808 	andeq	fp, r1, r8, lsl #16
    fd0c:	00b80800 	adcseq	r0, r8, r0, lsl #16
    fd10:	b8080000 	stmdalt	r8, {}	; <UNPREDICTABLE>
    fd14:	00000000 	andeq	r0, r0, r0
    fd18:	00b80405 	adcseq	r0, r8, r5, lsl #8
    fd1c:	bb020000 	bllt	8fd24 <__ccfg+0x6fd7c>
    fd20:	0900002c 	stmdbeq	r0, {r2, r3, r5}
    fd24:	0001c957 	andeq	ip, r1, r7, asr r9
    fd28:	cf040500 	svcgt	0x00040500
    fd2c:	09000001 	stmdbeq	r0, {r0}
    fd30:	000000ce 	andeq	r0, r0, lr, asr #1
    fd34:	000001e3 	andeq	r0, r0, r3, ror #3
    fd38:	0001e308 	andeq	lr, r1, r8, lsl #6
    fd3c:	00ce0800 	sbceq	r0, lr, r0, lsl #16
    fd40:	05000000 	streq	r0, [r0, #-0]
    fd44:	0000ce04 	andeq	ip, r0, r4, lsl #28
    fd48:	2aaf0200 	bcs	febd0550 <_estack+0xdebcb550>
    fd4c:	5a090000 	bpl	24fd54 <__ccfg+0x22fdac>
    fd50:	000001c9 	andeq	r0, r0, r9, asr #3
    fd54:	002b6902 	eoreq	r6, fp, r2, lsl #18
    fd58:	c95d0900 	ldmdbgt	sp, {r8, fp}^
    fd5c:	02000001 	andeq	r0, r0, #1
    fd60:	000028e3 	andeq	r2, r0, r3, ror #17
    fd64:	01c96009 	biceq	r6, r9, r9
    fd68:	c9020000 	stmdbgt	r2, {}	; <UNPREDICTABLE>
    fd6c:	0900002c 	stmdbeq	r0, {r2, r3, r5}
    fd70:	0000e463 	andeq	lr, r0, r3, ror #8
    fd74:	29210200 	stmdbcs	r1!, {r9}
    fd78:	65090000 	strvs	r0, [r9, #-0]
    fd7c:	00000220 	andeq	r0, r0, r0, lsr #4
    fd80:	02260405 	eoreq	r0, r6, #83886080	; 0x5000000
    fd84:	31070000 	mrscc	r0, (UNDEF: 7)
    fd88:	08000002 	stmdaeq	r0, {r1}
    fd8c:	000000ce 	andeq	r0, r0, lr, asr #1
    fd90:	2e670200 	cdpcs	2, 6, cr0, cr7, cr0, {0}
    fd94:	67090000 	strvs	r0, [r9, -r0]
    fd98:	00000220 	andeq	r0, r0, r0, lsr #4
    fd9c:	002bab02 	eoreq	sl, fp, r2, lsl #22
    fda0:	eb690900 	bl	1a521a8 <__ccfg+0x1a32200>
    fda4:	02000000 	andeq	r0, r0, #0
    fda8:	00002e46 	andeq	r2, r0, r6, asr #28
    fdac:	00eb6b09 	rsceq	r6, fp, r9, lsl #22
    fdb0:	78020000 	stmdavc	r2, {}	; <UNPREDICTABLE>
    fdb4:	0900002b 	stmdbeq	r0, {r0, r1, r3, r5}
    fdb8:	0000eb6d 	andeq	lr, r0, sp, ror #22
    fdbc:	2b8a0200 	blcs	fe2905c4 <_estack+0xde28b5c4>
    fdc0:	6f090000 	svcvs	0x00090000
    fdc4:	000000eb 	andeq	r0, r0, fp, ror #1
    fdc8:	7a094c0b 	bvc	262dfc <__ccfg+0x242e54>
    fdcc:	00000355 	andeq	r0, r0, r5, asr r3
    fdd0:	002b4e0c 	eoreq	r4, fp, ip, lsl #28
    fdd4:	fc7c0900 	ldc2l	9, cr0, [ip], #-0	; <UNPREDICTABLE>
    fdd8:	00000000 	andeq	r0, r0, r0
    fddc:	002e390c 	eoreq	r3, lr, ip, lsl #18
    fde0:	2c7d0900 			; <UNDEFINED> instruction: 0x2c7d0900
    fde4:	04000001 	streq	r0, [r0], #-1
    fde8:	002b5f0c 	eoreq	r5, fp, ip, lsl #30
    fdec:	427e0900 	rsbsmi	r0, lr, #0, 18
    fdf0:	08000001 	stmdaeq	r0, {r0}
    fdf4:	002d580c 	eoreq	r5, sp, ip, lsl #16
    fdf8:	4d7f0900 			; <UNDEFINED> instruction: 0x4d7f0900
    fdfc:	0c000001 	stceq	0, cr0, [r0], {1}
    fe00:	002d6a0c 	eoreq	r6, sp, ip, lsl #20
    fe04:	6d800900 	vstrvs.16	s0, [r0]	; <UNPREDICTABLE>
    fe08:	10000001 	andne	r0, r0, r1
    fe0c:	002a5d0c 	eoreq	r5, sl, ip, lsl #26
    fe10:	78810900 	stmvc	r1, {r8, fp}
    fe14:	14000001 	strne	r0, [r0], #-1
    fe18:	002a190c 	eoreq	r1, sl, ip, lsl #18
    fe1c:	83820900 	orrhi	r0, r2, #0, 18
    fe20:	18000001 	stmdane	r0, {r0}
    fe24:	002b540c 	eoreq	r5, fp, ip, lsl #8
    fe28:	8e830900 	vdivhi.f16	s0, s6, s0	; <UNPREDICTABLE>
    fe2c:	1c000001 	stcne	0, cr0, [r0], {1}
    fe30:	002ce30c 	eoreq	lr, ip, ip, lsl #6
    fe34:	be840900 	vdivlt.f16	s0, s8, s0	; <UNPREDICTABLE>
    fe38:	20000001 	andcs	r0, r0, r1
    fe3c:	002adb0c 	eoreq	sp, sl, ip, lsl #22
    fe40:	e9850900 	stmib	r5, {r8, fp}
    fe44:	24000001 	strcs	r0, [r0], #-1
    fe48:	002b330c 	eoreq	r3, fp, ip, lsl #6
    fe4c:	f4860900 	vst2.32	{d0[0],d1[0]}, [r6], r0
    fe50:	28000001 	stmdacs	r0, {r0}
    fe54:	002d980c 	eoreq	r9, sp, ip, lsl #16
    fe58:	ff870900 			; <UNDEFINED> instruction: 0xff870900
    fe5c:	2c000001 	stccs	0, cr0, [r0], {1}
    fe60:	002a780c 	eoreq	r7, sl, ip, lsl #16
    fe64:	15880900 	strne	r0, [r8, #2304]	; 0x900
    fe68:	30000002 	andcc	r0, r0, r2
    fe6c:	002d860c 	eoreq	r8, sp, ip, lsl #12
    fe70:	31890900 	orrcc	r0, r9, r0, lsl #18
    fe74:	34000002 	strcc	r0, [r0], #-2
    fe78:	0029620c 	eoreq	r6, r9, ip, lsl #4
    fe7c:	0a8a0900 	beq	fe292284 <_estack+0xde28d284>
    fe80:	38000002 	stmdacc	r0, {r1}
    fe84:	002b9a0c 	eoreq	r9, fp, ip, lsl #20
    fe88:	3c8b0900 			; <UNDEFINED> instruction: 0x3c8b0900
    fe8c:	3c000002 	stccc	0, cr0, [r0], {2}
    fe90:	002d390c 	eoreq	r3, sp, ip, lsl #18
    fe94:	478c0900 	strmi	r0, [ip, r0, lsl #18]
    fe98:	40000002 	andmi	r0, r0, r2
    fe9c:	002abd0c 	eoreq	fp, sl, ip, lsl #26
    fea0:	528d0900 	addpl	r0, sp, #0, 18
    fea4:	44000002 	strmi	r0, [r0], #-2
    fea8:	0029120c 	eoreq	r1, r9, ip, lsl #4
    feac:	5d8e0900 	vstrpl.16	s0, [lr]	; <UNPREDICTABLE>
    feb0:	48000002 	stmdami	r0, {r1}
    feb4:	2c690200 	sfmcs	f0, 2, [r9], #-0
    feb8:	8f090000 	svchi	0x00090000
    febc:	00000268 	andeq	r0, r0, r8, ror #4
    fec0:	4e01080b 	cdpmi	8, 0, cr0, cr1, cr11, {0}
    fec4:	00000399 	muleq	r0, r9, r3
    fec8:	0038c50c 	eorseq	ip, r8, ip, lsl #10
    fecc:	ce4f0100 	dvfgte	f0, f7, f0
    fed0:	00000000 	andeq	r0, r0, r0
    fed4:	0038f60c 	eorseq	pc, r8, ip, lsl #12
    fed8:	b8500100 	ldmdalt	r0, {r8}^
    fedc:	04000000 	streq	r0, [r0], #-0
    fee0:	0038300c 	eorseq	r3, r8, ip
    fee4:	ad510100 	ldfgee	f0, [r1, #-0]
    fee8:	06000000 	streq	r0, [r0], -r0
    feec:	0037e30c 	eorseq	lr, r7, ip, lsl #6
    fef0:	a2520100 	subsge	r0, r2, #0, 2
    fef4:	07000000 	streq	r0, [r0, -r0]
    fef8:	39220200 	stmdbcc	r2!, {r9}
    fefc:	53010000 	movwpl	r0, #4096	; 0x1000
    ff00:	00000360 	andeq	r0, r0, r0, ror #6
    ff04:	000bcd0d 	andeq	ip, fp, sp, lsl #26
    ff08:	01dc0200 	bicseq	r0, ip, r0, lsl #4
    ff0c:	0003be03 	andeq	fp, r3, r3, lsl #28
    ff10:	0b870e00 	bleq	fe1d3718 <_estack+0xde1ce718>
    ff14:	dc020000 	stcle	0, cr0, [r2], {-0}
    ff18:	0000ce01 	andeq	ip, r0, r1, lsl #28
    ff1c:	e20f0000 	and	r0, pc, #0
    ff20:	0200000b 	andeq	r0, r0, #11
    ff24:	00ce022c 	sbceq	r0, lr, ip, lsr #4
    ff28:	10030000 	andne	r0, r3, r0
    ff2c:	00000ce6 	andeq	r0, r0, r6, ror #25
    ff30:	03022a04 	movweq	r2, #10756	; 0x2a04
    ff34:	00351811 	eorseq	r1, r5, r1, lsl r8
    ff38:	c3e90500 	mvngt	r0, #0, 10
    ff3c:	03000000 	movweq	r0, #0
    ff40:	000003fb 	strdeq	r0, [r0], -fp
    ff44:	00326812 	eorseq	r6, r2, r2, lsl r8
    ff48:	cee90500 	cdpgt	5, 14, cr0, cr9, cr0, {0}
    ff4c:	13000000 	movwne	r0, #0
    ff50:	00003571 	andeq	r3, r0, r1, ror r5
    ff54:	00c3ef05 	sbceq	lr, r3, r5, lsl #30
    ff58:	0d000000 	stceq	0, cr0, [r0, #-0]
    ff5c:	000037f8 	strdeq	r3, [r0], -r8
    ff60:	03025c04 	movweq	r5, #11268	; 0x2c04
    ff64:	00000415 	andeq	r0, r0, r5, lsl r4
    ff68:	0037d20e 	eorseq	sp, r7, lr, lsl #4
    ff6c:	025c0400 	subseq	r0, ip, #0, 8
    ff70:	000000ce 	andeq	r0, r0, lr, asr #1
    ff74:	2c931000 	ldccs	0, cr1, [r3], {0}
    ff78:	40030000 	andmi	r0, r3, r0
    ff7c:	7c0f0301 	stcvc	3, cr0, [pc], {1}
    ff80:	04000038 	streq	r0, [r0], #-56	; 0xffffffc8
    ff84:	042b023e 	strteq	r0, [fp], #-574	; 0xfffffdc2
    ff88:	03030000 	movweq	r0, #12288	; 0x3000
    ff8c:	12400201 	subne	r0, r0, #268435456	; 0x10000000
    ff90:	cc140000 	ldcgt	0, cr0, [r4], {-0}
    ff94:	0a000038 	beq	1007c <__exidx_end+0xafd4>
    ff98:	0000009e 	muleq	r0, lr, r0
    ff9c:	0000f400 	andeq	pc, r0, r0, lsl #8
    ffa0:	cd9c0100 	ldfgts	f0, [ip]
    ffa4:	15000005 	strne	r0, [r0, #-5]
    ffa8:	00003828 	andeq	r3, r0, r8, lsr #16
    ffac:	00ce7b01 	sbceq	r7, lr, r1, lsl #22
    ffb0:	467d0000 	ldrbtmi	r0, [sp], -r0
    ffb4:	ea160000 	b	58ffbc <__ccfg+0x570014>
    ffb8:	01000037 	tsteq	r0, r7, lsr r0
    ffbc:	0000ce7c 	andeq	ip, r0, ip, ror lr
    ffc0:	1707ff00 	strne	pc, [r7, -r0, lsl #30]
    ffc4:	000003a4 	andeq	r0, r0, r4, lsr #7
    ffc8:	00000000 	andeq	r0, r0, r0
    ffcc:	000011b8 			; <UNDEFINED> instruction: 0x000011b8
    ffd0:	047d8101 	ldrbteq	r8, [sp], #-257	; 0xfffffeff
    ffd4:	b1180000 	tstlt	r8, r0
    ffd8:	01000003 	tsteq	r0, r3
    ffdc:	03be1900 			; <UNDEFINED> instruction: 0x03be1900
    ffe0:	00000000 	andeq	r0, r0, r0
    ffe4:	00040000 	andeq	r0, r4, r0
    ffe8:	82010000 	andhi	r0, r1, #0
    ffec:	0004151a 	andeq	r1, r4, sl, lsl r5
    fff0:	00000000 	andeq	r0, r0, r0
    fff4:	00000800 	andeq	r0, r0, r0, lsl #16
    fff8:	a9a10100 	stmibge	r1!, {r8}
    fffc:	1b000004 	blne	10014 <__exidx_end+0xaf6c>
   10000:	00000000 	andeq	r0, r0, r0
   10004:	000008de 	ldrdeq	r0, [r0], -lr
   10008:	03cb1900 	biceq	r1, fp, #0, 18
   1000c:	00000000 	andeq	r0, r0, r0
   10010:	00060000 	andeq	r0, r6, r0
   10014:	b1010000 	mrslt	r0, (UNDEF: 1)
   10018:	00041e19 	andeq	r1, r4, r9, lsl lr
   1001c:	00000000 	andeq	r0, r0, r0
   10020:	00000400 	andeq	r0, r0, r0, lsl #8
   10024:	1ab20100 	bne	fec9042c <_estack+0xdec8b42c>
   10028:	000003fb 	strdeq	r0, [r0], -fp
   1002c:	00000000 	andeq	r0, r0, r0
   10030:	0000000a 	andeq	r0, r0, sl
   10034:	04e1b801 	strbteq	fp, [r1], #2049	; 0x801
   10038:	08180000 	ldmdaeq	r8, {}	; <UNPREDICTABLE>
   1003c:	11000004 	tstne	r0, r4
   10040:	03cb1900 	biceq	r1, fp, #0, 18
   10044:	00000000 	andeq	r0, r0, r0
   10048:	00040000 	andeq	r0, r4, r0
   1004c:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
   10050:	00041e19 	andeq	r1, r4, r9, lsl lr
   10054:	00000000 	andeq	r0, r0, r0
   10058:	00000200 	andeq	r0, r0, r0, lsl #4
   1005c:	19ba0100 	ldmibne	sl!, {r8}
   10060:	000003cb 	andeq	r0, r0, fp, asr #7
   10064:	00000000 	andeq	r0, r0, r0
   10068:	00000006 	andeq	r0, r0, r6
   1006c:	1e19cf01 	cdpne	15, 1, cr12, cr9, cr1, {0}
   10070:	00000004 	andeq	r0, r0, r4
   10074:	02000000 	andeq	r0, r0, #0
   10078:	01000000 	mrseq	r0, (UNDEF: 0)
   1007c:	00001cd0 	ldrdeq	r1, [r0], -r0
   10080:	052e0000 	streq	r0, [lr, #-0]!
   10084:	011d0000 	tsteq	sp, r0
   10088:	ff0a0350 			; <UNDEFINED> instruction: 0xff0a0350
   1008c:	001c0007 	andseq	r0, ip, r7
   10090:	3f000000 	svccc	0x00000000
   10094:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
   10098:	0a035001 	beq	e40a4 <__ccfg+0xc40fc>
   1009c:	1e0007ff 	mcrne	7, 0, r0, cr0, cr15, {7}
   100a0:	00000000 	andeq	r0, r0, r0
   100a4:	000008ef 	andeq	r0, r0, pc, ror #17
   100a8:	00000557 	andeq	r0, r0, r7, asr r5
   100ac:	0151011d 	cmpeq	r1, sp, lsl r1
   100b0:	50011d31 	andpl	r1, r1, r1, lsr sp
   100b4:	1e003301 	cdpne	3, 0, cr3, cr0, cr1, {0}
   100b8:	00000000 	andeq	r0, r0, r0
   100bc:	000008ef 	andeq	r0, r0, pc, ror #17
   100c0:	0000056f 	andeq	r0, r0, pc, ror #10
   100c4:	0151011d 	cmpeq	r1, sp, lsl r1
   100c8:	50011d33 	andpl	r1, r1, r3, lsr sp
   100cc:	1e003401 	cdpne	4, 0, cr3, cr0, cr1, {0}
   100d0:	00000000 	andeq	r0, r0, r0
   100d4:	00000905 	andeq	r0, r0, r5, lsl #18
   100d8:	00000582 	andeq	r0, r0, r2, lsl #11
   100dc:	0150011d 	cmpeq	r0, sp, lsl r1
   100e0:	001c0031 	andseq	r0, ip, r1, lsr r0
   100e4:	91000000 	mrsls	r0, (UNDEF: 0)
   100e8:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
   100ec:	37015001 	strcc	r5, [r1, -r1]
   100f0:	00001c00 	andeq	r1, r0, r0, lsl #24
   100f4:	05a00000 	streq	r0, [r0, #0]!
   100f8:	011d0000 	tsteq	sp, r0
   100fc:	00370150 	eorseq	r0, r7, r0, asr r1
   10100:	0000001c 	andeq	r0, r0, ip, lsl r0
   10104:	0005b000 	andeq	fp, r5, r0
   10108:	50011d00 	andpl	r1, r1, r0, lsl #26
   1010c:	00007602 	andeq	r7, r0, r2, lsl #12
   10110:	0000001c 	andeq	r0, r0, ip, lsl r0
   10114:	0005c000 	andeq	ip, r5, r0
   10118:	50011d00 	andpl	r1, r1, r0, lsl #26
   1011c:	00007602 	andeq	r7, r0, r2, lsl #12
   10120:	0000001f 	andeq	r0, r0, pc, lsl r0
   10124:	50011d00 	andpl	r1, r1, r0, lsl #26
   10128:	00007602 	andeq	r7, r0, r2, lsl #12
   1012c:	376e2000 	strbcc	r2, [lr, -r0]!
   10130:	010a0000 	mrseq	r0, (UNDEF: 10)
   10134:	003dcc01 	eorseq	ip, sp, r1, lsl #24
   10138:	00022000 	andeq	r2, r2, r0
   1013c:	c89c0100 	ldmgt	ip, {r8}
   10140:	21000007 	tstcs	r0, r7
   10144:	0000386e 	andeq	r3, r0, lr, ror #16
   10148:	00ceda01 	sbceq	sp, lr, r1, lsl #20
   1014c:	46a80000 	strtmi	r0, [r8], r0
   10150:	12150000 	andsne	r0, r5, #0
   10154:	01000037 	tsteq	r0, r7, lsr r0
   10158:	0000c3dc 	ldrdeq	ip, [r0], -ip	; <UNPREDICTABLE>
   1015c:	0046d400 	subeq	sp, r6, r0, lsl #8
   10160:	38881500 	stmcc	r8, {r8, sl, ip}
   10164:	dd010000 	stcle	0, cr0, [r1, #-0]
   10168:	000000c3 	andeq	r0, r0, r3, asr #1
   1016c:	000046f2 	strdeq	r4, [r0], -r2
   10170:	00384e15 	eorseq	r4, r8, r5, lsl lr
   10174:	c3de0100 	bicsgt	r0, lr, #0, 2
   10178:	4c000000 	stcmi	0, cr0, [r0], {-0}
   1017c:	15000047 	strne	r0, [r0, #-71]	; 0xffffffb9
   10180:	00003914 	andeq	r3, r0, r4, lsl r9
   10184:	00c3df01 	sbceq	sp, r3, r1, lsl #30
   10188:	476a0000 	strbmi	r0, [sl, -r0]!
   1018c:	04150000 	ldreq	r0, [r5], #-0
   10190:	01000037 	tsteq	r0, r7, lsr r0
   10194:	0000c3e0 	andeq	ip, r0, r0, ror #7
   10198:	00478800 	subeq	r8, r7, r0, lsl #16
   1019c:	371a2200 	ldrcc	r2, [sl, -r0, lsl #4]
   101a0:	e1010000 	mrs	r0, (UNDEF: 1)
   101a4:	000000c3 	andeq	r0, r0, r3, asr #1
   101a8:	bc155301 	ldclt	3, cr5, [r5], {1}
   101ac:	01000031 	tsteq	r0, r1, lsr r0
   101b0:	0000cee2 	andeq	ip, r0, r2, ror #29
   101b4:	00479b00 	subeq	r9, r7, r0, lsl #22
   101b8:	38ac1500 	stmiacc	ip!, {r8, sl, ip}
   101bc:	e3010000 	movw	r0, #4096	; 0x1000
   101c0:	000000ce 	andeq	r0, r0, lr, asr #1
   101c4:	000047ae 	andeq	r4, r0, lr, lsr #15
   101c8:	00372e15 	eorseq	r2, r7, r5, lsl lr
   101cc:	cee40100 	cdpgt	1, 14, cr0, cr4, cr0, {0}
   101d0:	cd000000 	stcgt	0, cr0, [r0, #-0]
   101d4:	23000047 	movwcs	r0, #71	; 0x47
   101d8:	01006964 	tsteq	r0, r4, ror #18
   101dc:	0000cee5 	andeq	ip, r0, r5, ror #29
   101e0:	0047e000 	subeq	lr, r7, r0
   101e4:	69642300 	stmdbvs	r4!, {r8, r9, sp}^
   101e8:	e6010069 	str	r0, [r1], -r9, rrx
   101ec:	000000ce 	andeq	r0, r0, lr, asr #1
   101f0:	00004816 	andeq	r4, r0, r6, lsl r8
   101f4:	00697423 	rsbeq	r7, r9, r3, lsr #8
   101f8:	00cee701 	sbceq	lr, lr, r1, lsl #14
   101fc:	484c0000 	stmdami	ip, {}^	; <UNPREDICTABLE>
   10200:	63230000 			; <UNDEFINED> instruction: 0x63230000
   10204:	e8010064 	stmda	r1, {r2, r5, r6}
   10208:	000000ce 	andeq	r0, r0, lr, asr #1
   1020c:	000048bc 			; <UNDEFINED> instruction: 0x000048bc
   10210:	006c6323 	rsbeq	r6, ip, r3, lsr #6
   10214:	00cee901 	sbceq	lr, lr, r1, lsl #18
   10218:	48cf0000 	stmiami	pc, {}^	; <UNPREDICTABLE>
   1021c:	3f150000 	svccc	0x00150000
   10220:	01000037 	tsteq	r0, r7, lsr r0
   10224:	0000ceea 	andeq	ip, r0, sl, ror #29
   10228:	0048e200 	subeq	lr, r8, r0, lsl #4
   1022c:	006b2400 	rsbeq	r2, fp, r0, lsl #8
   10230:	00ceeb01 	sbceq	lr, lr, r1, lsl #22
   10234:	20130000 	andscs	r0, r3, r0
   10238:	01000038 	tsteq	r0, r8, lsr r0
   1023c:	0000ceec 	andeq	ip, r0, ip, ror #29
   10240:	380e1500 	stmdacc	lr, {r8, sl, ip}
   10244:	ed010000 	stc	0, cr0, [r1, #-0]
   10248:	000000ce 	andeq	r0, r0, lr, asr #1
   1024c:	00004900 	andeq	r4, r0, r0, lsl #18
   10250:	0037de15 	eorseq	sp, r7, r5, lsl lr
   10254:	ceee0100 	cdpgt	1, 14, cr0, cr14, cr0, {0}
   10258:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
   1025c:	15000049 	strne	r0, [r0, #-73]	; 0xffffffb7
   10260:	00003809 	andeq	r3, r0, r9, lsl #16
   10264:	00ceef01 	sbceq	lr, lr, r1, lsl #30
   10268:	49480000 	stmdbmi	r8, {}^	; <UNPREDICTABLE>
   1026c:	e9150000 	ldmdb	r5, {}	; <UNPREDICTABLE>
   10270:	01000038 	tsteq	r0, r8, lsr r0
   10274:	0007c8f0 	strdeq	ip, [r7], -r0
   10278:	00498c00 	subeq	r8, r9, r0, lsl #24
   1027c:	3dfa2500 	cfldr64cc	mvdx2, [sl]
   10280:	00120000 	andseq	r0, r2, r0
   10284:	073b0000 	ldreq	r0, [fp, -r0]!
   10288:	94260000 	strtls	r0, [r6], #-0
   1028c:	01000038 	tsteq	r0, r8, lsr r0
   10290:	00c3010a 	sbceq	r0, r3, sl, lsl #2
   10294:	49a40000 	stmibmi	r4!, {}	; <UNPREDICTABLE>
   10298:	27000000 	strcs	r0, [r0, -r0]
   1029c:	000003d4 	ldrdeq	r0, [r0], -r4
   102a0:	00003e20 	andeq	r3, r0, r0, lsr #28
   102a4:	00000006 	andeq	r0, r0, r6
   102a8:	68011101 	stmdavs	r1, {r0, r8, ip}
   102ac:	28000007 	stmdacs	r0, {r0, r1, r2}
   102b0:	000003e4 	andeq	r0, r0, r4, ror #7
   102b4:	003e2029 	eorseq	r2, lr, r9, lsr #32
   102b8:	00000600 	andeq	r0, r0, r0, lsl #12
   102bc:	03ef2a00 	mvneq	r2, #0, 20
   102c0:	49b70000 	ldmibmi	r7!, {}	; <UNPREDICTABLE>
   102c4:	00000000 	andeq	r0, r0, r0
   102c8:	0003d427 	andeq	sp, r3, r7, lsr #8
   102cc:	003e3800 	eorseq	r3, lr, r0, lsl #16
   102d0:	00000600 	andeq	r0, r0, r0, lsl #12
   102d4:	011b0100 	tsteq	fp, r0, lsl #2
   102d8:	00000795 	muleq	r0, r5, r7
   102dc:	0003e428 	andeq	lr, r3, r8, lsr #8
   102e0:	3e382900 	vaddcc.f16	s4, s16, s0	; <UNPREDICTABLE>
   102e4:	00060000 	andeq	r0, r6, r0
   102e8:	ef2a0000 	svc	0x002a0000
   102ec:	ca000003 	bgt	10300 <__exidx_end+0xb258>
   102f0:	00000049 	andeq	r0, r0, r9, asr #32
   102f4:	03d42b00 	bicseq	r2, r4, #0, 22
   102f8:	3e420000 	cdpcc	0, 4, cr0, cr2, cr0, {0}
   102fc:	11d00000 	bicsne	r0, r0, r0
   10300:	1f010000 	svcne	0x00010000
   10304:	0007be01 	andeq	fp, r7, r1, lsl #28
   10308:	03e42800 	mvneq	r2, #0, 16
   1030c:	d02c0000 	eorle	r0, ip, r0
   10310:	2a000011 	bcs	1035c <__exidx_end+0xb2b4>
   10314:	000003ef 	andeq	r0, r0, pc, ror #7
   10318:	000049dd 	ldrdeq	r4, [r0], -sp
   1031c:	ec1b0000 	ldc	0, cr0, [fp], {-0}
   10320:	1b00003d 	blne	1041c <__exidx_end+0xb374>
   10324:	00000009 	andeq	r0, r0, r9
   10328:	07ce0405 	strbeq	r0, [lr, r5, lsl #8]
   1032c:	ce2d0000 	cdpgt	0, 2, cr0, cr13, cr0, {0}
   10330:	20000000 	andcs	r0, r0, r0
   10334:	00003744 	andeq	r3, r0, r4, asr #14
   10338:	ec01170a 	stc	7, cr1, [r1], {10}
   1033c:	6000003f 	andvs	r0, r0, pc, lsr r0
   10340:	01000000 	mrseq	r0, (UNDEF: 0)
   10344:	0008339c 	muleq	r8, ip, r3
   10348:	37122600 	ldrcc	r2, [r2, -r0, lsl #12]
   1034c:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
   10350:	0000c301 	andeq	ip, r0, r1, lsl #6
   10354:	0049f000 	subeq	pc, r9, r0
   10358:	38382600 	ldmdacc	r8!, {r9, sl, sp}
   1035c:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
   10360:	0000ce01 	andeq	ip, r0, r1, lsl #28
   10364:	004a1b00 	subeq	r1, sl, r0, lsl #22
   10368:	2ad12600 	bcs	ff459b70 <_estack+0xdf454b70>
   1036c:	ba010000 	blt	50374 <__ccfg+0x303cc>
   10370:	0000ce01 	andeq	ip, r0, r1, lsl #28
   10374:	004a2e00 	subeq	r2, sl, r0, lsl #28
   10378:	380e2600 	stmdacc	lr, {r9, sl, sp}
   1037c:	bb010000 	bllt	50384 <__ccfg+0x303dc>
   10380:	0000ce01 	andeq	ip, r0, r1, lsl #28
   10384:	004a5500 	subeq	r5, sl, r0, lsl #10
   10388:	3ffa1b00 	svccc	0x00fa1b00
   1038c:	091b0000 	ldmdbeq	fp, {}	; <UNPREDICTABLE>
   10390:	20000000 	andcs	r0, r0, r0
   10394:	00003935 	andeq	r3, r0, r5, lsr r9
   10398:	0001290a 	andeq	r2, r1, sl, lsl #18
   1039c:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
   103a0:	01000000 	mrseq	r0, (UNDEF: 0)
   103a4:	00088a9c 	muleq	r8, ip, sl
   103a8:	38612600 	stmdacc	r1!, {r9, sl, sp}^
   103ac:	e7010000 	str	r0, [r1, -r0]
   103b0:	0000ce01 	andeq	ip, r0, r1, lsl #28
   103b4:	004a7e00 	subeq	r7, sl, r0, lsl #28
   103b8:	39072600 	stmdbcc	r7, {r9, sl, sp}
   103bc:	e8010000 	stmda	r1, {}	; <UNPREDICTABLE>
   103c0:	0000ce01 	andeq	ip, r0, r1, lsl #28
   103c4:	004a9100 	subeq	r9, sl, r0, lsl #2
   103c8:	31bc2600 			; <UNDEFINED> instruction: 0x31bc2600
   103cc:	e9010000 	stmdb	r1, {}	; <UNPREDICTABLE>
   103d0:	0000ce01 	andeq	ip, r0, r1, lsl #28
   103d4:	004aa400 	subeq	sl, sl, r0, lsl #8
   103d8:	38b52600 	ldmcc	r5!, {r9, sl, sp}
   103dc:	ea010000 	b	503e4 <__ccfg+0x3043c>
   103e0:	0000ce01 	andeq	ip, r0, r1, lsl #28
   103e4:	004ab700 	subeq	fp, sl, r0, lsl #14
   103e8:	b62e0000 	strtlt	r0, [lr], -r0
   103ec:	0a000037 	beq	104d0 <__exidx_end+0xb428>
   103f0:	00ce0142 	sbceq	r0, lr, r2, asr #2
   103f4:	404c0000 	submi	r0, ip, r0
   103f8:	00180000 	andseq	r0, r8, r0
   103fc:	9c010000 	stcls	0, cr0, [r1], {-0}
   10400:	00396222 	eorseq	r6, r9, r2, lsr #4
   10404:	99550100 	ldmdbls	r5, {r8}^
   10408:	05000003 	streq	r0, [r0, #-3]
   1040c:	00062403 	andeq	r2, r6, r3, lsl #8
   10410:	00ce2f20 	sbceq	r2, lr, r0, lsr #30
   10414:	08c10000 	stmiaeq	r1, {}^	; <UNPREDICTABLE>
   10418:	c1300000 	teqgt	r0, r0
   1041c:	0c000008 	stceq	0, cr0, [r0], {8}
   10420:	07040300 	streq	r0, [r4, -r0, lsl #6]
   10424:	0000284f 	andeq	r2, r0, pc, asr #16
   10428:	00389c22 	eorseq	r9, r8, r2, lsr #24
   1042c:	d9610100 	stmdble	r1!, {r8}^
   10430:	05000008 	streq	r0, [r0, #-8]
   10434:	00000003 	andeq	r0, r0, r3
   10438:	08b12d00 	ldmeq	r1!, {r8, sl, fp, sp}
   1043c:	b3310000 	teqlt	r1, #0
   10440:	09000025 	stmdbeq	r0, {r0, r2, r5}
   10444:	0008ef99 	muleq	r8, r9, pc	; <UNPREDICTABLE>
   10448:	00d90800 	sbcseq	r0, r9, r0, lsl #16
   1044c:	31000000 	mrscc	r0, (UNDEF: 0)
   10450:	000028b9 			; <UNDEFINED> instruction: 0x000028b9
   10454:	0905f903 	stmdbeq	r5, {r0, r1, r8, fp, ip, sp, lr, pc}
   10458:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
   1045c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   10460:	000000ce 	andeq	r0, r0, lr, asr #1
   10464:	28f23200 	ldmcs	r2!, {r9, ip, sp}^
   10468:	10030000 	andne	r0, r3, r0
   1046c:	0000ce01 	andeq	ip, r0, r1, lsl #28
   10470:	00091b00 	andeq	r1, r9, r0, lsl #22
   10474:	00ce0800 	sbceq	r0, lr, r0, lsl #16
   10478:	33000000 	movwcc	r0, #0
   1047c:	0000270c 	andeq	r2, r0, ip, lsl #14
   10480:	00c3aa0b 	sbceq	sl, r3, fp, lsl #20
   10484:	cc000000 	stcgt	0, cr0, [r0], {-0}
   10488:	04000003 	streq	r0, [r0], #-3
   1048c:	003c3a00 	eorseq	r3, ip, r0, lsl #20
   10490:	db010400 	blle	51498 <__ccfg+0x314f0>
   10494:	01000025 	tsteq	r0, r5, lsr #32
   10498:	00003c49 	andeq	r3, r0, r9, asr #24
   1049c:	000026a2 	andeq	r2, r0, r2, lsr #13
   104a0:	00001248 	andeq	r1, r0, r8, asr #4
   104a4:	00000000 	andeq	r0, r0, r0
   104a8:	000081bc 			; <UNDEFINED> instruction: 0x000081bc
   104ac:	8a060102 	bhi	1908bc <__ccfg+0x170914>
   104b0:	02000009 	andeq	r0, r0, #9
   104b4:	09880801 	stmibeq	r8, {r0, fp}
   104b8:	02020000 	andeq	r0, r2, #0
   104bc:	00084405 	andeq	r4, r8, r5, lsl #8
   104c0:	07020200 	streq	r0, [r2, -r0, lsl #4]
   104c4:	00000a80 	andeq	r0, r0, r0, lsl #21
   104c8:	37050402 	strcc	r0, [r5, -r2, lsl #8]
   104cc:	03000006 	movweq	r0, #6
   104d0:	0000099f 	muleq	r0, pc, r9	; <UNPREDICTABLE>
   104d4:	00534103 	subseq	r4, r3, r3, lsl #2
   104d8:	04020000 	streq	r0, [r2], #-0
   104dc:	0003cf07 	andeq	ip, r3, r7, lsl #30
   104e0:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
   104e4:	00000632 	andeq	r0, r0, r2, lsr r6
   104e8:	ca070802 	bgt	1d24f8 <__ccfg+0x1b2550>
   104ec:	04000003 	streq	r0, [r0], #-3
   104f0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
   104f4:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
   104f8:	0003d407 	andeq	sp, r3, r7, lsl #8
   104fc:	09a10300 	stmibeq	r1!, {r8, r9}
   10500:	20040000 	andcs	r0, r4, r0
   10504:	00000048 	andeq	r0, r0, r8, asr #32
   10508:	63020105 	movwvs	r0, #8453	; 0x2105
   1050c:	000000a2 	andeq	r0, r0, r2, lsr #1
   10510:	003b8306 	eorseq	r8, fp, r6, lsl #6
   10514:	c3060000 	movwgt	r0, #24576	; 0x6000
   10518:	0200003b 	andeq	r0, r0, #59	; 0x3b
   1051c:	003b3306 	eorseq	r3, fp, r6, lsl #6
   10520:	73060400 	movwvc	r0, #25600	; 0x6400
   10524:	08000039 	stmdaeq	r0, {r0, r3, r4, r5}
   10528:	3b1f0300 	blcc	7d1130 <__ccfg+0x7b1188>
   1052c:	68020000 	stmdavs	r2, {}	; <UNPREDICTABLE>
   10530:	00000081 	andeq	r0, r0, r1, lsl #1
   10534:	a5020105 	strge	r0, [r2, #-261]	; 0xfffffefb
   10538:	000000da 	ldrdeq	r0, [r0], -sl
   1053c:	003c3906 	eorseq	r3, ip, r6, lsl #18
   10540:	8b067f00 	blhi	1b0148 <__ccfg+0x1901a0>
   10544:	00000039 	andeq	r0, r0, r9, lsr r0
   10548:	003cea06 	eorseq	lr, ip, r6, lsl #20
   1054c:	77060100 	strvc	r0, [r6, -r0, lsl #2]
   10550:	0200003b 	andeq	r0, r0, #59	; 0x3b
   10554:	003cdc06 	eorseq	sp, ip, r6, lsl #24
   10558:	70060300 	andvc	r0, r6, r0, lsl #6
   1055c:	0400003a 	streq	r0, [r0], #-58	; 0xffffffc6
   10560:	3cf60300 	ldclcc	3, cr0, [r6]
   10564:	ac020000 	stcge	0, cr0, [r2], {-0}
   10568:	000000ad 	andeq	r0, r0, sp, lsr #1
   1056c:	3d020107 	stfccs	f0, [r2, #-28]	; 0xffffffe4
   10570:	00012501 	andeq	r2, r1, r1, lsl #10
   10574:	3b4d0600 	blcc	1351d7c <__ccfg+0x1331dd4>
   10578:	067f0000 	ldrbteq	r0, [pc], -r0
   1057c:	00003a3b 	andeq	r3, r0, fp, lsr sl
   10580:	3a970600 	bcc	fe5d1d88 <_estack+0xde5ccd88>
   10584:	06010000 	streq	r0, [r1], -r0
   10588:	00003ad3 	ldrdeq	r3, [r0], -r3	; <UNPREDICTABLE>
   1058c:	3c1e0602 	ldccc	6, cr0, [lr], {2}
   10590:	06030000 	streq	r0, [r3], -r0
   10594:	00003997 	muleq	r0, r7, r9
   10598:	3a5f0604 	bcc	17d1db0 <__ccfg+0x17b1e08>
   1059c:	06050000 	streq	r0, [r5], -r0
   105a0:	00003bf8 	strdeq	r3, [r0], -r8
   105a4:	3c0b0606 	stccc	6, cr0, [fp], {6}
   105a8:	00070000 	andeq	r0, r7, r0
   105ac:	003a2308 	eorseq	r2, sl, r8, lsl #6
   105b0:	01470200 	mrseq	r0, (UNDEF: 103)
   105b4:	000000e5 	andeq	r0, r0, r5, ror #1
   105b8:	59020107 	stmdbpl	r2, {r0, r1, r2, r8}
   105bc:	00015f01 	andeq	r5, r1, r1, lsl #30
   105c0:	3ac40600 	bcc	ff111dc8 <_estack+0xdf10cdc8>
   105c4:	067f0000 	ldrbteq	r0, [pc], -r0
   105c8:	00003aed 	andeq	r3, r0, sp, ror #21
   105cc:	3b690600 	blcc	1a51dd4 <__ccfg+0x1a31e2c>
   105d0:	06010000 	streq	r0, [r1], -r0
   105d4:	000039b0 			; <UNDEFINED> instruction: 0x000039b0
   105d8:	3bd30602 	blcc	ff4d1de8 <_estack+0xdf4ccde8>
   105dc:	06030000 	streq	r0, [r3], -r0
   105e0:	00003a86 	andeq	r3, r0, r6, lsl #21
   105e4:	4c080004 	stcmi	0, cr0, [r8], {4}
   105e8:	0200003a 	andeq	r0, r0, #58	; 0x3a
   105ec:	01310160 	teqeq	r1, r0, ror #2
   105f0:	01070000 	mrseq	r0, (UNDEF: 7)
   105f4:	9901b802 	stmdbls	r1, {r1, fp, ip, sp, pc}
   105f8:	06000001 	streq	r0, [r0], -r1
   105fc:	00003b03 	andeq	r3, r0, r3, lsl #22
   10600:	3c2f067f 	stccc	6, cr0, [pc], #-508	; 1040c <__exidx_end+0xb364>
   10604:	060a0000 	streq	r0, [sl], -r0
   10608:	00003b94 	muleq	r0, r4, fp
   1060c:	3bb90614 	blcc	fee51e64 <_estack+0xdee4ce64>
   10610:	06150000 	ldreq	r0, [r5], -r0
   10614:	00003b5f 	andeq	r3, r0, pc, asr fp
   10618:	3be50616 	blcc	ff951e78 <_estack+0xdf94ce78>
   1061c:	00170000 	andseq	r0, r7, r0
   10620:	003a2e08 	eorseq	r2, sl, r8, lsl #28
   10624:	01bf0200 			; <UNDEFINED> instruction: 0x01bf0200
   10628:	0000016b 	andeq	r0, r0, fp, ror #2
   1062c:	003c7509 	eorseq	r7, ip, r9, lsl #10
   10630:	01070200 	mrseq	r0, (UNDEF: 39)
   10634:	00000076 	andeq	r0, r0, r6, ror r0
   10638:	39c20a03 	stmibcc	r2, {r0, r1, r9, fp}^
   1063c:	6a020000 	bvs	90644 <__ccfg+0x7069c>
   10640:	00015f01 	andeq	r5, r1, r1, lsl #30
   10644:	01da0100 	bicseq	r0, sl, r0, lsl #2
   10648:	fb0b0000 	blx	2d0652 <__ccfg+0x2b06aa>
   1064c:	0100003a 	tsteq	r0, sl, lsr r0
   10650:	00015f68 	andeq	r5, r1, r8, ror #30
   10654:	39a80b00 	stmibcc	r8!, {r8, r9, fp}
   10658:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
   1065c:	00000076 	andeq	r0, r0, r6, ror r0
   10660:	3d230900 			; <UNDEFINED> instruction: 0x3d230900
   10664:	32020000 	andcc	r0, r2, #0
   10668:	00007601 	andeq	r7, r0, r1, lsl #12
   1066c:	b50c0300 	strlt	r0, [ip, #-768]	; 0xfffffd00
   10670:	0200003c 	andeq	r0, r0, #60	; 0x3c
   10674:	0000a272 	andeq	sl, r0, r2, ror r2
   10678:	00000000 	andeq	r0, r0, r0
   1067c:	00001000 	andeq	r1, r0, r0
   10680:	0d9c0100 	ldfeqs	f0, [ip]
   10684:	000039df 	ldrdeq	r3, [r0], -pc	; <UNPREDICTABLE>
   10688:	00dab602 	sbcseq	fp, sl, r2, lsl #12
   1068c:	00000000 	andeq	r0, r0, r0
   10690:	00180000 	andseq	r0, r8, r0
   10694:	9c010000 	stcls	0, cr0, [r1], {-0}
   10698:	00000225 	andeq	r0, r0, r5, lsr #4
   1069c:	003a1a0e 	eorseq	r1, sl, lr, lsl #20
   106a0:	da520100 	ble	1490aa8 <__ccfg+0x1470b00>
   106a4:	ca000000 	bgt	106ac <__exidx_end+0xb604>
   106a8:	0000004a 	andeq	r0, r0, sl, asr #32
   106ac:	0001b20f 	andeq	fp, r1, pc, lsl #4
   106b0:	00406400 	subeq	r6, r0, r0, lsl #8
   106b4:	00004c00 	andeq	r4, r0, r0, lsl #24
   106b8:	6e9c0100 	fmlvse	f0, f4, f0
   106bc:	10000002 	andne	r0, r0, r2
   106c0:	000001c3 	andeq	r0, r0, r3, asr #3
   106c4:	00004af2 	strdeq	r4, [r0], -r2
   106c8:	0001ce10 	andeq	ip, r1, r0, lsl lr
   106cc:	004b1200 	subeq	r1, fp, r0, lsl #4
   106d0:	40741100 	rsbsmi	r1, r4, r0, lsl #2
   106d4:	000e0000 	andeq	r0, lr, r0
   106d8:	c3120000 	tstgt	r2, #0
   106dc:	12000001 	andne	r0, r0, #1
   106e0:	000001ce 	andeq	r0, r0, lr, asr #3
   106e4:	0001a513 	andeq	sl, r1, r3, lsl r5
   106e8:	00407400 	subeq	r7, r0, r0, lsl #8
   106ec:	00000400 	andeq	r0, r0, r0, lsl #8
   106f0:	00700100 	rsbseq	r0, r0, r0, lsl #2
   106f4:	3b9e1400 	blcc	fe7956fc <_estack+0xde7906fc>
   106f8:	51020000 	mrspl	r0, (UNDEF: 2)
   106fc:	00012501 	andeq	r2, r1, r1, lsl #10
   10700:	00000000 	andeq	r0, r0, r0
   10704:	00003000 	andeq	r3, r0, r0
   10708:	ca9c0100 	bgt	fe710b10 <_estack+0xde70bb10>
   1070c:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
   10710:	00003bef 	andeq	r3, r0, pc, ror #23
   10714:	01258501 			; <UNDEFINED> instruction: 0x01258501
   10718:	4b460000 	blmi	1190720 <__ccfg+0x1170778>
   1071c:	690b0000 	stmdbvs	fp, {}	; <UNPREDICTABLE>
   10720:	0100003c 	tsteq	r0, ip, lsr r0
   10724:	00007686 	andeq	r7, r0, r6, lsl #13
   10728:	3b110e00 	blcc	453f30 <__ccfg+0x433f88>
   1072c:	87010000 	strhi	r0, [r1, -r0]
   10730:	00000076 	andeq	r0, r0, r6, ror r0
   10734:	00004b66 	andeq	r4, r0, r6, ror #22
   10738:	0001da13 	andeq	sp, r1, r3, lsl sl
   1073c:	00000000 	andeq	r0, r0, r0
   10740:	00000400 	andeq	r0, r0, r0, lsl #8
   10744:	15860100 	strne	r0, [r6, #256]	; 0x100
   10748:	00000000 	andeq	r0, r0, r0
   1074c:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
   10750:	3c931600 	ldccc	6, cr1, [r3], {0}
   10754:	19020000 	stmdbne	r2, {}	; <UNPREDICTABLE>
   10758:	00007601 	andeq	r7, r0, r1, lsl #12
   1075c:	02e80300 	rsceq	r0, r8, #0, 6
   10760:	7d170000 	ldcvc	0, cr0, [r7, #-0]
   10764:	0200003a 	andeq	r0, r0, #58	; 0x3a
   10768:	0076011b 	rsbseq	r0, r6, fp, lsl r1
   1076c:	14000000 	strne	r0, [r0], #-0
   10770:	000039fd 	strdeq	r3, [r0], -sp
   10774:	9901c902 	stmdbls	r1, {r1, r8, fp, lr, pc}
   10778:	b0000001 	andlt	r0, r0, r1
   1077c:	6c000040 	stcvs	0, cr0, [r0], {64}	; 0x40
   10780:	01000000 	mrseq	r0, (UNDEF: 0)
   10784:	0003659c 	muleq	r3, ip, r5
   10788:	3a590e00 	bcc	1653f90 <__ccfg+0x1633fe8>
   1078c:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
   10790:	00000199 	muleq	r0, r9, r1
   10794:	00004b79 	andeq	r4, r0, r9, ror fp
   10798:	003ae40b 	eorseq	lr, sl, fp, lsl #8
   1079c:	76a90100 	strtvc	r0, [r9], r0, lsl #2
   107a0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   107a4:	00003caa 	andeq	r3, r0, sl, lsr #25
   107a8:	0076aa01 	rsbseq	sl, r6, r1, lsl #20
   107ac:	54010000 	strpl	r0, [r1], #-0
   107b0:	0001a519 	andeq	sl, r1, r9, lsl r5
   107b4:	0040b200 	subeq	fp, r0, r0, lsl #4
   107b8:	00121800 	andseq	r1, r2, r0, lsl #16
   107bc:	1aa90100 	bne	fea50bc4 <_estack+0xdea4bbc4>
   107c0:	000002ca 	andeq	r0, r0, sl, asr #5
   107c4:	000040b6 	strheq	r4, [r0], -r6
   107c8:	00001230 	andeq	r1, r0, r0, lsr r2
   107cc:	035baa01 	cmpeq	fp, #4096	; 0x1000
   107d0:	301b0000 	andscc	r0, fp, r0
   107d4:	10000012 	andne	r0, r0, r2, lsl r0
   107d8:	000002db 	ldrdeq	r0, [r0], -fp
   107dc:	00004bd6 	ldrdeq	r4, [r0], -r6
   107e0:	ca150000 	bgt	5507e8 <__ccfg+0x530840>
   107e4:	b2000040 	andlt	r0, r0, #64	; 0x40
   107e8:	00000001 	andeq	r0, r0, r1
   107ec:	003aa809 	eorseq	sl, sl, r9, lsl #16
   107f0:	01830200 	orreq	r0, r3, r0, lsl #4
   107f4:	00000372 	andeq	r0, r0, r2, ror r3
   107f8:	02010203 	andeq	r0, r1, #805306368	; 0x30000000
   107fc:	00001240 	andeq	r1, r0, r0, asr #4
   10800:	003d0409 	eorseq	r0, sp, r9, lsl #8
   10804:	01f00200 	mvnseq	r0, r0, lsl #4
   10808:	00000372 	andeq	r0, r0, r2, ror r3
   1080c:	32051c03 	andcc	r1, r5, #768	; 0x300
   10810:	43020000 	movwmi	r0, #8192	; 0x2000
   10814:	00411c02 	subeq	r1, r1, r2, lsl #24
   10818:	00001600 	andeq	r1, r0, r0, lsl #12
   1081c:	1d9c0100 	ldfnes	f0, [ip]
   10820:	00000365 	andeq	r0, r0, r5, ror #6
   10824:	0000411e 	andeq	r4, r0, lr, lsl r1
   10828:	00000004 	andeq	r0, r0, r4
   1082c:	03b5e201 			; <UNDEFINED> instruction: 0x03b5e201
   10830:	22150000 	andscs	r0, r5, #0
   10834:	b2000041 	andlt	r0, r0, #65	; 0x41
   10838:	00000001 	andeq	r0, r0, r1
   1083c:	0003791e 	andeq	r7, r3, lr, lsl r9
   10840:	00412600 	subeq	r2, r1, r0, lsl #12
   10844:	00000400 	andeq	r0, r0, r0, lsl #8
   10848:	15e30100 	strbne	r0, [r3, #256]!	; 0x100
   1084c:	0000412a 	andeq	r4, r0, sl, lsr #2
   10850:	000002e8 	andeq	r0, r0, r8, ror #5
   10854:	a7000000 	strge	r0, [r0, -r0]
   10858:	04000005 	streq	r0, [r0], #-5
   1085c:	003e0800 	eorseq	r0, lr, r0, lsl #16
   10860:	db010400 	blle	51868 <__ccfg+0x318c0>
   10864:	01000025 	tsteq	r0, r5, lsr #32
   10868:	00003dfb 	strdeq	r3, [r0], -fp
   1086c:	000026a2 	andeq	r2, r0, r2, lsr #13
   10870:	00001280 	andeq	r1, r0, r0, lsl #5
   10874:	00000000 	andeq	r0, r0, r0
   10878:	000083eb 	andeq	r8, r0, fp, ror #7
   1087c:	8a060102 	bhi	190c8c <__ccfg+0x170ce4>
   10880:	03000009 	movweq	r0, #9
   10884:	000008df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   10888:	00371d03 	eorseq	r1, r7, r3, lsl #26
   1088c:	01020000 	mrseq	r0, (UNDEF: 2)
   10890:	00098808 	andeq	r8, r9, r8, lsl #16
   10894:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
   10898:	00000844 	andeq	r0, r0, r4, asr #16
   1089c:	00040803 	andeq	r0, r4, r3, lsl #16
   108a0:	502b0300 	eorpl	r0, fp, r0, lsl #6
   108a4:	02000000 	andeq	r0, r0, #0
   108a8:	0a800702 	beq	fe0124b8 <_estack+0xde00d4b8>
   108ac:	04020000 	streq	r0, [r2], #-0
   108b0:	00063705 	andeq	r3, r6, r5, lsl #14
   108b4:	099f0300 	ldmibeq	pc, {r8, r9}	; <UNPREDICTABLE>
   108b8:	41030000 	mrsmi	r0, (UNDEF: 3)
   108bc:	00000069 	andeq	r0, r0, r9, rrx
   108c0:	cf070402 	svcgt	0x00070402
   108c4:	02000003 	andeq	r0, r0, #3
   108c8:	06320508 	ldrteq	r0, [r2], -r8, lsl #10
   108cc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
   108d0:	0003ca07 	andeq	ip, r3, r7, lsl #20
   108d4:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
   108d8:	00746e69 	rsbseq	r6, r4, r9, ror #28
   108dc:	d4070402 	strle	r0, [r7], #-1026	; 0xfffffbfe
   108e0:	03000003 	movweq	r0, #3
   108e4:	000008e1 	andeq	r0, r0, r1, ror #17
   108e8:	002c1404 	eoreq	r1, ip, r4, lsl #8
   108ec:	0a030000 	beq	d08f4 <__ccfg+0xb094c>
   108f0:	04000004 	streq	r0, [r0], #-4
   108f4:	0000451a 	andeq	r4, r0, sl, lsl r5
   108f8:	09a10300 	stmibeq	r1!, {r8, r9}
   108fc:	20040000 	andcs	r0, r4, r0
   10900:	0000005e 	andeq	r0, r0, lr, asr r0
   10904:	003d7405 	eorseq	r7, sp, r5, lsl #8
   10908:	03890100 	orreq	r0, r9, #0, 2
   1090c:	000000e6 	andeq	r0, r0, r6, ror #1
   10910:	003d5606 	eorseq	r5, sp, r6, lsl #12
   10914:	a2890100 	addge	r0, r9, #0, 2
   10918:	06000000 	streq	r0, [r0], -r0
   1091c:	00003dc7 	andeq	r3, r0, r7, asr #27
   10920:	00a28901 	adceq	r8, r2, r1, lsl #18
   10924:	22060000 	andcs	r0, r6, #0
   10928:	0100003e 	tsteq	r0, lr, lsr r0
   1092c:	0000a289 	andeq	sl, r0, r9, lsl #5
   10930:	25630700 	strbcs	r0, [r3, #-1792]!	; 0xfffff900
   10934:	8c010000 	stchi	0, cr0, [r1], {-0}
   10938:	000000e6 	andeq	r0, r0, r6, ror #1
   1093c:	02010200 	andeq	r0, r1, #0, 4
   10940:	00001240 	andeq	r1, r0, r0, asr #4
   10944:	003dd508 	eorseq	sp, sp, r8, lsl #10
   10948:	a2a90100 	adcge	r0, r9, #0, 2
   1094c:	03000000 	movweq	r0, #0
   10950:	0000012a 	andeq	r0, r0, sl, lsr #2
   10954:	003d5606 	eorseq	r5, sp, r6, lsl #12
   10958:	a2a90100 	adcge	r0, r9, #0, 2
   1095c:	06000000 	streq	r0, [r0], -r0
   10960:	00003e22 	andeq	r3, r0, r2, lsr #28
   10964:	00a2a901 	adceq	sl, r2, r1, lsl #18
   10968:	6f070000 	svcvs	0x00070000
   1096c:	0100003d 	tsteq	r0, sp, lsr r0
   10970:	0000a2ab 	andeq	sl, r0, fp, lsr #5
   10974:	25630700 	strbcs	r0, [r3, #-1792]!	; 0xfffff900
   10978:	ad010000 	stcge	0, cr0, [r1, #-0]
   1097c:	000000e6 	andeq	r0, r0, r6, ror #1
   10980:	00ad0900 	adceq	r0, sp, r0, lsl #18
   10984:	41340000 	teqmi	r4, r0
   10988:	00280000 	eoreq	r0, r8, r0
   1098c:	9c010000 	stcls	0, cr0, [r1], {-0}
   10990:	00000171 	andeq	r0, r0, r1, ror r1
   10994:	0000b90a 	andeq	fp, r0, sl, lsl #18
   10998:	004be900 	subeq	lr, fp, r0, lsl #18
   1099c:	00c40a00 	sbceq	r0, r4, r0, lsl #20
   109a0:	4c2e0000 	stcmi	0, cr0, [lr], #-0
   109a4:	da0b0000 	ble	2d09ac <__ccfg+0x2b0a04>
   109a8:	73000000 	movwvc	r0, #0
   109ac:	0c00004c 	stceq	0, cr0, [r0], {76}	; 0x4c
   109b0:	000000cf 	andeq	r0, r0, pc, asr #1
   109b4:	413e0d04 	teqmi	lr, r4, lsl #26
   109b8:	05940000 	ldreq	r0, [r4]
   109bc:	560e0000 	strpl	r0, [lr], -r0
   109c0:	9f000041 	svcls	0x00000041
   109c4:	00000005 	andeq	r0, r0, r5
   109c8:	00341f0f 	eorseq	r1, r4, pc, lsl #30
   109cc:	01ca0100 	biceq	r0, sl, r0, lsl #2
   109d0:	0000415c 	andeq	r4, r0, ip, asr r1
   109d4:	00000008 	andeq	r0, r0, r8
   109d8:	01d19c01 	bicseq	r9, r1, r1, lsl #24
   109dc:	c9100000 	ldmdbgt	r0, {}	; <UNPREDICTABLE>
   109e0:	0200000d 	andeq	r0, r0, #13
   109e4:	0000a242 	andeq	sl, r0, r2, asr #4
   109e8:	004c9900 	subeq	r9, ip, r0, lsl #18
   109ec:	3d361000 	ldccc	0, cr1, [r6, #-0]
   109f0:	42020000 	andmi	r0, r2, #0
   109f4:	000000a2 	andeq	r0, r0, r2, lsr #1
   109f8:	00004cba 			; <UNDEFINED> instruction: 0x00004cba
   109fc:	003dcd10 	eorseq	ip, sp, r0, lsl sp
   10a00:	a2430200 	subge	r0, r3, #0, 4
   10a04:	db000000 	blle	10a0c <__exidx_end+0xb964>
   10a08:	1100004c 	tstne	r0, ip, asr #32
   10a0c:	00004164 	andeq	r4, r0, r4, ror #2
   10a10:	0000012a 	andeq	r0, r0, sl, lsr #2
   10a14:	03510112 	cmpeq	r1, #-2147483644	; 0x80000004
   10a18:	125201f3 	subsne	r0, r2, #-1073741764	; 0xc000003c
   10a1c:	f3075001 	vhadd.u8	d5, d7, d1
   10a20:	01f35001 	mvnseq	r5, r1
   10a24:	00002251 	andeq	r2, r0, r1, asr r2
   10a28:	003de70f 	eorseq	lr, sp, pc, lsl #14
   10a2c:	01df0100 	bicseq	r0, pc, r0, lsl #2
   10a30:	00000000 	andeq	r0, r0, r0
   10a34:	00000022 	andeq	r0, r0, r2, lsr #32
   10a38:	02ea9c01 	rsceq	r9, sl, #256	; 0x100
   10a3c:	c9100000 	ldmdbgt	r0, {}	; <UNPREDICTABLE>
   10a40:	0200000d 	andeq	r0, r0, #13
   10a44:	0000a257 	andeq	sl, r0, r7, asr r2
   10a48:	004cfc00 	subeq	pc, ip, r0, lsl #24
   10a4c:	3d361000 	ldccc	0, cr1, [r6, #-0]
   10a50:	57020000 	strpl	r0, [r2, -r0]
   10a54:	000000a2 	andeq	r0, r0, r2, lsr #1
   10a58:	00004d1d 	andeq	r4, r0, sp, lsl sp
   10a5c:	001de910 	andseq	lr, sp, r0, lsl r9
   10a60:	a2580200 	subsge	r0, r8, #0, 4
   10a64:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
   10a68:	1000004d 	andne	r0, r0, sp, asr #32
   10a6c:	00003d90 	muleq	r0, r0, sp
   10a70:	00a25802 	adceq	r5, r2, r2, lsl #16
   10a74:	4d890000 	stcmi	0, cr0, [r9]
   10a78:	16130000 	ldrne	r0, [r3], -r0
   10a7c:	0200003e 	andeq	r0, r0, #62	; 0x3e
   10a80:	0000a25a 	andeq	sl, r0, sl, asr r2
   10a84:	004daa00 	subeq	sl, sp, r0, lsl #20
   10a88:	3d9b1300 	ldccc	3, cr1, [fp]
   10a8c:	5b020000 	blpl	90a94 <__ccfg+0x70aec>
   10a90:	000000a2 	andeq	r0, r0, r2, lsr #1
   10a94:	00004e3e 	andeq	r4, r0, lr, lsr lr
   10a98:	00000011 	andeq	r0, r0, r1, lsl r0
   10a9c:	00012a00 	andeq	r2, r1, r0, lsl #20
   10aa0:	51011200 	mrspl	r1, R9_usr
   10aa4:	5201f345 	andpl	pc, r1, #335544321	; 0x14000001
   10aa8:	01f32540 	mvnseq	r2, r0, asr #10
   10aac:	5201f352 	andpl	pc, r1, #1207959553	; 0x48000001
   10ab0:	2e302540 	cfneg32cs	mvfx2, mvfx0
   10ab4:	16000128 	strne	r0, [r0], -r8, lsr #2
   10ab8:	30244013 	eorcc	r4, r4, r3, lsl r0
   10abc:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
   10ac0:	5201f325 	andpl	pc, r1, #-1811939328	; 0x94000000
   10ac4:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
   10ac8:	282e3025 	stmdacs	lr!, {r0, r2, r5, ip, sp}
   10acc:	13160001 	tstne	r6, #1
   10ad0:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
   10ad4:	5301f325 	movwpl	pc, #4901	; 0x1325	; <UNPREDICTABLE>
   10ad8:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
   10adc:	f3131600 	vmax.u16	d1, d3, d0
   10ae0:	29305301 	ldmdbcs	r0!, {r0, r8, r9, ip, lr}
   10ae4:	16000128 	strne	r0, [r0], -r8, lsr #2
   10ae8:	01122113 	tsteq	r2, r3, lsl r1
   10aec:	01f35150 	mvnseq	r5, r0, asr r1
   10af0:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
   10af4:	23225001 			; <UNDEFINED> instruction: 0x23225001
   10af8:	01f30480 	mvnseq	r0, r0, lsl #9
   10afc:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
   10b00:	f3225001 	vhadd.u32	d5, d2, d1
   10b04:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
   10b08:	01282930 			; <UNDEFINED> instruction: 0x01282930
   10b0c:	23131600 	tstcs	r3, #0, 12
   10b10:	01f30484 	mvnseq	r0, r4, lsl #9
   10b14:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
   10b18:	23225001 			; <UNDEFINED> instruction: 0x23225001
   10b1c:	01f30480 	mvnseq	r0, r0, lsl #9
   10b20:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
   10b24:	f3225001 	vhadd.u32	d5, d2, d1
   10b28:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
   10b2c:	01282930 			; <UNDEFINED> instruction: 0x01282930
   10b30:	f3131600 	vmax.u16	d1, d3, d0
   10b34:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
   10b38:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
   10b3c:	00131600 	andseq	r1, r3, r0, lsl #12
   10b40:	3dae0f00 	stccc	15, cr0, [lr]
   10b44:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
   10b48:	00000001 	andeq	r0, r0, r1
   10b4c:	00002e00 	andeq	r2, r0, r0, lsl #28
   10b50:	1f9c0100 	svcne	0x009c0100
   10b54:	10000004 	andne	r0, r0, r4
   10b58:	00000dc9 	andeq	r0, r0, r9, asr #27
   10b5c:	00a28302 	adceq	r8, r2, r2, lsl #6
   10b60:	4e8a0000 	cdpmi	0, 8, cr0, cr10, cr0, {0}
   10b64:	36100000 	ldrcc	r0, [r0], -r0
   10b68:	0200003d 	andeq	r0, r0, #61	; 0x3d
   10b6c:	0000a283 	andeq	sl, r0, r3, lsl #5
   10b70:	004eab00 	subeq	sl, lr, r0, lsl #22
   10b74:	1de91000 	stclne	0, cr1, [r9]
   10b78:	84020000 	strhi	r0, [r2], #-0
   10b7c:	000000a2 	andeq	r0, r0, r2, lsr #1
   10b80:	00004ecc 	andeq	r4, r0, ip, asr #29
   10b84:	003da410 	eorseq	sl, sp, r0, lsl r4
   10b88:	a2840200 	addge	r0, r4, #0, 4
   10b8c:	1d000000 	stcne	0, cr0, [r0, #-0]
   10b90:	1000004f 	andne	r0, r0, pc, asr #32
   10b94:	00003d9b 	muleq	r0, fp, sp
   10b98:	00978502 	addseq	r8, r7, r2, lsl #10
   10b9c:	4f6e0000 	svcmi	0x006e0000
   10ba0:	16130000 	ldrne	r0, [r3], -r0
   10ba4:	0200003e 	andeq	r0, r0, #62	; 0x3e
   10ba8:	0000a287 	andeq	sl, r0, r7, lsl #5
   10bac:	004f8e00 	subeq	r8, pc, r0, lsl #28
   10bb0:	3d901300 	ldccc	3, cr1, [r0]
   10bb4:	88020000 	stmdahi	r2, {}	; <UNPREDICTABLE>
   10bb8:	000000a2 	andeq	r0, r0, r2, lsr #1
   10bbc:	00005034 	andeq	r5, r0, r4, lsr r0
   10bc0:	00000011 	andeq	r0, r0, r1, lsl r0
   10bc4:	00012a00 	andeq	r2, r1, r0, lsl #20
   10bc8:	51011200 	mrspl	r1, R9_usr
   10bcc:	5201f340 	andpl	pc, r1, #64, 6
   10bd0:	01f32540 	mvnseq	r2, r0, asr #10
   10bd4:	5301f352 	movwpl	pc, #4946	; 0x1352	; <UNPREDICTABLE>
   10bd8:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
   10bdc:	00000f0c 	andeq	r0, r0, ip, lsl #30
   10be0:	01282b80 	smlawbeq	r8, r0, fp, r2
   10be4:	40131600 	andsmi	r1, r3, r0, lsl #12
   10be8:	94007d24 	strls	r7, [r0], #-3364	; 0xfffff2dc
   10bec:	ffff0a02 			; <UNDEFINED> instruction: 0xffff0a02
   10bf0:	5301f31a 	movwpl	pc, #4890	; 0x131a	; <UNPREDICTABLE>
   10bf4:	01f31c40 	mvnseq	r1, r0, asr #24
   10bf8:	5301f353 	movwpl	pc, #4947	; 0x1353	; <UNPREDICTABLE>
   10bfc:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
   10c00:	00000f0c 	andeq	r0, r0, ip, lsl #30
   10c04:	01282b80 	smlawbeq	r8, r0, fp, r2
   10c08:	24131600 	ldrcs	r1, [r3], #-1536	; 0xfffffa00
   10c0c:	50011221 	andpl	r1, r1, r1, lsr #4
   10c10:	5101f363 	tstpl	r1, r3, ror #6	; <UNPREDICTABLE>
   10c14:	01f32431 	mvnseq	r2, r1, lsr r4
   10c18:	80232250 	eorhi	r2, r3, r0, asr r2
   10c1c:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
   10c20:	01f32431 	mvnseq	r2, r1, lsr r4
   10c24:	01f32250 	mvnseq	r2, r0, asr r2
   10c28:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
   10c2c:	000f0c22 	andeq	r0, pc, r2, lsr #24
   10c30:	282c8000 	stmdacs	ip!, {pc}
   10c34:	13160001 	tstne	r6, #1
   10c38:	f3048423 	vshl.u8	d8, d19, d4
   10c3c:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
   10c40:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
   10c44:	f3048023 	vhadd.u8	d8, d4, d19
   10c48:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
   10c4c:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
   10c50:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
   10c54:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
   10c58:	8000000f 	andhi	r0, r0, pc
   10c5c:	0001282c 	andeq	r2, r1, ip, lsr #16
   10c60:	01f31316 	mvnseq	r1, r6, lsl r3
   10c64:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
   10c68:	000f0c22 	andeq	r0, pc, r2, lsr #24
   10c6c:	282b8000 	stmdacs	fp!, {pc}
   10c70:	13160001 	tstne	r6, #1
   10c74:	5c140000 	ldcpl	0, cr0, [r4], {-0}
   10c78:	0100003d 	tsteq	r0, sp, lsr r0
   10c7c:	00970208 	addseq	r0, r7, r8, lsl #4
   10c80:	00000000 	andeq	r0, r0, r0
   10c84:	00340000 	eorseq	r0, r4, r0
   10c88:	9c010000 	stcls	0, cr0, [r1], {-0}
   10c8c:	000004d2 	ldrdeq	r0, [r0], -r2
   10c90:	000dc910 	andeq	ip, sp, r0, lsl r9
   10c94:	a2af0200 	adcge	r0, pc, #0, 4
   10c98:	94000000 	strls	r0, [r0], #-0
   10c9c:	10000050 	andne	r0, r0, r0, asr r0
   10ca0:	00003d36 	andeq	r3, r0, r6, lsr sp
   10ca4:	00a2af02 	adceq	sl, r2, r2, lsl #30
   10ca8:	50b50000 	adcspl	r0, r5, r0
   10cac:	e9100000 	ldmdb	r0, {}	; <UNPREDICTABLE>
   10cb0:	0200001d 	andeq	r0, r0, #29
   10cb4:	0000a2af 	andeq	sl, r0, pc, lsr #5
   10cb8:	0050d600 	subseq	sp, r0, r0, lsl #12
   10cbc:	3e161300 	cdpcc	3, 1, cr1, cr6, cr0, {0}
   10cc0:	b1020000 	mrslt	r0, (UNDEF: 2)
   10cc4:	000000a2 	andeq	r0, r0, r2, lsr #1
   10cc8:	00005113 	andeq	r5, r0, r3, lsl r1
   10ccc:	003d8713 	eorseq	r8, sp, r3, lsl r7
   10cd0:	97b20200 	ldrls	r0, [r2, r0, lsl #4]!
   10cd4:	4d000000 	stcmi	0, cr0, [r0, #-0]
   10cd8:	15000051 	strne	r0, [r0, #-81]	; 0xffffffaf
   10cdc:	000000ed 	andeq	r0, r0, sp, ror #1
   10ce0:	00000000 	andeq	r0, r0, r0
   10ce4:	0000001a 	andeq	r0, r0, sl, lsl r0
   10ce8:	080cca02 	stmdaeq	ip, {r1, r9, fp, lr, pc}
   10cec:	02000001 	andeq	r0, r0, #1
   10cf0:	0000fd0a 	andeq	pc, r0, sl, lsl #26
   10cf4:	00516500 	subseq	r6, r1, r0, lsl #10
   10cf8:	00001600 	andeq	r1, r0, r0, lsl #12
   10cfc:	001a0000 	andseq	r0, sl, r0
   10d00:	130b0000 	movwne	r0, #45056	; 0xb000
   10d04:	9f000001 	svcls	0x00000001
   10d08:	0b000051 	bleq	10e54 <__exidx_end+0xbdac>
   10d0c:	0000011e 	andeq	r0, r0, lr, lsl r1
   10d10:	000051b8 			; <UNDEFINED> instruction: 0x000051b8
   10d14:	0000000d 	andeq	r0, r0, sp
   10d18:	00059400 	andeq	r9, r5, r0, lsl #8
   10d1c:	00000d00 	andeq	r0, r0, r0, lsl #26
   10d20:	059f0000 	ldreq	r0, [pc]	; 10d28 <__exidx_end+0xbc80>
   10d24:	00000000 	andeq	r0, r0, r0
   10d28:	3d3e1400 	cfldrscc	mvf1, [lr, #-0]
   10d2c:	1d010000 	stcne	0, cr0, [r1, #-0]
   10d30:	00009702 	andeq	r9, r0, r2, lsl #14
   10d34:	00000000 	andeq	r0, r0, r0
   10d38:	00004000 	andeq	r4, r0, r0
   10d3c:	949c0100 	ldrls	r0, [ip], #256	; 0x100
   10d40:	10000005 	andne	r0, r0, r5
   10d44:	00000dc9 	andeq	r0, r0, r9, asr #27
   10d48:	00a2dd02 	adceq	sp, r2, r2, lsl #26
   10d4c:	51cf0000 	bicpl	r0, pc, r0
   10d50:	36100000 	ldrcc	r0, [r0], -r0
   10d54:	0200003d 	andeq	r0, r0, #61	; 0x3d
   10d58:	0000a2dd 	ldrdeq	sl, [r0], -sp
   10d5c:	0051f000 	subseq	pc, r1, r0
   10d60:	1de91000 	stclne	0, cr1, [r9]
   10d64:	de020000 	cdple	0, 0, cr0, cr2, cr0, {0}
   10d68:	000000a2 	andeq	r0, r0, r2, lsr #1
   10d6c:	00005211 	andeq	r5, r0, r1, lsl r2
   10d70:	003da410 	eorseq	sl, sp, r0, lsl r4
   10d74:	a2de0200 	sbcsge	r0, lr, #0, 4
   10d78:	54000000 	strpl	r0, [r0], #-0
   10d7c:	13000052 	movwne	r0, #82	; 0x52
   10d80:	00003e16 	andeq	r3, r0, r6, lsl lr
   10d84:	00a2e002 	adceq	lr, r2, r2
   10d88:	52970000 	addspl	r0, r7, #0
   10d8c:	87130000 	ldrhi	r0, [r3, -r0]
   10d90:	0200003d 	andeq	r0, r0, #61	; 0x3d
   10d94:	000097e1 	andeq	r9, r0, r1, ror #15
   10d98:	0052f200 	subseq	pc, r2, r0, lsl #4
   10d9c:	00ed1500 	rsceq	r1, sp, r0, lsl #10
   10da0:	00000000 	andeq	r0, r0, r0
   10da4:	001a0000 	andseq	r0, sl, r0
   10da8:	fa020000 	blx	90db0 <__ccfg+0x70e08>
   10dac:	0001080c 	andeq	r0, r1, ip, lsl #16
   10db0:	fd0a0200 	stc2	2, cr0, [sl, #-0]
   10db4:	15000000 	strne	r0, [r0, #-0]
   10db8:	16000053 			; <UNDEFINED> instruction: 0x16000053
   10dbc:	00000000 	andeq	r0, r0, r0
   10dc0:	0000001a 	andeq	r0, r0, sl, lsl r0
   10dc4:	0001130b 	andeq	r1, r1, fp, lsl #6
   10dc8:	00535500 	subseq	r5, r3, r0, lsl #10
   10dcc:	011e0b00 	tsteq	lr, r0, lsl #22
   10dd0:	536e0000 	cmnpl	lr, #0
   10dd4:	000d0000 	andeq	r0, sp, r0
   10dd8:	94000000 	strls	r0, [r0], #-0
   10ddc:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
   10de0:	00000000 	andeq	r0, r0, r0
   10de4:	0000059f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
   10de8:	17000000 	strne	r0, [r0, -r0]
   10dec:	00002595 	muleq	r0, r5, r5
   10df0:	00a26a05 	adceq	r6, r2, r5, lsl #20
   10df4:	a4170000 	ldrge	r0, [r7], #-0
   10df8:	05000025 	streq	r0, [r0, #-37]	; 0xffffffdb
   10dfc:	0000a284 	andeq	sl, r0, r4, lsl #5
   10e00:	0f310000 	svceq	0x00310000
   10e04:	00040000 	andeq	r0, r4, r0
   10e08:	00003f5c 	andeq	r3, r0, ip, asr pc
   10e0c:	40ea0104 	rscmi	r0, sl, r4, lsl #2
   10e10:	030c0000 	movweq	r0, #49152	; 0xc000
   10e14:	85000040 	strhi	r0, [r0, #-64]	; 0xffffffc0
   10e18:	64000041 	strvs	r0, [r0], #-65	; 0xffffffbf
   10e1c:	aa000041 	bge	10f28 <__exidx_end+0xbe80>
   10e20:	0d000000 	stceq	0, cr0, [r0, #-0]
   10e24:	02000086 	andeq	r0, r0, #134	; 0x86
   10e28:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
   10e2c:	a5030074 	strge	r0, [r3, #-116]	; 0xffffff8c
   10e30:	0200002e 	andeq	r0, r0, #46	; 0x2e
   10e34:	003817d8 	ldrsbteq	r1, [r8], -r8
   10e38:	04040000 	streq	r0, [r4], #-0
   10e3c:	0003d407 	andeq	sp, r3, r7, lsl #8
   10e40:	3f970500 	svccc	0x00970500
   10e44:	48020000 	stmdami	r2, {}	; <UNPREDICTABLE>
   10e48:	00381801 	eorseq	r1, r8, r1, lsl #16
   10e4c:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
   10e50:	00063205 	andeq	r3, r6, r5, lsl #4
   10e54:	04080400 	streq	r0, [r8], #-1024	; 0xfffffc00
   10e58:	00003fbb 			; <UNDEFINED> instruction: 0x00003fbb
   10e5c:	00094205 	andeq	r4, r9, r5, lsl #4
   10e60:	01650200 	cmneq	r5, r0, lsl #4
   10e64:	00003817 	andeq	r3, r0, r7, lsl r8
   10e68:	06010400 	streq	r0, [r1], -r0, lsl #8
   10e6c:	0000098a 	andeq	r0, r0, sl, lsl #19
   10e70:	88080104 	stmdahi	r8, {r2, r8}
   10e74:	04000009 	streq	r0, [r0], #-9
   10e78:	08440502 	stmdaeq	r4, {r1, r8, sl}^
   10e7c:	02040000 	andeq	r0, r4, #0
   10e80:	000a8007 	andeq	r8, sl, r7
   10e84:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
   10e88:	00000637 	andeq	r0, r0, r7, lsr r6
   10e8c:	00008306 	andeq	r8, r0, r6, lsl #6
   10e90:	07040400 	streq	r0, [r4, -r0, lsl #8]
   10e94:	000003cf 	andeq	r0, r0, pc, asr #7
   10e98:	ca070804 	bgt	1d2eb0 <__ccfg+0x1b2f08>
   10e9c:	03000003 	movweq	r0, #3
   10ea0:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
   10ea4:	830e2e03 	movwhi	r2, #60931	; 0xee03
   10ea8:	03000000 	movweq	r0, #0
   10eac:	000002a3 	andeq	r0, r0, r3, lsr #5
   10eb0:	830e7403 	movwhi	r7, #58371	; 0xe403
   10eb4:	07000000 	streq	r0, [r0, -r0]
   10eb8:	03a50304 			; <UNDEFINED> instruction: 0x03a50304
   10ebc:	000000d7 	ldrdeq	r0, [r0], -r7
   10ec0:	0005c808 	andeq	ip, r5, r8, lsl #16
   10ec4:	0ca70300 	stceq	3, cr0, [r7]
   10ec8:	0000005a 	andeq	r0, r0, sl, asr r0
   10ecc:	00088b08 	andeq	r8, r8, r8, lsl #22
   10ed0:	13a80300 			; <UNDEFINED> instruction: 0x13a80300
   10ed4:	000000d7 	ldrdeq	r0, [r0], -r7
   10ed8:	006e0900 	rsbeq	r0, lr, r0, lsl #18
   10edc:	00e70000 	rsceq	r0, r7, r0
   10ee0:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
   10ee4:	03000000 	movweq	r0, #0
   10ee8:	03080b00 	movweq	r0, #35584	; 0x8b00
   10eec:	010b09a2 	smlatbeq	fp, r2, r9, r0
   10ef0:	5e0c0000 	cdppl	0, 0, cr0, cr12, cr0, {0}
   10ef4:	03000003 	movweq	r0, #3
   10ef8:	002507a4 	eoreq	r0, r5, r4, lsr #15
   10efc:	0c000000 	stceq	0, cr0, [r0], {-0}
   10f00:	000004eb 	andeq	r0, r0, fp, ror #9
   10f04:	b505a903 	strlt	sl, [r5, #-2307]	; 0xfffff6fd
   10f08:	04000000 	streq	r0, [r0], #-0
   10f0c:	07350300 	ldreq	r0, [r5, -r0, lsl #6]!
   10f10:	aa030000 	bge	d0f18 <__ccfg+0xb0f70>
   10f14:	0000e703 	andeq	lr, r0, r3, lsl #14
   10f18:	0e040d00 	cdpeq	13, 0, cr0, cr4, cr0, {0}
   10f1c:	00000117 	andeq	r0, r0, r7, lsl r1
   10f20:	00068a03 	andeq	r8, r6, r3, lsl #20
   10f24:	19160400 	ldmdbne	r6, {sl}
   10f28:	0000008f 	andeq	r0, r0, pc, lsl #1
   10f2c:	00021603 	andeq	r1, r2, r3, lsl #12
   10f30:	0d0c0500 	cfstr32eq	mvfx0, [ip, #-0]
   10f34:	00000025 	andeq	r0, r0, r5, lsr #32
   10f38:	00059603 	andeq	r9, r5, r3, lsl #12
   10f3c:	1b230400 	blne	8d1f44 <__ccfg+0x8b1f9c>
   10f40:	0000012a 	andeq	r0, r0, sl, lsr #2
   10f44:	0002e30f 	andeq	lr, r2, pc, lsl #6
   10f48:	34041800 	strcc	r1, [r4], #-2048	; 0xfffff800
   10f4c:	00019c08 	andeq	r9, r1, r8, lsl #24
   10f50:	0b160c00 	bleq	593f58 <__ccfg+0x573fb0>
   10f54:	36040000 	strcc	r0, [r4], -r0
   10f58:	00019c13 	andeq	r9, r1, r3, lsl ip
   10f5c:	5f100000 	svcpl	0x00100000
   10f60:	3704006b 	strcc	r0, [r4, -fp, rrx]
   10f64:	00002507 	andeq	r2, r0, r7, lsl #10
   10f68:	f10c0400 			; <UNDEFINED> instruction: 0xf10c0400
   10f6c:	04000008 	streq	r0, [r0], #-8
   10f70:	00250b37 	eoreq	r0, r5, r7, lsr fp
   10f74:	0c080000 	stceq	0, cr0, [r8], {-0}
   10f78:	00003f86 	andeq	r3, r0, r6, lsl #31
   10f7c:	25143704 	ldrcs	r3, [r4, #-1796]	; 0xfffff8fc
   10f80:	0c000000 	stceq	0, cr0, [r0], {-0}
   10f84:	0003f60c 	andeq	pc, r3, ip, lsl #12
   10f88:	1b370400 	blne	dd1f90 <__ccfg+0xdb1fe8>
   10f8c:	00000025 	andeq	r0, r0, r5, lsr #32
   10f90:	785f1010 	ldmdavc	pc, {r4, ip}^	; <UNPREDICTABLE>
   10f94:	0b380400 	bleq	e11f9c <__ccfg+0xdf1ff4>
   10f98:	000001a2 	andeq	r0, r0, r2, lsr #3
   10f9c:	04110014 	ldreq	r0, [r1], #-20	; 0xffffffec
   10fa0:	00000142 	andeq	r0, r0, r2, asr #2
   10fa4:	00011e09 	andeq	r1, r1, r9, lsl #28
   10fa8:	0001b200 	andeq	fp, r1, r0, lsl #4
   10fac:	00380a00 	eorseq	r0, r8, r0, lsl #20
   10fb0:	00000000 	andeq	r0, r0, r0
   10fb4:	00090c0f 	andeq	r0, r9, pc, lsl #24
   10fb8:	3c042400 	cfstrscc	mvf2, [r4], {-0}
   10fbc:	00023508 	andeq	r3, r2, r8, lsl #10
   10fc0:	04860c00 	streq	r0, [r6], #3072	; 0xc00
   10fc4:	3e040000 	cdpcc	0, 0, cr0, cr4, cr0, {0}
   10fc8:	00002509 	andeq	r2, r0, r9, lsl #10
   10fcc:	900c0000 	andls	r0, ip, r0
   10fd0:	04000003 	streq	r0, [r0], #-3
   10fd4:	0025093f 	eoreq	r0, r5, pc, lsr r9
   10fd8:	0c040000 	stceq	0, cr0, [r4], {-0}
   10fdc:	00000339 	andeq	r0, r0, r9, lsr r3
   10fe0:	25094004 	strcs	r4, [r9, #-4]
   10fe4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   10fe8:	00054c0c 	andeq	r4, r5, ip, lsl #24
   10fec:	09410400 	stmdbeq	r1, {sl}^
   10ff0:	00000025 	andeq	r0, r0, r5, lsr #32
   10ff4:	07be0c0c 	ldreq	r0, [lr, ip, lsl #24]!
   10ff8:	42040000 	andmi	r0, r4, #0
   10ffc:	00002509 	andeq	r2, r0, r9, lsl #10
   11000:	a50c1000 	strge	r1, [ip, #-0]
   11004:	04000008 	streq	r0, [r0], #-8
   11008:	00250943 	eoreq	r0, r5, r3, asr #18
   1100c:	0c140000 	ldceq	0, cr0, [r4], {-0}
   11010:	000002fe 	strdeq	r0, [r0], -lr
   11014:	25094404 	strcs	r4, [r9, #-1028]	; 0xfffffbfc
   11018:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   1101c:	00048f0c 	andeq	r8, r4, ip, lsl #30
   11020:	09450400 	stmdbeq	r5, {sl}^
   11024:	00000025 	andeq	r0, r0, r5, lsr #32
   11028:	07530c1c 	smmlaeq	r3, ip, ip, r0
   1102c:	46040000 	strmi	r0, [r4], -r0
   11030:	00002509 	andeq	r2, r0, r9, lsl #10
   11034:	12002000 	andne	r2, r0, #0
   11038:	00000061 	andeq	r0, r0, r1, rrx
   1103c:	4f040108 	svcmi	0x00040108
   11040:	00027a08 	andeq	r7, r2, r8, lsl #20
   11044:	0a4a0c00 	beq	129404c <__ccfg+0x12740a4>
   11048:	50040000 	andpl	r0, r4, r0
   1104c:	00027a0a 	andeq	r7, r2, sl, lsl #20
   11050:	6c0c0000 	stcvs	0, cr0, [ip], {-0}
   11054:	04000009 	streq	r0, [r0], #-9
   11058:	027a0951 	rsbseq	r0, sl, #1327104	; 0x144000
   1105c:	13800000 	orrne	r0, r0, #0
   11060:	00000ab3 			; <UNDEFINED> instruction: 0x00000ab3
   11064:	1e0a5304 	cdpne	3, 0, cr5, cr10, cr4, {0}
   11068:	00000001 	andeq	r0, r0, r1
   1106c:	0b011301 	bleq	55c78 <__ccfg+0x35cd0>
   11070:	56040000 	strpl	r0, [r4], -r0
   11074:	00011e0a 	andeq	r1, r1, sl, lsl #28
   11078:	00010400 	andeq	r0, r1, r0, lsl #8
   1107c:	00011709 	andeq	r1, r1, r9, lsl #14
   11080:	00028a00 	andeq	r8, r2, r0, lsl #20
   11084:	00380a00 	eorseq	r0, r8, r0, lsl #20
   11088:	001f0000 	andseq	r0, pc, r0
   1108c:	00082b12 	andeq	r2, r8, r2, lsl fp
   11090:	04019000 	streq	r9, [r1], #-0
   11094:	02cd0862 	sbceq	r0, sp, #6422528	; 0x620000
   11098:	160c0000 	strne	r0, [ip], -r0
   1109c:	0400000b 	streq	r0, [r0], #-11
   110a0:	02cd1263 	sbceq	r1, sp, #805306374	; 0x30000006
   110a4:	0c000000 	stceq	0, cr0, [r0], {-0}
   110a8:	0000049e 	muleq	r0, lr, r4
   110ac:	25066404 	strcs	r6, [r6, #-1028]	; 0xfffffbfc
   110b0:	04000000 	streq	r0, [r0], #-0
   110b4:	0002ab0c 	andeq	sl, r2, ip, lsl #22
   110b8:	09660400 	stmdbeq	r6!, {sl}^
   110bc:	000002d3 	ldrdeq	r0, [r0], -r3
   110c0:	00610c08 	rsbeq	r0, r1, r8, lsl #24
   110c4:	67040000 	strvs	r0, [r4, -r0]
   110c8:	0002351e 	andeq	r3, r2, lr, lsl r5
   110cc:	11008800 	tstne	r0, r0, lsl #16
   110d0:	00028a04 	andeq	r8, r2, r4, lsl #20
   110d4:	02e30900 	rsceq	r0, r3, #0, 18
   110d8:	02e30000 	rsceq	r0, r3, #0
   110dc:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
   110e0:	1f000000 	svcne	0x00000000
   110e4:	e9041100 	stmdb	r4, {r8, ip}
   110e8:	14000002 	strne	r0, [r0], #-2
   110ec:	000a040f 	andeq	r0, sl, pc, lsl #8
   110f0:	7a040800 	bvc	1130f8 <__ccfg+0xf3150>
   110f4:	00031208 	andeq	r1, r3, r8, lsl #4
   110f8:	064e0c00 	strbeq	r0, [lr], -r0, lsl #24
   110fc:	7b040000 	blvc	111104 <__ccfg+0xf115c>
   11100:	00031211 	andeq	r1, r3, r1, lsl r2
   11104:	a50c0000 	strge	r0, [ip, #-0]
   11108:	04000019 	streq	r0, [r0], #-25	; 0xffffffe7
   1110c:	0025067c 	eoreq	r0, r5, ip, ror r6
   11110:	00040000 	andeq	r0, r4, r0
   11114:	006e0411 	rsbeq	r0, lr, r1, lsl r4
   11118:	ee0f0000 	cdp	0, 0, cr0, cr15, cr0, {0}
   1111c:	68000003 	stmdavs	r0, {r0, r1}
   11120:	5b08ba04 	blpl	23f938 <__ccfg+0x21f990>
   11124:	10000004 	andne	r0, r0, r4
   11128:	0400705f 	streq	r7, [r0], #-95	; 0xffffffa1
   1112c:	031212bb 	tsteq	r2, #-1342177269	; 0xb000000b
   11130:	10000000 	andne	r0, r0, r0
   11134:	0400725f 	streq	r7, [r0], #-607	; 0xfffffda1
   11138:	002507bc 	strhteq	r0, [r5], -ip
   1113c:	10040000 	andne	r0, r4, r0
   11140:	0400775f 	streq	r7, [r0], #-1887	; 0xfffff8a1
   11144:	002507bd 	strhteq	r0, [r5], -sp
   11148:	0c080000 	stceq	0, cr0, [r8], {-0}
   1114c:	000001f3 	strdeq	r0, [r0], -r3
   11150:	7509be04 	strvc	fp, [r9, #-3588]	; 0xfffff1fc
   11154:	0c000000 	stceq	0, cr0, [r0], {-0}
   11158:	0006bf0c 	andeq	fp, r6, ip, lsl #30
   1115c:	09bf0400 	ldmibeq	pc!, {sl}	; <UNPREDICTABLE>
   11160:	00000075 	andeq	r0, r0, r5, ror r0
   11164:	625f100e 	subsvs	r1, pc, #14
   11168:	c0040066 	andgt	r0, r4, r6, rrx
   1116c:	0002ea11 	andeq	lr, r2, r1, lsl sl
   11170:	ea0c1000 	b	315178 <__ccfg+0x2f51d0>
   11174:	04000001 	streq	r0, [r0], #-1
   11178:	002507c1 	eoreq	r0, r5, r1, asr #15
   1117c:	0c180000 	ldceq	0, cr0, [r8], {-0}
   11180:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
   11184:	170ac804 	strne	ip, [sl, -r4, lsl #16]
   11188:	1c000001 	stcne	0, cr0, [r0], {1}
   1118c:	0019350c 	andseq	r3, r9, ip, lsl #10
   11190:	1dca0400 	cfstrdne	mvd0, [sl]
   11194:	000005df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   11198:	18fc0c20 	ldmne	ip!, {r5, sl, fp}^
   1119c:	cc040000 	stcgt	0, cr0, [r4], {-0}
   111a0:	0006091d 	andeq	r0, r6, sp, lsl r9
   111a4:	270c2400 	strcs	r2, [ip, -r0, lsl #8]
   111a8:	0400000b 	streq	r0, [r0], #-11
   111ac:	062d0dcf 	strteq	r0, [sp], -pc, asr #27
   111b0:	0c280000 	stceq	0, cr0, [r8], #-0
   111b4:	000018ea 	andeq	r1, r0, sl, ror #17
   111b8:	4709d004 	strmi	sp, [r9, -r4]
   111bc:	2c000006 	stccs	0, cr0, [r0], {6}
   111c0:	62755f10 	rsbsvs	r5, r5, #16, 30	; 0x40
   111c4:	11d30400 	bicsne	r0, r3, r0, lsl #8
   111c8:	000002ea 	andeq	r0, r0, sl, ror #5
   111cc:	755f1030 	ldrbvc	r1, [pc, #-48]	; 111a4 <__exidx_end+0xc0fc>
   111d0:	d4040070 	strle	r0, [r4], #-112	; 0xffffff90
   111d4:	00031212 	andeq	r1, r3, r2, lsl r2
   111d8:	5f103800 	svcpl	0x00103800
   111dc:	04007275 	streq	r7, [r0], #-629	; 0xfffffd8b
   111e0:	002507d5 	ldrdeq	r0, [r5], -r5	; <UNPREDICTABLE>
   111e4:	0c3c0000 	ldceq	0, cr0, [ip], #-0
   111e8:	00000b3e 	andeq	r0, r0, lr, lsr fp
   111ec:	4d11d804 	ldcmi	8, cr13, [r1, #-16]
   111f0:	40000006 	andmi	r0, r0, r6
   111f4:	000acd0c 	andeq	ip, sl, ip, lsl #26
   111f8:	11d90400 	bicsne	r0, r9, r0, lsl #8
   111fc:	0000065d 	andeq	r0, r0, sp, asr r6
   11200:	6c5f1043 	mrrcvs	0, 4, r1, pc, cr3	; <UNPREDICTABLE>
   11204:	dc040062 	stcle	0, cr0, [r4], {98}	; 0x62
   11208:	0002ea11 	andeq	lr, r2, r1, lsl sl
   1120c:	030c4400 	movweq	r4, #50176	; 0xc400
   11210:	04000009 	streq	r0, [r0], #-9
   11214:	002507df 	ldrdeq	r0, [r5], -pc	; <UNPREDICTABLE>
   11218:	0c4c0000 	mareq	acc0, r0, ip
   1121c:	0000043b 	andeq	r0, r0, fp, lsr r4
   11220:	9d0ae004 	stcls	0, cr14, [sl, #-16]
   11224:	50000000 	andpl	r0, r0, r0
   11228:	0044040c 	subeq	r0, r4, ip, lsl #8
   1122c:	12e30400 	rscne	r0, r3, #0, 8
   11230:	00000479 	andeq	r0, r0, r9, ror r4
   11234:	091b0c54 	ldmdbeq	fp, {r2, r4, r6, sl, fp}
   11238:	e7040000 	str	r0, [r4, -r0]
   1123c:	0001360c 	andeq	r3, r1, ip, lsl #12
   11240:	330c5800 	movwcc	r5, #51200	; 0xc800
   11244:	04000008 	streq	r0, [r0], #-8
   11248:	010b0ee9 	smlatteq	fp, r9, lr, r0
   1124c:	0c5c0000 	mraeq	r0, ip, acc0
   11250:	00000af9 	strdeq	r0, [r0], -r9
   11254:	2509ea04 	strcs	lr, [r9, #-2564]	; 0xfffff5fc
   11258:	64000000 	strvs	r0, [r0], #-0
   1125c:	00251500 	eoreq	r1, r5, r0, lsl #10
   11260:	04790000 	ldrbteq	r0, [r9], #-0
   11264:	79160000 	ldmdbvc	r6, {}	; <UNPREDICTABLE>
   11268:	16000004 	strne	r0, [r0], -r4
   1126c:	00000117 	andeq	r0, r0, r7, lsl r1
   11270:	0005cd16 	andeq	ip, r5, r6, lsl sp
   11274:	00251600 	eoreq	r1, r5, r0, lsl #12
   11278:	11000000 	mrsne	r0, (UNDEF: 0)
   1127c:	00048404 	andeq	r8, r4, r4, lsl #8
   11280:	04790600 	ldrbteq	r0, [r9], #-1536	; 0xfffffa00
   11284:	42170000 	andsmi	r0, r7, #0
   11288:	28000044 	stmdacs	r0, {r2, r6}
   1128c:	02650404 	rsbeq	r0, r5, #4, 8	; 0x4000000
   11290:	0005cd08 	andeq	ip, r5, r8, lsl #26
   11294:	07841800 	streq	r1, [r4, r0, lsl #16]
   11298:	67040000 	strvs	r0, [r4, -r0]
   1129c:	00250702 	eoreq	r0, r5, r2, lsl #14
   112a0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   112a4:	0000061c 	andeq	r0, r0, ip, lsl r6
   112a8:	0b026c04 	bleq	ac2c0 <__ccfg+0x8c318>
   112ac:	000006b9 			; <UNDEFINED> instruction: 0x000006b9
   112b0:	028d1804 	addeq	r1, sp, #4, 16	; 0x40000
   112b4:	6c040000 	stcvs	0, cr0, [r4], {-0}
   112b8:	06b91402 	ldrteq	r1, [r9], r2, lsl #8
   112bc:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
   112c0:	00000b2d 	andeq	r0, r0, sp, lsr #22
   112c4:	1e026c04 	cdpne	12, 0, cr6, cr2, cr4, {0}
   112c8:	000006b9 			; <UNDEFINED> instruction: 0x000006b9
   112cc:	0499180c 	ldreq	r1, [r9], #2060	; 0x80c
   112d0:	6e040000 	cdpvs	0, 0, cr0, cr4, cr0, {0}
   112d4:	00250802 	eoreq	r0, r5, r2, lsl #16
   112d8:	18100000 	ldmdane	r0, {}	; <UNPREDICTABLE>
   112dc:	0000044b 	andeq	r0, r0, fp, asr #8
   112e0:	08026f04 	stmdaeq	r2, {r2, r8, r9, sl, fp, sp, lr}
   112e4:	000008b9 			; <UNDEFINED> instruction: 0x000008b9
   112e8:	0ae01814 	beq	ff817340 <_estack+0xdf812340>
   112ec:	72040000 	andvc	r0, r4, #0
   112f0:	00250702 	eoreq	r0, r5, r2, lsl #14
   112f4:	18300000 	ldmdane	r0!, {}	; <UNPREDICTABLE>
   112f8:	00003e32 	andeq	r3, r0, r2, lsr lr
   112fc:	16027304 	strne	r7, [r2], -r4, lsl #6
   11300:	00000950 	andeq	r0, r0, r0, asr r9
   11304:	05e21834 	strbeq	r1, [r2, #2100]!	; 0x834
   11308:	75040000 	strvc	r0, [r4, #-0]
   1130c:	00250702 	eoreq	r0, r5, r2, lsl #14
   11310:	18380000 	ldmdane	r8!, {}	; <UNPREDICTABLE>
   11314:	0000072b 	andeq	r0, r0, fp, lsr #14
   11318:	0a027704 	beq	aef30 <__ccfg+0x8ef88>
   1131c:	00000961 	andeq	r0, r0, r1, ror #18
   11320:	0308183c 	movweq	r1, #34876	; 0x883c
   11324:	7a040000 	bvc	11132c <__ccfg+0xf1384>
   11328:	019c1302 	orrseq	r1, ip, r2, lsl #6
   1132c:	18400000 	stmdane	r0, {}^	; <UNPREDICTABLE>
   11330:	000003b4 			; <UNDEFINED> instruction: 0x000003b4
   11334:	07027b04 	streq	r7, [r2, -r4, lsl #22]
   11338:	00000025 	andeq	r0, r0, r5, lsr #32
   1133c:	04f31844 	ldrbteq	r1, [r3], #2116	; 0x844
   11340:	7c040000 	stcvc	0, cr0, [r4], {-0}
   11344:	019c1302 	orrseq	r1, ip, r2, lsl #6
   11348:	18480000 	stmdane	r8, {}^	; <UNPREDICTABLE>
   1134c:	00000654 	andeq	r0, r0, r4, asr r6
   11350:	14027d04 	strne	r7, [r2], #-3332	; 0xfffff2fc
   11354:	00000967 	andeq	r0, r0, r7, ror #18
   11358:	08e9184c 	stmiaeq	r9!, {r2, r3, r6, fp, ip}^
   1135c:	80040000 	andhi	r0, r4, r0
   11360:	00250702 	eoreq	r0, r5, r2, lsl #14
   11364:	18500000 	ldmdane	r0, {}^	; <UNPREDICTABLE>
   11368:	00000980 	andeq	r0, r0, r0, lsl #19
   1136c:	09028104 	stmdbeq	r2, {r2, r8, pc}
   11370:	000005cd 	andeq	r0, r0, sp, asr #11
   11374:	099a1854 	ldmibeq	sl, {r2, r4, r6, fp, ip}
   11378:	a4040000 	strge	r0, [r4], #-0
   1137c:	08940702 	ldmeq	r4, {r1, r8, r9, sl}
   11380:	19580000 	ldmdbne	r8, {}^	; <UNPREDICTABLE>
   11384:	0000082b 	andeq	r0, r0, fp, lsr #16
   11388:	1302a804 	movwne	sl, #10244	; 0x2804
   1138c:	000002cd 	andeq	r0, r0, sp, asr #5
   11390:	6f190148 	svcvs	0x00190148
   11394:	04000005 	streq	r0, [r0], #-5
   11398:	8a1202a9 	bhi	491e44 <__ccfg+0x471e9c>
   1139c:	4c000002 	stcmi	0, cr0, [r0], {2}
   113a0:	05561901 	ldrbeq	r1, [r6, #-2305]	; 0xfffff6ff
   113a4:	ad040000 	stcge	0, cr0, [r4, #-0]
   113a8:	09780c02 	ldmdbeq	r8!, {r1, sl, fp}^
   113ac:	02dc0000 	sbcseq	r0, ip, #0
   113b0:	000a2719 	andeq	r2, sl, r9, lsl r7
   113b4:	02b20400 	adcseq	r0, r2, #0, 8
   113b8:	00067a10 	andeq	r7, r6, r0, lsl sl
   113bc:	1902e000 	stmdbne	r2, {sp, lr, pc}
   113c0:	0000086c 	andeq	r0, r0, ip, ror #16
   113c4:	0a02b404 	beq	be3dc <__ccfg+0x9e434>
   113c8:	00000984 	andeq	r0, r0, r4, lsl #19
   113cc:	110002ec 	smlattne	r0, ip, r2, r0
   113d0:	0005d304 	andeq	sp, r5, r4, lsl #6
   113d4:	08010400 	stmdaeq	r1, {sl}
   113d8:	00000991 	muleq	r0, r1, r9
   113dc:	0005d306 	andeq	sp, r5, r6, lsl #6
   113e0:	5b041100 	blpl	1157e8 <__ccfg+0xf5840>
   113e4:	15000004 	strne	r0, [r0, #-4]
   113e8:	00000025 	andeq	r0, r0, r5, lsr #32
   113ec:	00000603 	andeq	r0, r0, r3, lsl #12
   113f0:	00047916 	andeq	r7, r4, r6, lsl r9
   113f4:	01171600 	tsteq	r7, r0, lsl #12
   113f8:	03160000 	tsteq	r6, #0
   113fc:	16000006 	strne	r0, [r0], -r6
   11400:	00000025 	andeq	r0, r0, r5, lsr #32
   11404:	da041100 	ble	11580c <__ccfg+0xf5864>
   11408:	11000005 	tstne	r0, r5
   1140c:	0005e504 	andeq	lr, r5, r4, lsl #10
   11410:	00a91500 	adceq	r1, r9, r0, lsl #10
   11414:	062d0000 	strteq	r0, [sp], -r0
   11418:	79160000 	ldmdbvc	r6, {}	; <UNPREDICTABLE>
   1141c:	16000004 	strne	r0, [r0], -r4
   11420:	00000117 	andeq	r0, r0, r7, lsl r1
   11424:	0000a916 	andeq	sl, r0, r6, lsl r9
   11428:	00251600 	eoreq	r1, r5, r0, lsl #12
   1142c:	11000000 	mrsne	r0, (UNDEF: 0)
   11430:	00060f04 	andeq	r0, r6, r4, lsl #30
   11434:	00251500 	eoreq	r1, r5, r0, lsl #10
   11438:	06470000 	strbeq	r0, [r7], -r0
   1143c:	79160000 	ldmdbvc	r6, {}	; <UNPREDICTABLE>
   11440:	16000004 	strne	r0, [r0], -r4
   11444:	00000117 	andeq	r0, r0, r7, lsl r1
   11448:	33041100 	movwcc	r1, #16640	; 0x4100
   1144c:	09000006 	stmdbeq	r0, {r1, r2}
   11450:	0000006e 	andeq	r0, r0, lr, rrx
   11454:	0000065d 	andeq	r0, r0, sp, asr r6
   11458:	0000380a 	andeq	r3, r0, sl, lsl #16
   1145c:	09000200 	stmdbeq	r0, {r9}
   11460:	0000006e 	andeq	r0, r0, lr, rrx
   11464:	0000066d 	andeq	r0, r0, sp, ror #12
   11468:	0000380a 	andeq	r3, r0, sl, lsl #16
   1146c:	05000000 	streq	r0, [r0, #-0]
   11470:	00000429 	andeq	r0, r0, r9, lsr #8
   11474:	1a012404 	bne	5a48c <__ccfg+0x3a4e4>
   11478:	00000318 	andeq	r0, r0, r8, lsl r3
   1147c:	0044581a 	subeq	r5, r4, sl, lsl r8
   11480:	28040c00 	stmdacs	r4, {sl, fp}
   11484:	06b30801 	ldrteq	r0, [r3], r1, lsl #16
   11488:	16180000 	ldrne	r0, [r8], -r0
   1148c:	0400000b 	streq	r0, [r0], #-11
   11490:	b311012a 	tstlt	r1, #-2147483638	; 0x8000000a
   11494:	00000006 	andeq	r0, r0, r6
   11498:	00093b18 	andeq	r3, r9, r8, lsl fp
   1149c:	012b0400 			; <UNDEFINED> instruction: 0x012b0400
   114a0:	00002507 	andeq	r2, r0, r7, lsl #10
   114a4:	ce180400 	cfmulsgt	mvf0, mvf8, mvf0
   114a8:	04000005 	streq	r0, [r0], #-5
   114ac:	b90b012c 	stmdblt	fp, {r2, r3, r5, r8}
   114b0:	08000006 	stmdaeq	r0, {r1, r2}
   114b4:	7a041100 	bvc	1158bc <__ccfg+0xf5914>
   114b8:	11000006 	tstne	r0, r6
   114bc:	00066d04 	andeq	r6, r6, r4, lsl #26
   114c0:	03a01a00 	moveq	r1, #0, 20
   114c4:	040e0000 	streq	r0, [lr], #-0
   114c8:	f8080144 			; <UNDEFINED> instruction: 0xf8080144
   114cc:	18000006 	stmdane	r0, {r1, r2}
   114d0:	0000125e 	andeq	r1, r0, lr, asr r2
   114d4:	12014504 	andne	r4, r1, #4, 10	; 0x1000000
   114d8:	000006f8 	strdeq	r0, [r0], -r8
   114dc:	06791800 	ldrbteq	r1, [r9], -r0, lsl #16
   114e0:	46040000 	strmi	r0, [r4], -r0
   114e4:	06f81201 	ldrbteq	r1, [r8], r1, lsl #4
   114e8:	18060000 	stmdane	r6, {}	; <UNPREDICTABLE>
   114ec:	00001103 	andeq	r1, r0, r3, lsl #2
   114f0:	12014704 	andne	r4, r1, #4, 14	; 0x100000
   114f4:	0000007c 	andeq	r0, r0, ip, ror r0
   114f8:	7c09000c 	stcvc	0, cr0, [r9], {12}
   114fc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   11500:	0a000007 	beq	11524 <__exidx_end+0xc47c>
   11504:	00000038 	andeq	r0, r0, r8, lsr r0
   11508:	d01b0002 	andsle	r0, fp, r2
   1150c:	07028504 	streq	r8, [r2, -r4, lsl #10]
   11510:	0000081d 	andeq	r0, r0, sp, lsl r8
   11514:	000ad318 	andeq	sp, sl, r8, lsl r3
   11518:	02870400 	addeq	r0, r7, #0, 8
   1151c:	00003818 	andeq	r3, r0, r8, lsl r8
   11520:	2f180000 	svccs	0x00180000
   11524:	0400000a 	streq	r0, [r0], #-10
   11528:	cd120288 	lfmgt	f0, 4, [r2, #-544]	; 0xfffffde0
   1152c:	04000005 	streq	r0, [r0], #-5
   11530:	0003e118 	andeq	lr, r3, r8, lsl r1
   11534:	02890400 	addeq	r0, r9, #0, 8
   11538:	00081d10 	andeq	r1, r8, r0, lsl sp
   1153c:	bd180800 	ldclt	8, cr0, [r8, #-0]
   11540:	04000008 	streq	r0, [r0], #-8
   11544:	b217028a 	andslt	r0, r7, #-1610612728	; 0xa0000008
   11548:	24000001 	strcs	r0, [r0], #-1
   1154c:	00062318 	andeq	r2, r6, r8, lsl r3
   11550:	028b0400 	addeq	r0, fp, #0, 8
   11554:	0000250f 	andeq	r2, r0, pc, lsl #10
   11558:	11184800 	tstne	r8, r0, lsl #16
   1155c:	0400000b 	streq	r0, [r0], #-11
   11560:	962c028c 	strtls	r0, [ip], -ip, lsl #5
   11564:	50000000 	andpl	r0, r0, r0
   11568:	00008518 	andeq	r8, r0, r8, lsl r5
   1156c:	028d0400 	addeq	r0, sp, #0, 8
   11570:	0006bf1a 	andeq	fp, r6, sl, lsl pc
   11574:	2b185800 	blcs	62757c <__ccfg+0x6075d4>
   11578:	04000005 	streq	r0, [r0], #-5
   1157c:	0b16028e 	bleq	591fbc <__ccfg+0x572014>
   11580:	68000001 	stmdavs	r0, {r0}
   11584:	000a3c18 	andeq	r3, sl, r8, lsl ip
   11588:	028f0400 	addeq	r0, pc, #0, 8
   1158c:	00010b16 	andeq	r0, r1, r6, lsl fp
   11590:	6f187000 	svcvs	0x00187000
   11594:	04000000 	streq	r0, [r0], #-0
   11598:	0b160290 	bleq	591fe0 <__ccfg+0x572038>
   1159c:	78000001 	stmdavc	r0, {r0}
   115a0:	0008f918 	andeq	pc, r8, r8, lsl r9	; <UNPREDICTABLE>
   115a4:	02910400 	addseq	r0, r1, #0, 8
   115a8:	00082d10 	andeq	r2, r8, r0, lsl sp
   115ac:	be188000 	cdplt	0, 1, cr8, cr8, cr0, {0}
   115b0:	04000003 	streq	r0, [r0], #-3
   115b4:	3d100292 	lfmcc	f0, 4, [r0, #-584]	; 0xfffffdb8
   115b8:	88000008 	stmdahi	r0, {r3}
   115bc:	0009bd18 	andeq	fp, r9, r8, lsl sp
   115c0:	02930400 	addseq	r0, r3, #0, 8
   115c4:	0000250f 	andeq	r2, r0, pc, lsl #10
   115c8:	6118a000 	tstvs	r8, r0
   115cc:	04000002 	streq	r0, [r0], #-2
   115d0:	0b160294 	bleq	592028 <__ccfg+0x572080>
   115d4:	a4000001 	strge	r0, [r0], #-1
   115d8:	00056018 	andeq	r6, r5, r8, lsl r0
   115dc:	02950400 	addseq	r0, r5, #0, 8
   115e0:	00010b16 	andeq	r0, r1, r6, lsl fp
   115e4:	a318ac00 	tstge	r8, #0, 24
   115e8:	04000004 	streq	r0, [r0], #-4
   115ec:	0b160296 	bleq	59204c <__ccfg+0x5720a4>
   115f0:	b4000001 	strlt	r0, [r0], #-1
   115f4:	0006b018 	andeq	fp, r6, r8, lsl r0
   115f8:	02970400 	addseq	r0, r7, #0, 8
   115fc:	00010b16 	andeq	r0, r1, r6, lsl fp
   11600:	1a18bc00 	bne	640608 <__ccfg+0x620660>
   11604:	04000005 	streq	r0, [r0], #-5
   11608:	0b160298 	bleq	592070 <__ccfg+0x5720c8>
   1160c:	c4000001 	strgt	r0, [r0], #-1
   11610:	00078218 	andeq	r8, r7, r8, lsl r2
   11614:	02990400 	addseq	r0, r9, #0, 8
   11618:	00002508 	andeq	r2, r0, r8, lsl #10
   1161c:	0900cc00 	stmdbeq	r0, {sl, fp, lr, pc}
   11620:	000005d3 	ldrdeq	r0, [r0], -r3
   11624:	0000082d 	andeq	r0, r0, sp, lsr #16
   11628:	0000380a 	andeq	r3, r0, sl, lsl #16
   1162c:	09001900 	stmdbeq	r0, {r8, fp, ip}
   11630:	000005d3 	ldrdeq	r0, [r0], -r3
   11634:	0000083d 	andeq	r0, r0, sp, lsr r8
   11638:	0000380a 	andeq	r3, r0, sl, lsl #16
   1163c:	09000700 	stmdbeq	r0, {r8, r9, sl}
   11640:	000005d3 	ldrdeq	r0, [r0], -r3
   11644:	0000084d 	andeq	r0, r0, sp, asr #16
   11648:	0000380a 	andeq	r3, r0, sl, lsl #16
   1164c:	1b001700 	blne	17254 <__exidx_end+0x121ac>
   11650:	029e04f0 	addseq	r0, lr, #240, 8	; 0xf0000000
   11654:	00087407 	andeq	r7, r8, r7, lsl #8
   11658:	03991800 	orrseq	r1, r9, #0, 16
   1165c:	a1040000 	mrsge	r0, (UNDEF: 4)
   11660:	08741b02 	ldmdaeq	r4!, {r1, r8, r9, fp, ip}^
   11664:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   11668:	00000b35 	andeq	r0, r0, r5, lsr fp
   1166c:	1802a204 	stmdane	r2, {r2, r9, sp, pc}
   11670:	00000884 	andeq	r0, r0, r4, lsl #17
   11674:	12090078 	andne	r0, r9, #120	; 0x78
   11678:	84000003 	strhi	r0, [r0], #-3
   1167c:	0a000008 	beq	116a4 <__exidx_end+0xc5fc>
   11680:	00000038 	andeq	r0, r0, r8, lsr r0
   11684:	3809001d 	stmdacc	r9, {r0, r2, r3, r4}
   11688:	94000000 	strls	r0, [r0], #-0
   1168c:	0a000008 	beq	116b4 <__exidx_end+0xc60c>
   11690:	00000038 	andeq	r0, r0, r8, lsr r0
   11694:	f01c001d 			; <UNDEFINED> instruction: 0xf01c001d
   11698:	03028304 	movweq	r8, #8964	; 0x2304
   1169c:	000008b9 			; <UNDEFINED> instruction: 0x000008b9
   116a0:	0044421d 	subeq	r4, r4, sp, lsl r2
   116a4:	029a0400 	addseq	r0, sl, #0, 8
   116a8:	0007080b 	andeq	r0, r7, fp, lsl #16
   116ac:	08d71d00 	ldmeq	r7, {r8, sl, fp, ip}^
   116b0:	a3040000 	movwge	r0, #16384	; 0x4000
   116b4:	084d0b02 	stmdaeq	sp, {r1, r8, r9, fp}^
   116b8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
   116bc:	000005d3 	ldrdeq	r0, [r0], -r3
   116c0:	000008c9 	andeq	r0, r0, r9, asr #17
   116c4:	0000380a 	andeq	r3, r0, sl, lsl #16
   116c8:	12001800 	andne	r1, r0, #0, 16
   116cc:	00000b1c 	andeq	r0, r0, ip, lsl fp
   116d0:	b206016c 	andlt	r0, r6, #108, 2
   116d4:	00095008 	andeq	r5, r9, r8
   116d8:	40c30c00 	sbcmi	r0, r3, r0, lsl #24
   116dc:	b4060000 	strlt	r0, [r6], #-0
   116e0:	000df80b 	andeq	pc, sp, fp, lsl #16
   116e4:	780c0000 	stmdavc	ip, {}	; <UNPREDICTABLE>
   116e8:	06000040 	streq	r0, [r0], -r0, asr #32
   116ec:	0e320bb5 	vmoveq.s16	r0, d18[2]
   116f0:	0ce00000 	stcleq	0, cr0, [r0]
   116f4:	00003f0e 	andeq	r3, r0, lr, lsl #30
   116f8:	610bb706 	tstvs	fp, r6, lsl #14
   116fc:	e400000e 	str	r0, [r0], #-14
   11700:	003e7e0c 	eorseq	r7, lr, ip, lsl #28
   11704:	0ab90600 	beq	fee52f0c <_estack+0xdee4df0c>
   11708:	00000025 	andeq	r0, r0, r5, lsr #32
   1170c:	3e4a0ce8 	cdpcc	12, 4, cr0, cr10, cr8, {7}
   11710:	ba060000 	blt	191718 <__ccfg+0x171770>
   11714:	0005cd0b 	andeq	ip, r5, fp, lsl #26
   11718:	780cec00 	stmdavc	ip, {sl, fp, sp, lr, pc}
   1171c:	0600003e 			; <UNDEFINED> instruction: 0x0600003e
   11720:	09d212bb 	ldmibeq	r2, {r0, r1, r3, r4, r5, r7, r9, ip}^
   11724:	13f00000 	mvnsne	r0, #0
   11728:	00003f8c 	andeq	r3, r0, ip, lsl #31
   1172c:	670bbd06 	strvs	fp, [fp, -r6, lsl #26]
   11730:	2800000e 	stmdacs	r0, {r1, r2, r3}
   11734:	3fad1301 	svccc	0x00ad1301
   11738:	be060000 	cdplt	0, 0, cr0, cr6, cr0, {0}
   1173c:	000e770b 	andeq	r7, lr, fp, lsl #14
   11740:	13012a00 	movwne	r2, #6656	; 0x1a00
   11744:	00003efe 	strdeq	r3, [r0], -lr
   11748:	770bbf06 	strvc	fp, [fp, -r6, lsl #30]
   1174c:	4a00000e 	bmi	1178c <__exidx_end+0xc6e4>
   11750:	04110001 	ldreq	r0, [r1], #-1
   11754:	000008c9 	andeq	r0, r0, r9, asr #17
   11758:	0009611e 	andeq	r6, r9, lr, lsl r1
   1175c:	04791600 	ldrbteq	r1, [r9], #-1536	; 0xfffffa00
   11760:	11000000 	mrsne	r0, (UNDEF: 0)
   11764:	00095604 	andeq	r5, r9, r4, lsl #12
   11768:	9c041100 	stflss	f1, [r4], {-0}
   1176c:	1e000001 	cdpne	0, 0, cr0, cr0, cr1, {0}
   11770:	00000978 	andeq	r0, r0, r8, ror r9
   11774:	00002516 	andeq	r2, r0, r6, lsl r5
   11778:	04110000 	ldreq	r0, [r1], #-0
   1177c:	0000097e 	andeq	r0, r0, lr, ror r9
   11780:	096d0411 	stmdbeq	sp!, {r0, r4, sl}^
   11784:	6d090000 	stcvs	0, cr0, [r9, #-0]
   11788:	94000006 	strls	r0, [r0], #-6
   1178c:	0a000009 	beq	117b8 <__exidx_end+0xc710>
   11790:	00000038 	andeq	r0, r0, r8, lsr r0
   11794:	991f0002 	ldmdbls	pc, {r1}	; <UNPREDICTABLE>
   11798:	04000008 	streq	r0, [r0], #-8
   1179c:	79170333 	ldmdbvc	r7, {r0, r1, r4, r5, r8, r9}
   117a0:	1f000004 	svcne	0x00000004
   117a4:	00000892 	muleq	r0, r2, r8
   117a8:	1d033404 	cfstrsne	mvf3, [r3, #-16]
   117ac:	0000047f 	andeq	r0, r0, pc, ror r4
   117b0:	09b90411 	ldmibeq	r9!, {r0, r4, sl}
   117b4:	ae0e0000 	cdpge	0, 0, cr0, cr14, cr0, {0}
   117b8:	20000009 	andcs	r0, r0, r9
   117bc:	003fd421 	eorseq	sp, pc, r1, lsr #8
   117c0:	0e670700 	cdpeq	7, 6, cr0, cr7, cr0, {0}
   117c4:	000005cd 	andeq	r0, r0, sp, asr #11
   117c8:	00073603 	andeq	r3, r7, r3, lsl #12
   117cc:	14560800 	ldrbne	r0, [r6], #-2048	; 0xfffff800
   117d0:	0000010b 	andeq	r0, r0, fp, lsl #2
   117d4:	003e780f 	eorseq	r7, lr, pc, lsl #16
   117d8:	2a093800 	bcs	25f7e0 <__ccfg+0x23f838>
   117dc:	000b1808 	andeq	r1, fp, r8, lsl #16
   117e0:	3f610c00 	svccc	0x00610c00
   117e4:	2c090000 	stccs	0, cr0, [r9], {-0}
   117e8:	0005cd09 	andeq	ip, r5, r9, lsl #26
   117ec:	830c0000 	movwhi	r0, #49152	; 0xc000
   117f0:	09000040 	stmdbeq	r0, {r6}
   117f4:	05cd092d 	strbeq	r0, [sp, #2349]	; 0x92d
   117f8:	0c040000 	stceq	0, cr0, [r4], {-0}
   117fc:	00003f3c 	andeq	r3, r0, ip, lsr pc
   11800:	cd092e09 	stcgt	14, cr2, [r9, #-36]	; 0xffffffdc
   11804:	08000005 	stmdaeq	r0, {r0, r2}
   11808:	003ea30c 	eorseq	sl, lr, ip, lsl #6
   1180c:	092f0900 	stmdbeq	pc!, {r8, fp}	; <UNPREDICTABLE>
   11810:	000005cd 	andeq	r0, r0, sp, asr #11
   11814:	3e3a0c0c 	cdpcc	12, 3, cr0, cr10, cr12, {0}
   11818:	30090000 	andcc	r0, r9, r0
   1181c:	0005cd09 	andeq	ip, r5, r9, lsl #26
   11820:	5d0c1000 	stcpl	0, cr1, [ip, #-0]
   11824:	0900003f 	stmdbeq	r0, {r0, r1, r2, r3, r4, r5}
   11828:	05cd0931 	strbeq	r0, [sp, #2353]	; 0x931
   1182c:	0c140000 	ldceq	0, cr0, [r4], {-0}
   11830:	0000407f 	andeq	r4, r0, pc, ror r0
   11834:	cd093209 	sfmgt	f3, 4, [r9, #-36]	; 0xffffffdc
   11838:	18000005 	stmdane	r0, {r0, r2}
   1183c:	003f380c 	eorseq	r3, pc, ip, lsl #16
   11840:	09330900 	ldmdbeq	r3!, {r8, fp}
   11844:	000005cd 	andeq	r0, r0, sp, asr #11
   11848:	3f9f0c1c 	svccc	0x009f0c1c
   1184c:	34090000 	strcc	r0, [r9], #-0
   11850:	0005cd09 	andeq	ip, r5, r9, lsl #26
   11854:	7e0c2000 	cdpvc	0, 0, cr2, cr12, cr0, {0}
   11858:	0900003f 	stmdbeq	r0, {r0, r1, r2, r3, r4, r5}
   1185c:	05cd0935 	strbeq	r0, [sp, #2357]	; 0x935
   11860:	0c240000 	stceq	0, cr0, [r4], #-0
   11864:	000041e3 	andeq	r4, r0, r3, ror #3
   11868:	d3083609 	movwle	r3, #34313	; 0x8609
   1186c:	28000005 	stmdacs	r0, {r0, r2}
   11870:	0041e70c 	subeq	lr, r1, ip, lsl #14
   11874:	08370900 	ldmdaeq	r7!, {r8, fp}
   11878:	000005d3 	ldrdeq	r0, [r0], -r3
   1187c:	3f4f0c29 	svccc	0x004f0c29
   11880:	38090000 	stmdacc	r9, {}	; <UNPREDICTABLE>
   11884:	0005d308 	andeq	sp, r5, r8, lsl #6
   11888:	e20c2a00 	and	r2, ip, #0, 20
   1188c:	0900003f 	stmdbeq	r0, {r0, r1, r2, r3, r4, r5}
   11890:	05d30839 	ldrbeq	r0, [r3, #2105]	; 0x839
   11894:	0c2b0000 	stceq	0, cr0, [fp], #-0
   11898:	00003ff5 	strdeq	r3, [r0], -r5
   1189c:	d3083a09 	movwle	r3, #35337	; 0x8a09
   118a0:	2c000005 	stccs	0, cr0, [r0], {5}
   118a4:	003e690c 	eorseq	r6, lr, ip, lsl #18
   118a8:	083b0900 	ldmdaeq	fp!, {r8, fp}
   118ac:	000005d3 	ldrdeq	r0, [r0], -r3
   118b0:	3f2c0c2d 	svccc	0x002c0c2d
   118b4:	3c090000 	stccc	0, cr0, [r9], {-0}
   118b8:	0005d308 	andeq	sp, r5, r8, lsl #6
   118bc:	d20c2e00 	andle	r2, ip, #0, 28
   118c0:	09000040 	stmdbeq	r0, {r6}
   118c4:	05d3083d 	ldrbeq	r0, [r3, #2109]	; 0x83d
   118c8:	0c2f0000 	stceq	0, cr0, [pc], #-0	; 118d0 <__exidx_end+0xc828>
   118cc:	00003ff1 	strdeq	r3, [r0], -r1
   118d0:	d3083e09 	movwle	r3, #36361	; 0x8e09
   118d4:	30000005 	andcc	r0, r0, r5
   118d8:	003e650c 	eorseq	r6, lr, ip, lsl #10
   118dc:	083f0900 	ldmdaeq	pc!, {r8, fp}	; <UNPREDICTABLE>
   118e0:	000005d3 	ldrdeq	r0, [r0], -r3
   118e4:	40ce0c31 	sbcmi	r0, lr, r1, lsr ip
   118e8:	40090000 	andmi	r0, r9, r0
   118ec:	0005d308 	andeq	sp, r5, r8, lsl #6
   118f0:	4b0c3200 	blmi	31e0f8 <__ccfg+0x2fe150>
   118f4:	0900003f 	stmdbeq	r0, {r0, r1, r2, r3, r4, r5}
   118f8:	05d30841 	ldrbeq	r0, [r3, #2113]	; 0x841
   118fc:	0c330000 	ldceq	0, cr0, [r3], #-0
   11900:	00003fde 	ldrdeq	r3, [r0], -lr
   11904:	d3084209 	movwle	r4, #33289	; 0x8209
   11908:	34000005 	strcc	r0, [r0], #-5
   1190c:	003f280c 	eorseq	r2, pc, ip, lsl #16
   11910:	08430900 	stmdaeq	r3, {r8, fp}^
   11914:	000005d3 	ldrdeq	r0, [r0], -r3
   11918:	630f0035 	movwvs	r0, #61493	; 0xf035
   1191c:	08000040 	stmdaeq	r0, {r6}
   11920:	40083906 	andmi	r3, r8, r6, lsl #18
   11924:	0c00000b 	stceq	0, cr0, [r0], {11}
   11928:	00003f06 	andeq	r3, r0, r6, lsl #30
   1192c:	030f3b06 	movweq	r3, #64262	; 0xfb06
   11930:	00000006 	andeq	r0, r0, r6
   11934:	003f8c0c 	eorseq	r8, pc, ip, lsl #24
   11938:	0f3c0600 	svceq	0x003c0600
   1193c:	00000603 	andeq	r0, r0, r3, lsl #12
   11940:	18060004 	stmdane	r6, {r2}
   11944:	2100000b 	tstcs	r0, fp
   11948:	00003ec8 	andeq	r3, r0, r8, asr #29
   1194c:	40204206 	eormi	r4, r0, r6, lsl #4
   11950:	0f00000b 	svceq	0x0000000b
   11954:	00003ef0 	strdeq	r3, [r0], -r0
   11958:	0844063c 	stmdaeq	r4, {r2, r3, r4, r5, r9, sl}^
   1195c:	00000c22 	andeq	r0, r0, r2, lsr #24
   11960:	003ea30c 	eorseq	sl, lr, ip, lsl #6
   11964:	0f460600 	svceq	0x00460600
   11968:	00000603 	andeq	r0, r0, r3, lsl #12
   1196c:	3e3a0c00 	cdpcc	12, 3, cr0, cr10, cr0, {0}
   11970:	47060000 	strmi	r0, [r6, -r0]
   11974:	0006030f 	andeq	r0, r6, pc, lsl #6
   11978:	5d0c0400 	cfstrspl	mvf0, [ip, #-0]
   1197c:	0600003f 			; <UNDEFINED> instruction: 0x0600003f
   11980:	06030f48 	streq	r0, [r3], -r8, asr #30
   11984:	0c080000 	stceq	0, cr0, [r8], {-0}
   11988:	0000407f 	andeq	r4, r0, pc, ror r0
   1198c:	030f4906 	movweq	r4, #63750	; 0xf906
   11990:	0c000006 	stceq	0, cr0, [r0], {6}
   11994:	003f380c 	eorseq	r3, pc, ip, lsl #16
   11998:	0f4a0600 	svceq	0x004a0600
   1199c:	00000603 	andeq	r0, r0, r3, lsl #12
   119a0:	3f9f0c10 	svccc	0x009f0c10
   119a4:	4b060000 	blmi	1919ac <__ccfg+0x171a04>
   119a8:	0006030f 	andeq	r0, r6, pc, lsl #6
   119ac:	7e0c1400 	cfcpysvc	mvf1, mvf12
   119b0:	0600003f 			; <UNDEFINED> instruction: 0x0600003f
   119b4:	06030f4c 	streq	r0, [r3], -ip, asr #30
   119b8:	0c180000 	ldceq	0, cr0, [r8], {-0}
   119bc:	000041e3 	andeq	r4, r0, r3, ror #3
   119c0:	030f4d06 	movweq	r4, #64774	; 0xfd06
   119c4:	1c000006 	stcne	0, cr0, [r0], {6}
   119c8:	0041e70c 	subeq	lr, r1, ip, lsl #14
   119cc:	0f4e0600 	svceq	0x004e0600
   119d0:	00000603 	andeq	r0, r0, r3, lsl #12
   119d4:	3f4f0c20 	svccc	0x004f0c20
   119d8:	4f060000 	svcmi	0x00060000
   119dc:	0006030f 	andeq	r0, r6, pc, lsl #6
   119e0:	e20c2400 	and	r2, ip, #0, 8
   119e4:	0600003f 			; <UNDEFINED> instruction: 0x0600003f
   119e8:	06030f50 			; <UNDEFINED> instruction: 0x06030f50
   119ec:	0c280000 	stceq	0, cr0, [r8], #-0
   119f0:	00003ff5 	strdeq	r3, [r0], -r5
   119f4:	030f5106 	movweq	r5, #61702	; 0xf106
   119f8:	2c000006 	stccs	0, cr0, [r0], {6}
   119fc:	003e690c 	eorseq	r6, lr, ip, lsl #18
   11a00:	0f520600 	svceq	0x00520600
   11a04:	00000603 	andeq	r0, r0, r3, lsl #12
   11a08:	3f2c0c30 	svccc	0x002c0c30
   11a0c:	53060000 	movwpl	r0, #24576	; 0x6000
   11a10:	0006030f 	andeq	r0, r6, pc, lsl #6
   11a14:	d20c3400 	andle	r3, ip, #0, 8
   11a18:	06000040 	streq	r0, [r0], -r0, asr #32
   11a1c:	06030f54 			; <UNDEFINED> instruction: 0x06030f54
   11a20:	00380000 	eorseq	r0, r8, r0
   11a24:	000b5106 	andeq	r5, fp, r6, lsl #2
   11a28:	40b02100 	adcsmi	r2, r0, r0, lsl #2
   11a2c:	65060000 	strvs	r0, [r6, #-0]
   11a30:	000c2223 	andeq	r2, ip, r3, lsr #4
   11a34:	3e870f00 	cdpcc	15, 8, cr0, cr7, cr0, {0}
   11a38:	060c0000 	streq	r0, [ip], -r0
   11a3c:	0c680867 	stcleq	8, cr0, [r8], #-412	; 0xfffffe64
   11a40:	610c0000 	mrsvs	r0, (UNDEF: 12)
   11a44:	0600003f 			; <UNDEFINED> instruction: 0x0600003f
   11a48:	06030f69 	streq	r0, [r3], -r9, ror #30
   11a4c:	0c000000 	stceq	0, cr0, [r0], {-0}
   11a50:	00004083 	andeq	r4, r0, r3, lsl #1
   11a54:	030f6a06 	movweq	r6, #64006	; 0xfa06
   11a58:	04000006 	streq	r0, [r0], #-6
   11a5c:	003f3c0c 	eorseq	r3, pc, ip, lsl #24
   11a60:	0f6b0600 	svceq	0x006b0600
   11a64:	00000603 	andeq	r0, r0, r3, lsl #12
   11a68:	33060008 	movwcc	r0, #24584	; 0x6008
   11a6c:	2100000c 	tstcs	r0, ip
   11a70:	00003e28 	andeq	r3, r0, r8, lsr #28
   11a74:	68227206 	stmdavs	r2!, {r1, r2, r9, ip, sp, lr}
   11a78:	0f00000c 	svceq	0x0000000c
   11a7c:	00003eb3 			; <UNDEFINED> instruction: 0x00003eb3
   11a80:	087406fc 	ldmdaeq	r4!, {r2, r3, r4, r5, r6, r7, r9, sl}^
   11a84:	00000d64 	andeq	r0, r0, r4, ror #26
   11a88:	6e6f6d10 	mcrvs	13, 3, r6, cr15, cr0, {0}
   11a8c:	0f760600 	svceq	0x00760600
   11a90:	00000d69 	andeq	r0, r0, r9, ror #26
   11a94:	41fc0c00 	mvnsmi	r0, r0, lsl #24
   11a98:	77060000 	strvc	r0, [r6, -r0]
   11a9c:	000d690f 	andeq	r6, sp, pc, lsl #18
   11aa0:	030c3000 	movweq	r3, #49152	; 0xc000
   11aa4:	06000003 	streq	r0, [r0], -r3
   11aa8:	0d790f78 	ldcleq	15, cr0, [r9, #-480]!	; 0xfffffe20
   11aac:	0c600000 	stcleq	0, cr0, [r0], #-0
   11ab0:	000040a8 	andeq	r4, r0, r8, lsr #1
   11ab4:	790f7906 	stmdbvc	pc, {r1, r2, r8, fp, ip, sp, lr}	; <UNPREDICTABLE>
   11ab8:	7c00000d 	stcvc	0, cr0, [r0], {13}
   11abc:	003f450c 	eorseq	r4, pc, ip, lsl #10
   11ac0:	0f7a0600 	svceq	0x007a0600
   11ac4:	00000603 	andeq	r0, r0, r3, lsl #12
   11ac8:	3fce0c98 	svccc	0x00ce0c98
   11acc:	7b060000 	blvc	191ad4 <__ccfg+0x171b2c>
   11ad0:	0006030f 	andeq	r0, r6, pc, lsl #6
   11ad4:	6f0c9c00 	svcvs	0x000c9c00
   11ad8:	0600003f 			; <UNDEFINED> instruction: 0x0600003f
   11adc:	06030f7c 			; <UNDEFINED> instruction: 0x06030f7c
   11ae0:	0ca00000 	stceq	0, cr0, [r0]
   11ae4:	00003ed8 	ldrdeq	r3, [r0], -r8
   11ae8:	890f7d06 	stmdbhi	pc, {r1, r2, r8, sl, fp, ip, sp, lr}	; <UNPREDICTABLE>
   11aec:	a400000d 	strge	r0, [r0], #-13
   11af0:	003f750c 	eorseq	r7, pc, ip, lsl #10
   11af4:	0f7e0600 	svceq	0x007e0600
   11af8:	00000603 	andeq	r0, r0, r3, lsl #12
   11afc:	41f80cac 	mvnsmi	r0, ip, lsr #25
   11b00:	7f060000 	svcvc	0x00060000
   11b04:	000d690f 	andeq	r6, sp, pc, lsl #18
   11b08:	410cb000 	mrsmi	fp, (UNDEF: 12)
   11b0c:	06000040 	streq	r0, [r0], -r0, asr #32
   11b10:	06030f80 	streq	r0, [r3], -r0, lsl #31
   11b14:	0ce00000 	stcleq	0, cr0, [r0]
   11b18:	00004091 	muleq	r0, r1, r0
   11b1c:	030f8106 	movweq	r8, #61702	; 0xf106
   11b20:	e4000006 	str	r0, [r0], #-6
   11b24:	61726510 	cmnvs	r2, r0, lsl r5
   11b28:	0f820600 	svceq	0x00820600
   11b2c:	00000603 	andeq	r0, r0, r3, lsl #12
   11b30:	40590ce8 	subsmi	r0, r9, r8, ror #25
   11b34:	83060000 	movwhi	r0, #24576	; 0x6000
   11b38:	0006030f 	andeq	r0, r6, pc, lsl #6
   11b3c:	de0cec00 	cdple	12, 0, cr14, cr12, cr0, {0}
   11b40:	0600003e 			; <UNDEFINED> instruction: 0x0600003e
   11b44:	06030f84 	streq	r0, [r3], -r4, lsl #31
   11b48:	0cf00000 	ldcleq	0, cr0, [r0]
   11b4c:	0000406e 	andeq	r4, r0, lr, rrx
   11b50:	030f8506 	movweq	r8, #62726	; 0xf506
   11b54:	f4000006 	vst4.8	{d0-d3}, [r0], r6
   11b58:	003ebd0c 	eorseq	fp, lr, ip, lsl #26
   11b5c:	0f860600 	svceq	0x00860600
   11b60:	00000603 	andeq	r0, r0, r3, lsl #12
   11b64:	790600f8 	stmdbvc	r6, {r3, r4, r5, r6, r7}
   11b68:	0900000c 	stmdbeq	r0, {r2, r3}
   11b6c:	00000603 	andeq	r0, r0, r3, lsl #12
   11b70:	00000d79 	andeq	r0, r0, r9, ror sp
   11b74:	0000380a 	andeq	r3, r0, sl, lsl #16
   11b78:	09000b00 	stmdbeq	r0, {r8, r9, fp}
   11b7c:	00000603 	andeq	r0, r0, r3, lsl #12
   11b80:	00000d89 	andeq	r0, r0, r9, lsl #27
   11b84:	0000380a 	andeq	r3, r0, sl, lsl #16
   11b88:	09000600 	stmdbeq	r0, {r9, sl}
   11b8c:	00000603 	andeq	r0, r0, r3, lsl #12
   11b90:	00000d99 	muleq	r0, r9, sp
   11b94:	0000380a 	andeq	r3, r0, sl, lsl #16
   11b98:	21000100 	mrscs	r0, (UNDEF: 16)
   11b9c:	00003e94 	muleq	r0, r4, lr
   11ba0:	641f9a06 	ldrvs	r9, [pc], #-2566	; 11ba8 <__exidx_end+0xcb00>
   11ba4:	0f00000d 	svceq	0x0000000d
   11ba8:	0000409a 	muleq	r0, sl, r0
   11bac:	089c0610 	ldmeq	ip, {r4, r9, sl}
   11bb0:	00000de7 	andeq	r0, r0, r7, ror #27
   11bb4:	0040510c 	subeq	r5, r0, ip, lsl #2
   11bb8:	0f9e0600 	svceq	0x009e0600
   11bbc:	00000603 	andeq	r0, r0, r3, lsl #12
   11bc0:	3fc70c00 	svccc	0x00c70c00
   11bc4:	9f060000 	svcls	0x00060000
   11bc8:	0006030f 	andeq	r0, r6, pc, lsl #6
   11bcc:	4a0c0400 	bmi	312bd4 <__ccfg+0x2f2c2c>
   11bd0:	06000040 	streq	r0, [r0], -r0, asr #32
   11bd4:	06030fa0 	streq	r0, [r3], -r0, lsr #31
   11bd8:	0c080000 	stceq	0, cr0, [r8], {-0}
   11bdc:	00003eea 	andeq	r3, r0, sl, ror #29
   11be0:	030fa106 	movweq	sl, #61702	; 0xf106
   11be4:	0c000006 	stceq	0, cr0, [r0], {6}
   11be8:	0da50600 	stceq	6, cr0, [r5]
   11bec:	15210000 	strne	r0, [r1, #-0]!
   11bf0:	0600003f 			; <UNDEFINED> instruction: 0x0600003f
   11bf4:	0de723aa 	stcleq	3, cr2, [r7, #680]!	; 0x2a8
   11bf8:	d3090000 	movwle	r0, #36864	; 0x9000
   11bfc:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
   11c00:	0a00000e 	beq	11c40 <__exidx_end+0xcb98>
   11c04:	00000038 	andeq	r0, r0, r8, lsr r0
   11c08:	00380a06 	eorseq	r0, r8, r6, lsl #20
   11c0c:	001f0000 	andseq	r0, pc, r0
   11c10:	00002515 	andeq	r2, r0, r5, lsl r5
   11c14:	000e2c00 	andeq	r2, lr, r0, lsl #24
   11c18:	04791600 	ldrbteq	r1, [r9], #-1536	; 0xfffffa00
   11c1c:	cd160000 	ldcgt	0, cr0, [r6, #-0]
   11c20:	16000005 	strne	r0, [r0], -r5
   11c24:	0000003f 	andeq	r0, r0, pc, lsr r0
   11c28:	000e2c16 	andeq	r2, lr, r6, lsl ip
   11c2c:	04110000 	ldreq	r0, [r1], #-0
   11c30:	000009c6 	andeq	r0, r0, r6, asr #19
   11c34:	0e0e0411 	cfmvdlreq	mvd14, r0
   11c38:	25150000 	ldrcs	r0, [r5, #-0]
   11c3c:	5b000000 	blpl	11c44 <__exidx_end+0xcb9c>
   11c40:	1600000e 	strne	r0, [r0], -lr
   11c44:	00000479 	andeq	r0, r0, r9, ror r4
   11c48:	000e5b16 	andeq	r5, lr, r6, lsl fp
   11c4c:	06031600 	streq	r1, [r3], -r0, lsl #12
   11c50:	2c160000 	ldccs	0, cr0, [r6], {-0}
   11c54:	16000000 	strne	r0, [r0], -r0
   11c58:	00000e2c 	andeq	r0, r0, ip, lsr #28
   11c5c:	3f041100 	svccc	0x00041100
   11c60:	11000000 	mrsne	r0, (UNDEF: 0)
   11c64:	000e3804 	andeq	r3, lr, r4, lsl #16
   11c68:	05d30900 	ldrbeq	r0, [r3, #2304]	; 0x900
   11c6c:	0e770000 	cdpeq	0, 7, cr0, cr7, cr0, {0}
   11c70:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
   11c74:	01000000 	mrseq	r0, (UNDEF: 0)
   11c78:	05d30900 	ldrbeq	r0, [r3, #2304]	; 0x900
   11c7c:	0e870000 	cdpeq	0, 8, cr0, cr7, cr0, {0}
   11c80:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
   11c84:	1f000000 	svcne	0x00000000
   11c88:	12772200 	rsbsne	r2, r7, #0, 4
   11c8c:	1f0a0000 	svcne	0x000a0000
   11c90:	00011709 	andeq	r1, r1, r9, lsl #14
   11c94:	00416400 	subeq	r6, r1, r0, lsl #8
   11c98:	0000aa00 	andeq	sl, r0, r0, lsl #20
   11c9c:	289c0100 	ldmcs	ip, {r8}
   11ca0:	2300000f 	movwcs	r0, #15
   11ca4:	00003e54 	andeq	r3, r0, r4, asr lr
   11ca8:	191a3101 	ldmdbne	sl, {r0, r8, ip, sp}
   11cac:	01000001 	tsteq	r0, r1
   11cb0:	41f32450 	mvnsmi	r2, r0, asr r4
   11cb4:	32010000 	andcc	r0, r1, #0
   11cb8:	0009b419 	andeq	fp, r9, r9, lsl r4
   11cbc:	00539100 	subseq	r9, r3, r0, lsl #2
   11cc0:	00538500 	subseq	r8, r3, r0, lsl #10
   11cc4:	41de2400 	bicsmi	r2, lr, r0, lsl #8
   11cc8:	33010000 	movwcc	r0, #4096	; 0x1000
   11ccc:	00002c09 	andeq	r2, r0, r9, lsl #24
   11cd0:	00540c00 	subseq	r0, r4, r0, lsl #24
   11cd4:	0053e400 	subseq	lr, r3, r0, lsl #8
   11cd8:	73642500 	cmnvc	r4, #0, 10
   11cdc:	42010074 	andmi	r0, r1, #116	; 0x74
   11ce0:	0005cd09 	andeq	ip, r5, r9, lsl #26
   11ce4:	00554b00 	subseq	r4, r5, r0, lsl #22
   11ce8:	00553b00 	subseq	r3, r5, r0, lsl #22
   11cec:	72732500 	rsbsvc	r2, r3, #0, 10
   11cf0:	43010063 	movwmi	r0, #4195	; 0x1063
   11cf4:	0006030f 	andeq	r0, r6, pc, lsl #6
   11cf8:	0055ce00 	subseq	ip, r5, r0, lsl #28
   11cfc:	0055be00 	subseq	fp, r5, r0, lsl #28
   11d00:	3e592600 	cdpcc	6, 5, cr2, cr9, cr0, {0}
   11d04:	44010000 	strmi	r0, [r1], #-0
   11d08:	000f2809 	andeq	r2, pc, r9, lsl #16
   11d0c:	00565f00 	subseq	r5, r6, r0, lsl #30
   11d10:	00564700 	subseq	r4, r6, r0, lsl #14
   11d14:	40de2600 	sbcsmi	r2, lr, r0, lsl #12
   11d18:	45010000 	strmi	r0, [r1, #-0]
   11d1c:	000f2e0f 	andeq	r2, pc, pc, lsl #28
   11d20:	00575600 	subseq	r5, r7, r0, lsl #12
   11d24:	00573e00 	subseq	r3, r7, r0, lsl #28
   11d28:	04110000 	ldreq	r0, [r1], #-0
   11d2c:	00000083 	andeq	r0, r0, r3, lsl #1
   11d30:	008a0411 	addeq	r0, sl, r1, lsl r4
   11d34:	76000000 	strvc	r0, [r0], -r0
   11d38:	04000009 	streq	r0, [r0], #-9
   11d3c:	00417f00 	subeq	r7, r1, r0, lsl #30
   11d40:	ea010400 	b	52d48 <__ccfg+0x32da0>
   11d44:	0c000040 	stceq	0, cr0, [r0], {64}	; 0x40
   11d48:	00004202 	andeq	r4, r0, r2, lsl #4
   11d4c:	00004237 	andeq	r4, r0, r7, lsr r2
   11d50:	00004210 	andeq	r4, r0, r0, lsl r2
   11d54:	0000004c 	andeq	r0, r0, ip, asr #32
   11d58:	00008854 	andeq	r8, r0, r4, asr r8
   11d5c:	d4070402 	strle	r0, [r7], #-1026	; 0xfffffbfe
   11d60:	03000003 	movweq	r0, #3
   11d64:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
   11d68:	08020074 	stmdaeq	r2, {r2, r4, r5, r6}
   11d6c:	00063205 	andeq	r3, r6, r5, lsl #4
   11d70:	04080200 	streq	r0, [r8], #-512	; 0xfffffe00
   11d74:	00003fbb 			; <UNDEFINED> instruction: 0x00003fbb
   11d78:	00094204 	andeq	r4, r9, r4, lsl #4
   11d7c:	01650200 	cmneq	r5, r0, lsl #4
   11d80:	00002517 	andeq	r2, r0, r7, lsl r5
   11d84:	06010200 	streq	r0, [r1], -r0, lsl #4
   11d88:	0000098a 	andeq	r0, r0, sl, lsl #19
   11d8c:	88080102 	stmdahi	r8, {r1, r8}
   11d90:	02000009 	andeq	r0, r0, #9
   11d94:	08440502 	stmdaeq	r4, {r1, r8, sl}^
   11d98:	02020000 	andeq	r0, r2, #0
   11d9c:	000a8007 	andeq	r8, sl, r7
   11da0:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
   11da4:	00000637 	andeq	r0, r0, r7, lsr r6
   11da8:	cf070402 	svcgt	0x00070402
   11dac:	02000003 	andeq	r0, r0, #3
   11db0:	03ca0708 	biceq	r0, sl, #8, 14	; 0x200000
   11db4:	bc050000 	stclt	0, cr0, [r5], {-0}
   11db8:	0300000a 	movweq	r0, #10
   11dbc:	006a0e2e 	rsbeq	r0, sl, lr, lsr #28
   11dc0:	a3050000 	movwge	r0, #20480	; 0x5000
   11dc4:	03000002 	movweq	r0, #2
   11dc8:	006a0e74 	rsbeq	r0, sl, r4, ror lr
   11dcc:	04060000 	streq	r0, [r6], #-0
   11dd0:	b903a503 	stmdblt	r3, {r0, r1, r8, sl, sp, pc}
   11dd4:	07000000 	streq	r0, [r0, -r0]
   11dd8:	000005c8 	andeq	r0, r0, r8, asr #11
   11ddc:	410ca703 	tstmi	ip, r3, lsl #14
   11de0:	07000000 	streq	r0, [r0, -r0]
   11de4:	0000088b 	andeq	r0, r0, fp, lsl #17
   11de8:	b913a803 	ldmdblt	r3, {r0, r1, fp, sp, pc}
   11dec:	00000000 	andeq	r0, r0, r0
   11df0:	00005508 	andeq	r5, r0, r8, lsl #10
   11df4:	0000c900 	andeq	ip, r0, r0, lsl #18
   11df8:	00250900 	eoreq	r0, r5, r0, lsl #18
   11dfc:	00030000 	andeq	r0, r3, r0
   11e00:	a203080a 	andge	r0, r3, #655360	; 0xa0000
   11e04:	0000ed09 	andeq	lr, r0, r9, lsl #26
   11e08:	035e0b00 	cmpeq	lr, #0, 22
   11e0c:	a4030000 	strge	r0, [r3], #-0
   11e10:	00002c07 	andeq	r2, r0, r7, lsl #24
   11e14:	eb0b0000 	bl	2d1e1c <__ccfg+0x2b1e74>
   11e18:	03000004 	movweq	r0, #4
   11e1c:	009705a9 	addseq	r0, r7, r9, lsr #11
   11e20:	00040000 	andeq	r0, r4, r0
   11e24:	00073505 	andeq	r3, r7, r5, lsl #10
   11e28:	03aa0300 			; <UNDEFINED> instruction: 0x03aa0300
   11e2c:	000000c9 	andeq	r0, r0, r9, asr #1
   11e30:	8a05040c 	bhi	152e68 <__ccfg+0x132ec0>
   11e34:	04000006 	streq	r0, [r0], #-6
   11e38:	00711916 	rsbseq	r1, r1, r6, lsl r9
   11e3c:	16050000 	strne	r0, [r5], -r0
   11e40:	05000002 	streq	r0, [r0, #-2]
   11e44:	002c0d0c 	eoreq	r0, ip, ip, lsl #26
   11e48:	96050000 	strls	r0, [r5], -r0
   11e4c:	04000005 	streq	r0, [r0], #-5
   11e50:	01071b23 	tsteq	r7, r3, lsr #22
   11e54:	e30d0000 	movw	r0, #53248	; 0xd000
   11e58:	18000002 	stmdane	r0, {r1}
   11e5c:	79083404 	stmdbvc	r8, {r2, sl, ip, sp}
   11e60:	0b000001 	bleq	11e6c <__exidx_end+0xcdc4>
   11e64:	00000b16 	andeq	r0, r0, r6, lsl fp
   11e68:	79133604 	ldmdbvc	r3, {r2, r9, sl, ip, sp}
   11e6c:	00000001 	andeq	r0, r0, r1
   11e70:	006b5f0e 	rsbeq	r5, fp, lr, lsl #30
   11e74:	2c073704 	stccs	7, cr3, [r7], {4}
   11e78:	04000000 	streq	r0, [r0], #-0
   11e7c:	0008f10b 	andeq	pc, r8, fp, lsl #2
   11e80:	0b370400 	bleq	dd2e88 <__ccfg+0xdb2ee0>
   11e84:	0000002c 	andeq	r0, r0, ip, lsr #32
   11e88:	3f860b08 	svccc	0x00860b08
   11e8c:	37040000 	strcc	r0, [r4, -r0]
   11e90:	00002c14 	andeq	r2, r0, r4, lsl ip
   11e94:	f60b0c00 			; <UNDEFINED> instruction: 0xf60b0c00
   11e98:	04000003 	streq	r0, [r0], #-3
   11e9c:	002c1b37 	eoreq	r1, ip, r7, lsr fp
   11ea0:	0e100000 	cdpeq	0, 1, cr0, cr0, cr0, {0}
   11ea4:	0400785f 	streq	r7, [r0], #-2143	; 0xfffff7a1
   11ea8:	017f0b38 	cmneq	pc, r8, lsr fp	; <UNPREDICTABLE>
   11eac:	00140000 	andseq	r0, r4, r0
   11eb0:	011f040f 	tsteq	pc, pc, lsl #8
   11eb4:	fb080000 	blx	211ebe <__ccfg+0x1f1f16>
   11eb8:	8f000000 	svchi	0x00000000
   11ebc:	09000001 	stmdbeq	r0, {r0}
   11ec0:	00000025 	andeq	r0, r0, r5, lsr #32
   11ec4:	0c0d0000 	stceq	0, cr0, [sp], {-0}
   11ec8:	24000009 	strcs	r0, [r0], #-9
   11ecc:	12083c04 	andne	r3, r8, #4, 24	; 0x400
   11ed0:	0b000002 	bleq	11ee0 <__exidx_end+0xce38>
   11ed4:	00000486 	andeq	r0, r0, r6, lsl #9
   11ed8:	2c093e04 	stccs	14, cr3, [r9], {4}
   11edc:	00000000 	andeq	r0, r0, r0
   11ee0:	0003900b 	andeq	r9, r3, fp
   11ee4:	093f0400 	ldmdbeq	pc!, {sl}	; <UNPREDICTABLE>
   11ee8:	0000002c 	andeq	r0, r0, ip, lsr #32
   11eec:	03390b04 	teqeq	r9, #4, 22	; 0x1000
   11ef0:	40040000 	andmi	r0, r4, r0
   11ef4:	00002c09 	andeq	r2, r0, r9, lsl #24
   11ef8:	4c0b0800 	stcmi	8, cr0, [fp], {-0}
   11efc:	04000005 	streq	r0, [r0], #-5
   11f00:	002c0941 	eoreq	r0, ip, r1, asr #18
   11f04:	0b0c0000 	bleq	311f0c <__ccfg+0x2f1f64>
   11f08:	000007be 			; <UNDEFINED> instruction: 0x000007be
   11f0c:	2c094204 	sfmcs	f4, 4, [r9], {4}
   11f10:	10000000 	andne	r0, r0, r0
   11f14:	0008a50b 	andeq	sl, r8, fp, lsl #10
   11f18:	09430400 	stmdbeq	r3, {sl}^
   11f1c:	0000002c 	andeq	r0, r0, ip, lsr #32
   11f20:	02fe0b14 	rscseq	r0, lr, #20, 22	; 0x5000
   11f24:	44040000 	strmi	r0, [r4], #-0
   11f28:	00002c09 	andeq	r2, r0, r9, lsl #24
   11f2c:	8f0b1800 	svchi	0x000b1800
   11f30:	04000004 	streq	r0, [r0], #-4
   11f34:	002c0945 	eoreq	r0, ip, r5, asr #18
   11f38:	0b1c0000 	bleq	711f40 <__ccfg+0x6f1f98>
   11f3c:	00000753 	andeq	r0, r0, r3, asr r7
   11f40:	2c094604 	stccs	6, cr4, [r9], {4}
   11f44:	20000000 	andcs	r0, r0, r0
   11f48:	00611000 	rsbeq	r1, r1, r0
   11f4c:	01080000 	mrseq	r0, (UNDEF: 8)
   11f50:	57084f04 	strpl	r4, [r8, -r4, lsl #30]
   11f54:	0b000002 	bleq	11f64 <__exidx_end+0xcebc>
   11f58:	00000a4a 	andeq	r0, r0, sl, asr #20
   11f5c:	570a5004 	strpl	r5, [sl, -r4]
   11f60:	00000002 	andeq	r0, r0, r2
   11f64:	00096c0b 	andeq	r6, r9, fp, lsl #24
   11f68:	09510400 	ldmdbeq	r1, {sl}^
   11f6c:	00000257 	andeq	r0, r0, r7, asr r2
   11f70:	0ab31180 	beq	fecd6578 <_estack+0xdecd1578>
   11f74:	53040000 	movwpl	r0, #16384	; 0x4000
   11f78:	0000fb0a 	andeq	pc, r0, sl, lsl #22
   11f7c:	11010000 	mrsne	r0, (UNDEF: 1)
   11f80:	00000b01 	andeq	r0, r0, r1, lsl #22
   11f84:	fb0a5604 	blx	2a779e <__ccfg+0x2877f6>
   11f88:	04000000 	streq	r0, [r0], #-0
   11f8c:	f9080001 			; <UNDEFINED> instruction: 0xf9080001
   11f90:	67000000 	strvs	r0, [r0, -r0]
   11f94:	09000002 	stmdbeq	r0, {r1}
   11f98:	00000025 	andeq	r0, r0, r5, lsr #32
   11f9c:	2b10001f 	blcs	412020 <__ccfg+0x3f2078>
   11fa0:	90000008 	andls	r0, r0, r8
   11fa4:	08620401 	stmdaeq	r2!, {r0, sl}^
   11fa8:	000002aa 	andeq	r0, r0, sl, lsr #5
   11fac:	000b160b 	andeq	r1, fp, fp, lsl #12
   11fb0:	12630400 	rsbne	r0, r3, #0, 8
   11fb4:	000002aa 	andeq	r0, r0, sl, lsr #5
   11fb8:	049e0b00 	ldreq	r0, [lr], #2816	; 0xb00
   11fbc:	64040000 	strvs	r0, [r4], #-0
   11fc0:	00002c06 	andeq	r2, r0, r6, lsl #24
   11fc4:	ab0b0400 	blge	2d2fcc <__ccfg+0x2b3024>
   11fc8:	04000002 	streq	r0, [r0], #-2
   11fcc:	02b00966 	adcseq	r0, r0, #1671168	; 0x198000
   11fd0:	0b080000 	bleq	211fd8 <__ccfg+0x1f2030>
   11fd4:	00000061 	andeq	r0, r0, r1, rrx
   11fd8:	121e6704 	andsne	r6, lr, #4, 14	; 0x100000
   11fdc:	88000002 	stmdahi	r0, {r1}
   11fe0:	67040f00 	strvs	r0, [r4, -r0, lsl #30]
   11fe4:	08000002 	stmdaeq	r0, {r1}
   11fe8:	000002c0 	andeq	r0, r0, r0, asr #5
   11fec:	000002c0 	andeq	r0, r0, r0, asr #5
   11ff0:	00002509 	andeq	r2, r0, r9, lsl #10
   11ff4:	0f001f00 	svceq	0x00001f00
   11ff8:	0002c604 	andeq	ip, r2, r4, lsl #12
   11ffc:	040d1200 	streq	r1, [sp], #-512	; 0xfffffe00
   12000:	0800000a 	stmdaeq	r0, {r1, r3}
   12004:	ef087a04 	svc	0x00087a04
   12008:	0b000002 	bleq	12018 <__exidx_end+0xcf70>
   1200c:	0000064e 	andeq	r0, r0, lr, asr #12
   12010:	ef117b04 	svc	0x00117b04
   12014:	00000002 	andeq	r0, r0, r2
   12018:	0019a50b 	andseq	sl, r9, fp, lsl #10
   1201c:	067c0400 	ldrbteq	r0, [ip], -r0, lsl #8
   12020:	0000002c 	andeq	r0, r0, ip, lsr #32
   12024:	040f0004 	streq	r0, [pc], #-4	; 1202c <__exidx_end+0xcf84>
   12028:	00000055 	andeq	r0, r0, r5, asr r0
   1202c:	0003ee0d 	andeq	lr, r3, sp, lsl #28
   12030:	ba046800 	blt	12c038 <__ccfg+0x10c090>
   12034:	00043808 	andeq	r3, r4, r8, lsl #16
   12038:	705f0e00 	subsvc	r0, pc, r0, lsl #28
   1203c:	12bb0400 	adcsne	r0, fp, #0, 8
   12040:	000002ef 	andeq	r0, r0, pc, ror #5
   12044:	725f0e00 	subsvc	r0, pc, #0, 28
   12048:	07bc0400 	ldreq	r0, [ip, r0, lsl #8]!
   1204c:	0000002c 	andeq	r0, r0, ip, lsr #32
   12050:	775f0e04 	ldrbvc	r0, [pc, -r4, lsl #28]
   12054:	07bd0400 	ldreq	r0, [sp, r0, lsl #8]!
   12058:	0000002c 	andeq	r0, r0, ip, lsr #32
   1205c:	01f30b08 	mvnseq	r0, r8, lsl #22
   12060:	be040000 	cdplt	0, 0, cr0, cr4, cr0, {0}
   12064:	00005c09 	andeq	r5, r0, r9, lsl #24
   12068:	bf0b0c00 	svclt	0x000b0c00
   1206c:	04000006 	streq	r0, [r0], #-6
   12070:	005c09bf 	ldrheq	r0, [ip], #-159	; 0xffffff61
   12074:	0e0e0000 	cdpeq	0, 0, cr0, cr14, cr0, {0}
   12078:	0066625f 	rsbeq	r6, r6, pc, asr r2
   1207c:	c711c004 	ldrgt	ip, [r1, -r4]
   12080:	10000002 	andne	r0, r0, r2
   12084:	0001ea0b 	andeq	lr, r1, fp, lsl #20
   12088:	07c10400 	strbeq	r0, [r1, r0, lsl #8]
   1208c:	0000002c 	andeq	r0, r0, ip, lsr #32
   12090:	02b00b18 	adcseq	r0, r0, #24, 22	; 0x6000
   12094:	c8040000 	stmdagt	r4, {}	; <UNPREDICTABLE>
   12098:	0000f90a 	andeq	pc, r0, sl, lsl #18
   1209c:	350b1c00 	strcc	r1, [fp, #-3072]	; 0xfffff400
   120a0:	04000019 	streq	r0, [r0], #-25	; 0xffffffe7
   120a4:	05bc1dca 	ldreq	r1, [ip, #3530]!	; 0xdca
   120a8:	0b200000 	bleq	8120b0 <__ccfg+0x7f2108>
   120ac:	000018fc 	strdeq	r1, [r0], -ip
   120b0:	e61dcc04 	ldr	ip, [sp], -r4, lsl #24
   120b4:	24000005 	strcs	r0, [r0], #-5
   120b8:	000b270b 	andeq	r2, fp, fp, lsl #14
   120bc:	0dcf0400 	cfstrdeq	mvd0, [pc]	; 120c4 <__exidx_end+0xd01c>
   120c0:	0000060a 	andeq	r0, r0, sl, lsl #12
   120c4:	18ea0b28 	stmiane	sl!, {r3, r5, r8, r9, fp}^
   120c8:	d0040000 	andle	r0, r4, r0
   120cc:	00062409 	andeq	r2, r6, r9, lsl #8
   120d0:	5f0e2c00 	svcpl	0x000e2c00
   120d4:	04006275 	streq	r6, [r0], #-629	; 0xfffffd8b
   120d8:	02c711d3 	sbceq	r1, r7, #-1073741772	; 0xc0000034
   120dc:	0e300000 	cdpeq	0, 3, cr0, cr0, cr0, {0}
   120e0:	0070755f 	rsbseq	r7, r0, pc, asr r5
   120e4:	ef12d404 	svc	0x0012d404
   120e8:	38000002 	stmdacc	r0, {r1}
   120ec:	72755f0e 	rsbsvc	r5, r5, #14, 30	; 0x38
   120f0:	07d50400 	ldrbeq	r0, [r5, r0, lsl #8]
   120f4:	0000002c 	andeq	r0, r0, ip, lsr #32
   120f8:	0b3e0b3c 	bleq	f94df0 <__ccfg+0xf74e48>
   120fc:	d8040000 	stmdale	r4, {}	; <UNPREDICTABLE>
   12100:	00062a11 	andeq	r2, r6, r1, lsl sl
   12104:	cd0b4000 	stcgt	0, cr4, [fp, #-0]
   12108:	0400000a 	streq	r0, [r0], #-10
   1210c:	063a11d9 			; <UNDEFINED> instruction: 0x063a11d9
   12110:	0e430000 	cdpeq	0, 4, cr0, cr3, cr0, {0}
   12114:	00626c5f 	rsbeq	r6, r2, pc, asr ip
   12118:	c711dc04 	ldrgt	sp, [r1, -r4, lsl #24]
   1211c:	44000002 	strmi	r0, [r0], #-2
   12120:	0009030b 	andeq	r0, r9, fp, lsl #6
   12124:	07df0400 	ldrbeq	r0, [pc, r0, lsl #8]
   12128:	0000002c 	andeq	r0, r0, ip, lsr #32
   1212c:	043b0b4c 	ldrteq	r0, [fp], #-2892	; 0xfffff4b4
   12130:	e0040000 	and	r0, r4, r0
   12134:	00007f0a 	andeq	r7, r0, sl, lsl #30
   12138:	040b5000 	streq	r5, [fp], #-0
   1213c:	04000044 	streq	r0, [r0], #-68	; 0xffffffbc
   12140:	045612e3 	ldrbeq	r1, [r6], #-739	; 0xfffffd1d
   12144:	0b540000 	bleq	151214c <__ccfg+0x14f21a4>
   12148:	0000091b 	andeq	r0, r0, fp, lsl r9
   1214c:	130ce704 	movwne	lr, #50948	; 0xc704
   12150:	58000001 	stmdapl	r0, {r0}
   12154:	0008330b 	andeq	r3, r8, fp, lsl #6
   12158:	0ee90400 	cdpeq	4, 14, cr0, cr9, cr0, {0}
   1215c:	000000ed 	andeq	r0, r0, sp, ror #1
   12160:	0af90b5c 	beq	ffe54ed8 <_estack+0xdfe4fed8>
   12164:	ea040000 	b	11216c <__ccfg+0xf21c4>
   12168:	00002c09 	andeq	r2, r0, r9, lsl #24
   1216c:	13006400 	movwne	r6, #1024	; 0x400
   12170:	0000002c 	andeq	r0, r0, ip, lsr #32
   12174:	00000456 	andeq	r0, r0, r6, asr r4
   12178:	00045614 	andeq	r5, r4, r4, lsl r6
   1217c:	00f91400 	rscseq	r1, r9, r0, lsl #8
   12180:	aa140000 	bge	512188 <__ccfg+0x4f21e0>
   12184:	14000005 	strne	r0, [r0], #-5
   12188:	0000002c 	andeq	r0, r0, ip, lsr #32
   1218c:	61040f00 	tstvs	r4, r0, lsl #30
   12190:	15000004 	strne	r0, [r0, #-4]
   12194:	00000456 	andeq	r0, r0, r6, asr r4
   12198:	00444216 	subeq	r4, r4, r6, lsl r2
   1219c:	04042800 	streq	r2, [r4], #-2048	; 0xfffff800
   121a0:	aa080265 	bge	212b3c <__ccfg+0x1f2b94>
   121a4:	17000005 	strne	r0, [r0, -r5]
   121a8:	00000784 	andeq	r0, r0, r4, lsl #15
   121ac:	07026704 	streq	r6, [r2, -r4, lsl #14]
   121b0:	0000002c 	andeq	r0, r0, ip, lsr #32
   121b4:	061c1700 	ldreq	r1, [ip], -r0, lsl #14
   121b8:	6c040000 	stcvs	0, cr0, [r4], {-0}
   121bc:	06960b02 	ldreq	r0, [r6], r2, lsl #22
   121c0:	17040000 	strne	r0, [r4, -r0]
   121c4:	0000028d 	andeq	r0, r0, sp, lsl #5
   121c8:	14026c04 	strne	r6, [r2], #-3076	; 0xfffff3fc
   121cc:	00000696 	muleq	r0, r6, r6
   121d0:	0b2d1708 	bleq	b57df8 <__ccfg+0xb37e50>
   121d4:	6c040000 	stcvs	0, cr0, [r4], {-0}
   121d8:	06961e02 	ldreq	r1, [r6], r2, lsl #28
   121dc:	170c0000 	strne	r0, [ip, -r0]
   121e0:	00000499 	muleq	r0, r9, r4
   121e4:	08026e04 	stmdaeq	r2, {r2, r9, sl, fp, sp, lr}
   121e8:	0000002c 	andeq	r0, r0, ip, lsr #32
   121ec:	044b1710 	strbeq	r1, [fp], #-1808	; 0xfffff8f0
   121f0:	6f040000 	svcvs	0x00040000
   121f4:	08960802 	ldmeq	r6, {r1, fp}
   121f8:	17140000 	ldrne	r0, [r4, -r0]
   121fc:	00000ae0 	andeq	r0, r0, r0, ror #21
   12200:	07027204 	streq	r7, [r2, -r4, lsl #4]
   12204:	0000002c 	andeq	r0, r0, ip, lsr #32
   12208:	3e321730 	mrccc	7, 1, r1, cr2, cr0, {1}
   1220c:	73040000 	movwvc	r0, #16384	; 0x4000
   12210:	08ab1602 	stmiaeq	fp!, {r1, r9, sl, ip}
   12214:	17340000 	ldrne	r0, [r4, -r0]!
   12218:	000005e2 	andeq	r0, r0, r2, ror #11
   1221c:	07027504 	streq	r7, [r2, -r4, lsl #10]
   12220:	0000002c 	andeq	r0, r0, ip, lsr #32
   12224:	072b1738 			; <UNDEFINED> instruction: 0x072b1738
   12228:	77040000 	strvc	r0, [r4, -r0]
   1222c:	08bc0a02 	ldmeq	ip!, {r1, r9, fp}
   12230:	173c0000 	ldrne	r0, [ip, -r0]!
   12234:	00000308 	andeq	r0, r0, r8, lsl #6
   12238:	13027a04 	movwne	r7, #10756	; 0x2a04
   1223c:	00000179 	andeq	r0, r0, r9, ror r1
   12240:	03b41740 			; <UNDEFINED> instruction: 0x03b41740
   12244:	7b040000 	blvc	11224c <__ccfg+0xf22a4>
   12248:	002c0702 	eoreq	r0, ip, r2, lsl #14
   1224c:	17440000 	strbne	r0, [r4, -r0]
   12250:	000004f3 	strdeq	r0, [r0], -r3
   12254:	13027c04 	movwne	r7, #11268	; 0x2c04
   12258:	00000179 	andeq	r0, r0, r9, ror r1
   1225c:	06541748 	ldrbeq	r1, [r4], -r8, asr #14
   12260:	7d040000 	stcvc	0, cr0, [r4, #-0]
   12264:	08c21402 	stmiaeq	r2, {r1, sl, ip}^
   12268:	174c0000 	strbne	r0, [ip, -r0]
   1226c:	000008e9 	andeq	r0, r0, r9, ror #17
   12270:	07028004 	streq	r8, [r2, -r4]
   12274:	0000002c 	andeq	r0, r0, ip, lsr #32
   12278:	09801750 	stmibeq	r0, {r4, r6, r8, r9, sl, ip}
   1227c:	81040000 	mrshi	r0, (UNDEF: 4)
   12280:	05aa0902 	streq	r0, [sl, #2306]!	; 0x902
   12284:	17540000 	ldrbne	r0, [r4, -r0]
   12288:	0000099a 	muleq	r0, sl, r9
   1228c:	0702a404 	streq	sl, [r2, -r4, lsl #8]
   12290:	00000871 	andeq	r0, r0, r1, ror r8
   12294:	082b1858 	stmdaeq	fp!, {r3, r4, r6, fp, ip}
   12298:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
   1229c:	02aa1302 	adceq	r1, sl, #134217728	; 0x8000000
   122a0:	01480000 	mrseq	r0, (UNDEF: 72)
   122a4:	00056f18 	andeq	r6, r5, r8, lsl pc
   122a8:	02a90400 	adceq	r0, r9, #0, 8
   122ac:	00026712 	andeq	r6, r2, r2, lsl r7
   122b0:	18014c00 	stmdane	r1, {sl, fp, lr}
   122b4:	00000556 	andeq	r0, r0, r6, asr r5
   122b8:	0c02ad04 	stceq	13, cr10, [r2], {4}
   122bc:	000008d3 	ldrdeq	r0, [r0], -r3
   122c0:	271802dc 			; <UNDEFINED> instruction: 0x271802dc
   122c4:	0400000a 	streq	r0, [r0], #-10
   122c8:	571002b2 			; <UNDEFINED> instruction: 0x571002b2
   122cc:	e0000006 	and	r0, r0, r6
   122d0:	086c1802 	stmdaeq	ip!, {r1, fp, ip}^
   122d4:	b4040000 	strlt	r0, [r4], #-0
   122d8:	08df0a02 	ldmeq	pc, {r1, r9, fp}^	; <UNPREDICTABLE>
   122dc:	02ec0000 	rsceq	r0, ip, #0
   122e0:	b0040f00 	andlt	r0, r4, r0, lsl #30
   122e4:	02000005 	andeq	r0, r0, #5
   122e8:	09910801 	ldmibeq	r1, {r0, fp}
   122ec:	b0150000 	andslt	r0, r5, r0
   122f0:	0f000005 	svceq	0x00000005
   122f4:	00043804 	andeq	r3, r4, r4, lsl #16
   122f8:	002c1300 	eoreq	r1, ip, r0, lsl #6
   122fc:	05e00000 	strbeq	r0, [r0, #0]!
   12300:	56140000 	ldrpl	r0, [r4], -r0
   12304:	14000004 	strne	r0, [r0], #-4
   12308:	000000f9 	strdeq	r0, [r0], -r9
   1230c:	0005e014 	andeq	lr, r5, r4, lsl r0
   12310:	002c1400 	eoreq	r1, ip, r0, lsl #8
   12314:	0f000000 	svceq	0x00000000
   12318:	0005b704 	andeq	fp, r5, r4, lsl #14
   1231c:	c2040f00 	andgt	r0, r4, #0, 30
   12320:	13000005 	movwne	r0, #5
   12324:	0000008b 	andeq	r0, r0, fp, lsl #1
   12328:	0000060a 	andeq	r0, r0, sl, lsl #12
   1232c:	00045614 	andeq	r5, r4, r4, lsl r6
   12330:	00f91400 	rscseq	r1, r9, r0, lsl #8
   12334:	8b140000 	blhi	51233c <__ccfg+0x4f2394>
   12338:	14000000 	strne	r0, [r0], #-0
   1233c:	0000002c 	andeq	r0, r0, ip, lsr #32
   12340:	ec040f00 	stc	15, cr0, [r4], {-0}
   12344:	13000005 	movwne	r0, #5
   12348:	0000002c 	andeq	r0, r0, ip, lsr #32
   1234c:	00000624 	andeq	r0, r0, r4, lsr #12
   12350:	00045614 	andeq	r5, r4, r4, lsl r6
   12354:	00f91400 	rscseq	r1, r9, r0, lsl #8
   12358:	0f000000 	svceq	0x00000000
   1235c:	00061004 	andeq	r1, r6, r4
   12360:	00550800 	subseq	r0, r5, r0, lsl #16
   12364:	063a0000 	ldrteq	r0, [sl], -r0
   12368:	25090000 	strcs	r0, [r9, #-0]
   1236c:	02000000 	andeq	r0, r0, #0
   12370:	00550800 	subseq	r0, r5, r0, lsl #16
   12374:	064a0000 	strbeq	r0, [sl], -r0
   12378:	25090000 	strcs	r0, [r9, #-0]
   1237c:	00000000 	andeq	r0, r0, r0
   12380:	04290400 	strteq	r0, [r9], #-1024	; 0xfffffc00
   12384:	24040000 	strcs	r0, [r4], #-0
   12388:	02f51a01 	rscseq	r1, r5, #4096	; 0x1000
   1238c:	58190000 	ldmdapl	r9, {}	; <UNPREDICTABLE>
   12390:	0c000044 	stceq	0, cr0, [r0], {68}	; 0x44
   12394:	08012804 	stmdaeq	r1, {r2, fp, sp}
   12398:	00000690 	muleq	r0, r0, r6
   1239c:	000b1617 	andeq	r1, fp, r7, lsl r6
   123a0:	012a0400 			; <UNDEFINED> instruction: 0x012a0400
   123a4:	00069011 	andeq	r9, r6, r1, lsl r0
   123a8:	3b170000 	blcc	5d23b0 <__ccfg+0x5b2408>
   123ac:	04000009 	streq	r0, [r0], #-9
   123b0:	2c07012b 	stfcss	f0, [r7], {43}	; 0x2b
   123b4:	04000000 	streq	r0, [r0], #-0
   123b8:	0005ce17 	andeq	ip, r5, r7, lsl lr
   123bc:	012c0400 			; <UNDEFINED> instruction: 0x012c0400
   123c0:	0006960b 	andeq	r9, r6, fp, lsl #12
   123c4:	0f000800 	svceq	0x00000800
   123c8:	00065704 	andeq	r5, r6, r4, lsl #14
   123cc:	4a040f00 	bmi	115fd4 <__ccfg+0xf602c>
   123d0:	19000006 	stmdbne	r0, {r1, r2}
   123d4:	000003a0 	andeq	r0, r0, r0, lsr #7
   123d8:	0144040e 	cmpeq	r4, lr, lsl #8
   123dc:	0006d508 	andeq	sp, r6, r8, lsl #10
   123e0:	125e1700 	subsne	r1, lr, #0, 14
   123e4:	45040000 	strmi	r0, [r4, #-0]
   123e8:	06d51201 	ldrbeq	r1, [r5], r1, lsl #4
   123ec:	17000000 	strne	r0, [r0, -r0]
   123f0:	00000679 	andeq	r0, r0, r9, ror r6
   123f4:	12014604 	andne	r4, r1, #4, 12	; 0x400000
   123f8:	000006d5 	ldrdeq	r0, [r0], -r5
   123fc:	11031706 	tstne	r3, r6, lsl #14
   12400:	47040000 	strmi	r0, [r4, -r0]
   12404:	00631201 	rsbeq	r1, r3, r1, lsl #4
   12408:	000c0000 	andeq	r0, ip, r0
   1240c:	00006308 	andeq	r6, r0, r8, lsl #6
   12410:	0006e500 	andeq	lr, r6, r0, lsl #10
   12414:	00250900 	eoreq	r0, r5, r0, lsl #18
   12418:	00020000 	andeq	r0, r2, r0
   1241c:	8504d01a 	strhi	sp, [r4, #-26]	; 0xffffffe6
   12420:	07fa0702 	ldrbeq	r0, [sl, r2, lsl #14]!
   12424:	d3170000 	tstle	r7, #0
   12428:	0400000a 	streq	r0, [r0], #-10
   1242c:	25180287 	ldrcs	r0, [r8, #-647]	; 0xfffffd79
   12430:	00000000 	andeq	r0, r0, r0
   12434:	000a2f17 	andeq	r2, sl, r7, lsl pc
   12438:	02880400 	addeq	r0, r8, #0, 8
   1243c:	0005aa12 	andeq	sl, r5, r2, lsl sl
   12440:	e1170400 	tst	r7, r0, lsl #8
   12444:	04000003 	streq	r0, [r0], #-3
   12448:	fa100289 	blx	412e74 <__ccfg+0x3f2ecc>
   1244c:	08000007 	stmdaeq	r0, {r0, r1, r2}
   12450:	0008bd17 	andeq	fp, r8, r7, lsl sp
   12454:	028a0400 	addeq	r0, sl, #0, 8
   12458:	00018f17 	andeq	r8, r1, r7, lsl pc
   1245c:	23172400 	tstcs	r7, #0, 8
   12460:	04000006 	streq	r0, [r0], #-6
   12464:	2c0f028b 	sfmcs	f0, 4, [pc], {139}	; 0x8b
   12468:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
   1246c:	000b1117 	andeq	r1, fp, r7, lsl r1
   12470:	028c0400 	addeq	r0, ip, #0, 8
   12474:	0000782c 	andeq	r7, r0, ip, lsr #16
   12478:	85175000 	ldrhi	r5, [r7, #-0]
   1247c:	04000000 	streq	r0, [r0], #-0
   12480:	9c1a028d 	lfmls	f0, 4, [sl], {141}	; 0x8d
   12484:	58000006 	stmdapl	r0, {r1, r2}
   12488:	00052b17 	andeq	r2, r5, r7, lsl fp
   1248c:	028e0400 	addeq	r0, lr, #0, 8
   12490:	0000ed16 	andeq	lr, r0, r6, lsl sp
   12494:	3c176800 	ldccc	8, cr6, [r7], {-0}
   12498:	0400000a 	streq	r0, [r0], #-10
   1249c:	ed16028f 	lfm	f0, 4, [r6, #-572]	; 0xfffffdc4
   124a0:	70000000 	andvc	r0, r0, r0
   124a4:	00006f17 	andeq	r6, r0, r7, lsl pc
   124a8:	02900400 	addseq	r0, r0, #0, 8
   124ac:	0000ed16 	andeq	lr, r0, r6, lsl sp
   124b0:	f9177800 			; <UNDEFINED> instruction: 0xf9177800
   124b4:	04000008 	streq	r0, [r0], #-8
   124b8:	0a100291 	beq	412f04 <__ccfg+0x3f2f5c>
   124bc:	80000008 	andhi	r0, r0, r8
   124c0:	0003be17 	andeq	fp, r3, r7, lsl lr
   124c4:	02920400 	addseq	r0, r2, #0, 8
   124c8:	00081a10 	andeq	r1, r8, r0, lsl sl
   124cc:	bd178800 	ldclt	8, cr8, [r7, #-0]
   124d0:	04000009 	streq	r0, [r0], #-9
   124d4:	2c0f0293 	sfmcs	f0, 4, [pc], {147}	; 0x93
   124d8:	a0000000 	andge	r0, r0, r0
   124dc:	00026117 	andeq	r6, r2, r7, lsl r1
   124e0:	02940400 	addseq	r0, r4, #0, 8
   124e4:	0000ed16 	andeq	lr, r0, r6, lsl sp
   124e8:	6017a400 	andsvs	sl, r7, r0, lsl #8
   124ec:	04000005 	streq	r0, [r0], #-5
   124f0:	ed160295 	lfm	f0, 4, [r6, #-596]	; 0xfffffdac
   124f4:	ac000000 	stcge	0, cr0, [r0], {-0}
   124f8:	0004a317 	andeq	sl, r4, r7, lsl r3
   124fc:	02960400 	addseq	r0, r6, #0, 8
   12500:	0000ed16 	andeq	lr, r0, r6, lsl sp
   12504:	b017b400 	andslt	fp, r7, r0, lsl #8
   12508:	04000006 	streq	r0, [r0], #-6
   1250c:	ed160297 	lfm	f0, 4, [r6, #-604]	; 0xfffffda4
   12510:	bc000000 	stclt	0, cr0, [r0], {-0}
   12514:	00051a17 	andeq	r1, r5, r7, lsl sl
   12518:	02980400 	addseq	r0, r8, #0, 8
   1251c:	0000ed16 	andeq	lr, r0, r6, lsl sp
   12520:	8217c400 	andshi	ip, r7, #0, 8
   12524:	04000007 	streq	r0, [r0], #-7
   12528:	2c080299 	sfmcs	f0, 4, [r8], {153}	; 0x99
   1252c:	cc000000 	stcgt	0, cr0, [r0], {-0}
   12530:	05b00800 	ldreq	r0, [r0, #2048]!	; 0x800
   12534:	080a0000 	stmdaeq	sl, {}	; <UNPREDICTABLE>
   12538:	25090000 	strcs	r0, [r9, #-0]
   1253c:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
   12540:	05b00800 	ldreq	r0, [r0, #2048]!	; 0x800
   12544:	081a0000 	ldmdaeq	sl, {}	; <UNPREDICTABLE>
   12548:	25090000 	strcs	r0, [r9, #-0]
   1254c:	07000000 	streq	r0, [r0, -r0]
   12550:	05b00800 	ldreq	r0, [r0, #2048]!	; 0x800
   12554:	082a0000 	stmdaeq	sl!, {}	; <UNPREDICTABLE>
   12558:	25090000 	strcs	r0, [r9, #-0]
   1255c:	17000000 	strne	r0, [r0, -r0]
   12560:	04f01a00 	ldrbteq	r1, [r0], #2560	; 0xa00
   12564:	5107029e 			; <UNDEFINED> instruction: 0x5107029e
   12568:	17000008 	strne	r0, [r0, -r8]
   1256c:	00000399 	muleq	r0, r9, r3
   12570:	1b02a104 	blne	ba988 <__ccfg+0x9a9e0>
   12574:	00000851 	andeq	r0, r0, r1, asr r8
   12578:	0b351700 	bleq	d58180 <__ccfg+0xd381d8>
   1257c:	a2040000 	andge	r0, r4, #0
   12580:	08611802 	stmdaeq	r1!, {r1, fp, ip}^
   12584:	00780000 	rsbseq	r0, r8, r0
   12588:	0002ef08 	andeq	lr, r2, r8, lsl #30
   1258c:	00086100 	andeq	r6, r8, r0, lsl #2
   12590:	00250900 	eoreq	r0, r5, r0, lsl #18
   12594:	001d0000 	andseq	r0, sp, r0
   12598:	00002508 	andeq	r2, r0, r8, lsl #10
   1259c:	00087100 	andeq	r7, r8, r0, lsl #2
   125a0:	00250900 	eoreq	r0, r5, r0, lsl #18
   125a4:	001d0000 	andseq	r0, sp, r0
   125a8:	8304f01b 	movwhi	pc, #16411	; 0x401b	; <UNPREDICTABLE>
   125ac:	08960302 	ldmeq	r6, {r1, r8, r9}
   125b0:	421c0000 	andsmi	r0, ip, #0
   125b4:	04000044 	streq	r0, [r0], #-68	; 0xffffffbc
   125b8:	e50b029a 	str	r0, [fp, #-666]	; 0xfffffd66
   125bc:	1c000006 	stcne	0, cr0, [r0], {6}
   125c0:	000008d7 	ldrdeq	r0, [r0], -r7
   125c4:	0b02a304 	bleq	bb1dc <__ccfg+0x9b234>
   125c8:	0000082a 	andeq	r0, r0, sl, lsr #16
   125cc:	05b00800 	ldreq	r0, [r0, #2048]!	; 0x800
   125d0:	08a60000 	stmiaeq	r6!, {}	; <UNPREDICTABLE>
   125d4:	25090000 	strcs	r0, [r9, #-0]
   125d8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   125dc:	0b1c1d00 	bleq	7199e4 <__ccfg+0x6f9a3c>
   125e0:	040f0000 	streq	r0, [pc], #-0	; 125e8 <__exidx_end+0xd540>
   125e4:	000008a6 	andeq	r0, r0, r6, lsr #17
   125e8:	0008bc1e 	andeq	fp, r8, lr, lsl ip
   125ec:	04561400 	ldrbeq	r1, [r6], #-1024	; 0xfffffc00
   125f0:	0f000000 	svceq	0x00000000
   125f4:	0008b104 	andeq	fp, r8, r4, lsl #2
   125f8:	79040f00 	stmdbvc	r4, {r8, r9, sl, fp}
   125fc:	1e000001 	cdpne	0, 0, cr0, cr0, cr1, {0}
   12600:	000008d3 	ldrdeq	r0, [r0], -r3
   12604:	00002c14 	andeq	r2, r0, r4, lsl ip
   12608:	040f0000 	streq	r0, [pc], #-0	; 12610 <__exidx_end+0xd568>
   1260c:	000008d9 	ldrdeq	r0, [r0], -r9
   12610:	08c8040f 	stmiaeq	r8, {r0, r1, r2, r3, sl}^
   12614:	4a080000 	bmi	21261c <__ccfg+0x1f2674>
   12618:	ef000006 	svc	0x00000006
   1261c:	09000008 	stmdbeq	r0, {r3}
   12620:	00000025 	andeq	r0, r0, r5, lsr #32
   12624:	991f0002 	ldmdbls	pc, {r1}	; <UNPREDICTABLE>
   12628:	04000008 	streq	r0, [r0], #-8
   1262c:	56170333 			; <UNDEFINED> instruction: 0x56170333
   12630:	1f000004 	svcne	0x00000004
   12634:	00000892 	muleq	r0, r2, r8
   12638:	1d033404 	cfstrsne	mvf3, [r3, #-16]
   1263c:	0000045c 	andeq	r0, r0, ip, asr r4
   12640:	003fd420 	eorseq	sp, pc, r0, lsr #8
   12644:	0e670600 	cdpeq	6, 6, cr0, cr7, cr0, {0}
   12648:	000005aa 	andeq	r0, r0, sl, lsr #11
   1264c:	000adb21 	andeq	sp, sl, r1, lsr #22
   12650:	05900600 	ldreq	r0, [r0, #1536]	; 0x600
   12654:	0000002c 	andeq	r0, r0, ip, lsr #32
   12658:	00004224 	andeq	r4, r0, r4, lsr #4
   1265c:	00000038 	andeq	r0, r0, r8, lsr r0
   12660:	09449c01 	stmdbeq	r4, {r0, sl, fp, ip, pc}^
   12664:	e1220000 			; <UNDEFINED> instruction: 0xe1220000
   12668:	01000043 	tsteq	r0, r3, asr #32
   1266c:	04561249 	ldrbeq	r1, [r6], #-585	; 0xfffffdb7
   12670:	580c0000 	stmdapl	ip, {}	; <UNPREDICTABLE>
   12674:	58060000 	stmdapl	r6, {}	; <UNPREDICTABLE>
   12678:	23000000 	movwcs	r0, #0
   1267c:	00004231 	andeq	r4, r0, r1, lsr r2
   12680:	10069f06 	andne	r9, r6, r6, lsl #30
   12684:	14000042 	strne	r0, [r0], #-66	; 0xffffffbe
   12688:	01000000 	mrseq	r0, (UNDEF: 0)
   1268c:	125f249c 	subsne	r2, pc, #156, 8	; 0x9c000000
   12690:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
   12694:	00002515 	andeq	r2, r0, r5, lsl r5
   12698:	22500100 	subscs	r0, r0, #0, 2
   1269c:	000043e1 	andeq	r4, r0, r1, ror #7
   126a0:	56124001 	ldrpl	r4, [r2], -r1
   126a4:	3d000004 	stccc	0, cr0, [r0, #-16]
   126a8:	39000058 	stmdbcc	r0, {r3, r4, r6}
   126ac:	00000058 	andeq	r0, r0, r8, asr r0
   126b0:	0009f500 	andeq	pc, r9, r0, lsl #10
   126b4:	91000400 	tstls	r0, r0, lsl #8
   126b8:	04000043 	streq	r0, [r0], #-67	; 0xffffffbd
   126bc:	0040ea01 	subeq	lr, r0, r1, lsl #20
   126c0:	42bb0c00 	adcsmi	r0, fp, #0, 24
   126c4:	42ef0000 	rscmi	r0, pc, #0
   126c8:	425c0000 	subsmi	r0, ip, #0
   126cc:	00380000 	eorseq	r0, r8, r0
   126d0:	89c90000 	stmibhi	r9, {}^	; <UNPREDICTABLE>
   126d4:	04020000 	streq	r0, [r2], #-0
   126d8:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
   126dc:	07040300 	streq	r0, [r4, -r0, lsl #6]
   126e0:	000003d4 	ldrdeq	r0, [r0], -r4
   126e4:	32050803 	andcc	r0, r5, #196608	; 0x30000
   126e8:	03000006 	movweq	r0, #6
   126ec:	3fbb0408 	svccc	0x00bb0408
   126f0:	42040000 	andmi	r0, r4, #0
   126f4:	02000009 	andeq	r0, r0, #9
   126f8:	2c170165 	ldfcss	f0, [r7], {101}	; 0x65
   126fc:	03000000 	movweq	r0, #0
   12700:	098a0601 	stmibeq	sl, {r0, r9, sl}
   12704:	01030000 	mrseq	r0, (UNDEF: 3)
   12708:	00098808 	andeq	r8, r9, r8, lsl #16
   1270c:	05020300 	streq	r0, [r2, #-768]	; 0xfffffd00
   12710:	00000844 	andeq	r0, r0, r4, asr #16
   12714:	80070203 	andhi	r0, r7, r3, lsl #4
   12718:	0300000a 	movweq	r0, #10
   1271c:	06370504 	ldrteq	r0, [r7], -r4, lsl #10
   12720:	04030000 	streq	r0, [r3], #-0
   12724:	0003cf07 	andeq	ip, r3, r7, lsl #30
   12728:	07080300 	streq	r0, [r8, -r0, lsl #6]
   1272c:	000003ca 	andeq	r0, r0, sl, asr #7
   12730:	00081b05 	andeq	r1, r8, r5, lsl #22
   12734:	1ec80300 	cdpne	3, 12, cr0, cr8, cr0, {0}
   12738:	00000033 	andeq	r0, r0, r3, lsr r0
   1273c:	000abc05 	andeq	fp, sl, r5, lsl #24
   12740:	0e2e0400 	cdpeq	4, 2, cr0, cr14, cr0, {0}
   12744:	0000006a 	andeq	r0, r0, sl, rrx
   12748:	0002a305 	andeq	sl, r2, r5, lsl #6
   1274c:	0e740400 	cdpeq	4, 7, cr0, cr4, cr0, {0}
   12750:	0000006a 	andeq	r0, r0, sl, rrx
   12754:	a5040406 	strge	r0, [r4, #-1030]	; 0xfffffbfa
   12758:	0000c503 	andeq	ip, r0, r3, lsl #10
   1275c:	05c80700 	strbeq	r0, [r8, #1792]	; 0x700
   12760:	a7040000 	strge	r0, [r4, -r0]
   12764:	0000410c 	andeq	r4, r0, ip, lsl #2
   12768:	088b0700 	stmeq	fp, {r8, r9, sl}
   1276c:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
   12770:	0000c513 	andeq	ip, r0, r3, lsl r5
   12774:	55080000 	strpl	r0, [r8, #-0]
   12778:	d5000000 	strle	r0, [r0, #-0]
   1277c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
   12780:	0000002c 	andeq	r0, r0, ip, lsr #32
   12784:	080a0003 	stmdaeq	sl, {r0, r1}
   12788:	f909a204 			; <UNDEFINED> instruction: 0xf909a204
   1278c:	0b000000 	bleq	12794 <__exidx_end+0xd6ec>
   12790:	0000035e 	andeq	r0, r0, lr, asr r3
   12794:	2507a404 	strcs	sl, [r7, #-1028]	; 0xfffffbfc
   12798:	00000000 	andeq	r0, r0, r0
   1279c:	0004eb0b 	andeq	lr, r4, fp, lsl #22
   127a0:	05a90400 	streq	r0, [r9, #1024]!	; 0x400
   127a4:	000000a3 	andeq	r0, r0, r3, lsr #1
   127a8:	35050004 	strcc	r0, [r5, #-4]
   127ac:	04000007 	streq	r0, [r0], #-7
   127b0:	00d503aa 	sbcseq	r0, r5, sl, lsr #7
   127b4:	040c0000 	streq	r0, [ip], #-0
   127b8:	0042ad05 	subeq	sl, r2, r5, lsl #26
   127bc:	0fd20400 	svceq	0x00d20400
   127c0:	0000006a 	andeq	r0, r0, sl, rrx
   127c4:	00068a05 	andeq	r8, r6, r5, lsl #20
   127c8:	19160500 	ldmdbne	r6, {r8, sl}
   127cc:	00000071 	andeq	r0, r0, r1, ror r0
   127d0:	00021605 	andeq	r1, r2, r5, lsl #12
   127d4:	0d0c0600 	stceq	6, cr0, [ip, #-0]
   127d8:	00000025 	andeq	r0, r0, r5, lsr #32
   127dc:	00059605 	andeq	r9, r5, r5, lsl #12
   127e0:	1b230500 	blne	8d3be8 <__ccfg+0x8b3c40>
   127e4:	0000011f 	andeq	r0, r0, pc, lsl r1
   127e8:	0002e30d 	andeq	lr, r2, sp, lsl #6
   127ec:	34051800 	strcc	r1, [r5], #-2048	; 0xfffff800
   127f0:	00019108 	andeq	r9, r1, r8, lsl #2
   127f4:	0b160b00 	bleq	5953fc <__ccfg+0x575454>
   127f8:	36050000 	strcc	r0, [r5], -r0
   127fc:	00019113 	andeq	r9, r1, r3, lsl r1
   12800:	5f0e0000 	svcpl	0x000e0000
   12804:	3705006b 	strcc	r0, [r5, -fp, rrx]
   12808:	00002507 	andeq	r2, r0, r7, lsl #10
   1280c:	f10b0400 			; <UNDEFINED> instruction: 0xf10b0400
   12810:	05000008 	streq	r0, [r0, #-8]
   12814:	00250b37 	eoreq	r0, r5, r7, lsr fp
   12818:	0b080000 	bleq	212820 <__ccfg+0x1f2878>
   1281c:	00003f86 	andeq	r3, r0, r6, lsl #31
   12820:	25143705 	ldrcs	r3, [r4, #-1797]	; 0xfffff8fb
   12824:	0c000000 	stceq	0, cr0, [r0], {-0}
   12828:	0003f60b 	andeq	pc, r3, fp, lsl #12
   1282c:	1b370500 	blne	dd3c34 <__ccfg+0xdb3c8c>
   12830:	00000025 	andeq	r0, r0, r5, lsr #32
   12834:	785f0e10 	ldmdavc	pc, {r4, r9, sl, fp}^	; <UNPREDICTABLE>
   12838:	0b380500 	bleq	e13c40 <__ccfg+0xdf3c98>
   1283c:	00000197 	muleq	r0, r7, r1
   12840:	040f0014 	streq	r0, [pc], #-20	; 12848 <__exidx_end+0xd7a0>
   12844:	00000137 	andeq	r0, r0, r7, lsr r1
   12848:	00011308 	andeq	r1, r1, r8, lsl #6
   1284c:	0001a700 	andeq	sl, r1, r0, lsl #14
   12850:	002c0900 	eoreq	r0, ip, r0, lsl #18
   12854:	00000000 	andeq	r0, r0, r0
   12858:	00090c0d 	andeq	r0, r9, sp, lsl #24
   1285c:	3c052400 	cfstrscc	mvf2, [r5], {-0}
   12860:	00022a08 	andeq	r2, r2, r8, lsl #20
   12864:	04860b00 	streq	r0, [r6], #2816	; 0xb00
   12868:	3e050000 	cdpcc	0, 0, cr0, cr5, cr0, {0}
   1286c:	00002509 	andeq	r2, r0, r9, lsl #10
   12870:	900b0000 	andls	r0, fp, r0
   12874:	05000003 	streq	r0, [r0, #-3]
   12878:	0025093f 	eoreq	r0, r5, pc, lsr r9
   1287c:	0b040000 	bleq	112884 <__ccfg+0xf28dc>
   12880:	00000339 	andeq	r0, r0, r9, lsr r3
   12884:	25094005 	strcs	r4, [r9, #-5]
   12888:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   1288c:	00054c0b 	andeq	r4, r5, fp, lsl #24
   12890:	09410500 	stmdbeq	r1, {r8, sl}^
   12894:	00000025 	andeq	r0, r0, r5, lsr #32
   12898:	07be0b0c 	ldreq	r0, [lr, ip, lsl #22]!
   1289c:	42050000 	andmi	r0, r5, #0
   128a0:	00002509 	andeq	r2, r0, r9, lsl #10
   128a4:	a50b1000 	strge	r1, [fp, #-0]
   128a8:	05000008 	streq	r0, [r0, #-8]
   128ac:	00250943 	eoreq	r0, r5, r3, asr #18
   128b0:	0b140000 	bleq	5128b8 <__ccfg+0x4f2910>
   128b4:	000002fe 	strdeq	r0, [r0], -lr
   128b8:	25094405 	strcs	r4, [r9, #-1029]	; 0xfffffbfb
   128bc:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   128c0:	00048f0b 	andeq	r8, r4, fp, lsl #30
   128c4:	09450500 	stmdbeq	r5, {r8, sl}^
   128c8:	00000025 	andeq	r0, r0, r5, lsr #32
   128cc:	07530b1c 	smmlaeq	r3, ip, fp, r0
   128d0:	46050000 	strmi	r0, [r5], -r0
   128d4:	00002509 	andeq	r2, r0, r9, lsl #10
   128d8:	10002000 	andne	r2, r0, r0
   128dc:	00000061 	andeq	r0, r0, r1, rrx
   128e0:	4f050108 	svcmi	0x00050108
   128e4:	00026f08 	andeq	r6, r2, r8, lsl #30
   128e8:	0a4a0b00 	beq	12954f0 <__ccfg+0x1275548>
   128ec:	50050000 	andpl	r0, r5, r0
   128f0:	00026f0a 	andeq	r6, r2, sl, lsl #30
   128f4:	6c0b0000 	stcvs	0, cr0, [fp], {-0}
   128f8:	05000009 	streq	r0, [r0, #-9]
   128fc:	026f0951 	rsbeq	r0, pc, #1327104	; 0x144000
   12900:	11800000 	orrne	r0, r0, r0
   12904:	00000ab3 			; <UNDEFINED> instruction: 0x00000ab3
   12908:	130a5305 	movwne	r5, #41733	; 0xa305
   1290c:	00000001 	andeq	r0, r0, r1
   12910:	0b011101 	bleq	56d1c <__ccfg+0x36d74>
   12914:	56050000 	strpl	r0, [r5], -r0
   12918:	0001130a 	andeq	r1, r1, sl, lsl #6
   1291c:	00010400 	andeq	r0, r1, r0, lsl #8
   12920:	00010508 	andeq	r0, r1, r8, lsl #10
   12924:	00027f00 	andeq	r7, r2, r0, lsl #30
   12928:	002c0900 	eoreq	r0, ip, r0, lsl #18
   1292c:	001f0000 	andseq	r0, pc, r0
   12930:	00082b10 	andeq	r2, r8, r0, lsl fp
   12934:	05019000 	streq	r9, [r1, #-0]
   12938:	02c20862 	sbceq	r0, r2, #6422528	; 0x620000
   1293c:	160b0000 	strne	r0, [fp], -r0
   12940:	0500000b 	streq	r0, [r0, #-11]
   12944:	02c21263 	sbceq	r1, r2, #805306374	; 0x30000006
   12948:	0b000000 	bleq	12950 <__exidx_end+0xd8a8>
   1294c:	0000049e 	muleq	r0, lr, r4
   12950:	25066405 	strcs	r6, [r6, #-1029]	; 0xfffffbfb
   12954:	04000000 	streq	r0, [r0], #-0
   12958:	0002ab0b 	andeq	sl, r2, fp, lsl #22
   1295c:	09660500 	stmdbeq	r6!, {r8, sl}^
   12960:	000002c8 	andeq	r0, r0, r8, asr #5
   12964:	00610b08 	rsbeq	r0, r1, r8, lsl #22
   12968:	67050000 	strvs	r0, [r5, -r0]
   1296c:	00022a1e 	andeq	r2, r2, lr, lsl sl
   12970:	0f008800 	svceq	0x00008800
   12974:	00027f04 	andeq	r7, r2, r4, lsl #30
   12978:	02d80800 	sbcseq	r0, r8, #0, 16
   1297c:	02d80000 	sbcseq	r0, r8, #0
   12980:	2c090000 	stccs	0, cr0, [r9], {-0}
   12984:	1f000000 	svcne	0x00000000
   12988:	de040f00 	cdple	15, 0, cr0, cr4, cr0, {0}
   1298c:	12000002 	andne	r0, r0, #2
   12990:	000a040d 	andeq	r0, sl, sp, lsl #8
   12994:	7a050800 	bvc	15499c <__ccfg+0x1349f4>
   12998:	00030708 	andeq	r0, r3, r8, lsl #14
   1299c:	064e0b00 	strbeq	r0, [lr], -r0, lsl #22
   129a0:	7b050000 	blvc	1529a8 <__ccfg+0x132a00>
   129a4:	00030711 	andeq	r0, r3, r1, lsl r7
   129a8:	a50b0000 	strge	r0, [fp, #-0]
   129ac:	05000019 	streq	r0, [r0, #-25]	; 0xffffffe7
   129b0:	0025067c 	eoreq	r0, r5, ip, ror r6
   129b4:	00040000 	andeq	r0, r4, r0
   129b8:	0055040f 	subseq	r0, r5, pc, lsl #8
   129bc:	ee0d0000 	cdp	0, 0, cr0, cr13, cr0, {0}
   129c0:	68000003 	stmdavs	r0, {r0, r1}
   129c4:	5008ba05 	andpl	fp, r8, r5, lsl #20
   129c8:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
   129cc:	0500705f 	streq	r7, [r0, #-95]	; 0xffffffa1
   129d0:	030712bb 	movweq	r1, #29371	; 0x72bb
   129d4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
   129d8:	0500725f 	streq	r7, [r0, #-607]	; 0xfffffda1
   129dc:	002507bc 	strhteq	r0, [r5], -ip
   129e0:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
   129e4:	0500775f 	streq	r7, [r0, #-1887]	; 0xfffff8a1
   129e8:	002507bd 	strhteq	r0, [r5], -sp
   129ec:	0b080000 	bleq	2129f4 <__ccfg+0x1f2a4c>
   129f0:	000001f3 	strdeq	r0, [r0], -r3
   129f4:	5c09be05 	stcpl	14, cr11, [r9], {5}
   129f8:	0c000000 	stceq	0, cr0, [r0], {-0}
   129fc:	0006bf0b 	andeq	fp, r6, fp, lsl #30
   12a00:	09bf0500 	ldmibeq	pc!, {r8, sl}	; <UNPREDICTABLE>
   12a04:	0000005c 	andeq	r0, r0, ip, asr r0
   12a08:	625f0e0e 	subsvs	r0, pc, #14, 28	; 0xe0
   12a0c:	c0050066 	andgt	r0, r5, r6, rrx
   12a10:	0002df11 	andeq	sp, r2, r1, lsl pc
   12a14:	ea0b1000 	b	2d6a1c <__ccfg+0x2b6a74>
   12a18:	05000001 	streq	r0, [r0, #-1]
   12a1c:	002507c1 	eoreq	r0, r5, r1, asr #15
   12a20:	0b180000 	bleq	612a28 <__ccfg+0x5f2a80>
   12a24:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
   12a28:	050ac805 	streq	ip, [sl, #-2053]	; 0xfffff7fb
   12a2c:	1c000001 	stcne	0, cr0, [r0], {1}
   12a30:	0019350b 	andseq	r3, r9, fp, lsl #10
   12a34:	1dca0500 	cfstr64ne	mvdx0, [sl]
   12a38:	000005d4 	ldrdeq	r0, [r0], -r4
   12a3c:	18fc0b20 	ldmne	ip!, {r5, r8, r9, fp}^
   12a40:	cc050000 	stcgt	0, cr0, [r5], {-0}
   12a44:	0005fe1d 	andeq	pc, r5, sp, lsl lr	; <UNPREDICTABLE>
   12a48:	270b2400 	strcs	r2, [fp, -r0, lsl #8]
   12a4c:	0500000b 	streq	r0, [r0, #-11]
   12a50:	06220dcf 	strteq	r0, [r2], -pc, asr #27
   12a54:	0b280000 	bleq	a12a5c <__ccfg+0x9f2ab4>
   12a58:	000018ea 	andeq	r1, r0, sl, ror #17
   12a5c:	3c09d005 	stccc	0, cr13, [r9], {5}
   12a60:	2c000006 	stccs	0, cr0, [r0], {6}
   12a64:	62755f0e 	rsbsvs	r5, r5, #14, 30	; 0x38
   12a68:	11d30500 	bicsne	r0, r3, r0, lsl #10
   12a6c:	000002df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   12a70:	755f0e30 	ldrbvc	r0, [pc, #-3632]	; 11c48 <__exidx_end+0xcba0>
   12a74:	d4050070 	strle	r0, [r5], #-112	; 0xffffff90
   12a78:	00030712 	andeq	r0, r3, r2, lsl r7
   12a7c:	5f0e3800 	svcpl	0x000e3800
   12a80:	05007275 	streq	r7, [r0, #-629]	; 0xfffffd8b
   12a84:	002507d5 	ldrdeq	r0, [r5], -r5	; <UNPREDICTABLE>
   12a88:	0b3c0000 	bleq	f12a90 <__ccfg+0xef2ae8>
   12a8c:	00000b3e 	andeq	r0, r0, lr, lsr fp
   12a90:	4211d805 	andsmi	sp, r1, #327680	; 0x50000
   12a94:	40000006 	andmi	r0, r0, r6
   12a98:	000acd0b 	andeq	ip, sl, fp, lsl #26
   12a9c:	11d90500 	bicsne	r0, r9, r0, lsl #10
   12aa0:	00000652 	andeq	r0, r0, r2, asr r6
   12aa4:	6c5f0e43 	mrrcvs	14, 4, r0, pc, cr3	; <UNPREDICTABLE>
   12aa8:	dc050062 	stcle	0, cr0, [r5], {98}	; 0x62
   12aac:	0002df11 	andeq	sp, r2, r1, lsl pc
   12ab0:	030b4400 	movweq	r4, #46080	; 0xb400
   12ab4:	05000009 	streq	r0, [r0, #-9]
   12ab8:	002507df 	ldrdeq	r0, [r5], -pc	; <UNPREDICTABLE>
   12abc:	0b4c0000 	bleq	1312ac4 <__ccfg+0x12f2b1c>
   12ac0:	0000043b 	andeq	r0, r0, fp, lsr r4
   12ac4:	8b0ae005 	blhi	2caae0 <__ccfg+0x2aab38>
   12ac8:	50000000 	andpl	r0, r0, r0
   12acc:	0044040b 	subeq	r0, r4, fp, lsl #8
   12ad0:	12e30500 	rscne	r0, r3, #0, 10
   12ad4:	0000046e 	andeq	r0, r0, lr, ror #8
   12ad8:	091b0b54 	ldmdbeq	fp, {r2, r4, r6, r8, r9, fp}
   12adc:	e7050000 	str	r0, [r5, -r0]
   12ae0:	00012b0c 	andeq	r2, r1, ip, lsl #22
   12ae4:	330b5800 	movwcc	r5, #47104	; 0xb800
   12ae8:	05000008 	streq	r0, [r0, #-8]
   12aec:	00f90ee9 	rscseq	r0, r9, r9, ror #29
   12af0:	0b5c0000 	bleq	1712af8 <__ccfg+0x16f2b50>
   12af4:	00000af9 	strdeq	r0, [r0], -r9
   12af8:	2509ea05 	strcs	lr, [r9, #-2565]	; 0xfffff5fb
   12afc:	64000000 	strvs	r0, [r0], #-0
   12b00:	00251300 	eoreq	r1, r5, r0, lsl #6
   12b04:	046e0000 	strbteq	r0, [lr], #-0
   12b08:	6e140000 	cdpvs	0, 1, cr0, cr4, cr0, {0}
   12b0c:	14000004 	strne	r0, [r0], #-4
   12b10:	00000105 	andeq	r0, r0, r5, lsl #2
   12b14:	0005c214 	andeq	ip, r5, r4, lsl r2
   12b18:	00251400 	eoreq	r1, r5, r0, lsl #8
   12b1c:	0f000000 	svceq	0x00000000
   12b20:	00047904 	andeq	r7, r4, r4, lsl #18
   12b24:	046e1500 	strbteq	r1, [lr], #-1280	; 0xfffffb00
   12b28:	42160000 	andsmi	r0, r6, #0
   12b2c:	28000044 	stmdacs	r0, {r2, r6}
   12b30:	02650504 	rsbeq	r0, r5, #4, 10	; 0x1000000
   12b34:	0005c208 	andeq	ip, r5, r8, lsl #4
   12b38:	07841700 	streq	r1, [r4, r0, lsl #14]
   12b3c:	67050000 	strvs	r0, [r5, -r0]
   12b40:	00250702 	eoreq	r0, r5, r2, lsl #14
   12b44:	17000000 	strne	r0, [r0, -r0]
   12b48:	0000061c 	andeq	r0, r0, ip, lsl r6
   12b4c:	0b026c05 	bleq	adb68 <__ccfg+0x8dbc0>
   12b50:	000006ae 	andeq	r0, r0, lr, lsr #13
   12b54:	028d1704 	addeq	r1, sp, #4, 14	; 0x100000
   12b58:	6c050000 	stcvs	0, cr0, [r5], {-0}
   12b5c:	06ae1402 	strteq	r1, [lr], r2, lsl #8
   12b60:	17080000 	strne	r0, [r8, -r0]
   12b64:	00000b2d 	andeq	r0, r0, sp, lsr #22
   12b68:	1e026c05 	cdpne	12, 0, cr6, cr2, cr5, {0}
   12b6c:	000006ae 	andeq	r0, r0, lr, lsr #13
   12b70:	0499170c 	ldreq	r1, [r9], #1804	; 0x70c
   12b74:	6e050000 	cdpvs	0, 0, cr0, cr5, cr0, {0}
   12b78:	00250802 	eoreq	r0, r5, r2, lsl #16
   12b7c:	17100000 	ldrne	r0, [r0, -r0]
   12b80:	0000044b 	andeq	r0, r0, fp, asr #8
   12b84:	08026f05 	stmdaeq	r2, {r0, r2, r8, r9, sl, fp, sp, lr}
   12b88:	000008ae 	andeq	r0, r0, lr, lsr #17
   12b8c:	0ae01714 	beq	ff8187e4 <_estack+0xdf8137e4>
   12b90:	72050000 	andvc	r0, r5, #0
   12b94:	00250702 	eoreq	r0, r5, r2, lsl #14
   12b98:	17300000 	ldrne	r0, [r0, -r0]!
   12b9c:	00003e32 	andeq	r3, r0, r2, lsr lr
   12ba0:	16027305 	strne	r7, [r2], -r5, lsl #6
   12ba4:	000008c3 	andeq	r0, r0, r3, asr #17
   12ba8:	05e21734 	strbeq	r1, [r2, #1844]!	; 0x734
   12bac:	75050000 	strvc	r0, [r5, #-0]
   12bb0:	00250702 	eoreq	r0, r5, r2, lsl #14
   12bb4:	17380000 	ldrne	r0, [r8, -r0]!
   12bb8:	0000072b 	andeq	r0, r0, fp, lsr #14
   12bbc:	0a027705 	beq	b07d8 <__ccfg+0x90830>
   12bc0:	000008d4 	ldrdeq	r0, [r0], -r4
   12bc4:	0308173c 	movweq	r1, #34620	; 0x873c
   12bc8:	7a050000 	bvc	152bd0 <__ccfg+0x132c28>
   12bcc:	01911302 	orrseq	r1, r1, r2, lsl #6
   12bd0:	17400000 	strbne	r0, [r0, -r0]
   12bd4:	000003b4 			; <UNDEFINED> instruction: 0x000003b4
   12bd8:	07027b05 	streq	r7, [r2, -r5, lsl #22]
   12bdc:	00000025 	andeq	r0, r0, r5, lsr #32
   12be0:	04f31744 	ldrbteq	r1, [r3], #1860	; 0x744
   12be4:	7c050000 	stcvc	0, cr0, [r5], {-0}
   12be8:	01911302 	orrseq	r1, r1, r2, lsl #6
   12bec:	17480000 	strbne	r0, [r8, -r0]
   12bf0:	00000654 	andeq	r0, r0, r4, asr r6
   12bf4:	14027d05 	strne	r7, [r2], #-3333	; 0xfffff2fb
   12bf8:	000008da 	ldrdeq	r0, [r0], -sl
   12bfc:	08e9174c 	stmiaeq	r9!, {r2, r3, r6, r8, r9, sl, ip}^
   12c00:	80050000 	andhi	r0, r5, r0
   12c04:	00250702 	eoreq	r0, r5, r2, lsl #14
   12c08:	17500000 	ldrbne	r0, [r0, -r0]
   12c0c:	00000980 	andeq	r0, r0, r0, lsl #19
   12c10:	09028105 	stmdbeq	r2, {r0, r2, r8, pc}
   12c14:	000005c2 	andeq	r0, r0, r2, asr #11
   12c18:	099a1754 	ldmibeq	sl, {r2, r4, r6, r8, r9, sl, ip}
   12c1c:	a4050000 	strge	r0, [r5], #-0
   12c20:	08890702 	stmeq	r9, {r1, r8, r9, sl}
   12c24:	18580000 	ldmdane	r8, {}^	; <UNPREDICTABLE>
   12c28:	0000082b 	andeq	r0, r0, fp, lsr #16
   12c2c:	1302a805 	movwne	sl, #10245	; 0x2805
   12c30:	000002c2 	andeq	r0, r0, r2, asr #5
   12c34:	6f180148 	svcvs	0x00180148
   12c38:	05000005 	streq	r0, [r0, #-5]
   12c3c:	7f1202a9 	svcvc	0x001202a9
   12c40:	4c000002 	stcmi	0, cr0, [r0], {2}
   12c44:	05561801 	ldrbeq	r1, [r6, #-2049]	; 0xfffff7ff
   12c48:	ad050000 	stcge	0, cr0, [r5, #-0]
   12c4c:	08eb0c02 	stmiaeq	fp!, {r1, sl, fp}^
   12c50:	02dc0000 	sbcseq	r0, ip, #0
   12c54:	000a2718 	andeq	r2, sl, r8, lsl r7
   12c58:	02b20500 	adcseq	r0, r2, #0, 10
   12c5c:	00066f10 	andeq	r6, r6, r0, lsl pc
   12c60:	1802e000 	stmdane	r2, {sp, lr, pc}
   12c64:	0000086c 	andeq	r0, r0, ip, ror #16
   12c68:	0a02b405 	beq	bfc84 <__ccfg+0x9fcdc>
   12c6c:	000008f7 	strdeq	r0, [r0], -r7
   12c70:	0f0002ec 	svceq	0x000002ec
   12c74:	0005c804 	andeq	ip, r5, r4, lsl #16
   12c78:	08010300 	stmdaeq	r1, {r8, r9}
   12c7c:	00000991 	muleq	r0, r1, r9
   12c80:	0005c815 	andeq	ip, r5, r5, lsl r8
   12c84:	50040f00 	andpl	r0, r4, r0, lsl #30
   12c88:	13000004 	movwne	r0, #4
   12c8c:	00000025 	andeq	r0, r0, r5, lsr #32
   12c90:	000005f8 	strdeq	r0, [r0], -r8
   12c94:	00046e14 	andeq	r6, r4, r4, lsl lr
   12c98:	01051400 	tsteq	r5, r0, lsl #8
   12c9c:	f8140000 			; <UNDEFINED> instruction: 0xf8140000
   12ca0:	14000005 	strne	r0, [r0], #-5
   12ca4:	00000025 	andeq	r0, r0, r5, lsr #32
   12ca8:	cf040f00 	svcgt	0x00040f00
   12cac:	0f000005 	svceq	0x00000005
   12cb0:	0005da04 	andeq	sp, r5, r4, lsl #20
   12cb4:	00971300 	addseq	r1, r7, r0, lsl #6
   12cb8:	06220000 	strteq	r0, [r2], -r0
   12cbc:	6e140000 	cdpvs	0, 1, cr0, cr4, cr0, {0}
   12cc0:	14000004 	strne	r0, [r0], #-4
   12cc4:	00000105 	andeq	r0, r0, r5, lsl #2
   12cc8:	00009714 	andeq	r9, r0, r4, lsl r7
   12ccc:	00251400 	eoreq	r1, r5, r0, lsl #8
   12cd0:	0f000000 	svceq	0x00000000
   12cd4:	00060404 	andeq	r0, r6, r4, lsl #8
   12cd8:	00251300 	eoreq	r1, r5, r0, lsl #6
   12cdc:	063c0000 	ldrteq	r0, [ip], -r0
   12ce0:	6e140000 	cdpvs	0, 1, cr0, cr4, cr0, {0}
   12ce4:	14000004 	strne	r0, [r0], #-4
   12ce8:	00000105 	andeq	r0, r0, r5, lsl #2
   12cec:	28040f00 	stmdacs	r4, {r8, r9, sl, fp}
   12cf0:	08000006 	stmdaeq	r0, {r1, r2}
   12cf4:	00000055 	andeq	r0, r0, r5, asr r0
   12cf8:	00000652 	andeq	r0, r0, r2, asr r6
   12cfc:	00002c09 	andeq	r2, r0, r9, lsl #24
   12d00:	08000200 	stmdaeq	r0, {r9}
   12d04:	00000055 	andeq	r0, r0, r5, asr r0
   12d08:	00000662 	andeq	r0, r0, r2, ror #12
   12d0c:	00002c09 	andeq	r2, r0, r9, lsl #24
   12d10:	04000000 	streq	r0, [r0], #-0
   12d14:	00000429 	andeq	r0, r0, r9, lsr #8
   12d18:	1a012405 	bne	5bd34 <__ccfg+0x3bd8c>
   12d1c:	0000030d 	andeq	r0, r0, sp, lsl #6
   12d20:	00445819 	subeq	r5, r4, r9, lsl r8
   12d24:	28050c00 	stmdacs	r5, {sl, fp}
   12d28:	06a80801 	strteq	r0, [r8], r1, lsl #16
   12d2c:	16170000 	ldrne	r0, [r7], -r0
   12d30:	0500000b 	streq	r0, [r0, #-11]
   12d34:	a811012a 	ldmdage	r1, {r1, r3, r5, r8}
   12d38:	00000006 	andeq	r0, r0, r6
   12d3c:	00093b17 	andeq	r3, r9, r7, lsl fp
   12d40:	012b0500 			; <UNDEFINED> instruction: 0x012b0500
   12d44:	00002507 	andeq	r2, r0, r7, lsl #10
   12d48:	ce170400 	cfmulsgt	mvf0, mvf7, mvf0
   12d4c:	05000005 	streq	r0, [r0, #-5]
   12d50:	ae0b012c 	adfgeep	f0, f3, #4.0
   12d54:	08000006 	stmdaeq	r0, {r1, r2}
   12d58:	6f040f00 	svcvs	0x00040f00
   12d5c:	0f000006 	svceq	0x00000006
   12d60:	00066204 	andeq	r6, r6, r4, lsl #4
   12d64:	03a01900 	moveq	r1, #0, 18
   12d68:	050e0000 	streq	r0, [lr, #-0]
   12d6c:	ed080144 	stfs	f0, [r8, #-272]	; 0xfffffef0
   12d70:	17000006 	strne	r0, [r0, -r6]
   12d74:	0000125e 	andeq	r1, r0, lr, asr r2
   12d78:	12014505 	andne	r4, r1, #20971520	; 0x1400000
   12d7c:	000006ed 	andeq	r0, r0, sp, ror #13
   12d80:	06791700 	ldrbteq	r1, [r9], -r0, lsl #14
   12d84:	46050000 	strmi	r0, [r5], -r0
   12d88:	06ed1201 	strbteq	r1, [sp], r1, lsl #4
   12d8c:	17060000 	strne	r0, [r6, -r0]
   12d90:	00001103 	andeq	r1, r0, r3, lsl #2
   12d94:	12014705 	andne	r4, r1, #1310720	; 0x140000
   12d98:	00000063 	andeq	r0, r0, r3, rrx
   12d9c:	6308000c 	movwvs	r0, #32780	; 0x800c
   12da0:	fd000000 	stc2	0, cr0, [r0, #-0]
   12da4:	09000006 	stmdbeq	r0, {r1, r2}
   12da8:	0000002c 	andeq	r0, r0, ip, lsr #32
   12dac:	d01a0002 	andsle	r0, sl, r2
   12db0:	07028505 	streq	r8, [r2, -r5, lsl #10]
   12db4:	00000812 	andeq	r0, r0, r2, lsl r8
   12db8:	000ad317 	andeq	sp, sl, r7, lsl r3
   12dbc:	02870500 	addeq	r0, r7, #0, 10
   12dc0:	00002c18 	andeq	r2, r0, r8, lsl ip
   12dc4:	2f170000 	svccs	0x00170000
   12dc8:	0500000a 	streq	r0, [r0, #-10]
   12dcc:	c2120288 	andsgt	r0, r2, #136, 4	; 0x80000008
   12dd0:	04000005 	streq	r0, [r0], #-5
   12dd4:	0003e117 	andeq	lr, r3, r7, lsl r1
   12dd8:	02890500 	addeq	r0, r9, #0, 10
   12ddc:	00081210 	andeq	r1, r8, r0, lsl r2
   12de0:	bd170800 	ldclt	8, cr0, [r7, #-0]
   12de4:	05000008 	streq	r0, [r0, #-8]
   12de8:	a717028a 	ldrge	r0, [r7, -sl, lsl #5]
   12dec:	24000001 	strcs	r0, [r0], #-1
   12df0:	00062317 	andeq	r2, r6, r7, lsl r3
   12df4:	028b0500 	addeq	r0, fp, #0, 10
   12df8:	0000250f 	andeq	r2, r0, pc, lsl #10
   12dfc:	11174800 	tstne	r7, r0, lsl #16
   12e00:	0500000b 	streq	r0, [r0, #-11]
   12e04:	782c028c 	stmdavc	ip!, {r2, r3, r7, r9}
   12e08:	50000000 	andpl	r0, r0, r0
   12e0c:	00008517 	andeq	r8, r0, r7, lsl r5
   12e10:	028d0500 	addeq	r0, sp, #0, 10
   12e14:	0006b41a 	andeq	fp, r6, sl, lsl r4
   12e18:	2b175800 	blcs	5e8e20 <__ccfg+0x5c8e78>
   12e1c:	05000005 	streq	r0, [r0, #-5]
   12e20:	f916028e 			; <UNDEFINED> instruction: 0xf916028e
   12e24:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
   12e28:	000a3c17 	andeq	r3, sl, r7, lsl ip
   12e2c:	028f0500 	addeq	r0, pc, #0, 10
   12e30:	0000f916 	andeq	pc, r0, r6, lsl r9	; <UNPREDICTABLE>
   12e34:	6f177000 	svcvs	0x00177000
   12e38:	05000000 	streq	r0, [r0, #-0]
   12e3c:	f9160290 			; <UNDEFINED> instruction: 0xf9160290
   12e40:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
   12e44:	0008f917 	andeq	pc, r8, r7, lsl r9	; <UNPREDICTABLE>
   12e48:	02910500 	addseq	r0, r1, #0, 10
   12e4c:	00082210 	andeq	r2, r8, r0, lsl r2
   12e50:	be178000 	cdplt	0, 1, cr8, cr7, cr0, {0}
   12e54:	05000003 	streq	r0, [r0, #-3]
   12e58:	32100292 	andscc	r0, r0, #536870921	; 0x20000009
   12e5c:	88000008 	stmdahi	r0, {r3}
   12e60:	0009bd17 	andeq	fp, r9, r7, lsl sp
   12e64:	02930500 	addseq	r0, r3, #0, 10
   12e68:	0000250f 	andeq	r2, r0, pc, lsl #10
   12e6c:	6117a000 	tstvs	r7, r0
   12e70:	05000002 	streq	r0, [r0, #-2]
   12e74:	f9160294 			; <UNDEFINED> instruction: 0xf9160294
   12e78:	a4000000 	strge	r0, [r0], #-0
   12e7c:	00056017 	andeq	r6, r5, r7, lsl r0
   12e80:	02950500 	addseq	r0, r5, #0, 10
   12e84:	0000f916 	andeq	pc, r0, r6, lsl r9	; <UNPREDICTABLE>
   12e88:	a317ac00 	tstge	r7, #0, 24
   12e8c:	05000004 	streq	r0, [r0, #-4]
   12e90:	f9160296 			; <UNDEFINED> instruction: 0xf9160296
   12e94:	b4000000 	strlt	r0, [r0], #-0
   12e98:	0006b017 	andeq	fp, r6, r7, lsl r0
   12e9c:	02970500 	addseq	r0, r7, #0, 10
   12ea0:	0000f916 	andeq	pc, r0, r6, lsl r9	; <UNPREDICTABLE>
   12ea4:	1a17bc00 	bne	601eac <__ccfg+0x5e1f04>
   12ea8:	05000005 	streq	r0, [r0, #-5]
   12eac:	f9160298 			; <UNDEFINED> instruction: 0xf9160298
   12eb0:	c4000000 	strgt	r0, [r0], #-0
   12eb4:	00078217 	andeq	r8, r7, r7, lsl r2
   12eb8:	02990500 	addseq	r0, r9, #0, 10
   12ebc:	00002508 	andeq	r2, r0, r8, lsl #10
   12ec0:	0800cc00 	stmdaeq	r0, {sl, fp, lr, pc}
   12ec4:	000005c8 	andeq	r0, r0, r8, asr #11
   12ec8:	00000822 	andeq	r0, r0, r2, lsr #16
   12ecc:	00002c09 	andeq	r2, r0, r9, lsl #24
   12ed0:	08001900 	stmdaeq	r0, {r8, fp, ip}
   12ed4:	000005c8 	andeq	r0, r0, r8, asr #11
   12ed8:	00000832 	andeq	r0, r0, r2, lsr r8
   12edc:	00002c09 	andeq	r2, r0, r9, lsl #24
   12ee0:	08000700 	stmdaeq	r0, {r8, r9, sl}
   12ee4:	000005c8 	andeq	r0, r0, r8, asr #11
   12ee8:	00000842 	andeq	r0, r0, r2, asr #16
   12eec:	00002c09 	andeq	r2, r0, r9, lsl #24
   12ef0:	1a001700 	bne	18af8 <__exidx_end+0x13a50>
   12ef4:	029e05f0 	addseq	r0, lr, #240, 10	; 0x3c000000
   12ef8:	00086907 	andeq	r6, r8, r7, lsl #18
   12efc:	03991700 	orrseq	r1, r9, #0, 14
   12f00:	a1050000 	mrsge	r0, (UNDEF: 5)
   12f04:	08691b02 	stmdaeq	r9!, {r1, r8, r9, fp, ip}^
   12f08:	17000000 	strne	r0, [r0, -r0]
   12f0c:	00000b35 	andeq	r0, r0, r5, lsr fp
   12f10:	1802a205 	stmdane	r2, {r0, r2, r9, sp, pc}
   12f14:	00000879 	andeq	r0, r0, r9, ror r8
   12f18:	07080078 	smlsdxeq	r8, r8, r0, r0
   12f1c:	79000003 	stmdbvc	r0, {r0, r1}
   12f20:	09000008 	stmdbeq	r0, {r3}
   12f24:	0000002c 	andeq	r0, r0, ip, lsr #32
   12f28:	2c08001d 	stccs	0, cr0, [r8], {29}
   12f2c:	89000000 	stmdbhi	r0, {}	; <UNPREDICTABLE>
   12f30:	09000008 	stmdbeq	r0, {r3}
   12f34:	0000002c 	andeq	r0, r0, ip, lsr #32
   12f38:	f01b001d 			; <UNDEFINED> instruction: 0xf01b001d
   12f3c:	03028305 	movweq	r8, #8965	; 0x2305
   12f40:	000008ae 	andeq	r0, r0, lr, lsr #17
   12f44:	0044421c 	subeq	r4, r4, ip, lsl r2
   12f48:	029a0500 	addseq	r0, sl, #0, 10
   12f4c:	0006fd0b 	andeq	pc, r6, fp, lsl #26
   12f50:	08d71c00 	ldmeq	r7, {sl, fp, ip}^
   12f54:	a3050000 	movwge	r0, #20480	; 0x5000
   12f58:	08420b02 	stmdaeq	r2, {r1, r8, r9, fp}^
   12f5c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   12f60:	000005c8 	andeq	r0, r0, r8, asr #11
   12f64:	000008be 			; <UNDEFINED> instruction: 0x000008be
   12f68:	00002c09 	andeq	r2, r0, r9, lsl #24
   12f6c:	1d001800 	stcne	8, cr1, [r0, #-0]
   12f70:	00000b1c 	andeq	r0, r0, ip, lsl fp
   12f74:	08be040f 	ldmeq	lr!, {r0, r1, r2, r3, sl}
   12f78:	d41e0000 	ldrle	r0, [lr], #-0
   12f7c:	14000008 	strne	r0, [r0], #-8
   12f80:	0000046e 	andeq	r0, r0, lr, ror #8
   12f84:	c9040f00 	stmdbgt	r4, {r8, r9, sl, fp}
   12f88:	0f000008 	svceq	0x00000008
   12f8c:	00019104 	andeq	r9, r1, r4, lsl #2
   12f90:	08eb1e00 	stmiaeq	fp!, {r9, sl, fp, ip}^
   12f94:	25140000 	ldrcs	r0, [r4, #-0]
   12f98:	00000000 	andeq	r0, r0, r0
   12f9c:	08f1040f 	ldmeq	r1!, {r0, r1, r2, r3, sl}^
   12fa0:	040f0000 	streq	r0, [pc], #-0	; 12fa8 <__exidx_end+0xdf00>
   12fa4:	000008e0 	andeq	r0, r0, r0, ror #17
   12fa8:	00066208 	andeq	r6, r6, r8, lsl #4
   12fac:	00090700 	andeq	r0, r9, r0, lsl #14
   12fb0:	002c0900 	eoreq	r0, ip, r0, lsl #18
   12fb4:	00020000 	andeq	r0, r2, r0
   12fb8:	0008991f 	andeq	r9, r8, pc, lsl r9
   12fbc:	03330500 	teqeq	r3, #0, 10
   12fc0:	00046e17 	andeq	r6, r4, r7, lsl lr
   12fc4:	08921f00 	ldmeq	r2, {r8, r9, sl, fp, ip}
   12fc8:	34050000 	strcc	r0, [r5], #-0
   12fcc:	04741d03 	ldrbteq	r1, [r4], #-3331	; 0xfffff2fd
   12fd0:	af050000 	svcge	0x00050000
   12fd4:	07000042 	streq	r0, [r0, -r2, asr #32]
   12fd8:	01071725 	tsteq	r7, r5, lsr #14
   12fdc:	db050000 	blle	152fe4 <__ccfg+0x13303c>
   12fe0:	07000005 	streq	r0, [r0, -r5]
   12fe4:	007f122a 	rsbseq	r1, pc, sl, lsr #4
   12fe8:	e80d0000 	stmda	sp, {}	; <UNPREDICTABLE>
   12fec:	10000043 	andne	r0, r0, r3, asr #32
   12ff0:	61083607 	tstvs	r8, r7, lsl #12
   12ff4:	0b000009 	bleq	13020 <__exidx_end+0xdf78>
   12ff8:	000042e8 	andeq	r4, r0, r8, ror #5
   12ffc:	2d0a3707 	stccs	7, cr3, [sl, #-28]	; 0xffffffe4
   13000:	00000009 	andeq	r0, r0, r9
   13004:	00434b0b 	subeq	r4, r3, fp, lsl #22
   13008:	0e380700 	cdpeq	7, 3, cr0, cr8, cr0, {0}
   1300c:	00000921 	andeq	r0, r0, r1, lsr #18
   13010:	41200008 			; <UNDEFINED> instruction: 0x41200008
   13014:	08000043 	stmdaeq	r0, {r0, r1, r6}
   13018:	006a169a 	mlseq	sl, sl, r6, r1
   1301c:	8b200000 	blhi	813024 <__ccfg+0x7f307c>
   13020:	08000042 	stmdaeq	r0, {r1, r6}
   13024:	0025159b 	mlaeq	r5, fp, r5, r1
   13028:	c2080000 	andgt	r0, r8, #0
   1302c:	89000005 	stmdbhi	r0, {r0, r2}
   13030:	09000009 	stmdbeq	r0, {r0, r3}
   13034:	0000002c 	andeq	r0, r0, ip, lsr #32
   13038:	95200001 	strls	r0, [r0, #-1]!
   1303c:	08000042 	stmdaeq	r0, {r1, r6}
   13040:	0979179e 	ldmdbeq	r9!, {r1, r2, r3, r4, r7, r8, r9, sl, ip}^
   13044:	3c210000 	stccc	0, cr0, [r1], #-0
   13048:	08000043 	stmdaeq	r0, {r0, r1, r6}
   1304c:	092d0b3b 	pusheq	{r0, r1, r3, r4, r5, r8, r9, fp}
   13050:	425c0000 	subsmi	r0, ip, #0
   13054:	00380000 	eorseq	r0, r8, r0
   13058:	9c010000 	stcls	0, cr0, [r1], {-0}
   1305c:	000009e6 	andeq	r0, r0, r6, ror #19
   13060:	01007422 	tsteq	r0, r2, lsr #8
   13064:	09e61024 	stmibeq	r6!, {r2, r5, ip}^
   13068:	58640000 	stmdapl	r4!, {}^	; <UNPREDICTABLE>
   1306c:	585c0000 	ldmdapl	ip, {}^	; <UNPREDICTABLE>
   13070:	6e230000 	cdpvs	0, 2, cr0, cr3, cr0, {0}
   13074:	0100776f 	tsteq	r0, pc, ror #14
   13078:	09391226 	ldmdbeq	r9!, {r1, r2, r5, r9, ip}
   1307c:	91020000 	mrsls	r0, (UNDEF: 2)
   13080:	426e2468 	rsbmi	r2, lr, #104, 8	; 0x68000000
   13084:	09ec0000 	stmibeq	ip!, {}^	; <UNPREDICTABLE>
   13088:	01250000 			; <UNDEFINED> instruction: 0x01250000
   1308c:	007d0251 	rsbseq	r0, sp, r1, asr r2
   13090:	01520125 	cmpeq	r2, r5, lsr #2
   13094:	0f000030 	svceq	0x00000030
   13098:	00092d04 	andeq	r2, r9, r4, lsl #26
   1309c:	429d2600 	addsmi	r2, sp, #0, 12
   130a0:	429d0000 	addsmi	r0, sp, #0
   130a4:	a1090000 	mrsge	r0, (UNDEF: 9)
   130a8:	0a34000c 	beq	d130e0 <__ccfg+0xcf3138>
   130ac:	00040000 	andeq	r0, r4, r0
   130b0:	000045b3 			; <UNDEFINED> instruction: 0x000045b3
   130b4:	40ea0104 	rscmi	r0, sl, r4, lsl #2
   130b8:	530c0000 	movwpl	r0, #49152	; 0xc000
   130bc:	94000043 	strls	r0, [r0], #-67	; 0xffffffbd
   130c0:	94000043 	strls	r0, [r0], #-67	; 0xffffffbd
   130c4:	2c000042 	stccs	0, cr0, [r0], {66}	; 0x42
   130c8:	92000000 	andls	r0, r0, #0
   130cc:	0200008b 	andeq	r0, r0, #139	; 0x8b
   130d0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
   130d4:	04030074 	streq	r0, [r3], #-116	; 0xffffff8c
   130d8:	0003d407 	andeq	sp, r3, r7, lsl #8
   130dc:	05080300 	streq	r0, [r8, #-768]	; 0xfffffd00
   130e0:	00000632 	andeq	r0, r0, r2, lsr r6
   130e4:	bb040803 	bllt	1150f8 <__ccfg+0xf5150>
   130e8:	0400003f 	streq	r0, [r0], #-63	; 0xffffffc1
   130ec:	00000942 	andeq	r0, r0, r2, asr #18
   130f0:	17016502 	strne	r6, [r1, -r2, lsl #10]
   130f4:	0000002c 	andeq	r0, r0, ip, lsr #32
   130f8:	8a060103 	bhi	19350c <__ccfg+0x173564>
   130fc:	03000009 	movweq	r0, #9
   13100:	09880801 	stmibeq	r8, {r0, fp}
   13104:	02030000 	andeq	r0, r3, #0
   13108:	00084405 	andeq	r4, r8, r5, lsl #8
   1310c:	07020300 	streq	r0, [r2, -r0, lsl #6]
   13110:	00000a80 	andeq	r0, r0, r0, lsl #21
   13114:	37050403 	strcc	r0, [r5, -r3, lsl #8]
   13118:	03000006 	movweq	r0, #6
   1311c:	03cf0704 	biceq	r0, pc, #4, 14	; 0x100000
   13120:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
   13124:	0003ca07 	andeq	ip, r3, r7, lsl #20
   13128:	081b0500 	ldmdaeq	fp, {r8, sl}
   1312c:	c8030000 	stmdagt	r3, {}	; <UNPREDICTABLE>
   13130:	0000331e 	andeq	r3, r0, lr, lsl r3
   13134:	0abc0500 	beq	fef1453c <_estack+0xdef0f53c>
   13138:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
   1313c:	00006a0e 	andeq	r6, r0, lr, lsl #20
   13140:	02a30500 	adceq	r0, r3, #0, 10
   13144:	74040000 	strvc	r0, [r4], #-0
   13148:	00006a0e 	andeq	r6, r0, lr, lsl #20
   1314c:	04040600 	streq	r0, [r4], #-1536	; 0xfffffa00
   13150:	00c503a5 	sbceq	r0, r5, r5, lsr #7
   13154:	c8070000 	stmdagt	r7, {}	; <UNPREDICTABLE>
   13158:	04000005 	streq	r0, [r0], #-5
   1315c:	00410ca7 	subeq	r0, r1, r7, lsr #25
   13160:	8b070000 	blhi	1d3168 <__ccfg+0x1b31c0>
   13164:	04000008 	streq	r0, [r0], #-8
   13168:	00c513a8 	sbceq	r1, r5, r8, lsr #7
   1316c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   13170:	00000055 	andeq	r0, r0, r5, asr r0
   13174:	000000d5 	ldrdeq	r0, [r0], -r5
   13178:	00002c09 	andeq	r2, r0, r9, lsl #24
   1317c:	0a000300 	beq	13d84 <__exidx_end+0xecdc>
   13180:	09a20408 	stmibeq	r2!, {r3, sl}
   13184:	000000f9 	strdeq	r0, [r0], -r9
   13188:	00035e0b 	andeq	r5, r3, fp, lsl #28
   1318c:	07a40400 	streq	r0, [r4, r0, lsl #8]!
   13190:	00000025 	andeq	r0, r0, r5, lsr #32
   13194:	04eb0b00 	strbteq	r0, [fp], #2816	; 0xb00
   13198:	a9040000 	stmdbge	r4, {}	; <UNPREDICTABLE>
   1319c:	0000a305 	andeq	sl, r0, r5, lsl #6
   131a0:	05000400 	streq	r0, [r0, #-1024]	; 0xfffffc00
   131a4:	00000735 	andeq	r0, r0, r5, lsr r7
   131a8:	d503aa04 	strle	sl, [r3, #-2564]	; 0xfffff5fc
   131ac:	0c000000 	stceq	0, cr0, [r0], {-0}
   131b0:	42ad0504 	adcmi	r0, sp, #4, 10	; 0x1000000
   131b4:	d2040000 	andle	r0, r4, #0
   131b8:	00006a0f 	andeq	r6, r0, pc, lsl #20
   131bc:	068a0500 	streq	r0, [sl], r0, lsl #10
   131c0:	16050000 	strne	r0, [r5], -r0
   131c4:	00007119 	andeq	r7, r0, r9, lsl r1
   131c8:	02160500 	andseq	r0, r6, #0, 10
   131cc:	0c060000 	stceq	0, cr0, [r6], {-0}
   131d0:	0000250d 	andeq	r2, r0, sp, lsl #10
   131d4:	05960500 	ldreq	r0, [r6, #1280]	; 0x500
   131d8:	23050000 	movwcs	r0, #20480	; 0x5000
   131dc:	00011f1b 	andeq	r1, r1, fp, lsl pc
   131e0:	02e30d00 	rsceq	r0, r3, #0, 26
   131e4:	05180000 	ldreq	r0, [r8, #-0]
   131e8:	01910834 	orrseq	r0, r1, r4, lsr r8
   131ec:	160b0000 	strne	r0, [fp], -r0
   131f0:	0500000b 	streq	r0, [r0, #-11]
   131f4:	01911336 	orrseq	r1, r1, r6, lsr r3
   131f8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
   131fc:	05006b5f 	streq	r6, [r0, #-2911]	; 0xfffff4a1
   13200:	00250737 	eoreq	r0, r5, r7, lsr r7
   13204:	0b040000 	bleq	11320c <__ccfg+0xf3264>
   13208:	000008f1 	strdeq	r0, [r0], -r1
   1320c:	250b3705 	strcs	r3, [fp, #-1797]	; 0xfffff8fb
   13210:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   13214:	003f860b 	eorseq	r8, pc, fp, lsl #12
   13218:	14370500 	ldrtne	r0, [r7], #-1280	; 0xfffffb00
   1321c:	00000025 	andeq	r0, r0, r5, lsr #32
   13220:	03f60b0c 	mvnseq	r0, #12, 22	; 0x3000
   13224:	37050000 	strcc	r0, [r5, -r0]
   13228:	0000251b 	andeq	r2, r0, fp, lsl r5
   1322c:	5f0e1000 	svcpl	0x000e1000
   13230:	38050078 	stmdacc	r5, {r3, r4, r5, r6}
   13234:	0001970b 	andeq	r9, r1, fp, lsl #14
   13238:	0f001400 	svceq	0x00001400
   1323c:	00013704 	andeq	r3, r1, r4, lsl #14
   13240:	01130800 	tsteq	r3, r0, lsl #16
   13244:	01a70000 			; <UNDEFINED> instruction: 0x01a70000
   13248:	2c090000 	stccs	0, cr0, [r9], {-0}
   1324c:	00000000 	andeq	r0, r0, r0
   13250:	090c0d00 	stmdbeq	ip, {r8, sl, fp}
   13254:	05240000 	streq	r0, [r4, #-0]!
   13258:	022a083c 	eoreq	r0, sl, #60, 16	; 0x3c0000
   1325c:	860b0000 	strhi	r0, [fp], -r0
   13260:	05000004 	streq	r0, [r0, #-4]
   13264:	0025093e 	eoreq	r0, r5, lr, lsr r9
   13268:	0b000000 	bleq	13270 <__exidx_end+0xe1c8>
   1326c:	00000390 	muleq	r0, r0, r3
   13270:	25093f05 	strcs	r3, [r9, #-3845]	; 0xfffff0fb
   13274:	04000000 	streq	r0, [r0], #-0
   13278:	0003390b 	andeq	r3, r3, fp, lsl #18
   1327c:	09400500 	stmdbeq	r0, {r8, sl}^
   13280:	00000025 	andeq	r0, r0, r5, lsr #32
   13284:	054c0b08 	strbeq	r0, [ip, #-2824]	; 0xfffff4f8
   13288:	41050000 	mrsmi	r0, (UNDEF: 5)
   1328c:	00002509 	andeq	r2, r0, r9, lsl #10
   13290:	be0b0c00 	cdplt	12, 0, cr0, cr11, cr0, {0}
   13294:	05000007 	streq	r0, [r0, #-7]
   13298:	00250942 	eoreq	r0, r5, r2, asr #18
   1329c:	0b100000 	bleq	4132a4 <__ccfg+0x3f32fc>
   132a0:	000008a5 	andeq	r0, r0, r5, lsr #17
   132a4:	25094305 	strcs	r4, [r9, #-773]	; 0xfffffcfb
   132a8:	14000000 	strne	r0, [r0], #-0
   132ac:	0002fe0b 	andeq	pc, r2, fp, lsl #28
   132b0:	09440500 	stmdbeq	r4, {r8, sl}^
   132b4:	00000025 	andeq	r0, r0, r5, lsr #32
   132b8:	048f0b18 	streq	r0, [pc], #2840	; 132c0 <__exidx_end+0xe218>
   132bc:	45050000 	strmi	r0, [r5, #-0]
   132c0:	00002509 	andeq	r2, r0, r9, lsl #10
   132c4:	530b1c00 	movwpl	r1, #48128	; 0xbc00
   132c8:	05000007 	streq	r0, [r0, #-7]
   132cc:	00250946 	eoreq	r0, r5, r6, asr #18
   132d0:	00200000 	eoreq	r0, r0, r0
   132d4:	00006110 	andeq	r6, r0, r0, lsl r1
   132d8:	05010800 	streq	r0, [r1, #-2048]	; 0xfffff800
   132dc:	026f084f 	rsbeq	r0, pc, #5177344	; 0x4f0000
   132e0:	4a0b0000 	bmi	2d32e8 <__ccfg+0x2b3340>
   132e4:	0500000a 	streq	r0, [r0, #-10]
   132e8:	026f0a50 	rsbeq	r0, pc, #80, 20	; 0x50000
   132ec:	0b000000 	bleq	132f4 <__exidx_end+0xe24c>
   132f0:	0000096c 	andeq	r0, r0, ip, ror #18
   132f4:	6f095105 	svcvs	0x00095105
   132f8:	80000002 	andhi	r0, r0, r2
   132fc:	000ab311 	andeq	fp, sl, r1, lsl r3
   13300:	0a530500 	beq	14d4708 <__ccfg+0x14b4760>
   13304:	00000113 	andeq	r0, r0, r3, lsl r1
   13308:	01110100 	tsteq	r1, r0, lsl #2
   1330c:	0500000b 	streq	r0, [r0, #-11]
   13310:	01130a56 	tsteq	r3, r6, asr sl
   13314:	01040000 	mrseq	r0, (UNDEF: 4)
   13318:	01050800 	tsteq	r5, r0, lsl #16
   1331c:	027f0000 	rsbseq	r0, pc, #0
   13320:	2c090000 	stccs	0, cr0, [r9], {-0}
   13324:	1f000000 	svcne	0x00000000
   13328:	082b1000 	stmdaeq	fp!, {ip}
   1332c:	01900000 	orrseq	r0, r0, r0
   13330:	c2086205 	andgt	r6, r8, #1342177280	; 0x50000000
   13334:	0b000002 	bleq	13344 <__exidx_end+0xe29c>
   13338:	00000b16 	andeq	r0, r0, r6, lsl fp
   1333c:	c2126305 	andsgt	r6, r2, #335544320	; 0x14000000
   13340:	00000002 	andeq	r0, r0, r2
   13344:	00049e0b 	andeq	r9, r4, fp, lsl #28
   13348:	06640500 	strbteq	r0, [r4], -r0, lsl #10
   1334c:	00000025 	andeq	r0, r0, r5, lsr #32
   13350:	02ab0b04 	adceq	r0, fp, #4, 22	; 0x1000
   13354:	66050000 	strvs	r0, [r5], -r0
   13358:	0002c809 	andeq	ip, r2, r9, lsl #16
   1335c:	610b0800 	tstvs	fp, r0, lsl #16
   13360:	05000000 	streq	r0, [r0, #-0]
   13364:	022a1e67 	eoreq	r1, sl, #1648	; 0x670
   13368:	00880000 	addeq	r0, r8, r0
   1336c:	027f040f 	rsbseq	r0, pc, #251658240	; 0xf000000
   13370:	d8080000 	stmdale	r8, {}	; <UNPREDICTABLE>
   13374:	d8000002 	stmdale	r0, {r1}
   13378:	09000002 	stmdbeq	r0, {r1}
   1337c:	0000002c 	andeq	r0, r0, ip, lsr #32
   13380:	040f001f 	streq	r0, [pc], #-31	; 13388 <__exidx_end+0xe2e0>
   13384:	000002de 	ldrdeq	r0, [r0], -lr
   13388:	0a040d12 	beq	1167d8 <__ccfg+0xf6830>
   1338c:	05080000 	streq	r0, [r8, #-0]
   13390:	0307087a 	movweq	r0, #30842	; 0x787a
   13394:	4e0b0000 	cdpmi	0, 0, cr0, cr11, cr0, {0}
   13398:	05000006 	streq	r0, [r0, #-6]
   1339c:	0307117b 	movweq	r1, #29051	; 0x717b
   133a0:	0b000000 	bleq	133a8 <__exidx_end+0xe300>
   133a4:	000019a5 	andeq	r1, r0, r5, lsr #19
   133a8:	25067c05 	strcs	r7, [r6, #-3077]	; 0xfffff3fb
   133ac:	04000000 	streq	r0, [r0], #-0
   133b0:	55040f00 	strpl	r0, [r4, #-3840]	; 0xfffff100
   133b4:	0d000000 	stceq	0, cr0, [r0, #-0]
   133b8:	000003ee 	andeq	r0, r0, lr, ror #7
   133bc:	08ba0568 	ldmeq	sl!, {r3, r5, r6, r8, sl}
   133c0:	00000450 	andeq	r0, r0, r0, asr r4
   133c4:	00705f0e 	rsbseq	r5, r0, lr, lsl #30
   133c8:	0712bb05 	ldreq	fp, [r2, -r5, lsl #22]
   133cc:	00000003 	andeq	r0, r0, r3
   133d0:	00725f0e 	rsbseq	r5, r2, lr, lsl #30
   133d4:	2507bc05 	strcs	fp, [r7, #-3077]	; 0xfffff3fb
   133d8:	04000000 	streq	r0, [r0], #-0
   133dc:	00775f0e 	rsbseq	r5, r7, lr, lsl #30
   133e0:	2507bd05 	strcs	fp, [r7, #-3333]	; 0xfffff2fb
   133e4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   133e8:	0001f30b 	andeq	pc, r1, fp, lsl #6
   133ec:	09be0500 	ldmibeq	lr!, {r8, sl}
   133f0:	0000005c 	andeq	r0, r0, ip, asr r0
   133f4:	06bf0b0c 	ldrteq	r0, [pc], ip, lsl #22
   133f8:	bf050000 	svclt	0x00050000
   133fc:	00005c09 	andeq	r5, r0, r9, lsl #24
   13400:	5f0e0e00 	svcpl	0x000e0e00
   13404:	05006662 	streq	r6, [r0, #-1634]	; 0xfffff99e
   13408:	02df11c0 	sbcseq	r1, pc, #192, 2	; 0x30
   1340c:	0b100000 	bleq	413414 <__ccfg+0x3f346c>
   13410:	000001ea 	andeq	r0, r0, sl, ror #3
   13414:	2507c105 	strcs	ip, [r7, #-261]	; 0xfffffefb
   13418:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   1341c:	0002b00b 	andeq	fp, r2, fp
   13420:	0ac80500 	beq	ff214828 <_estack+0xdf20f828>
   13424:	00000105 	andeq	r0, r0, r5, lsl #2
   13428:	19350b1c 	ldmdbne	r5!, {r2, r3, r4, r8, r9, fp}
   1342c:	ca050000 	bgt	153434 <__ccfg+0x13348c>
   13430:	0005d41d 	andeq	sp, r5, sp, lsl r4
   13434:	fc0b2000 	stc2	0, cr2, [fp], {-0}
   13438:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
   1343c:	05fe1dcc 	ldrbeq	r1, [lr, #3532]!	; 0xdcc
   13440:	0b240000 	bleq	913448 <__ccfg+0x8f34a0>
   13444:	00000b27 	andeq	r0, r0, r7, lsr #22
   13448:	220dcf05 	andcs	ip, sp, #5, 30
   1344c:	28000006 	stmdacs	r0, {r1, r2}
   13450:	0018ea0b 	andseq	lr, r8, fp, lsl #20
   13454:	09d00500 	ldmibeq	r0, {r8, sl}^
   13458:	0000063c 	andeq	r0, r0, ip, lsr r6
   1345c:	755f0e2c 	ldrbvc	r0, [pc, #-3628]	; 12638 <__exidx_end+0xd590>
   13460:	d3050062 	movwle	r0, #20578	; 0x5062
   13464:	0002df11 	andeq	sp, r2, r1, lsl pc
   13468:	5f0e3000 	svcpl	0x000e3000
   1346c:	05007075 	streq	r7, [r0, #-117]	; 0xffffff8b
   13470:	030712d4 	movweq	r1, #29396	; 0x72d4
   13474:	0e380000 	cdpeq	0, 3, cr0, cr8, cr0, {0}
   13478:	0072755f 	rsbseq	r7, r2, pc, asr r5
   1347c:	2507d505 	strcs	sp, [r7, #-1285]	; 0xfffffafb
   13480:	3c000000 	stccc	0, cr0, [r0], {-0}
   13484:	000b3e0b 	andeq	r3, fp, fp, lsl #28
   13488:	11d80500 	bicsne	r0, r8, r0, lsl #10
   1348c:	00000642 	andeq	r0, r0, r2, asr #12
   13490:	0acd0b40 	beq	ff356198 <_estack+0xdf351198>
   13494:	d9050000 	stmdble	r5, {}	; <UNPREDICTABLE>
   13498:	00065211 	andeq	r5, r6, r1, lsl r2
   1349c:	5f0e4300 	svcpl	0x000e4300
   134a0:	0500626c 	streq	r6, [r0, #-620]	; 0xfffffd94
   134a4:	02df11dc 	sbcseq	r1, pc, #220, 2	; 0x37
   134a8:	0b440000 	bleq	11134b0 <__ccfg+0x10f3508>
   134ac:	00000903 	andeq	r0, r0, r3, lsl #18
   134b0:	2507df05 	strcs	sp, [r7, #-3845]	; 0xfffff0fb
   134b4:	4c000000 	stcmi	0, cr0, [r0], {-0}
   134b8:	00043b0b 	andeq	r3, r4, fp, lsl #22
   134bc:	0ae00500 	beq	ff8148c4 <_estack+0xdf80f8c4>
   134c0:	0000008b 	andeq	r0, r0, fp, lsl #1
   134c4:	44040b50 	strmi	r0, [r4], #-2896	; 0xfffff4b0
   134c8:	e3050000 	movw	r0, #20480	; 0x5000
   134cc:	00046e12 	andeq	r6, r4, r2, lsl lr
   134d0:	1b0b5400 	blne	2e84d8 <__ccfg+0x2c8530>
   134d4:	05000009 	streq	r0, [r0, #-9]
   134d8:	012b0ce7 	smulwteq	fp, r7, ip
   134dc:	0b580000 	bleq	16134e4 <__ccfg+0x15f353c>
   134e0:	00000833 	andeq	r0, r0, r3, lsr r8
   134e4:	f90ee905 			; <UNDEFINED> instruction: 0xf90ee905
   134e8:	5c000000 	stcpl	0, cr0, [r0], {-0}
   134ec:	000af90b 	andeq	pc, sl, fp, lsl #18
   134f0:	09ea0500 	stmibeq	sl!, {r8, sl}^
   134f4:	00000025 	andeq	r0, r0, r5, lsr #32
   134f8:	25130064 	ldrcs	r0, [r3, #-100]	; 0xffffff9c
   134fc:	6e000000 	cdpvs	0, 0, cr0, cr0, cr0, {0}
   13500:	14000004 	strne	r0, [r0], #-4
   13504:	0000046e 	andeq	r0, r0, lr, ror #8
   13508:	00010514 	andeq	r0, r1, r4, lsl r5
   1350c:	05c21400 	strbeq	r1, [r2, #1024]	; 0x400
   13510:	25140000 	ldrcs	r0, [r4, #-0]
   13514:	00000000 	andeq	r0, r0, r0
   13518:	0479040f 	ldrbteq	r0, [r9], #-1039	; 0xfffffbf1
   1351c:	6e150000 	cdpvs	0, 1, cr0, cr5, cr0, {0}
   13520:	16000004 	strne	r0, [r0], -r4
   13524:	00004442 	andeq	r4, r0, r2, asr #8
   13528:	65050428 	strvs	r0, [r5, #-1064]	; 0xfffffbd8
   1352c:	05c20802 	strbeq	r0, [r2, #2050]	; 0x802
   13530:	84170000 	ldrhi	r0, [r7], #-0
   13534:	05000007 	streq	r0, [r0, #-7]
   13538:	25070267 	strcs	r0, [r7, #-615]	; 0xfffffd99
   1353c:	00000000 	andeq	r0, r0, r0
   13540:	00061c17 	andeq	r1, r6, r7, lsl ip
   13544:	026c0500 	rsbeq	r0, ip, #0, 10
   13548:	0006ae0b 	andeq	sl, r6, fp, lsl #28
   1354c:	8d170400 	cfldrshi	mvf0, [r7, #-0]
   13550:	05000002 	streq	r0, [r0, #-2]
   13554:	ae14026c 	cdpge	2, 1, cr0, cr4, cr12, {3}
   13558:	08000006 	stmdaeq	r0, {r1, r2}
   1355c:	000b2d17 	andeq	r2, fp, r7, lsl sp
   13560:	026c0500 	rsbeq	r0, ip, #0, 10
   13564:	0006ae1e 	andeq	sl, r6, lr, lsl lr
   13568:	99170c00 	ldmdbls	r7, {sl, fp}
   1356c:	05000004 	streq	r0, [r0, #-4]
   13570:	2508026e 	strcs	r0, [r8, #-622]	; 0xfffffd92
   13574:	10000000 	andne	r0, r0, r0
   13578:	00044b17 	andeq	r4, r4, r7, lsl fp
   1357c:	026f0500 	rsbeq	r0, pc, #0, 10
   13580:	0008ae08 	andeq	sl, r8, r8, lsl #28
   13584:	e0171400 	ands	r1, r7, r0, lsl #8
   13588:	0500000a 	streq	r0, [r0, #-10]
   1358c:	25070272 	strcs	r0, [r7, #-626]	; 0xfffffd8e
   13590:	30000000 	andcc	r0, r0, r0
   13594:	003e3217 	eorseq	r3, lr, r7, lsl r2
   13598:	02730500 	rsbseq	r0, r3, #0, 10
   1359c:	0008c316 	andeq	ip, r8, r6, lsl r3
   135a0:	e2173400 	ands	r3, r7, #0, 8
   135a4:	05000005 	streq	r0, [r0, #-5]
   135a8:	25070275 	strcs	r0, [r7, #-629]	; 0xfffffd8b
   135ac:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
   135b0:	00072b17 	andeq	r2, r7, r7, lsl fp
   135b4:	02770500 	rsbseq	r0, r7, #0, 10
   135b8:	0008d40a 	andeq	sp, r8, sl, lsl #8
   135bc:	08173c00 	ldmdaeq	r7, {sl, fp, ip, sp}
   135c0:	05000003 	streq	r0, [r0, #-3]
   135c4:	9113027a 	tstls	r3, sl, ror r2
   135c8:	40000001 	andmi	r0, r0, r1
   135cc:	0003b417 	andeq	fp, r3, r7, lsl r4
   135d0:	027b0500 	rsbseq	r0, fp, #0, 10
   135d4:	00002507 	andeq	r2, r0, r7, lsl #10
   135d8:	f3174400 	vshl.u16	d4, d0, d7
   135dc:	05000004 	streq	r0, [r0, #-4]
   135e0:	9113027c 	tstls	r3, ip, ror r2
   135e4:	48000001 	stmdami	r0, {r0}
   135e8:	00065417 	andeq	r5, r6, r7, lsl r4
   135ec:	027d0500 	rsbseq	r0, sp, #0, 10
   135f0:	0008da14 	andeq	sp, r8, r4, lsl sl
   135f4:	e9174c00 	ldmdb	r7, {sl, fp, lr}
   135f8:	05000008 	streq	r0, [r0, #-8]
   135fc:	25070280 	strcs	r0, [r7, #-640]	; 0xfffffd80
   13600:	50000000 	andpl	r0, r0, r0
   13604:	00098017 	andeq	r8, r9, r7, lsl r0
   13608:	02810500 	addeq	r0, r1, #0, 10
   1360c:	0005c209 	andeq	ip, r5, r9, lsl #4
   13610:	9a175400 	bls	5e8618 <__ccfg+0x5c8670>
   13614:	05000009 	streq	r0, [r0, #-9]
   13618:	890702a4 	stmdbhi	r7, {r2, r5, r7, r9}
   1361c:	58000008 	stmdapl	r0, {r3}
   13620:	00082b18 	andeq	r2, r8, r8, lsl fp
   13624:	02a80500 	adceq	r0, r8, #0, 10
   13628:	0002c213 	andeq	ip, r2, r3, lsl r2
   1362c:	18014800 	stmdane	r1, {fp, lr}
   13630:	0000056f 	andeq	r0, r0, pc, ror #10
   13634:	1202a905 	andne	sl, r2, #81920	; 0x14000
   13638:	0000027f 	andeq	r0, r0, pc, ror r2
   1363c:	5618014c 	ldrpl	r0, [r8], -ip, asr #2
   13640:	05000005 	streq	r0, [r0, #-5]
   13644:	eb0c02ad 	bl	314100 <__ccfg+0x2f4158>
   13648:	dc000008 	stcle	0, cr0, [r0], {8}
   1364c:	0a271802 	beq	9d965c <__ccfg+0x9b96b4>
   13650:	b2050000 	andlt	r0, r5, #0
   13654:	066f1002 	strbteq	r1, [pc], -r2
   13658:	02e00000 	rsceq	r0, r0, #0
   1365c:	00086c18 	andeq	r6, r8, r8, lsl ip
   13660:	02b40500 	adcseq	r0, r4, #0, 10
   13664:	0008f70a 	andeq	pc, r8, sl, lsl #14
   13668:	0002ec00 	andeq	lr, r2, r0, lsl #24
   1366c:	05c8040f 	strbeq	r0, [r8, #1039]	; 0x40f
   13670:	01030000 	mrseq	r0, (UNDEF: 3)
   13674:	00099108 	andeq	r9, r9, r8, lsl #2
   13678:	05c81500 	strbeq	r1, [r8, #1280]	; 0x500
   1367c:	040f0000 	streq	r0, [pc], #-0	; 13684 <__exidx_end+0xe5dc>
   13680:	00000450 	andeq	r0, r0, r0, asr r4
   13684:	00002513 	andeq	r2, r0, r3, lsl r5
   13688:	0005f800 	andeq	pc, r5, r0, lsl #16
   1368c:	046e1400 	strbteq	r1, [lr], #-1024	; 0xfffffc00
   13690:	05140000 	ldreq	r0, [r4, #-0]
   13694:	14000001 	strne	r0, [r0], #-1
   13698:	000005f8 	strdeq	r0, [r0], -r8
   1369c:	00002514 	andeq	r2, r0, r4, lsl r5
   136a0:	040f0000 	streq	r0, [pc], #-0	; 136a8 <__exidx_end+0xe600>
   136a4:	000005cf 	andeq	r0, r0, pc, asr #11
   136a8:	05da040f 	ldrbeq	r0, [sl, #1039]	; 0x40f
   136ac:	97130000 	ldrls	r0, [r3, -r0]
   136b0:	22000000 	andcs	r0, r0, #0
   136b4:	14000006 	strne	r0, [r0], #-6
   136b8:	0000046e 	andeq	r0, r0, lr, ror #8
   136bc:	00010514 	andeq	r0, r1, r4, lsl r5
   136c0:	00971400 	addseq	r1, r7, r0, lsl #8
   136c4:	25140000 	ldrcs	r0, [r4, #-0]
   136c8:	00000000 	andeq	r0, r0, r0
   136cc:	0604040f 	streq	r0, [r4], -pc, lsl #8
   136d0:	25130000 	ldrcs	r0, [r3, #-0]
   136d4:	3c000000 	stccc	0, cr0, [r0], {-0}
   136d8:	14000006 	strne	r0, [r0], #-6
   136dc:	0000046e 	andeq	r0, r0, lr, ror #8
   136e0:	00010514 	andeq	r0, r1, r4, lsl r5
   136e4:	040f0000 	streq	r0, [pc], #-0	; 136ec <__exidx_end+0xe644>
   136e8:	00000628 	andeq	r0, r0, r8, lsr #12
   136ec:	00005508 	andeq	r5, r0, r8, lsl #10
   136f0:	00065200 	andeq	r5, r6, r0, lsl #4
   136f4:	002c0900 	eoreq	r0, ip, r0, lsl #18
   136f8:	00020000 	andeq	r0, r2, r0
   136fc:	00005508 	andeq	r5, r0, r8, lsl #10
   13700:	00066200 	andeq	r6, r6, r0, lsl #4
   13704:	002c0900 	eoreq	r0, ip, r0, lsl #18
   13708:	00000000 	andeq	r0, r0, r0
   1370c:	00042904 	andeq	r2, r4, r4, lsl #18
   13710:	01240500 			; <UNDEFINED> instruction: 0x01240500
   13714:	00030d1a 	andeq	r0, r3, sl, lsl sp
   13718:	44581900 	ldrbmi	r1, [r8], #-2304	; 0xfffff700
   1371c:	050c0000 	streq	r0, [ip, #-0]
   13720:	a8080128 	stmdage	r8, {r3, r5, r8}
   13724:	17000006 	strne	r0, [r0, -r6]
   13728:	00000b16 	andeq	r0, r0, r6, lsl fp
   1372c:	11012a05 	tstne	r1, r5, lsl #20
   13730:	000006a8 	andeq	r0, r0, r8, lsr #13
   13734:	093b1700 	ldmdbeq	fp!, {r8, r9, sl, ip}
   13738:	2b050000 	blcs	153740 <__ccfg+0x133798>
   1373c:	00250701 	eoreq	r0, r5, r1, lsl #14
   13740:	17040000 	strne	r0, [r4, -r0]
   13744:	000005ce 	andeq	r0, r0, lr, asr #11
   13748:	0b012c05 	bleq	5e764 <__ccfg+0x3e7bc>
   1374c:	000006ae 	andeq	r0, r0, lr, lsr #13
   13750:	040f0008 	streq	r0, [pc], #-8	; 13758 <__exidx_end+0xe6b0>
   13754:	0000066f 	andeq	r0, r0, pc, ror #12
   13758:	0662040f 	strbteq	r0, [r2], -pc, lsl #8
   1375c:	a0190000 	andsge	r0, r9, r0
   13760:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
   13764:	08014405 	stmdaeq	r1, {r0, r2, sl, lr}
   13768:	000006ed 	andeq	r0, r0, sp, ror #13
   1376c:	00125e17 	andseq	r5, r2, r7, lsl lr
   13770:	01450500 	cmpeq	r5, r0, lsl #10
   13774:	0006ed12 	andeq	lr, r6, r2, lsl sp
   13778:	79170000 	ldmdbvc	r7, {}	; <UNPREDICTABLE>
   1377c:	05000006 	streq	r0, [r0, #-6]
   13780:	ed120146 	ldfs	f0, [r2, #-280]	; 0xfffffee8
   13784:	06000006 	streq	r0, [r0], -r6
   13788:	00110317 	andseq	r0, r1, r7, lsl r3
   1378c:	01470500 	cmpeq	r7, r0, lsl #10
   13790:	00006312 	andeq	r6, r0, r2, lsl r3
   13794:	08000c00 	stmdaeq	r0, {sl, fp}
   13798:	00000063 	andeq	r0, r0, r3, rrx
   1379c:	000006fd 	strdeq	r0, [r0], -sp
   137a0:	00002c09 	andeq	r2, r0, r9, lsl #24
   137a4:	1a000200 	bne	13fac <__exidx_end+0xef04>
   137a8:	028505d0 	addeq	r0, r5, #208, 10	; 0x34000000
   137ac:	00081207 	andeq	r1, r8, r7, lsl #4
   137b0:	0ad31700 	beq	ff4d93b8 <_estack+0xdf4d43b8>
   137b4:	87050000 	strhi	r0, [r5, -r0]
   137b8:	002c1802 	eoreq	r1, ip, r2, lsl #16
   137bc:	17000000 	strne	r0, [r0, -r0]
   137c0:	00000a2f 	andeq	r0, r0, pc, lsr #20
   137c4:	12028805 	andne	r8, r2, #327680	; 0x50000
   137c8:	000005c2 	andeq	r0, r0, r2, asr #11
   137cc:	03e11704 	mvneq	r1, #4, 14	; 0x100000
   137d0:	89050000 	stmdbhi	r5, {}	; <UNPREDICTABLE>
   137d4:	08121002 	ldmdaeq	r2, {r1, ip}
   137d8:	17080000 	strne	r0, [r8, -r0]
   137dc:	000008bd 			; <UNDEFINED> instruction: 0x000008bd
   137e0:	17028a05 	strne	r8, [r2, -r5, lsl #20]
   137e4:	000001a7 	andeq	r0, r0, r7, lsr #3
   137e8:	06231724 	strteq	r1, [r3], -r4, lsr #14
   137ec:	8b050000 	blhi	1537f4 <__ccfg+0x13384c>
   137f0:	00250f02 	eoreq	r0, r5, r2, lsl #30
   137f4:	17480000 	strbne	r0, [r8, -r0]
   137f8:	00000b11 	andeq	r0, r0, r1, lsl fp
   137fc:	2c028c05 	stccs	12, cr8, [r2], {5}
   13800:	00000078 	andeq	r0, r0, r8, ror r0
   13804:	00851750 	addeq	r1, r5, r0, asr r7
   13808:	8d050000 	stchi	0, cr0, [r5, #-0]
   1380c:	06b41a02 	ldrteq	r1, [r4], r2, lsl #20
   13810:	17580000 	ldrbne	r0, [r8, -r0]
   13814:	0000052b 	andeq	r0, r0, fp, lsr #10
   13818:	16028e05 	strne	r8, [r2], -r5, lsl #28
   1381c:	000000f9 	strdeq	r0, [r0], -r9
   13820:	0a3c1768 	beq	f195c8 <__ccfg+0xef9620>
   13824:	8f050000 	svchi	0x00050000
   13828:	00f91602 	rscseq	r1, r9, r2, lsl #12
   1382c:	17700000 	ldrbne	r0, [r0, -r0]!
   13830:	0000006f 	andeq	r0, r0, pc, rrx
   13834:	16029005 	strne	r9, [r2], -r5
   13838:	000000f9 	strdeq	r0, [r0], -r9
   1383c:	08f91778 	ldmeq	r9!, {r3, r4, r5, r6, r8, r9, sl, ip}^
   13840:	91050000 	mrsls	r0, (UNDEF: 5)
   13844:	08221002 	stmdaeq	r2!, {r1, ip}
   13848:	17800000 	strne	r0, [r0, r0]
   1384c:	000003be 			; <UNDEFINED> instruction: 0x000003be
   13850:	10029205 	andne	r9, r2, r5, lsl #4
   13854:	00000832 	andeq	r0, r0, r2, lsr r8
   13858:	09bd1788 	ldmibeq	sp!, {r3, r7, r8, r9, sl, ip}
   1385c:	93050000 	movwls	r0, #20480	; 0x5000
   13860:	00250f02 	eoreq	r0, r5, r2, lsl #30
   13864:	17a00000 	strne	r0, [r0, r0]!
   13868:	00000261 	andeq	r0, r0, r1, ror #4
   1386c:	16029405 	strne	r9, [r2], -r5, lsl #8
   13870:	000000f9 	strdeq	r0, [r0], -r9
   13874:	056017a4 	strbeq	r1, [r0, #-1956]!	; 0xfffff85c
   13878:	95050000 	strls	r0, [r5, #-0]
   1387c:	00f91602 	rscseq	r1, r9, r2, lsl #12
   13880:	17ac0000 	strne	r0, [ip, r0]!
   13884:	000004a3 	andeq	r0, r0, r3, lsr #9
   13888:	16029605 	strne	r9, [r2], -r5, lsl #12
   1388c:	000000f9 	strdeq	r0, [r0], -r9
   13890:	06b017b4 			; <UNDEFINED> instruction: 0x06b017b4
   13894:	97050000 	strls	r0, [r5, -r0]
   13898:	00f91602 	rscseq	r1, r9, r2, lsl #12
   1389c:	17bc0000 	ldrne	r0, [ip, r0]!
   138a0:	0000051a 	andeq	r0, r0, sl, lsl r5
   138a4:	16029805 	strne	r9, [r2], -r5, lsl #16
   138a8:	000000f9 	strdeq	r0, [r0], -r9
   138ac:	078217c4 	streq	r1, [r2, r4, asr #15]
   138b0:	99050000 	stmdbls	r5, {}	; <UNPREDICTABLE>
   138b4:	00250802 	eoreq	r0, r5, r2, lsl #16
   138b8:	00cc0000 	sbceq	r0, ip, r0
   138bc:	0005c808 	andeq	ip, r5, r8, lsl #16
   138c0:	00082200 	andeq	r2, r8, r0, lsl #4
   138c4:	002c0900 	eoreq	r0, ip, r0, lsl #18
   138c8:	00190000 	andseq	r0, r9, r0
   138cc:	0005c808 	andeq	ip, r5, r8, lsl #16
   138d0:	00083200 	andeq	r3, r8, r0, lsl #4
   138d4:	002c0900 	eoreq	r0, ip, r0, lsl #18
   138d8:	00070000 	andeq	r0, r7, r0
   138dc:	0005c808 	andeq	ip, r5, r8, lsl #16
   138e0:	00084200 	andeq	r4, r8, r0, lsl #4
   138e4:	002c0900 	eoreq	r0, ip, r0, lsl #18
   138e8:	00170000 	andseq	r0, r7, r0
   138ec:	9e05f01a 	mcrls	0, 0, pc, cr5, cr10, {0}	; <UNPREDICTABLE>
   138f0:	08690702 	stmdaeq	r9!, {r1, r8, r9, sl}^
   138f4:	99170000 	ldmdbls	r7, {}	; <UNPREDICTABLE>
   138f8:	05000003 	streq	r0, [r0, #-3]
   138fc:	691b02a1 	ldmdbvs	fp, {r0, r5, r7, r9}
   13900:	00000008 	andeq	r0, r0, r8
   13904:	000b3517 	andeq	r3, fp, r7, lsl r5
   13908:	02a20500 	adceq	r0, r2, #0, 10
   1390c:	00087918 	andeq	r7, r8, r8, lsl r9
   13910:	08007800 	stmdaeq	r0, {fp, ip, sp, lr}
   13914:	00000307 	andeq	r0, r0, r7, lsl #6
   13918:	00000879 	andeq	r0, r0, r9, ror r8
   1391c:	00002c09 	andeq	r2, r0, r9, lsl #24
   13920:	08001d00 	stmdaeq	r0, {r8, sl, fp, ip}
   13924:	0000002c 	andeq	r0, r0, ip, lsr #32
   13928:	00000889 	andeq	r0, r0, r9, lsl #17
   1392c:	00002c09 	andeq	r2, r0, r9, lsl #24
   13930:	1b001d00 	blne	1ad38 <__exidx_end+0x15c90>
   13934:	028305f0 	addeq	r0, r3, #240, 10	; 0x3c000000
   13938:	0008ae03 	andeq	sl, r8, r3, lsl #28
   1393c:	44421c00 	strbmi	r1, [r2], #-3072	; 0xfffff400
   13940:	9a050000 	bls	153948 <__ccfg+0x1339a0>
   13944:	06fd0b02 	ldrbteq	r0, [sp], r2, lsl #22
   13948:	d71c0000 	ldrle	r0, [ip, -r0]
   1394c:	05000008 	streq	r0, [r0, #-8]
   13950:	420b02a3 	andmi	r0, fp, #805306378	; 0x3000000a
   13954:	00000008 	andeq	r0, r0, r8
   13958:	0005c808 	andeq	ip, r5, r8, lsl #16
   1395c:	0008be00 	andeq	fp, r8, r0, lsl #28
   13960:	002c0900 	eoreq	r0, ip, r0, lsl #18
   13964:	00180000 	andseq	r0, r8, r0
   13968:	000b1c1d 	andeq	r1, fp, sp, lsl ip
   1396c:	be040f00 	cdplt	15, 0, cr0, cr4, cr0, {0}
   13970:	1e000008 	cdpne	0, 0, cr0, cr0, cr8, {0}
   13974:	000008d4 	ldrdeq	r0, [r0], -r4
   13978:	00046e14 	andeq	r6, r4, r4, lsl lr
   1397c:	040f0000 	streq	r0, [pc], #-0	; 13984 <__exidx_end+0xe8dc>
   13980:	000008c9 	andeq	r0, r0, r9, asr #17
   13984:	0191040f 	orrseq	r0, r1, pc, lsl #8
   13988:	eb1e0000 	bl	793990 <__ccfg+0x7739e8>
   1398c:	14000008 	strne	r0, [r0], #-8
   13990:	00000025 	andeq	r0, r0, r5, lsr #32
   13994:	f1040f00 			; <UNDEFINED> instruction: 0xf1040f00
   13998:	0f000008 	svceq	0x00000008
   1399c:	0008e004 	andeq	lr, r8, r4
   139a0:	06620800 	strbteq	r0, [r2], -r0, lsl #16
   139a4:	09070000 	stmdbeq	r7, {}	; <UNPREDICTABLE>
   139a8:	2c090000 	stccs	0, cr0, [r9], {-0}
   139ac:	02000000 	andeq	r0, r0, #0
   139b0:	08991f00 	ldmeq	r9, {r8, r9, sl, fp, ip}
   139b4:	33050000 	movwcc	r0, #20480	; 0x5000
   139b8:	046e1703 	strbteq	r1, [lr], #-1795	; 0xfffff8fd
   139bc:	921f0000 	andsls	r0, pc, #0
   139c0:	05000008 	streq	r0, [r0, #-8]
   139c4:	741d0334 	ldrvc	r0, [sp], #-820	; 0xfffffccc
   139c8:	05000004 	streq	r0, [r0, #-4]
   139cc:	000042af 	andeq	r4, r0, pc, lsr #5
   139d0:	07172507 	ldreq	r2, [r7, -r7, lsl #10]
   139d4:	05000001 	streq	r0, [r0, #-1]
   139d8:	000005db 	ldrdeq	r0, [r0], -fp
   139dc:	7f122a07 	svcvc	0x00122a07
   139e0:	0d000000 	stceq	0, cr0, [r0, #-0]
   139e4:	000043e8 	andeq	r4, r0, r8, ror #7
   139e8:	08360710 	ldmdaeq	r6!, {r4, r8, r9, sl}
   139ec:	00000961 	andeq	r0, r0, r1, ror #18
   139f0:	0042e80b 	subeq	lr, r2, fp, lsl #16
   139f4:	0a370700 	beq	dd55fc <__ccfg+0xdb5654>
   139f8:	0000092d 	andeq	r0, r0, sp, lsr #18
   139fc:	434b0b00 	movtmi	r0, #47872	; 0xbb00
   13a00:	38070000 	stmdacc	r7, {}	; <UNPREDICTABLE>
   13a04:	0009210e 	andeq	r2, r9, lr, lsl #2
   13a08:	20000800 	andcs	r0, r0, r0, lsl #16
   13a0c:	00004341 	andeq	r4, r0, r1, asr #6
   13a10:	6a169a08 	bvs	5ba238 <__ccfg+0x59a290>
   13a14:	20000000 	andcs	r0, r0, r0
   13a18:	0000428b 	andeq	r4, r0, fp, lsl #5
   13a1c:	25159b08 	ldrcs	r9, [r5, #-2824]	; 0xfffff4f8
   13a20:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   13a24:	000005c2 	andeq	r0, r0, r2, asr #11
   13a28:	00000989 	andeq	r0, r0, r9, lsl #19
   13a2c:	00002c09 	andeq	r2, r0, r9, lsl #24
   13a30:	20000100 	andcs	r0, r0, r0, lsl #2
   13a34:	00004295 	muleq	r0, r5, r2
   13a38:	79179e08 	ldmdbvc	r7, {r3, r9, sl, fp, ip, pc}
   13a3c:	20000009 	andcs	r0, r0, r9
   13a40:	00000785 	andeq	r0, r0, r5, lsl #15
   13a44:	250c1d01 	strcs	r1, [ip, #-3329]	; 0xfffff2ff
   13a48:	21000000 	mrscs	r0, (UNDEF: 0)
   13a4c:	0000429d 	muleq	r0, sp, r2
   13a50:	250ca109 	strcs	sl, [ip, #-265]	; 0xfffffef7
   13a54:	94000000 	strls	r0, [r0], #-0
   13a58:	2c000042 	stccs	0, cr0, [r0], {66}	; 0x42
   13a5c:	01000000 	mrseq	r0, (UNDEF: 0)
   13a60:	000a249c 	muleq	sl, ip, r4
   13a64:	74702200 	ldrbtvc	r2, [r0], #-512	; 0xfffffe00
   13a68:	37010072 	smlsdxcc	r1, r2, r0, r0
   13a6c:	00046e21 	andeq	r6, r4, r1, lsr #28
   13a70:	0058a300 	subseq	sl, r8, r0, lsl #6
   13a74:	00589b00 	subseq	r9, r8, r0, lsl #22
   13a78:	43e72300 	mvnmi	r2, #0, 6
   13a7c:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
   13a80:	000a2416 	andeq	r2, sl, r6, lsl r4
   13a84:	0058e000 	subseq	lr, r8, r0
   13a88:	0058da00 	subseq	sp, r8, r0, lsl #20
   13a8c:	438a2300 	orrmi	r2, sl, #0, 6
   13a90:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
   13a94:	0001050c 	andeq	r0, r1, ip, lsl #10
   13a98:	00591000 	subseq	r1, r9, r0
   13a9c:	00590c00 	subseq	r0, r9, r0, lsl #24
   13aa0:	65722400 	ldrbvs	r2, [r2, #-1024]!	; 0xfffffc00
   13aa4:	3b010074 	blcc	53c7c <__ccfg+0x33cd4>
   13aa8:	00002507 	andeq	r2, r0, r7, lsl #10
   13aac:	00593300 	subseq	r3, r9, r0, lsl #6
   13ab0:	00593100 	subseq	r3, r9, r0, lsl #2
   13ab4:	42a62500 	adcmi	r2, r6, #0, 10
   13ab8:	0a2a0000 	beq	a93ac0 <__ccfg+0xa73b18>
   13abc:	01260000 			; <UNDEFINED> instruction: 0x01260000
   13ac0:	01f30350 	mvnseq	r0, r0, asr r3
   13ac4:	51012651 	tstpl	r1, r1, asr r6
   13ac8:	5201f303 	andpl	pc, r1, #201326592	; 0xc000000
   13acc:	040f0000 	streq	r0, [pc], #-0	; 13ad4 <__exidx_end+0xea2c>
   13ad0:	00000939 	andeq	r0, r0, r9, lsr r9
   13ad4:	0043f027 	subeq	pc, r3, r7, lsr #32
   13ad8:	0043f000 	subeq	pc, r3, r0
   13adc:	01b80a00 			; <UNDEFINED> instruction: 0x01b80a00
   13ae0:	09260005 	stmdbeq	r6!, {r0, r2}
   13ae4:	00040000 	andeq	r0, r4, r0
   13ae8:	000047ec 	andeq	r4, r0, ip, ror #15
   13aec:	40ea0104 	rscmi	r0, sl, r4, lsl #2
   13af0:	0a0c0000 	beq	313af8 <__ccfg+0x2f3b50>
   13af4:	94000044 	strls	r0, [r0], #-68	; 0xffffffbc
   13af8:	83000043 	movwhi	r0, #67	; 0x43
   13afc:	0200008d 	andeq	r0, r0, #141	; 0x8d
   13b00:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
   13b04:	04030074 	streq	r0, [r3], #-116	; 0xffffff8c
   13b08:	0003d407 	andeq	sp, r3, r7, lsl #8
   13b0c:	05080300 	streq	r0, [r8, #-768]	; 0xfffffd00
   13b10:	00000632 	andeq	r0, r0, r2, lsr r6
   13b14:	bb040803 	bllt	115b28 <__ccfg+0xf5b80>
   13b18:	0400003f 	streq	r0, [r0], #-63	; 0xffffffc1
   13b1c:	00000942 	andeq	r0, r0, r2, asr #18
   13b20:	17016501 	strne	r6, [r1, -r1, lsl #10]
   13b24:	00000024 	andeq	r0, r0, r4, lsr #32
   13b28:	8a060103 	bhi	193f3c <__ccfg+0x173f94>
   13b2c:	03000009 	movweq	r0, #9
   13b30:	09880801 	stmibeq	r8, {r0, fp}
   13b34:	02030000 	andeq	r0, r3, #0
   13b38:	00084405 	andeq	r4, r8, r5, lsl #8
   13b3c:	07020300 	streq	r0, [r2, -r0, lsl #6]
   13b40:	00000a80 	andeq	r0, r0, r0, lsl #21
   13b44:	37050403 	strcc	r0, [r5, -r3, lsl #8]
   13b48:	03000006 	movweq	r0, #6
   13b4c:	03cf0704 	biceq	r0, pc, #4, 14	; 0x100000
   13b50:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
   13b54:	0003ca07 	andeq	ip, r3, r7, lsl #20
   13b58:	0abc0500 	beq	fef14f60 <_estack+0xdef0ff60>
   13b5c:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
   13b60:	0000620e 	andeq	r6, r0, lr, lsl #4
   13b64:	02a30500 	adceq	r0, r3, #0, 10
   13b68:	74020000 	strvc	r0, [r2], #-0
   13b6c:	0000620e 	andeq	r6, r0, lr, lsl #4
   13b70:	02040600 	andeq	r0, r4, #0, 12
   13b74:	00b103a5 	adcseq	r0, r1, r5, lsr #7
   13b78:	c8070000 	stmdagt	r7, {}	; <UNPREDICTABLE>
   13b7c:	02000005 	andeq	r0, r0, #5
   13b80:	00390ca7 	eorseq	r0, r9, r7, lsr #25
   13b84:	8b070000 	blhi	1d3b8c <__ccfg+0x1b3be4>
   13b88:	02000008 	andeq	r0, r0, #8
   13b8c:	00b113a8 	adcseq	r1, r1, r8, lsr #7
   13b90:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   13b94:	0000004d 	andeq	r0, r0, sp, asr #32
   13b98:	000000c1 	andeq	r0, r0, r1, asr #1
   13b9c:	00002409 	andeq	r2, r0, r9, lsl #8
   13ba0:	0a000300 	beq	147a8 <__exidx_end+0xf700>
   13ba4:	09a20208 	stmibeq	r2!, {r3, r9}
   13ba8:	000000e5 	andeq	r0, r0, r5, ror #1
   13bac:	00035e0b 	andeq	r5, r3, fp, lsl #28
   13bb0:	07a40200 	streq	r0, [r4, r0, lsl #4]!
   13bb4:	0000001d 	andeq	r0, r0, sp, lsl r0
   13bb8:	04eb0b00 	strbteq	r0, [fp], #2816	; 0xb00
   13bbc:	a9020000 	stmdbge	r2, {}	; <UNPREDICTABLE>
   13bc0:	00008f05 	andeq	r8, r0, r5, lsl #30
   13bc4:	05000400 	streq	r0, [r0, #-1024]	; 0xfffffc00
   13bc8:	00000735 	andeq	r0, r0, r5, lsr r7
   13bcc:	c103aa02 	tstgt	r3, r2, lsl #20
   13bd0:	0c000000 	stceq	0, cr0, [r0], {-0}
   13bd4:	068a0504 	streq	r0, [sl], r4, lsl #10
   13bd8:	16030000 	strne	r0, [r3], -r0
   13bdc:	00006919 	andeq	r6, r0, r9, lsl r9
   13be0:	02160500 	andseq	r0, r6, #0, 10
   13be4:	0c040000 	stceq	0, cr0, [r4], {-0}
   13be8:	00001d0d 	andeq	r1, r0, sp, lsl #26
   13bec:	05960500 	ldreq	r0, [r6, #1280]	; 0x500
   13bf0:	23030000 	movwcs	r0, #12288	; 0x3000
   13bf4:	0000ff1b 	andeq	pc, r0, fp, lsl pc	; <UNPREDICTABLE>
   13bf8:	02e30d00 	rsceq	r0, r3, #0, 26
   13bfc:	03180000 	tsteq	r8, #0
   13c00:	01710834 	cmneq	r1, r4, lsr r8
   13c04:	160b0000 	strne	r0, [fp], -r0
   13c08:	0300000b 	movweq	r0, #11
   13c0c:	01711336 	cmneq	r1, r6, lsr r3
   13c10:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
   13c14:	03006b5f 	movweq	r6, #2911	; 0xb5f
   13c18:	001d0737 	andseq	r0, sp, r7, lsr r7
   13c1c:	0b040000 	bleq	113c24 <__ccfg+0xf3c7c>
   13c20:	000008f1 	strdeq	r0, [r0], -r1
   13c24:	1d0b3703 	stcne	7, cr3, [fp, #-12]
   13c28:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   13c2c:	003f860b 	eorseq	r8, pc, fp, lsl #12
   13c30:	14370300 	ldrtne	r0, [r7], #-768	; 0xfffffd00
   13c34:	0000001d 	andeq	r0, r0, sp, lsl r0
   13c38:	03f60b0c 	mvnseq	r0, #12, 22	; 0x3000
   13c3c:	37030000 	strcc	r0, [r3, -r0]
   13c40:	00001d1b 	andeq	r1, r0, fp, lsl sp
   13c44:	5f0e1000 	svcpl	0x000e1000
   13c48:	38030078 	stmdacc	r3, {r3, r4, r5, r6}
   13c4c:	0001770b 	andeq	r7, r1, fp, lsl #14
   13c50:	0f001400 	svceq	0x00001400
   13c54:	00011704 	andeq	r1, r1, r4, lsl #14
   13c58:	00f30800 	rscseq	r0, r3, r0, lsl #16
   13c5c:	01870000 	orreq	r0, r7, r0
   13c60:	24090000 	strcs	r0, [r9], #-0
   13c64:	00000000 	andeq	r0, r0, r0
   13c68:	090c0d00 	stmdbeq	ip, {r8, sl, fp}
   13c6c:	03240000 			; <UNDEFINED> instruction: 0x03240000
   13c70:	020a083c 	andeq	r0, sl, #60, 16	; 0x3c0000
   13c74:	860b0000 	strhi	r0, [fp], -r0
   13c78:	03000004 	movweq	r0, #4
   13c7c:	001d093e 	andseq	r0, sp, lr, lsr r9
   13c80:	0b000000 	bleq	13c88 <__exidx_end+0xebe0>
   13c84:	00000390 	muleq	r0, r0, r3
   13c88:	1d093f03 	stcne	15, cr3, [r9, #-12]
   13c8c:	04000000 	streq	r0, [r0], #-0
   13c90:	0003390b 	andeq	r3, r3, fp, lsl #18
   13c94:	09400300 	stmdbeq	r0, {r8, r9}^
   13c98:	0000001d 	andeq	r0, r0, sp, lsl r0
   13c9c:	054c0b08 	strbeq	r0, [ip, #-2824]	; 0xfffff4f8
   13ca0:	41030000 	mrsmi	r0, (UNDEF: 3)
   13ca4:	00001d09 	andeq	r1, r0, r9, lsl #26
   13ca8:	be0b0c00 	cdplt	12, 0, cr0, cr11, cr0, {0}
   13cac:	03000007 	movweq	r0, #7
   13cb0:	001d0942 	andseq	r0, sp, r2, asr #18
   13cb4:	0b100000 	bleq	413cbc <__ccfg+0x3f3d14>
   13cb8:	000008a5 	andeq	r0, r0, r5, lsr #17
   13cbc:	1d094303 	stcne	3, cr4, [r9, #-12]
   13cc0:	14000000 	strne	r0, [r0], #-0
   13cc4:	0002fe0b 	andeq	pc, r2, fp, lsl #28
   13cc8:	09440300 	stmdbeq	r4, {r8, r9}^
   13ccc:	0000001d 	andeq	r0, r0, sp, lsl r0
   13cd0:	048f0b18 	streq	r0, [pc], #2840	; 13cd8 <__exidx_end+0xec30>
   13cd4:	45030000 	strmi	r0, [r3, #-0]
   13cd8:	00001d09 	andeq	r1, r0, r9, lsl #26
   13cdc:	530b1c00 	movwpl	r1, #48128	; 0xbc00
   13ce0:	03000007 	movweq	r0, #7
   13ce4:	001d0946 	andseq	r0, sp, r6, asr #18
   13ce8:	00200000 	eoreq	r0, r0, r0
   13cec:	00006110 	andeq	r6, r0, r0, lsl r1
   13cf0:	03010800 	movweq	r0, #6144	; 0x1800
   13cf4:	024f084f 	subeq	r0, pc, #5177344	; 0x4f0000
   13cf8:	4a0b0000 	bmi	2d3d00 <__ccfg+0x2b3d58>
   13cfc:	0300000a 	movweq	r0, #10
   13d00:	024f0a50 	subeq	r0, pc, #80, 20	; 0x50000
   13d04:	0b000000 	bleq	13d0c <__exidx_end+0xec64>
   13d08:	0000096c 	andeq	r0, r0, ip, ror #18
   13d0c:	4f095103 	svcmi	0x00095103
   13d10:	80000002 	andhi	r0, r0, r2
   13d14:	000ab311 	andeq	fp, sl, r1, lsl r3
   13d18:	0a530300 	beq	14d4920 <__ccfg+0x14b4978>
   13d1c:	000000f3 	strdeq	r0, [r0], -r3
   13d20:	01110100 	tsteq	r1, r0, lsl #2
   13d24:	0300000b 	movweq	r0, #11
   13d28:	00f30a56 	rscseq	r0, r3, r6, asr sl
   13d2c:	01040000 	mrseq	r0, (UNDEF: 4)
   13d30:	00f10800 	rscseq	r0, r1, r0, lsl #16
   13d34:	025f0000 	subseq	r0, pc, #0
   13d38:	24090000 	strcs	r0, [r9], #-0
   13d3c:	1f000000 	svcne	0x00000000
   13d40:	082b1000 	stmdaeq	fp!, {ip}
   13d44:	01900000 	orrseq	r0, r0, r0
   13d48:	a2086203 	andge	r6, r8, #805306368	; 0x30000000
   13d4c:	0b000002 	bleq	13d5c <__exidx_end+0xecb4>
   13d50:	00000b16 	andeq	r0, r0, r6, lsl fp
   13d54:	a2126303 	andsge	r6, r2, #201326592	; 0xc000000
   13d58:	00000002 	andeq	r0, r0, r2
   13d5c:	00049e0b 	andeq	r9, r4, fp, lsl #28
   13d60:	06640300 	strbteq	r0, [r4], -r0, lsl #6
   13d64:	0000001d 	andeq	r0, r0, sp, lsl r0
   13d68:	02ab0b04 	adceq	r0, fp, #4, 22	; 0x1000
   13d6c:	66030000 	strvs	r0, [r3], -r0
   13d70:	0002a809 	andeq	sl, r2, r9, lsl #16
   13d74:	610b0800 	tstvs	fp, r0, lsl #16
   13d78:	03000000 	movweq	r0, #0
   13d7c:	020a1e67 	andeq	r1, sl, #1648	; 0x670
   13d80:	00880000 	addeq	r0, r8, r0
   13d84:	025f040f 	subseq	r0, pc, #251658240	; 0xf000000
   13d88:	b8080000 	stmdalt	r8, {}	; <UNPREDICTABLE>
   13d8c:	b8000002 	stmdalt	r0, {r1}
   13d90:	09000002 	stmdbeq	r0, {r1}
   13d94:	00000024 	andeq	r0, r0, r4, lsr #32
   13d98:	040f001f 	streq	r0, [pc], #-31	; 13da0 <__exidx_end+0xecf8>
   13d9c:	000002be 			; <UNDEFINED> instruction: 0x000002be
   13da0:	0a040d12 	beq	1171f0 <__ccfg+0xf7248>
   13da4:	03080000 	movweq	r0, #32768	; 0x8000
   13da8:	02e7087a 	rsceq	r0, r7, #7995392	; 0x7a0000
   13dac:	4e0b0000 	cdpmi	0, 0, cr0, cr11, cr0, {0}
   13db0:	03000006 	movweq	r0, #6
   13db4:	02e7117b 	rsceq	r1, r7, #-1073741794	; 0xc000001e
   13db8:	0b000000 	bleq	13dc0 <__exidx_end+0xed18>
   13dbc:	000019a5 	andeq	r1, r0, r5, lsr #19
   13dc0:	1d067c03 	stcne	12, cr7, [r6, #-12]
   13dc4:	04000000 	streq	r0, [r0], #-0
   13dc8:	4d040f00 	stcmi	15, cr0, [r4, #-0]
   13dcc:	0d000000 	stceq	0, cr0, [r0, #-0]
   13dd0:	000003ee 	andeq	r0, r0, lr, ror #7
   13dd4:	08ba0368 	ldmeq	sl!, {r3, r5, r6, r8, r9}
   13dd8:	00000430 	andeq	r0, r0, r0, lsr r4
   13ddc:	00705f0e 	rsbseq	r5, r0, lr, lsl #30
   13de0:	e712bb03 	ldr	fp, [r2, -r3, lsl #22]
   13de4:	00000002 	andeq	r0, r0, r2
   13de8:	00725f0e 	rsbseq	r5, r2, lr, lsl #30
   13dec:	1d07bc03 	stcne	12, cr11, [r7, #-12]
   13df0:	04000000 	streq	r0, [r0], #-0
   13df4:	00775f0e 	rsbseq	r5, r7, lr, lsl #30
   13df8:	1d07bd03 	stcne	13, cr11, [r7, #-12]
   13dfc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   13e00:	0001f30b 	andeq	pc, r1, fp, lsl #6
   13e04:	09be0300 	ldmibeq	lr!, {r8, r9}
   13e08:	00000054 	andeq	r0, r0, r4, asr r0
   13e0c:	06bf0b0c 	ldrteq	r0, [pc], ip, lsl #22
   13e10:	bf030000 	svclt	0x00030000
   13e14:	00005409 	andeq	r5, r0, r9, lsl #8
   13e18:	5f0e0e00 	svcpl	0x000e0e00
   13e1c:	03006662 	movweq	r6, #1634	; 0x662
   13e20:	02bf11c0 	adcseq	r1, pc, #192, 2	; 0x30
   13e24:	0b100000 	bleq	413e2c <__ccfg+0x3f3e84>
   13e28:	000001ea 	andeq	r0, r0, sl, ror #3
   13e2c:	1d07c103 	stfned	f4, [r7, #-12]
   13e30:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   13e34:	0002b00b 	andeq	fp, r2, fp
   13e38:	0ac80300 	beq	ff214a40 <_estack+0xdf20fa40>
   13e3c:	000000f1 	strdeq	r0, [r0], -r1
   13e40:	19350b1c 	ldmdbne	r5!, {r2, r3, r4, r8, r9, fp}
   13e44:	ca030000 	bgt	d3e4c <__ccfg+0xb3ea4>
   13e48:	0005b41d 	andeq	fp, r5, sp, lsl r4
   13e4c:	fc0b2000 	stc2	0, cr2, [fp], {-0}
   13e50:	03000018 	movweq	r0, #24
   13e54:	05de1dcc 	ldrbeq	r1, [lr, #3532]	; 0xdcc
   13e58:	0b240000 	bleq	913e60 <__ccfg+0x8f3eb8>
   13e5c:	00000b27 	andeq	r0, r0, r7, lsr #22
   13e60:	020dcf03 	andeq	ip, sp, #3, 30
   13e64:	28000006 	stmdacs	r0, {r1, r2}
   13e68:	0018ea0b 	andseq	lr, r8, fp, lsl #20
   13e6c:	09d00300 	ldmibeq	r0, {r8, r9}^
   13e70:	0000061c 	andeq	r0, r0, ip, lsl r6
   13e74:	755f0e2c 	ldrbvc	r0, [pc, #-3628]	; 13050 <__exidx_end+0xdfa8>
   13e78:	d3030062 	movwle	r0, #12386	; 0x3062
   13e7c:	0002bf11 	andeq	fp, r2, r1, lsl pc
   13e80:	5f0e3000 	svcpl	0x000e3000
   13e84:	03007075 	movweq	r7, #117	; 0x75
   13e88:	02e712d4 	rsceq	r1, r7, #212, 4	; 0x4000000d
   13e8c:	0e380000 	cdpeq	0, 3, cr0, cr8, cr0, {0}
   13e90:	0072755f 	rsbseq	r7, r2, pc, asr r5
   13e94:	1d07d503 	cfstr32ne	mvfx13, [r7, #-12]
   13e98:	3c000000 	stccc	0, cr0, [r0], {-0}
   13e9c:	000b3e0b 	andeq	r3, fp, fp, lsl #28
   13ea0:	11d80300 	bicsne	r0, r8, r0, lsl #6
   13ea4:	00000622 	andeq	r0, r0, r2, lsr #12
   13ea8:	0acd0b40 	beq	ff356bb0 <_estack+0xdf351bb0>
   13eac:	d9030000 	stmdble	r3, {}	; <UNPREDICTABLE>
   13eb0:	00063211 	andeq	r3, r6, r1, lsl r2
   13eb4:	5f0e4300 	svcpl	0x000e4300
   13eb8:	0300626c 	movweq	r6, #620	; 0x26c
   13ebc:	02bf11dc 	adcseq	r1, pc, #220, 2	; 0x37
   13ec0:	0b440000 	bleq	1113ec8 <__ccfg+0x10f3f20>
   13ec4:	00000903 	andeq	r0, r0, r3, lsl #18
   13ec8:	1d07df03 	stcne	15, cr13, [r7, #-12]
   13ecc:	4c000000 	stcmi	0, cr0, [r0], {-0}
   13ed0:	00043b0b 	andeq	r3, r4, fp, lsl #22
   13ed4:	0ae00300 	beq	ff814adc <_estack+0xdf80fadc>
   13ed8:	00000077 	andeq	r0, r0, r7, ror r0
   13edc:	44040b50 	strmi	r0, [r4], #-2896	; 0xfffff4b0
   13ee0:	e3030000 	movw	r0, #12288	; 0x3000
   13ee4:	00044e12 	andeq	r4, r4, r2, lsl lr
   13ee8:	1b0b5400 	blne	2e8ef0 <__ccfg+0x2c8f48>
   13eec:	03000009 	movweq	r0, #9
   13ef0:	010b0ce7 	smlatteq	fp, r7, ip, r0
   13ef4:	0b580000 	bleq	1613efc <__ccfg+0x15f3f54>
   13ef8:	00000833 	andeq	r0, r0, r3, lsr r8
   13efc:	e50ee903 	str	lr, [lr, #-2307]	; 0xfffff6fd
   13f00:	5c000000 	stcpl	0, cr0, [r0], {-0}
   13f04:	000af90b 	andeq	pc, sl, fp, lsl #18
   13f08:	09ea0300 	stmibeq	sl!, {r8, r9}^
   13f0c:	0000001d 	andeq	r0, r0, sp, lsl r0
   13f10:	1d130064 	ldcne	0, cr0, [r3, #-400]	; 0xfffffe70
   13f14:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
   13f18:	14000004 	strne	r0, [r0], #-4
   13f1c:	0000044e 	andeq	r0, r0, lr, asr #8
   13f20:	0000f114 	andeq	pc, r0, r4, lsl r1	; <UNPREDICTABLE>
   13f24:	05a21400 	streq	r1, [r2, #1024]!	; 0x400
   13f28:	1d140000 	ldcne	0, cr0, [r4, #-0]
   13f2c:	00000000 	andeq	r0, r0, r0
   13f30:	0459040f 	ldrbeq	r0, [r9], #-1039	; 0xfffffbf1
   13f34:	4e150000 	cdpmi	0, 1, cr0, cr5, cr0, {0}
   13f38:	16000004 	strne	r0, [r0], -r4
   13f3c:	00004442 	andeq	r4, r0, r2, asr #8
   13f40:	65030428 	strvs	r0, [r3, #-1064]	; 0xfffffbd8
   13f44:	05a20802 	streq	r0, [r2, #2050]!	; 0x802
   13f48:	84170000 	ldrhi	r0, [r7], #-0
   13f4c:	03000007 	movweq	r0, #7
   13f50:	1d070267 	sfmne	f0, 4, [r7, #-412]	; 0xfffffe64
   13f54:	00000000 	andeq	r0, r0, r0
   13f58:	00061c17 	andeq	r1, r6, r7, lsl ip
   13f5c:	026c0300 	rsbeq	r0, ip, #0, 6
   13f60:	00068e0b 	andeq	r8, r6, fp, lsl #28
   13f64:	8d170400 	cfldrshi	mvf0, [r7, #-0]
   13f68:	03000002 	movweq	r0, #2
   13f6c:	8e14026c 	cdphi	2, 1, cr0, cr4, cr12, {3}
   13f70:	08000006 	stmdaeq	r0, {r1, r2}
   13f74:	000b2d17 	andeq	r2, fp, r7, lsl sp
   13f78:	026c0300 	rsbeq	r0, ip, #0, 6
   13f7c:	00068e1e 	andeq	r8, r6, lr, lsl lr
   13f80:	99170c00 	ldmdbls	r7, {sl, fp}
   13f84:	03000004 	movweq	r0, #4
   13f88:	1d08026e 	sfmne	f0, 4, [r8, #-440]	; 0xfffffe48
   13f8c:	10000000 	andne	r0, r0, r0
   13f90:	00044b17 	andeq	r4, r4, r7, lsl fp
   13f94:	026f0300 	rsbeq	r0, pc, #0, 6
   13f98:	00088e08 	andeq	r8, r8, r8, lsl #28
   13f9c:	e0171400 	ands	r1, r7, r0, lsl #8
   13fa0:	0300000a 	movweq	r0, #10
   13fa4:	1d070272 	sfmne	f0, 4, [r7, #-456]	; 0xfffffe38
   13fa8:	30000000 	andcc	r0, r0, r0
   13fac:	003e3217 	eorseq	r3, lr, r7, lsl r2
   13fb0:	02730300 	rsbseq	r0, r3, #0, 6
   13fb4:	0008a316 	andeq	sl, r8, r6, lsl r3
   13fb8:	e2173400 	ands	r3, r7, #0, 8
   13fbc:	03000005 	movweq	r0, #5
   13fc0:	1d070275 	sfmne	f0, 4, [r7, #-468]	; 0xfffffe2c
   13fc4:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
   13fc8:	00072b17 	andeq	r2, r7, r7, lsl fp
   13fcc:	02770300 	rsbseq	r0, r7, #0, 6
   13fd0:	0008b40a 	andeq	fp, r8, sl, lsl #8
   13fd4:	08173c00 	ldmdaeq	r7, {sl, fp, ip, sp}
   13fd8:	03000003 	movweq	r0, #3
   13fdc:	7113027a 	tstvc	r3, sl, ror r2
   13fe0:	40000001 	andmi	r0, r0, r1
   13fe4:	0003b417 	andeq	fp, r3, r7, lsl r4
   13fe8:	027b0300 	rsbseq	r0, fp, #0, 6
   13fec:	00001d07 	andeq	r1, r0, r7, lsl #26
   13ff0:	f3174400 	vshl.u16	d4, d0, d7
   13ff4:	03000004 	movweq	r0, #4
   13ff8:	7113027c 	tstvc	r3, ip, ror r2
   13ffc:	48000001 	stmdami	r0, {r0}
   14000:	00065417 	andeq	r5, r6, r7, lsl r4
   14004:	027d0300 	rsbseq	r0, sp, #0, 6
   14008:	0008ba14 	andeq	fp, r8, r4, lsl sl
   1400c:	e9174c00 	ldmdb	r7, {sl, fp, lr}
   14010:	03000008 	movweq	r0, #8
   14014:	1d070280 	sfmne	f0, 4, [r7, #-512]	; 0xfffffe00
   14018:	50000000 	andpl	r0, r0, r0
   1401c:	00098017 	andeq	r8, r9, r7, lsl r0
   14020:	02810300 	addeq	r0, r1, #0, 6
   14024:	0005a209 	andeq	sl, r5, r9, lsl #4
   14028:	9a175400 	bls	5e9030 <__ccfg+0x5c9088>
   1402c:	03000009 	movweq	r0, #9
   14030:	690702a4 	stmdbvs	r7, {r2, r5, r7, r9}
   14034:	58000008 	stmdapl	r0, {r3}
   14038:	00082b18 	andeq	r2, r8, r8, lsl fp
   1403c:	02a80300 	adceq	r0, r8, #0, 6
   14040:	0002a213 	andeq	sl, r2, r3, lsl r2
   14044:	18014800 	stmdane	r1, {fp, lr}
   14048:	0000056f 	andeq	r0, r0, pc, ror #10
   1404c:	1202a903 	andne	sl, r2, #49152	; 0xc000
   14050:	0000025f 	andeq	r0, r0, pc, asr r2
   14054:	5618014c 	ldrpl	r0, [r8], -ip, asr #2
   14058:	03000005 	movweq	r0, #5
   1405c:	cb0c02ad 	blgt	314b18 <__ccfg+0x2f4b70>
   14060:	dc000008 	stcle	0, cr0, [r0], {8}
   14064:	0a271802 	beq	9da074 <__ccfg+0x9ba0cc>
   14068:	b2030000 	andlt	r0, r3, #0
   1406c:	064f1002 	strbeq	r1, [pc], -r2
   14070:	02e00000 	rsceq	r0, r0, #0
   14074:	00086c18 	andeq	r6, r8, r8, lsl ip
   14078:	02b40300 	adcseq	r0, r4, #0, 6
   1407c:	0008d70a 	andeq	sp, r8, sl, lsl #14
   14080:	0002ec00 	andeq	lr, r2, r0, lsl #24
   14084:	05a8040f 	streq	r0, [r8, #1039]!	; 0x40f
   14088:	01030000 	mrseq	r0, (UNDEF: 3)
   1408c:	00099108 	andeq	r9, r9, r8, lsl #2
   14090:	05a81500 	streq	r1, [r8, #1280]!	; 0x500
   14094:	040f0000 	streq	r0, [pc], #-0	; 1409c <__exidx_end+0xeff4>
   14098:	00000430 	andeq	r0, r0, r0, lsr r4
   1409c:	00001d13 	andeq	r1, r0, r3, lsl sp
   140a0:	0005d800 	andeq	sp, r5, r0, lsl #16
   140a4:	044e1400 	strbeq	r1, [lr], #-1024	; 0xfffffc00
   140a8:	f1140000 			; <UNDEFINED> instruction: 0xf1140000
   140ac:	14000000 	strne	r0, [r0], #-0
   140b0:	000005d8 	ldrdeq	r0, [r0], -r8
   140b4:	00001d14 	andeq	r1, r0, r4, lsl sp
   140b8:	040f0000 	streq	r0, [pc], #-0	; 140c0 <__exidx_end+0xf018>
   140bc:	000005af 	andeq	r0, r0, pc, lsr #11
   140c0:	05ba040f 	ldreq	r0, [sl, #1039]!	; 0x40f
   140c4:	83130000 	tsthi	r3, #0
   140c8:	02000000 	andeq	r0, r0, #0
   140cc:	14000006 	strne	r0, [r0], #-6
   140d0:	0000044e 	andeq	r0, r0, lr, asr #8
   140d4:	0000f114 	andeq	pc, r0, r4, lsl r1	; <UNPREDICTABLE>
   140d8:	00831400 	addeq	r1, r3, r0, lsl #8
   140dc:	1d140000 	ldcne	0, cr0, [r4, #-0]
   140e0:	00000000 	andeq	r0, r0, r0
   140e4:	05e4040f 	strbeq	r0, [r4, #1039]!	; 0x40f
   140e8:	1d130000 	ldcne	0, cr0, [r3, #-0]
   140ec:	1c000000 	stcne	0, cr0, [r0], {-0}
   140f0:	14000006 	strne	r0, [r0], #-6
   140f4:	0000044e 	andeq	r0, r0, lr, asr #8
   140f8:	0000f114 	andeq	pc, r0, r4, lsl r1	; <UNPREDICTABLE>
   140fc:	040f0000 	streq	r0, [pc], #-0	; 14104 <__exidx_end+0xf05c>
   14100:	00000608 	andeq	r0, r0, r8, lsl #12
   14104:	00004d08 	andeq	r4, r0, r8, lsl #26
   14108:	00063200 	andeq	r3, r6, r0, lsl #4
   1410c:	00240900 	eoreq	r0, r4, r0, lsl #18
   14110:	00020000 	andeq	r0, r2, r0
   14114:	00004d08 	andeq	r4, r0, r8, lsl #26
   14118:	00064200 	andeq	r4, r6, r0, lsl #4
   1411c:	00240900 	eoreq	r0, r4, r0, lsl #18
   14120:	00000000 	andeq	r0, r0, r0
   14124:	00042904 	andeq	r2, r4, r4, lsl #18
   14128:	01240300 			; <UNDEFINED> instruction: 0x01240300
   1412c:	0002ed1a 	andeq	lr, r2, sl, lsl sp
   14130:	44581900 	ldrbmi	r1, [r8], #-2304	; 0xfffff700
   14134:	030c0000 	movweq	r0, #49152	; 0xc000
   14138:	88080128 	stmdahi	r8, {r3, r5, r8}
   1413c:	17000006 	strne	r0, [r0, -r6]
   14140:	00000b16 	andeq	r0, r0, r6, lsl fp
   14144:	11012a03 	tstne	r1, r3, lsl #20
   14148:	00000688 	andeq	r0, r0, r8, lsl #13
   1414c:	093b1700 	ldmdbeq	fp!, {r8, r9, sl, ip}
   14150:	2b030000 	blcs	d4158 <__ccfg+0xb41b0>
   14154:	001d0701 	andseq	r0, sp, r1, lsl #14
   14158:	17040000 	strne	r0, [r4, -r0]
   1415c:	000005ce 	andeq	r0, r0, lr, asr #11
   14160:	0b012c03 	bleq	5f174 <__ccfg+0x3f1cc>
   14164:	0000068e 	andeq	r0, r0, lr, lsl #13
   14168:	040f0008 	streq	r0, [pc], #-8	; 14170 <__exidx_end+0xf0c8>
   1416c:	0000064f 	andeq	r0, r0, pc, asr #12
   14170:	0642040f 	strbeq	r0, [r2], -pc, lsl #8
   14174:	a0190000 	andsge	r0, r9, r0
   14178:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
   1417c:	08014403 	stmdaeq	r1, {r0, r1, sl, lr}
   14180:	000006cd 	andeq	r0, r0, sp, asr #13
   14184:	00125e17 	andseq	r5, r2, r7, lsl lr
   14188:	01450300 	mrseq	r0, (UNDEF: 117)
   1418c:	0006cd12 	andeq	ip, r6, r2, lsl sp
   14190:	79170000 	ldmdbvc	r7, {}	; <UNPREDICTABLE>
   14194:	03000006 	movweq	r0, #6
   14198:	cd120146 	ldfgts	f0, [r2, #-280]	; 0xfffffee8
   1419c:	06000006 	streq	r0, [r0], -r6
   141a0:	00110317 	andseq	r0, r1, r7, lsl r3
   141a4:	01470300 	mrseq	r0, (UNDEF: 119)
   141a8:	00005b12 	andeq	r5, r0, r2, lsl fp
   141ac:	08000c00 	stmdaeq	r0, {sl, fp}
   141b0:	0000005b 	andeq	r0, r0, fp, asr r0
   141b4:	000006dd 	ldrdeq	r0, [r0], -sp
   141b8:	00002409 	andeq	r2, r0, r9, lsl #8
   141bc:	1a000200 	bne	149c4 <__exidx_end+0xf91c>
   141c0:	028503d0 	addeq	r0, r5, #208, 6	; 0x40000003
   141c4:	0007f207 	andeq	pc, r7, r7, lsl #4
   141c8:	0ad31700 	beq	ff4d9dd0 <_estack+0xdf4d4dd0>
   141cc:	87030000 	strhi	r0, [r3, -r0]
   141d0:	00241802 	eoreq	r1, r4, r2, lsl #16
   141d4:	17000000 	strne	r0, [r0, -r0]
   141d8:	00000a2f 	andeq	r0, r0, pc, lsr #20
   141dc:	12028803 	andne	r8, r2, #196608	; 0x30000
   141e0:	000005a2 	andeq	r0, r0, r2, lsr #11
   141e4:	03e11704 	mvneq	r1, #4, 14	; 0x100000
   141e8:	89030000 	stmdbhi	r3, {}	; <UNPREDICTABLE>
   141ec:	07f21002 	ldrbeq	r1, [r2, r2]!
   141f0:	17080000 	strne	r0, [r8, -r0]
   141f4:	000008bd 			; <UNDEFINED> instruction: 0x000008bd
   141f8:	17028a03 	strne	r8, [r2, -r3, lsl #20]
   141fc:	00000187 	andeq	r0, r0, r7, lsl #3
   14200:	06231724 	strteq	r1, [r3], -r4, lsr #14
   14204:	8b030000 	blhi	d420c <__ccfg+0xb4264>
   14208:	001d0f02 	andseq	r0, sp, r2, lsl #30
   1420c:	17480000 	strbne	r0, [r8, -r0]
   14210:	00000b11 	andeq	r0, r0, r1, lsl fp
   14214:	2c028c03 	stccs	12, cr8, [r2], {3}
   14218:	00000070 	andeq	r0, r0, r0, ror r0
   1421c:	00851750 	addeq	r1, r5, r0, asr r7
   14220:	8d030000 	stchi	0, cr0, [r3, #-0]
   14224:	06941a02 	ldreq	r1, [r4], r2, lsl #20
   14228:	17580000 	ldrbne	r0, [r8, -r0]
   1422c:	0000052b 	andeq	r0, r0, fp, lsr #10
   14230:	16028e03 	strne	r8, [r2], -r3, lsl #28
   14234:	000000e5 	andeq	r0, r0, r5, ror #1
   14238:	0a3c1768 	beq	f19fe0 <__ccfg+0xefa038>
   1423c:	8f030000 	svchi	0x00030000
   14240:	00e51602 	rsceq	r1, r5, r2, lsl #12
   14244:	17700000 	ldrbne	r0, [r0, -r0]!
   14248:	0000006f 	andeq	r0, r0, pc, rrx
   1424c:	16029003 	strne	r9, [r2], -r3
   14250:	000000e5 	andeq	r0, r0, r5, ror #1
   14254:	08f91778 	ldmeq	r9!, {r3, r4, r5, r6, r8, r9, sl, ip}^
   14258:	91030000 	mrsls	r0, (UNDEF: 3)
   1425c:	08021002 	stmdaeq	r2, {r1, ip}
   14260:	17800000 	strne	r0, [r0, r0]
   14264:	000003be 			; <UNDEFINED> instruction: 0x000003be
   14268:	10029203 	andne	r9, r2, r3, lsl #4
   1426c:	00000812 	andeq	r0, r0, r2, lsl r8
   14270:	09bd1788 	ldmibeq	sp!, {r3, r7, r8, r9, sl, ip}
   14274:	93030000 	movwls	r0, #12288	; 0x3000
   14278:	001d0f02 	andseq	r0, sp, r2, lsl #30
   1427c:	17a00000 	strne	r0, [r0, r0]!
   14280:	00000261 	andeq	r0, r0, r1, ror #4
   14284:	16029403 	strne	r9, [r2], -r3, lsl #8
   14288:	000000e5 	andeq	r0, r0, r5, ror #1
   1428c:	056017a4 	strbeq	r1, [r0, #-1956]!	; 0xfffff85c
   14290:	95030000 	strls	r0, [r3, #-0]
   14294:	00e51602 	rsceq	r1, r5, r2, lsl #12
   14298:	17ac0000 	strne	r0, [ip, r0]!
   1429c:	000004a3 	andeq	r0, r0, r3, lsr #9
   142a0:	16029603 	strne	r9, [r2], -r3, lsl #12
   142a4:	000000e5 	andeq	r0, r0, r5, ror #1
   142a8:	06b017b4 			; <UNDEFINED> instruction: 0x06b017b4
   142ac:	97030000 	strls	r0, [r3, -r0]
   142b0:	00e51602 	rsceq	r1, r5, r2, lsl #12
   142b4:	17bc0000 	ldrne	r0, [ip, r0]!
   142b8:	0000051a 	andeq	r0, r0, sl, lsl r5
   142bc:	16029803 	strne	r9, [r2], -r3, lsl #16
   142c0:	000000e5 	andeq	r0, r0, r5, ror #1
   142c4:	078217c4 	streq	r1, [r2, r4, asr #15]
   142c8:	99030000 	stmdbls	r3, {}	; <UNPREDICTABLE>
   142cc:	001d0802 	andseq	r0, sp, r2, lsl #16
   142d0:	00cc0000 	sbceq	r0, ip, r0
   142d4:	0005a808 	andeq	sl, r5, r8, lsl #16
   142d8:	00080200 	andeq	r0, r8, r0, lsl #4
   142dc:	00240900 	eoreq	r0, r4, r0, lsl #18
   142e0:	00190000 	andseq	r0, r9, r0
   142e4:	0005a808 	andeq	sl, r5, r8, lsl #16
   142e8:	00081200 	andeq	r1, r8, r0, lsl #4
   142ec:	00240900 	eoreq	r0, r4, r0, lsl #18
   142f0:	00070000 	andeq	r0, r7, r0
   142f4:	0005a808 	andeq	sl, r5, r8, lsl #16
   142f8:	00082200 	andeq	r2, r8, r0, lsl #4
   142fc:	00240900 	eoreq	r0, r4, r0, lsl #18
   14300:	00170000 	andseq	r0, r7, r0
   14304:	9e03f01a 	mcrls	0, 0, pc, cr3, cr10, {0}	; <UNPREDICTABLE>
   14308:	08490702 	stmdaeq	r9, {r1, r8, r9, sl}^
   1430c:	99170000 	ldmdbls	r7, {}	; <UNPREDICTABLE>
   14310:	03000003 	movweq	r0, #3
   14314:	491b02a1 	ldmdbmi	fp, {r0, r5, r7, r9}
   14318:	00000008 	andeq	r0, r0, r8
   1431c:	000b3517 	andeq	r3, fp, r7, lsl r5
   14320:	02a20300 	adceq	r0, r2, #0, 6
   14324:	00085918 	andeq	r5, r8, r8, lsl r9
   14328:	08007800 	stmdaeq	r0, {fp, ip, sp, lr}
   1432c:	000002e7 	andeq	r0, r0, r7, ror #5
   14330:	00000859 	andeq	r0, r0, r9, asr r8
   14334:	00002409 	andeq	r2, r0, r9, lsl #8
   14338:	08001d00 	stmdaeq	r0, {r8, sl, fp, ip}
   1433c:	00000024 	andeq	r0, r0, r4, lsr #32
   14340:	00000869 	andeq	r0, r0, r9, ror #16
   14344:	00002409 	andeq	r2, r0, r9, lsl #8
   14348:	1b001d00 	blne	1b750 <__exidx_end+0x166a8>
   1434c:	028303f0 	addeq	r0, r3, #240, 6	; 0xc0000003
   14350:	00088e03 	andeq	r8, r8, r3, lsl #28
   14354:	44421c00 	strbmi	r1, [r2], #-3072	; 0xfffff400
   14358:	9a030000 	bls	d4360 <__ccfg+0xb43b8>
   1435c:	06dd0b02 	ldrbeq	r0, [sp], r2, lsl #22
   14360:	d71c0000 	ldrle	r0, [ip, -r0]
   14364:	03000008 	movweq	r0, #8
   14368:	220b02a3 	andcs	r0, fp, #805306378	; 0x3000000a
   1436c:	00000008 	andeq	r0, r0, r8
   14370:	0005a808 	andeq	sl, r5, r8, lsl #16
   14374:	00089e00 	andeq	r9, r8, r0, lsl #28
   14378:	00240900 	eoreq	r0, r4, r0, lsl #18
   1437c:	00180000 	andseq	r0, r8, r0
   14380:	000b1c1d 	andeq	r1, fp, sp, lsl ip
   14384:	9e040f00 	cdpls	15, 0, cr0, cr4, cr0, {0}
   14388:	1e000008 	cdpne	0, 0, cr0, cr0, cr8, {0}
   1438c:	000008b4 			; <UNDEFINED> instruction: 0x000008b4
   14390:	00044e14 	andeq	r4, r4, r4, lsl lr
   14394:	040f0000 	streq	r0, [pc], #-0	; 1439c <__exidx_end+0xf2f4>
   14398:	000008a9 	andeq	r0, r0, r9, lsr #17
   1439c:	0171040f 	cmneq	r1, pc, lsl #8
   143a0:	cb1e0000 	blgt	7943a8 <__ccfg+0x774400>
   143a4:	14000008 	strne	r0, [r0], #-8
   143a8:	0000001d 	andeq	r0, r0, sp, lsl r0
   143ac:	d1040f00 	tstle	r4, r0, lsl #30
   143b0:	0f000008 	svceq	0x00000008
   143b4:	0008c004 	andeq	ip, r8, r4
   143b8:	06420800 	strbeq	r0, [r2], -r0, lsl #16
   143bc:	08e70000 	stmiaeq	r7!, {}^	; <UNPREDICTABLE>
   143c0:	24090000 	strcs	r0, [r9], #-0
   143c4:	02000000 	andeq	r0, r0, #0
   143c8:	08991f00 	ldmeq	r9, {r8, r9, sl, fp, ip}
   143cc:	33030000 	movwcc	r0, #12288	; 0x3000
   143d0:	044e1703 	strbeq	r1, [lr], #-1795	; 0xfffff8fd
   143d4:	921f0000 	andsls	r0, pc, #0
   143d8:	03000008 	movweq	r0, #8
   143dc:	541d0334 	ldrpl	r0, [sp], #-820	; 0xfffffccc
   143e0:	20000004 	andcs	r0, r0, r4
   143e4:	000043fe 	strdeq	r4, [r0], -lr
   143e8:	59301705 	ldmdbpl	r0!, {r0, r2, r8, r9, sl, ip}
   143ec:	05000004 	streq	r0, [r0, #-4]
   143f0:	00011803 	andeq	r1, r1, r3, lsl #16
   143f4:	08e72120 	stmiaeq	r7!, {r5, r8, sp}^
   143f8:	03050000 	movweq	r0, #20480	; 0x5000
   143fc:	20000110 	andcs	r0, r0, r0, lsl r1
   14400:	0008f421 	andeq	pc, r8, r1, lsr #8
   14404:	00030500 	andeq	r0, r3, r0, lsl #10
   14408:	00000000 	andeq	r0, r0, r0
   1440c:	00000abe 			; <UNDEFINED> instruction: 0x00000abe
   14410:	49a40004 	stmibmi	r4!, {r2}
   14414:	01040000 	mrseq	r0, (UNDEF: 4)
   14418:	000040ea 	andeq	r4, r0, sl, ror #1
   1441c:	00445e0c 	subeq	r5, r4, ip, lsl #28
   14420:	00439400 	subeq	r9, r3, r0, lsl #8
   14424:	00000000 	andeq	r0, r0, r0
   14428:	0000b800 	andeq	fp, r0, r0, lsl #16
   1442c:	008e6300 	addeq	r6, lr, r0, lsl #6
   14430:	07040200 	streq	r0, [r4, -r0, lsl #4]
   14434:	000003d4 	ldrdeq	r0, [r0], -r4
   14438:	69050403 	stmdbvs	r5, {r0, r1, sl}
   1443c:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
   14440:	06320508 	ldrteq	r0, [r2], -r8, lsl #10
   14444:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
   14448:	003fbb04 	eorseq	fp, pc, r4, lsl #22
   1444c:	09420400 	stmdbeq	r2, {sl}^
   14450:	65020000 	strvs	r0, [r2, #-0]
   14454:	00251701 	eoreq	r1, r5, r1, lsl #14
   14458:	01020000 	mrseq	r0, (UNDEF: 2)
   1445c:	00098a06 	andeq	r8, r9, r6, lsl #20
   14460:	08010200 	stmdaeq	r1, {r9}
   14464:	00000988 	andeq	r0, r0, r8, lsl #19
   14468:	44050202 	strmi	r0, [r5], #-514	; 0xfffffdfe
   1446c:	02000008 	andeq	r0, r0, #8
   14470:	0a800702 	beq	fe016080 <_estack+0xde011080>
   14474:	04020000 	streq	r0, [r2], #-0
   14478:	00063705 	andeq	r3, r6, r5, lsl #14
   1447c:	07040200 	streq	r0, [r4, -r0, lsl #4]
   14480:	000003cf 	andeq	r0, r0, pc, asr #7
   14484:	ca070802 	bgt	1d6494 <__ccfg+0x1b64ec>
   14488:	05000003 	streq	r0, [r0, #-3]
   1448c:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
   14490:	6a0e2e03 	bvs	39fca4 <__ccfg+0x37fcfc>
   14494:	05000000 	streq	r0, [r0, #-0]
   14498:	000002a3 	andeq	r0, r0, r3, lsr #5
   1449c:	6a0e7403 	bvs	3b14b0 <__ccfg+0x391508>
   144a0:	06000000 	streq	r0, [r0], -r0
   144a4:	03a50304 			; <UNDEFINED> instruction: 0x03a50304
   144a8:	000000b9 	strheq	r0, [r0], -r9
   144ac:	0005c807 	andeq	ip, r5, r7, lsl #16
   144b0:	0ca70300 	stceq	3, cr0, [r7]
   144b4:	00000041 	andeq	r0, r0, r1, asr #32
   144b8:	00088b07 	andeq	r8, r8, r7, lsl #22
   144bc:	13a80300 			; <UNDEFINED> instruction: 0x13a80300
   144c0:	000000b9 	strheq	r0, [r0], -r9
   144c4:	00550800 	subseq	r0, r5, r0, lsl #16
   144c8:	00c90000 	sbceq	r0, r9, r0
   144cc:	25090000 	strcs	r0, [r9, #-0]
   144d0:	03000000 	movweq	r0, #0
   144d4:	03080a00 	movweq	r0, #35328	; 0x8a00
   144d8:	00ed09a2 	rsceq	r0, sp, r2, lsr #19
   144dc:	5e0b0000 	cdppl	0, 0, cr0, cr11, cr0, {0}
   144e0:	03000003 	movweq	r0, #3
   144e4:	002c07a4 	eoreq	r0, ip, r4, lsr #15
   144e8:	0b000000 	bleq	144f0 <__exidx_end+0xf448>
   144ec:	000004eb 	andeq	r0, r0, fp, ror #9
   144f0:	9705a903 	strls	sl, [r5, -r3, lsl #18]
   144f4:	04000000 	streq	r0, [r0], #-0
   144f8:	07350500 	ldreq	r0, [r5, -r0, lsl #10]!
   144fc:	aa030000 	bge	d4504 <__ccfg+0xb455c>
   14500:	0000c903 	andeq	ip, r0, r3, lsl #18
   14504:	05040c00 	streq	r0, [r4, #-3072]	; 0xfffff400
   14508:	0000068a 	andeq	r0, r0, sl, lsl #13
   1450c:	71191604 	tstvc	r9, r4, lsl #12
   14510:	05000000 	streq	r0, [r0, #-0]
   14514:	00000216 	andeq	r0, r0, r6, lsl r2
   14518:	2c0d0c05 	stccs	12, cr0, [sp], {5}
   1451c:	05000000 	streq	r0, [r0, #-0]
   14520:	00000596 	muleq	r0, r6, r5
   14524:	071b2304 	ldreq	r2, [fp, -r4, lsl #6]
   14528:	0d000001 	stceq	0, cr0, [r0, #-4]
   1452c:	000002e3 	andeq	r0, r0, r3, ror #5
   14530:	08340418 	ldmdaeq	r4!, {r3, r4, sl}
   14534:	00000179 	andeq	r0, r0, r9, ror r1
   14538:	000b160b 	andeq	r1, fp, fp, lsl #12
   1453c:	13360400 	teqne	r6, #0, 8
   14540:	00000179 	andeq	r0, r0, r9, ror r1
   14544:	6b5f0e00 	blvs	17d7d4c <__ccfg+0x17b7da4>
   14548:	07370400 	ldreq	r0, [r7, -r0, lsl #8]!
   1454c:	0000002c 	andeq	r0, r0, ip, lsr #32
   14550:	08f10b04 	ldmeq	r1!, {r2, r8, r9, fp}^
   14554:	37040000 	strcc	r0, [r4, -r0]
   14558:	00002c0b 	andeq	r2, r0, fp, lsl #24
   1455c:	860b0800 	strhi	r0, [fp], -r0, lsl #16
   14560:	0400003f 	streq	r0, [r0], #-63	; 0xffffffc1
   14564:	002c1437 	eoreq	r1, ip, r7, lsr r4
   14568:	0b0c0000 	bleq	314570 <__ccfg+0x2f45c8>
   1456c:	000003f6 	strdeq	r0, [r0], -r6
   14570:	2c1b3704 	ldccs	7, cr3, [fp], {4}
   14574:	10000000 	andne	r0, r0, r0
   14578:	00785f0e 	rsbseq	r5, r8, lr, lsl #30
   1457c:	7f0b3804 	svcvc	0x000b3804
   14580:	14000001 	strne	r0, [r0], #-1
   14584:	1f040f00 	svcne	0x00040f00
   14588:	08000001 	stmdaeq	r0, {r0}
   1458c:	000000fb 	strdeq	r0, [r0], -fp
   14590:	0000018f 	andeq	r0, r0, pc, lsl #3
   14594:	00002509 	andeq	r2, r0, r9, lsl #10
   14598:	0d000000 	stceq	0, cr0, [r0, #-0]
   1459c:	0000090c 	andeq	r0, r0, ip, lsl #18
   145a0:	083c0424 	ldmdaeq	ip!, {r2, r5, sl}
   145a4:	00000212 	andeq	r0, r0, r2, lsl r2
   145a8:	0004860b 	andeq	r8, r4, fp, lsl #12
   145ac:	093e0400 	ldmdbeq	lr!, {sl}
   145b0:	0000002c 	andeq	r0, r0, ip, lsr #32
   145b4:	03900b00 	orrseq	r0, r0, #0, 22
   145b8:	3f040000 	svccc	0x00040000
   145bc:	00002c09 	andeq	r2, r0, r9, lsl #24
   145c0:	390b0400 	stmdbcc	fp, {sl}
   145c4:	04000003 	streq	r0, [r0], #-3
   145c8:	002c0940 	eoreq	r0, ip, r0, asr #18
   145cc:	0b080000 	bleq	2145d4 <__ccfg+0x1f462c>
   145d0:	0000054c 	andeq	r0, r0, ip, asr #10
   145d4:	2c094104 	stfcss	f4, [r9], {4}
   145d8:	0c000000 	stceq	0, cr0, [r0], {-0}
   145dc:	0007be0b 	andeq	fp, r7, fp, lsl #28
   145e0:	09420400 	stmdbeq	r2, {sl}^
   145e4:	0000002c 	andeq	r0, r0, ip, lsr #32
   145e8:	08a50b10 	stmiaeq	r5!, {r4, r8, r9, fp}
   145ec:	43040000 	movwmi	r0, #16384	; 0x4000
   145f0:	00002c09 	andeq	r2, r0, r9, lsl #24
   145f4:	fe0b1400 	cdp2	4, 0, cr1, cr11, cr0, {0}
   145f8:	04000002 	streq	r0, [r0], #-2
   145fc:	002c0944 	eoreq	r0, ip, r4, asr #18
   14600:	0b180000 	bleq	614608 <__ccfg+0x5f4660>
   14604:	0000048f 	andeq	r0, r0, pc, lsl #9
   14608:	2c094504 	cfstr32cs	mvfx4, [r9], {4}
   1460c:	1c000000 	stcne	0, cr0, [r0], {-0}
   14610:	0007530b 	andeq	r5, r7, fp, lsl #6
   14614:	09460400 	stmdbeq	r6, {sl}^
   14618:	0000002c 	andeq	r0, r0, ip, lsr #32
   1461c:	61100020 	tstvs	r0, r0, lsr #32
   14620:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   14624:	084f0401 	stmdaeq	pc, {r0, sl}^	; <UNPREDICTABLE>
   14628:	00000257 	andeq	r0, r0, r7, asr r2
   1462c:	000a4a0b 	andeq	r4, sl, fp, lsl #20
   14630:	0a500400 	beq	1415638 <__ccfg+0x13f5690>
   14634:	00000257 	andeq	r0, r0, r7, asr r2
   14638:	096c0b00 	stmdbeq	ip!, {r8, r9, fp}^
   1463c:	51040000 	mrspl	r0, (UNDEF: 4)
   14640:	00025709 	andeq	r5, r2, r9, lsl #14
   14644:	b3118000 	tstlt	r1, #0
   14648:	0400000a 	streq	r0, [r0], #-10
   1464c:	00fb0a53 	rscseq	r0, fp, r3, asr sl
   14650:	01000000 	mrseq	r0, (UNDEF: 0)
   14654:	000b0111 	andeq	r0, fp, r1, lsl r1
   14658:	0a560400 	beq	1595660 <__ccfg+0x15756b8>
   1465c:	000000fb 	strdeq	r0, [r0], -fp
   14660:	08000104 	stmdaeq	r0, {r2, r8}
   14664:	000000f9 	strdeq	r0, [r0], -r9
   14668:	00000267 	andeq	r0, r0, r7, ror #4
   1466c:	00002509 	andeq	r2, r0, r9, lsl #10
   14670:	10001f00 	andne	r1, r0, r0, lsl #30
   14674:	0000082b 	andeq	r0, r0, fp, lsr #16
   14678:	62040190 	andvs	r0, r4, #144, 2	; 0x24
   1467c:	0002aa08 	andeq	sl, r2, r8, lsl #20
   14680:	0b160b00 	bleq	597288 <__ccfg+0x5772e0>
   14684:	63040000 	movwvs	r0, #16384	; 0x4000
   14688:	0002aa12 	andeq	sl, r2, r2, lsl sl
   1468c:	9e0b0000 	cdpls	0, 0, cr0, cr11, cr0, {0}
   14690:	04000004 	streq	r0, [r0], #-4
   14694:	002c0664 	eoreq	r0, ip, r4, ror #12
   14698:	0b040000 	bleq	1146a0 <__ccfg+0xf46f8>
   1469c:	000002ab 	andeq	r0, r0, fp, lsr #5
   146a0:	b0096604 	andlt	r6, r9, r4, lsl #12
   146a4:	08000002 	stmdaeq	r0, {r1}
   146a8:	0000610b 	andeq	r6, r0, fp, lsl #2
   146ac:	1e670400 	cdpne	4, 6, cr0, cr7, cr0, {0}
   146b0:	00000212 	andeq	r0, r0, r2, lsl r2
   146b4:	040f0088 	streq	r0, [pc], #-136	; 146bc <__exidx_end+0xf614>
   146b8:	00000267 	andeq	r0, r0, r7, ror #4
   146bc:	0002c008 	andeq	ip, r2, r8
   146c0:	0002c000 	andeq	ip, r2, r0
   146c4:	00250900 	eoreq	r0, r5, r0, lsl #18
   146c8:	001f0000 	andseq	r0, pc, r0
   146cc:	02c6040f 	sbceq	r0, r6, #251658240	; 0xf000000
   146d0:	0d120000 	ldceq	0, cr0, [r2, #-0]
   146d4:	00000a04 	andeq	r0, r0, r4, lsl #20
   146d8:	087a0408 	ldmdaeq	sl!, {r3, sl}^
   146dc:	000002ef 	andeq	r0, r0, pc, ror #5
   146e0:	00064e0b 	andeq	r4, r6, fp, lsl #28
   146e4:	117b0400 	cmnne	fp, r0, lsl #8
   146e8:	000002ef 	andeq	r0, r0, pc, ror #5
   146ec:	19a50b00 	stmibne	r5!, {r8, r9, fp}
   146f0:	7c040000 	stcvc	0, cr0, [r4], {-0}
   146f4:	00002c06 	andeq	r2, r0, r6, lsl #24
   146f8:	0f000400 	svceq	0x00000400
   146fc:	00005504 	andeq	r5, r0, r4, lsl #10
   14700:	03ee0d00 	mvneq	r0, #0, 26
   14704:	04680000 	strbteq	r0, [r8], #-0
   14708:	043808ba 	ldrteq	r0, [r8], #-2234	; 0xfffff746
   1470c:	5f0e0000 	svcpl	0x000e0000
   14710:	bb040070 	bllt	1148d8 <__ccfg+0xf4930>
   14714:	0002ef12 	andeq	lr, r2, r2, lsl pc
   14718:	5f0e0000 	svcpl	0x000e0000
   1471c:	bc040072 	stclt	0, cr0, [r4], {114}	; 0x72
   14720:	00002c07 	andeq	r2, r0, r7, lsl #24
   14724:	5f0e0400 	svcpl	0x000e0400
   14728:	bd040077 	stclt	0, cr0, [r4, #-476]	; 0xfffffe24
   1472c:	00002c07 	andeq	r2, r0, r7, lsl #24
   14730:	f30b0800 	vsub.i8	d0, d11, d0
   14734:	04000001 	streq	r0, [r0], #-1
   14738:	005c09be 	ldrheq	r0, [ip], #-158	; 0xffffff62
   1473c:	0b0c0000 	bleq	314744 <__ccfg+0x2f479c>
   14740:	000006bf 			; <UNDEFINED> instruction: 0x000006bf
   14744:	5c09bf04 	stcpl	15, cr11, [r9], {4}
   14748:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
   1474c:	66625f0e 	strbtvs	r5, [r2], -lr, lsl #30
   14750:	11c00400 	bicne	r0, r0, r0, lsl #8
   14754:	000002c7 	andeq	r0, r0, r7, asr #5
   14758:	01ea0b10 	mvneq	r0, r0, lsl fp
   1475c:	c1040000 	mrsgt	r0, (UNDEF: 4)
   14760:	00002c07 	andeq	r2, r0, r7, lsl #24
   14764:	b00b1800 	andlt	r1, fp, r0, lsl #16
   14768:	04000002 	streq	r0, [r0], #-2
   1476c:	00f90ac8 	rscseq	r0, r9, r8, asr #21
   14770:	0b1c0000 	bleq	714778 <__ccfg+0x6f47d0>
   14774:	00001935 	andeq	r1, r0, r5, lsr r9
   14778:	bc1dca04 			; <UNDEFINED> instruction: 0xbc1dca04
   1477c:	20000005 	andcs	r0, r0, r5
   14780:	0018fc0b 	andseq	pc, r8, fp, lsl #24
   14784:	1dcc0400 	cfstrdne	mvd0, [ip]
   14788:	000005e6 	andeq	r0, r0, r6, ror #11
   1478c:	0b270b24 	bleq	9d7424 <__ccfg+0x9b747c>
   14790:	cf040000 	svcgt	0x00040000
   14794:	00060a0d 	andeq	r0, r6, sp, lsl #20
   14798:	ea0b2800 	b	2de7a0 <__ccfg+0x2be7f8>
   1479c:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
   147a0:	062409d0 			; <UNDEFINED> instruction: 0x062409d0
   147a4:	0e2c0000 	cdpeq	0, 2, cr0, cr12, cr0, {0}
   147a8:	0062755f 	rsbeq	r7, r2, pc, asr r5
   147ac:	c711d304 	ldrgt	sp, [r1, -r4, lsl #6]
   147b0:	30000002 	andcc	r0, r0, r2
   147b4:	70755f0e 	rsbsvc	r5, r5, lr, lsl #30
   147b8:	12d40400 	sbcsne	r0, r4, #0, 8
   147bc:	000002ef 	andeq	r0, r0, pc, ror #5
   147c0:	755f0e38 	ldrbvc	r0, [pc, #-3640]	; 13990 <__exidx_end+0xe8e8>
   147c4:	d5040072 	strle	r0, [r4, #-114]	; 0xffffff8e
   147c8:	00002c07 	andeq	r2, r0, r7, lsl #24
   147cc:	3e0b3c00 	cdpcc	12, 0, cr3, cr11, cr0, {0}
   147d0:	0400000b 	streq	r0, [r0], #-11
   147d4:	062a11d8 			; <UNDEFINED> instruction: 0x062a11d8
   147d8:	0b400000 	bleq	10147e0 <__ccfg+0xff4838>
   147dc:	00000acd 	andeq	r0, r0, sp, asr #21
   147e0:	3a11d904 	bcc	48abf8 <__ccfg+0x46ac50>
   147e4:	43000006 	movwmi	r0, #6
   147e8:	626c5f0e 	rsbvs	r5, ip, #14, 30	; 0x38
   147ec:	11dc0400 	bicsne	r0, ip, r0, lsl #8
   147f0:	000002c7 	andeq	r0, r0, r7, asr #5
   147f4:	09030b44 	stmdbeq	r3, {r2, r6, r8, r9, fp}
   147f8:	df040000 	svcle	0x00040000
   147fc:	00002c07 	andeq	r2, r0, r7, lsl #24
   14800:	3b0b4c00 	blcc	2e7808 <__ccfg+0x2c7860>
   14804:	04000004 	streq	r0, [r0], #-4
   14808:	007f0ae0 	rsbseq	r0, pc, r0, ror #21
   1480c:	0b500000 	bleq	1414814 <__ccfg+0x13f486c>
   14810:	00004404 	andeq	r4, r0, r4, lsl #8
   14814:	5612e304 	ldrpl	lr, [r2], -r4, lsl #6
   14818:	54000004 	strpl	r0, [r0], #-4
   1481c:	00091b0b 	andeq	r1, r9, fp, lsl #22
   14820:	0ce70400 	cfstrdeq	mvd0, [r7]
   14824:	00000113 	andeq	r0, r0, r3, lsl r1
   14828:	08330b58 	ldmdaeq	r3!, {r3, r4, r6, r8, r9, fp}
   1482c:	e9040000 	stmdb	r4, {}	; <UNPREDICTABLE>
   14830:	0000ed0e 	andeq	lr, r0, lr, lsl #26
   14834:	f90b5c00 			; <UNDEFINED> instruction: 0xf90b5c00
   14838:	0400000a 	streq	r0, [r0], #-10
   1483c:	002c09ea 	eoreq	r0, ip, sl, ror #19
   14840:	00640000 	rsbeq	r0, r4, r0
   14844:	00002c13 	andeq	r2, r0, r3, lsl ip
   14848:	00045600 	andeq	r5, r4, r0, lsl #12
   1484c:	04561400 	ldrbeq	r1, [r6], #-1024	; 0xfffffc00
   14850:	f9140000 			; <UNDEFINED> instruction: 0xf9140000
   14854:	14000000 	strne	r0, [r0], #-0
   14858:	000005aa 	andeq	r0, r0, sl, lsr #11
   1485c:	00002c14 	andeq	r2, r0, r4, lsl ip
   14860:	040f0000 	streq	r0, [pc], #-0	; 14868 <__exidx_end+0xf7c0>
   14864:	00000461 	andeq	r0, r0, r1, ror #8
   14868:	00045615 	andeq	r5, r4, r5, lsl r6
   1486c:	44421600 	strbmi	r1, [r2], #-1536	; 0xfffffa00
   14870:	04280000 	strteq	r0, [r8], #-0
   14874:	08026504 	stmdaeq	r2, {r2, r8, sl, sp, lr}
   14878:	000005aa 	andeq	r0, r0, sl, lsr #11
   1487c:	00078417 	andeq	r8, r7, r7, lsl r4
   14880:	02670400 	rsbeq	r0, r7, #0, 8
   14884:	00002c07 	andeq	r2, r0, r7, lsl #24
   14888:	1c170000 	ldcne	0, cr0, [r7], {-0}
   1488c:	04000006 	streq	r0, [r0], #-6
   14890:	960b026c 	strls	r0, [fp], -ip, ror #4
   14894:	04000006 	streq	r0, [r0], #-6
   14898:	00028d17 	andeq	r8, r2, r7, lsl sp
   1489c:	026c0400 	rsbeq	r0, ip, #0, 8
   148a0:	00069614 	andeq	r9, r6, r4, lsl r6
   148a4:	2d170800 	ldccs	8, cr0, [r7, #-0]
   148a8:	0400000b 	streq	r0, [r0], #-11
   148ac:	961e026c 	ldrls	r0, [lr], -ip, ror #4
   148b0:	0c000006 	stceq	0, cr0, [r0], {6}
   148b4:	00049917 	andeq	r9, r4, r7, lsl r9
   148b8:	026e0400 	rsbeq	r0, lr, #0, 8
   148bc:	00002c08 	andeq	r2, r0, r8, lsl #24
   148c0:	4b171000 	blmi	5d88c8 <__ccfg+0x5b8920>
   148c4:	04000004 	streq	r0, [r0], #-4
   148c8:	9608026f 	strls	r0, [r8], -pc, ror #4
   148cc:	14000008 	strne	r0, [r0], #-8
   148d0:	000ae017 	andeq	lr, sl, r7, lsl r0
   148d4:	02720400 	rsbseq	r0, r2, #0, 8
   148d8:	00002c07 	andeq	r2, r0, r7, lsl #24
   148dc:	32173000 	andscc	r3, r7, #0
   148e0:	0400003e 	streq	r0, [r0], #-62	; 0xffffffc2
   148e4:	ab160273 	blge	5952b8 <__ccfg+0x575310>
   148e8:	34000008 	strcc	r0, [r0], #-8
   148ec:	0005e217 	andeq	lr, r5, r7, lsl r2
   148f0:	02750400 	rsbseq	r0, r5, #0, 8
   148f4:	00002c07 	andeq	r2, r0, r7, lsl #24
   148f8:	2b173800 	blcs	5e2900 <__ccfg+0x5c2958>
   148fc:	04000007 	streq	r0, [r0], #-7
   14900:	bc0a0277 	sfmlt	f0, 4, [sl], {119}	; 0x77
   14904:	3c000008 	stccc	0, cr0, [r0], {8}
   14908:	00030817 	andeq	r0, r3, r7, lsl r8
   1490c:	027a0400 	rsbseq	r0, sl, #0, 8
   14910:	00017913 	andeq	r7, r1, r3, lsl r9
   14914:	b4174000 	ldrlt	r4, [r7], #-0
   14918:	04000003 	streq	r0, [r0], #-3
   1491c:	2c07027b 	sfmcs	f0, 4, [r7], {123}	; 0x7b
   14920:	44000000 	strmi	r0, [r0], #-0
   14924:	0004f317 	andeq	pc, r4, r7, lsl r3	; <UNPREDICTABLE>
   14928:	027c0400 	rsbseq	r0, ip, #0, 8
   1492c:	00017913 	andeq	r7, r1, r3, lsl r9
   14930:	54174800 	ldrpl	r4, [r7], #-2048	; 0xfffff800
   14934:	04000006 	streq	r0, [r0], #-6
   14938:	c214027d 	andsgt	r0, r4, #-805306361	; 0xd0000007
   1493c:	4c000008 	stcmi	0, cr0, [r0], {8}
   14940:	0008e917 	andeq	lr, r8, r7, lsl r9
   14944:	02800400 	addeq	r0, r0, #0, 8
   14948:	00002c07 	andeq	r2, r0, r7, lsl #24
   1494c:	80175000 	andshi	r5, r7, r0
   14950:	04000009 	streq	r0, [r0], #-9
   14954:	aa090281 	bge	255360 <__ccfg+0x2353b8>
   14958:	54000005 	strpl	r0, [r0], #-5
   1495c:	00099a17 	andeq	r9, r9, r7, lsl sl
   14960:	02a40400 	adceq	r0, r4, #0, 8
   14964:	00087107 	andeq	r7, r8, r7, lsl #2
   14968:	2b185800 	blcs	62a970 <__ccfg+0x60a9c8>
   1496c:	04000008 	streq	r0, [r0], #-8
   14970:	aa1302a8 	bge	4d5418 <__ccfg+0x4b5470>
   14974:	48000002 	stmdami	r0, {r1}
   14978:	056f1801 	strbeq	r1, [pc, #-2049]!	; 1417f <__exidx_end+0xf0d7>
   1497c:	a9040000 	stmdbge	r4, {}	; <UNPREDICTABLE>
   14980:	02671202 	rsbeq	r1, r7, #536870912	; 0x20000000
   14984:	014c0000 	mrseq	r0, (UNDEF: 76)
   14988:	00055618 	andeq	r5, r5, r8, lsl r6
   1498c:	02ad0400 	adceq	r0, sp, #0, 8
   14990:	0008d30c 	andeq	sp, r8, ip, lsl #6
   14994:	1802dc00 	stmdane	r2, {sl, fp, ip, lr, pc}
   14998:	00000a27 	andeq	r0, r0, r7, lsr #20
   1499c:	1002b204 	andne	fp, r2, r4, lsl #4
   149a0:	00000657 	andeq	r0, r0, r7, asr r6
   149a4:	6c1802e0 	lfmvs	f0, 4, [r8], {224}	; 0xe0
   149a8:	04000008 	streq	r0, [r0], #-8
   149ac:	df0a02b4 	svcle	0x000a02b4
   149b0:	ec000008 	stc	0, cr0, [r0], {8}
   149b4:	040f0002 	streq	r0, [pc], #-2	; 149bc <__exidx_end+0xf914>
   149b8:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
   149bc:	91080102 	tstls	r8, r2, lsl #2
   149c0:	15000009 	strne	r0, [r0, #-9]
   149c4:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
   149c8:	0438040f 	ldrteq	r0, [r8], #-1039	; 0xfffffbf1
   149cc:	2c130000 	ldccs	0, cr0, [r3], {-0}
   149d0:	e0000000 	and	r0, r0, r0
   149d4:	14000005 	strne	r0, [r0], #-5
   149d8:	00000456 	andeq	r0, r0, r6, asr r4
   149dc:	0000f914 	andeq	pc, r0, r4, lsl r9	; <UNPREDICTABLE>
   149e0:	05e01400 	strbeq	r1, [r0, #1024]!	; 0x400
   149e4:	2c140000 	ldccs	0, cr0, [r4], {-0}
   149e8:	00000000 	andeq	r0, r0, r0
   149ec:	05b7040f 	ldreq	r0, [r7, #1039]!	; 0x40f
   149f0:	040f0000 	streq	r0, [pc], #-0	; 149f8 <__exidx_end+0xf950>
   149f4:	000005c2 	andeq	r0, r0, r2, asr #11
   149f8:	00008b13 	andeq	r8, r0, r3, lsl fp
   149fc:	00060a00 	andeq	r0, r6, r0, lsl #20
   14a00:	04561400 	ldrbeq	r1, [r6], #-1024	; 0xfffffc00
   14a04:	f9140000 			; <UNDEFINED> instruction: 0xf9140000
   14a08:	14000000 	strne	r0, [r0], #-0
   14a0c:	0000008b 	andeq	r0, r0, fp, lsl #1
   14a10:	00002c14 	andeq	r2, r0, r4, lsl ip
   14a14:	040f0000 	streq	r0, [pc], #-0	; 14a1c <__exidx_end+0xf974>
   14a18:	000005ec 	andeq	r0, r0, ip, ror #11
   14a1c:	00002c13 	andeq	r2, r0, r3, lsl ip
   14a20:	00062400 	andeq	r2, r6, r0, lsl #8
   14a24:	04561400 	ldrbeq	r1, [r6], #-1024	; 0xfffffc00
   14a28:	f9140000 			; <UNDEFINED> instruction: 0xf9140000
   14a2c:	00000000 	andeq	r0, r0, r0
   14a30:	0610040f 	ldreq	r0, [r0], -pc, lsl #8
   14a34:	55080000 	strpl	r0, [r8, #-0]
   14a38:	3a000000 	bcc	14a40 <__exidx_end+0xf998>
   14a3c:	09000006 	stmdbeq	r0, {r1, r2}
   14a40:	00000025 	andeq	r0, r0, r5, lsr #32
   14a44:	55080002 	strpl	r0, [r8, #-2]
   14a48:	4a000000 	bmi	14a50 <__exidx_end+0xf9a8>
   14a4c:	09000006 	stmdbeq	r0, {r1, r2}
   14a50:	00000025 	andeq	r0, r0, r5, lsr #32
   14a54:	29040000 	stmdbcs	r4, {}	; <UNPREDICTABLE>
   14a58:	04000004 	streq	r0, [r0], #-4
   14a5c:	f51a0124 			; <UNDEFINED> instruction: 0xf51a0124
   14a60:	19000002 	stmdbne	r0, {r1}
   14a64:	00004458 	andeq	r4, r0, r8, asr r4
   14a68:	0128040c 			; <UNDEFINED> instruction: 0x0128040c
   14a6c:	00069008 	andeq	r9, r6, r8
   14a70:	0b161700 	bleq	59a678 <__ccfg+0x57a6d0>
   14a74:	2a040000 	bcs	114a7c <__ccfg+0xf4ad4>
   14a78:	06901101 	ldreq	r1, [r0], r1, lsl #2
   14a7c:	17000000 	strne	r0, [r0, -r0]
   14a80:	0000093b 	andeq	r0, r0, fp, lsr r9
   14a84:	07012b04 	streq	r2, [r1, -r4, lsl #22]
   14a88:	0000002c 	andeq	r0, r0, ip, lsr #32
   14a8c:	05ce1704 	strbeq	r1, [lr, #1796]	; 0x704
   14a90:	2c040000 	stccs	0, cr0, [r4], {-0}
   14a94:	06960b01 	ldreq	r0, [r6], r1, lsl #22
   14a98:	00080000 	andeq	r0, r8, r0
   14a9c:	0657040f 	ldrbeq	r0, [r7], -pc, lsl #8
   14aa0:	040f0000 	streq	r0, [pc], #-0	; 14aa8 <__exidx_end+0xfa00>
   14aa4:	0000064a 	andeq	r0, r0, sl, asr #12
   14aa8:	0003a019 	andeq	sl, r3, r9, lsl r0
   14aac:	44040e00 	strmi	r0, [r4], #-3584	; 0xfffff200
   14ab0:	06d50801 	ldrbeq	r0, [r5], r1, lsl #16
   14ab4:	5e170000 	cdppl	0, 1, cr0, cr7, cr0, {0}
   14ab8:	04000012 	streq	r0, [r0], #-18	; 0xffffffee
   14abc:	d5120145 	ldrle	r0, [r2, #-325]	; 0xfffffebb
   14ac0:	00000006 	andeq	r0, r0, r6
   14ac4:	00067917 	andeq	r7, r6, r7, lsl r9
   14ac8:	01460400 	cmpeq	r6, r0, lsl #8
   14acc:	0006d512 	andeq	sp, r6, r2, lsl r5
   14ad0:	03170600 	tsteq	r7, #0, 12
   14ad4:	04000011 	streq	r0, [r0], #-17	; 0xffffffef
   14ad8:	63120147 	tstvs	r2, #-1073741807	; 0xc0000011
   14adc:	0c000000 	stceq	0, cr0, [r0], {-0}
   14ae0:	00630800 	rsbeq	r0, r3, r0, lsl #16
   14ae4:	06e50000 	strbteq	r0, [r5], r0
   14ae8:	25090000 	strcs	r0, [r9, #-0]
   14aec:	02000000 	andeq	r0, r0, #0
   14af0:	04d01a00 	ldrbeq	r1, [r0], #2560	; 0xa00
   14af4:	fa070285 	blx	1d5510 <__ccfg+0x1b5568>
   14af8:	17000007 	strne	r0, [r0, -r7]
   14afc:	00000ad3 	ldrdeq	r0, [r0], -r3
   14b00:	18028704 	stmdane	r2, {r2, r8, r9, sl, pc}
   14b04:	00000025 	andeq	r0, r0, r5, lsr #32
   14b08:	0a2f1700 	beq	bda710 <__ccfg+0xbba768>
   14b0c:	88040000 	stmdahi	r4, {}	; <UNPREDICTABLE>
   14b10:	05aa1202 	streq	r1, [sl, #514]!	; 0x202
   14b14:	17040000 	strne	r0, [r4, -r0]
   14b18:	000003e1 	andeq	r0, r0, r1, ror #7
   14b1c:	10028904 	andne	r8, r2, r4, lsl #18
   14b20:	000007fa 	strdeq	r0, [r0], -sl
   14b24:	08bd1708 	popeq	{r3, r8, r9, sl, ip}
   14b28:	8a040000 	bhi	114b30 <__ccfg+0xf4b88>
   14b2c:	018f1702 	orreq	r1, pc, r2, lsl #14
   14b30:	17240000 	strne	r0, [r4, -r0]!
   14b34:	00000623 	andeq	r0, r0, r3, lsr #12
   14b38:	0f028b04 	svceq	0x00028b04
   14b3c:	0000002c 	andeq	r0, r0, ip, lsr #32
   14b40:	0b111748 	bleq	45a868 <__ccfg+0x43a8c0>
   14b44:	8c040000 	stchi	0, cr0, [r4], {-0}
   14b48:	00782c02 	rsbseq	r2, r8, r2, lsl #24
   14b4c:	17500000 	ldrbne	r0, [r0, -r0]
   14b50:	00000085 	andeq	r0, r0, r5, lsl #1
   14b54:	1a028d04 	bne	b7f6c <__ccfg+0x97fc4>
   14b58:	0000069c 	muleq	r0, ip, r6
   14b5c:	052b1758 	streq	r1, [fp, #-1880]!	; 0xfffff8a8
   14b60:	8e040000 	cdphi	0, 0, cr0, cr4, cr0, {0}
   14b64:	00ed1602 	rsceq	r1, sp, r2, lsl #12
   14b68:	17680000 	strbne	r0, [r8, -r0]!
   14b6c:	00000a3c 	andeq	r0, r0, ip, lsr sl
   14b70:	16028f04 	strne	r8, [r2], -r4, lsl #30
   14b74:	000000ed 	andeq	r0, r0, sp, ror #1
   14b78:	006f1770 	rsbeq	r1, pc, r0, ror r7	; <UNPREDICTABLE>
   14b7c:	90040000 	andls	r0, r4, r0
   14b80:	00ed1602 	rsceq	r1, sp, r2, lsl #12
   14b84:	17780000 	ldrbne	r0, [r8, -r0]!
   14b88:	000008f9 	strdeq	r0, [r0], -r9
   14b8c:	10029104 	andne	r9, r2, r4, lsl #2
   14b90:	0000080a 	andeq	r0, r0, sl, lsl #16
   14b94:	03be1780 			; <UNDEFINED> instruction: 0x03be1780
   14b98:	92040000 	andls	r0, r4, #0
   14b9c:	081a1002 	ldmdaeq	sl, {r1, ip}
   14ba0:	17880000 	strne	r0, [r8, r0]
   14ba4:	000009bd 			; <UNDEFINED> instruction: 0x000009bd
   14ba8:	0f029304 	svceq	0x00029304
   14bac:	0000002c 	andeq	r0, r0, ip, lsr #32
   14bb0:	026117a0 	rsbeq	r1, r1, #160, 14	; 0x2800000
   14bb4:	94040000 	strls	r0, [r4], #-0
   14bb8:	00ed1602 	rsceq	r1, sp, r2, lsl #12
   14bbc:	17a40000 	strne	r0, [r4, r0]!
   14bc0:	00000560 	andeq	r0, r0, r0, ror #10
   14bc4:	16029504 	strne	r9, [r2], -r4, lsl #10
   14bc8:	000000ed 	andeq	r0, r0, sp, ror #1
   14bcc:	04a317ac 	strteq	r1, [r3], #1964	; 0x7ac
   14bd0:	96040000 	strls	r0, [r4], -r0
   14bd4:	00ed1602 	rsceq	r1, sp, r2, lsl #12
   14bd8:	17b40000 	ldrne	r0, [r4, r0]!
   14bdc:	000006b0 			; <UNDEFINED> instruction: 0x000006b0
   14be0:	16029704 	strne	r9, [r2], -r4, lsl #14
   14be4:	000000ed 	andeq	r0, r0, sp, ror #1
   14be8:	051a17bc 	ldreq	r1, [sl, #-1980]	; 0xfffff844
   14bec:	98040000 	stmdals	r4, {}	; <UNPREDICTABLE>
   14bf0:	00ed1602 	rsceq	r1, sp, r2, lsl #12
   14bf4:	17c40000 	strbne	r0, [r4, r0]
   14bf8:	00000782 	andeq	r0, r0, r2, lsl #15
   14bfc:	08029904 	stmdaeq	r2, {r2, r8, fp, ip, pc}
   14c00:	0000002c 	andeq	r0, r0, ip, lsr #32
   14c04:	b00800cc 	andlt	r0, r8, ip, asr #1
   14c08:	0a000005 	beq	14c24 <__exidx_end+0xfb7c>
   14c0c:	09000008 	stmdbeq	r0, {r3}
   14c10:	00000025 	andeq	r0, r0, r5, lsr #32
   14c14:	b0080019 	andlt	r0, r8, r9, lsl r0
   14c18:	1a000005 	bne	14c34 <__exidx_end+0xfb8c>
   14c1c:	09000008 	stmdbeq	r0, {r3}
   14c20:	00000025 	andeq	r0, r0, r5, lsr #32
   14c24:	b0080007 	andlt	r0, r8, r7
   14c28:	2a000005 	bcs	14c44 <__exidx_end+0xfb9c>
   14c2c:	09000008 	stmdbeq	r0, {r3}
   14c30:	00000025 	andeq	r0, r0, r5, lsr #32
   14c34:	f01a0017 			; <UNDEFINED> instruction: 0xf01a0017
   14c38:	07029e04 	streq	r9, [r2, -r4, lsl #28]
   14c3c:	00000851 	andeq	r0, r0, r1, asr r8
   14c40:	00039917 	andeq	r9, r3, r7, lsl r9
   14c44:	02a10400 	adceq	r0, r1, #0, 8
   14c48:	0008511b 	andeq	r5, r8, fp, lsl r1
   14c4c:	35170000 	ldrcc	r0, [r7, #-0]
   14c50:	0400000b 	streq	r0, [r0], #-11
   14c54:	611802a2 	tstvs	r8, r2, lsr #5
   14c58:	78000008 	stmdavc	r0, {r3}
   14c5c:	02ef0800 	rsceq	r0, pc, #0, 16
   14c60:	08610000 	stmdaeq	r1!, {}^	; <UNPREDICTABLE>
   14c64:	25090000 	strcs	r0, [r9, #-0]
   14c68:	1d000000 	stcne	0, cr0, [r0, #-0]
   14c6c:	00250800 	eoreq	r0, r5, r0, lsl #16
   14c70:	08710000 	ldmdaeq	r1!, {}^	; <UNPREDICTABLE>
   14c74:	25090000 	strcs	r0, [r9, #-0]
   14c78:	1d000000 	stcne	0, cr0, [r0, #-0]
   14c7c:	04f01b00 	ldrbteq	r1, [r0], #2816	; 0xb00
   14c80:	96030283 	strls	r0, [r3], -r3, lsl #5
   14c84:	1c000008 	stcne	0, cr0, [r0], {8}
   14c88:	00004442 	andeq	r4, r0, r2, asr #8
   14c8c:	0b029a04 	bleq	bb4a4 <__ccfg+0x9b4fc>
   14c90:	000006e5 	andeq	r0, r0, r5, ror #13
   14c94:	0008d71c 	andeq	sp, r8, ip, lsl r7
   14c98:	02a30400 	adceq	r0, r3, #0, 8
   14c9c:	00082a0b 	andeq	r2, r8, fp, lsl #20
   14ca0:	b0080000 	andlt	r0, r8, r0
   14ca4:	a6000005 	strge	r0, [r0], -r5
   14ca8:	09000008 	stmdbeq	r0, {r3}
   14cac:	00000025 	andeq	r0, r0, r5, lsr #32
   14cb0:	1c1d0018 	ldcne	0, cr0, [sp], {24}
   14cb4:	0f00000b 	svceq	0x0000000b
   14cb8:	0008a604 	andeq	sl, r8, r4, lsl #12
   14cbc:	08bc1e00 	ldmeq	ip!, {r9, sl, fp, ip}
   14cc0:	56140000 	ldrpl	r0, [r4], -r0
   14cc4:	00000004 	andeq	r0, r0, r4
   14cc8:	08b1040f 	ldmeq	r1!, {r0, r1, r2, r3, sl}
   14ccc:	040f0000 	streq	r0, [pc], #-0	; 14cd4 <__exidx_end+0xfc2c>
   14cd0:	00000179 	andeq	r0, r0, r9, ror r1
   14cd4:	0008d31e 	andeq	sp, r8, lr, lsl r3
   14cd8:	002c1400 	eoreq	r1, ip, r0, lsl #8
   14cdc:	0f000000 	svceq	0x00000000
   14ce0:	0008d904 	andeq	sp, r8, r4, lsl #18
   14ce4:	c8040f00 	stmdagt	r4, {r8, r9, sl, fp}
   14ce8:	08000008 	stmdaeq	r0, {r3}
   14cec:	0000064a 	andeq	r0, r0, sl, asr #12
   14cf0:	000008ef 	andeq	r0, r0, pc, ror #17
   14cf4:	00002509 	andeq	r2, r0, r9, lsl #10
   14cf8:	1f000200 	svcne	0x00000200
   14cfc:	00000899 	muleq	r0, r9, r8
   14d00:	17033304 	strne	r3, [r3, -r4, lsl #6]
   14d04:	00000456 	andeq	r0, r0, r6, asr r4
   14d08:	0008921f 	andeq	r9, r8, pc, lsl r2
   14d0c:	03340400 	teqeq	r4, #0, 8
   14d10:	00045c1d 	andeq	r5, r4, sp, lsl ip
   14d14:	3fd42000 	svccc	0x00d42000
   14d18:	67060000 	strvs	r0, [r6, -r0]
   14d1c:	0005aa0e 	andeq	sl, r5, lr, lsl #20
   14d20:	07852100 	streq	r2, [r5, r0, lsl #2]
   14d24:	1a010000 	bne	54d2c <__ccfg+0x34d84>
   14d28:	00002c05 	andeq	r2, r0, r5, lsl #24
   14d2c:	9c030500 	cfstr32ls	mvfx0, [r3], {-0}
   14d30:	2220000b 	eorcs	r0, r0, #11
   14d34:	0000443a 	andeq	r4, r0, sl, lsr r4
   14d38:	06033604 	streq	r3, [r3], -r4, lsl #12
   14d3c:	00000000 	andeq	r0, r0, r0
   14d40:	00000098 	muleq	r0, r8, r0
   14d44:	0a4b9c01 	beq	12fbd50 <__ccfg+0x12dbda8>
   14d48:	70230000 	eorvc	r0, r3, r0
   14d4c:	01007274 	tsteq	r0, r4, ror r2
   14d50:	0456202c 	ldrbeq	r2, [r6], #-44	; 0xffffffd4
   14d54:	594c0000 	stmdbpl	ip, {}^	; <UNPREDICTABLE>
   14d58:	59460000 	stmdbpl	r6, {}^	; <UNPREDICTABLE>
   14d5c:	00240000 	eoreq	r0, r4, r0
   14d60:	22000000 	andcs	r0, r0, #0
   14d64:	c0000000 	andgt	r0, r0, r0
   14d68:	25000009 	strcs	r0, [r0, #-9]
   14d6c:	37010069 	strcc	r0, [r1, -r9, rrx]
   14d70:	00002c08 	andeq	r2, r0, r8, lsl #24
   14d74:	00002400 	andeq	r2, r0, r0, lsl #8
   14d78:	00160000 	andseq	r0, r6, r0
   14d7c:	09af0000 	stmibeq	pc!, {}	; <UNPREDICTABLE>
   14d80:	49260000 	stmdbmi	r6!, {}	; <UNPREDICTABLE>
   14d84:	01000044 	tsteq	r0, r4, asr #32
   14d88:	0179183a 	cmneq	r9, sl, lsr r8
   14d8c:	597a0000 	ldmdbpl	sl!, {}^	; <UNPREDICTABLE>
   14d90:	59780000 	ldmdbpl	r8!, {}^	; <UNPREDICTABLE>
   14d94:	95260000 	strls	r0, [r6, #-0]!
   14d98:	01000044 	tsteq	r0, r4, asr #32
   14d9c:	0179223a 	cmneq	r9, sl, lsr r2
   14da0:	59930000 	ldmibpl	r3, {}	; <UNPREDICTABLE>
   14da4:	598d0000 	stmibpl	sp, {}	; <UNPREDICTABLE>
   14da8:	00270000 	eoreq	r0, r7, r0
   14dac:	b4000000 	strlt	r0, [r0], #-0
   14db0:	2800000a 	stmdacs	r0, {r1, r3}
   14db4:	75025001 	strvc	r5, [r2, #-1]
   14db8:	27000000 	strcs	r0, [r0, -r0]
   14dbc:	00000000 	andeq	r0, r0, r0
   14dc0:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
   14dc4:	02500128 	subseq	r0, r0, #40, 2
   14dc8:	00000075 	andeq	r0, r0, r5, ror r0
   14dcc:	00000024 	andeq	r0, r0, r4, lsr #32
   14dd0:	00000e00 	andeq	r0, r0, r0, lsl #28
   14dd4:	000a0200 	andeq	r0, sl, r0, lsl #4
   14dd8:	00702900 	rsbseq	r2, r0, r0, lsl #18
   14ddc:	aa146601 	bge	52e5e8 <__ccfg+0x50e640>
   14de0:	c0000002 	andgt	r0, r0, r2
   14de4:	bc000059 	stclt	0, cr0, [r0], {89}	; 0x59
   14de8:	29000059 	stmdbcs	r0, {r0, r3, r4, r6}
   14dec:	66010071 			; <UNDEFINED> instruction: 0x66010071
   14df0:	0002aa18 	andeq	sl, r2, r8, lsl sl
   14df4:	0059e000 	subseq	lr, r9, r0
   14df8:	0059de00 	subseq	sp, r9, r0, lsl #28
   14dfc:	00002700 	andeq	r2, r0, r0, lsl #14
   14e00:	0ab40000 	beq	fed14e08 <_estack+0xded0fe08>
   14e04:	01280000 			; <UNDEFINED> instruction: 0x01280000
   14e08:	00750250 	rsbseq	r0, r5, r0, asr r2
   14e0c:	002a0000 	eoreq	r0, sl, r0
   14e10:	b4000000 	strlt	r0, [r0], #-0
   14e14:	1600000a 	strne	r0, [r0], -sl
   14e18:	2800000a 	stmdacs	r0, {r1, r3}
   14e1c:	75025001 	strvc	r5, [r2, #-1]
   14e20:	002a0000 	eoreq	r0, sl, r0
   14e24:	b4000000 	strlt	r0, [r0], #-0
   14e28:	2a00000a 	bcs	14e58 <__exidx_end+0xfdb0>
   14e2c:	2800000a 	stmdacs	r0, {r1, r3}
   14e30:	75025001 	strvc	r5, [r2, #-1]
   14e34:	002b0000 	eoreq	r0, fp, r0
   14e38:	3a000000 	bcc	14e40 <__exidx_end+0xfd98>
   14e3c:	2800000a 	stmdacs	r0, {r1, r3}
   14e40:	75025001 	strvc	r5, [r2, #-1]
   14e44:	00270000 	eoreq	r0, r7, r0
   14e48:	4b000000 	blmi	14e50 <__exidx_end+0xfda8>
   14e4c:	2800000a 	stmdacs	r0, {r1, r3}
   14e50:	75025001 	strvc	r5, [r2, #-1]
   14e54:	2c000000 	stccs	0, cr0, [r0], {-0}
   14e58:	00004451 	andeq	r4, r0, r1, asr r4
   14e5c:	00012101 	andeq	r2, r1, r1, lsl #2
   14e60:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
   14e64:	01000000 	mrseq	r0, (UNDEF: 0)
   14e68:	000ab49c 	muleq	sl, ip, r4
   14e6c:	74702300 	ldrbtvc	r2, [r0], #-768	; 0xfffffd00
   14e70:	21010072 	tstcs	r1, r2, ror r0
   14e74:	0004561e 	andeq	r5, r4, lr, lsl r6
   14e78:	0059f900 	subseq	pc, r9, r0, lsl #18
   14e7c:	0059f300 	subseq	pc, r9, r0, lsl #6
   14e80:	44592d00 	ldrbmi	r2, [r9], #-3328	; 0xfffff300
   14e84:	22010000 	andcs	r0, r1, #0
   14e88:	00069014 	andeq	r9, r6, r4, lsl r0
   14e8c:	005a2b00 	subseq	r2, sl, r0, lsl #22
   14e90:	005a2500 	subseq	r2, sl, r0, lsl #10
   14e94:	00002a00 	andeq	r2, r0, r0, lsl #20
   14e98:	0a4b0000 	beq	12d4ea0 <__ccfg+0x12b4ef8>
   14e9c:	0a9d0000 	beq	fe754ea4 <_estack+0xde74fea4>
   14ea0:	01280000 			; <UNDEFINED> instruction: 0x01280000
   14ea4:	00750250 	rsbseq	r0, r5, r0, asr r2
   14ea8:	00002700 	andeq	r2, r0, r0, lsl #14
   14eac:	0ab40000 	beq	fed14eb4 <_estack+0xded0feb4>
   14eb0:	01280000 			; <UNDEFINED> instruction: 0x01280000
   14eb4:	00750250 	rsbseq	r0, r5, r0, asr r2
   14eb8:	02510128 	subseq	r0, r1, #40, 2
   14ebc:	00000074 	andeq	r0, r0, r4, ror r0
   14ec0:	00448d2e 	subeq	r8, r4, lr, lsr #26
   14ec4:	00448d00 	subeq	r8, r4, r0, lsl #26
   14ec8:	01280600 			; <UNDEFINED> instruction: 0x01280600
   14ecc:	0a920006 	beq	fe494eec <_estack+0xde48feec>
   14ed0:	00040000 	andeq	r0, r4, r0
   14ed4:	00004c50 	andeq	r4, r0, r0, asr ip
   14ed8:	47be0104 	ldrmi	r0, [lr, r4, lsl #2]!
   14edc:	180c0000 	stmdane	ip, {}	; <UNPREDICTABLE>
   14ee0:	3b000046 	blcc	15000 <__exidx_end+0xff58>
   14ee4:	c000004f 	andgt	r0, r0, pc, asr #32
   14ee8:	54000042 	strpl	r0, [r0], #-66	; 0xffffffbe
   14eec:	6b000000 	blvs	14ef4 <__exidx_end+0xfe4c>
   14ef0:	02000090 	andeq	r0, r0, #144	; 0x90
   14ef4:	03ca0708 	biceq	r0, sl, #8, 14	; 0x200000
   14ef8:	04030000 	streq	r0, [r3], #-0
   14efc:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
   14f00:	07040200 	streq	r0, [r4, -r0, lsl #4]
   14f04:	000003d4 	ldrdeq	r0, [r0], -r4
   14f08:	32050802 	andcc	r0, r5, #131072	; 0x20000
   14f0c:	02000006 	andeq	r0, r0, #6
   14f10:	3fbb0408 	svccc	0x00bb0408
   14f14:	a9040000 	stmdbge	r4, {}	; <UNPREDICTABLE>
   14f18:	02000048 	andeq	r0, r0, #72	; 0x48
   14f1c:	0033162a 	eorseq	r1, r3, sl, lsr #12
   14f20:	56040000 	strpl	r0, [r4], -r0
   14f24:	0200004c 	andeq	r0, r0, #76	; 0x4c
   14f28:	0060152f 	rsbeq	r1, r0, pc, lsr #10
   14f2c:	04050000 	streq	r0, [r5], #-0
   14f30:	00000066 	andeq	r0, r0, r6, rrx
   14f34:	00004806 	andeq	r4, r0, r6, lsl #16
   14f38:	00007500 	andeq	r7, r0, r0, lsl #10
   14f3c:	00750700 	rsbseq	r0, r5, r0, lsl #14
   14f40:	05000000 	streq	r0, [r0, #-0]
   14f44:	00007b04 	andeq	r7, r0, r4, lsl #22
   14f48:	b8040800 	stmdalt	r4, {fp}
   14f4c:	02000053 	andeq	r0, r0, #83	; 0x53
   14f50:	00880f36 	addeq	r0, r8, r6, lsr pc
   14f54:	04050000 	streq	r0, [r5], #-0
   14f58:	0000008e 	andeq	r0, r0, lr, lsl #1
   14f5c:	00002c06 	andeq	r2, r0, r6, lsl #24
   14f60:	0000a200 	andeq	sl, r0, r0, lsl #4
   14f64:	00750700 	rsbseq	r0, r5, r0, lsl #14
   14f68:	75070000 	strvc	r0, [r7, #-0]
   14f6c:	00000000 	andeq	r0, r0, r0
   14f70:	88080102 	stmdahi	r8, {r1, r8}
   14f74:	09000009 	stmdbeq	r0, {r0, r3}
   14f78:	00004e70 	andeq	r4, r0, r0, ror lr
   14f7c:	5412bb02 	ldrpl	fp, [r2], #-2818	; 0xfffff4fe
   14f80:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
   14f84:	000053eb 	andeq	r5, r0, fp, ror #7
   14f88:	7c10be02 	ldcvc	14, cr11, [r0], {2}
   14f8c:	02000000 	andeq	r0, r0, #0
   14f90:	098a0601 	stmibeq	sl, {r0, r9, sl}
   14f94:	760a0000 	strvc	r0, [sl], -r0
   14f98:	0700004b 	streq	r0, [r0, -fp, asr #32]
   14f9c:	0000a201 	andeq	sl, r0, r1, lsl #4
   14fa0:	06170300 	ldreq	r0, [r7], -r0, lsl #6
   14fa4:	000001f5 	strdeq	r0, [r0], -r5
   14fa8:	00464c0b 	subeq	r4, r6, fp, lsl #24
   14fac:	750b0000 	strvc	r0, [fp, #-0]
   14fb0:	0100004a 	tsteq	r0, sl, asr #32
   14fb4:	004f9d0b 	subeq	r9, pc, fp, lsl #26
   14fb8:	fe0b0200 	cdp2	2, 0, cr0, cr11, cr0, {0}
   14fbc:	03000052 	movweq	r0, #82	; 0x52
   14fc0:	004edf0b 	subeq	sp, lr, fp, lsl #30
   14fc4:	1b0b0400 	blne	2d5fcc <__ccfg+0x2b6024>
   14fc8:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
   14fcc:	00517f0b 	subseq	r7, r1, fp, lsl #30
   14fd0:	6d0b0600 	stcvs	6, cr0, [fp, #-0]
   14fd4:	07000046 	streq	r0, [r0, -r6, asr #32]
   14fd8:	0052300b 	subseq	r3, r2, fp
   14fdc:	3e0b0800 	cdpcc	8, 0, cr0, cr11, cr0, {0}
   14fe0:	09000052 	stmdbeq	r0, {r1, r4, r6}
   14fe4:	0052f10b 	subseq	pc, r2, fp, lsl #2
   14fe8:	360b0a00 	strcc	r0, [fp], -r0, lsl #20
   14fec:	0b00004e 	bleq	1512c <__exidx_end+0x10084>
   14ff0:	0048ea0b 	subeq	lr, r8, fp, lsl #20
   14ff4:	fe0b0c00 	cdp2	12, 0, cr0, cr11, cr0, {0}
   14ff8:	0d000048 	stceq	0, cr0, [r0, #-288]	; 0xfffffee0
   14ffc:	004bba0b 	subeq	fp, fp, fp, lsl #20
   15000:	d00b0e00 	andle	r0, fp, r0, lsl #28
   15004:	0f00004b 	svceq	0x0000004b
   15008:	004aaf0b 	subeq	sl, sl, fp, lsl #30
   1500c:	c30b1000 	movwgt	r1, #45056	; 0xb000
   15010:	1100004e 	tstne	r0, lr, asr #32
   15014:	004b390b 	subeq	r3, fp, fp, lsl #18
   15018:	b60b1200 	strlt	r1, [fp], -r0, lsl #4
   1501c:	13000055 	movwne	r0, #85	; 0x55
   15020:	0046d60b 	subeq	sp, r6, fp, lsl #12
   15024:	5d0b1400 	cfstrspl	mvf1, [fp, #-0]
   15028:	1500004b 	strne	r0, [r0, #-75]	; 0xffffffb5
   1502c:	0045eb0b 	subeq	lr, r5, fp, lsl #22
   15030:	210b1600 	tstcs	fp, r0, lsl #12
   15034:	17000053 	smlsdne	r0, r3, r0, r0
   15038:	0054440b 	subseq	r4, r4, fp, lsl #8
   1503c:	820b1800 	andhi	r1, fp, #0, 16
   15040:	1900004b 	stmdbne	r0, {r0, r1, r3, r6}
   15044:	00500f0b 	subseq	r0, r0, fp, lsl #30
   15048:	2f0b1a00 	svccs	0x000b1a00
   1504c:	1b000053 	blne	151a0 <__exidx_end+0x100f8>
   15050:	00450c0b 	subeq	r0, r5, fp, lsl #24
   15054:	3d0b1c00 	stccc	12, cr1, [fp, #-0]
   15058:	1d000053 	stcne	0, cr0, [r0, #-332]	; 0xfffffeb4
   1505c:	00534b0b 	subseq	r4, r3, fp, lsl #22
   15060:	ba0b1e00 	blt	2dc868 <__ccfg+0x2bc8c0>
   15064:	1f000044 	svcne	0x00000044
   15068:	0053750b 	subseq	r7, r3, fp, lsl #10
   1506c:	c00b2000 	andgt	r2, fp, r0
   15070:	21000050 	qaddcs	r0, r0, r0
   15074:	004e950b 	subeq	r9, lr, fp, lsl #10
   15078:	140b2200 	strne	r2, [fp], #-512	; 0xfffffe00
   1507c:	23000053 	movwcs	r0, #83	; 0x53
   15080:	004db70b 	subeq	fp, sp, fp, lsl #14
   15084:	b90b2400 	stmdblt	fp, {sl, sp}
   15088:	2500004c 	strcs	r0, [r0, #-76]	; 0xffffffb4
   1508c:	0049b50b 	subeq	fp, r9, fp, lsl #10
   15090:	d70b2600 	strle	r2, [fp, -r0, lsl #12]
   15094:	2700004c 	strcs	r0, [r0, -ip, asr #32]
   15098:	004a510b 	subeq	r5, sl, fp, lsl #2
   1509c:	e70b2800 	str	r2, [fp, -r0, lsl #16]
   150a0:	2900004c 	stmdbcs	r0, {r2, r3, r6}
   150a4:	004cf70b 	subeq	pc, ip, fp, lsl #14
   150a8:	1c0b2a00 			; <UNDEFINED> instruction: 0x1c0b2a00
   150ac:	2b00004e 	blcs	151ec <__exidx_end+0x10144>
   150b0:	004c600b 	subeq	r6, ip, fp
   150b4:	cd0b2c00 	stcgt	12, cr2, [fp, #-0]
   150b8:	2d000050 	stccs	0, cr0, [r0, #-320]	; 0xfffffec0
   150bc:	0049f60b 	subeq	pc, r9, fp, lsl #12
   150c0:	0a002e00 	beq	208c8 <__ccfg+0x920>
   150c4:	00004bf2 	strdeq	r4, [r0], -r2
   150c8:	00a20107 	adceq	r0, r2, r7, lsl #2
   150cc:	17040000 	strne	r0, [r4, -r0]
   150d0:	0003d606 	andeq	sp, r3, r6, lsl #12
   150d4:	49200b00 	stmdbmi	r0!, {r8, r9, fp}
   150d8:	0b000000 	bleq	150e0 <__exidx_end+0x10038>
   150dc:	00004553 	andeq	r4, r0, r3, asr r5
   150e0:	55500b01 	ldrbpl	r0, [r0, #-2817]	; 0xfffff4ff
   150e4:	0b020000 	bleq	950ec <__ccfg+0x75144>
   150e8:	000053c0 	andeq	r5, r0, r0, asr #7
   150ec:	49400b03 	stmdbmi	r0, {r0, r1, r8, r9, fp}^
   150f0:	0b040000 	bleq	1150f8 <__ccfg+0xf5150>
   150f4:	00004638 	andeq	r4, r0, r8, lsr r6
   150f8:	49d20b05 	ldmibmi	r2, {r0, r2, r8, r9, fp}^
   150fc:	0b060000 	bleq	195104 <__ccfg+0x17515c>
   15100:	00004930 	andeq	r4, r0, r0, lsr r9
   15104:	526c0b07 	rsbpl	r0, ip, #7168	; 0x1c00
   15108:	0b080000 	bleq	215110 <__ccfg+0x1f5168>
   1510c:	000053a0 	andeq	r5, r0, r0, lsr #7
   15110:	51a30b09 			; <UNDEFINED> instruction: 0x51a30b09
   15114:	0b0a0000 	bleq	29511c <__ccfg+0x275174>
   15118:	0000468b 	andeq	r4, r0, fp, lsl #13
   1511c:	49730b0b 	ldmdbmi	r3!, {r0, r1, r3, r8, r9, fp}^
   15120:	0b0c0000 	bleq	315128 <__ccfg+0x2f5180>
   15124:	000045d4 	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   15128:	55850b0d 	strpl	r0, [r5, #2829]	; 0xb0d
   1512c:	0b0e0000 	bleq	395134 <__ccfg+0x37518c>
   15130:	00004e09 	andeq	r4, r0, r9, lsl #28
   15134:	4b040b0f 	blmi	117d78 <__ccfg+0xf7dd0>
   15138:	0b100000 	bleq	415140 <__ccfg+0x3f5198>
   1513c:	00004e46 	andeq	r4, r0, r6, asr #28
   15140:	54860b11 	strpl	r0, [r6], #2833	; 0xb11
   15144:	0b120000 	bleq	49514c <__ccfg+0x4751a4>
   15148:	00004756 	andeq	r4, r0, r6, asr r7
   1514c:	4b170b13 	blmi	5d7da0 <__ccfg+0x5b7df8>
   15150:	0b140000 	bleq	515158 <__ccfg+0x4f51b0>
   15154:	00004d7a 	andeq	r4, r0, sl, ror sp
   15158:	490b0b15 	stmdbmi	fp, {r0, r2, r4, r8, r9, fp}
   1515c:	0b160000 	bleq	595164 <__ccfg+0x5751bc>
   15160:	00004dc6 	andeq	r4, r0, r6, asr #27
   15164:	4bdc0b17 	blmi	ff717dc8 <_estack+0xdf712dc8>
   15168:	0b180000 	bleq	615170 <__ccfg+0x5f51c8>
   1516c:	00004656 	andeq	r4, r0, r6, asr r6
   15170:	542d0b19 	strtpl	r0, [sp], #-2841	; 0xfffff4e7
   15174:	0b1a0000 	bleq	69517c <__ccfg+0x6751d4>
   15178:	00004d46 	andeq	r4, r0, r6, asr #26
   1517c:	4ad00b1b 	bmi	ff417df0 <_estack+0xdf412df0>
   15180:	0b1c0000 	bleq	715188 <__ccfg+0x6f51e0>
   15184:	000044f5 	strdeq	r4, [r0], -r5
   15188:	4c910b1d 	fldmiaxmi	r1, {d0-d13}	;@ Deprecated
   1518c:	0b1e0000 	bleq	795194 <__ccfg+0x7751ec>
   15190:	00004c7d 	andeq	r4, r0, sp, ror ip
   15194:	51600b1f 	cmnpl	r0, pc, lsl fp
   15198:	0b200000 	bleq	8151a0 <__ccfg+0x7f51f8>
   1519c:	000051eb 	andeq	r5, r0, fp, ror #3
   151a0:	540c0b21 	strpl	r0, [ip], #-2849	; 0xfffff4df
   151a4:	0b220000 	bleq	8951ac <__ccfg+0x875204>
   151a8:	00004a03 	andeq	r4, r0, r3, lsl #20
   151ac:	4fbf0b23 	svcmi	0x00bf0b23
   151b0:	0b240000 	bleq	9151b8 <__ccfg+0x8f5210>
   151b4:	000051b8 			; <UNDEFINED> instruction: 0x000051b8
   151b8:	50dc0b25 	sbcspl	r0, ip, r5, lsr #22
   151bc:	0b260000 	bleq	9951c4 <__ccfg+0x97521c>
   151c0:	000050f0 	strdeq	r5, [r0], -r0
   151c4:	51040b27 	tstpl	r4, r7, lsr #22
   151c8:	0b280000 	bleq	a151d0 <__ccfg+0x9f5228>
   151cc:	00004894 	muleq	r0, r4, r8
   151d0:	47410b29 	strbmi	r0, [r1, -r9, lsr #22]
   151d4:	0b2a0000 	bleq	a951dc <__ccfg+0xa75234>
   151d8:	00004769 	andeq	r4, r0, r9, ror #14
   151dc:	54c50b2b 	strbpl	r0, [r5], #2859	; 0xb2b
   151e0:	0b2c0000 	bleq	b151e8 <__ccfg+0xaf5240>
   151e4:	0000479b 	muleq	r0, fp, r7
   151e8:	52b50b2d 	adcspl	r0, r5, #46080	; 0xb400
   151ec:	0b2e0000 	bleq	b951f4 <__ccfg+0xb7524c>
   151f0:	000052c9 	andeq	r5, r0, r9, asr #5
   151f4:	52dd0b2f 	sbcspl	r0, sp, #48128	; 0xbc00
   151f8:	0b300000 	bleq	c15200 <__ccfg+0xbf5258>
   151fc:	00004985 	andeq	r4, r0, r5, lsl #19
   15200:	495f0b31 	ldmdbmi	pc, {r0, r4, r5, r8, r9, fp}^	; <UNPREDICTABLE>
   15204:	0b320000 	bleq	c9520c <__ccfg+0xc75264>
   15208:	00004ca5 	andeq	r4, r0, r5, lsr #25
   1520c:	4e590b33 	vmovmi.s8	r0, d9[1]
   15210:	0b340000 	bleq	d15218 <__ccfg+0xcf5270>
   15214:	000054d9 	ldrdeq	r5, [r0], -r9
   15218:	449d0b35 	ldrmi	r0, [sp], #2869	; 0xb35
   1521c:	0b360000 	bleq	d95224 <__ccfg+0xd7527c>
   15220:	00004a85 	andeq	r4, r0, r5, lsl #21
   15224:	4a9a0b37 	bmi	fe697f08 <_estack+0xde692f08>
   15228:	0b380000 	bleq	e15230 <__ccfg+0xdf5288>
   1522c:	00004d07 	andeq	r4, r0, r7, lsl #26
   15230:	4d310b39 	fldmdbxmi	r1!, {d0-d27}	;@ Deprecated
   15234:	0b3a0000 	bleq	e9523c <__ccfg+0xe75294>
   15238:	00005502 	andeq	r5, r0, r2, lsl #10
   1523c:	4faa0b3b 	svcmi	0x00aa0b3b
   15240:	0b3c0000 	bleq	f15248 <__ccfg+0xef52a0>
   15244:	00004a28 	andeq	r4, r0, r8, lsr #20
   15248:	45650b3d 	strbmi	r0, [r5, #-2877]!	; 0xfffff4c3
   1524c:	0b3e0000 	bleq	f95254 <__ccfg+0xf752ac>
   15250:	0000451a 	andeq	r4, r0, sl, lsl r5
   15254:	4ea50b3f 	vdup.16	<illegal reg q2.5>, r0
   15258:	0b400000 	bleq	1015260 <__ccfg+0xff52b8>
   1525c:	0000502b 	andeq	r5, r0, fp, lsr #32
   15260:	51420b41 	cmppl	r2, r1, asr #22
   15264:	0b420000 	bleq	109526c <__ccfg+0x10752c4>
   15268:	00004d1c 	andeq	r4, r0, ip, lsl sp
   1526c:	553b0b43 	ldrpl	r0, [fp, #-2883]!	; 0xfffff4bd
   15270:	0b440000 	bleq	1115278 <__ccfg+0x10f52d0>
   15274:	00004fd5 	ldrdeq	r4, [r0], -r5
   15278:	47850b45 	strmi	r0, [r5, r5, asr #22]
   1527c:	0b460000 	bleq	1195284 <__ccfg+0x11752dc>
   15280:	00004ae6 	andeq	r4, r0, r6, ror #21
   15284:	4c2a0b47 			; <UNDEFINED> instruction: 0x4c2a0b47
   15288:	0b480000 	bleq	1215290 <__ccfg+0x11f52e8>
   1528c:	000044d9 	ldrdeq	r4, [r0], -r9
   15290:	45fb0b49 	ldrbmi	r0, [fp, #2889]!	; 0xb49
   15294:	0b4a0000 	bleq	129529c <__ccfg+0x12752f4>
   15298:	00004a3c 	andeq	r4, r0, ip, lsr sl
   1529c:	4d580b4b 	vldrmi	d16, [r8, #-300]	; 0xfffffed4
   152a0:	004c0000 	subeq	r0, ip, r0
   152a4:	80070202 	andhi	r0, r7, r2, lsl #4
   152a8:	0c00000a 	stceq	0, cr0, [r0], {10}
   152ac:	000003f3 	strdeq	r0, [r0], -r3
   152b0:	000003e8 	andeq	r0, r0, r8, ror #7
   152b4:	dd0e000d 	stcle	0, cr0, [lr, #-52]	; 0xffffffcc
   152b8:	05000003 	streq	r0, [r0, #-3]
   152bc:	0003ff04 	andeq	pc, r3, r4, lsl #30
   152c0:	03ed0e00 	mvneq	r0, #0, 28
   152c4:	01020000 	mrseq	r0, (UNDEF: 2)
   152c8:	00099108 	andeq	r9, r9, r8, lsl #2
   152cc:	03f80e00 	mvnseq	r0, #0, 28
   152d0:	c70f0000 	strgt	r0, [pc, -r0]
   152d4:	05000046 	streq	r0, [r0, #-70]	; 0xffffffba
   152d8:	e81a014c 	ldmda	sl, {r2, r3, r6, r8}
   152dc:	0f000003 	svceq	0x00000003
   152e0:	00004ac0 	andeq	r4, r0, r0, asr #21
   152e4:	1a018205 	bne	75b00 <__ccfg+0x55b58>
   152e8:	000003e8 	andeq	r0, r0, r8, ror #7
   152ec:	0003f80c 	andeq	pc, r3, ip, lsl #16
   152f0:	00042900 	andeq	r2, r4, r0, lsl #18
   152f4:	09000d00 	stmdbeq	r0, {r8, sl, fp}
   152f8:	00004cc9 	andeq	r4, r0, r9, asr #25
   152fc:	1e0d2d06 	cdpne	13, 0, cr2, cr13, cr6, {0}
   15300:	09000004 	stmdbeq	r0, {r2}
   15304:	00005385 	andeq	r5, r0, r5, lsl #7
   15308:	f51c3806 			; <UNDEFINED> instruction: 0xf51c3806
   1530c:	0a000001 	beq	15318 <__exidx_end+0x10270>
   15310:	00004999 	muleq	r0, r9, r9
   15314:	00a20107 	adceq	r0, r2, r7, lsl #2
   15318:	3a060000 	bcc	195320 <__ccfg+0x175378>
   1531c:	0004b40e 	andeq	fp, r4, lr, lsl #8
   15320:	44ee0b00 	strbtmi	r0, [lr], #2816	; 0xb00
   15324:	0b000000 	bleq	1532c <__exidx_end+0x10284>
   15328:	00004bc9 	andeq	r4, r0, r9, asr #23
   1532c:	54980b01 	ldrpl	r0, [r8], #2817	; 0xb01
   15330:	0b020000 	bleq	95338 <__ccfg+0x75390>
   15334:	0000545b 	andeq	r5, r0, fp, asr r4
   15338:	4f020b03 	svcmi	0x00020b03
   1533c:	0b040000 	bleq	115344 <__ccfg+0xf539c>
   15340:	00005229 	andeq	r5, r0, r9, lsr #4
   15344:	47120b05 	ldrmi	r0, [r2, -r5, lsl #22]
   15348:	0b060000 	bleq	195350 <__ccfg+0x1753a8>
   1534c:	000046ec 	andeq	r4, r0, ip, ror #13
   15350:	48f70b07 	ldmmi	r7!, {r0, r1, r2, r8, r9, fp}^
   15354:	0b080000 	bleq	21535c <__ccfg+0x1f53b4>
   15358:	00004ddc 	ldrdeq	r4, [r0], -ip
   1535c:	47190b09 	ldrmi	r0, [r9, -r9, lsl #22]
   15360:	0b0a0000 	bleq	295368 <__ccfg+0x2753c0>
   15364:	00004de3 	andeq	r4, r0, r3, ror #27
   15368:	477e0b0b 	ldrbmi	r0, [lr, -fp, lsl #22]!
   1536c:	0b0c0000 	bleq	315374 <__ccfg+0x2f53cc>
   15370:	00004703 	andeq	r4, r0, r3, lsl #14
   15374:	52800b0d 	addpl	r0, r0, #13312	; 0x3400
   15378:	0b0e0000 	bleq	395380 <__ccfg+0x3753d8>
   1537c:	00005049 	andeq	r5, r0, r9, asr #32
   15380:	7804000f 	stmdavc	r4, {r0, r1, r2, r3}
   15384:	06000051 			; <UNDEFINED> instruction: 0x06000051
   15388:	0441013f 	strbeq	r0, [r1], #-319	; 0xfffffec1
   1538c:	0c090000 	stceq	0, cr0, [r9], {-0}
   15390:	06000052 			; <UNDEFINED> instruction: 0x06000052
   15394:	04b40f41 	ldrteq	r0, [r4], #3905	; 0xf41
   15398:	94090000 	strls	r0, [r9], #-0
   1539c:	06000052 			; <UNDEFINED> instruction: 0x06000052
   153a0:	002c0c4a 	eoreq	r0, ip, sl, asr #24
   153a4:	ab090000 	blge	2553ac <__ccfg+0x235404>
   153a8:	06000046 	streq	r0, [r0], -r6, asr #32
   153ac:	002c0c4b 	eoreq	r0, ip, fp, asr #24
   153b0:	59100000 	ldmdbpl	r0, {}	; <UNPREDICTABLE>
   153b4:	09000053 	stmdbeq	r0, {r0, r1, r4, r6}
   153b8:	000052a5 	andeq	r5, r0, r5, lsr #5
   153bc:	f5144c06 			; <UNDEFINED> instruction: 0xf5144c06
   153c0:	05000004 	streq	r0, [r0, #-4]
   153c4:	0004e404 	andeq	lr, r4, r4, lsl #8
   153c8:	93091100 	movwls	r1, #37120	; 0x9100
   153cc:	0600004b 	streq	r0, [r0], -fp, asr #32
   153d0:	05080f4e 	streq	r0, [r8, #-3918]	; 0xfffff0b2
   153d4:	04050000 	streq	r0, [r5], #-0
   153d8:	000004fb 	strdeq	r0, [r0], -fp
   153dc:	00518e12 	subseq	r8, r1, r2, lsl lr
   153e0:	4eef0900 	vfmami.f16	s1, s30, s0	; <UNPREDICTABLE>
   153e4:	52060000 	andpl	r0, r6, #0
   153e8:	00051f0d 	andeq	r1, r5, sp, lsl #30
   153ec:	0e040500 	cfsh32eq	mvfx0, mvfx4, #0
   153f0:	13000005 	movwne	r0, #5
   153f4:	000048dd 	ldrdeq	r4, [r0], -sp
   153f8:	01670634 	cmneq	r7, r4, lsr r6
   153fc:	00055015 	andeq	r5, r5, r5, lsl r0
   15400:	4cd21400 	cfldrdmi	mvd1, [r2], {0}
   15404:	69060000 	stmdbvs	r6, {}	; <UNPREDICTABLE>
   15408:	03ed0f01 	mvneq	r0, #1, 30
   1540c:	14000000 	strne	r0, [r0], #-0
   15410:	000048c1 	andeq	r4, r0, r1, asr #17
   15414:	14016a06 	strne	r6, [r1], #-2566	; 0xfffff5fa
   15418:	00000555 	andeq	r0, r0, r5, asr r5
   1541c:	250e0004 	strcs	r0, [lr, #-4]
   15420:	0c000005 	stceq	0, cr0, [r0], {5}
   15424:	000000c8 	andeq	r0, r0, r8, asr #1
   15428:	00000565 	andeq	r0, r0, r5, ror #10
   1542c:	00003315 	andeq	r3, r0, r5, lsl r3
   15430:	0c002d00 	stceq	13, cr2, [r0], {-0}
   15434:	00000550 	andeq	r0, r0, r0, asr r5
   15438:	00000570 	andeq	r0, r0, r0, ror r5
   1543c:	650e000d 	strvs	r0, [lr, #-13]
   15440:	0f000005 	svceq	0x00000005
   15444:	00004c01 	andeq	r4, r0, r1, lsl #24
   15448:	03016b06 	movweq	r6, #6918	; 0x1b06
   1544c:	00000570 	andeq	r0, r0, r0, ror r5
   15450:	004e290f 	subeq	r2, lr, pc, lsl #18
   15454:	016e0600 	cmneq	lr, r0, lsl #12
   15458:	00002c0c 	andeq	r2, r0, ip, lsl #24
   1545c:	51cc1600 	bicpl	r1, ip, r0, lsl #12
   15460:	01070000 	mrseq	r0, (UNDEF: 7)
   15464:	000000a2 	andeq	r0, r0, r2, lsr #1
   15468:	06018106 	streq	r8, [r1], -r6, lsl #2
   1546c:	00000639 	andeq	r0, r0, r9, lsr r6
   15470:	00458c0b 	subeq	r8, r5, fp, lsl #24
   15474:	980b0000 	stmdals	fp, {}	; <UNPREDICTABLE>
   15478:	02000045 	andeq	r0, r0, #69	; 0x45
   1547c:	0045a40b 	subeq	sl, r5, fp, lsl #8
   15480:	c50b0300 	strgt	r0, [fp, #-768]	; 0xfffffd00
   15484:	03000049 	movweq	r0, #73	; 0x49
   15488:	0045b00b 	subeq	fp, r5, fp
   1548c:	2c0b0400 	cfstrscs	mvf0, [fp], {-0}
   15490:	0400004b 	streq	r0, [r0], #-75	; 0xffffffb5
   15494:	004c120b 	subeq	r1, ip, fp, lsl #4
   15498:	680b0500 	stmdavs	fp, {r8, sl}
   1549c:	0500004b 	streq	r0, [r0, #-75]	; 0xffffffb5
   154a0:	00469c0b 	subeq	r9, r6, fp, lsl #24
   154a4:	bc0b0500 	cfstr32lt	mvfx0, [fp], {-0}
   154a8:	06000045 	streq	r0, [r0], -r5, asr #32
   154ac:	004d900b 	subeq	r9, sp, fp
   154b0:	b30b0600 	movwlt	r0, #46592	; 0xb600
   154b4:	06000048 	streq	r0, [r0], -r8, asr #32
   154b8:	004d9d0b 	subeq	r9, sp, fp, lsl #26
   154bc:	4c0b0600 	stcmi	6, cr0, [fp], {-0}
   154c0:	06000052 			; <UNDEFINED> instruction: 0x06000052
   154c4:	004daa0b 	subeq	sl, sp, fp, lsl #20
   154c8:	ea0b0600 	b	2d6cd0 <__ccfg+0x2b6d28>
   154cc:	0600004d 	streq	r0, [r0], -sp, asr #32
   154d0:	0045c80b 	subeq	ip, r5, fp, lsl #16
   154d4:	d20b0700 	andle	r0, fp, #0, 14
   154d8:	0700004e 	streq	r0, [r0, -lr, asr #32]
   154dc:	004f1f0b 	subeq	r1, pc, fp, lsl #30
   154e0:	870b0700 	strhi	r0, [fp, -r0, lsl #14]
   154e4:	07000052 	smlsdeq	r0, r2, r0, r0
   154e8:	0047b00b 	subeq	fp, r7, fp
   154ec:	020b0700 	andeq	r0, fp, #0, 14
   154f0:	08000050 	stmdaeq	r0, {r4, r6}
   154f4:	0045410b 	subeq	r4, r5, fp, lsl #2
   154f8:	5a0b0800 	bpl	2d7500 <__ccfg+0x2b7558>
   154fc:	08000052 	stmdaeq	r0, {r1, r4, r6}
   15500:	00501e0b 	subseq	r1, r0, fp, lsl #28
   15504:	0f000800 	svceq	0x00000800
   15508:	000054b2 			; <UNDEFINED> instruction: 0x000054b2
   1550c:	1f019f06 	svcne	0x00019f06
   15510:	0000058f 	andeq	r0, r0, pc, lsl #11
   15514:	0050500f 	subseq	r5, r0, pc
   15518:	01a20600 			; <UNDEFINED> instruction: 0x01a20600
   1551c:	00002c0c 	andeq	r2, r0, ip, lsl #24
   15520:	4c1f0f00 	ldcmi	15, cr0, [pc], {-0}
   15524:	a5060000 	strge	r0, [r6, #-0]
   15528:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   1552c:	970f0000 	strls	r0, [pc, -r0]
   15530:	06000055 			; <UNDEFINED> instruction: 0x06000055
   15534:	2c0c01a8 	stfcss	f0, [ip], {168}	; 0xa8
   15538:	0f000000 	svceq	0x00000000
   1553c:	000046bb 			; <UNDEFINED> instruction: 0x000046bb
   15540:	0c01ab06 			; <UNDEFINED> instruction: 0x0c01ab06
   15544:	0000002c 	andeq	r0, r0, ip, lsr #32
   15548:	00505a0f 	subseq	r5, r0, pc, lsl #20
   1554c:	01ae0600 			; <UNDEFINED> instruction: 0x01ae0600
   15550:	00002c0c 	andeq	r2, r0, ip, lsl #24
   15554:	4f090f00 	svcmi	0x00090f00
   15558:	b1060000 	mrslt	r0, (UNDEF: 6)
   1555c:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   15560:	140f0000 	strne	r0, [pc], #-0	; 15568 <__exidx_end+0x104c0>
   15564:	0600004f 	streq	r0, [r0], -pc, asr #32
   15568:	2c0c01b4 	stfcss	f0, [ip], {180}	; 0xb4
   1556c:	0f000000 	svceq	0x00000000
   15570:	00005064 	andeq	r5, r0, r4, rrx
   15574:	0c01b706 	stceq	7, cr11, [r1], {6}
   15578:	0000002c 	andeq	r0, r0, ip, lsr #32
   1557c:	004d6c0f 	subeq	r6, sp, pc, lsl #24
   15580:	01ba0600 			; <UNDEFINED> instruction: 0x01ba0600
   15584:	00002c0c 	andeq	r2, r0, ip, lsl #24
   15588:	54f60f00 	ldrbtpl	r0, [r6], #3840	; 0xf00
   1558c:	bd060000 	stclt	0, cr0, [r6, #-0]
   15590:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   15594:	6e0f0000 	cdpvs	0, 0, cr0, cr15, cr0, {0}
   15598:	06000050 			; <UNDEFINED> instruction: 0x06000050
   1559c:	2c0c01c0 	stfcss	f0, [ip], {192}	; 0xc0
   155a0:	0f000000 	svceq	0x00000000
   155a4:	000055ce 	andeq	r5, r0, lr, asr #11
   155a8:	0c01c306 	stceq	3, cr12, [r1], {6}
   155ac:	0000002c 	andeq	r0, r0, ip, lsr #32
   155b0:	0054620f 	subseq	r6, r4, pc, lsl #4
   155b4:	01c60600 	biceq	r0, r6, r0, lsl #12
   155b8:	00002c0c 	andeq	r2, r0, ip, lsl #24
   155bc:	546e0f00 	strbtpl	r0, [lr], #-3840	; 0xfffff100
   155c0:	c9060000 	stmdbgt	r6, {}	; <UNPREDICTABLE>
   155c4:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   155c8:	7a0f0000 	bvc	3d55d0 <__ccfg+0x3b5628>
   155cc:	06000054 			; <UNDEFINED> instruction: 0x06000054
   155d0:	2c0c01cc 	stfcss	f0, [ip], {204}	; 0xcc
   155d4:	0f000000 	svceq	0x00000000
   155d8:	0000549f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
   155dc:	0c01d006 	stceq	0, cr13, [r1], {6}
   155e0:	0000002c 	andeq	r0, r0, ip, lsr #32
   155e4:	0055c10f 	subseq	ip, r5, pc, lsl #2
   155e8:	01d30600 	bicseq	r0, r3, r0, lsl #12
   155ec:	00002c0c 	andeq	r2, r0, ip, lsl #24
   155f0:	47200f00 	strmi	r0, [r0, -r0, lsl #30]!
   155f4:	d6060000 	strle	r0, [r6], -r0
   155f8:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   155fc:	c90f0000 	stmdbgt	pc, {}	; <UNPREDICTABLE>
   15600:	06000044 	streq	r0, [r0], -r4, asr #32
   15604:	2c0c01d9 	stfcss	f0, [ip], {217}	; 0xd9
   15608:	0f000000 	svceq	0x00000000
   1560c:	000049e5 	andeq	r4, r0, r5, ror #19
   15610:	0c01dc06 	stceq	12, cr13, [r1], {6}
   15614:	0000002c 	andeq	r0, r0, ip, lsr #32
   15618:	0046f30f 	subeq	pc, r6, pc, lsl #6
   1561c:	01df0600 	bicseq	r0, pc, r0, lsl #12
   15620:	00002c0c 	andeq	r2, r0, ip, lsl #24
   15624:	507f0f00 	rsbspl	r0, pc, r0, lsl #30
   15628:	e2060000 	and	r0, r6, #0
   1562c:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   15630:	480f0000 	stmdami	pc, {}	; <UNPREDICTABLE>
   15634:	0600004c 	streq	r0, [r0], -ip, asr #32
   15638:	2c0c01e5 	stfcss	f0, [ip], {229}	; 0xe5
   1563c:	0f000000 	svceq	0x00000000
   15640:	00004e82 	andeq	r4, r0, r2, lsl #29
   15644:	0c01e806 	stceq	8, cr14, [r1], {6}
   15648:	0000002c 	andeq	r0, r0, ip, lsr #32
   1564c:	00538e0f 	subseq	r8, r3, pc, lsl #28
   15650:	01ef0600 	mvneq	r0, r0, lsl #12
   15654:	00002c0c 	andeq	r2, r0, ip, lsl #24
   15658:	55650f00 	strbpl	r0, [r5, #-3840]!	; 0xfffff100
   1565c:	f2060000 	vhadd.s8	d0, d6, d0
   15660:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   15664:	750f0000 	strvc	r0, [pc, #-0]	; 1566c <__exidx_end+0x105c4>
   15668:	06000055 			; <UNDEFINED> instruction: 0x06000055
   1566c:	2c0c01f5 	stfcss	f0, [ip], {245}	; 0xf5
   15670:	0f000000 	svceq	0x00000000
   15674:	000048ca 	andeq	r4, r0, sl, asr #17
   15678:	0c01f806 	stceq	8, cr15, [r1], {6}
   1567c:	0000002c 	andeq	r0, r0, ip, lsr #32
   15680:	0053d60f 	subseq	sp, r3, pc, lsl #12
   15684:	01fb0600 	mvnseq	r0, r0, lsl #12
   15688:	00002c0c 	andeq	r2, r0, ip, lsl #24
   1568c:	4fea0f00 	svcmi	0x00ea0f00
   15690:	fe060000 	cdp2	0, 0, cr0, cr6, cr0, {0}
   15694:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   15698:	5e0f0000 	cdppl	0, 0, cr0, cr15, cr0, {0}
   1569c:	0600004a 	streq	r0, [r0], -sl, asr #32
   156a0:	2c0c0202 	sfmcs	f0, 4, [ip], {2}
   156a4:	0f000000 	svceq	0x00000000
   156a8:	000051de 	ldrdeq	r5, [r0], -lr
   156ac:	0c020a06 			; <UNDEFINED> instruction: 0x0c020a06
   156b0:	0000002c 	andeq	r0, r0, ip, lsr #32
   156b4:	0049510f 	subeq	r5, r9, pc, lsl #2
   156b8:	020d0600 	andeq	r0, sp, #0, 12
   156bc:	00002c0c 	andeq	r2, r0, ip, lsl #24
   156c0:	002c0c00 	eoreq	r0, ip, r0, lsl #24
   156c4:	07fe0000 	ldrbeq	r0, [lr, r0]!
   156c8:	000d0000 	andeq	r0, sp, r0
   156cc:	004b480f 	subeq	r4, fp, pc, lsl #16
   156d0:	03fb0600 	mvnseq	r0, #0, 12
   156d4:	0007f30c 	andeq	pc, r7, ip, lsl #6
   156d8:	04f50c00 	ldrbteq	r0, [r5], #3072	; 0xc00
   156dc:	081b0000 	ldmdaeq	fp, {}	; <UNPREDICTABLE>
   156e0:	33150000 	tstcc	r5, #0
   156e4:	0d000000 	stceq	0, cr0, [r0, #-0]
   156e8:	50ab0f00 	adcpl	r0, fp, r0, lsl #30
   156ec:	84060000 	strhi	r0, [r6], #-0
   156f0:	080b1405 	stmdaeq	fp, {r0, r2, sl, ip}
   156f4:	0a160000 	beq	5956fc <__ccfg+0x575754>
   156f8:	0700004c 	streq	r0, [r0, -ip, asr #32]
   156fc:	0000a201 	andeq	sl, r0, r1, lsl #4
   15700:	058b0600 	streq	r0, [fp, #1536]	; 0x600
   15704:	00086606 	andeq	r6, r8, r6, lsl #12
   15708:	49a70b00 	stmibmi	r7!, {r8, r9, fp}
   1570c:	0b000000 	bleq	15714 <__exidx_end+0x1066c>
   15710:	00004df7 	strdeq	r4, [r0], -r7
   15714:	45770b01 	ldrbmi	r0, [r7, #-2817]!	; 0xfffff4ff
   15718:	0b020000 	bleq	95720 <__ccfg+0x75778>
   1571c:	00005527 	andeq	r5, r0, r7, lsr #10
   15720:	51250b03 			; <UNDEFINED> instruction: 0x51250b03
   15724:	0b040000 	bleq	11572c <__ccfg+0xf5784>
   15728:	00005118 	andeq	r5, r0, r8, lsl r1
   1572c:	467b0b05 	ldrbtmi	r0, [fp], -r5, lsl #22
   15730:	00060000 	andeq	r0, r6, r0
   15734:	0055170f 	subseq	r1, r5, pc, lsl #14
   15738:	05980600 	ldreq	r0, [r8, #1536]	; 0x600
   1573c:	00082815 	andeq	r2, r8, r5, lsl r8
   15740:	53fb0f00 	mvnspl	r0, #0, 30
   15744:	99060000 	stmdbls	r6, {}	; <UNPREDICTABLE>
   15748:	00331107 	eorseq	r1, r3, r7, lsl #2
   1574c:	980f0000 	stmdals	pc, {}	; <UNPREDICTABLE>
   15750:	06000050 			; <UNDEFINED> instruction: 0x06000050
   15754:	2c0c07ae 	stccs	7, cr0, [ip], {174}	; 0xae
   15758:	04000000 	streq	r0, [r0], #-0
   1575c:	0000536d 	andeq	r5, r0, sp, ror #6
   15760:	a2167b07 	andsge	r7, r6, #7168	; 0x1c00
   15764:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
   15768:	0000088d 	andeq	r0, r0, sp, lsl #17
   1576c:	44050202 	strmi	r0, [r5], #-514	; 0xfffffdfe
   15770:	04000008 	streq	r0, [r0], #-8
   15774:	00004611 	andeq	r4, r0, r1, lsl r6
   15778:	2c0f8007 	stccs	0, cr8, [pc], {7}
   1577c:	04000000 	streq	r0, [r0], #-0
   15780:	00004610 	andeq	r4, r0, r0, lsl r6
   15784:	33168107 	tstcc	r6, #-1073741823	; 0xc0000001
   15788:	04000000 	streq	r0, [r0], #-0
   1578c:	00005078 	andeq	r5, r0, r8, ror r0
   15790:	3a0f8407 	bcc	3f67b4 <__ccfg+0x3d680c>
   15794:	02000000 	andeq	r0, r0, #0
   15798:	473b0404 	ldrmi	r0, [fp, -r4, lsl #8]!
   1579c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
   157a0:	00473303 	subeq	r3, r7, r3, lsl #6
   157a4:	04080200 	streq	r0, [r8], #-512	; 0xfffffe00
   157a8:	00003fc0 	andeq	r3, r0, r0, asr #31
   157ac:	33031002 	movwcc	r1, #12290	; 0x3002
   157b0:	13000051 	movwne	r0, #81	; 0x51
   157b4:	0000508f 	andeq	r5, r0, pc, lsl #1
   157b8:	01ed0708 	mvneq	r0, r8, lsl #14
   157bc:	0009100a 	andeq	r1, r9, sl
   157c0:	6f6c1700 	svcvs	0x006c1700
   157c4:	ed070077 	stc	0, cr0, [r7, #-476]	; 0xfffffe24
   157c8:	08a51a01 	stmiaeq	r5!, {r0, r9, fp, ip}
   157cc:	14000000 	strne	r0, [r0], #-0
   157d0:	000045e6 	andeq	r4, r0, r6, ror #11
   157d4:	1f01ed07 	svcne	0x0001ed07
   157d8:	000008a5 	andeq	r0, r0, r5, lsr #17
   157dc:	08180004 	ldmdaeq	r8, {r2}
   157e0:	0901f407 	stmdbeq	r1, {r0, r1, r2, sl, ip, sp, lr, pc}
   157e4:	00000932 	andeq	r0, r0, r2, lsr r9
   157e8:	07007319 	smladeq	r0, r9, r3, r7
   157ec:	e51301f6 	ldr	r0, [r3, #-502]	; 0xfffffe0a
   157f0:	19000008 	stmdbne	r0, {r3}
   157f4:	07006c6c 	streq	r6, [r0, -ip, ror #24]
   157f8:	bd0a01f7 	stflts	f0, [sl, #-988]	; 0xfffffc24
   157fc:	00000008 	andeq	r0, r0, r8
   15800:	00470a1a 	subeq	r0, r7, sl, lsl sl
   15804:	01f80700 	mvnseq	r0, r0, lsl #14
   15808:	00091003 	andeq	r1, r9, r3
   1580c:	09320e00 	ldmdbeq	r2!, {r9, sl, fp}
   15810:	990c0000 	stmdbls	ip, {}	; <UNPREDICTABLE>
   15814:	54000008 	strpl	r0, [r0], #-8
   15818:	15000009 	strne	r0, [r0, #-9]
   1581c:	00000033 	andeq	r0, r0, r3, lsr r0
   15820:	440e00ff 	strmi	r0, [lr], #-255	; 0xffffff01
   15824:	0f000009 	svceq	0x00000009
   15828:	00004f2c 	andeq	r4, r0, ip, lsr #30
   1582c:	1601fc07 	strne	pc, [r1], -r7, lsl #24
   15830:	00000954 	andeq	r0, r0, r4, asr r9
   15834:	0046e20f 	subeq	lr, r6, pc, lsl #4
   15838:	02020700 	andeq	r0, r2, #0, 14
   1583c:	00095416 	andeq	r5, r9, r6, lsl r4
   15840:	45381b00 	ldrmi	r1, [r8, #-2816]!	; 0xfffff500
   15844:	24010000 	strcs	r0, [r1], #-0
   15848:	08bd0102 	popeq	{r1, r8}
   1584c:	42c00000 	sbcmi	r0, r0, #0
   15850:	00540000 	subseq	r0, r4, r0
   15854:	9c010000 	stcls	0, cr0, [r1], {-0}
   15858:	0100751c 	tsteq	r0, ip, lsl r5
   1585c:	bd120224 	lfmlt	f0, 4, [r2, #-144]	; 0xffffff70
   15860:	5b000008 	blpl	15888 <__exidx_end+0x107e0>
   15864:	5700005a 	smlsdpl	r0, sl, r0, r0
   15868:	1c00005a 	stcne	0, cr0, [r0], {90}	; 0x5a
   1586c:	24010076 	strcs	r0, [r1], #-118	; 0xffffff8a
   15870:	08bd1c02 	popeq	{r1, sl, fp, ip}
   15874:	5a870000 	bpl	fe1d587c <_estack+0xde1d087c>
   15878:	5a830000 	bpl	fe0d5880 <_estack+0xde0d0880>
   1587c:	751d0000 	ldrvc	r0, [sp, #-0]
   15880:	26010075 			; <UNDEFINED> instruction: 0x26010075
   15884:	093f1102 	ldmdbeq	pc!, {r1, r8, ip}	; <UNPREDICTABLE>
   15888:	761d0000 	ldrvc	r0, [sp], -r0
   1588c:	27010076 	smlsdxcs	r1, r6, r0, r0
   15890:	093f1102 	ldmdbeq	pc!, {r1, r8, ip}	; <UNPREDICTABLE>
   15894:	771d0000 	ldrvc	r0, [sp, -r0]
   15898:	02280100 	eoreq	r0, r8, #0, 2
   1589c:	0009320b 	andeq	r3, r9, fp, lsl #4
   158a0:	12b81e00 	adcsne	r1, r8, #0, 28
   158a4:	5f1d0000 	svcpl	0x001d0000
   158a8:	0100775f 	tsteq	r0, pc, asr r7
   158ac:	32160228 	andscc	r0, r6, #40, 4	; 0x80000002
   158b0:	1e000009 	cdpne	0, 0, cr0, cr0, cr9, {0}
   158b4:	000012b8 			; <UNDEFINED> instruction: 0x000012b8
   158b8:	0055a21f 	subseq	sl, r5, pc, lsl r2
   158bc:	02280100 	eoreq	r0, r8, #0, 2
   158c0:	0008b116 	andeq	fp, r8, r6, lsl r1
   158c4:	005ab100 	subseq	fp, sl, r0, lsl #2
   158c8:	005aaf00 	subseq	sl, sl, r0, lsl #30
   158cc:	55a71f00 	strpl	r1, [r7, #3840]!	; 0xf00
   158d0:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
   158d4:	08b11602 	ldmeq	r1!, {r1, r9, sl, ip}
   158d8:	5aca0000 	bpl	ff2958e0 <_estack+0xdf2908e0>
   158dc:	5ac40000 	bpl	ff1158e4 <_estack+0xdf1108e4>
   158e0:	ac1f0000 	ldcge	0, cr0, [pc], {-0}
   158e4:	01000055 	qaddeq	r0, r5, r0
   158e8:	b1160228 	tstlt	r6, r8, lsr #4
   158ec:	fc000008 	stc2	0, cr0, [r0], {8}
   158f0:	f800005a 			; <UNDEFINED> instruction: 0xf800005a
   158f4:	1f00005a 	svcne	0x0000005a
   158f8:	000055b1 			; <UNDEFINED> instruction: 0x000055b1
   158fc:	16022801 	strne	r2, [r2], -r1, lsl #16
   15900:	000008b1 			; <UNDEFINED> instruction: 0x000008b1
   15904:	00005b27 	andeq	r5, r0, r7, lsr #22
   15908:	00005b25 	andeq	r5, r0, r5, lsr #22
   1590c:	0053d11f 	subseq	sp, r3, pc, lsl r1
   15910:	02280100 	eoreq	r0, r8, #0, 2
   15914:	0008b116 	andeq	fp, r8, r6, lsl r1
   15918:	005b3e00 	subseq	r3, fp, r0, lsl #28
   1591c:	005b3a00 	subseq	r3, fp, r0, lsl #20
   15920:	54c01f00 	strbpl	r1, [r0], #3840	; 0xf00
   15924:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
   15928:	08b11602 	ldmeq	r1!, {r1, r9, sl, ip}
   1592c:	5b660000 	blpl	1995934 <__ccfg+0x197598c>
   15930:	5b620000 	blpl	1895938 <__ccfg+0x1875990>
   15934:	b31f0000 	tstlt	pc, #0
   15938:	01000053 	qaddeq	r0, r3, r0
   1593c:	b1160228 	tstlt	r6, r8, lsr #4
   15940:	8e000008 	cdphi	0, 0, cr0, cr0, cr8, {0}
   15944:	8a00005b 	bhi	15ab8 <__exidx_end+0x10a10>
   15948:	1f00005b 	svcne	0x0000005b
   1594c:	000054ad 	andeq	r5, r0, sp, lsr #9
   15950:	16022801 	strne	r2, [r2], -r1, lsl #16
   15954:	000008b1 			; <UNDEFINED> instruction: 0x000008b1
   15958:	00005bb4 			; <UNDEFINED> instruction: 0x00005bb4
   1595c:	00005bb0 			; <UNDEFINED> instruction: 0x00005bb0
   15960:	00000000 	andeq	r0, r0, r0
   15964:	00000a0e 	andeq	r0, r0, lr, lsl #20
   15968:	4df30004 	ldclmi	0, cr0, [r3, #16]!
   1596c:	01040000 	mrseq	r0, (UNDEF: 4)
   15970:	0000563a 	andeq	r5, r0, sl, lsr r6
   15974:	0056cc0c 	subseq	ip, r6, ip, lsl #24
   15978:	0055da00 	subseq	sp, r5, r0, lsl #20
   1597c:	00431400 	subeq	r1, r3, r0, lsl #8
   15980:	00001000 	andeq	r1, r0, r0
   15984:	00920a00 	addseq	r0, r2, r0, lsl #20
   15988:	06010200 	streq	r0, [r1], -r0, lsl #4
   1598c:	0000098a 	andeq	r0, r0, sl, lsl #19
   15990:	88080102 	stmdahi	r8, {r1, r8}
   15994:	02000009 	andeq	r0, r0, #9
   15998:	08440502 	stmdaeq	r4, {r1, r8, sl}^
   1599c:	02020000 	andeq	r0, r2, #0
   159a0:	000a8007 	andeq	r8, sl, r7
   159a4:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
   159a8:	00000637 	andeq	r0, r0, r7, lsr r6
   159ac:	cf070402 	svcgt	0x00070402
   159b0:	02000003 	andeq	r0, r0, #3
   159b4:	06320508 	ldrteq	r0, [r2], -r8, lsl #10
   159b8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
   159bc:	0003ca07 	andeq	ip, r3, r7, lsl #20
   159c0:	081b0300 	ldmdaeq	fp, {r8, r9}
   159c4:	c8020000 	stmdagt	r2, {}	; <UNPREDICTABLE>
   159c8:	00004f1e 	andeq	r4, r0, lr, lsl pc
   159cc:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
   159d0:	00746e69 	rsbseq	r6, r4, r9, ror #28
   159d4:	d4070402 	strle	r0, [r7], #-1026	; 0xfffffbfe
   159d8:	02000003 	andeq	r0, r0, #3
   159dc:	3fbb0408 	svccc	0x00bb0408
   159e0:	42050000 	andmi	r0, r5, #0
   159e4:	03000009 	movweq	r0, #9
   159e8:	70170165 	andsvc	r0, r7, r5, ror #2
   159ec:	03000000 	movweq	r0, #0
   159f0:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
   159f4:	410e2e04 	tstmi	lr, r4, lsl #28
   159f8:	03000000 	movweq	r0, #0
   159fc:	000002a3 	andeq	r0, r0, r3, lsr #5
   15a00:	410e7404 	tstmi	lr, r4, lsl #8
   15a04:	06000000 	streq	r0, [r0], -r0
   15a08:	03a50404 			; <UNDEFINED> instruction: 0x03a50404
   15a0c:	000000c5 	andeq	r0, r0, r5, asr #1
   15a10:	0005c807 	andeq	ip, r5, r7, lsl #16
   15a14:	0ca70400 	cfstrseq	mvf0, [r7]
   15a18:	0000007e 	andeq	r0, r0, lr, ror r0
   15a1c:	00088b07 	andeq	r8, r8, r7, lsl #22
   15a20:	13a80400 			; <UNDEFINED> instruction: 0x13a80400
   15a24:	000000c5 	andeq	r0, r0, r5, asr #1
   15a28:	002c0800 	eoreq	r0, ip, r0, lsl #16
   15a2c:	00d50000 	sbcseq	r0, r5, r0
   15a30:	70090000 	andvc	r0, r9, r0
   15a34:	03000000 	movweq	r0, #0
   15a38:	04080a00 	streq	r0, [r8], #-2560	; 0xfffff600
   15a3c:	00f909a2 	rscseq	r0, r9, r2, lsr #19
   15a40:	5e0b0000 	cdppl	0, 0, cr0, cr11, cr0, {0}
   15a44:	04000003 	streq	r0, [r0], #-3
   15a48:	006907a4 	rsbeq	r0, r9, r4, lsr #15
   15a4c:	0b000000 	bleq	15a54 <__exidx_end+0x109ac>
   15a50:	000004eb 	andeq	r0, r0, fp, ror #9
   15a54:	a305a904 	movwge	sl, #22788	; 0x5904
   15a58:	04000000 	streq	r0, [r0], #-0
   15a5c:	07350300 	ldreq	r0, [r5, -r0, lsl #6]!
   15a60:	aa040000 	bge	115a68 <__ccfg+0xf5ac0>
   15a64:	0000d503 	andeq	sp, r0, r3, lsl #10
   15a68:	03040c00 	movweq	r0, #19456	; 0x4c00
   15a6c:	000042ad 	andeq	r4, r0, sp, lsr #5
   15a70:	410fd204 	tstmi	pc, r4, lsl #4
   15a74:	03000000 	movweq	r0, #0
   15a78:	000042af 	andeq	r4, r0, pc, lsr #5
   15a7c:	07172505 	ldreq	r2, [r7, -r5, lsl #10]
   15a80:	03000001 	movweq	r0, #1
   15a84:	000005db 	ldrdeq	r0, [r0], -fp
   15a88:	5d122a05 	vldrpl	s4, [r2, #-20]	; 0xffffffec
   15a8c:	0d000000 	stceq	0, cr0, [r0, #-0]
   15a90:	000043e8 	andeq	r4, r0, r8, ror #7
   15a94:	08360510 	ldmdaeq	r6!, {r4, r8, sl}
   15a98:	00000153 	andeq	r0, r0, r3, asr r1
   15a9c:	0042e80b 	subeq	lr, r2, fp, lsl #16
   15aa0:	0a370500 	beq	dd6ea8 <__ccfg+0xdb6f00>
   15aa4:	0000011f 	andeq	r0, r0, pc, lsl r1
   15aa8:	434b0b00 	movtmi	r0, #47872	; 0xbb00
   15aac:	38050000 	stmdacc	r5, {}	; <UNPREDICTABLE>
   15ab0:	0001130e 	andeq	r1, r1, lr, lsl #6
   15ab4:	0e000800 	cdpeq	8, 0, cr0, cr0, cr0, {0}
   15ab8:	00015904 	andeq	r5, r1, r4, lsl #18
   15abc:	08010200 	stmdaeq	r1, {r9}
   15ac0:	00000991 	muleq	r0, r1, r9
   15ac4:	0001590f 	andeq	r5, r1, pc, lsl #18
   15ac8:	068a0300 	streq	r0, [sl], r0, lsl #6
   15acc:	16060000 	strne	r0, [r6], -r0
   15ad0:	00004819 	andeq	r4, r0, r9, lsl r8
   15ad4:	02160300 	andseq	r0, r6, #0, 6
   15ad8:	0c070000 	stceq	0, cr0, [r7], {-0}
   15adc:	0000690d 	andeq	r6, r0, sp, lsl #18
   15ae0:	05960300 	ldreq	r0, [r6, #768]	; 0x300
   15ae4:	23060000 	movwcs	r0, #24576	; 0x6000
   15ae8:	0001711b 	andeq	r7, r1, fp, lsl r1
   15aec:	02e30d00 	rsceq	r0, r3, #0, 26
   15af0:	06180000 	ldreq	r0, [r8], -r0
   15af4:	01e30834 	mvneq	r0, r4, lsr r8
   15af8:	160b0000 	strne	r0, [fp], -r0
   15afc:	0600000b 	streq	r0, [r0], -fp
   15b00:	01e31336 	mvneq	r1, r6, lsr r3
   15b04:	10000000 	andne	r0, r0, r0
   15b08:	06006b5f 			; <UNDEFINED> instruction: 0x06006b5f
   15b0c:	00690737 	rsbeq	r0, r9, r7, lsr r7
   15b10:	0b040000 	bleq	115b18 <__ccfg+0xf5b70>
   15b14:	000008f1 	strdeq	r0, [r0], -r1
   15b18:	690b3706 	stmdbvs	fp, {r1, r2, r8, r9, sl, ip, sp}
   15b1c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   15b20:	003f860b 	eorseq	r8, pc, fp, lsl #12
   15b24:	14370600 	ldrtne	r0, [r7], #-1536	; 0xfffffa00
   15b28:	00000069 	andeq	r0, r0, r9, rrx
   15b2c:	03f60b0c 	mvnseq	r0, #12, 22	; 0x3000
   15b30:	37060000 	strcc	r0, [r6, -r0]
   15b34:	0000691b 	andeq	r6, r0, fp, lsl r9
   15b38:	5f101000 	svcpl	0x00101000
   15b3c:	38060078 	stmdacc	r6, {r3, r4, r5, r6}
   15b40:	0001e90b 	andeq	lr, r1, fp, lsl #18
   15b44:	0e001400 	cfcpyseq	mvf1, mvf0
   15b48:	00018904 	andeq	r8, r1, r4, lsl #18
   15b4c:	01650800 	cmneq	r5, r0, lsl #16
   15b50:	01f90000 	mvnseq	r0, r0
   15b54:	70090000 	andvc	r0, r9, r0
   15b58:	00000000 	andeq	r0, r0, r0
   15b5c:	090c0d00 	stmdbeq	ip, {r8, sl, fp}
   15b60:	06240000 	strteq	r0, [r4], -r0
   15b64:	027c083c 	rsbseq	r0, ip, #60, 16	; 0x3c0000
   15b68:	860b0000 	strhi	r0, [fp], -r0
   15b6c:	06000004 	streq	r0, [r0], -r4
   15b70:	0069093e 	rsbeq	r0, r9, lr, lsr r9
   15b74:	0b000000 	bleq	15b7c <__exidx_end+0x10ad4>
   15b78:	00000390 	muleq	r0, r0, r3
   15b7c:	69093f06 	stmdbvs	r9, {r1, r2, r8, r9, sl, fp, ip, sp}
   15b80:	04000000 	streq	r0, [r0], #-0
   15b84:	0003390b 	andeq	r3, r3, fp, lsl #18
   15b88:	09400600 	stmdbeq	r0, {r9, sl}^
   15b8c:	00000069 	andeq	r0, r0, r9, rrx
   15b90:	054c0b08 	strbeq	r0, [ip, #-2824]	; 0xfffff4f8
   15b94:	41060000 	mrsmi	r0, (UNDEF: 6)
   15b98:	00006909 	andeq	r6, r0, r9, lsl #18
   15b9c:	be0b0c00 	cdplt	12, 0, cr0, cr11, cr0, {0}
   15ba0:	06000007 	streq	r0, [r0], -r7
   15ba4:	00690942 	rsbeq	r0, r9, r2, asr #18
   15ba8:	0b100000 	bleq	415bb0 <__ccfg+0x3f5c08>
   15bac:	000008a5 	andeq	r0, r0, r5, lsr #17
   15bb0:	69094306 	stmdbvs	r9, {r1, r2, r8, r9, lr}
   15bb4:	14000000 	strne	r0, [r0], #-0
   15bb8:	0002fe0b 	andeq	pc, r2, fp, lsl #28
   15bbc:	09440600 	stmdbeq	r4, {r9, sl}^
   15bc0:	00000069 	andeq	r0, r0, r9, rrx
   15bc4:	048f0b18 	streq	r0, [pc], #2840	; 15bcc <__exidx_end+0x10b24>
   15bc8:	45060000 	strmi	r0, [r6, #-0]
   15bcc:	00006909 	andeq	r6, r0, r9, lsl #18
   15bd0:	530b1c00 	movwpl	r1, #48128	; 0xbc00
   15bd4:	06000007 	streq	r0, [r0], -r7
   15bd8:	00690946 	rsbeq	r0, r9, r6, asr #18
   15bdc:	00200000 	eoreq	r0, r0, r0
   15be0:	00006111 	andeq	r6, r0, r1, lsl r1
   15be4:	06010800 	streq	r0, [r1], -r0, lsl #16
   15be8:	02c1084f 	sbceq	r0, r1, #5177344	; 0x4f0000
   15bec:	4a0b0000 	bmi	2d5bf4 <__ccfg+0x2b5c4c>
   15bf0:	0600000a 	streq	r0, [r0], -sl
   15bf4:	02c10a50 	sbceq	r0, r1, #80, 20	; 0x50000
   15bf8:	0b000000 	bleq	15c00 <__exidx_end+0x10b58>
   15bfc:	0000096c 	andeq	r0, r0, ip, ror #18
   15c00:	c1095106 	tstgt	r9, r6, lsl #2
   15c04:	80000002 	andhi	r0, r0, r2
   15c08:	000ab312 	andeq	fp, sl, r2, lsl r3
   15c0c:	0a530600 	beq	14d7414 <__ccfg+0x14b746c>
   15c10:	00000165 	andeq	r0, r0, r5, ror #2
   15c14:	01120100 	tsteq	r2, r0, lsl #2
   15c18:	0600000b 	streq	r0, [r0], -fp
   15c1c:	01650a56 	cmneq	r5, r6, asr sl
   15c20:	01040000 	mrseq	r0, (UNDEF: 4)
   15c24:	01050800 	tsteq	r5, r0, lsl #16
   15c28:	02d10000 	sbcseq	r0, r1, #0
   15c2c:	70090000 	andvc	r0, r9, r0
   15c30:	1f000000 	svcne	0x00000000
   15c34:	082b1100 	stmdaeq	fp!, {r8, ip}
   15c38:	01900000 	orrseq	r0, r0, r0
   15c3c:	14086206 	strne	r6, [r8], #-518	; 0xfffffdfa
   15c40:	0b000003 	bleq	15c54 <__exidx_end+0x10bac>
   15c44:	00000b16 	andeq	r0, r0, r6, lsl fp
   15c48:	14126306 	ldrne	r6, [r2], #-774	; 0xfffffcfa
   15c4c:	00000003 	andeq	r0, r0, r3
   15c50:	00049e0b 	andeq	r9, r4, fp, lsl #28
   15c54:	06640600 	strbteq	r0, [r4], -r0, lsl #12
   15c58:	00000069 	andeq	r0, r0, r9, rrx
   15c5c:	02ab0b04 	adceq	r0, fp, #4, 22	; 0x1000
   15c60:	66060000 	strvs	r0, [r6], -r0
   15c64:	00031a09 	andeq	r1, r3, r9, lsl #20
   15c68:	610b0800 	tstvs	fp, r0, lsl #16
   15c6c:	06000000 	streq	r0, [r0], -r0
   15c70:	027c1e67 	rsbseq	r1, ip, #1648	; 0x670
   15c74:	00880000 	addeq	r0, r8, r0
   15c78:	02d1040e 	sbcseq	r0, r1, #234881024	; 0xe000000
   15c7c:	2a080000 	bcs	215c84 <__ccfg+0x1f5cdc>
   15c80:	2a000003 	bcs	15c94 <__exidx_end+0x10bec>
   15c84:	09000003 	stmdbeq	r0, {r0, r1}
   15c88:	00000070 	andeq	r0, r0, r0, ror r0
   15c8c:	040e001f 	streq	r0, [lr], #-31	; 0xffffffe1
   15c90:	00000330 	andeq	r0, r0, r0, lsr r3
   15c94:	0a040d13 	beq	1190e8 <__ccfg+0xf9140>
   15c98:	06080000 	streq	r0, [r8], -r0
   15c9c:	0359087a 	cmpeq	r9, #7995392	; 0x7a0000
   15ca0:	4e0b0000 	cdpmi	0, 0, cr0, cr11, cr0, {0}
   15ca4:	06000006 	streq	r0, [r0], -r6
   15ca8:	0359117b 	cmpeq	r9, #-1073741794	; 0xc000001e
   15cac:	0b000000 	bleq	15cb4 <__exidx_end+0x10c0c>
   15cb0:	000019a5 	andeq	r1, r0, r5, lsr #19
   15cb4:	69067c06 	stmdbvs	r6, {r1, r2, sl, fp, ip, sp, lr}
   15cb8:	04000000 	streq	r0, [r0], #-0
   15cbc:	2c040e00 	stccs	14, cr0, [r4], {-0}
   15cc0:	0d000000 	stceq	0, cr0, [r0, #-0]
   15cc4:	000003ee 	andeq	r0, r0, lr, ror #7
   15cc8:	08ba0668 	ldmeq	sl!, {r3, r5, r6, r9, sl}
   15ccc:	000004a2 	andeq	r0, r0, r2, lsr #9
   15cd0:	00705f10 	rsbseq	r5, r0, r0, lsl pc
   15cd4:	5912bb06 	ldmdbpl	r2, {r1, r2, r8, r9, fp, ip, sp, pc}
   15cd8:	00000003 	andeq	r0, r0, r3
   15cdc:	00725f10 	rsbseq	r5, r2, r0, lsl pc
   15ce0:	6907bc06 	stmdbvs	r7, {r1, r2, sl, fp, ip, sp, pc}
   15ce4:	04000000 	streq	r0, [r0], #-0
   15ce8:	00775f10 	rsbseq	r5, r7, r0, lsl pc
   15cec:	6907bd06 	stmdbvs	r7, {r1, r2, r8, sl, fp, ip, sp, pc}
   15cf0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   15cf4:	0001f30b 	andeq	pc, r1, fp, lsl #6
   15cf8:	09be0600 	ldmibeq	lr!, {r9, sl}
   15cfc:	00000033 	andeq	r0, r0, r3, lsr r0
   15d00:	06bf0b0c 	ldrteq	r0, [pc], ip, lsl #22
   15d04:	bf060000 	svclt	0x00060000
   15d08:	00003309 	andeq	r3, r0, r9, lsl #6
   15d0c:	5f100e00 	svcpl	0x00100e00
   15d10:	06006662 	streq	r6, [r0], -r2, ror #12
   15d14:	033111c0 	teqeq	r1, #192, 2	; 0x30
   15d18:	0b100000 	bleq	415d20 <__ccfg+0x3f5d78>
   15d1c:	000001ea 	andeq	r0, r0, sl, ror #3
   15d20:	6907c106 	stmdbvs	r7, {r1, r2, r8, lr, pc}
   15d24:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   15d28:	0002b00b 	andeq	fp, r2, fp
   15d2c:	0ac80600 	beq	ff217534 <_estack+0xdf212534>
   15d30:	00000105 	andeq	r0, r0, r5, lsl #2
   15d34:	19350b1c 	ldmdbne	r5!, {r2, r3, r4, r8, r9, fp}
   15d38:	ca060000 	bgt	195d40 <__ccfg+0x175d98>
   15d3c:	0006141d 	andeq	r1, r6, sp, lsl r4
   15d40:	fc0b2000 	stc2	0, cr2, [fp], {-0}
   15d44:	06000018 			; <UNDEFINED> instruction: 0x06000018
   15d48:	06431dcc 	strbeq	r1, [r3], -ip, asr #27
   15d4c:	0b240000 	bleq	915d54 <__ccfg+0x8f5dac>
   15d50:	00000b27 	andeq	r0, r0, r7, lsr #22
   15d54:	670dcf06 	strvs	ip, [sp, -r6, lsl #30]
   15d58:	28000006 	stmdacs	r0, {r1, r2}
   15d5c:	0018ea0b 	andseq	lr, r8, fp, lsl #20
   15d60:	09d00600 	ldmibeq	r0, {r9, sl}^
   15d64:	00000681 	andeq	r0, r0, r1, lsl #13
   15d68:	755f102c 	ldrbvc	r1, [pc, #-44]	; 15d44 <__exidx_end+0x10c9c>
   15d6c:	d3060062 	movwle	r0, #24674	; 0x6062
   15d70:	00033111 	andeq	r3, r3, r1, lsl r1
   15d74:	5f103000 	svcpl	0x00103000
   15d78:	06007075 			; <UNDEFINED> instruction: 0x06007075
   15d7c:	035912d4 	cmpeq	r9, #212, 4	; 0x4000000d
   15d80:	10380000 	eorsne	r0, r8, r0
   15d84:	0072755f 	rsbseq	r7, r2, pc, asr r5
   15d88:	6907d506 	stmdbvs	r7, {r1, r2, r8, sl, ip, lr, pc}
   15d8c:	3c000000 	stccc	0, cr0, [r0], {-0}
   15d90:	000b3e0b 	andeq	r3, fp, fp, lsl #28
   15d94:	11d80600 	bicsne	r0, r8, r0, lsl #12
   15d98:	00000687 	andeq	r0, r0, r7, lsl #13
   15d9c:	0acd0b40 	beq	ff358aa4 <_estack+0xdf353aa4>
   15da0:	d9060000 	stmdble	r6, {}	; <UNPREDICTABLE>
   15da4:	00069711 	andeq	r9, r6, r1, lsl r7
   15da8:	5f104300 	svcpl	0x00104300
   15dac:	0600626c 	streq	r6, [r0], -ip, ror #4
   15db0:	033111dc 	teqeq	r1, #220, 2	; 0x37
   15db4:	0b440000 	bleq	1115dbc <__ccfg+0x10f5e14>
   15db8:	00000903 	andeq	r0, r0, r3, lsl #18
   15dbc:	6907df06 	stmdbvs	r7, {r1, r2, r8, r9, sl, fp, ip, lr, pc}
   15dc0:	4c000000 	stcmi	0, cr0, [r0], {-0}
   15dc4:	00043b0b 	andeq	r3, r4, fp, lsl #22
   15dc8:	0ae00600 	beq	ff8175d0 <_estack+0xdf8125d0>
   15dcc:	0000008b 	andeq	r0, r0, fp, lsl #1
   15dd0:	44040b50 	strmi	r0, [r4], #-2896	; 0xfffff4b0
   15dd4:	e3060000 	movw	r0, #24576	; 0x6000
   15dd8:	0004c012 	andeq	ip, r4, r2, lsl r0
   15ddc:	1b0b5400 	blne	2eade4 <__ccfg+0x2cae3c>
   15de0:	06000009 	streq	r0, [r0], -r9
   15de4:	017d0ce7 	cmneq	sp, r7, ror #25
   15de8:	0b580000 	bleq	1615df0 <__ccfg+0x15f5e48>
   15dec:	00000833 	andeq	r0, r0, r3, lsr r8
   15df0:	f90ee906 			; <UNDEFINED> instruction: 0xf90ee906
   15df4:	5c000000 	stcpl	0, cr0, [r0], {-0}
   15df8:	000af90b 	andeq	pc, sl, fp, lsl #18
   15dfc:	09ea0600 	stmibeq	sl!, {r9, sl}^
   15e00:	00000069 	andeq	r0, r0, r9, rrx
   15e04:	69140064 	ldmdbvs	r4, {r2, r5, r6}
   15e08:	c0000000 	andgt	r0, r0, r0
   15e0c:	15000004 	strne	r0, [r0, #-4]
   15e10:	000004c0 	andeq	r0, r0, r0, asr #9
   15e14:	00010515 	andeq	r0, r1, r5, lsl r5
   15e18:	01531500 	cmpeq	r3, r0, lsl #10
   15e1c:	69150000 	ldmdbvs	r5, {}	; <UNPREDICTABLE>
   15e20:	00000000 	andeq	r0, r0, r0
   15e24:	04cb040e 	strbeq	r0, [fp], #1038	; 0x40e
   15e28:	c00f0000 	andgt	r0, pc, r0
   15e2c:	16000004 	strne	r0, [r0], -r4
   15e30:	00004442 	andeq	r4, r0, r2, asr #8
   15e34:	65060428 	strvs	r0, [r6, #-1064]	; 0xfffffbd8
   15e38:	06140802 	ldreq	r0, [r4], -r2, lsl #16
   15e3c:	84170000 	ldrhi	r0, [r7], #-0
   15e40:	06000007 	streq	r0, [r0], -r7
   15e44:	69070267 	stmdbvs	r7, {r0, r1, r2, r5, r6, r9}
   15e48:	00000000 	andeq	r0, r0, r0
   15e4c:	00061c17 	andeq	r1, r6, r7, lsl ip
   15e50:	026c0600 	rsbeq	r0, ip, #0, 12
   15e54:	0006f30b 	andeq	pc, r6, fp, lsl #6
   15e58:	8d170400 	cfldrshi	mvf0, [r7, #-0]
   15e5c:	06000002 	streq	r0, [r0], -r2
   15e60:	f314026c 	vhsub.u16	q0, q2, q14
   15e64:	08000006 	stmdaeq	r0, {r1, r2}
   15e68:	000b2d17 	andeq	r2, fp, r7, lsl sp
   15e6c:	026c0600 	rsbeq	r0, ip, #0, 12
   15e70:	0006f31e 	andeq	pc, r6, lr, lsl r3	; <UNPREDICTABLE>
   15e74:	99170c00 	ldmdbls	r7, {sl, fp}
   15e78:	06000004 	streq	r0, [r0], -r4
   15e7c:	6908026e 	stmdbvs	r8, {r1, r2, r3, r5, r6, r9}
   15e80:	10000000 	andne	r0, r0, r0
   15e84:	00044b17 	andeq	r4, r4, r7, lsl fp
   15e88:	026f0600 	rsbeq	r0, pc, #0, 12
   15e8c:	0008f308 	andeq	pc, r8, r8, lsl #6
   15e90:	e0171400 	ands	r1, r7, r0, lsl #8
   15e94:	0600000a 	streq	r0, [r0], -sl
   15e98:	69070272 	stmdbvs	r7, {r1, r4, r5, r6, r9}
   15e9c:	30000000 	andcc	r0, r0, r0
   15ea0:	003e3217 	eorseq	r3, lr, r7, lsl r2
   15ea4:	02730600 	rsbseq	r0, r3, #0, 12
   15ea8:	00090816 	andeq	r0, r9, r6, lsl r8
   15eac:	e2173400 	ands	r3, r7, #0, 8
   15eb0:	06000005 	streq	r0, [r0], -r5
   15eb4:	69070275 	stmdbvs	r7, {r0, r2, r4, r5, r6, r9}
   15eb8:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
   15ebc:	00072b17 	andeq	r2, r7, r7, lsl fp
   15ec0:	02770600 	rsbseq	r0, r7, #0, 12
   15ec4:	0009190a 	andeq	r1, r9, sl, lsl #18
   15ec8:	08173c00 	ldmdaeq	r7, {sl, fp, ip, sp}
   15ecc:	06000003 	streq	r0, [r0], -r3
   15ed0:	e313027a 	tst	r3, #-1610612729	; 0xa0000007
   15ed4:	40000001 	andmi	r0, r0, r1
   15ed8:	0003b417 	andeq	fp, r3, r7, lsl r4
   15edc:	027b0600 	rsbseq	r0, fp, #0, 12
   15ee0:	00006907 	andeq	r6, r0, r7, lsl #18
   15ee4:	f3174400 	vshl.u16	d4, d0, d7
   15ee8:	06000004 	streq	r0, [r0], -r4
   15eec:	e313027c 	tst	r3, #124, 4	; 0xc0000007
   15ef0:	48000001 	stmdami	r0, {r0}
   15ef4:	00065417 	andeq	r5, r6, r7, lsl r4
   15ef8:	027d0600 	rsbseq	r0, sp, #0, 12
   15efc:	00091f14 	andeq	r1, r9, r4, lsl pc
   15f00:	e9174c00 	ldmdb	r7, {sl, fp, lr}
   15f04:	06000008 	streq	r0, [r0], -r8
   15f08:	69070280 	stmdbvs	r7, {r7, r9}
   15f0c:	50000000 	andpl	r0, r0, r0
   15f10:	00098017 	andeq	r8, r9, r7, lsl r0
   15f14:	02810600 	addeq	r0, r1, #0, 12
   15f18:	00015309 	andeq	r5, r1, r9, lsl #6
   15f1c:	9a175400 	bls	5eaf24 <__ccfg+0x5caf7c>
   15f20:	06000009 	streq	r0, [r0], -r9
   15f24:	ce0702a4 	cdpgt	2, 0, cr0, cr7, cr4, {5}
   15f28:	58000008 	stmdapl	r0, {r3}
   15f2c:	00082b18 	andeq	r2, r8, r8, lsl fp
   15f30:	02a80600 	adceq	r0, r8, #0, 12
   15f34:	00031413 	andeq	r1, r3, r3, lsl r4
   15f38:	18014800 	stmdane	r1, {fp, lr}
   15f3c:	0000056f 	andeq	r0, r0, pc, ror #10
   15f40:	1202a906 	andne	sl, r2, #98304	; 0x18000
   15f44:	000002d1 	ldrdeq	r0, [r0], -r1
   15f48:	5618014c 	ldrpl	r0, [r8], -ip, asr #2
   15f4c:	06000005 	streq	r0, [r0], -r5
   15f50:	300c02ad 	andcc	r0, ip, sp, lsr #5
   15f54:	dc000009 	stcle	0, cr0, [r0], {9}
   15f58:	0a271802 	beq	9dbf68 <__ccfg+0x9bbfc0>
   15f5c:	b2060000 	andlt	r0, r6, #0
   15f60:	06b41002 	ldrteq	r1, [r4], r2
   15f64:	02e00000 	rsceq	r0, r0, #0
   15f68:	00086c18 	andeq	r6, r8, r8, lsl ip
   15f6c:	02b40600 	adcseq	r0, r4, #0, 12
   15f70:	00093c0a 	andeq	r3, r9, sl, lsl #24
   15f74:	0002ec00 	andeq	lr, r2, r0, lsl #24
   15f78:	04a2040e 	strteq	r0, [r2], #1038	; 0x40e
   15f7c:	69140000 	ldmdbvs	r4, {}	; <UNPREDICTABLE>
   15f80:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
   15f84:	15000006 	strne	r0, [r0, #-6]
   15f88:	000004c0 	andeq	r0, r0, r0, asr #9
   15f8c:	00010515 	andeq	r0, r1, r5, lsl r5
   15f90:	06381500 	ldrteq	r1, [r8], -r0, lsl #10
   15f94:	69150000 	ldmdbvs	r5, {}	; <UNPREDICTABLE>
   15f98:	00000000 	andeq	r0, r0, r0
   15f9c:	0160040e 	cmneq	r0, lr, lsl #8
   15fa0:	380f0000 	stmdacc	pc, {}	; <UNPREDICTABLE>
   15fa4:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
   15fa8:	00061a04 	andeq	r1, r6, r4, lsl #20
   15fac:	00971400 	addseq	r1, r7, r0, lsl #8
   15fb0:	06670000 	strbteq	r0, [r7], -r0
   15fb4:	c0150000 	andsgt	r0, r5, r0
   15fb8:	15000004 	strne	r0, [r0, #-4]
   15fbc:	00000105 	andeq	r0, r0, r5, lsl #2
   15fc0:	00009715 	andeq	r9, r0, r5, lsl r7
   15fc4:	00691500 	rsbeq	r1, r9, r0, lsl #10
   15fc8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
   15fcc:	00064904 	andeq	r4, r6, r4, lsl #18
   15fd0:	00691400 	rsbeq	r1, r9, r0, lsl #8
   15fd4:	06810000 	streq	r0, [r1], r0
   15fd8:	c0150000 	andsgt	r0, r5, r0
   15fdc:	15000004 	strne	r0, [r0, #-4]
   15fe0:	00000105 	andeq	r0, r0, r5, lsl #2
   15fe4:	6d040e00 	stcvs	14, cr0, [r4, #-0]
   15fe8:	08000006 	stmdaeq	r0, {r1, r2}
   15fec:	0000002c 	andeq	r0, r0, ip, lsr #32
   15ff0:	00000697 	muleq	r0, r7, r6
   15ff4:	00007009 	andeq	r7, r0, r9
   15ff8:	08000200 	stmdaeq	r0, {r9}
   15ffc:	0000002c 	andeq	r0, r0, ip, lsr #32
   16000:	000006a7 	andeq	r0, r0, r7, lsr #13
   16004:	00007009 	andeq	r7, r0, r9
   16008:	05000000 	streq	r0, [r0, #-0]
   1600c:	00000429 	andeq	r0, r0, r9, lsr #8
   16010:	1a012406 	bne	5f030 <__ccfg+0x3f088>
   16014:	0000035f 	andeq	r0, r0, pc, asr r3
   16018:	00445819 	subeq	r5, r4, r9, lsl r8
   1601c:	28060c00 	stmdacs	r6, {sl, fp}
   16020:	06ed0801 	strbteq	r0, [sp], r1, lsl #16
   16024:	16170000 	ldrne	r0, [r7], -r0
   16028:	0600000b 	streq	r0, [r0], -fp
   1602c:	ed11012a 	ldfs	f0, [r1, #-168]	; 0xffffff58
   16030:	00000006 	andeq	r0, r0, r6
   16034:	00093b17 	andeq	r3, r9, r7, lsl fp
   16038:	012b0600 			; <UNDEFINED> instruction: 0x012b0600
   1603c:	00006907 	andeq	r6, r0, r7, lsl #18
   16040:	ce170400 	cfmulsgt	mvf0, mvf7, mvf0
   16044:	06000005 	streq	r0, [r0], -r5
   16048:	f30b012c 	vrhadd.u8	d0, d11, d28
   1604c:	08000006 	stmdaeq	r0, {r1, r2}
   16050:	b4040e00 	strlt	r0, [r4], #-3584	; 0xfffff200
   16054:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
   16058:	0006a704 	andeq	sl, r6, r4, lsl #14
   1605c:	03a01900 	moveq	r1, #0, 18
   16060:	060e0000 	streq	r0, [lr], -r0
   16064:	32080144 	andcc	r0, r8, #68, 2
   16068:	17000007 	strne	r0, [r0, -r7]
   1606c:	0000125e 	andeq	r1, r0, lr, asr r2
   16070:	12014506 	andne	r4, r1, #25165824	; 0x1800000
   16074:	00000732 	andeq	r0, r0, r2, lsr r7
   16078:	06791700 	ldrbteq	r1, [r9], -r0, lsl #14
   1607c:	46060000 	strmi	r0, [r6], -r0
   16080:	07321201 	ldreq	r1, [r2, -r1, lsl #4]!
   16084:	17060000 	strne	r0, [r6, -r0]
   16088:	00001103 	andeq	r1, r0, r3, lsl #2
   1608c:	12014706 	andne	r4, r1, #1572864	; 0x180000
   16090:	0000003a 	andeq	r0, r0, sl, lsr r0
   16094:	3a08000c 	bcc	2160cc <__ccfg+0x1f6124>
   16098:	42000000 	andmi	r0, r0, #0
   1609c:	09000007 	stmdbeq	r0, {r0, r1, r2}
   160a0:	00000070 	andeq	r0, r0, r0, ror r0
   160a4:	d01a0002 	andsle	r0, sl, r2
   160a8:	07028506 	streq	r8, [r2, -r6, lsl #10]
   160ac:	00000857 	andeq	r0, r0, r7, asr r8
   160b0:	000ad317 	andeq	sp, sl, r7, lsl r3
   160b4:	02870600 	addeq	r0, r7, #0, 12
   160b8:	00007018 	andeq	r7, r0, r8, lsl r0
   160bc:	2f170000 	svccs	0x00170000
   160c0:	0600000a 	streq	r0, [r0], -sl
   160c4:	53120288 	tstpl	r2, #136, 4	; 0x80000008
   160c8:	04000001 	streq	r0, [r0], #-1
   160cc:	0003e117 	andeq	lr, r3, r7, lsl r1
   160d0:	02890600 	addeq	r0, r9, #0, 12
   160d4:	00085710 	andeq	r5, r8, r0, lsl r7
   160d8:	bd170800 	ldclt	8, cr0, [r7, #-0]
   160dc:	06000008 	streq	r0, [r0], -r8
   160e0:	f917028a 			; <UNDEFINED> instruction: 0xf917028a
   160e4:	24000001 	strcs	r0, [r0], #-1
   160e8:	00062317 	andeq	r2, r6, r7, lsl r3
   160ec:	028b0600 	addeq	r0, fp, #0, 12
   160f0:	0000690f 	andeq	r6, r0, pc, lsl #18
   160f4:	11174800 	tstne	r7, r0, lsl #16
   160f8:	0600000b 	streq	r0, [r0], -fp
   160fc:	562c028c 	strtpl	r0, [ip], -ip, lsl #5
   16100:	50000000 	andpl	r0, r0, r0
   16104:	00008517 	andeq	r8, r0, r7, lsl r5
   16108:	028d0600 	addeq	r0, sp, #0, 12
   1610c:	0006f91a 	andeq	pc, r6, sl, lsl r9	; <UNPREDICTABLE>
   16110:	2b175800 	blcs	5ec118 <__ccfg+0x5cc170>
   16114:	06000005 	streq	r0, [r0], -r5
   16118:	f916028e 			; <UNDEFINED> instruction: 0xf916028e
   1611c:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
   16120:	000a3c17 	andeq	r3, sl, r7, lsl ip
   16124:	028f0600 	addeq	r0, pc, #0, 12
   16128:	0000f916 	andeq	pc, r0, r6, lsl r9	; <UNPREDICTABLE>
   1612c:	6f177000 	svcvs	0x00177000
   16130:	06000000 	streq	r0, [r0], -r0
   16134:	f9160290 			; <UNDEFINED> instruction: 0xf9160290
   16138:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
   1613c:	0008f917 	andeq	pc, r8, r7, lsl r9	; <UNPREDICTABLE>
   16140:	02910600 	addseq	r0, r1, #0, 12
   16144:	00086710 	andeq	r6, r8, r0, lsl r7
   16148:	be178000 	cdplt	0, 1, cr8, cr7, cr0, {0}
   1614c:	06000003 	streq	r0, [r0], -r3
   16150:	77100292 			; <UNDEFINED> instruction: 0x77100292
   16154:	88000008 	stmdahi	r0, {r3}
   16158:	0009bd17 	andeq	fp, r9, r7, lsl sp
   1615c:	02930600 	addseq	r0, r3, #0, 12
   16160:	0000690f 	andeq	r6, r0, pc, lsl #18
   16164:	6117a000 	tstvs	r7, r0
   16168:	06000002 	streq	r0, [r0], -r2
   1616c:	f9160294 			; <UNDEFINED> instruction: 0xf9160294
   16170:	a4000000 	strge	r0, [r0], #-0
   16174:	00056017 	andeq	r6, r5, r7, lsl r0
   16178:	02950600 	addseq	r0, r5, #0, 12
   1617c:	0000f916 	andeq	pc, r0, r6, lsl r9	; <UNPREDICTABLE>
   16180:	a317ac00 	tstge	r7, #0, 24
   16184:	06000004 	streq	r0, [r0], -r4
   16188:	f9160296 			; <UNDEFINED> instruction: 0xf9160296
   1618c:	b4000000 	strlt	r0, [r0], #-0
   16190:	0006b017 	andeq	fp, r6, r7, lsl r0
   16194:	02970600 	addseq	r0, r7, #0, 12
   16198:	0000f916 	andeq	pc, r0, r6, lsl r9	; <UNPREDICTABLE>
   1619c:	1a17bc00 	bne	6051a4 <__ccfg+0x5e51fc>
   161a0:	06000005 	streq	r0, [r0], -r5
   161a4:	f9160298 			; <UNDEFINED> instruction: 0xf9160298
   161a8:	c4000000 	strgt	r0, [r0], #-0
   161ac:	00078217 	andeq	r8, r7, r7, lsl r2
   161b0:	02990600 	addseq	r0, r9, #0, 12
   161b4:	00006908 	andeq	r6, r0, r8, lsl #18
   161b8:	0800cc00 	stmdaeq	r0, {sl, fp, lr, pc}
   161bc:	00000159 	andeq	r0, r0, r9, asr r1
   161c0:	00000867 	andeq	r0, r0, r7, ror #16
   161c4:	00007009 	andeq	r7, r0, r9
   161c8:	08001900 	stmdaeq	r0, {r8, fp, ip}
   161cc:	00000159 	andeq	r0, r0, r9, asr r1
   161d0:	00000877 	andeq	r0, r0, r7, ror r8
   161d4:	00007009 	andeq	r7, r0, r9
   161d8:	08000700 	stmdaeq	r0, {r8, r9, sl}
   161dc:	00000159 	andeq	r0, r0, r9, asr r1
   161e0:	00000887 	andeq	r0, r0, r7, lsl #17
   161e4:	00007009 	andeq	r7, r0, r9
   161e8:	1a001700 	bne	1bdf0 <__exidx_end+0x16d48>
   161ec:	029e06f0 	addseq	r0, lr, #240, 12	; 0xf000000
   161f0:	0008ae07 	andeq	sl, r8, r7, lsl #28
   161f4:	03991700 	orrseq	r1, r9, #0, 14
   161f8:	a1060000 	mrsge	r0, (UNDEF: 6)
   161fc:	08ae1b02 	stmiaeq	lr!, {r1, r8, r9, fp, ip}
   16200:	17000000 	strne	r0, [r0, -r0]
   16204:	00000b35 	andeq	r0, r0, r5, lsr fp
   16208:	1802a206 	stmdane	r2, {r1, r2, r9, sp, pc}
   1620c:	000008be 			; <UNDEFINED> instruction: 0x000008be
   16210:	59080078 	stmdbpl	r8, {r3, r4, r5, r6}
   16214:	be000003 	cdplt	0, 0, cr0, cr0, cr3, {0}
   16218:	09000008 	stmdbeq	r0, {r3}
   1621c:	00000070 	andeq	r0, r0, r0, ror r0
   16220:	7008001d 	andvc	r0, r8, sp, lsl r0
   16224:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
   16228:	09000008 	stmdbeq	r0, {r3}
   1622c:	00000070 	andeq	r0, r0, r0, ror r0
   16230:	f01b001d 			; <UNDEFINED> instruction: 0xf01b001d
   16234:	03028306 	movweq	r8, #8966	; 0x2306
   16238:	000008f3 	strdeq	r0, [r0], -r3
   1623c:	0044421c 	subeq	r4, r4, ip, lsl r2
   16240:	029a0600 	addseq	r0, sl, #0, 12
   16244:	0007420b 	andeq	r4, r7, fp, lsl #4
   16248:	08d71c00 	ldmeq	r7, {sl, fp, ip}^
   1624c:	a3060000 	movwge	r0, #24576	; 0x6000
   16250:	08870b02 	stmeq	r7, {r1, r8, r9, fp}
   16254:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   16258:	00000159 	andeq	r0, r0, r9, asr r1
   1625c:	00000903 	andeq	r0, r0, r3, lsl #18
   16260:	00007009 	andeq	r7, r0, r9
   16264:	1d001800 	stcne	8, cr1, [r0, #-0]
   16268:	00000b1c 	andeq	r0, r0, ip, lsl fp
   1626c:	0903040e 	stmdbeq	r3, {r1, r2, r3, sl}
   16270:	191e0000 	ldmdbne	lr, {}	; <UNPREDICTABLE>
   16274:	15000009 	strne	r0, [r0, #-9]
   16278:	000004c0 	andeq	r0, r0, r0, asr #9
   1627c:	0e040e00 	cdpeq	14, 0, cr0, cr4, cr0, {0}
   16280:	0e000009 	cdpeq	0, 0, cr0, cr0, cr9, {0}
   16284:	0001e304 	andeq	lr, r1, r4, lsl #6
   16288:	09301e00 	ldmdbeq	r0!, {r9, sl, fp, ip}
   1628c:	69150000 	ldmdbvs	r5, {}	; <UNPREDICTABLE>
   16290:	00000000 	andeq	r0, r0, r0
   16294:	0936040e 	ldmdbeq	r6!, {r1, r2, r3, sl}
   16298:	040e0000 	streq	r0, [lr], #-0
   1629c:	00000925 	andeq	r0, r0, r5, lsr #18
   162a0:	0006a708 	andeq	sl, r6, r8, lsl #14
   162a4:	00094c00 	andeq	r4, r9, r0, lsl #24
   162a8:	00700900 	rsbseq	r0, r0, r0, lsl #18
   162ac:	00020000 	andeq	r0, r2, r0
   162b0:	0008991f 	andeq	r9, r8, pc, lsl r9
   162b4:	03330600 	teqeq	r3, #0, 12
   162b8:	0004c017 	andeq	ip, r4, r7, lsl r0
   162bc:	08921f00 	ldmeq	r2, {r8, r9, sl, fp, ip}
   162c0:	34060000 	strcc	r0, [r6], #-0
   162c4:	04c61d03 	strbeq	r1, [r6], #3331	; 0xd03
   162c8:	41200000 			; <UNDEFINED> instruction: 0x41200000
   162cc:	08000043 	stmdaeq	r0, {r0, r1, r6}
   162d0:	0041169a 	umaaleq	r1, r1, sl, r6
   162d4:	8b200000 	blhi	8162dc <__ccfg+0x7f6334>
   162d8:	08000042 	stmdaeq	r0, {r1, r6}
   162dc:	0069159b 	mlseq	r9, fp, r5, r1
   162e0:	53080000 	movwpl	r0, #32768	; 0x8000
   162e4:	8e000001 	cdphi	0, 0, cr0, cr0, cr1, {0}
   162e8:	09000009 	stmdbeq	r0, {r0, r3}
   162ec:	00000070 	andeq	r0, r0, r0, ror r0
   162f0:	95200001 	strls	r0, [r0, #-1]!
   162f4:	08000042 	stmdaeq	r0, {r1, r6}
   162f8:	097e179e 	ldmdbeq	lr!, {r1, r2, r3, r4, r7, r8, r9, sl, ip}^
   162fc:	3e080000 	cdpcc	0, 0, cr0, cr8, cr0, {0}
   16300:	a5000006 	strge	r0, [r0, #-6]
   16304:	21000009 	tstcs	r0, r9
   16308:	099a0f00 	ldmibeq	sl, {r8, r9, sl, fp}
   1630c:	2d200000 	stccs	0, cr0, [r0, #-0]
   16310:	09000056 	stmdbeq	r0, {r1, r2, r4, r6}
   16314:	09a52414 	stmibeq	r5!, {r2, r4, sl, sp}
   16318:	c2200000 	eorgt	r0, r0, #0
   1631c:	09000056 	stmdbeq	r0, {r1, r2, r4, r6}
   16320:	00691515 	rsbeq	r1, r9, r5, lsl r5
   16324:	85200000 	strhi	r0, [r0, #-0]!
   16328:	01000007 	tsteq	r0, r7
   1632c:	00690c0c 	rsbeq	r0, r9, ip, lsl #24
   16330:	f0220000 			; <UNDEFINED> instruction: 0xf0220000
   16334:	01000043 	tsteq	r0, r3, asr #32
   16338:	00690112 	rsbeq	r0, r9, r2, lsl r1
   1633c:	43140000 	tstmi	r4, #0
   16340:	00100000 	andseq	r0, r0, r0
   16344:	9c010000 	stcls	0, cr0, [r1], {-0}
   16348:	00000a0b 	andeq	r0, r0, fp, lsl #20
   1634c:	0043e723 	subeq	lr, r3, r3, lsr #14
   16350:	21120100 	tstcs	r2, r0, lsl #2
   16354:	00000a0b 	andeq	r0, r0, fp, lsl #20
   16358:	00005bda 	ldrdeq	r5, [r0], -sl
   1635c:	00005bd6 	ldrdeq	r5, [r0], -r6
   16360:	00438a24 	subeq	r8, r3, r4, lsr #20
   16364:	0f130100 	svceq	0x00130100
   16368:	00000105 	andeq	r0, r0, r5, lsl #2
   1636c:	0e005101 	adfeqs	f5, f0, f1
   16370:	00012b04 	andeq	r2, r1, r4, lsl #22
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
       8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
       c:	10011106 	andne	r1, r1, r6, lsl #2
}
      10:	02000006 	andeq	r0, r0, #6
      14:	0b0b0024 	bleq	2c00ac <__ccfg+0x2a0104>
      18:	0e030b3e 	vmoveq.16	d3[0], r0
      1c:	16030000 	strne	r0, [r3], -r0
      20:	3a0e0300 	bcc	380c28 <__ccfg+0x360c80>
      24:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      28:	0013490b 	andseq	r4, r3, fp, lsl #18
      2c:	00240400 	eoreq	r0, r4, r0, lsl #8
      30:	0b3e0b0b 	bleq	f82c64 <__ccfg+0xf62cbc>
      34:	00000803 	andeq	r0, r0, r3, lsl #16
      38:	03001605 	movweq	r1, #1541	; 0x605
      3c:	3b0b3a0e 	blcc	2ce87c <__ccfg+0x2ae8d4>
			i = k;
      40:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
				j->Next = k;
      44:	06000013 			; <UNDEFINED> instruction: 0x06000013
      48:	0b0b0117 	bleq	2c04ac <__ccfg+0x2a0504>
}
      4c:	0b3b0b3a 	bleq	ec2d3c <__ccfg+0xea2d94>
      50:	13010b39 	movwne	r0, #6969	; 0x1b39
      54:	0d070000 	stceq	0, cr0, [r7, #-0]
		release;
      58:	3a0e0300 	bcc	380c60 <__ccfg+0x360cb8>
      5c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		b->length - b->u.pointers.head - b->u.pointers.tail;
      60:	0013490b 	andseq	r4, r3, fp, lsl #18
	b->u.pointers.tail =
      64:	01010800 	tsteq	r1, r0, lsl #16
}
      68:	13011349 	movwne	r1, #4937	; 0x1349
		return NULL;
      6c:	21090000 	mrscs	r0, (UNDEF: 9)
      70:	2f134900 	svccs	0x00134900
      74:	0a00000b 	beq	a8 <g_pfnVectors+0xa8>
      78:	0b0b0113 	bleq	2c04cc <__ccfg+0x2a0524>
      7c:	0b3b0b3a 	bleq	ec2d6c <__ccfg+0xea2dc4>
      80:	13010b39 	movwne	r0, #6969	; 0x1b39
      84:	0d0b0000 	stceq	0, cr0, [fp, #-0]
      88:	3a0e0300 	bcc	380c90 <__ccfg+0x360ce8>
      8c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      90:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
      94:	0c00000b 	stceq	0, cr0, [r0], {11}
      98:	0b0b000f 	bleq	2c00dc <__ccfg+0x2a0134>
      9c:	130d0000 	movwne	r0, #53248	; 0xd000
      a0:	0b0e0301 	bleq	380cac <__ccfg+0x360d04>
      a4:	3b0b3a0b 	blcc	2ce8d8 <__ccfg+0x2ae930>
      a8:	0013010b 	andseq	r0, r3, fp, lsl #2
      ac:	000d0e00 	andeq	r0, sp, r0, lsl #28
      b0:	13490e03 	movtne	r0, #40451	; 0x9e03
      b4:	0c340b38 			; <UNDEFINED> instruction: 0x0c340b38
      b8:	130f0000 	movwne	r0, #61440	; 0xf000
      bc:	0b0e0301 	bleq	380cc8 <__ccfg+0x360d20>
      c0:	3b0b3a0b 	blcc	2ce8f4 <__ccfg+0x2ae94c>
      c4:	010b390b 	tsteq	fp, fp, lsl #18
char * assembleMessage(message * messagePtr) {
      c8:	10000013 	andne	r0, r0, r3, lsl r0
      cc:	0803000d 	stmdaeq	r3, {r0, r2, r3}
      d0:	0b3b0b3a 	bleq	ec2dc0 <__ccfg+0xea2e18>
      d4:	13490b39 	movtne	r0, #39737	; 0x9b39
      d8:	00000b38 	andeq	r0, r0, r8, lsr fp
        p = (char*)umalloc(6);
      dc:	0b000f11 	bleq	3d28 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xac>
      e0:	0013490b 	andseq	r4, r3, fp, lsl #18
    p[0] = messagePtr->senderGroupId;
      e4:	01131200 	tsteq	r3, r0, lsl #4
      e8:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
    p[2] = messagePtr->messageType;
      ec:	0b3b0b3a 	bleq	ec2ddc <__ccfg+0xea2e34>
    p[3] = messagePtr->requestNumber;
      f0:	13010b39 	movwne	r0, #6969	; 0x1b39
    p[4] = messagePtr->senderId;
      f4:	0d130000 	ldceq	0, cr0, [r3, #-0]
    p[5] = messagePtr->destinationId;
      f8:	3a0e0300 	bcc	380d00 <__ccfg+0x360d58>
        p = (char*)umalloc(8);
      fc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     100:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     104:	14000005 	strne	r0, [r0], #-5
        p[7] = 0x00;
     108:	0c270015 	stceq	0, cr0, [r7], #-84	; 0xffffffac
        break;
     10c:	15150000 	ldrne	r0, [r5, #-0]
        p = (char*)umalloc(26);
     110:	490c2701 	stmdbmi	ip, {r0, r8, r9, sl, sp}
        strcpy(p + 6, messagePtr->messageRecord);
     114:	00130113 	andseq	r0, r3, r3, lsl r1
     118:	00051600 	andeq	r1, r5, r0, lsl #12
        strcpy(p + 8, messagePtr->messageRecord);
     11c:	00001349 	andeq	r1, r0, r9, asr #6
        p = (char*)umalloc(28);
     120:	49002617 	stmdbmi	r0, {r0, r1, r2, r4, r9, sl, sp}
     124:	18000013 	stmdane	r0, {r0, r1, r4}
     128:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
        p[7] = 0x00;
     12c:	0b3a050b 	bleq	e81560 <__ccfg+0xe615b8>
     130:	0b39053b 	bleq	e41624 <__ccfg+0xe2167c>
        strcpy(p + 8, messagePtr->messageRecord);
     134:	00001301 	andeq	r1, r0, r1, lsl #6
    switch(messageType) 
     138:	03000d19 	movweq	r0, #3353	; 0xd19
int getPacketSize(char messageType) {
     13c:	3b0b3a0e 	blcc	2ce97c <__ccfg+0x2ae9d4>
     140:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
}
     144:	000b3813 	andeq	r3, fp, r3, lsl r8
     148:	000d1a00 	andeq	r1, sp, r0, lsl #20
fsm transmitter (message * messagePtr) {
     14c:	0b3a0e03 	bleq	e83960 <__ccfg+0xe639b8>
     150:	0b39053b 	bleq	e41644 <__ccfg+0xe2169c>
     154:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
}
     158:	131b0000 	tstne	fp, #0
     15c:	0b0e0301 	bleq	380d68 <__ccfg+0x360dc0>
fsm transmitter (message * messagePtr) {
     160:	3b0b3a0b 	blcc	2ce994 <__ccfg+0x2ae9ec>
        char * assembledMessage = assembleMessage(messagePtr);
     164:	010b3905 	tsteq	fp, r5, lsl #18
     168:	1c000013 	stcne	0, cr0, [r0], {19}
     16c:	0b0b0113 	bleq	2c05c0 <__ccfg+0x2a0618>
        spkt = tcv_wnp (Transmit_Message, sfd,  getPacketSize(messagePtr->messageType));
     170:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     174:	13010b39 	movwne	r0, #6969	; 0x1b39
     178:	171d0000 	ldrne	r0, [sp, -r0]
     17c:	3a0b0b01 	bcc	2c2d88 <__ccfg+0x2a2de0>
     180:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
        spkt [0] = 0;
     184:	0013010b 	andseq	r0, r3, fp, lsl #2
        strcpy(p, assembledMessage);
     188:	000d1e00 	andeq	r1, sp, r0, lsl #28
        tcv_endp (spkt);
     18c:	0b3a0e03 	bleq	e839a0 <__ccfg+0xe639f8>
     190:	0b39053b 	bleq	e41684 <__ccfg+0xe216dc>
}
     194:	00001349 	andeq	r1, r0, r9, asr #6
        finish;
     198:	0300131f 	movweq	r1, #799	; 0x31f
     19c:	000c3c0e 	andeq	r3, ip, lr, lsl #24
     1a0:	01152000 	tsteq	r5, r0
char randomNumber() {
     1a4:	13010c27 	movwne	r0, #7207	; 0x1c27
   srand((unsigned) time(&t));
     1a8:	34210000 	strtcc	r0, [r1], #-0
     1ac:	3a0e0300 	bcc	380db4 <__ccfg+0x360e0c>
   return (char)rand();
     1b0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
}
     1b4:	3f13490b 	svccc	0x0013490b
     1b8:	000c3c0c 	andeq	r3, ip, ip, lsl #24
fsm find {
     1bc:	00352200 	eorseq	r2, r5, r0, lsl #4
     1c0:	00001349 	andeq	r1, r0, r9, asr #6
     1c4:	03000d23 	movweq	r0, #3363	; 0xd23
     1c8:	3b0b3a0e 	blcc	2cea08 <__ccfg+0x2aea60>
        i = 0;
     1cc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     1d0:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
        sendCount = 0;
     1d4:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
        currentRequestNumber = randomNumber();
     1d8:	2400000b 	strcs	r0, [r0], #-11
        messagePtr -> senderGroupId = groupId;
     1dc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     1e0:	0b3b0b3a 	bleq	ec2ed0 <__ccfg+0xea2f28>
     1e4:	13490b39 	movtne	r0, #39737	; 0x9b39
     1e8:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
        messagePtr -> requestNumber = currentRequestNumber;
     1ec:	21250000 			; <UNDEFINED> instruction: 0x21250000
     1f0:	26000000 	strcs	r0, [r0], -r0
        messagePtr -> senderId = nodeId;
     1f4:	0b0b0104 	bleq	2c060c <__ccfg+0x2a0664>
     1f8:	0b3a1349 	bleq	e84f24 <__ccfg+0xe64f7c>
     1fc:	0b390b3b 	bleq	e42ef0 <__ccfg+0xe22f48>
        if(sendCount == 2) {
     200:	00001301 	andeq	r1, r0, r1, lsl #6
     204:	03002827 	movweq	r2, #2087	; 0x827
            proceed Display_Neighbours;
     208:	000b1c0e 	andeq	r1, fp, lr, lsl #24
        call transmitter(messagePtr, Wait);
     20c:	00282800 	eoreq	r2, r8, r0, lsl #16
     210:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
     214:	34290000 	strtcc	r0, [r9], #-0
     218:	3a0e0300 	bcc	380e20 <__ccfg+0x360e78>
     21c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     220:	3f13490b 	svccc	0x0013490b
        sendCount++;
     224:	000a020c 	andeq	r0, sl, ip, lsl #4
        delay(3*1024, Send_Discovery_Request);
     228:	00342a00 	eorseq	r2, r4, r0, lsl #20
     22c:	0b3a0803 	bleq	e82240 <__ccfg+0xe62298>
     230:	0b390b3b 	bleq	e42f24 <__ccfg+0xe22f7c>
        ser_outf(Display_Neighbours, "Neighbours:");
     234:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 118 <_Min_Stack_Size+0x18>
     238:	00000a02 	andeq	r0, r0, r2, lsl #20
        if (neighbours[i] == 1) {
     23c:	3f012e2b 	svccc	0x00012e2b
     240:	3a0e030c 	bcc	380e78 <__ccfg+0x360ed0>
     244:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
            ser_outf(Display_Neighbour, " %d", i);
     248:	110c270b 	tstne	ip, fp, lsl #14
     24c:	40011201 	andmi	r1, r1, r1, lsl #4
        i++;
     250:	0013010a 	andseq	r0, r3, sl, lsl #2
     254:	00052c00 	andeq	r2, r5, r0, lsl #24
            proceed Display_Neighbour;
     258:	0b3a0e03 	bleq	e83a6c <__ccfg+0xe63ac4>
     25c:	0b390b3b 	bleq	e42f50 <__ccfg+0xe22fa8>
}
     260:	06021349 	streq	r1, [r2], -r9, asr #6
        finish;
     264:	0a2d0000 	beq	b4026c <__ccfg+0xb202c4>
}
     268:	3a0e0300 	bcc	380e70 <__ccfg+0x360ec8>
     26c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     270:	0001110b 	andeq	r1, r1, fp, lsl #2
     274:	010b2e00 	tsteq	fp, r0, lsl #28
     278:	00000655 	andeq	r0, r0, r5, asr r6
     27c:	0300342f 	movweq	r3, #1071	; 0x42f
     280:	3b0b3a0e 	blcc	2ceac0 <__ccfg+0x2aeb18>
     284:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     288:	30000013 	andcc	r0, r0, r3, lsl r0
     28c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     290:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     294:	13490b39 	movtne	r0, #39737	; 0x9b39
fsm root {
     298:	00000a02 	andeq	r0, r0, r2, lsl #20
     29c:	55010b31 	strpl	r0, [r1, #-2865]	; 0xfffff4cf
     2a0:	00130106 	andseq	r0, r3, r6, lsl #2
     2a4:	010b3200 	mrseq	r3, R11_fiq
     2a8:	01120111 	tsteq	r2, r1, lsl r1
     2ac:	00001301 	andeq	r1, r0, r1, lsl #6
     2b0:	31011d33 	tstcc	r1, r3, lsr sp
     2b4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     2b8:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
     2bc:	010b5705 	tsteq	fp, r5, lsl #14
     2c0:	34000013 	strcc	r0, [r0], #-19	; 0xffffffed
     2c4:	13310005 	teqne	r1, #5
     2c8:	00000602 	andeq	r0, r0, r2, lsl #12
        recordCount = 0;
     2cc:	31011d35 	tstcc	r1, r5, lsr sp
        nodeId = 1;
     2d0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     2d4:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
        groupId = 1;
     2d8:	000b5705 	andeq	r5, fp, r5, lsl #14
     2dc:	012e3600 			; <UNDEFINED> instruction: 0x012e3600
        messagePtr = (message *) umalloc(sizeof(message));
     2e0:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
        phys_cc1350(0, MAX_PACKET_LENGTH);
     2e4:	0b3b0b3a 	bleq	ec2fd4 <__ccfg+0xea302c>
     2e8:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     2ec:	0b201349 	bleq	805018 <__ccfg+0x7e5070>
        tcv_plug(0, &plug_null);
     2f0:	00001301 	andeq	r1, r0, r1, lsl #6
     2f4:	03000537 	movweq	r0, #1335	; 0x537
        sfd = tcv_open(WNONE, 0, 0);
     2f8:	3b0b3a0e 	blcc	2ceb38 <__ccfg+0x2aeb90>
     2fc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     300:	38000013 	stmdacc	r0, {r0, r1, r4}
		tcv_control(sfd, PHYSOPT_ON, NULL);
     304:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
        sfd = tcv_open(WNONE, 0, 0);
     308:	0b3b0b3a 	bleq	ec2ff8 <__ccfg+0xea3050>
		tcv_control(sfd, PHYSOPT_ON, NULL);
     30c:	01110b39 	tsteq	r1, r9, lsr fp
		if (sfd < 0) {
     310:	34390000 	ldrtcc	r0, [r9], #-0
			diag("Cannot open tcv interface");
     314:	3a0e0300 	bcc	380f1c <__ccfg+0x360f74>
     318:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			halt();
     31c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
        currentProtocol = IDLE;
     320:	3a00000a 	bcc	350 <root+0xb8>
     324:	08030034 	stmdaeq	r3, {r2, r4, r5}
        ser_outf(Menu_Header, "\r\nGroup %d Device #%d (%d/%d records)\r\n", groupId, nodeId, recordCount, MAX_RECORDS);
     328:	0b3b0b3a 	bleq	ec3018 <__ccfg+0xea3070>
     32c:	13490b39 	movtne	r0, #39737	; 0x9b39
     330:	00000a02 	andeq	r0, r0, r2, lsl #20
     334:	3f012e3b 	svccc	0x00012e3b
     338:	3a0e030c 	bcc	380f70 <__ccfg+0x360fc8>
     33c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
        ser_outf(Options, menu);
     340:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
     344:	010a4001 	tsteq	sl, r1
        ser_inf(Get_Choice, "%c", &choice);
     348:	3c000013 	stccc	0, cr0, [r0], {19}
     34c:	0111010b 	tsteq	r1, fp, lsl #2
     350:	00000112 	andeq	r0, r0, r2, lsl r1
        switch (choice)
     354:	0300343d 	movweq	r3, #1085	; 0x43d
     358:	3b0b3a08 	blcc	2ceb80 <__ccfg+0x2aebd8>
     35c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     360:	00060213 	andeq	r0, r6, r3, lsl r2
     364:	012e3e00 			; <UNDEFINED> instruction: 0x012e3e00
     368:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     36c:	0b3b0b3a 	bleq	ec305c <__ccfg+0xea30b4>
     370:	13490b39 	movtne	r0, #39737	; 0x9b39
     374:	01120111 	tsteq	r2, r1, lsl r1
     378:	13010a40 	movwne	r0, #6720	; 0x1a40
     37c:	343f0000 	ldrtcc	r0, [pc], #-0	; 384 <root+0xec>
     380:	3a0e0300 	bcc	380f88 <__ccfg+0x360fe0>
        proceed Menu_Header;
     384:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     388:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
        ser_outf(Set_Group_ID, "New Group ID: ");
     38c:	40000006 	andmi	r0, r0, r6
     390:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 2e0 <root+0x48>
        ser_inf(Get_Group_ID, "%d", &groupId);
     394:	0b3a0e03 	bleq	e83ba8 <__ccfg+0xe63c00>
     398:	0b390b3b 	bleq	e4308c <__ccfg+0xe230e4>
        proceed Menu_Header;
     39c:	13490c27 	movtne	r0, #39975	; 0x9c27
     3a0:	01120111 	tsteq	r2, r1, lsl r1
        ser_outf(Set_Node_ID, "New node ID (1-25):");
     3a4:	13010a40 	movwne	r0, #6720	; 0x1a40
     3a8:	2e410000 	cdpcs	0, 4, cr0, cr1, cr0, {0}
        ser_inf(Get_Node_ID, "%d", &nodeId);
     3ac:	11133101 	tstne	r3, r1, lsl #2
     3b0:	40011201 	andmi	r1, r1, r1, lsl #4
     3b4:	0000000a 	andeq	r0, r0, sl
    if (node < 1 || node > 25) {
     3b8:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     3bc:	030b130e 	movweq	r1, #45838	; 0xb30e
            proceed Set_Node_ID;
     3c0:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
        proceed Menu_Header;
     3c4:	10011106 	andne	r1, r1, r6, lsl #2
     3c8:	02000006 	andeq	r0, r0, #6
        call find(Menu_Header);
     3cc:	0b0b0024 	bleq	2c0464 <__ccfg+0x2a04bc>
     3d0:	0e030b3e 	vmoveq.16	d3[0], r0
     3d4:	16030000 	strne	r0, [r3], -r0
     3d8:	3a0e0300 	bcc	380fe0 <__ccfg+0x361038>
     3dc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
            proceed Set_Node_ID;
     3e0:	0013490b 	andseq	r4, r3, fp, lsl #18
            break;
     3e4:	00240400 	eoreq	r0, r4, r0, lsl #8
            proceed Set_Node_ID;
     3e8:	0b3e0b0b 	bleq	f8301c <__ccfg+0xf63074>
            proceed Find_Neighbours;
     3ec:	00000803 	andeq	r0, r0, r3, lsl #16
            proceed Create_Record;
     3f0:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
            proceed Delete_Record;
     3f4:	06000013 			; <UNDEFINED> instruction: 0x06000013
            proceed Retrieve_Record;
     3f8:	13490035 	movtne	r0, #36917	; 0x9035
            diag("Reset Local Storage");
     3fc:	0f070000 	svceq	0x00070000
            break;
     400:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
            diag("Reset Local Storage");
     404:	08000013 	stmdaeq	r0, {r0, r1, r4}
        currentProtocol = CREATE_RECORD;
     408:	0b0b0113 	bleq	2c085c <__ccfg+0x2a08b4>
        ser_outf(Create_Record, "Receiver node ID (1-25):");
     40c:	0b3b0b3a 	bleq	ec30fc <__ccfg+0xea3154>
     410:	13010b39 	movwne	r0, #6969	; 0x1b39
        ser_inf(Get_Receiver_Node, "%d", &receiverId);
     414:	0d090000 	stceq	0, cr0, [r9, #-0]
     418:	3a0e0300 	bcc	381020 <__ccfg+0x361078>
     41c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    if (node < 1 || node > 25) {
     420:	0b13490b 	bleq	4d2854 <__ccfg+0x4b28ac>
     424:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
            proceed Create_Record;
     428:	000b380b 	andeq	r3, fp, fp, lsl #16
     42c:	000d0a00 	andeq	r0, sp, r0, lsl #20
        ser_in(Get_Message, messagePtr->messageRecord, RECORD_LENGTH);
     430:	0b3a0e03 	bleq	e83c44 <__ccfg+0xe63c9c>
     434:	0b390b3b 	bleq	e43128 <__ccfg+0xe23180>
     438:	0b381349 	bleq	e05164 <__ccfg+0xde51bc>
        if(strlen(messagePtr->messageRecord) >= RECORD_LENGTH) {
     43c:	340b0000 	strcc	r0, [fp], #-0
     440:	3a0e0300 	bcc	381048 <__ccfg+0x3610a0>
     444:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
            messagePtr->messageRecord[RECORD_LENGTH - 1] = '/0';
     448:	3f13490b 	svccc	0x0013490b
        proceed Transmit_Message;
     44c:	000c3c0c 	andeq	r3, ip, ip, lsl #24
            messagePtr->messageRecord[RECORD_LENGTH - 1] = '/0';
     450:	01010c00 	tsteq	r1, r0, lsl #24
        proceed Transmit_Message;
     454:	13011349 	movwne	r1, #4937	; 0x1349
        currentProtocol = DELETE_RECORD;
     458:	210d0000 	mrscs	r0, (UNDEF: 13)
        ser_outf(Retrieve_Record, "Delete Record from Neighbour:\n\r");
     45c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
        currentProtocol = DELETE_RECORD;
     460:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
        ser_outf(Retrieve_Record, "Delete Record from Neighbour:\n\r");
     464:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
        proceed Get_Receiving_Node;
     468:	13490b39 	movtne	r0, #39737	; 0x9b39
        currentProtocol = RETRIEVE_RECORD;
     46c:	150f0000 	strne	r0, [pc, #-0]	; 474 <root+0x1dc>
        ser_outf(Retrieve_Record, "Retrieve Record from Neighbour:\n\r");
     470:	010c2701 	tsteq	ip, r1, lsl #14
        currentProtocol = RETRIEVE_RECORD;
     474:	10000013 	andne	r0, r0, r3, lsl r0
        ser_outf(Retrieve_Record, "Retrieve Record from Neighbour:\n\r");
     478:	13490005 	movtne	r0, #36869	; 0x9005
        ser_outf(Prompt_Recieving_Node, "Neighbour node ID (1-25):");
     47c:	34110000 	ldrcc	r0, [r1], #-0
     480:	3a0e0300 	bcc	381088 <__ccfg+0x3610e0>
        ser_inf(Get_Receiving_Node, "%d", &receiverId);
     484:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     488:	3f13490b 	svccc	0x0013490b
     48c:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    if (node < 1 || node > 25) {
     490:	01131200 	tsteq	r3, r0, lsl #4
     494:	0b3a0b0b 	bleq	e830c8 <__ccfg+0xe63120>
            proceed Prompt_Recieving_Node;
     498:	0b39053b 	bleq	e4198c <__ccfg+0xe219e4>
        ser_outf(Prompt_Record_Index, "Record index:");
     49c:	00001301 	andeq	r1, r0, r1, lsl #6
     4a0:	03000d13 	movweq	r0, #3347	; 0xd13
        char desiredRecordIndex = -1;
     4a4:	3b0b3a0e 	blcc	2cece4 <__ccfg+0x2aed3c>
        ser_inf(Get_Record_Index, "%d", &desiredRecordIndex);
     4a8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     4ac:	000b3813 	andeq	r3, fp, r3, lsl r8
        char desiredRecordIndex = -1;
     4b0:	01131400 	tsteq	r3, r0, lsl #8
        ser_inf(Get_Record_Index, "%d", &desiredRecordIndex);
     4b4:	0b0b0e03 	bleq	2c3cc8 <__ccfg+0x2a3d20>
        messagePtr->recordIndex = desiredRecordIndex;
     4b8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     4bc:	13010b39 	movwne	r0, #6969	; 0x1b39
     4c0:	21150000 	tstcs	r5, r0
        proceed Transmit_Message;
     4c4:	2f134900 	svccs	0x00134900
        messagePtr -> senderGroupId = groupId;
     4c8:	1600000b 	strne	r0, [r0], -fp
     4cc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     4d0:	0b3b0b3a 	bleq	ec31c0 <__ccfg+0xea3218>
        messagePtr -> messageType = currentProtocol;
     4d4:	13490b39 	movtne	r0, #39737	; 0x9b39
     4d8:	34170000 	ldrcc	r0, [r7], #-0
        messagePtr -> requestNumber = randomNumber();
     4dc:	3a0e0300 	bcc	3810e4 <__ccfg+0x36113c>
        messagePtr -> senderId = nodeId;
     4e0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     4e4:	3f13490b 	svccc	0x0013490b
        call transmitter(messagePtr, Menu_Header);
     4e8:	000a020c 	andeq	r0, sl, ip, lsl #4
        messagePtr -> destinationId = receiverId;
     4ec:	00341800 	eorseq	r1, r4, r0, lsl #16
     4f0:	0b3a0e03 	bleq	e83d04 <__ccfg+0xe63d5c>
        call transmitter(messagePtr, Menu_Header);
     4f4:	0b39053b 	bleq	e419e8 <__ccfg+0xe21a40>
     4f8:	0a021349 	beq	85224 <__ccfg+0x6527c>
     4fc:	34190000 	ldrcc	r0, [r9], #-0
     500:	3a134700 	bcc	4d2108 <__ccfg+0x4b2160>
     504:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     508:	000a020b 	andeq	r0, sl, fp, lsl #4
     50c:	012e1a00 			; <UNDEFINED> instruction: 0x012e1a00
     510:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     514:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     518:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     51c:	01111349 	tsteq	r1, r9, asr #6
     520:	0a400112 	beq	1000970 <__ccfg+0xfe09c8>
     524:	00001301 	andeq	r1, r0, r1, lsl #6
     528:	55010b1b 	strpl	r0, [r1, #-2843]	; 0xfffff4e5
     52c:	00130106 	andseq	r0, r3, r6, lsl #2
     530:	00341c00 	eorseq	r1, r4, r0, lsl #24
     534:	0b3a0803 	bleq	e82548 <__ccfg+0xe625a0>
     538:	0b39053b 	bleq	e41a2c <__ccfg+0xe21a84>
     53c:	00001349 	andeq	r1, r0, r9, asr #6
     540:	31001d1d 	tstcc	r0, sp, lsl sp
     544:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     548:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
     54c:	000b5705 	andeq	r5, fp, r5, lsl #14
     550:	012e1e00 			; <UNDEFINED> instruction: 0x012e1e00
     554:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     558:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     55c:	01110b39 	tsteq	r1, r9, lsr fp
     560:	0a400112 	beq	10009b0 <__ccfg+0xfe0a08>
     564:	00001301 	andeq	r1, r0, r1, lsl #6
     568:	03000a1f 	movweq	r0, #2591	; 0xa1f
static void devinit_uart (int devnum) {
     56c:	3b0b3a0e 	blcc	2cedac <__ccfg+0x2aee04>
	adddevfunc (ioreq_uart_a, devnum);
     570:	000b390b 	andeq	r3, fp, fp, lsl #18
     574:	011d2000 	tsteq	sp, r0
void udelay (volatile word n) {
     578:	01521331 	cmpeq	r2, r1, lsr r3
     57c:	0b580655 	bleq	1601ed8 <__ccfg+0x15e1f30>
	while (n) {
     580:	0b570559 	bleq	15c1aec <__ccfg+0x15a1b44>
     584:	00001301 	andeq	r1, r0, r1, lsl #6
}
     588:	31000521 	tstcc	r0, r1, lsr #10
	while (n--);
     58c:	22000013 	andcs	r0, r0, #19
     590:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     594:	06550152 			; <UNDEFINED> instruction: 0x06550152
		n--;
     598:	0b590b58 	bleq	1643300 <__ccfg+0x1623358>
     59c:	13010b57 	movwne	r0, #6999	; 0x1b57
     5a0:	0b230000 	bleq	8c05a8 <__ccfg+0x8a0600>
void mdelay (volatile word n) {
     5a4:	00065501 	andeq	r5, r6, r1, lsl #10
     5a8:	000a2400 	andeq	r2, sl, r0, lsl #8
	while (n) {
     5ac:	01111331 	tsteq	r1, r1, lsr r3
     5b0:	1d250000 	stcne	0, cr0, [r5, #-0]
}
     5b4:	52133100 	andspl	r3, r3, #0, 2
		udelay (999);
     5b8:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
     5bc:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
		n--;
     5c0:	2600000b 	strcs	r0, [r0], -fp
     5c4:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     5c8:	01120111 	tsteq	r2, r1, lsl r1
     5cc:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
void __pi_ondomain (lword d) {
     5d0:	13010b57 	movwne	r0, #6999	; 0x1b57
     5d4:	1d270000 	stcne	0, cr0, [r7, #-0]
		if (__pi_systat.effpdm > 1)
     5d8:	11133101 	tstne	r3, r1, lsl #2
     5dc:	58011201 	stmdapl	r1, {r0, r9, ip}
			__pi_systat.effpdm = 1;
     5e0:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
	PRCMPowerDomainOn (d);
     5e4:	2800000b 	stmdacs	r0, {r0, r1, r3}
     5e8:	1331001d 	teqne	r1, #29
     5ec:	01120111 	tsteq	r2, r1, lsl r1
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     5f0:	0b590b58 	bleq	1643358 <__ccfg+0x16233b0>
     5f4:	00000b57 	andeq	r0, r0, r7, asr fp
     5f8:	03003429 	movweq	r3, #1065	; 0x429
	__pi_systat.ondmns |= d;
     5fc:	3b0b3a08 	blcc	2cee24 <__ccfg+0x2aee7c>
     600:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
}
     604:	00060213 	andeq	r0, r6, r3, lsl r2
     608:	012e2a00 			; <UNDEFINED> instruction: 0x012e2a00
void __pi_offdomain (lword d) {
     60c:	0b3a0e03 	bleq	e83e20 <__ccfg+0xe63e78>
     610:	0b39053b 	bleq	e41b04 <__ccfg+0xe21b5c>
	PRCMPowerDomainOff (d);
     614:	13010b20 	movwne	r0, #6944	; 0x1b20
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     618:	0a2b0000 	beq	ac0620 <__ccfg+0xaa0678>
     61c:	3a0e0300 	bcc	381224 <__ccfg+0x36127c>
     620:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	if (d & PRCM_DOMAIN_RFCORE) {
     624:	2c00000b 	stccs	0, cr0, [r0], {11}
     628:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 578 <udelay>
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     62c:	0b3a0e03 	bleq	e83e40 <__ccfg+0xe63e98>
     630:	0b39053b 	bleq	e41b24 <__ccfg+0xe21b7c>
			__pi_systat.effpdm = __pi_systat.reqpdm;
     634:	01110c27 	tsteq	r1, r7, lsr #24
     638:	0a400112 	beq	1000a88 <__ccfg+0xfe0ae0>
	__pi_systat.ondmns &= ~d;
     63c:	00001301 	andeq	r1, r0, r1, lsl #6
     640:	0300052d 	movweq	r0, #1325	; 0x52d
}
     644:	3b0b3a0e 	blcc	2cee84 <__ccfg+0x2aeedc>
     648:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
void __pi_syserror (word ec, const char *m) {
     64c:	00060213 	andeq	r0, r6, r3, lsl r2
	diag ("SYSERR: %x, %s", ec, m);
     650:	010b2e00 	tsteq	fp, r0, lsl #28
     654:	01120111 	tsteq	r2, r1, lsl r1
  __ASM volatile ("cpsid i" : : : "memory");
     658:	00001301 	andeq	r1, r0, r1, lsl #6
     65c:	3100342f 	tstcc	r0, pc, lsr #8
     660:	30000013 	andcc	r0, r0, r3, lsl r0
     664:	1331010b 	teqne	r1, #-1073741822	; 0xc0000002
		all_leds_blink;
     668:	00000655 	andeq	r0, r0, r5, asr r6
     66c:	31003431 	tstcc	r0, r1, lsr r4
     670:	00060213 	andeq	r0, r6, r3, lsl r2
     674:	011d3200 	tsteq	sp, r0, lsl #4
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     678:	01521331 	cmpeq	r2, r1, lsr r3
     67c:	0b580655 	bleq	1601fd8 <__ccfg+0x15e2030>
     680:	0b570b59 	bleq	15c33ec <__ccfg+0x15a3444>
     684:	1d330000 	ldcne	0, cr0, [r3, #-0]
     688:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
     68c:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
	while (1) {
     690:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
     694:	3400000b 	strcc	r0, [r0], #-11
     698:	08030005 	stmdaeq	r3, {r0, r2}
     69c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
void tci_run_delay_timer () {
     6a0:	13490b39 	movtne	r0, #39737	; 0x9b39
	setdel = __pi_mintk - __pi_old;
     6a4:	00000a02 	andeq	r0, r0, r2, lsl #20
     6a8:	31000535 	tstcc	r0, r5, lsr r5
     6ac:	00060213 	andeq	r0, r6, r3, lsl r2
     6b0:	00343600 	eorseq	r3, r4, r0, lsl #12
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     6b4:	0b3a0803 	bleq	e826c8 <__ccfg+0xe62720>
     6b8:	0b390b3b 	bleq	e433ac <__ccfg+0xe23404>
     6bc:	06021349 	streq	r1, [r2], -r9, asr #6
     6c0:	0b370000 	bleq	dc06c8 <__ccfg+0xda0720>
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     6c4:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
	sti_tim;
     6c8:	38000001 	stmdacc	r0, {r0}
}
     6cc:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
     6d0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     6d4:	0b200b39 	bleq	8033c0 <__ccfg+0x7e3418>
     6d8:	2e390000 	cdpcs	0, 3, cr0, cr9, cr0, {0}
     6dc:	3a0e0301 	bcc	3812e8 <__ccfg+0x361340>
	cli_aux;
     6e0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     6e4:	110c270b 	tstne	ip, fp, lsl #14
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     6e8:	40011201 	andmi	r1, r1, r1, lsl #4
     6ec:	0013010a 	andseq	r0, r3, sl, lsl #2
     6f0:	012e3a00 			; <UNDEFINED> instruction: 0x012e3a00
     6f4:	0b3a0e03 	bleq	e83f08 <__ccfg+0xe63f60>
	sti_aux;
     6f8:	0b39053b 	bleq	e41bec <__ccfg+0xe21c44>
}
     6fc:	13490c27 	movtne	r0, #39975	; 0x9c27
     700:	01120111 	tsteq	r2, r1, lsl r1
     704:	13010a40 	movwne	r0, #6720	; 0x1a40
void AONRTCIntHandler () {
     708:	053b0000 	ldreq	r0, [fp, #-0]!
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     70c:	3a080300 	bcc	201314 <__ccfg+0x1e136c>
     710:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     714:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		if (__pi_utims [0] == 0)
     718:	3c000006 	stccc	0, cr0, [r0], {6}
     71c:	0e03012e 	adfeqsp	f0, f3, #0.5
		if (*(__pi_utims [0])) {
     720:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     724:	01110b39 	tsteq	r1, r9, lsr fp
			(*(__pi_utims [0]))--;
     728:	0a400112 	beq	1000b78 <__ccfg+0xfe0bd0>
		if (__pi_utims [1] == 0)
     72c:	00001301 	andeq	r1, r0, r1, lsl #6
		if (*(__pi_utims [1])) {
     730:	3f012e3d 	svccc	0x00012e3d
			aux_timer_inactive = 0;
     734:	3a0e030c 	bcc	38136c <__ccfg+0x3613c4>
			(*(__pi_utims [1]))--;
     738:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		if (__pi_utims [2] == 0)
     73c:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
		if (*(__pi_utims [2])) {
     740:	010b2013 	tsteq	fp, r3, lsl r0
			(*(__pi_utims [2]))--;
     744:	3e000013 	mcrcc	0, 0, r0, cr0, cr3, {0}
		if (__pi_utims [3] != 0) {
     748:	08030005 	stmdaeq	r3, {r0, r2}
			if (*(__pi_utims [3])) {
     74c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
				aux_timer_inactive = 0;
     750:	13490b39 	movtne	r0, #39737	; 0x9b39
				(*(__pi_utims [3]))--;
     754:	0a3f0000 	beq	fc075c <__ccfg+0xfa07b4>
	if (__pi_systat.ledsts) {
     758:	3a080300 	bcc	201360 <__ccfg+0x1e13b8>
     75c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		if (__pi_systat.ledblc++ == 0) {
     760:	4000000b 	andmi	r0, r0, fp
     764:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
			if (__pi_systat.ledblk) {
     768:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     76c:	13490b39 	movtne	r0, #39737	; 0x9b39
     770:	00000602 	andeq	r0, r0, r2, lsl #12
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     774:	03000a41 	movweq	r0, #2625	; 0xa41
     778:	3b0b3a08 	blcc	2cefa0 <__ccfg+0x2aeff8>
				if (__pi_systat.ledsts & 0x2)
     77c:	110b3905 	tstne	fp, r5, lsl #18
     780:	42000001 	andmi	r0, r0, #1
     784:	1331011d 	teqne	r1, #1073741831	; 0x40000007
				if (__pi_systat.ledsts & 0x4)
     788:	01120111 	tsteq	r2, r1, lsl r1
				__pi_systat.ledblk = 0;
     78c:	0b590b58 	bleq	16434f4 <__ccfg+0x162354c>
     790:	13010b57 	movwne	r0, #6999	; 0x1b57
			if (__pi_systat.fstblk)
     794:	1d430000 	stclne	0, cr0, [r3, #-0]
     798:	11133101 	tstne	r3, r1, lsl #2
				__pi_systat.ledblc = 200;
     79c:	58011201 	stmdapl	r1, {r0, r9, ip}
	if (events & AON_RTC_EVFLAGS_CH0) {
     7a0:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
		cli_tim;
     7a4:	4400000b 	strmi	r0, [r0], #-11
		__pi_new += setdel;
     7a8:	0e03012e 	adfeqsp	f0, f3, #0.5
     7ac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		setdel = 0;
     7b0:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
		RISE_N_SHINE;
     7b4:	0b201349 	bleq	8054e0 <__ccfg+0x7e5538>
		__pi_new += setdel;
     7b8:	00001301 	andeq	r1, r0, r1, lsl #6
		RISE_N_SHINE;
     7bc:	03002e45 	movweq	r2, #3653	; 0xe45
     7c0:	3b0b3a0e 	blcc	2cf000 <__ccfg+0x2af058>
		aux_timer_inactive = 1;
     7c4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     7c8:	000b2013 	andeq	r2, fp, r3, lsl r0
				if (__pi_systat.ledsts & 0x1)
     7cc:	012e4600 			; <UNDEFINED> instruction: 0x012e4600
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     7d0:	0b3a0e03 	bleq	e83fe4 <__ccfg+0xe6403c>
     7d4:	0b390b3b 	bleq	e434c8 <__ccfg+0xe23520>
				if (__pi_systat.ledsts & 0x2)
     7d8:	13010b20 	movwne	r0, #6944	; 0x1b20
     7dc:	34470000 	strbcc	r0, [r7], #-0
     7e0:	3a080300 	bcc	2013e8 <__ccfg+0x1e1440>
				if (__pi_systat.ledsts & 0x8)
     7e4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
				__pi_systat.ledblk = 1;
     7e8:	0013490b 	andseq	r4, r3, fp, lsl #18
     7ec:	010b4800 	tsteq	fp, r0, lsl #16
		if (aux_timer_inactive) {
     7f0:	2e490000 	cdpcs	0, 4, cr0, cr9, cr0, {0}
			cli_aux;
     7f4:	030c3f01 	movweq	r3, #52993	; 0xcf01
     7f8:	3b0b3a0e 	blcc	2cf038 <__ccfg+0x2af090>
     7fc:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     800:	1201110c 	andne	r1, r1, #12, 2
     804:	010a4001 	tsteq	sl, r1
     808:	4a000013 	bmi	85c <tci_update_delay_ticks+0x40>
     80c:	08030005 	stmdaeq	r3, {r0, r2}
     810:	0b3b0b3a 	bleq	ec3500 <__ccfg+0xea3558>
     814:	13490b39 	movtne	r0, #39737	; 0x9b39
     818:	00000602 	andeq	r0, r0, r2, lsl #12
word tci_update_delay_ticks (Boolean force) {
     81c:	0300344b 	movweq	r3, #1099	; 0x44b
	cli_tim;
     820:	3b0b3a0e 	blcc	2cf060 <__ccfg+0x2af0b8>
     824:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	if (setdel) {
     828:	000a0213 	andeq	r0, sl, r3, lsl r2
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     82c:	000a4c00 	andeq	r4, sl, r0, lsl #24
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     830:	0b3a0e03 	bleq	e84044 <__ccfg+0xe6409c>
     834:	0b390b3b 	bleq	e43528 <__ccfg+0xe23580>
     838:	00000111 	andeq	r0, r0, r1, lsl r1
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     83c:	31001d4d 	tstcc	r0, sp, asr #26
				AON_RTC_O_CH0CMP)) - gettav ());
     840:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
	return NO;
     844:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
			setdel = 0;
     848:	000b570b 	andeq	r5, fp, fp, lsl #14
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     84c:	002e4e00 	eoreq	r4, lr, r0, lsl #28
     850:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
}
     854:	0b3b0b3a 	bleq	ec3544 <__ccfg+0xea359c>
		sti_tim;
     858:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
		return YES;
     85c:	01120111 	tsteq	r2, r1, lsl r1
     860:	00000a40 	andeq	r0, r0, r0, asr #20
     864:	0300054f 	movweq	r0, #1359	; 0x54f
     868:	3b0b3a08 	blcc	2cf090 <__ccfg+0x2af0e8>
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     86c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	UARTDisable (UART0_BASE);
     870:	000a0213 	andeq	r0, sl, r3, lsl r2
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     874:	012e5000 			; <UNDEFINED> instruction: 0x012e5000
	UARTDisable (UART0_BASE);
     878:	0b3a0e03 	bleq	e8408c <__ccfg+0xe640e4>
	UARTConfigSetExpClk (UART0_BASE,
     87c:	0b390b3b 	bleq	e43570 <__ccfg+0xe235c8>
     880:	0b200c27 	bleq	803924 <__ccfg+0x7e397c>
     884:	00001301 	andeq	r1, r0, r1, lsl #6
     888:	03000551 	movweq	r0, #1361	; 0x551
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     88c:	3b0b3a08 	blcc	2cf0b4 <__ccfg+0x2af10c>
     890:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     894:	52000013 	andpl	r0, r0, #19
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     898:	0e03012e 	adfeqsp	f0, f3, #0.5
     89c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     8a0:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
	urates [0] = rate;
     8a4:	13010b20 	movwne	r0, #6944	; 0x1b20
}
     8a8:	05530000 	ldrbeq	r0, [r3, #-0]
     8ac:	3a0e0300 	bcc	3814b4 <__ccfg+0x36150c>
     8b0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     8b4:	0013490b 	andseq	r4, r3, fp, lsl #18
     8b8:	002e5400 	eoreq	r5, lr, r0, lsl #8
     8bc:	0b3a0e03 	bleq	e840d0 <__ccfg+0xe64128>
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     8c0:	0b390b3b 	bleq	e435b4 <__ccfg+0xe2360c>
     8c4:	0b200c27 	bleq	803968 <__ccfg+0x7e39c0>
     8c8:	2e550000 	cdpcs	0, 5, cr0, cr5, cr0, {0}
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     8cc:	3a0e0301 	bcc	3814d8 <__ccfg+0x361530>
     8d0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     8d4:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     8d8:	010b2013 	tsteq	fp, r3, lsl r0
	__pi_uart_setrate (urates [0], __pi_uart);
     8dc:	56000013 			; <UNDEFINED> instruction: 0x56000013
     8e0:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
     8e4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     8e8:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     8ec:	00000b20 	andeq	r0, r0, r0, lsr #22
     8f0:	03002e57 	movweq	r2, #3671	; 0xe57
     8f4:	3b0b3a0e 	blcc	2cf134 <__ccfg+0x2af18c>
	switch (operation) {
     8f8:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
static int ioreq_uart_a (int operation, char *buf, int len) {
     8fc:	2013490c 	andscs	r4, r3, ip, lsl #18
     900:	5800000b 	stmdapl	r0, {r0, r1, r3}
     904:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
     908:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     90c:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
				*buf++ = uart_a_read;
     910:	0b201349 	bleq	80563c <__ccfg+0x7e5694>
     914:	2e590000 	cdpcs	0, 5, cr0, cr9, cr0, {0}
			while (len && uart_a_char_available) {
     918:	11133101 	tstne	r3, r1, lsl #2
     91c:	40011201 	andmi	r1, r1, r1, lsl #4
     920:	0000000a 	andeq	r0, r0, sl
			if (len != operation) {
     924:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
}
     928:	030b130e 	movweq	r1, #45838	; 0xb30e
     92c:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
			uart_a_disable_int;
     930:	10011106 	andne	r1, r1, r6, lsl #2
			if (uart_a_char_available) {
     934:	02000006 	andeq	r0, r0, #6
				*buf++ = uart_a_read;
     938:	0b0b0024 	bleq	2c09d0 <__ccfg+0x2a0a28>
			uart_a_disable_int;
     93c:	0e030b3e 	vmoveq.16	d3[0], r0
     940:	16030000 	strne	r0, [r3], -r0
			if (uart_a_char_available) {
     944:	3a0e0300 	bcc	38154c <__ccfg+0x3615a4>
     948:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
				uart_a_enable_int;
     94c:	0013490b 	andseq	r4, r3, fp, lsl #18
     950:	00240400 	eoreq	r0, r4, r0, lsl #8
				goto Redo_rx;
     954:	0b3e0b0b 	bleq	f83588 <__ccfg+0xf635e0>
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     958:	00000803 	andeq	r0, r0, r3, lsl #16
     95c:	03011305 	movweq	r1, #4869	; 0x1305
			return -2;
     960:	3a0b0b0e 	bcc	2c35a0 <__ccfg+0x2a35f8>
     964:	010b3b0b 	tsteq	fp, fp, lsl #22
				uart_a_write (*buf);
     968:	06000013 			; <UNDEFINED> instruction: 0x06000013
     96c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
			while (len && uart_a_room_in_tx) {
     970:	0b381349 	bleq	e0569c <__ccfg+0xde56f4>
     974:	00000c34 	andeq	r0, r0, r4, lsr ip
     978:	0b000f07 	bleq	459c <port_confs+0x4>
			if (len != operation) {
     97c:	0800000b 	stmdaeq	r0, {r0, r1, r3}
			uart_a_disable_int;
     980:	13490026 	movtne	r0, #36902	; 0x9026
     984:	35090000 	strcc	r0, [r9, #-0]
			if (uart_a_room_in_tx) {
     988:	00134900 	andseq	r4, r3, r0, lsl #18
     98c:	000f0a00 	andeq	r0, pc, r0, lsl #20
				uart_a_enable_int;
     990:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     994:	130b0000 	movwne	r0, #45056	; 0xb000
				*buf++ = uart_a_read;
     998:	3a0b0b01 	bcc	2c35a4 <__ccfg+0x2a35fc>
			if (uart_a_room_in_tx) {
     99c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
				uart_a_write (*buf);
     9a0:	0013010b 	andseq	r0, r3, fp, lsl #2
     9a4:	000d0c00 	andeq	r0, sp, r0, lsl #24
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     9a8:	0b3a0e03 	bleq	e841bc <__ccfg+0xe64214>
     9ac:	0b390b3b 	bleq	e436a0 <__ccfg+0xe236f8>
			uart_a_enable_int;
     9b0:	0b0b1349 	bleq	2c56dc <__ccfg+0x2a5734>
     9b4:	0b0c0b0d 	bleq	3035f0 <__ccfg+0x2e3648>
     9b8:	00000b38 	andeq	r0, r0, r8, lsr fp
			return 0;
     9bc:	03000d0d 	movweq	r0, #3341	; 0xd0d
			if (len == UART_CNTRL_SETRATE) {
     9c0:	3b0b3a0e 	blcc	2cf200 <__ccfg+0x2af258>
				if (__pi_uart_setrate (*((word*)buf),
     9c4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     9c8:	000b3813 	andeq	r3, fp, r3, lsl r8
     9cc:	00340e00 	eorseq	r0, r4, r0, lsl #28
				syserror (EREQPAR, "uar");
     9d0:	0b3a0e03 	bleq	e841e4 <__ccfg+0xe6423c>
			syserror (ENOOPER, "uai");
     9d4:	0b390b3b 	bleq	e436c8 <__ccfg+0xe23720>
			if (len == UART_CNTRL_GETRATE) {
     9d8:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 8bc <__pi_uart_setrate+0x50>
				return 1;
     9dc:	00000c3c 	andeq	r0, r0, ip, lsr ip
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     9e0:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
			syserror (ENOOPER, "uai");
     9e4:	00130113 	andseq	r0, r3, r3, lsl r1
     9e8:	00211000 	eoreq	r1, r1, r0
     9ec:	16110000 	ldrne	r0, [r1], -r0
     9f0:	3a0e0300 	bcc	3815f8 <__ccfg+0x361650>
     9f4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     9f8:	0013490b 	andseq	r4, r3, fp, lsl #18
     9fc:	01151200 	tsteq	r5, r0, lsl #4
     a00:	13010c27 	movwne	r0, #7207	; 0x1c27
     a04:	05130000 	ldreq	r0, [r3, #-0]
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     a08:	00134900 	andseq	r4, r3, r0, lsl #18
void UART0IntHandler () {
     a0c:	00341400 	eorseq	r1, r4, r0, lsl #8
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     a10:	0b3a0e03 	bleq	e84224 <__ccfg+0xe6427c>
     a14:	0b39053b 	bleq	e41f08 <__ccfg+0xe21f60>
     a18:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 8fc <ioreq_uart_a+0x4>
     a1c:	00000c3c 	andeq	r0, r0, ip, lsr ip
     a20:	0b011315 	bleq	4567c <__ccfg+0x256d4>
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     a24:	3b0b3a0b 	blcc	2cf258 <__ccfg+0x2af2b0>
     a28:	010b3905 	tsteq	fp, r5, lsl #18
		RISE_N_SHINE;
     a2c:	16000013 			; <UNDEFINED> instruction: 0x16000013
     a30:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
		i_trigger (devevent (UART_A, READ));
     a34:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     a38:	13490b39 	movtne	r0, #39737	; 0x9b39
     a3c:	00000b38 	andeq	r0, r0, r8, lsr fp
     a40:	03011317 	movweq	r1, #4887	; 0x1317
     a44:	3a0b0b0e 	bcc	2c3684 <__ccfg+0x2a36dc>
     a48:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     a4c:	0013010b 	andseq	r0, r3, fp, lsl #2
     a50:	00211800 	eoreq	r1, r1, r0, lsl #16
     a54:	0b2f1349 	bleq	bc5780 <__ccfg+0xba57d8>
     a58:	15190000 	ldrne	r0, [r9, #-0]
     a5c:	490c2701 	stmdbmi	ip, {r0, r8, r9, sl, sp}
     a60:	00130113 	andseq	r0, r3, r3, lsl r1
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     a64:	00341a00 	eorseq	r1, r4, r0, lsl #20
     a68:	0b3a1347 	bleq	e8578c <__ccfg+0xe657e4>
     a6c:	0b390b3b 	bleq	e43760 <__ccfg+0xe237b8>
		i_trigger (devevent (UART_A, WRITE));
     a70:	00000a02 	andeq	r0, r0, r2, lsl #20
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     a74:	0300341b 	movweq	r3, #1051	; 0x41b
     a78:	3b0b3a0e 	blcc	2cf2b8 <__ccfg+0x2af310>
		RISE_N_SHINE;
     a7c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     a80:	020c3f13 	andeq	r3, ip, #19, 30	; 0x4c
     a84:	1c00000a 	stcne	0, cr0, [r0], {10}
		i_trigger (devevent (UART_A, WRITE));
     a88:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     a8c:	0b3b0b3a 	bleq	ec377c <__ccfg+0xea37d4>
     a90:	13490b39 	movtne	r0, #39737	; 0x9b39
     a94:	00000a02 	andeq	r0, r0, r2, lsl #20
     a98:	0300341d 	movweq	r3, #1053	; 0x41d
     a9c:	3b0b3a0e 	blcc	2cf2dc <__ccfg+0x2af334>
     aa0:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     aa4:	000a0213 	andeq	r0, sl, r3, lsl r2
     aa8:	002e1e00 	eoreq	r1, lr, r0, lsl #28
     aac:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     ab0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
}
     ab4:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     ab8:	01111349 	tsteq	r1, r9, asr #6
     abc:	0a400112 	beq	1000f0c <__ccfg+0xfe0f64>
     ac0:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
     ac4:	030c3f01 	movweq	r3, #52993	; 0xcf01
void __buttons_setirq (int val) {
     ac8:	3b0b3a0e 	blcc	2cf308 <__ccfg+0x2af360>
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     acc:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     ad0:	1201110c 	andne	r1, r1, #12, 2
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     ad4:	010a4001 	tsteq	sl, r1
     ad8:	20000013 	andcs	r0, r0, r3, lsl r0
     adc:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
		bn = BUTTON_GPIO (__button_list [i]);
     ae0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     ae4:	13490b39 	movtne	r0, #39737	; 0x9b39
     ae8:	00000602 	andeq	r0, r0, r2, lsl #12
     aec:	00001821 	andeq	r1, r0, r1, lsr #16
     af0:	00342200 	eorseq	r2, r4, r0, lsl #4
     af4:	0b3a0803 	bleq	e82b08 <__ccfg+0xe62b60>
     af8:	0b39053b 	bleq	e41fec <__ccfg+0xe22044>
}
     afc:	06021349 	streq	r1, [r2], -r9, asr #6
     b00:	34230000 	strtcc	r0, [r3], #-0
     b04:	3a080300 	bcc	20170c <__ccfg+0x1e1764>
     b08:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
void __pinlist_setirq (int val) {
     b0c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	for (i = 0; i < N_PINLIST; i++) {
     b10:	2400000a 	strcs	r0, [r0], #-10
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     b14:	08030034 	stmdaeq	r3, {r2, r4, r5}
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     b18:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	for (i = 0; i < N_PINLIST; i++) {
     b1c:	13490b39 	movtne	r0, #39737	; 0x9b39
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     b20:	0a250000 	beq	940b28 <__ccfg+0x920b80>
     b24:	3a0e0300 	bcc	38172c <__ccfg+0x361784>
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     b28:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     b2c:	0001110b 	andeq	r1, r1, fp, lsl #2
     b30:	010b2600 	tsteq	fp, r0, lsl #12
	for (i = 0; i < N_PINLIST; i++) {
     b34:	01120111 	tsteq	r2, r1, lsl r1
}
     b38:	00001301 	andeq	r1, r0, r1, lsl #6
     b3c:	55010b27 	strpl	r0, [r1, #-2855]	; 0xfffff4d9
     b40:	00130106 	andseq	r0, r3, r6, lsl #2
     b44:	011d2800 	tsteq	sp, r0, lsl #16
void GPIOIntHandler () {
     b48:	01521331 	cmpeq	r2, r1, lsr r3
if (buttons_int) {
     b4c:	0b580655 	bleq	16024a8 <__ccfg+0x15e2500>
     b50:	0b570559 	bleq	15c20bc <__ccfg+0x15a2114>
	buttons_disable ();
     b54:	05290000 	streq	r0, [r9, #-0]!
     b58:	00133100 	andseq	r3, r3, r0, lsl #2
	i_trigger ((aword)&__button_list);
     b5c:	012e2a00 			; <UNDEFINED> instruction: 0x012e2a00
     b60:	0b3a0e03 	bleq	e84374 <__ccfg+0xe643cc>
     b64:	0b39053b 	bleq	e42058 <__ccfg+0xe220b0>
     b68:	01110c27 	tsteq	r1, r7, lsr #24
     b6c:	0a400112 	beq	1000fbc <__ccfg+0xfe1014>
     b70:	00001301 	andeq	r1, r0, r1, lsl #6
     b74:	0300052b 	movweq	r0, #1323	; 0x52b
     b78:	3b0b3a08 	blcc	2cf3a0 <__ccfg+0x2af3f8>
     b7c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     b80:	00060213 	andeq	r0, r6, r3, lsl r2
     b84:	012e2c00 			; <UNDEFINED> instruction: 0x012e2c00
	RISE_N_SHINE;
     b88:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     b8c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     b90:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
if (pin_sensor_int) {
     b94:	01111349 	tsteq	r1, r9, asr #6
     b98:	0a400112 	beq	1000fe8 <__ccfg+0xfe1040>
	i_trigger ((aword)(&__input_pins));
     b9c:	00001301 	andeq	r1, r0, r1, lsl #6
     ba0:	0300342d 	movweq	r3, #1069	; 0x42d
     ba4:	3b0b3a0e 	blcc	2cf3e4 <__ccfg+0x2af43c>
     ba8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     bac:	00060213 	andeq	r0, r6, r3, lsl r2
     bb0:	012e2e00 			; <UNDEFINED> instruction: 0x012e2e00
     bb4:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     bb8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     bbc:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     bc0:	13010b20 	movwne	r0, #6944	; 0x1b20
     bc4:	052f0000 	streq	r0, [pc, #-0]!	; bcc <GPIOIntHandler+0x84>
	__pinsen_disable_and_clear;
     bc8:	3a080300 	bcc	2017d0 <__ccfg+0x1e1828>
	RISE_N_SHINE;
     bcc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     bd0:	0013490b 	andseq	r4, r3, fp, lsl #18
     bd4:	012e3000 			; <UNDEFINED> instruction: 0x012e3000
}
     bd8:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     bdc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     be0:	01110b39 	tsteq	r1, r9, lsr fp
     be4:	0a400112 	beq	1001034 <__ccfg+0xfe108c>
     be8:	00001301 	andeq	r1, r0, r1, lsl #6
void system_init () {
     bec:	3f012e31 	svccc	0x00012e31
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     bf0:	3a08030c 	bcc	201828 <__ccfg+0x1e1880>
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     bf4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     bf8:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     bfc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     c00:	010a4001 	tsteq	sl, r1
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     c04:	32000013 	andcc	r0, r0, #19
     c08:	08030005 	stmdaeq	r3, {r0, r2}
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     c0c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     c10:	13490b39 	movtne	r0, #39737	; 0x9b39
     c14:	00000a02 	andeq	r0, r0, r2, lsl #20
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     c18:	3f002e33 	svccc	0x00002e33
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     c1c:	3a0e030c 	bcc	381854 <__ccfg+0x3618ac>
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     c20:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     c24:	110c270b 	tstne	ip, fp, lsl #14
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     c28:	40011201 	andmi	r1, r1, r1, lsl #4
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     c2c:	3400000a 	strcc	r0, [r0], #-10
		pin = (port_confs [i] >> 19) & 0x1f;
     c30:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     c34:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		pin = (port_confs [i] >> 19) & 0x1f;
     c38:	13490b39 	movtne	r0, #39737	; 0x9b39
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     c3c:	00000a02 	andeq	r0, r0, r2, lsl #20
     c40:	03000535 	movweq	r0, #1333	; 0x535
     c44:	3b0b3a0e 	blcc	2cf484 <__ccfg+0x2af4dc>
     c48:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
		if (port_confs [i] & 0x80)
     c4c:	36000013 			; <UNDEFINED> instruction: 0x36000013
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     c50:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
     c54:	2e370000 	cdpcs	0, 3, cr0, cr7, cr0, {0}
		if (port_confs [i] & 0x40)
     c58:	030c3f01 	movweq	r3, #52993	; 0xcf01
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     c5c:	3b0b3a0e 	blcc	2cf49c <__ccfg+0x2af4f4>
     c60:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     c64:	010b200c 	tsteq	fp, ip
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     c68:	38000013 	stmdacc	r0, {r0, r1, r4}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     c6c:	08030005 	stmdaeq	r3, {r0, r2}
	all_leds_blink;
     c70:	0b3b0b3a 	bleq	ec3960 <__ccfg+0xea39b8>
     c74:	13490b39 	movtne	r0, #39737	; 0x9b39
     c78:	05390000 	ldreq	r0, [r9, #-0]!
     c7c:	3a0e0300 	bcc	381884 <__ccfg+0x3618dc>
     c80:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     c84:	0013490b 	andseq	r4, r3, fp, lsl #18
     c88:	00343a00 	eorseq	r3, r4, r0, lsl #20
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     c8c:	0b3a0803 	bleq	e82ca0 <__ccfg+0xe62cf8>
     c90:	0b390b3b 	bleq	e43984 <__ccfg+0xe239dc>
     c94:	00001349 	andeq	r1, r0, r9, asr #6
     c98:	03000a3b 	movweq	r0, #2619	; 0xa3b
     c9c:	3b0b3a08 	blcc	2cf4c4 <__ccfg+0x2af51c>
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     ca0:	000b3905 	andeq	r3, fp, r5, lsl #18
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     ca4:	012e3c00 			; <UNDEFINED> instruction: 0x012e3c00
     ca8:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
	IntEnable (INT_AON_RTC_COMB);
     cac:	0b3b0b3a 	bleq	ec399c <__ccfg+0xea39f4>
     cb0:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     cb4:	01120111 	tsteq	r2, r1, lsl r1
	__pi_malloc_init ();
     cb8:	13010a40 	movwne	r0, #6720	; 0x1a40
	IntEnable (INT_AON_GPIO_EDGE);
     cbc:	053d0000 	ldreq	r0, [sp, #-0]!
     cc0:	3a080300 	bcc	2018c8 <__ccfg+0x1e1920>
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     cc4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     cc8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     ccc:	3e000006 	cdpcc	0, 0, cr0, cr0, cr6, {0}
     cd0:	08030034 	stmdaeq	r3, {r2, r4, r5}
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     cd4:	0b3b0b3a 	bleq	ec39c4 <__ccfg+0xea3a1c>
     cd8:	13490b39 	movtne	r0, #39737	; 0x9b39
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     cdc:	00000602 	andeq	r0, r0, r2, lsl #12
     ce0:	3f002e3f 	svccc	0x00002e3f
     ce4:	3a0e030c 	bcc	38191c <__ccfg+0x361974>
	urates [0] = UART_RATE / 100;
     ce8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     cec:	110c270b 	tstne	ip, fp, lsl #14
	reinit_uart ();
     cf0:	40011201 	andmi	r1, r1, r1, lsl #4
	EXTRA_INITIALIZERS;
     cf4:	4000000a 	andmi	r0, r0, sl
     cf8:	0e03012e 	adfeqsp	f0, f3, #0.5
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     cfc:	0b3b0b3a 	bleq	ec39ec <__ccfg+0xea3a44>
     d00:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     d04:	0b201349 	bleq	805a30 <__ccfg+0x7e5a88>
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     d08:	00001301 	andeq	r1, r0, r1, lsl #6
     d0c:	03012e41 	movweq	r2, #7745	; 0x1e41
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     d10:	3b0b3a0e 	blcc	2cf550 <__ccfg+0x2af5a8>
     d14:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
			devinit [i] . init (devinit [i] . param);
     d18:	2013490c 	andscs	r4, r3, ip, lsl #18
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     d1c:	0013010b 	andseq	r0, r3, fp, lsl #2
     d20:	012e4200 			; <UNDEFINED> instruction: 0x012e4200
     d24:	01111331 	tsteq	r1, r1, lsr r3
	IntEnable (INT_UART0_COMB);
     d28:	0a400112 	beq	1001178 <__ccfg+0xfe11d0>
     d2c:	00001301 	andeq	r1, r0, r1, lsl #6
}
     d30:	31000543 	tstcc	r0, r3, asr #10
	tci_run_auxiliary_timer ();
     d34:	00060213 	andeq	r0, r6, r3, lsl r2
		diag ("");
     d38:	00344400 	eorseq	r4, r4, r0, lsl #8
     d3c:	06021331 			; <UNDEFINED> instruction: 0x06021331
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     d40:	1d450000 	stclne	0, cr0, [r5, #-0]
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     d44:	11133101 	tstne	r3, r1, lsl #2
		diag ("Leftover RAM: %d bytes",
     d48:	58011201 	stmdapl	r1, {r0, r9, ip}
     d4c:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
     d50:	4600000b 	strmi	r0, [r0], -fp
     d54:	13310034 	teqne	r1, #52	; 0x34
     d58:	1d470000 	stclne	0, cr0, [r7, #-0]
     d5c:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
     d60:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
     d64:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
     d68:	4800000b 	stmdami	r0, {r0, r1, r3}
     d6c:	1331000a 	teqne	r1, #10
     d70:	00000111 	andeq	r0, r0, r1, lsl r1
     d74:	31011d49 	tstcc	r1, r9, asr #26
     d78:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     d7c:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
     d80:	000b5705 	andeq	r5, fp, r5, lsl #14
     d84:	012e4a00 			; <UNDEFINED> instruction: 0x012e4a00
     d88:	01111331 	tsteq	r1, r1, lsr r3
     d8c:	0a400112 	beq	10011dc <__ccfg+0xfe1234>
     d90:	01000000 	mrseq	r0, (UNDEF: 0)
     d94:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     d98:	0e030b13 	vmoveq.32	d3[0], r0
     d9c:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
     da0:	06100111 			; <UNDEFINED> instruction: 0x06100111
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
     da4:	24020000 	strcs	r0, [r2], #-0
     da8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     dac:	000e030b 	andeq	r0, lr, fp, lsl #6
     db0:	00160300 	andseq	r0, r6, r0, lsl #6
     db4:	0b3a0e03 	bleq	e845c8 <__ccfg+0xe64620>
     db8:	0b390b3b 	bleq	e43aac <__ccfg+0xe23b04>
     dbc:	00001349 	andeq	r1, r0, r9, asr #6
     dc0:	0b002404 	bleq	9dd8 <__exidx_end+0x4d30>
}
     dc4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
__attribute__ ((noreturn)) void __pi_release () {
     dc8:	05000008 	streq	r0, [r0, #-8]
     dcc:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     dd0:	0b3a0b0b 	bleq	e83a04 <__ccfg+0xe63a5c>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     dd4:	13010b3b 	movwne	r0, #6971	; 0x1b3b
	check_stack_overflow;
     dd8:	0d060000 	stceq	0, cr0, [r6, #-0]
     ddc:	490e0300 	stmdbmi	lr, {r8, r9}
     de0:	340b3813 	strcc	r3, [fp], #-2067	; 0xfffff7ed
	update_n_wake (MAX_WORD, NO);
     de4:	0700000c 	streq	r0, [r0, -ip]
     de8:	0b0b000f 	bleq	2c0e2c <__ccfg+0x2a0e84>
     dec:	26080000 	strcs	r0, [r8], -r0
	for_all_tasks (__pi_curr) {
     df0:	00134900 	andseq	r4, r3, r0, lsl #18
     df4:	00350900 	eorseq	r0, r5, r0, lsl #18
     df8:	00001349 	andeq	r1, r0, r9, asr #6
  __ASM volatile ("cpsid i" : : : "memory");
     dfc:	0b000f0a 	bleq	4a2c <patchGenfskRfe+0x308>
	__SLEEP;
     e00:	0013490b 	andseq	r4, r3, fp, lsl #18
     e04:	01130b00 	tsteq	r3, r0, lsl #22
     e08:	0b3a0b0b 	bleq	e83a3c <__ccfg+0xe63a94>
     e0c:	0b390b3b 	bleq	e43b00 <__ccfg+0xe23b58>
	system_event_count ++;
     e10:	00001301 	andeq	r1, r0, r1, lsl #6
     e14:	03000d0c 	movweq	r0, #3340	; 0xd0c
	switch (__pi_systat.effpdm) {
     e18:	3b0b3a0e 	blcc	2cf658 <__ccfg+0x2af6b0>
     e1c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     e20:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
     e24:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
			__WFI ();
     e28:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
     e2c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     e30:	0b3b0b3a 	bleq	ec3b20 <__ccfg+0xea3b78>
	check_stack_overflow;
     e34:	13490b39 	movtne	r0, #39737	; 0x9b39
     e38:	00000b38 	andeq	r0, r0, r8, lsr fp
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     e3c:	0300340e 	movweq	r3, #1038	; 0x40e
     e40:	3b0b3a0e 	blcc	2cf680 <__ccfg+0x2af6d8>
			(__pi_curr->code) (tstate (__pi_curr));
     e44:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
			goto Redo;
     e48:	3c0c3f13 	stccc	15, cr3, [ip], {19}
	for_all_tasks (__pi_curr) {
     e4c:	0f00000c 	svceq	0x0000000c
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     e50:	13490101 	movtne	r0, #37121	; 0x9101
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     e54:	00001301 	andeq	r1, r0, r1, lsl #6
     e58:	00002110 	andeq	r2, r0, r0, lsl r1
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     e5c:	00161100 	andseq	r1, r6, r0, lsl #2
     e60:	0b3a0e03 	bleq	e84674 <__ccfg+0xe646cc>
     e64:	0b39053b 	bleq	e42358 <__ccfg+0xe223b0>
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     e68:	00001349 	andeq	r1, r0, r9, asr #6
     e6c:	27011512 	smladcs	r1, r2, r5, r1
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     e70:	0013010c 	andseq	r0, r3, ip, lsl #2
     e74:	00051300 	andeq	r1, r5, r0, lsl #6
			__WFI ();
     e78:	00001349 	andeq	r1, r0, r9, asr #6
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     e7c:	03003414 	movweq	r3, #1044	; 0x414
     e80:	3b0b3a0e 	blcc	2cf6c0 <__ccfg+0x2af718>
}
     e84:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     e88:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     e8c:	1500000c 	strne	r0, [r0, #-12]
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     e90:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
     e94:	13011349 	movwne	r1, #4937	; 0x1349
			PRCMPowerDomainOff (__pi_systat.ondmns |
     e98:	13160000 	tstne	r6, #0
     e9c:	0b0e0301 	bleq	381aa8 <__ccfg+0x361b00>
     ea0:	3b0b3a0b 	blcc	2cf6d4 <__ccfg+0x2af72c>
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     ea4:	010b390b 	tsteq	fp, fp, lsl #18
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ea8:	17000013 	smladne	r0, r3, r0, r0
     eac:	0b0b0117 	bleq	2c1310 <__ccfg+0x2a1368>
     eb0:	0b3b0b3a 	bleq	ec3ba0 <__ccfg+0xea3bf8>
     eb4:	13010b39 	movwne	r0, #6969	; 0x1b39
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     eb8:	0d180000 	ldceq	0, cr0, [r8, #-0]
     ebc:	3a0e0300 	bcc	381ac4 <__ccfg+0x361b1c>
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     ec0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     ec4:	0013490b 	andseq	r4, r3, fp, lsl #18
     ec8:	000d1900 	andeq	r1, sp, r0, lsl #18
     ecc:	0b3a0803 	bleq	e82ee0 <__ccfg+0xe62f38>
     ed0:	0b390b3b 	bleq	e43bc4 <__ccfg+0xe23c1c>
     ed4:	00001349 	andeq	r1, r0, r9, asr #6
			SysCtrlSetRechargeBeforePowerDown
     ed8:	03000d1a 	movweq	r0, #3354	; 0xd1a
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     edc:	3b0b3a08 	blcc	2cf704 <__ccfg+0x2af75c>
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     ee0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     ee4:	000b3813 	andeq	r3, fp, r3, lsl r8
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     ee8:	01131b00 	tsteq	r3, r0, lsl #22
     eec:	0b3a0b0b 	bleq	e83b20 <__ccfg+0xe63b78>
     ef0:	0b39053b 	bleq	e423e4 <__ccfg+0xe2243c>
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     ef4:	00001301 	andeq	r1, r0, r1, lsl #6
     ef8:	03000d1c 	movweq	r0, #3356	; 0xd1c
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     efc:	3b0b3a0e 	blcc	2cf73c <__ccfg+0x2af794>
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     f00:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     f04:	000b3813 	andeq	r3, fp, r3, lsl r8
     f08:	01131d00 	tsteq	r3, r0, lsl #26
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     f0c:	0b0b0e03 	bleq	2c4720 <__ccfg+0x2a4778>
			while (!(AONWUCPowerStatusGet () &
     f10:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			PRCMPowerDomainOn (__pi_systat.ondmns);
     f14:	13010b39 	movwne	r0, #6969	; 0x1b39
     f18:	211e0000 	tstcs	lr, r0
     f1c:	2f134900 	svccs	0x00134900
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     f20:	1f00000b 	svcne	0x0000000b
     f24:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     f28:	0b3b0b3a 	bleq	ec3c18 <__ccfg+0xea3c70>
     f2c:	13490b39 	movtne	r0, #39737	; 0x9b39
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     f30:	00000a02 	andeq	r0, r0, r2, lsl #20
     f34:	3f002e20 	svccc	0x00002e20
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     f38:	3a0e030c 	bcc	381b70 <__ccfg+0x361bc8>
     f3c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
			SysCtrlAdjustRechargeAfterPowerDown ();
     f40:	110c270b 	tstne	ip, fp, lsl #14
			reinit_uart ();
     f44:	40011201 	andmi	r1, r1, r1, lsl #4
     f48:	2100000a 	tstcs	r0, sl
     f4c:	0c3f012e 	ldfeqs	f0, [pc], #-184	; e9c <__pi_release+0xd4>
}
     f50:	0b3a0e03 	bleq	e84764 <__ccfg+0xe647bc>
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     f54:	0b39053b 	bleq	e42448 <__ccfg+0xe224a0>
     f58:	13490c27 	movtne	r0, #39975	; 0x9c27
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     f5c:	01120111 	tsteq	r2, r1, lsl r1
     f60:	13010a40 	movwne	r0, #6720	; 0x1a40
     f64:	05220000 	streq	r0, [r2, #-0]!
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     f68:	3a080300 	bcc	201b70 <__ccfg+0x1e1bc8>
     f6c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     f70:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     f74:	23000006 	movwcs	r0, #6
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     f78:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     f7c:	06550152 			; <UNDEFINED> instruction: 0x06550152
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     f80:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
     f84:	00000b57 	andeq	r0, r0, r7, asr fp
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     f88:	31000524 	tstcc	r0, r4, lsr #10
     f8c:	00060213 	andeq	r0, r6, r3, lsl r2
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     f90:	010b2500 	tsteq	fp, r0, lsl #10
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     f94:	00000655 	andeq	r0, r0, r5, asr r6
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     f98:	31003426 	tstcc	r0, r6, lsr #8
     f9c:	00060213 	andeq	r0, r6, r3, lsl r2
			PRCMPowerDomainOff (
     fa0:	012e2700 			; <UNDEFINED> instruction: 0x012e2700
     fa4:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
	__SLEEP;
     fa8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     fac:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
  __ASM volatile ("cpsie i" : : : "memory");
     fb0:	01120111 	tsteq	r2, r1, lsl r1
	goto Redo;
     fb4:	13010a40 	movwne	r0, #6720	; 0x1a40
     fb8:	34280000 	strtcc	r0, [r8], #-0
     fbc:	3a080300 	bcc	201bc4 <__ccfg+0x1e1c1c>
     fc0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     fc4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     fc8:	29000006 	stmdbcs	r0, {r1, r2}
     fcc:	08030034 	stmdaeq	r3, {r2, r4, r5}
     fd0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     fd4:	13490b39 	movtne	r0, #39737	; 0x9b39
     fd8:	342a0000 	strtcc	r0, [sl], #-0
     fdc:	3a080300 	bcc	201be4 <__ccfg+0x1e1c3c>
     fe0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     fe4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     fe8:	2b00000a 	blcs	1018 <__pi_release+0x250>
     fec:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     ff0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     ff4:	13490b39 	movtne	r0, #39737	; 0x9b39
     ff8:	00000602 	andeq	r0, r0, r2, lsl #12
     ffc:	3f012e2c 	svccc	0x00012e2c
    1000:	3a0e030c 	bcc	381c38 <__ccfg+0x361c90>
    1004:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1008:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    100c:	010b2013 	tsteq	fp, r3, lsl r0
    1010:	2d000013 	stccs	0, cr0, [r0, #-76]	; 0xffffffb4
    1014:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1018:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    101c:	13490b39 	movtne	r0, #39737	; 0x9b39
	cli_tim;
    1020:	052e0000 	streq	r0, [lr, #-0]!
    1024:	3a080300 	bcc	201c2c <__ccfg+0x1e1c84>
    1028:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	diag ("PicOS halted");
    102c:	0013490b 	andseq	r4, r3, fp, lsl #18
	mdelay (500);
    1030:	010b2f00 	tsteq	fp, r0, lsl #30
    1034:	01120111 	tsteq	r2, r1, lsl r1
	setpowermode (2);
    1038:	34300000 	ldrtcc	r0, [r0], #-0
	__PCB = NULL;
    103c:	3a0e0300 	bcc	381c44 <__ccfg+0x361c9c>
	release;
    1040:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1044:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1048:	3100000a 	tstcc	r0, sl
    104c:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
int main (void) {
    1050:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    1054:	01110b39 	tsteq	r1, r9, lsr fp
    1058:	1d320000 	ldcne	0, cr0, [r2, #-0]
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    105c:	11133101 	tstne	r3, r1, lsl #2
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    1060:	58011201 	stmdapl	r1, {r0, r9, ip}
	system_init ();
    1064:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
	tcv_init ();
    1068:	3300000b 	movwcc	r0, #11
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    106c:	13310005 	teqne	r1, #5
    1070:	05340000 	ldreq	r0, [r4, #-0]!
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
    1074:	3a080300 	bcc	201c7c <__ccfg+0x1e1cd4>
    1078:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    107c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    1080:	3500000a 	strcc	r0, [r0, #-10]
    1084:	00000018 	andeq	r0, r0, r8, lsl r0
	delay (16, 0);
    1088:	03003436 	movweq	r3, #1078	; 0x436
    108c:	3b0b3a0e 	blcc	2cf8cc <__ccfg+0x2af924>
    1090:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	__pi_release ();
    1094:	37000013 	smladcc	r0, r3, r0, r0
    1098:	0803012e 	stmdaeq	r3, {r1, r2, r3, r5, r8}
    109c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    10a0:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    10a4:	01111349 	tsteq	r1, r9, asr #6
    10a8:	0a400112 	beq	10014f8 <__ccfg+0xfe1550>
    10ac:	00001301 	andeq	r1, r0, r1, lsl #6
static void killev (__pi_pcb_t *pid) {
    10b0:	03012e38 	movweq	r2, #7736	; 0x1e38
	wfun = (aword)(pid->code);
    10b4:	3b0b3a08 	blcc	2cf8dc <__ccfg+0x2af934>
	for_all_tasks (i) {
    10b8:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
		for (j = 0; j < nevents (i); j++) {
    10bc:	1201110c 	andne	r1, r1, #12, 2
    10c0:	010a4001 	tsteq	sl, r1
    10c4:	39000013 	stmdbcc	r0, {r0, r1, r4}
			    || i->Events [j] . Event == wfun
    10c8:	0e03012e 	adfeqsp	f0, f3, #0.5
		for (j = 0; j < nevents (i); j++) {
    10cc:	0b3b0b3a 	bleq	ec3dbc <__ccfg+0xea3e14>
			if (i->Events [j] . Event == (aword)pid
    10d0:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    10d4:	13010b20 	movwne	r0, #6944	; 0x1b20
    10d8:	053a0000 	ldreq	r0, [sl, #-0]!
				wakeupev (i, j);
    10dc:	3a080300 	bcc	201ce4 <__ccfg+0x1e1d3c>
    10e0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	for_all_tasks (i) {
    10e4:	0013490b 	andseq	r4, r3, fp, lsl #18
}
    10e8:	012e3b00 			; <UNDEFINED> instruction: 0x012e3b00
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    10ec:	0b3a0e03 	bleq	e84900 <__ccfg+0xe64958>
static void qfree (aword *ch) {
    10f0:	0b390b3b 	bleq	e43de4 <__ccfg+0xe23e3c>
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    10f4:	13490c27 	movtne	r0, #39975	; 0x9c27
	cc = (aword*)(mpools + MA_NP);
    10f8:	13010b20 	movwne	r0, #6944	; 0x1b20
	m_setnextp (ch, chunk);
    10fc:	343c0000 	ldrtcc	r0, [ip], #-0
	m_setnextp (cc, ch);
    1100:	3a080300 	bcc	201d08 <__ccfg+0x1e1d60>
}
    1104:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    1108:	0013490b 	andseq	r4, r3, fp, lsl #18
    110c:	012e3d00 			; <UNDEFINED> instruction: 0x012e3d00
    1110:	0b3a0803 	bleq	e83124 <__ccfg+0xe6317c>
			m_setnextp (cc, m_nextp (chunk));
    1114:	0b390b3b 	bleq	e43e08 <__ccfg+0xe23e60>
			m_size (chunk) += m_hdrlen + m_size (ch);
    1118:	0b200c27 	bleq	8041bc <__ccfg+0x7e4214>
    111c:	00001301 	andeq	r1, r0, r1, lsl #6
    1120:	31012e3e 	tstcc	r1, lr, lsr lr
    1124:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    1128:	010a4001 	tsteq	sl, r1
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    112c:	3f000013 	svccc	0x00000013
    1130:	13310005 	teqne	r1, #5
    1134:	00000a02 	andeq	r0, r0, r2, lsl #20
			m_setnextp (cc, m_nextp (chunk));
    1138:	31011d40 	tstcc	r1, r0, asr #26
			m_size (ch) += m_hdrlen + m_size (chunk);
    113c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1140:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
    1144:	000b570b 	andeq	r5, fp, fp, lsl #14
    1148:	011d4100 	tsteq	sp, r0, lsl #2
    114c:	01521331 	cmpeq	r2, r1, lsr r3
    1150:	0b580655 	bleq	1602aac <__ccfg+0x15e2b04>
			if (m_size (chunk) >= m_size (ch))
    1154:	0b570b59 	bleq	15c3ec0 <__ccfg+0x15a3f18>
    1158:	2e420000 	cdpcs	0, 4, cr0, cr2, cr0, {0}
    115c:	11133101 	tstne	r3, r1, lsl #2
		chunk = m_nextp (chunk))
    1160:	40011201 	andmi	r1, r1, r1, lsl #4
    1164:	4300000a 	movwmi	r0, #10
    1168:	13310034 	teqne	r1, #52	; 0x34
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    116c:	01000000 	mrseq	r0, (UNDEF: 0)
	diag_wait (a);
    1170:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
	diag_wchar (c, a);
    1174:	0e030b13 	vmoveq.32	d3[0], r0
    1178:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
}
    117c:	06100111 			; <UNDEFINED> instruction: 0x06100111
    1180:	24020000 	strcs	r0, [r2], #-0
	syserror (ESTATE, "state");
    1184:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1188:	000e030b 	andeq	r0, lr, fp, lsl #6
    118c:	00160300 	andseq	r0, r6, r0, lsl #6
    1190:	0b3a0e03 	bleq	e849a4 <__ccfg+0xe649fc>
	for (i = 0; i < MAX_UTIMERS; i++)
    1194:	0b390b3b 	bleq	e43e88 <__ccfg+0xe23ee0>
void utimer_add (address ut) {
    1198:	00001349 	andeq	r1, r0, r9, asr #6
    119c:	0b002404 	bleq	a1b4 <__exidx_end+0x510c>
		if (__pi_utims [i] == NULL)
    11a0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
	for (i = 0; i < MAX_UTIMERS; i++)
    11a4:	05000008 	streq	r0, [r0, #-8]
    11a8:	0b0b000f 	bleq	2c11ec <__ccfg+0x2a1244>
		syserror (ERESOURCE, "ut a");
    11ac:	00001349 	andeq	r1, r0, r9, asr #6
	__pi_utims [i] = ut;
    11b0:	49002606 	stmdbmi	r0, {r1, r2, r9, sl, sp}
}
    11b4:	07000013 	smladeq	r0, r3, r0, r0
    11b8:	0c270015 	stceq	0, cr0, [r7], #-84	; 0xffffffac
    11bc:	34080000 	strcc	r0, [r8], #-0
	*t = v;
    11c0:	3a0e0300 	bcc	381dc8 <__ccfg+0x361e20>
	TCI_RUN_AUXILIARY_TIMER;
    11c4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
void update_n_wake (word min, Boolean force) {
    11c8:	3f13490b 	svccc	0x0013490b
	if (TCI_UPDATE_DELAY_TICKS (force))
    11cc:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    11d0:	01010900 	tsteq	r1, r0, lsl #18
    11d4:	13011349 	movwne	r1, #4937	; 0x1349
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    11d8:	210a0000 	mrscs	r0, (UNDEF: 10)
    11dc:	2f134900 	svccs	0x00134900
    11e0:	0b00000b 	bleq	1214 <update_n_wake+0x4c>
    11e4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    11e8:	0b3b0b3a 	bleq	ec3ed8 <__ccfg+0xea3f30>
    11ec:	13490b39 	movtne	r0, #39737	; 0x9b39
    11f0:	0a020c3f 	beq	842f4 <__ccfg+0x6434c>
    11f4:	2e0c0000 	cdpcs	0, 0, cr0, cr12, cr0, {0}
    11f8:	3a0e0300 	bcc	381e00 <__ccfg+0x361e58>
    11fc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1200:	110c270b 	tstne	ip, fp, lsl #14
    1204:	40011201 	andmi	r1, r1, r1, lsl #4
    1208:	0d00000a 	stceq	0, cr0, [r0, #-40]	; 0xffffffd8
		for_all_tasks (i) {
    120c:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 115c <qfree+0x70>
	__pi_mintk = znew + min;
    1210:	0b3a0e03 	bleq	e84a24 <__ccfg+0xe64a7c>
    1214:	0b390b3b 	bleq	e43f08 <__ccfg+0xe23f60>
			if (!twaiting (i))
    1218:	01110c27 	tsteq	r1, r7, lsr #24
    121c:	0a400112 	beq	100166c <__ccfg+0xfe16c4>
			if (twakecnd (__pi_old, znew, i->Timer)) {
    1220:	340e0000 	strcc	r0, [lr], #-0
    1224:	3a0e0300 	bcc	381e2c <__ccfg+0x361e84>
    1228:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    122c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1230:	00000006 	andeq	r0, r0, r6
    1234:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    1238:	030b130e 	movweq	r1, #45838	; 0xb30e
    123c:	100e1b0e 	andne	r1, lr, lr, lsl #22
    1240:	02000006 	andeq	r0, r0, #6
    1244:	0b0b0024 	bleq	2c12dc <__ccfg+0x2a1334>
    1248:	0e030b3e 	vmoveq.16	d3[0], r0
    124c:	16030000 	strne	r0, [r3], -r0
				wakeuptm (i);
    1250:	3a0e0300 	bcc	381e58 <__ccfg+0x361eb0>
    1254:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		for_all_tasks (i) {
    1258:	0013490b 	andseq	r4, r3, fp, lsl #18
				d = i->Timer - znew;
    125c:	00240400 	eoreq	r0, r4, r0, lsl #8
    1260:	0b3e0b0b 	bleq	f83e94 <__ccfg+0xf63eec>
    1264:	00000803 	andeq	r0, r0, r3, lsl #16
		if ((word)(__pi_mintk - znew) < min) 
    1268:	0b011305 	bleq	45e84 <__ccfg+0x25edc>
    126c:	3b0b3a0b 	blcc	2cfaa0 <__ccfg+0x2afaf8>
    1270:	010b390b 	tsteq	fp, fp, lsl #18
	__pi_old = znew;
    1274:	06000013 			; <UNDEFINED> instruction: 0x06000013
}
    1278:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
	TCI_RUN_DELAY_TIMER;
    127c:	0b3b0b3a 	bleq	ec3f6c <__ccfg+0xea3fc4>
}
    1280:	13490b39 	movtne	r0, #39737	; 0x9b39
    1284:	00000b38 	andeq	r0, r0, r8, lsr fp
    1288:	49002607 	stmdbmi	r0, {r0, r1, r2, r9, sl, sp}
    128c:	08000013 	stmdaeq	r0, {r0, r1, r4}
    1290:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
void proceed (word state) {
    1294:	0b3b0b3a 	bleq	ec3f84 <__ccfg+0xea3fdc>
	prcdstate (__pi_curr, state);
    1298:	13490b39 	movtne	r0, #39737	; 0x9b39
    129c:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
	release;
    12a0:	35090000 	strcc	r0, [r9, #-0]
    12a4:	00134900 	andseq	r4, r3, r0, lsl #18
void __pi_wait (aword event, word state) {
    12a8:	000d0a00 	andeq	r0, sp, r0, lsl #20
	sint j = nevents (__pi_curr);
    12ac:	0b3a0e03 	bleq	e84ac0 <__ccfg+0xe64b18>
	if (j >= MAX_EVENTS_PER_TASK)
    12b0:	0b390b3b 	bleq	e43fa4 <__ccfg+0xe23ffc>
    12b4:	0b0b1349 	bleq	2c5fe0 <__ccfg+0x2a6038>
    12b8:	0b0c0b0d 	bleq	303ef4 <__ccfg+0x2e3f4c>
		syserror (ENEVENTS, "sw");
    12bc:	00000b38 	andeq	r0, r0, r8, lsr fp
    12c0:	0b000f0b 	bleq	4ef4 <patchImageGenfsk+0x11c>
	setestate (__pi_curr->Events [j], state, event);
    12c4:	0013490b 	andseq	r4, r3, fp, lsl #18
	incwait (__pi_curr);
    12c8:	01010c00 	tsteq	r1, r0, lsl #24
	setestate (__pi_curr->Events [j], state, event);
    12cc:	13011349 	movwne	r1, #4937	; 0x1349
}
    12d0:	210d0000 	mrscs	r0, (UNDEF: 13)
    12d4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    12d8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
void __pi_trigger (aword event) {
    12dc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	for_all_tasks (i) {
    12e0:	13490b39 	movtne	r0, #39737	; 0x9b39
		for (j = 0; j < nevents (i); j++) {
    12e4:	150f0000 	strne	r0, [pc, #-0]	; 12ec <__pi_trigger+0x10>
    12e8:	010c2701 	tsteq	ip, r1, lsl #14
    12ec:	10000013 	andne	r0, r0, r3, lsl r0
    12f0:	13490005 	movtne	r0, #36869	; 0x9005
			if (i->Events [j] . Event == event) {
    12f4:	34110000 	ldrcc	r0, [r1], #-0
    12f8:	3a0e0300 	bcc	381f00 <__ccfg+0x361f58>
    12fc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
				wakeupev (i, j);
    1300:	3f13490b 	svccc	0x0013490b
    1304:	000c3c0c 	andeq	r3, ip, ip, lsl #24
	for_all_tasks (i) {
    1308:	01131200 	tsteq	r3, r0, lsl #4
}
    130c:	0b3a0b0b 	bleq	e83f40 <__ccfg+0xe63f98>
aword __pi_join (aword pid, word st) {
    1310:	0b39053b 	bleq	e42804 <__ccfg+0xe2285c>
	for_all_tasks (i) {
    1314:	00001301 	andeq	r1, r0, r1, lsl #6
    1318:	03000d13 	movweq	r0, #3347	; 0xd13
	return 0;
    131c:	3b0b3a0e 	blcc	2cfb5c <__ccfg+0x2afbb4>
		if ((aword)i == pid) {
    1320:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
			__pi_wait (pid, st);
    1324:	000b3813 	andeq	r3, fp, r3, lsl r8
}
    1328:	01131400 	tsteq	r3, r0, lsl #8
	for_all_tasks (i) {
    132c:	0b0b0e03 	bleq	2c4b40 <__ccfg+0x2a4b98>
    1330:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
void delay (word d, word state) {
    1334:	13010b39 	movwne	r0, #6969	; 0x1b39
	settstate (__pi_curr, state);
    1338:	21150000 	tstcs	r5, r0
    133c:	2f134900 	svccs	0x00134900
    1340:	1600000b 	strne	r0, [r0], -fp
    1344:	13470034 	movtne	r0, #28724	; 0x7034
	update_n_wake (d, YES);
    1348:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    134c:	0a020b39 	beq	84038 <__ccfg+0x64090>
	__pi_curr->Timer = __pi_old + d;
    1350:	01000000 	mrseq	r0, (UNDEF: 0)
    1354:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
	inctimer (__pi_curr);
    1358:	0e030b13 	vmoveq.32	d3[0], r0
    135c:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
    1360:	06100111 			; <UNDEFINED> instruction: 0x06100111
}
    1364:	24020000 	strcs	r0, [r2], #-0
    1368:	3e0b0b00 	vmlacc.f64	d0, d11, d0
	if (fun == NULL)
    136c:	000e030b 	andeq	r0, lr, fp, lsl #6
		return (int) __pi_curr;
    1370:	00160300 	andseq	r0, r6, r0, lsl #6
    1374:	0b3a0e03 	bleq	e84b88 <__ccfg+0xe64be0>
	for_all_tasks (i)
    1378:	0b390b3b 	bleq	e4406c <__ccfg+0xe240c4>
}
    137c:	00001349 	andeq	r1, r0, r9, asr #6
		if (i->code == fun)
    1380:	0b002404 	bleq	a398 <__exidx_end+0x52f0>
	for_all_tasks (i)
    1384:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1388:	05000008 	streq	r0, [r0, #-8]
    138c:	13490026 	movtne	r0, #36902	; 0x9026
int __pi_strlen (const char *s) {
    1390:	35060000 	strcc	r0, [r6, #-0]
	for (i = 0; *(s+i) != '\0'; i++);
    1394:	00134900 	andseq	r4, r3, r0, lsl #18
}
    1398:	000f0700 	andeq	r0, pc, r0, lsl #14
	for (i = 0; *(s+i) != '\0'; i++);
    139c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
	while ((Boolean)(*d++ = *s++));
    13a0:	13080000 	movwne	r0, #32768	; 0x8000
    13a4:	3a0b0b01 	bcc	2c3fb0 <__ccfg+0x2a4008>
    13a8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
}
    13ac:	0013010b 	andseq	r0, r3, fp, lsl #2
	while (n--)
    13b0:	000d0900 	andeq	r0, sp, r0, lsl #18
    13b4:	0b3a0e03 	bleq	e84bc8 <__ccfg+0xe64c20>
		*dest++ = *src++;
    13b8:	0b390b3b 	bleq	e440ac <__ccfg+0xe24104>
    13bc:	0b0b1349 	bleq	2c60e8 <__ccfg+0x2a6140>
    13c0:	0b0c0b0d 	bleq	303ffc <__ccfg+0x2e4054>
	while (n--)
    13c4:	00000b38 	andeq	r0, r0, r8, lsr fp
}
    13c8:	03000d0a 	movweq	r0, #3338	; 0xd0a
		*dest++ = c;
    13cc:	3b0b3a0e 	blcc	2cfc0c <__ccfg+0x2afc64>
void adddevfunc (devreqfun_t rf, int loc) {
    13d0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		syserror (EREQPAR, "addv");
    13d4:	000b3813 	andeq	r3, fp, r3, lsl r8
		syserror (ERESOURCE, "addv");
    13d8:	00340b00 	eorseq	r0, r4, r0, lsl #22
	if (ioreq [loc] != NULL)
    13dc:	0b3a0e03 	bleq	e84bf0 <__ccfg+0xe64c48>
    13e0:	0b390b3b 	bleq	e440d4 <__ccfg+0xe2412c>
		syserror (ERESOURCE, "addv");
    13e4:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 12c8 <__pi_wait+0x20>
	ioreq [loc] = rf;
    13e8:	00000c3c 	andeq	r0, r0, ip, lsr ip
}
    13ec:	4901010c 	stmdbmi	r1, {r2, r3, r8}
    13f0:	00130113 	andseq	r0, r3, r3, lsl r1
sint io (word retry, word dev, word operation, char *buf, word len) {
    13f4:	00210d00 	eoreq	r0, r1, r0, lsl #26
    13f8:	160e0000 	strne	r0, [lr], -r0
    13fc:	3a0e0300 	bcc	382004 <__ccfg+0x36205c>
    1400:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1404:	0013490b 	andseq	r4, r3, fp, lsl #18
    1408:	01150f00 	tsteq	r5, r0, lsl #30
    140c:	13010c27 	movwne	r0, #7207	; 0x1c27
		syserror (ENODEVICE, "io");
    1410:	05100000 	ldreq	r0, [r0, #-0]
    1414:	00134900 	andseq	r4, r3, r0, lsl #18
	if (len == 0)
    1418:	00341100 	eorseq	r1, r4, r0, lsl #2
	ret = (ioreq [dev]) (operation, buf, len);
    141c:	0b3a0e03 	bleq	e84c30 <__ccfg+0xe64c88>
    1420:	0b39053b 	bleq	e42914 <__ccfg+0xe2296c>
	if (ret >= 0)
    1424:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1308 <__pi_trigger+0x2c>
	if (ret == -1) {
    1428:	00000c3c 	andeq	r0, r0, ip, lsr ip
    142c:	0b011312 	bleq	4607c <__ccfg+0x260d4>
		if (retry == WNONE)
    1430:	3b0b3a0b 	blcc	2cfc64 <__ccfg+0x2afcbc>
		iowait (dev, operation, retry);
    1434:	010b3905 	tsteq	fp, r5, lsl #18
    1438:	13000013 	movwne	r0, #19
    143c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
			release;
    1440:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	if (ret == -2) {
    1444:	13490b39 	movtne	r0, #39737	; 0x9b39
		if (retry != WNONE) {
    1448:	00000b38 	andeq	r0, r0, r8, lsr fp
    144c:	03011314 	movweq	r1, #4884	; 0x1314
			iowait (dev, operation, retry);
    1450:	3a0b0b0e 	bcc	2c4090 <__ccfg+0x2a40e8>
    1454:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
			(ioreq [dev]) (NONE, buf, len);
    1458:	0013010b 	andseq	r0, r3, fp, lsl #2
    145c:	00211500 	eoreq	r1, r1, r0, lsl #10
    1460:	0b2f1349 	bleq	bc618c <__ccfg+0xba61e4>
		(ioreq [dev]) (NONE, buf, len);
    1464:	34160000 	ldrcc	r0, [r6], #-0
    1468:	3a134700 	bcc	4d3070 <__ccfg+0x4b30c8>
    146c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
}
    1470:	000a020b 	andeq	r0, sl, fp, lsl #4
	if (retry != WNONE) {
    1474:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
		delay (-ret - 2, retry);
    1478:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    147c:	0b3b0b3a 	bleq	ec416c <__ccfg+0xea41c4>
    1480:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    1484:	01120111 	tsteq	r2, r1, lsl r1
		release;
    1488:	13010a40 	movwne	r0, #6720	; 0x1a40
    148c:	05180000 	ldreq	r0, [r8, #-0]
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1490:	3a080300 	bcc	202098 <__ccfg+0x1e20f0>
    1494:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1498:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    149c:	19000006 	stmdbne	r0, {r1, r2}
    14a0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
		syserror (ERESOURCE, "mal1");
    14a4:	0b3b0b3a 	bleq	ec4194 <__ccfg+0xea41ec>
    14a8:	13490b39 	movtne	r0, #39737	; 0x9b39
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    14ac:	00000602 	andeq	r0, r0, r2, lsl #12
    14b0:	0300341a 	movweq	r3, #1050	; 0x41a
	m_magic (mpools [0]) = MALLOC_MAGIC;
    14b4:	3b0b3a08 	blcc	2cfcdc <__ccfg+0x2afd34>
	m_size (mpools [0]) = mlen - m_hdrlen;
    14b8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	m_magic (mpools [0]) = MALLOC_MAGIC;
    14bc:	1b000013 	blne	1510 <__pi_free+0x30>
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    14c0:	08030034 	stmdaeq	r3, {r2, r4, r5}
    14c4:	0b3b0b3a 	bleq	ec41b4 <__ccfg+0xea420c>
}
    14c8:	13490b39 	movtne	r0, #39737	; 0x9b39
    14cc:	00000602 	andeq	r0, r0, r2, lsl #12
    14d0:	31001d1c 	tstcc	r0, ip, lsl sp
    14d4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    14d8:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
    14dc:	000b570b 	andeq	r5, fp, fp, lsl #14
void __pi_free (aword *ch) {
    14e0:	011d1d00 	tsteq	sp, r0, lsl #26
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    14e4:	01521331 	cmpeq	r2, r1, lsr r3
    14e8:	0b580655 	bleq	1602e44 <__ccfg+0x15e2e9c>
		syserror (EMALLOC, "malg");
    14ec:	0b570b59 	bleq	15c4258 <__ccfg+0x15a42b0>
    14f0:	051e0000 	ldreq	r0, [lr, #-0]
	mcfree [MA_NP] += m_size (ch);
    14f4:	02133100 	andseq	r3, r3, #0, 2
		m_size (ch) ^= MALLOC_UMASK;
    14f8:	1f000006 	svcne	0x00000006
    14fc:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; 144c <io+0x58>
	mcfree [MA_NP] += m_size (ch);
    1500:	0b3a0e03 	bleq	e84d14 <__ccfg+0xe64d6c>
	QFREE;
    1504:	0b390b3b 	bleq	e441f8 <__ccfg+0xe24250>
	if (mevent [MA_NP] . nwait) {
    1508:	01120111 	tsteq	r2, r1, lsl r1
    150c:	00000a40 	andeq	r0, r0, r0, asr #20
		trigger ((aword)(&(mevent [MA_NP])));
    1510:	03002e20 	movweq	r2, #3616	; 0xe20
		mevent [MA_NP] . nwait --;
    1514:	3b0b3a0e 	blcc	2cfd54 <__ccfg+0x2afdac>
}
    1518:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    151c:	000b200c 	andeq	r2, fp, ip
    1520:	012e2100 			; <UNDEFINED> instruction: 0x012e2100
    1524:	0b3a0e03 	bleq	e84d38 <__ccfg+0xe64d90>
void kill (aword pid) {
    1528:	0b390b3b 	bleq	e4421c <__ccfg+0xe24274>
		pid = (aword) __pi_curr;
    152c:	13490c27 	movtne	r0, #39975	; 0x9c27
	j = NULL;
    1530:	00000b20 	andeq	r0, r0, r0, lsr #22
	for_all_tasks (i) {
    1534:	03000522 	movweq	r0, #1314	; 0x522
	syserror (EREQPAR, "kpi");
    1538:	3b0b3a0e 	blcc	2cfd78 <__ccfg+0x2afdd0>
    153c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		if ((aword)i == pid) {
    1540:	00000013 	andeq	r0, r0, r3, lsl r0
    1544:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
				__PCB = i->Next;
    1548:	030b130e 	movweq	r1, #45838	; 0xb30e
			killev (i);
    154c:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
			ufree (i);
    1550:	10011106 	andne	r1, r1, r6, lsl #2
			if (i == __pi_curr)
    1554:	02000006 	andeq	r0, r0, #6
    1558:	0b0b0024 	bleq	2c15f0 <__ccfg+0x2a1648>
				release;
    155c:	0e030b3e 	vmoveq.16	d3[0], r0
				j->Next = i->Next;
    1560:	16030000 	strne	r0, [r3], -r0
    1564:	3a0e0300 	bcc	38216c <__ccfg+0x3621c4>
    1568:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
}
    156c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1570:	00240400 	eoreq	r0, r4, r0, lsl #8
    1574:	0b3e0b0b 	bleq	f841a8 <__ccfg+0xf64200>
	if (size < 8)
    1578:	00000803 	andeq	r0, r0, r3, lsl #16
		_size = 2;
    157c:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1580:	06000013 			; <UNDEFINED> instruction: 0x06000013
		_size = (((aword)size) + 3) >> 2;
    1584:	13490035 	movtne	r0, #36917	; 0x9035
		if (m_magic (chunk) != MALLOC_MAGIC)
    1588:	13070000 	movwne	r0, #28672	; 0x7000
		_size = (((aword)size) + 3) >> 2;
    158c:	3a0b0b01 	bcc	2c4198 <__ccfg+0x2a41f0>
		if (mevent [MA_NP] . nfail != 255)
    1590:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1594:	0013010b 	andseq	r0, r3, fp, lsl #2
			mevent [MA_NP] . nfail ++;
    1598:	000d0800 	andeq	r0, sp, r0, lsl #16
		mnfree [MA_NP] = 0;
    159c:	0b3a0e03 	bleq	e84db0 <__ccfg+0xe64e08>
    15a0:	0b390b3b 	bleq	e44294 <__ccfg+0xe242ec>
		if (m_magic (chunk) != MALLOC_MAGIC)
    15a4:	0b0b1349 	bleq	2c62d0 <__ccfg+0x2a6328>
    15a8:	0b0c0b0d 	bleq	3041e4 <__ccfg+0x2e423c>
			syserror (EMALLOC, "malc");
    15ac:	00000b38 	andeq	r0, r0, r8, lsr fp
    15b0:	03000d09 	movweq	r0, #3337	; 0xd09
		if (m_size (chunk) >= _size)
    15b4:	3b0b3a0e 	blcc	2cfdf4 <__ccfg+0x2afe4c>
    15b8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		chunk = m_nextp (chunk)) {
    15bc:	000b3813 	andeq	r3, fp, r3, lsl r8
		m_setnextp (cc, m_nextp (chunk));
    15c0:	00340a00 	eorseq	r0, r4, r0, lsl #20
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    15c4:	0b3a0e03 	bleq	e84dd8 <__ccfg+0xe64e30>
    15c8:	0b390b3b 	bleq	e442bc <__ccfg+0xe24314>
			m_size (chunk) = _size;
    15cc:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 14b0 <__pi_malloc_init+0x20>
			cc = chunk + _size + m_hdrlen;
    15d0:	00000c3c 	andeq	r0, r0, ip, lsr ip
    15d4:	0b000f0b 	bleq	5208 <__exidx_end+0x160>
			m_size (cc) = waste - m_hdrlen;
    15d8:	0013490b 	andseq	r4, r3, fp, lsl #18
			QFREE;
    15dc:	01010c00 	tsteq	r1, r0, lsl #24
		mevent [MA_NP] . nfail = 0;
    15e0:	13011349 	movwne	r1, #4937	; 0x1349
		mcfree [MA_NP] -= m_size (chunk);
    15e4:	210d0000 	mrscs	r0, (UNDEF: 13)
    15e8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    15ec:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    15f0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		m_size (chunk) |= MALLOC_UMASK;
    15f4:	13490b39 	movtne	r0, #39737	; 0x9b39
		if (mnfree [MA_NP] > mcfree [MA_NP])
    15f8:	150f0000 	strne	r0, [pc, #-0]	; 1600 <__pi_malloc+0x88>
		m_size (chunk) |= MALLOC_UMASK;
    15fc:	010c2701 	tsteq	ip, r1, lsl #14
			mnfree [MA_NP] = mcfree [MA_NP];
    1600:	10000013 	andne	r0, r0, r3, lsl r0
}
    1604:	13490005 	movtne	r0, #36869	; 0x9005
    1608:	34110000 	ldrcc	r0, [r1], #-0
    160c:	3a0e0300 	bcc	382214 <__ccfg+0x36226c>
    1610:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1614:	3f13490b 	svccc	0x0013490b
    1618:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    161c:	01131200 	tsteq	r3, r0, lsl #4
aword __pi_fork (fsmcode func, aword data) {
    1620:	0b3a0b0b 	bleq	e84254 <__ccfg+0xe642ac>
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1624:	0b39053b 	bleq	e42b18 <__ccfg+0xe22b70>
    1628:	00001301 	andeq	r1, r0, r1, lsl #6
    162c:	03000d13 	movweq	r0, #3347	; 0xd13
		if ((j = __PCB) == NULL)
    1630:	3b0b3a0e 	blcc	2cfe70 <__ccfg+0x2afec8>
	i->Next = NULL;
    1634:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	i->data = data;
    1638:	000b3813 	andeq	r3, fp, r3, lsl r8
		if ((j = __PCB) == NULL)
    163c:	01131400 	tsteq	r3, r0, lsl #8
}
    1640:	0b0b0e03 	bleq	2c4e54 <__ccfg+0x2a4eac>
			for (; j->Next != NULL; j = j->Next);
    1644:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1648:	13010b39 	movwne	r0, #6969	; 0x1b39
	return (aword) i;
    164c:	21150000 	tstcs	r5, r0
    1650:	2f134900 	svccs	0x00134900
	if (mevent [MA_NP] . nwait != 255)
    1654:	1600000b 	strne	r0, [r0], -fp
    1658:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    165c:	0b3b0b3a 	bleq	ec434c <__ccfg+0xea43a4>
		mevent [MA_NP] . nwait ++;
    1660:	13490b39 	movtne	r0, #39737	; 0x9b39
	wait ((aword)(&(mevent [MA_NP])), state);
    1664:	00000a02 	andeq	r0, r0, r2, lsl #20
    1668:	47003417 	smladmi	r0, r7, r4, r3
void diag (const char *mess, ...) {
    166c:	3b0b3a13 	blcc	2cfec0 <__ccfg+0x2aff18>
    1670:	020b390b 	andeq	r3, fp, #180224	; 0x2c000
    1674:	1800000a 	stmdane	r0, {r1, r3}
	diag_disable_int (a, is);
    1678:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 15c8 <__pi_malloc+0x50>
    167c:	0b3a0e03 	bleq	e84e90 <__ccfg+0xe64ee8>
    1680:	0b390b3b 	bleq	e44374 <__ccfg+0xe243cc>
				d = (bc == 16) ? 10000 : 1000000000;
    1684:	01110c27 	tsteq	r1, r7, lsr #24
	diag_disable_int (a, is);
    1688:	0a400112 	beq	1001ad8 <__ccfg+0xfe1b30>
	while (*mess != '\0') {
    168c:	00001301 	andeq	r1, r0, r1, lsl #6
	dgout ('\r');
    1690:	03000519 	movweq	r0, #1305	; 0x519
	dgout ('\n');
    1694:	3b0b3a08 	blcc	2cfebc <__ccfg+0x2aff14>
    1698:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    169c:	00060213 	andeq	r0, r6, r3, lsl r2
	diag_wait (a);
    16a0:	00051a00 	andeq	r1, r5, r0, lsl #20
	diag_enable_int (a, is);
    16a4:	0b3a0e03 	bleq	e84eb8 <__ccfg+0xe64f10>
    16a8:	0b390b3b 	bleq	e4439c <__ccfg+0xe243f4>
}
    16ac:	06021349 	streq	r1, [r2], -r9, asr #6
    16b0:	0a1b0000 	beq	6c16b8 <__ccfg+0x6a1710>
    16b4:	3a0e0300 	bcc	3822bc <__ccfg+0x362314>
		if (*mess == '%') {
    16b8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    16bc:	0001110b 	andeq	r1, r1, fp, lsl #2
			if (*mess == 'l') {
    16c0:	011d1c00 	tsteq	sp, r0, lsl #24
    16c4:	01521331 	cmpeq	r2, r1, lsr r3
				mess++;
    16c8:	0b580655 	bleq	1603024 <__ccfg+0x15e307c>
				val = va_arg (ap, lword);
    16cc:	0b570b59 	bleq	15c4438 <__ccfg+0x15a4490>
				bc = 32;
    16d0:	00001301 	andeq	r1, r0, r1, lsl #6
				bc = 16;
    16d4:	3100051d 	tstcc	r0, sp, lsl r5
			switch (*mess) {
    16d8:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    16dc:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    16e0:	06550152 			; <UNDEFINED> instruction: 0x06550152
				dgout ('%');
    16e4:	0b590b58 	bleq	164444c <__ccfg+0x16244a4>
    16e8:	00000b57 	andeq	r0, r0, r7, asr fp
				dgout (*mess);
    16ec:	03012e1f 	movweq	r2, #7711	; 0x1e1f
    16f0:	3b0b3a0e 	blcc	2cff30 <__ccfg+0x2aff88>
			switch (*mess) {
    16f4:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
					v = __pi_hex_enc_table [
    16f8:	2013490c 	andscs	r4, r3, ip, lsl #18
					i += 4;
    16fc:	2000000b 	andcs	r0, r0, fp
					(val >> (bc - i)) & 0xf];
    1700:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1704:	0b3b0b3a 	bleq	ec43f4 <__ccfg+0xea444c>
					dgout (v);
    1708:	13490b39 	movtne	r0, #39737	; 0x9b39
    170c:	01000000 	mrseq	r0, (UNDEF: 0)
				while (i < bc) {
    1710:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
			mess++;
    1714:	0e030b13 	vmoveq.32	d3[0], r0
					d /= 10;
    1718:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
				if ((val >> (bc - 1)) & 1) {
    171c:	06100111 			; <UNDEFINED> instruction: 0x06100111
    1720:	24020000 	strcs	r0, [r2], #-0
					dgout ('-');
    1724:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1728:	000e030b 	andeq	r0, lr, fp, lsl #6
						val |= 0xffff0000;
    172c:	00160300 	andseq	r0, r6, r0, lsl #6
    1730:	0b3a0e03 	bleq	e84f44 <__ccfg+0xe64f9c>
    1734:	0b390b3b 	bleq	e44428 <__ccfg+0xe24480>
				d = (bc == 16) ? 10000 : 1000000000;
    1738:	00001349 	andeq	r1, r0, r9, asr #6
    173c:	0b002404 	bleq	a754 <__exidx_end+0x56ac>
    1740:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
					v = (word) (val / d);
    1744:	05000008 	streq	r0, [r0, #-8]
					if (v || d == 1) break;
    1748:	13490026 	movtne	r0, #36902	; 0x9026
    174c:	35060000 	strcc	r0, [r6, #-0]
					d /= 10;
    1750:	00134900 	andseq	r4, r3, r0, lsl #18
				d = (bc == 16) ? 10000 : 1000000000;
    1754:	01130700 	tsteq	r3, r0, lsl #14
					dgout (v + '0');
    1758:	0b3a0b0b 	bleq	e8438c <__ccfg+0xe643e4>
    175c:	0b390b3b 	bleq	e44450 <__ccfg+0xe244a8>
    1760:	00001301 	andeq	r1, r0, r1, lsl #6
					d /= 10;
    1764:	03000d08 	movweq	r0, #3336	; 0xd08
					val = val - (v * d);
    1768:	3b0b3a0e 	blcc	2cffa8 <__ccfg+0x2b0000>
					if (d == 0) break;
    176c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
					v = (word) (val / d);
    1770:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    1774:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
				if (bc == 16)
    1778:	0900000b 	stmdbeq	r0, {r0, r1, r3}
				d = (bc == 16) ? 10000 : 1000000000;
    177c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
					val &= 0xffff;
    1780:	0b3b0b3a 	bleq	ec4470 <__ccfg+0xea44c8>
					dgout (*s);
    1784:	13490b39 	movtne	r0, #39737	; 0x9b39
					s++;
    1788:	00000b38 	andeq	r0, r0, r8, lsr fp
				while (*s != '\0') {
    178c:	0300340a 	movweq	r3, #1034	; 0x40a
    1790:	3b0b3a0e 	blcc	2cffd0 <__ccfg+0x2b0028>
			dgout (*mess++);
    1794:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1798:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    179c:	0b00000c 	bleq	17d4 <apb+0x8>
    17a0:	0b0b000f 	bleq	2c17e4 <__ccfg+0x2a183c>
    17a4:	00001349 	andeq	r1, r0, r9, asr #6
	__pi_seed = __pi_seed * 1103515245 + 12345;
    17a8:	4901010c 	stmdbmi	r1, {r2, r3, r8}
    17ac:	00130113 	andseq	r0, r3, r3, lsl r1
    17b0:	00210d00 	eoreq	r0, r1, r0, lsl #26
    17b4:	160e0000 	strne	r0, [lr], -r0
	^ entropy
    17b8:	3a0e0300 	bcc	3823c0 <__ccfg+0x362418>
}
    17bc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    17c0:	0013490b 	andseq	r4, r3, fp, lsl #18
    17c4:	01150f00 	tsteq	r5, r0, lsl #30
    17c8:	13010c27 	movwne	r0, #7207	; 0x1c27
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    17cc:	05100000 	ldreq	r0, [r0, #-0]
	word cs = size + hblenb;
    17d0:	00134900 	andseq	r4, r3, r0, lsl #18
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    17d4:	00341100 	eorseq	r1, r4, r0, lsl #2
    17d8:	0b3a0e03 	bleq	e84fec <__ccfg+0xe65044>
	p -> length = size;
    17dc:	0b39053b 	bleq	e42cd0 <__ccfg+0xe22d28>
}
    17e0:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 16c4 <diag+0x58>
	if (p->attributes.b.queued) {
    17e4:	00000c3c 	andeq	r0, r0, ip, lsr ip
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    17e8:	0b011312 	bleq	46438 <__ccfg+0x26490>
    17ec:	3b0b3a0b 	blcc	2d0020 <__ccfg+0x2b0078>
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    17f0:	010b3905 	tsteq	fp, r5, lsl #18
		p->attributes.b.queued = 0;
    17f4:	13000013 	movwne	r0, #19
    17f8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    17fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	deq (p);	// Remove from queue
    1800:	13490b39 	movtne	r0, #39737	; 0x9b39
}
    1804:	00000b38 	andeq	r0, r0, r8, lsr fp
	tfree ((address)p);
    1808:	03011314 	movweq	r1, #4884	; 0x1314
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    180c:	3a0b0b0e 	bcc	2c444c <__ccfg+0x2a44a4>
    1810:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1814:	0013010b 	andseq	r0, r3, fp, lsl #2
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1818:	00211500 	eoreq	r1, r1, r0, lsl #10
    181c:	0b2f1349 	bleq	bc6548 <__ccfg+0xba65a0>
	if (q_empty (q))
    1820:	34160000 	ldrcc	r0, [r6], #-0
    1824:	3a0e0300 	bcc	38242c <__ccfg+0x362484>
		trigger (q);
    1828:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	if (p->attributes.b.urgent) {
    182c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		p->u.bqueue.next = q->next;
    1830:	1700000a 	strne	r0, [r0, -sl]
		p->u.bqueue.prev = q;
    1834:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; 1784 <diag+0x118>
		q->next->prev = (qitem_t*) p;
    1838:	0b3a0e03 	bleq	e8504c <__ccfg+0xe650a4>
	p->attributes.b.queued = 1;
    183c:	0b390b3b 	bleq	e44530 <__ccfg+0xe24588>
    1840:	01120111 	tsteq	r2, r1, lsl r1
}
    1844:	00000a40 	andeq	r0, r0, r0, asr #20
		p->u.bqueue.prev = q->prev;
    1848:	3f012e18 	svccc	0x00012e18
		q->prev->next = (qitem_t*) p;
    184c:	3a0e030c 	bcc	382484 <__ccfg+0x3624dc>
		q->prev = (qitem_t*) p;
    1850:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1854:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    1858:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
	deq (p);	// Soft dequeue, timer and hook left intact
    185c:	010a4001 	tsteq	sl, r1
	switch (dv) {
    1860:	19000013 	stmdbne	r0, {r0, r1, r4}
    1864:	08030005 	stmdaeq	r3, {r0, r2}
    1868:	0b3b0b3a 	bleq	ec4558 <__ccfg+0xea45b0>
    186c:	13490b39 	movtne	r0, #39737	; 0x9b39
			p->attributes.b.urgent = 1;
    1870:	00000602 	andeq	r0, r0, r2, lsl #12
    1874:	0300051a 	movweq	r0, #1306	; 0x51a
			verify_ses (p, "dispose ses");
    1878:	3b0b3a08 	blcc	2d00a0 <__ccfg+0x2b00f8>
    187c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1880:	000a0213 	andeq	r0, sl, r3, lsl r2
    1884:	012e1b00 			; <UNDEFINED> instruction: 0x012e1b00
    1888:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
			verify_phy (p, "dispose phy");
    188c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1890:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
}
    1894:	01111349 	tsteq	r1, r9, asr #6
			enq (oqueues [p->attributes.b.phys], p);
    1898:	0a400112 	beq	1001ce8 <__ccfg+0xfe1d40>
			p->attributes.b.urgent = 1;
    189c:	00001301 	andeq	r1, r0, r1, lsl #6
    18a0:	0300051c 	movweq	r0, #1308	; 0x51c
			verify_phy (p, "dispose phy");
    18a4:	3b0b3a08 	blcc	2d00cc <__ccfg+0x2b0124>
    18a8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    18ac:	00060213 	andeq	r0, r6, r3, lsl r2
    18b0:	002e1d00 	eoreq	r1, lr, r0, lsl #26
    18b4:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    18b8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			enq (oqueues [p->attributes.b.phys], p);
    18bc:	01110b39 	tsteq	r1, r9, lsr fp
    18c0:	0a400112 	beq	1001d10 <__ccfg+0xfe1d68>
}
    18c4:	341e0000 	ldrcc	r0, [lr], #-0
			rlp (p);
    18c8:	3a080300 	bcc	2024d0 <__ccfg+0x1e2528>
}
    18cc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    18d0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    18d4:	1f000006 	svcne	0x00000006
    18d8:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
    18dc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    18e0:	01110b39 	tsteq	r1, r9, lsr fp
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    18e4:	1d200000 	stcne	0, cr0, [r0, #-0]
	if (b->attributes.b.outgoing) {
    18e8:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
	b = header (p);
    18ec:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
	if (b->attributes.b.outgoing) {
    18f0:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
		verify_ses (b, "tcv02");
    18f4:	0013010b 	andseq	r0, r3, fp, lsl #2
    18f8:	00052100 	andeq	r2, r5, r0, lsl #2
    18fc:	00001331 	andeq	r1, r0, r1, lsr r3
    1900:	31011d22 	tstcc	r1, r2, lsr #26
    1904:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
		verify_plg (b, tcv_out, "tcv03");
    1908:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
    190c:	000b5705 	andeq	r5, fp, r5, lsl #14
    1910:	00052300 	andeq	r2, r5, r0, lsl #6
    1914:	0b3a0e03 	bleq	e85128 <__ccfg+0xe65180>
    1918:	0b390b3b 	bleq	e4460c <__ccfg+0xe24664>
    191c:	06021349 	streq	r1, [r2], -r9, asr #6
    1920:	0a240000 	beq	901928 <__ccfg+0x8e1980>
    1924:	3a0e0300 	bcc	38252c <__ccfg+0x362584>
    1928:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		dispose (b, plugins [b->attributes.b.plugin] ->
    192c:	0001110b 	andeq	r1, r1, fp, lsl #2
}
    1930:	011d2500 	tsteq	sp, r0, lsl #10
		dispose (b, plugins [b->attributes.b.plugin] ->
    1934:	01521331 	cmpeq	r2, r1, lsr r3
		rlp (b);
    1938:	0b580655 	bleq	1603294 <__ccfg+0x15e32ec>
}
    193c:	0b570b59 	bleq	15c46a8 <__ccfg+0x15a4700>
		rlp (b);
    1940:	05260000 	streq	r0, [r6, #-0]!
    1944:	02133100 	andseq	r3, r3, #0, 2
    1948:	27000006 	strcs	r0, [r0, -r6]
    194c:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    1950:	06550152 			; <UNDEFINED> instruction: 0x06550152
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    1954:	0b590b58 	bleq	16446bc <__ccfg+0x1624714>
    1958:	13010b57 	movwne	r0, #6999	; 0x1b57
    195c:	1d280000 	stcne	0, cr0, [r8, #-0]
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1960:	11133101 	tstne	r3, r1, lsl #2
	va_start (ap, plid);
    1964:	58011201 	stmdapl	r1, {r0, r9, ip}
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1968:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
    196c:	2900000b 	stmdbcs	r0, {r0, r1, r3}
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    1970:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; 18c0 <dispose+0x68>
    1974:	0b3a0e03 	bleq	e85188 <__ccfg+0xe651e0>
    1978:	0b390b3b 	bleq	e4466c <__ccfg+0xe246c4>
    197c:	01111349 	tsteq	r1, r9, asr #6
			syserror (ENODEVICE, "tcv04");
    1980:	0a400112 	beq	1001dd0 <__ccfg+0xfe1e28>
		syserror (EMALLOC, "tcv05");
    1984:	2e2a0000 	cdpcs	0, 2, cr0, cr10, cr0, {0}
	attp.b.outgoing = 1;
    1988:	3a0e0301 	bcc	382594 <__ccfg+0x3625ec>
    198c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1990:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
    1994:	010a4001 	tsteq	sl, r1
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1998:	2b000013 	blcs	19ec <tcv_open+0x98>
		if (descriptors [fd] == NULL)
    199c:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    19a0:	0b3b0b3a 	bleq	ec4690 <__ccfg+0xea46e8>
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    19a4:	0b200b39 	bleq	804690 <__ccfg+0x7e46e8>
		return ERROR;
    19a8:	2e2c0000 	cdpcs	0, 2, cr0, cr12, cr0, {0}
}
    19ac:	3a0e0301 	bcc	3825b8 <__ccfg+0x362610>
    19b0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    19b4:	110c270b 	tstne	ip, fp, lsl #14
	s->attpattern.b.session = fd;
    19b8:	40011201 	andmi	r1, r1, r1, lsl #4
    19bc:	0013010a 	andseq	r0, r3, sl, lsl #2
	descriptors [fd] = s;
    19c0:	010b2d00 	tsteq	fp, r0, lsl #26
	q_init (&(s->rqueue));
    19c4:	00000655 	andeq	r0, r0, r5, asr r6
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    19c8:	3100342e 	tstcc	r0, lr, lsr #8
    19cc:	00060213 	andeq	r0, r6, r3, lsl r2
    19d0:	012e2f00 			; <UNDEFINED> instruction: 0x012e2f00
    19d4:	0b3a0e03 	bleq	e851e8 <__ccfg+0xe65240>
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    19d8:	0b390b3b 	bleq	e446cc <__ccfg+0xe24724>
    19dc:	0b201349 	bleq	806708 <__ccfg+0x7e6760>
    19e0:	00001301 	andeq	r1, r0, r1, lsl #6
	descriptors [fd] = s;
    19e4:	03003430 	movweq	r3, #1072	; 0x430
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    19e8:	3b0b3a08 	blcc	2d0210 <__ccfg+0x2b0268>
    19ec:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	if (s == NULL)
    19f0:	31000013 	tstcc	r0, r3, lsl r0
		syserror (EMALLOC, "tcv05");
    19f4:	0e03012e 	adfeqsp	f0, f3, #0.5
    19f8:	0b3b0b3a 	bleq	ec46e8 <__ccfg+0xea4740>
    19fc:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    1a00:	13010b20 	movwne	r0, #6944	; 0x1b20
    1a04:	05320000 	ldreq	r0, [r2, #-0]!
    1a08:	3a080300 	bcc	202610 <__ccfg+0x1e2668>
    1a0c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1a10:	0013490b 	andseq	r4, r3, fp, lsl #18
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    1a14:	011d3300 	tsteq	sp, r0, lsl #6
	    (plugins [ord] != NULL && plugins [ord] != pl))
    1a18:	01111331 	tsteq	r1, r1, lsr r3
    1a1c:	0b580112 	bleq	1601e6c <__ccfg+0x15e1ec4>
    1a20:	0b570b59 	bleq	15c478c <__ccfg+0x15a47e4>
	plugins [ord] = pl;
    1a24:	00001301 	andeq	r1, r0, r1, lsl #6
	return 0;
    1a28:	03012e34 	movweq	r2, #7732	; 0x1e34
		return ERROR;
    1a2c:	3b0b3a0e 	blcc	2d026c <__ccfg+0x2b02c4>
}
    1a30:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1a34:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
	verify_fds (fd, "tcv16");
    1a38:	010a4001 	tsteq	sl, r1
								Boolean urg) {
    1a3c:	35000013 	strcc	r0, [r0, #-19]	; 0xffffffed
    1a40:	08030034 	stmdaeq	r3, {r2, r4, r5}
	verify_fds (fd, "tcv16");
    1a44:	0b3b0b3a 	bleq	ec4734 <__ccfg+0xea478c>
    1a48:	13490b39 	movtne	r0, #39737	; 0x9b39
    1a4c:	00000602 	andeq	r0, r0, r2, lsl #12
	verify_pld (s, tcv_frm, "tcv17");
    1a50:	03012e36 	movweq	r2, #7734	; 0x1e36
    1a54:	3b0b3a0e 	blcc	2d0294 <__ccfg+0x2b02ec>
    1a58:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
    1a5c:	010b200c 	tsteq	fp, ip
    1a60:	37000013 	smladcc	r0, r3, r0, r0
    1a64:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1a68:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1a6c:	13490b39 	movtne	r0, #39737	; 0x9b39
	ptrs.head = (word) fd;
    1a70:	2e380000 	cdpcs	0, 3, cr0, cr8, cr0, {0}
	ptrs.tail = (word) urg;
    1a74:	3a0e0301 	bcc	382680 <__ccfg+0x3626d8>
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    1a78:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1a7c:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
		if (state != WNONE) {
    1a80:	010b2013 	tsteq	fp, r3, lsl r0
    1a84:	39000013 	stmdbcc	r0, {r0, r1, r4}
}
    1a88:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
			when (eid, state);
    1a8c:	0b3b0b3a 	bleq	ec477c <__ccfg+0xea47d4>
    1a90:	13490b39 	movtne	r0, #39737	; 0x9b39
			release;
    1a94:	2e3a0000 	cdpcs	0, 3, cr0, cr10, cr0, {0}
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    1a98:	11133101 	tstne	r3, r1, lsl #2
    1a9c:	40011201 	andmi	r1, r1, r1, lsl #4
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    1aa0:	3b00000a 	blcc	1ad0 <tcv_wnps+0x98>
    1aa4:	1331001d 	teqne	r1, #29
    1aa8:	01120111 	tsteq	r2, r1, lsl r1
    1aac:	0b590b58 	bleq	1644814 <__ccfg+0x162486c>
    1ab0:	00000b57 	andeq	r0, r0, r7, asr fp
    1ab4:	01110100 	tsteq	r1, r0, lsl #2
		if (state != WNONE) {
    1ab8:	0b130e25 	bleq	4c5354 <__ccfg+0x4a53ac>
    1abc:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
			tmwait (state);
    1ac0:	01110655 	tsteq	r1, r5, asr r6
    1ac4:	00000610 	andeq	r0, r0, r0, lsl r6
	b->attributes = s->attpattern;
    1ac8:	0b002402 	bleq	aad8 <__exidx_end+0x5a30>
		b->attributes.b.urgent = 1;
    1acc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1ad0:	0300000e 	movweq	r0, #14
	b->u.pointers.head = ptrs.head;
    1ad4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
	b->u.pointers.tail = length;
    1ad8:	0b3b0b3a 	bleq	ec47c8 <__ccfg+0xea4820>
	return (address) (b + 1);
    1adc:	13490b39 	movtne	r0, #39737	; 0x9b39
    1ae0:	24040000 	strcs	r0, [r4], #-0
    1ae4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1ae8:	0008030b 	andeq	r0, r8, fp, lsl #6
    1aec:	00260500 	eoreq	r0, r6, r0, lsl #10
    1af0:	00001349 	andeq	r1, r0, r9, asr #6
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    1af4:	49003506 	stmdbmi	r0, {r1, r2, r8, sl, ip, sp}
    1af8:	07000013 	smladeq	r0, r3, r0, r0
    1afc:	0b0b0113 	bleq	2c1f50 <__ccfg+0x2a1fa8>
	verify_fph (phy, "tcv23");
    1b00:	0b3b0b3a 	bleq	ec47f0 <__ccfg+0xea4848>
    1b04:	13010b39 	movwne	r0, #6969	; 0x1b39
    1b08:	0d080000 	stceq	0, cr0, [r8, #-0]
    1b0c:	3a0e0300 	bcc	382714 <__ccfg+0x36276c>
}
    1b10:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	return (physical [phy]) (opt, arg);
    1b14:	0b13490b 	bleq	4d3f48 <__ccfg+0x4b3fa0>
    1b18:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
    1b1c:	000b380b 	andeq	r3, fp, fp, lsl #16
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    1b20:	000d0900 	andeq	r0, sp, r0, lsl #18
	if (opt < 0) {
    1b24:	0b3a0e03 	bleq	e85338 <__ccfg+0xe65390>
		if (fd < 0)
    1b28:	0b390b3b 	bleq	e4481c <__ccfg+0xe24874>
		if (opt == PHYSOPT_PLUGINFO) {
    1b2c:	0b381349 	bleq	e06858 <__ccfg+0xde68b0>
			if (fd >= TCV_MAX_PLUGS)
    1b30:	340a0000 	strcc	r0, [sl], #-0
			if ((p = plugins [fd]) == NULL)
    1b34:	3a0e0300 	bcc	38273c <__ccfg+0x362794>
    1b38:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
}
    1b3c:	3f13490b 	svccc	0x0013490b
		if (fd >= TCV_MAX_PHYS)
    1b40:	000c3c0c 	andeq	r3, ip, ip, lsl #24
		return physinfo [fd];
    1b44:	000f0b00 	andeq	r0, pc, r0, lsl #22
    1b48:	13490b0b 	movtne	r0, #39691	; 0x9b0b
	verify_fds (fd, "tcv22");
    1b4c:	010c0000 	mrseq	r0, (UNDEF: 12)
    1b50:	01134901 	tsteq	r3, r1, lsl #18
    1b54:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    1b58:	00000021 	andeq	r0, r0, r1, lsr #32
    1b5c:	0300160e 	movweq	r1, #1550	; 0x60e
}
    1b60:	3b0b3a0e 	blcc	2d03a0 <__ccfg+0x2b03f8>
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    1b64:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1b68:	0f000013 	svceq	0x00000013
			return 0;
    1b6c:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
    1b70:	00001301 	andeq	r1, r0, r1, lsl #6
    1b74:	49000510 	stmdbmi	r0, {r4, r8, sl}
    1b78:	11000013 	tstne	r0, r3, lsl r0
    1b7c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    1b80:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1b84:	13490b39 	movtne	r0, #39737	; 0x9b39
	if (dsp != TCV_DSP_PASS) {
    1b88:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
		if (ses == NONE)
    1b8c:	13120000 	tstne	r2, #0
			syserror (EREQPAR, "tcv26");
    1b90:	3a0b0b01 	bcc	2c479c <__ccfg+0x2a47f4>
		verify_fds (ses, "tcv27");
    1b94:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1b98:	0013010b 	andseq	r0, r3, fp, lsl #2
    1b9c:	000d1300 	andeq	r1, sp, r0, lsl #6
    1ba0:	0b3a0e03 	bleq	e853b4 <__ccfg+0xe6540c>
    1ba4:	0b39053b 	bleq	e43098 <__ccfg+0xe230f0>
		if ((p = apb (size)) != NULL) {
    1ba8:	0b381349 	bleq	e068d4 <__ccfg+0xde692c>
    1bac:	13140000 	tstne	r4, #0
		return NULL;
    1bb0:	0b0e0301 	bleq	3827bc <__ccfg+0x362814>
			p->attributes = descriptors [ses] -> attpattern;
    1bb4:	3b0b3a0b 	blcc	2d03e8 <__ccfg+0x2b0440>
			dispose (p, dsp);
    1bb8:	010b3905 	tsteq	fp, r5, lsl #18
			p->attributes = descriptors [ses] -> attpattern;
    1bbc:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
			p->attributes.b.outgoing = 0;
    1bc0:	13490021 	movtne	r0, #36897	; 0x9021
			dispose (p, dsp);
    1bc4:	00000b2f 	andeq	r0, r0, pc, lsr #22
			return (address)(p + 1);
    1bc8:	3f012e16 	svccc	0x00012e16
    1bcc:	3a0e030c 	bcc	382804 <__ccfg+0x36285c>
	if ((p = apb (size)) != NULL)
    1bd0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1bd4:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
		return (address)(p + 1);
    1bd8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1bdc:	000a4001 	andeq	r4, sl, r1
    1be0:	00051700 	andeq	r1, r5, r0, lsl #14
    1be4:	0b3a0803 	bleq	e83bf8 <__ccfg+0xe63c50>
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1be8:	0b390b3b 	bleq	e448dc <__ccfg+0xe24934>
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    1bec:	06021349 	streq	r1, [r2], -r9, asr #6
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1bf0:	34180000 	ldrcc	r0, [r8], #-0
    1bf4:	3a0e0300 	bcc	3827fc <__ccfg+0x362854>
		syserror (EREQPAR, "tcv28");
    1bf8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		syserror (EMALLOC, "tcv29");
    1bfc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	physical [phy] = ps;
    1c00:	00000006 	andeq	r0, r0, r6
	physinfo [phy] = info;
    1c04:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    1c08:	030b130e 	movweq	r1, #45838	; 0xb30e
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    1c0c:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    1c10:	10011106 	andne	r1, r1, r6, lsl #2
    1c14:	02000006 	andeq	r0, r0, #6
		syserror (EMALLOC, "tcv29");
    1c18:	0b0b0024 	bleq	2c1cb0 <__ccfg+0x2a1d08>
    1c1c:	0e030b3e 	vmoveq.16	d3[0], r0
	q_init (q);
    1c20:	16030000 	strne	r0, [r3], -r0
}
    1c24:	3a0e0300 	bcc	38282c <__ccfg+0x362884>
    1c28:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1c2c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1c30:	00240400 	eoreq	r0, r4, r0, lsl #8
    1c34:	0b3e0b0b 	bleq	f84868 <__ccfg+0xf648c0>
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1c38:	00000803 	andeq	r0, r0, r3, lsl #16
	verify_fph (phy, "tcv30");
    1c3c:	03011305 	movweq	r1, #4869	; 0x1305
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1c40:	3a0b0b0e 	bcc	2c4880 <__ccfg+0x2a48d8>
    1c44:	010b3b0b 	tsteq	fp, fp, lsl #22
	verify_fph (phy, "tcv30");
    1c48:	06000013 			; <UNDEFINED> instruction: 0x06000013
    1c4c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1c50:	0b381349 	bleq	e0697c <__ccfg+0xde69d4>
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1c54:	00000c34 	andeq	r0, r0, r4, lsr ip
    1c58:	0b000f07 	bleq	587c <__exidx_end+0x7d4>
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1c5c:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    1c60:	13490026 	movtne	r0, #36902	; 0x9026
		if (plugins [plg] == NULL)
    1c64:	35090000 	strcc	r0, [r9, #-0]
    1c68:	00134900 	andseq	r4, r3, r0, lsl #18
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    1c6c:	01130a00 	tsteq	r3, r0, lsl #20
}
    1c70:	0b3a0b0b 	bleq	e848a4 <__ccfg+0xe648fc>
    1c74:	0b390b3b 	bleq	e44968 <__ccfg+0xe249c0>
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1c78:	00001301 	andeq	r1, r0, r1, lsl #6
    1c7c:	03000d0b 	movweq	r0, #3339	; 0xd0b
    1c80:	3b0b3a0e 	blcc	2d04c0 <__ccfg+0x2b0518>
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1c84:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1c88:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    1c8c:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    1c90:	0c00000b 	stceq	0, cr0, [r0], {11}
    1c94:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    1c98:	0b3b0b3a 	bleq	ec4988 <__ccfg+0xea49e0>
	len -= (ap.head + ap.tail);
    1c9c:	13490b39 	movtne	r0, #39737	; 0x9b39
    1ca0:	00000b38 	andeq	r0, r0, r8, lsr fp
    1ca4:	0300340d 	movweq	r3, #1037	; 0x40d
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    1ca8:	3b0b3a0e 	blcc	2d04e8 <__ccfg+0x2b0540>
    1cac:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1cb0:	3c0c3f13 	stccc	15, cr3, [ip], {19}
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    1cb4:	0e00000c 	cdpeq	0, 0, cr0, cr0, cr12, {0}
    1cb8:	0b0b000f 	bleq	2c1cfc <__ccfg+0x2a1d54>
    1cbc:	00001349 	andeq	r1, r0, r9, asr #6
	return 1;
    1cc0:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
    1cc4:	00130113 	andseq	r0, r3, r3, lsl r1
    1cc8:	00211000 	eoreq	r1, r1, r0
    1ccc:	16110000 	ldrne	r0, [r1], -r0
    1cd0:	3a0e0300 	bcc	3828d8 <__ccfg+0x362930>
	verify_fph (phy, "tcv32");
    1cd4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1cd8:	0013490b 	andseq	r4, r3, fp, lsl #18
    1cdc:	01151200 	tsteq	r5, r0, lsl #4
    1ce0:	13010c27 	movwne	r0, #7207	; 0x1c27
    1ce4:	05130000 	ldreq	r0, [r3, #-0]
    1ce8:	00134900 	andseq	r4, r3, r0, lsl #18
	oq = oqueues [phy];
    1cec:	00341400 	eorseq	r1, r4, r0, lsl #8
	b = q_first (oq);
    1cf0:	0b3a0e03 	bleq	e85504 <__ccfg+0xe6555c>
	if (q_end (b, oq)) {
    1cf4:	0b39053b 	bleq	e431e8 <__ccfg+0xe23240>
	*len = b->length;
    1cf8:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1bdc <tcvp_new+0x5c>
	deq (b);	// Dequeue the packet ...
    1cfc:	00000c3c 	andeq	r0, r0, ip, lsr ip
}
    1d00:	0b011315 	bleq	4695c <__ccfg+0x269b4>
		return NULL;
    1d04:	3b0b3a0b 	blcc	2d0538 <__ccfg+0x2b0590>
    1d08:	010b3905 	tsteq	fp, r5, lsl #18
    1d0c:	16000013 			; <UNDEFINED> instruction: 0x16000013
    1d10:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
	verify_fph (phy, "tcv33");
    1d14:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1d18:	13490b39 	movtne	r0, #39737	; 0x9b39
    1d1c:	00000b38 	andeq	r0, r0, r8, lsr fp
    1d20:	03011317 	movweq	r1, #4887	; 0x1317
    1d24:	3a0b0b0e 	bcc	2c4964 <__ccfg+0x2a49bc>
    1d28:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	oq = oqueues [phy];
    1d2c:	0013010b 	andseq	r0, r3, fp, lsl #2
	b = q_first (oq);
    1d30:	00211800 	eoreq	r1, r1, r0, lsl #16
		return NULL;
    1d34:	0b2f1349 	bleq	bc6a60 <__ccfg+0xba6ab8>
	return (address)(b + 1);
    1d38:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
}
    1d3c:	030c3f01 	movweq	r3, #52993	; 0xcf01
    1d40:	3b0b3a0e 	blcc	2d0580 <__ccfg+0x2b05d8>
    1d44:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    1d48:	1113490c 	tstne	r3, ip, lsl #18
	verify_plg (b, tcv_xmt, "tcv34");
    1d4c:	40011201 	andmi	r1, r1, r1, lsl #4
	hblock_t *b = header (pkt);
    1d50:	0013010a 	andseq	r0, r3, sl, lsl #2
	verify_plg (b, tcv_xmt, "tcv34");
    1d54:	00051a00 	andeq	r1, r5, r0, lsl #20
    1d58:	0b3a0803 	bleq	e83d6c <__ccfg+0xe63dc4>
    1d5c:	0b390b3b 	bleq	e44a50 <__ccfg+0xe24aa8>
    1d60:	06021349 	streq	r1, [r2], -r9, asr #6
    1d64:	051b0000 	ldreq	r0, [fp, #-0]
    1d68:	3a080300 	bcc	202970 <__ccfg+0x1e29c8>
    1d6c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	dispose (b, plugins [b->attributes.b.plugin] ->
    1d70:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
}
    1d74:	1c00000a 	stcne	0, cr0, [r0], {10}
	dispose (b, plugins [b->attributes.b.plugin] ->
    1d78:	00000018 	andeq	r0, r0, r8, lsl r0
    1d7c:	0300341d 	movweq	r3, #1053	; 0x41d
    1d80:	3b0b3a0e 	blcc	2d05c0 <__ccfg+0x2b0618>
}
    1d84:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    while(1)
    1d88:	00060213 	andeq	r0, r6, r3, lsl r2
{
    1d8c:	00341e00 	eorseq	r1, r4, r0, lsl #28
    SetupTrimDevice();
    1d90:	0b3a0803 	bleq	e83da4 <__ccfg+0xe63dfc>
    pui32Src = &_etext;
    1d94:	0b390b3b 	bleq	e44a88 <__ccfg+0xe24ae0>
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1d98:	06021349 	streq	r1, [r2], -r9, asr #6
    __asm("    ldr     r0, =_bss\n"
    1d9c:	341f0000 	ldrcc	r0, [pc], #-0	; 1da4 <zero_loop>
    1da0:	3a080300 	bcc	2029a8 <__ccfg+0x1e2a00>
    1da4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1da8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1dac:	0000000a 	andeq	r0, r0, sl
   main();
    1db0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    FaultISR();
    1db4:	030b130e 	movweq	r1, #45838	; 0xb30e
        *pui32Dest++ = *pui32Src++;
    1db8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    1dbc:	10011106 	andne	r1, r1, r6, lsl #2
    1dc0:	02000006 	andeq	r0, r0, #6
    1dc4:	0b0b0024 	bleq	2c1e5c <__ccfg+0x2a1eb4>
    1dc8:	0e030b3e 	vmoveq.16	d3[0], r0
    1dcc:	16030000 	strne	r0, [r3], -r0
    1dd0:	3a0e0300 	bcc	3829d8 <__ccfg+0x362a30>
    1dd4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
static byte get_byte () {
    1dd8:	0013490b 	andseq	r4, r3, fp, lsl #18
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1ddc:	00240400 	eoreq	r0, r4, r0, lsl #8
    1de0:	0b3e0b0b 	bleq	f84a14 <__ccfg+0xf64a6c>
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1de4:	00000803 	andeq	r0, r0, r3, lsl #16
    1de8:	03011305 	movweq	r1, #4869	; 0x1305
		if (ee_inp)
    1dec:	3a0b0b0e 	bcc	2c4a2c <__ccfg+0x2a4a84>
			b |= 1;
    1df0:	010b3b0b 	tsteq	fp, fp, lsl #22
    1df4:	06000013 			; <UNDEFINED> instruction: 0x06000013
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1df8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
	for (b = 0, i = 0; i < 8; i++) {
    1dfc:	0b381349 	bleq	e06b28 <__ccfg+0xde6b80>
}
    1e00:	00000c34 	andeq	r0, r0, r4, lsr ip
    1e04:	0b000f07 	bleq	5a28 <__exidx_end+0x980>
    1e08:	0800000b 	stmdaeq	r0, {r0, r1, r3}
static void put_byte (byte b) {
    1e0c:	13490026 	movtne	r0, #36902	; 0x9026
    1e10:	35090000 	strcc	r0, [r9, #-0]
    1e14:	00134900 	andseq	r4, r3, r0, lsl #18
    1e18:	01130a00 	tsteq	r3, r0, lsl #20
		if (b & 0x80)
    1e1c:	0b3a0b0b 	bleq	e84a50 <__ccfg+0xe64aa8>
    1e20:	0b390b3b 	bleq	e44b14 <__ccfg+0xe24b6c>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1e24:	00001301 	andeq	r1, r0, r1, lsl #6
	for (i = 0; i < 8; i++) {
    1e28:	03000d0b 	movweq	r0, #3339	; 0xd0b
		b <<= 1;
    1e2c:	3b0b3a0e 	blcc	2d066c <__ccfg+0x2b06c4>
	for (i = 0; i < 8; i++) {
    1e30:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
}
    1e34:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    1e38:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1e3c:	0c00000b 	stceq	0, cr0, [r0], {11}
    1e40:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
	put_byte (cmd);
    1e44:	0b3b0b3a 	bleq	ec4b34 <__ccfg+0xea4b8c>
    1e48:	13490b39 	movtne	r0, #39737	; 0x9b39
}
    1e4c:	00000b38 	andeq	r0, r0, r8, lsr fp
    1e50:	0300340d 	movweq	r3, #1037	; 0x40d
static void wwait (word st, word del) {
    1e54:	3b0b3a0e 	blcc	2d0694 <__ccfg+0x2b06ec>
    1e58:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1e5c:	3c0c3f13 	stccc	15, cr3, [ip], {19}
	while (dopen && (rdsr () & 1)) {
    1e60:	0e00000c 	cdpeq	0, 0, cr0, cr0, cr12, {0}
    1e64:	0b0b000f 	bleq	2c1ea8 <__ccfg+0x2a1f00>
    1e68:	00001349 	andeq	r1, r0, r9, asr #6
    1e6c:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
	put_byte (CMD_RDSR);
    1e70:	00130113 	andseq	r0, r3, r3, lsl r1
	r = get_byte ();
    1e74:	00211000 	eoreq	r1, r1, r0
    1e78:	16110000 	ldrne	r0, [r1], -r0
	while (dopen && (rdsr () & 1)) {
    1e7c:	3a0e0300 	bcc	382a84 <__ccfg+0x362adc>
}
    1e80:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		if (st == WNONE)
    1e84:	0013490b 	andseq	r4, r3, fp, lsl #18
    1e88:	01151200 	tsteq	r5, r0, lsl #4
			mdelay (1);
    1e8c:	13010c27 	movwne	r0, #7207	; 0x1c27
    1e90:	05130000 	ldreq	r0, [r3, #-0]
			delay (del, st);
    1e94:	00134900 	andseq	r4, r3, r0, lsl #18
    1e98:	00341400 	eorseq	r1, r4, r0, lsl #8
			release;
    1e9c:	0b3a0e03 	bleq	e856b0 <__ccfg+0xe65708>
    1ea0:	0b39053b 	bleq	e43394 <__ccfg+0xe233ec>
    1ea4:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1d88 <FaultISR>
static void ready () {
    1ea8:	00000c3c 	andeq	r0, r0, ip, lsr ip
	if (dopen) {
    1eac:	0b011315 	bleq	46b08 <__ccfg+0x26b60>
		wwait (WNONE, 1);
    1eb0:	3b0b3a0b 	blcc	2d06e4 <__ccfg+0x2b073c>
    1eb4:	010b3905 	tsteq	fp, r5, lsl #18
    1eb8:	16000013 			; <UNDEFINED> instruction: 0x16000013
	dstat = 0;
    1ebc:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
}
    1ec0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1ec4:	13490b39 	movtne	r0, #39737	; 0x9b39
    1ec8:	00000b38 	andeq	r0, r0, r8, lsr fp
	udelay (1);
    1ecc:	03011317 	movweq	r1, #4887	; 0x1317
    1ed0:	3a0b0b0e 	bcc	2c4b10 <__ccfg+0x2a4b68>
	udelay (1);
    1ed4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		dopen = DOPEN_TEMP;
    1ed8:	0013010b 	andseq	r0, r3, fp, lsl #2
    1edc:	00211800 	eoreq	r1, r1, r0, lsl #16
    1ee0:	0b2f1349 	bleq	bc6c0c <__ccfg+0xba6c64>
    1ee4:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
static void cclose () {
    1ee8:	030c3f01 	movweq	r3, #52993	; 0xcf01
	if (dopen == DOPEN_TEMP) {
    1eec:	3b0b3a0e 	blcc	2d072c <__ccfg+0x2b0784>
    1ef0:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
		wwait (WNONE, 1);
    1ef4:	1113490c 	tstne	r3, ip, lsl #18
    1ef8:	40011201 	andmi	r1, r1, r1, lsl #4
	cmd_0 (CMD_DP);
    1efc:	0013010a 	andseq	r0, r3, sl, lsl #2
    1f00:	00051a00 	andeq	r1, r5, r0, lsl #20
		dopen = 0;
    1f04:	0b3a0803 	bleq	e83f18 <__ccfg+0xe63f70>
}
    1f08:	0b390b3b 	bleq	e44bfc <__ccfg+0xe24c54>
word ee_open () {
    1f0c:	06021349 	streq	r1, [r2], -r9, asr #6
	ready ();
    1f10:	051b0000 	ldreq	r0, [fp, #-0]
	dopen = DOPEN_PERM;
    1f14:	3a080300 	bcc	202b1c <__ccfg+0x1e2b74>
    1f18:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
}
    1f1c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	if (dopen) {
    1f20:	1c00000a 	stcne	0, cr0, [r0], {10}
    1f24:	00000018 	andeq	r0, r0, r8, lsl r0
		dopen = DOPEN_TEMP;
    1f28:	0300341d 	movweq	r3, #1053	; 0x41d
		cclose ();
    1f2c:	3b0b3a0e 	blcc	2d076c <__ccfg+0x2b07c4>
}
    1f30:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
int ser_in (word st, char *buf, int len) {
    1f34:	00060213 	andeq	r0, r6, r3, lsl r2
    1f38:	00341e00 	eorseq	r1, r4, r0, lsl #28
	if (len == 0)
    1f3c:	0b3a0803 	bleq	e83f50 <__ccfg+0xe63fa8>
	if (__inpline == NULL) {
    1f40:	0b390b3b 	bleq	e44c34 <__ccfg+0xe24c8c>
		if ((prcs = running (__inserial)) == 0) {
    1f44:	0a021349 	beq	86c70 <__ccfg+0x66cc8>
    1f48:	01000000 	mrseq	r0, (UNDEF: 0)
			prcs = runthread (__inserial);
    1f4c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1f50:	0e030b13 	vmoveq.32	d3[0], r0
			if (prcs == 0) {
    1f54:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
				npwait (st);
    1f58:	06100111 			; <UNDEFINED> instruction: 0x06100111
		release;
    1f5c:	16020000 	strne	r0, [r2], -r0
		join (prcs, st);
    1f60:	3a0e0300 	bcc	382b68 <__ccfg+0x362bc0>
    1f64:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	if (*__inpline == NULL) // bin cmd
    1f68:	0013490b 	andseq	r4, r3, fp, lsl #18
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    1f6c:	00240300 	eoreq	r0, r4, r0, lsl #6
	if (prcs >= len)
    1f70:	0b3e0b0b 	bleq	f84ba4 <__ccfg+0xf64bfc>
		prcs = len-1;
    1f74:	00000e03 	andeq	r0, r0, r3, lsl #28
	memcpy (buf, __inpline, prcs);
    1f78:	49002604 	stmdbmi	r0, {r2, r9, sl, sp}
    1f7c:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
    1f80:	13490035 	movtne	r0, #36917	; 0x9035
	ufree (__inpline);
    1f84:	24060000 	strcs	r0, [r6], #-0
	__inpline = NULL;
    1f88:	3e0b0b00 	vmlacc.f64	d0, d11, d0
	if (*buf) // if it's NULL, it's a bin cmd
    1f8c:	0008030b 	andeq	r0, r8, fp, lsl #6
		buf [prcs] = '\0';
    1f90:	00160700 	andseq	r0, r6, r0, lsl #14
}
    1f94:	0b3a0e03 	bleq	e857a8 <__ccfg+0xe65800>
		prcs = strlen (__inpline);
    1f98:	0b39053b 	bleq	e4348c <__ccfg+0xe234e4>
    1f9c:	00001349 	andeq	r1, r0, r9, asr #6
		return 0;
    1fa0:	0b011708 	bleq	47bc8 <__ccfg+0x27c20>
    1fa4:	3b0b3a0b 	blcc	2d07d8 <__ccfg+0x2b0830>
    1fa8:	010b390b 	tsteq	fp, fp, lsl #18
int ser_outf (word st, const char *m, ...) {
    1fac:	09000013 	stmdbeq	r0, {r0, r1, r4}
    1fb0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
	if ((prcs = running (__outserial)) != 0) {
    1fb4:	0b3b0b3a 	bleq	ec4ca4 <__ccfg+0xea4cfc>
    1fb8:	13490b39 	movtne	r0, #39737	; 0x9b39
		join (prcs, st);
    1fbc:	010a0000 	mrseq	r0, (UNDEF: 10)
    1fc0:	01134901 	tsteq	r3, r1, lsl #18
		release;
    1fc4:	0b000013 	bleq	2018 <ser_inf+0x18>
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1fc8:	13490021 	movtne	r0, #36897	; 0x9021
    1fcc:	00000b2f 	andeq	r0, r0, pc, lsr #22
    1fd0:	0b01130c 	bleq	46c08 <__ccfg+0x26c60>
		umwait (st);
    1fd4:	3b0b3a0b 	blcc	2d0808 <__ccfg+0x2b0860>
    1fd8:	010b390b 	tsteq	fp, fp, lsl #18
	if (runstrand (__outserial, buf) == 0) {
    1fdc:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    1fe0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1fe4:	0b3b0b3a 	bleq	ec4cd4 <__ccfg+0xea4d2c>
		ufree (buf);
    1fe8:	13490b39 	movtne	r0, #39737	; 0x9b39
		npwait (st);
    1fec:	00000b38 	andeq	r0, r0, r8, lsr fp
}
    1ff0:	0b000f0e 	bleq	5c30 <__exidx_end+0xb88>
    1ff4:	0f00000b 	svceq	0x0000000b
    1ff8:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    1ffc:	0b3a0b0b 	bleq	e84c30 <__ccfg+0xe64c88>
int ser_inf (word st, const char *fmt, ...) {
    2000:	0b390b3b 	bleq	e44cf4 <__ccfg+0xe24d4c>
    2004:	00001301 	andeq	r1, r0, r1, lsl #6
	if (fmt == NULL)
    2008:	03000d10 	movweq	r0, #3344	; 0xd10
	if (__inpline == NULL) {
    200c:	3b0b3a08 	blcc	2d0834 <__ccfg+0x2b088c>
		if ((prcs = running (__inserial)) == 0) {
    2010:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2014:	000b3813 	andeq	r3, fp, r3, lsl r8
			prcs = runthread (__inserial);
    2018:	000f1100 	andeq	r1, pc, r0, lsl #2
    201c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
			if (prcs == 0) {
    2020:	13120000 	tstne	r2, #0
				npwait (st);
    2024:	0b0e0301 	bleq	382c30 <__ccfg+0x362c88>
		release;
    2028:	3b0b3a05 	blcc	2d0844 <__ccfg+0x2b089c>
		join (prcs, st);
    202c:	010b390b 	tsteq	fp, fp, lsl #18
    2030:	13000013 	movwne	r0, #19
	va_start (ap, fmt);
    2034:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
	prcs = vscan (__inpline, fmt, ap);
    2038:	0b3b0b3a 	bleq	ec4d28 <__ccfg+0xea4d80>
    203c:	13490b39 	movtne	r0, #39737	; 0x9b39
	ufree (__inpline);
    2040:	00000538 	andeq	r0, r0, r8, lsr r5
	__inpline = NULL;
    2044:	27001514 	smladcs	r0, r4, r5, r1
}
    2048:	1500000c 	strne	r0, [r0, #-12]
    204c:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
    2050:	13011349 	movwne	r1, #4937	; 0x1349
		return 0;
    2054:	05160000 	ldreq	r0, [r6, #-0]
    2058:	00134900 	andseq	r4, r3, r0, lsl #18
    205c:	01131700 	tsteq	r3, r0, lsl #14
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    2060:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
    2064:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2068:	13010b39 	movwne	r0, #6969	; 0x1b39
	RF_cmdFs.frequency = 
    206c:	0d180000 	ldceq	0, cr0, [r8, #-0]
}
    2070:	3a0e0300 	bcc	382c78 <__ccfg+0x362cd0>
    2074:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2078:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    207c:	1900000b 	stmdbne	r0, {r0, r1, r3}
static int option (int opt, address val) {
    2080:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2084:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2088:	13490b39 	movtne	r0, #39737	; 0x9b39
    208c:	00000538 	andeq	r0, r0, r8, lsr r5
    2090:	0301131a 	movweq	r1, #4890	; 0x131a
    2094:	3a0b0b0e 	bcc	2c4cd4 <__ccfg+0x2a4d2c>
    2098:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    209c:	0013010b 	andseq	r0, r3, fp, lsl #2
    20a0:	01131b00 	tsteq	r3, r0, lsl #22
    20a4:	0b3a0b0b 	bleq	e84cd8 <__ccfg+0xe64d30>
    20a8:	0b39053b 	bleq	e4359c <__ccfg+0xe235f4>
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    20ac:	00001301 	andeq	r1, r0, r1, lsl #6
    20b0:	0b01171c 	bleq	47d28 <__ccfg+0x27d80>
			goto RVal;
    20b4:	3b0b3a0b 	blcc	2d08e8 <__ccfg+0x2b0940>
			_BIS (dstate, DSTATE_RXON);
    20b8:	010b3905 	tsteq	fp, r5, lsl #18
    20bc:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
	int ret = 0;
    20c0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
			p_trigger (drvprcs, qevent);
    20c4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    20c8:	13490b39 	movtne	r0, #39737	; 0x9b39
    20cc:	131e0000 	tstne	lr, #0
    20d0:	3c0e0300 	stccc	3, cr0, [lr], {-0}
    20d4:	1f00000c 	svcne	0x0000000c
    20d8:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
    20dc:	00001301 	andeq	r1, r0, r1, lsl #6
    20e0:	03003420 	movweq	r3, #1056	; 0x420
    20e4:	3b0b3a0e 	blcc	2d0924 <__ccfg+0x2b097c>
    20e8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
}
    20ec:	3c0c3f13 	stccc	15, cr3, [ip], {19}
			_BIC (dstate, DSTATE_RXON);
    20f0:	2100000c 	tstcs	r0, ip
    20f4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
			statid = (val == NULL) ? 0 : *val;
    20f8:	0b3b0b3a 	bleq	ec4de8 <__ccfg+0xea4e40>
    20fc:	13490b39 	movtne	r0, #39737	; 0x9b39
	int ret = 0;
    2100:	0b0d0b0b 	bleq	344d34 <__ccfg+0x324d8c>
			ret = (int) statid;
    2104:	0b380b0c 	bleq	e04d3c <__ccfg+0xde4d94>
	if (val != NULL)
    2108:	0d220000 	stceq	0, cr0, [r2, #-0]
		*val = ret;
    210c:	3a0e0300 	bcc	382d14 <__ccfg+0x362d6c>
			ret = rbuffl + 2;
    2110:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2114:	0b13490b 	bleq	4d4548 <__ccfg+0x4b45a0>
			if (val != NULL) {
    2118:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
				memcpy (val, &rxstat,
    211c:	000b380b 	andeq	r3, fp, fp, lsl #16
    2120:	00342300 	eorseq	r2, r4, r0, lsl #6
				memset (&rxstat, 0, 
    2124:	0b3a0e03 	bleq	e85938 <__ccfg+0xe65990>
    2128:	0b390b3b 	bleq	e44e1c <__ccfg+0xe24e74>
			if (val == NULL)
    212c:	0a021349 	beq	86e58 <__ccfg+0x66eb0>
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    2130:	21240000 			; <UNDEFINED> instruction: 0x21240000
    2134:	2f134900 	svccs	0x00134900
				utimer_set (bckf_timer, *val);
    2138:	25000005 	strcs	r0, [r0, #-5]
    213c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2140:	0b3b0b3a 	bleq	ec4e30 <__ccfg+0xea4e88>
			for (ret = 0; ret < 8; ret++)
    2144:	13490b39 	movtne	r0, #39737	; 0x9b39
				if (RF_cmdPropRadioDivSetup.txPower
    2148:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
					== patable [ret])
    214c:	21260000 			; <UNDEFINED> instruction: 0x21260000
				if (RF_cmdPropRadioDivSetup.txPower
    2150:	27000000 	strcs	r0, [r0, -r0]
			for (ret = 0; ret < 8; ret++)
    2154:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2158:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    215c:	13490b39 	movtne	r0, #39737	; 0x9b39
    2160:	2e280000 	cdpcs	0, 2, cr0, cr8, cr0, {0}
    2164:	030c3f01 	movweq	r3, #52993	; 0xcf01
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    2168:	3b0b3a0e 	blcc	2d09a8 <__ccfg+0x2b0a00>
    216c:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
			_BIS (dstate, DSTATE_IRST);
    2170:	1201110c 	andne	r1, r1, #12, 2
    2174:	010a4001 	tsteq	sl, r1
    2178:	29000013 	stmdbcs	r0, {r0, r1, r4}
			ret = (int) channel;
    217c:	08030005 	stmdaeq	r3, {r0, r2}
			goto RVal;
    2180:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
				(*val > 7) ? 7 : *val;
    2184:	13490b39 	movtne	r0, #39737	; 0x9b39
    2188:	00000602 	andeq	r0, r0, r2, lsl #12
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    218c:	31011d2a 	tstcc	r1, sl, lsr #26
    2190:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
			plugch ();
    2194:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
			_BIS (dstate, DSTATE_IRST);
    2198:	010b5705 	tsteq	fp, r5, lsl #14
    219c:	2b000013 	blcs	21f0 <option+0x170>
			ret = (int) vrate;
    21a0:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    21a4:	342c0000 	strtcc	r0, [ip], #-0
    21a8:	00133100 	andseq	r3, r3, r0, lsl #2
    21ac:	00342d00 	eorseq	r2, r4, r0, lsl #26
    21b0:	06021331 			; <UNDEFINED> instruction: 0x06021331
    21b4:	1d2e0000 	stcne	0, cr0, [lr, #-0]
    21b8:	52133100 	andspl	r3, r3, #0, 2
    21bc:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
    21c0:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    21c4:	2f00000b 	svccs	0x0000000b
    21c8:	0e03012e 	adfeqsp	f0, f3, #0.5
    21cc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    21d0:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
			syserror (EREQPAR, "cc13 op");
    21d4:	01111349 	tsteq	r1, r9, asr #6
    21d8:	0a400112 	beq	1002628 <__ccfg+0xfe2680>
    21dc:	00001301 	andeq	r1, r0, r1, lsl #6
    21e0:	03003430 	movweq	r3, #1072	; 0x430
    21e4:	3b0b3a08 	blcc	2d0a0c <__ccfg+0x2b0a64>
    21e8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    21ec:	00060213 	andeq	r0, r6, r3, lsl r2
    21f0:	000a3100 	andeq	r3, sl, r0, lsl #2
    21f4:	0b3a0e03 	bleq	e85a08 <__ccfg+0xe65a60>
    21f8:	0b39053b 	bleq	e436ec <__ccfg+0xe23744>
    21fc:	00000111 	andeq	r0, r0, r1, lsl r1
    2200:	11010b32 	tstne	r1, r2, lsr fp
    2204:	00011201 	andeq	r1, r1, r1, lsl #4
    2208:	012e3300 			; <UNDEFINED> instruction: 0x012e3300
    220c:	0b3a0e03 	bleq	e85a20 <__ccfg+0xe65a78>
static void issue_cmd (lword cmd) {
    2210:	0b39053b 	bleq	e43704 <__ccfg+0xe2375c>
    2214:	13010b20 	movwne	r0, #6944	; 0x1b20
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    2218:	34340000 	ldrtcc	r0, [r4], #-0
    221c:	3a080300 	bcc	202e24 <__ccfg+0x1e2e7c>
    2220:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		if (res != 0x86)
    2224:	0013490b 	andseq	r4, r3, fp, lsl #18
			syserror (EHARDWARE, "hang ic0");
    2228:	00053500 	andeq	r3, r5, r0, lsl #10
    222c:	0b3a0e03 	bleq	e85a40 <__ccfg+0xe65a98>
		if (cnt-- == 0) {
    2230:	0b39053b 	bleq	e43724 <__ccfg+0xe2377c>
			diag ("HUP %lx %lx", cmd, res);
    2234:	06021349 	streq	r1, [r2], -r9, asr #6
    2238:	1d360000 	ldcne	0, cr0, [r6, #-0]
			syserror (EHARDWARE, "hang ic0");
    223c:	11133100 	tstne	r3, r0, lsl #2
		udelay (1);
    2240:	58011201 	stmdapl	r1, {r0, r9, ip}
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    2244:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
}
    2248:	3700000b 	strcc	r0, [r0, -fp]
    224c:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
    2250:	00001301 	andeq	r1, r0, r1, lsl #6
    2254:	31011d38 	tstcc	r1, r8, lsr sp
static void rx_de () {
    2258:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
	if ((dstate & DSTATE_RXAC) == 0)
    225c:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
    2260:	010b5705 	tsteq	fp, r5, lsl #14
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    2264:	39000013 	stmdbcc	r0, {r0, r1, r4}
	_BIC (dstate, DSTATE_RXAC);
    2268:	13310005 	teqne	r1, #5
    226c:	1d3a0000 	ldcne	0, cr0, [sl, #-0]
}
    2270:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    2274:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
    2278:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
static void rf_off () {
    227c:	3b00000b 	blcc	22b0 <rf_off+0x34>
	if ((dstate & DSTATE_RFON) == 0)
    2280:	0e03012e 	adfeqsp	f0, f3, #0.5
    2284:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	IntDisable (INT_RFC_CPE_0);
    2288:	01110b39 	tsteq	r1, r9, lsr fp
    228c:	0a400112 	beq	10026dc <__ccfg+0xfe2734>
    2290:	00001301 	andeq	r1, r0, r1, lsl #6
	RFCAdi3VcoLdoVoltageMode (false);
    2294:	03002e3c 	movweq	r2, #3644	; 0xe3c
	RFCSynthPowerDown ();
    2298:	3b0b3a0e 	blcc	2d0ad8 <__ccfg+0x2b0b30>
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    229c:	200b3905 	andcs	r3, fp, r5, lsl #18
    22a0:	3d00000b 	stccc	0, cr0, [r0, #-44]	; 0xffffffd4
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    22a4:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    22a8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	OSCHF_SwitchToRcOscTurnOffXosc ();
    22ac:	01110b39 	tsteq	r1, r9, lsr fp
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    22b0:	0a400112 	beq	1002700 <__ccfg+0xfe2758>
    22b4:	2e3e0000 	cdpcs	0, 3, cr0, cr14, cr0, {0}
    22b8:	3a0e0300 	bcc	382ec0 <__ccfg+0x362f18>
	_BIC (dstate, DSTATE_RFON);
    22bc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    22c0:	000b200b 	andeq	r2, fp, fp
}
    22c4:	012e3f00 			; <UNDEFINED> instruction: 0x012e3f00
    22c8:	0b3a0e03 	bleq	e85adc <__ccfg+0xe65b34>
    22cc:	0b390b3b 	bleq	e44fc0 <__ccfg+0xe25018>
    22d0:	0b200c27 	bleq	805374 <__ccfg+0x7e53cc>
    22d4:	00001301 	andeq	r1, r0, r1, lsl #6
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    22d8:	03000540 	movweq	r0, #1344	; 0x540
    22dc:	3b0b3a08 	blcc	2d0b04 <__ccfg+0x2b0b5c>
    22e0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		if (cmd->status == tstat)
    22e4:	41000013 	tstmi	r0, r3, lsl r0
		if (timeout-- == 0) {
    22e8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    22ec:	0b3b0b3a 	bleq	ec4fdc <__ccfg+0xea5034>
    22f0:	13490b39 	movtne	r0, #39737	; 0x9b39
    22f4:	34420000 	strbcc	r0, [r2], #-0
			syserror (EHARDWARE, "rt2");
    22f8:	3a080300 	bcc	202f00 <__ccfg+0x1e2f58>
    22fc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		udelay (1);
    2300:	0013490b 	andseq	r4, r3, fp, lsl #18
		if (cmd->status == tstat)
    2304:	012e4300 			; <UNDEFINED> instruction: 0x012e4300
}
    2308:	0b3a0e03 	bleq	e85b1c <__ccfg+0xe65b74>
    230c:	0b39053b 	bleq	e43800 <__ccfg+0xe23858>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2310:	0b200c27 	bleq	8053b4 <__ccfg+0x7e540c>
    2314:	00001301 	andeq	r1, r0, r1, lsl #6
static void rf_on () {
    2318:	03000544 	movweq	r0, #1348	; 0x544
    231c:	3b0b3a0e 	blcc	2d0b5c <__ccfg+0x2b0bb4>
	OSCHF_TurnOnXosc();
    2320:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    2324:	45000013 	strmi	r0, [r0, #-19]	; 0xffffffed
    2328:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    232c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2330:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2334:	00000b20 	andeq	r0, r0, r0, lsr #22
    2338:	03002e46 	movweq	r2, #3654	; 0xe46
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    233c:	3b0b3a0e 	blcc	2d0b7c <__ccfg+0x2b0bd4>
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    2340:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
	issue_cmd (
    2344:	000b200c 	andeq	r2, fp, ip
    2348:	012e4700 			; <UNDEFINED> instruction: 0x012e4700
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    234c:	01111331 	tsteq	r1, r1, lsr r3
    2350:	0a400112 	beq	10027a0 <__ccfg+0xfe27f8>
    2354:	00001301 	andeq	r1, r0, r1, lsl #6
   pPatchTab[80] = 0;
    2358:	31000548 	tstcc	r0, r8, asr #10
   } while (--nIterations);
    235c:	00060213 	andeq	r0, r6, r3, lsl r2
   pPatchTab[53] = 2;
    2360:	011d4900 	tsteq	sp, r0, lsl #18
    2364:	01111331 	tsteq	r1, r1, lsr r3
   pPatchTab[55] = 3;
    2368:	0b580112 	bleq	16027b8 <__ccfg+0x15e2810>
   pPatchTab[110] = 4;
    236c:	0b570b59 	bleq	15c50d8 <__ccfg+0x15a5130>
   pPatchTab[107] = 5;
    2370:	1d4a0000 	stclne	0, cr0, [sl, #-0]
   pPatchTab[65] = 6;
    2374:	11133101 	tstne	r3, r1, lsl #2
    2378:	58011201 	stmdapl	r1, {r0, r9, ip}
   pPatchTab[57] = 1;
    237c:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
   pIrqPatch[1] = _IRQ_PATCH_0;
    2380:	4b00000b 	blmi	23b4 <rf_on.part.0+0xa4>
   const uint32_t *pS = patchGenfskRfe;
    2384:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
      t2 = *pS++;
    2388:	01120111 	tsteq	r2, r1, lsl r1
      t4 = *pS++;
    238c:	00000a40 	andeq	r0, r0, r0, asr #20
      t6 = *pS++;
    2390:	3100344c 	tstcc	r0, ip, asr #8
      t8 = *pS++;
    2394:	00061c13 	andeq	r1, r6, r3, lsl ip
      *pD++ = t1;
    2398:	11010000 	mrsne	r0, (UNDEF: 1)
      *pD++ = t2;
    239c:	130e2501 	movwne	r2, #58625	; 0xe501
      *pD++ = t3;
    23a0:	1b0e030b 	blne	382fd4 <__ccfg+0x36302c>
      *pD++ = t5;
    23a4:	1106550e 	tstne	r6, lr, lsl #10
      *pD++ = t7;
    23a8:	00061001 	andeq	r1, r6, r1
   } while (--nIterations);
    23ac:	00240200 	eoreq	r0, r4, r0, lsl #4
    23b0:	0b3e0b0b 	bleq	f84fe4 <__ccfg+0xf6503c>
      *pD++ = t8;
    23b4:	00000e03 	andeq	r0, r0, r3, lsl #28
   } while (--nIterations);
    23b8:	03001603 	movweq	r1, #1539	; 0x603
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    23bc:	3b0b3a0e 	blcc	2d0bfc <__ccfg+0x2b0c54>
   *pD++ = t2;
    23c0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
   *pD++ = t3;
    23c4:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
   *pD++ = t4;
    23c8:	0b0b0024 	bleq	2c2460 <__ccfg+0x2a24b8>
   *pD++ = t5;
    23cc:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    23d0:	13050000 	movwne	r0, #20480	; 0x5000
	RFCAdi3VcoLdoVoltageMode (true);
    23d4:	0b0e0301 	bleq	382fe0 <__ccfg+0x363038>
    23d8:	3b0b3a0b 	blcc	2d0c0c <__ccfg+0x2b0c64>
       	RFCRfTrimSet (&rfTrim);
    23dc:	0013010b 	andseq	r0, r3, fp, lsl #2
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    23e0:	000d0600 	andeq	r0, sp, r0, lsl #12
    23e4:	13490e03 	movtne	r0, #40451	; 0x9e03
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    23e8:	0c340b38 			; <UNDEFINED> instruction: 0x0c340b38
    23ec:	0f070000 	svceq	0x00070000
	issue_cmd ((lword)&cmd_srt);
    23f0:	000b0b00 	andeq	r0, fp, r0, lsl #22
    23f4:	00260800 	eoreq	r0, r6, r0, lsl #16
	issue_cmd ((lword)&RF_cmdFs);
    23f8:	00001349 	andeq	r1, r0, r9, asr #6
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    23fc:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
    2400:	0a000013 	beq	2454 <rf_on.part.0+0x144>
    2404:	0b0b000f 	bleq	2c2448 <__ccfg+0x2a24a0>
	IntEnable (INT_RFC_CPE_0);
    2408:	00001349 	andeq	r1, r0, r9, asr #6
	_BIC (dstate, DSTATE_IRST);
    240c:	0b01130b 	bleq	47040 <__ccfg+0x27098>
    2410:	3b0b3a0b 	blcc	2d0c44 <__ccfg+0x2b0c9c>
    2414:	010b390b 	tsteq	fp, fp, lsl #18
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    2418:	0c000013 	stceq	0, cr0, [r0], {19}
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    241c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
	IntEnable (INT_RFC_CPE_0);
    2420:	0b3b0b3a 	bleq	ec5110 <__ccfg+0xea5168>
    2424:	13490b39 	movtne	r0, #39737	; 0x9b39
}
    2428:	0b0d0b0b 	bleq	34505c <__ccfg+0x3250b4>
	IntEnable (INT_RFC_CPE_0);
    242c:	0b380b0c 	bleq	e05064 <__ccfg+0xde50bc>
    2430:	0d0d0000 	stceq	0, cr0, [sp, #-0]
    2434:	3a0e0300 	bcc	38303c <__ccfg+0x363094>
    2438:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    243c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    2440:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    2444:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2448:	0b3b0b3a 	bleq	ec5138 <__ccfg+0xea5190>
    244c:	13490b39 	movtne	r0, #39737	; 0x9b39
    2450:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    2454:	010f0000 	mrseq	r0, CPSR
    2458:	01134901 	tsteq	r3, r1, lsl #18
    245c:	10000013 	andne	r0, r0, r3, lsl r0
    2460:	00000021 	andeq	r0, r0, r1, lsr #32
    2464:	03001611 	movweq	r1, #1553	; 0x611
    2468:	3b0b3a0e 	blcc	2d0ca8 <__ccfg+0x2b0d00>
    246c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    2470:	12000013 	andne	r0, r0, #19
    2474:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
    2478:	00001301 	andeq	r1, r0, r1, lsl #6
    247c:	49000513 	stmdbmi	r0, {r0, r1, r4, r8, sl}
    2480:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
    2484:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2488:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    248c:	13490b39 	movtne	r0, #39737	; 0x9b39
static void rx_int_enable () {
    2490:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2494:	15150000 	ldrne	r0, [r5, #-0]
    2498:	490c2701 	stmdbmi	ip, {r0, r8, r9, sl, sp}
    249c:	00130113 	andseq	r0, r3, r3, lsl r1
    24a0:	01131600 	tsteq	r3, r0, lsl #12
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    24a4:	0b3a0b0b 	bleq	e850d8 <__ccfg+0xe65130>
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    24a8:	0b39053b 	bleq	e4399c <__ccfg+0xe239f4>
    24ac:	00001301 	andeq	r1, r0, r1, lsl #6
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    24b0:	03000d17 	movweq	r0, #3351	; 0xd17
    24b4:	3b0b3a0e 	blcc	2d0cf4 <__ccfg+0x2b0d4c>
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    24b8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    24bc:	000b3813 	andeq	r3, fp, r3, lsl r8
    24c0:	01131800 	tsteq	r3, r0, lsl #16
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    24c4:	0b0b0e03 	bleq	2c5cd8 <__ccfg+0x2a5d30>
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    24c8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    24cc:	13010b39 	movwne	r0, #6969	; 0x1b39
		if (db->status == DATA_ENTRY_FINISHED) {
    24d0:	21190000 	tstcs	r9, r0
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    24d4:	2f134900 	svccs	0x00134900
    24d8:	1a00000b 	bne	250c <rx_int_enable+0x7c>
			nr++;
    24dc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    24e0:	0b3b0b3a 	bleq	ec51d0 <__ccfg+0xea5228>
    24e4:	13490b39 	movtne	r0, #39737	; 0x9b39
    24e8:	0a020c3f 	beq	855ec <__ccfg+0x65644>
    24ec:	341b0000 	ldrcc	r0, [fp], #-0
				__dp [pl + 1] = __dp [pl] - 128;
    24f0:	3a0e0300 	bcc	3830f8 <__ccfg+0x363150>
				pl = __dp [1] + 2;
    24f4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
				__dp [pl + 1] = __dp [pl] - 128;
    24f8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    24fc:	1c00000a 	stcne	0, cr0, [r0], {10}
				__dp [pl] = 0;
    2500:	0e03012e 	adfeqsp	f0, f3, #0.5
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2504:	0b3b0b3a 	bleq	ec51f4 <__ccfg+0xea524c>
    2508:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    250c:	01111349 	tsteq	r1, r9, asr #6
			db->status = DATA_ENTRY_PENDING;
    2510:	0a400112 	beq	1002960 <__ccfg+0xfe29b8>
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2514:	00001301 	andeq	r1, r0, r1, lsl #6
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    2518:	0300051d 	movweq	r0, #1309	; 0x51d
				diag ("BAD RX");
    251c:	3b0b3a08 	blcc	2d0d44 <__ccfg+0x2b0d9c>
    2520:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	if (nr) {
    2524:	00060213 	andeq	r0, r6, r3, lsl r2
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2528:	00051e00 	andeq	r1, r5, r0, lsl #28
}
    252c:	0b3a0e03 	bleq	e85d40 <__ccfg+0xe65d98>
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2530:	0b390b3b 	bleq	e45224 <__ccfg+0xe2527c>
    2534:	0a021349 	beq	87260 <__ccfg+0x672b8>
    2538:	051f0000 	ldreq	r0, [pc, #-0]	; 2540 <rx_int_enable+0xb0>
}
    253c:	3a080300 	bcc	203144 <__ccfg+0x1e319c>
    2540:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2544:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2548:	2000000a 	andcs	r0, r0, sl
    254c:	0e03012e 	adfeqsp	f0, f3, #0.5
    2550:	0b3b0b3a 	bleq	ec5240 <__ccfg+0xea5298>
    2554:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    2558:	0b201349 	bleq	807284 <__ccfg+0x7e72dc>
    255c:	00001301 	andeq	r1, r0, r1, lsl #6
thread (cc1350_driver)
    2560:	03000521 	movweq	r0, #1313	; 0x521
    2564:	3b0b3a08 	blcc	2d0d8c <__ccfg+0x2b0de4>
    2568:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    256c:	22000013 	andcs	r0, r0, #19
    2570:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
		if (dstate & DSTATE_IRST) {
    2574:	0b3b0b3a 	bleq	ec5264 <__ccfg+0xea52bc>
    2578:	13490b39 	movtne	r0, #39737	; 0x9b39
    257c:	34230000 	strtcc	r0, [r3], #-0
			rf_off ();
    2580:	3a080300 	bcc	203188 <__ccfg+0x1e31e0>
			_BIC (dstate,
    2584:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2588:	0013490b 	andseq	r4, r3, fp, lsl #18
		if (dstate & DSTATE_RXAC) {
    258c:	012e2400 			; <UNDEFINED> instruction: 0x012e2400
    2590:	01111331 	tsteq	r1, r1, lsr r3
			if ((dstate & DSTATE_RXON) == 0)
    2594:	0a400112 	beq	10029e4 <__ccfg+0xfe2a3c>
				rx_de ();
    2598:	05250000 	streq	r0, [r5, #-0]!
		if (paylen == 0) {
    259c:	02133100 	andseq	r3, r3, #0, 2
    25a0:	26000006 	strcs	r0, [r0], -r6
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    25a4:	13310034 	teqne	r1, #52	; 0x34
    25a8:	1d270000 	stcne	0, cr0, [r7, #-0]
    25ac:	11133101 	tstne	r3, r1, lsl #2
    25b0:	58011201 	stmdapl	r1, {r0, r9, ip}
				sysassert (paylen <= rbuffl && paylen > 0 &&
    25b4:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
    25b8:	2800000b 	stmdacs	r0, {r0, r1, r3}
    25bc:	13310005 	teqne	r1, #5
    25c0:	00000a02 	andeq	r0, r0, r2, lsl #20
    25c4:	31000529 	tstcc	r0, r9, lsr #10
    25c8:	00000013 	andeq	r0, r0, r3, lsl r0
    25cc:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    25d0:	030b130e 	movweq	r1, #45838	; 0xb30e
		} else if (dstate & DSTATE_RXON) {
    25d4:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
	if (dstate & DSTATE_RFON)
    25d8:	10011106 	andne	r1, r1, r6, lsl #2
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    25dc:	02000006 	andeq	r0, r0, #6
		re->status = DATA_ENTRY_PENDING;
    25e0:	0b0b0024 	bleq	2c2678 <__ccfg+0x2a26d0>
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    25e4:	0e030b3e 	vmoveq.16	d3[0], r0
	issue_cmd ((lword)&RF_cmdPropRx);
    25e8:	16030000 	strne	r0, [r3], -r0
	_BIS (dstate, DSTATE_RXAC);
    25ec:	3a0e0300 	bcc	3831f4 <__ccfg+0x36324c>
    25f0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    25f4:	0013490b 	andseq	r4, r3, fp, lsl #18
    25f8:	00240400 	eoreq	r0, r4, r0, lsl #8
	if (dstate & DSTATE_RXAC)
    25fc:	0b3e0b0b 	bleq	f85230 <__ccfg+0xf65288>
    2600:	00000803 	andeq	r0, r0, r3, lsl #16
				if (statid != 0xffff)
    2604:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
    2608:	06000013 			; <UNDEFINED> instruction: 0x06000013
					((address)(RF_cmdPropTx.pPkt)) [0] =
    260c:	13490035 	movtne	r0, #36917	; 0x9035
				RF_cmdPropTx.pktLen = (byte) paylen;
    2610:	13070000 	movwne	r0, #28672	; 0x7000
		if (paylen == 0) {
    2614:	3a0b0b01 	bcc	2c5220 <__ccfg+0x2a5278>
			wait (qevent, DR_LOOP);
    2618:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    261c:	0013010b 	andseq	r0, r3, fp, lsl #2
			if (dstate & DSTATE_RXAC) {
    2620:	000d0800 	andeq	r0, sp, r0, lsl #16
    2624:	0b3a0e03 	bleq	e85e38 <__ccfg+0xe65e90>
				rx_int_enable ();
    2628:	0b390b3b 	bleq	e4531c <__ccfg+0xe25374>
			release;
    262c:	0b0b1349 	bleq	2c7358 <__ccfg+0x2a73b0>
			} else if (dstate & DSTATE_RFON) {
    2630:	0b0c0b0d 	bleq	30526c <__ccfg+0x2e52c4>
				delay (offdelay, DR_GOOF);
    2634:	00000b38 	andeq	r0, r0, r8, lsr fp
    2638:	03000d09 	movweq	r0, #3337	; 0xd09
    263c:	3b0b3a0e 	blcc	2d0e7c <__ccfg+0x2b0ed4>
		if (bckf_timer) {
    2640:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
			wait (qevent, DR_LOOP);
    2644:	000b3813 	andeq	r3, fp, r3, lsl r8
    2648:	00340a00 	eorseq	r0, r4, r0, lsl #20
    264c:	0b3a0e03 	bleq	e85e60 <__ccfg+0xe65eb8>
			delay (bckf_timer, DR_LOOP);
    2650:	0b390b3b 	bleq	e45344 <__ccfg+0xe2539c>
    2654:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 2538 <rx_int_enable+0xa8>
			if (dstate & DSTATE_RXAC)
    2658:	00000c3c 	andeq	r0, r0, ip, lsr ip
    265c:	0b000f0b 	bleq	6290 <__exidx_end+0x11e8>
	if (dstate & DSTATE_RFON)
    2660:	0013490b 	andseq	r4, r3, fp, lsl #18
    2664:	01010c00 	tsteq	r1, r0, lsl #24
		rx_de ();
    2668:	13011349 	movwne	r1, #4937	; 0x1349
		RF_cmdPropTx . status = 0;
    266c:	210d0000 	mrscs	r0, (UNDEF: 13)
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2670:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    2674:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2678:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		issue_cmd ((lword)&cmd_cs);
    267c:	13490b39 	movtne	r0, #39737	; 0x9b39
		if (dstate & DSTATE_IRST)
    2680:	150f0000 	strne	r0, [pc, #-0]	; 2688 <cc1350_driver+0x128>
    2684:	010c2701 	tsteq	ip, r1, lsl #14
    2688:	10000013 	andne	r0, r0, r3, lsl r0
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    268c:	13490005 	movtne	r0, #36869	; 0x9005
    2690:	34110000 	ldrcc	r0, [r1], #-0
			delay (1, DR_XMIT);
    2694:	3a0e0300 	bcc	38329c <__ccfg+0x3632f4>
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2698:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    269c:	3f13490b 	svccc	0x0013490b
    26a0:	000c3c0c 	andeq	r3, ip, ip, lsl #24
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    26a4:	01131200 	tsteq	r3, r0, lsl #4
    26a8:	0b3a0b0b 	bleq	e852dc <__ccfg+0xe65334>
				RF_cmdPropTx . status = 0;
    26ac:	0b39053b 	bleq	e43ba0 <__ccfg+0xe23bf8>
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    26b0:	00001301 	andeq	r1, r0, r1, lsl #6
				issue_cmd ((lword)&RF_cmdPropTx);
    26b4:	03000d13 	movweq	r0, #3347	; 0xd13
				proceed (DR_XMIT);
    26b8:	3b0b3a0e 	blcc	2d0ef8 <__ccfg+0x2b0f50>
    26bc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
			txtries++;
    26c0:	000b3813 	andeq	r3, fp, r3, lsl r8
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    26c4:	01131400 	tsteq	r3, r0, lsl #8
    26c8:	0b0b0e03 	bleq	2c5edc <__ccfg+0x2a5f34>
    26cc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    26d0:	13010b39 	movwne	r0, #6969	; 0x1b39
		goto DR_LOOP__;
    26d4:	21150000 	tstcs	r5, r0
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    26d8:	2f134900 	svccs	0x00134900
		paylen = 0;
    26dc:	1600000b 	strne	r0, [r0], -fp
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    26e0:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 2630 <cc1350_driver+0xd0>
		txtries = 0;
    26e4:	0b3a0e03 	bleq	e85ef8 <__ccfg+0xe65f50>
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    26e8:	0b390b3b 	bleq	e453dc <__ccfg+0xe25434>
    26ec:	01110c27 	tsteq	r1, r7, lsr #24
    26f0:	0a400112 	beq	1002b40 <__ccfg+0xfe2b98>
    26f4:	00001301 	andeq	r1, r0, r1, lsl #6
    26f8:	03000517 	movweq	r0, #1303	; 0x517
		    tcvphy_top (physid) == NULL)
    26fc:	3b0b3a0e 	blcc	2d0f3c <__ccfg+0x2b0f94>
    2700:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2704:	00060213 	andeq	r0, r6, r3, lsl r2
    2708:	00341800 	eorseq	r1, r4, r0, lsl #16
			rf_off ();
    270c:	0b3a0e03 	bleq	e85f20 <__ccfg+0xe65f78>
endthread
    2710:	0b390b3b 	bleq	e45404 <__ccfg+0xe2545c>
    2714:	06021349 	streq	r1, [r2], -r9, asr #6
    2718:	0a190000 	beq	642720 <__ccfg+0x622778>
    271c:	3a0e0300 	bcc	383324 <__ccfg+0x36337c>
    2720:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2724:	1a00000b 	bne	2758 <RFCCPE0IntHandler+0x8>
    2728:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
    272c:	341b0000 	ldrcc	r0, [fp], #-0
    2730:	3a080300 	bcc	203338 <__ccfg+0x1e3390>
    2734:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2738:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    273c:	0000000a 	andeq	r0, r0, sl
    2740:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    2744:	030b130e 	movweq	r1, #45838	; 0xb30e
    2748:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    274c:	10011106 	andne	r1, r1, r6, lsl #2
void RFCCPE0IntHandler (void) {
    2750:	02000006 	andeq	r0, r0, #6
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2754:	0b0b0024 	bleq	2c27ec <__ccfg+0x2a2844>
		_BIS (dstate, DSTATE_IRST);
    2758:	0e030b3e 	vmoveq.16	d3[0], r0
    275c:	16030000 	strne	r0, [r3], -r0
    2760:	3a0e0300 	bcc	383368 <__ccfg+0x3633c0>
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    2764:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    2768:	0013490b 	andseq	r4, r3, fp, lsl #18
    276c:	00240400 	eoreq	r0, r4, r0, lsl #8
	p_trigger (drvprcs, qevent);
    2770:	0b3e0b0b 	bleq	f853a4 <__ccfg+0xf653fc>
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2774:	00000803 	andeq	r0, r0, r3, lsl #16
    2778:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
    277c:	06000013 			; <UNDEFINED> instruction: 0x06000013
    2780:	13490035 	movtne	r0, #36917	; 0x9035
    2784:	0f070000 	svceq	0x00070000
    2788:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    278c:	08000013 	stmdaeq	r0, {r0, r1, r4}
    2790:	0b0b0113 	bleq	2c2be4 <__ccfg+0x2a2c3c>
    2794:	0b3b0b3a 	bleq	ec5484 <__ccfg+0xea54dc>
    2798:	13010b39 	movwne	r0, #6969	; 0x1b39
	RISE_N_SHINE;
    279c:	0d090000 	stceq	0, cr0, [r9, #-0]
    27a0:	3a0e0300 	bcc	3833a8 <__ccfg+0x363400>
    27a4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
}
    27a8:	0b13490b 	bleq	4d4bdc <__ccfg+0x4b4c34>
    27ac:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
    27b0:	000b380b 	andeq	r3, fp, fp, lsl #16
    27b4:	000d0a00 	andeq	r0, sp, r0, lsl #20
    27b8:	0b3a0e03 	bleq	e85fcc <__ccfg+0xe66024>
    27bc:	0b390b3b 	bleq	e454b0 <__ccfg+0xe25508>
void phys_cc1350 (int phy, int mbs) {
    27c0:	0b381349 	bleq	e074ec <__ccfg+0xde7544>
	if (rbuffl != 0)
    27c4:	340b0000 	strcc	r0, [fp], #-0
    27c8:	3a0e0300 	bcc	3833d0 <__ccfg+0x363428>
		syserror (ETOOMANY, "cc13");
    27cc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		syserror (EREQPAR, "cc13 mb");
    27d0:	3f13490b 	svccc	0x0013490b
	if (mbs == 0)
    27d4:	000c3c0c 	andeq	r3, ip, ip, lsl #24
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    27d8:	01010c00 	tsteq	r1, r0, lsl #24
		syserror (EREQPAR, "cc13 mb");
    27dc:	13011349 	movwne	r1, #4937	; 0x1349
    27e0:	210d0000 	mrscs	r0, (UNDEF: 13)
	i = 0;
    27e4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
	rbuffl = (byte) mbs;
    27e8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
		db->config.type = 0;	// General (data in structure)
    27ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	rbuffl = (byte) mbs;
    27f0:	13490b39 	movtne	r0, #39737	; 0x9b39
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    27f4:	150f0000 	strne	r0, [pc, #-0]	; 27fc <phys_cc1350+0x3c>
    27f8:	010c2701 	tsteq	ip, r1, lsl #14
		if (db == NULL)
    27fc:	10000013 	andne	r0, r0, r3, lsl r0
			syserror (EMALLOC, "cc13");
    2800:	13490005 	movtne	r0, #36869	; 0x9005
    2804:	34110000 	ldrcc	r0, [r1], #-0
    2808:	3a0e0300 	bcc	383410 <__ccfg+0x363468>
		db->status = DATA_ENTRY_PENDING;
    280c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		if (i)
    2810:	3f13490b 	svccc	0x0013490b
			da->pNextEntry = (byte*) db;
    2814:	000c3c0c 	andeq	r3, ip, ip, lsl #24
		db->length = rbuffl + 2;
    2818:	01131200 	tsteq	r3, r0, lsl #4
    281c:	0b3a0b0b 	bleq	e85450 <__ccfg+0xe654a8>
		db->config.type = 0;	// General (data in structure)
    2820:	0b39053b 	bleq	e43d14 <__ccfg+0xe23d6c>
		db->length = rbuffl + 2;
    2824:	00001301 	andeq	r1, r0, r1, lsl #6
	db->pNextEntry = (byte*) re;
    2828:	03000d13 	movweq	r0, #3347	; 0xd13
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    282c:	3b0b3a0e 	blcc	2d106c <__ccfg+0x2b10c4>
    2830:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	if (rbuffs == NULL)
    2834:	000b3813 	andeq	r3, fp, r3, lsl r8
	rbuffs->pCurrEntry = (byte*) re;
    2838:	01131400 	tsteq	r3, r0, lsl #8
	rbuffs->pLastEntry = NULL;
    283c:	0b0b0e03 	bleq	2c6050 <__ccfg+0x2a60a8>
    2840:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2844:	13010b39 	movwne	r0, #6969	; 0x1b39
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    2848:	21150000 	tstcs	r5, r0
    284c:	2f134900 	svccs	0x00134900
    2850:	1600000b 	strne	r0, [r0], -fp
	rbuffl -= 2;
    2854:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2858:	0b3b0b3a 	bleq	ec5548 <__ccfg+0xea55a0>
	rbuffl -= 2;
    285c:	13490b39 	movtne	r0, #39737	; 0x9b39
	physid = phy;
    2860:	0a020c3f 	beq	85964 <__ccfg+0x659bc>
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2864:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2868:	030c3f01 	movweq	r3, #52993	; 0xcf01
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    286c:	3b0b3a0e 	blcc	2d10ac <__ccfg+0x2b1104>
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2870:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    2874:	1201110c 	andne	r1, r1, #12, 2
	utimer_add (&bckf_timer);
    2878:	000a4001 	andeq	r4, sl, r1
	drvprcs = runthread (cc1350_driver);
    287c:	00051800 	andeq	r1, r5, r0, lsl #16
    2880:	0b3a0e03 	bleq	e86094 <__ccfg+0xe660ec>
    2884:	0b390b3b 	bleq	e45578 <__ccfg+0xe255d0>
	if (drvprcs == 0)
    2888:	06021349 	streq	r1, [r2], -r9, asr #6
		syserror (ERESOURCE, "cc13");
    288c:	34190000 	ldrcc	r0, [r9], #-0
    2890:	3a0e0300 	bcc	383498 <__ccfg+0x3634f0>
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    2894:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2898:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    289c:	1a000006 	bne	28bc <phys_cc1350+0xfc>
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    28a0:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    28a4:	341b0000 	ldrcc	r0, [fp], #-0
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    28a8:	3a080300 	bcc	2034b0 <__ccfg+0x1e3508>
    28ac:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    28b0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    28b4:	0000000a 	andeq	r0, r0, sl
    28b8:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    28bc:	030b130e 	movweq	r1, #45838	; 0xb30e
    28c0:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    28c4:	10011106 	andne	r1, r1, r6, lsl #2
    28c8:	02000006 	andeq	r0, r0, #6
	plugch ();
    28cc:	0b0b0024 	bleq	2c2964 <__ccfg+0x2a29bc>
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    28d0:	0e030b3e 	vmoveq.16	d3[0], r0
    28d4:	16030000 	strne	r0, [r3], -r0
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    28d8:	3a0e0300 	bcc	3834e0 <__ccfg+0x363538>
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    28dc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    28e0:	0013490b 	andseq	r4, r3, fp, lsl #18
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    28e4:	00240400 	eoreq	r0, r4, r0, lsl #8
}
    28e8:	0b3e0b0b 	bleq	f8551c <__ccfg+0xf65574>
    28ec:	00000803 	andeq	r0, r0, r3, lsl #16
    28f0:	03011305 	movweq	r1, #4869	; 0x1305
    28f4:	3a0b0b0e 	bcc	2c5534 <__ccfg+0x2a558c>
    28f8:	010b3b0b 	tsteq	fp, fp, lsl #22
    28fc:	06000013 			; <UNDEFINED> instruction: 0x06000013
    2900:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2904:	0b381349 	bleq	e07630 <__ccfg+0xde7688>
    2908:	00000c34 	andeq	r0, r0, r4, lsr ip
    290c:	0b000f07 	bleq	6530 <__exidx_end+0x1488>
    2910:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    2914:	13490026 	movtne	r0, #36902	; 0x9026
    2918:	35090000 	strcc	r0, [r9, #-0]
    291c:	00134900 	andseq	r4, r3, r0, lsl #18
    2920:	000f0a00 	andeq	r0, pc, r0, lsl #20
    2924:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    2928:	130b0000 	movwne	r0, #45056	; 0xb000
    292c:	3a0b0b01 	bcc	2c5538 <__ccfg+0x2a5590>
    2930:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2934:	0013010b 	andseq	r0, r3, fp, lsl #2
    2938:	000d0c00 	andeq	r0, sp, r0, lsl #24
    293c:	0b3a0e03 	bleq	e86150 <__ccfg+0xe661a8>
    2940:	0b390b3b 	bleq	e45634 <__ccfg+0xe2568c>
    2944:	0b0b1349 	bleq	2c7670 <__ccfg+0x2a76c8>
    2948:	0b0c0b0d 	bleq	305584 <__ccfg+0x2e55dc>
    294c:	00000b38 	andeq	r0, r0, r8, lsr fp
    2950:	03000d0d 	movweq	r0, #3341	; 0xd0d
    2954:	3b0b3a0e 	blcc	2d1194 <__ccfg+0x2b11ec>
    2958:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    295c:	000b3813 	andeq	r3, fp, r3, lsl r8
    2960:	00340e00 	eorseq	r0, r4, r0, lsl #28
    2964:	0b3a0e03 	bleq	e86178 <__ccfg+0xe661d0>
    2968:	0b390b3b 	bleq	e4565c <__ccfg+0xe256b4>
    296c:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 2850 <phys_cc1350+0x90>
    2970:	00000c3c 	andeq	r0, r0, ip, lsr ip
    2974:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
    2978:	00130113 	andseq	r0, r3, r3, lsl r1
    297c:	00211000 	eoreq	r1, r1, r0
    2980:	16110000 	ldrne	r0, [r1], -r0
    2984:	3a0e0300 	bcc	38358c <__ccfg+0x3635e4>
    2988:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    298c:	0013490b 	andseq	r4, r3, fp, lsl #18
    2990:	01151200 	tsteq	r5, r0, lsl #4
    2994:	13010c27 	movwne	r0, #7207	; 0x1c27
    2998:	05130000 	ldreq	r0, [r3, #-0]
    299c:	00134900 	andseq	r4, r3, r0, lsl #18
    29a0:	00341400 	eorseq	r1, r4, r0, lsl #8
    29a4:	0b3a0e03 	bleq	e861b8 <__ccfg+0xe66210>
    29a8:	0b39053b 	bleq	e43e9c <__ccfg+0xe23ef4>
    29ac:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 2890 <phys_cc1350+0xd0>
    29b0:	00000c3c 	andeq	r0, r0, ip, lsr ip
    29b4:	0b011315 	bleq	47610 <__ccfg+0x27668>
    29b8:	3b0b3a0b 	blcc	2d11ec <__ccfg+0x2b1244>
    29bc:	010b3905 	tsteq	fp, r5, lsl #18
    29c0:	16000013 			; <UNDEFINED> instruction: 0x16000013
    29c4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    29c8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    29cc:	13490b39 	movtne	r0, #39737	; 0x9b39
    29d0:	00000b38 	andeq	r0, r0, r8, lsr fp
strand (__outserial, const char*)
    29d4:	03011317 	movweq	r1, #4887	; 0x1317
    29d8:	3a0b0b0e 	bcc	2c5618 <__ccfg+0x2a5670>
    29dc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    29e0:	0013010b 	andseq	r0, r3, fp, lsl #2
endstrand
    29e4:	00211800 	eoreq	r1, r1, r0, lsl #16
    29e8:	0b2f1349 	bleq	bc7714 <__ccfg+0xba776c>
	ptr = data;
    29ec:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
    29f0:	030c3f01 	movweq	r3, #52993	; 0xcf01
	if (*ptr)
    29f4:	3b0b3a0e 	blcc	2d1234 <__ccfg+0x2b128c>
		len = strlen (ptr);
    29f8:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    29fc:	1113490c 	tstne	r3, ip, lsl #18
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    2a00:	40011201 	andmi	r1, r1, r1, lsl #4
    2a04:	0013010a 	andseq	r0, r3, sl, lsl #2
    2a08:	00051a00 	andeq	r1, r5, r0, lsl #20
    2a0c:	0b3a0803 	bleq	e84a20 <__ccfg+0xe64a78>
    2a10:	0b390b3b 	bleq	e45704 <__ccfg+0xe2575c>
	len -= quant;
    2a14:	06021349 	streq	r1, [r2], -r9, asr #6
    2a18:	341b0000 	ldrcc	r0, [fp], #-0
    2a1c:	3a080300 	bcc	203624 <__ccfg+0x1e367c>
	if (len == 0) {
    2a20:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		ufree (data);
    2a24:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		finish;
    2a28:	1c000006 	stcne	0, cr0, [r0], {6}
    2a2c:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    2a30:	0b3b0b3a 	bleq	ec5720 <__ccfg+0xea5778>
    2a34:	01110b39 	tsteq	r1, r9, lsr fp
    2a38:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
    2a3c:	030c3f01 	movweq	r3, #52993	; 0xcf01
    2a40:	3b0b3a0e 	blcc	2d1280 <__ccfg+0x2b12d8>
strand (__inserial, address)
    2a44:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    2a48:	1113490c 	tstne	r3, ip, lsl #18
    2a4c:	40011201 	andmi	r1, r1, r1, lsl #4
    2a50:	1e00000a 	cdpne	0, 0, cr0, cr0, cr10, {0}
    2a54:	08030034 	stmdaeq	r3, {r2, r4, r5}
	if (__inpline != NULL)
    2a58:	0b3b0b3a 	bleq	ec5748 <__ccfg+0xea57a0>
    2a5c:	13490b39 	movtne	r0, #39737	; 0x9b39
		finish;
    2a60:	00000a02 	andeq	r0, r0, r2, lsl #20
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    2a64:	03012e1f 	movweq	r2, #7711	; 0x1e1f
    2a68:	3b0b3a0e 	blcc	2d12a8 <__ccfg+0x2b1300>
    2a6c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    2a70:	1201110c 	andne	r1, r1, #12, 2
		umwait (IM_INIT);
    2a74:	480a4001 	stmdami	sl, {r0, lr}
		release;
    2a78:	0013010a 	andseq	r0, r3, sl, lsl #2
	savedata (data);
    2a7c:	00052000 	andeq	r2, r5, r0
	len = MAX_LINE_LENGTH;
    2a80:	0b3a0803 	bleq	e84a94 <__ccfg+0xe64aec>
	io (IM_READ, __cport, READ, ptr, 1);
    2a84:	0b390b3b 	bleq	e45778 <__ccfg+0xe257d0>
    2a88:	0a021349 	beq	877b4 <__ccfg+0x6780c>
    2a8c:	0a210000 	beq	842a94 <__ccfg+0x822aec>
    2a90:	3a080300 	bcc	203698 <__ccfg+0x1e36f0>
	if (ptr == (char*) data) { // new line
    2a94:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2a98:	0001110b 	andeq	r1, r1, fp, lsl #2
		if (*ptr == '\0') { // bin cmd
    2a9c:	010b2200 	mrseq	r2, R11_fiq
			proceed (IM_BIN);
    2aa0:	13010655 	movwne	r0, #5717	; 0x1655
    2aa4:	34230000 	strtcc	r0, [r3], #-0
		if (*ptr < 0x20)
    2aa8:	3a080300 	bcc	2036b0 <__ccfg+0x1e3708>
    2aac:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			proceed (IM_READ);
    2ab0:	0013490b 	andseq	r4, r3, fp, lsl #18
    2ab4:	010b2400 	tsteq	fp, r0, lsl #8
	if (*ptr == '\n' || *ptr == '\r') {
    2ab8:	01120111 	tsteq	r2, r1, lsl r1
    2abc:	00001301 	andeq	r1, r0, r1, lsl #6
    2ac0:	11010b25 	tstne	r1, r5, lsr #22
		*ptr = '\0';
    2ac4:	00011201 	andeq	r1, r1, r1, lsl #4
		__inpline = (char*)data;
    2ac8:	11010000 	mrsne	r0, (UNDEF: 1)
		finish;
    2acc:	130e2501 	movwne	r2, #58625	; 0xe501
	if (len) {
    2ad0:	1b0e030b 	blne	383704 <__ccfg+0x36375c>
		ptr++;
    2ad4:	1106550e 	tstne	r6, lr, lsl #10
    2ad8:	00061001 	andeq	r1, r6, r1
		len--;
    2adc:	00240200 	eoreq	r0, r4, r0, lsl #4
	proceed (IM_READ);
    2ae0:	0b3e0b0b 	bleq	f85714 <__ccfg+0xf6576c>
	io (IM_BIN, __cport, READ, ptr, 1);
    2ae4:	00000e03 	andeq	r0, r0, r3, lsl #28
    2ae8:	03001603 	movweq	r1, #1539	; 0x603
    2aec:	3b0b3a0e 	blcc	2d132c <__ccfg+0x2b1384>
    2af0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2af4:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
	len -= 2;
    2af8:	0b0b0024 	bleq	2c2b90 <__ccfg+0x2a2be8>
	if (len > *ptr + 1) // 1 for 0x04
    2afc:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    2b00:	13050000 	movwne	r0, #20480	; 0x5000
		len = *ptr + 1;
    2b04:	0b0e0301 	bleq	383710 <__ccfg+0x363768>
    2b08:	3b0b3a0b 	blcc	2d133c <__ccfg+0x2b1394>
	ptr++;
    2b0c:	0013010b 	andseq	r0, r3, fp, lsl #2
	quant = io (IM_BINL, __cport, READ, ptr, len);
    2b10:	000d0600 	andeq	r0, sp, r0, lsl #12
    2b14:	13490e03 	movtne	r0, #40451	; 0x9e03
    2b18:	0c340b38 			; <UNDEFINED> instruction: 0x0c340b38
    2b1c:	0f070000 	svceq	0x00070000
    2b20:	000b0b00 	andeq	r0, fp, r0, lsl #22
    2b24:	00260800 	eoreq	r0, r6, r0, lsl #16
	len -= quant;
    2b28:	00001349 	andeq	r1, r0, r9, asr #6
		__inpline = (char*)data;
    2b2c:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
		finish;
    2b30:	0a000013 	beq	2b84 <__pi_vfparse+0x4>
	ptr += quant;
    2b34:	0b0b000f 	bleq	2c2b78 <__ccfg+0x2a2bd0>
    2b38:	00001349 	andeq	r1, r0, r9, asr #6
endstrand
    2b3c:	0b01130b 	bleq	47770 <__ccfg+0x277c8>
    2b40:	3b0b3a0b 	blcc	2d1374 <__ccfg+0x2b13cc>
	proceed (IM_BINL);
    2b44:	010b390b 	tsteq	fp, fp, lsl #18
endstrand
    2b48:	0c000013 	stceq	0, cr0, [r0], {19}
    2b4c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2b50:	0b3b0b3a 	bleq	ec5840 <__ccfg+0xea5898>
    2b54:	13490b39 	movtne	r0, #39737	; 0x9b39
    2b58:	0b0d0b0b 	bleq	34578c <__ccfg+0x3257e4>
    2b5c:	0b380b0c 	bleq	e05794 <__ccfg+0xde57ec>
		if (res && (d < n))
    2b60:	0d0d0000 	stceq	0, cr0, [sp, #-0]
    2b64:	3a0e0300 	bcc	38376c <__ccfg+0x3637c4>
    2b68:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2b6c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
			res [d] = (char) c;
    2b70:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
		d++;
    2b74:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2b78:	0b3b0b3a 	bleq	ec5868 <__ccfg+0xea58c0>
    2b7c:	13490b39 	movtne	r0, #39737	; 0x9b39
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2b80:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    2b84:	010f0000 	mrseq	r0, CPSR
    2b88:	01134901 	tsteq	r3, r1, lsl #18
				enci (10000);
    2b8c:	10000013 	andne	r0, r0, r3, lsl r0
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2b90:	00000021 	andeq	r0, r0, r1, lsr #32
    2b94:	03001611 	movweq	r1, #1553	; 0x611
	d = 0;
    2b98:	3b0b3a0e 	blcc	2d13d8 <__ccfg+0x2b1430>
		c = *fm++;
    2b9c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
		if (c == '\\') {
    2ba0:	12000013 	andne	r0, r0, #19
			if ((c = *fm++) == '\0') {
    2ba4:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
    2ba8:	00001301 	andeq	r1, r0, r1, lsl #6
				outc ('\\');
    2bac:	49000513 	stmdbmi	r0, {r0, r1, r4, r8, sl}
			if ((c = *fm++) == '\0') {
    2bb0:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
				outc ('\\');
    2bb4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2bb8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			outc (c);
    2bbc:	13490b39 	movtne	r0, #39737	; 0x9b39
    2bc0:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
			if (c == '\0')
    2bc4:	13150000 	tstne	r5, #0
    2bc8:	3a0b0b01 	bcc	2c57d4 <__ccfg+0x2a582c>
			outc (c);
    2bcc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
				outc (val);
    2bd0:	0013010b 	andseq	r0, r3, fp, lsl #2
				val = (word) va_arg (ap, aword);
    2bd4:	000d1600 	andeq	r1, sp, r0, lsl #12
		if (c == '%') {
    2bd8:	0b3a0e03 	bleq	e863ec <__ccfg+0xe66444>
    2bdc:	0b39053b 	bleq	e440d0 <__ccfg+0xe24128>
			c = *fm++;
    2be0:	0b381349 	bleq	e0790c <__ccfg+0xde7964>
			switch (c) {
    2be4:	13170000 	tstne	r7, #0
    2be8:	0b0e0301 	bleq	3837f4 <__ccfg+0x36384c>
    2bec:	3b0b3a0b 	blcc	2d1420 <__ccfg+0x2b1478>
    2bf0:	010b3905 	tsteq	fp, r5, lsl #18
    2bf4:	18000013 	stmdane	r0, {r0, r1, r4}
    2bf8:	13490021 	movtne	r0, #36897	; 0x9021
    2bfc:	00000b2f 	andeq	r0, r0, pc, lsr #22
    2c00:	3f012e19 	svccc	0x00012e19
				outc ('%');
    2c04:	3a0e030c 	bcc	38383c <__ccfg+0x363894>
    2c08:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
				outc (c);
    2c0c:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    2c10:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2c14:	010a4001 	tsteq	sl, r1
				if (c == '\0')
    2c18:	1a000013 	bne	2c6c <__pi_vfparse+0xec>
				return d;
    2c1c:	08030005 	stmdaeq	r3, {r0, r2}
}
    2c20:	0b3b0b3a 	bleq	ec5910 <__ccfg+0xea5968>
    2c24:	13490b39 	movtne	r0, #39737	; 0x9b39
			switch (c) {
    2c28:	00000602 	andeq	r0, r0, r2, lsl #12
    2c2c:	0300341b 	movweq	r3, #1051	; 0x41b
    2c30:	3b0b3a08 	blcc	2d1458 <__ccfg+0x2b14b0>
				for (i = 12; ; i -= 4) {
    2c34:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
				val = (word) va_arg (ap, aword);
    2c38:	00060213 	andeq	r0, r6, r3, lsl r2
						[ (val >> i) & 0xf ]);
    2c3c:	000a1c00 	andeq	r1, sl, r0, lsl #24
    2c40:	0b3a0e03 	bleq	e86454 <__ccfg+0xe664ac>
    2c44:	0b390b3b 	bleq	e45938 <__ccfg+0xe25990>
					outc (__pi_hex_enc_table
    2c48:	0b1d0000 	bleq	742c50 <__ccfg+0x722ca8>
    2c4c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
					if (i == 0)
    2c50:	00130101 	andseq	r0, r3, r1, lsl #2
    2c54:	00341e00 	eorseq	r1, r4, r0, lsl #28
				for (i = 12; ; i -= 4) {
    2c58:	0b3a0803 	bleq	e84c6c <__ccfg+0xe64cc4>
				val = (word) va_arg (ap, aword);
    2c5c:	0b390b3b 	bleq	e45950 <__ccfg+0xe259a8>
				if (c == 'd' && (val & 0x8000) != 0) {
    2c60:	0a021349 	beq	8798c <__ccfg+0x679e4>
				val = (word) va_arg (ap, aword);
    2c64:	0b1f0000 	bleq	7c2c6c <__ccfg+0x7a2cc4>
				if (c == 'd' && (val & 0x8000) != 0) {
    2c68:	01065501 	tsteq	r6, r1, lsl #10
    2c6c:	20000013 	andcs	r0, r0, r3, lsl r0
					outc ('-');
    2c70:	08030034 	stmdaeq	r3, {r2, r4, r5}
    2c74:	0b3b0b3a 	bleq	ec5964 <__ccfg+0xea59bc>
					val = (~val) + 1;
    2c78:	13490b39 	movtne	r0, #39737	; 0x9b39
    2c7c:	0b210000 	bleq	842c84 <__ccfg+0x822cdc>
				for (i = 12; ; i -= 4) {
    2c80:	00065501 	andeq	r5, r6, r1, lsl #10
				enci (10000);
    2c84:	11010000 	mrsne	r0, (UNDEF: 1)
    2c88:	130e2501 	movwne	r2, #58625	; 0xe501
    2c8c:	1b0e030b 	blne	3838c0 <__ccfg+0x363918>
    2c90:	0006100e 	andeq	r1, r6, lr
    2c94:	00240200 	eoreq	r0, r4, r0, lsl #4
    2c98:	0b3e0b0b 	bleq	f858cc <__ccfg+0xf65924>
    2c9c:	00000e03 	andeq	r0, r0, r3, lsl #28
    2ca0:	03001603 	movweq	r1, #1539	; 0x603
    2ca4:	3b0b3a0e 	blcc	2d14e4 <__ccfg+0x2b153c>
    2ca8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2cac:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    2cb0:	13490026 	movtne	r0, #36902	; 0x9026
    2cb4:	24050000 	strcs	r0, [r5], #-0
    2cb8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2cbc:	0008030b 	andeq	r0, r8, fp, lsl #6
    2cc0:	00160600 	andseq	r0, r6, r0, lsl #12
    2cc4:	0b3a0e03 	bleq	e864d8 <__ccfg+0xe66530>
    2cc8:	0b39053b 	bleq	e441bc <__ccfg+0xe24214>
				if (c == 'd' || c == 'u') {
    2ccc:	00001349 	andeq	r1, r0, r9, asr #6
    2cd0:	0b011707 	bleq	488f4 <__ccfg+0x2894c>
					if (c == 'd' &&
    2cd4:	3b0b3a0b 	blcc	2d1508 <__ccfg+0x2b1560>
					val = va_arg (ap, lword);
    2cd8:	010b390b 	tsteq	fp, fp, lsl #18
					fm++;
    2cdc:	08000013 	stmdaeq	r0, {r0, r1, r4}
					if (c == 'd' &&
    2ce0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2ce4:	0b3b0b3a 	bleq	ec59d4 <__ccfg+0xea5a2c>
						outc ('-');
    2ce8:	13490b39 	movtne	r0, #39737	; 0x9b39
    2cec:	01090000 	mrseq	r0, (UNDEF: 9)
						val = (~val) + 1;
    2cf0:	01134901 	tsteq	r3, r1, lsl #18
				enci (10000);
    2cf4:	0a000013 	beq	2d48 <__pi_vfparse+0x1c8>
					enci (1000000000UL);
    2cf8:	13490021 	movtne	r0, #36897	; 0x9021
    2cfc:	00000b2f 	andeq	r0, r0, pc, lsr #22
    2d00:	0b01130b 	bleq	47934 <__ccfg+0x2798c>
    2d04:	3b0b3a0b 	blcc	2d1538 <__ccfg+0x2b1590>
    2d08:	010b390b 	tsteq	fp, fp, lsl #18
    2d0c:	0c000013 	stceq	0, cr0, [r0], {19}
    2d10:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2d14:	0b3b0b3a 	bleq	ec5a04 <__ccfg+0xea5a5c>
    2d18:	13490b39 	movtne	r0, #39737	; 0x9b39
    2d1c:	00000b38 	andeq	r0, r0, r8, lsr fp
    2d20:	0b000f0d 	bleq	695c <__exidx_end+0x18b4>
    2d24:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    2d28:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    2d2c:	0b3a0b0b 	bleq	e85960 <__ccfg+0xe659b8>
    2d30:	0b390b3b 	bleq	e45a24 <__ccfg+0xe25a7c>
    2d34:	00001301 	andeq	r1, r0, r1, lsl #6
    2d38:	03000d0f 	movweq	r0, #3343	; 0xd0f
				} else if (c == 'x') {
    2d3c:	3b0b3a08 	blcc	2d1564 <__ccfg+0x2b15bc>
					for (i = 28; ; i -= 4) {
    2d40:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
					val = va_arg (ap, lword);
    2d44:	000b3813 	andeq	r3, fp, r3, lsl r8
							[ (val >> i) & 0xf ]);
    2d48:	000f1000 	andeq	r1, pc, r0
    2d4c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
						outc (__pi_hex_enc_table
    2d50:	13110000 	tstne	r1, #0
    2d54:	0b0e0301 	bleq	383960 <__ccfg+0x3639b8>
    2d58:	3b0b3a05 	blcc	2d1574 <__ccfg+0x2b15cc>
						if (i == 0)
    2d5c:	010b390b 	tsteq	fp, fp, lsl #18
    2d60:	12000013 	andne	r0, r0, #19
					for (i = 28; ; i -= 4) {
    2d64:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
					outc ('%');
    2d68:	0b3b0b3a 	bleq	ec5a58 <__ccfg+0xea5ab0>
    2d6c:	13490b39 	movtne	r0, #39737	; 0x9b39
    2d70:	00000538 	andeq	r0, r0, r8, lsr r5
					outc ('l');
    2d74:	27001513 	smladcs	r0, r3, r5, r1
    2d78:	1400000c 	strne	r0, [r0], #-12
				val = (word) va_arg (ap, aword);
    2d7c:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
				outc (val);
    2d80:	13011349 	movwne	r1, #4937	; 0x1349
    2d84:	05150000 	ldreq	r0, [r5, #-0]
				while (*st != '\0') {
    2d88:	00134900 	andseq	r4, r3, r0, lsl #18
    2d8c:	01131600 	tsteq	r3, r0, lsl #12
    2d90:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
    2d94:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
					outc (*st);
    2d98:	13010b39 	movwne	r0, #6969	; 0x1b39
    2d9c:	0d170000 	ldceq	0, cr0, [r7, #-0]
					st++;
    2da0:	3a0e0300 	bcc	3839a8 <__ccfg+0x363a00>
		c = *fm++;
    2da4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2da8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    2dac:	1800000b 	stmdane	r0, {r0, r1, r3}
char *vform (char *res, const char *fm, va_list aq) {
    2db0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2db4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	if (res != NULL) {
    2db8:	13490b39 	movtne	r0, #39737	; 0x9b39
		__pi_vfparse (res, MAX_WORD, fm, aq);
    2dbc:	00000538 	andeq	r0, r0, r8, lsr r5
    2dc0:	03011319 	movweq	r1, #4889	; 0x1319
    2dc4:	3a0b0b0e 	bcc	2c5a04 <__ccfg+0x2a5a5c>
}
    2dc8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2dcc:	0013010b 	andseq	r0, r3, fp, lsl #2
	fml = strlen (fm) + 17;
    2dd0:	01131a00 	tsteq	r3, r0, lsl #20
    2dd4:	0b3a0b0b 	bleq	e85a08 <__ccfg+0xe65a60>
    2dd8:	0b39053b 	bleq	e442cc <__ccfg+0xe24324>
	if ((res = (char*) umalloc (fml)) == NULL)
    2ddc:	00001301 	andeq	r1, r0, r1, lsl #6
    2de0:	0b01171b 	bleq	48a54 <__ccfg+0x28aac>
    2de4:	3b0b3a0b 	blcc	2d1618 <__ccfg+0x2b1670>
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    2de8:	010b3905 	tsteq	fp, r5, lsl #18
    2dec:	1c000013 	stcne	0, cr0, [r0], {19}
    2df0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2df4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		ufree (res);
    2df8:	13490b39 	movtne	r0, #39737	; 0x9b39
		goto Again;
    2dfc:	131d0000 	tstne	sp, #0
	if (buf == NULL || fmt == NULL)
    2e00:	3c0e0300 	stccc	3, cr0, [lr], {-0}
int vscan (const char *buf, const char *fmt, va_list ap) {
    2e04:	1e00000c 	cdpne	0, 0, cr0, cr0, cr12, {0}
	if (buf == NULL || fmt == NULL)
    2e08:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
    2e0c:	00001301 	andeq	r1, r0, r1, lsl #6
    2e10:	0300341f 	movweq	r3, #1055	; 0x41f
		    	    case 'u': scanu (lword); break;
    2e14:	3b0b3a0e 	blcc	2d1654 <__ccfg+0x2b16ac>
			while (isspace (*buf)) buf++;
    2e18:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    2e1c:	3c0c3f13 	stccc	15, cr3, [ip], {19}
	while (*fmt != '\0') {
    2e20:	2000000c 	andcs	r0, r0, ip
		if (*fmt++ != '%')
    2e24:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
		switch (*fmt++) {
    2e28:	0b3b0b3a 	bleq	ec5b18 <__ccfg+0xea5b70>
    2e2c:	13490b39 	movtne	r0, #39737	; 0x9b39
    2e30:	0b0d0b0b 	bleq	345a64 <__ccfg+0x325abc>
    2e34:	0b380b0c 	bleq	e05a6c <__ccfg+0xde5ac4>
    2e38:	0d210000 	stceq	0, cr0, [r1, #-0]
    2e3c:	3a0e0300 	bcc	383a44 <__ccfg+0x363a9c>
    2e40:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
}
    2e44:	0b13490b 	bleq	4d5278 <__ccfg+0x4b52d0>
		switch (*fmt++) {
    2e48:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
    2e4c:	000b380b 	andeq	r3, fp, fp, lsl #16
    2e50:	00342200 	eorseq	r2, r4, r0, lsl #4
    2e54:	0b3a0e03 	bleq	e86668 <__ccfg+0xe666c0>
			while (isspace (*buf)) buf++;
    2e58:	0b390b3b 	bleq	e45b4c <__ccfg+0xe25ba4>
    2e5c:	031c1349 	tsteq	ip, #603979777	; 0x24000001
    2e60:	21230000 			; <UNDEFINED> instruction: 0x21230000
    2e64:	2f134900 	svccs	0x00134900
    2e68:	24000005 	strcs	r0, [r0], #-5
    2e6c:	13490035 	movtne	r0, #36917	; 0x9035
			if (*buf == '\0')
    2e70:	34250000 	strtcc	r0, [r5], #-0
			if (*buf != ',') {
    2e74:	3a0e0300 	bcc	383a7c <__ccfg+0x363ad4>
			sap = va_arg (ap, char*);
    2e78:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			nc++;
    2e7c:	3f13490b 	svccc	0x0013490b
			if (*buf != ',') {
    2e80:	000c3c0c 	andeq	r3, ip, ip, lsl #24
				while (!isspace (*buf) && *buf != ',' &&
    2e84:	00212600 	eoreq	r2, r1, r0, lsl #12
    2e88:	34270000 	strtcc	r0, [r7], #-0
    2e8c:	3a0e0300 	bcc	383a94 <__ccfg+0x363aec>
    2e90:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2e94:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2e98:	2800000a 	stmdacs	r0, {r1, r3}
    2e9c:	13470034 	movtne	r0, #28724	; 0x7034
			while (isspace (*buf)) buf++;
    2ea0:	0b3b0b3a 	bleq	ec5b90 <__ccfg+0xea5be8>
    2ea4:	0a020b39 	beq	85b90 <__ccfg+0x65be8>
    2ea8:	01000000 	mrseq	r0, (UNDEF: 0)
    2eac:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2eb0:	0e030b13 	vmoveq.32	d3[0], r0
			if (*buf == ',') buf++;
    2eb4:	17550e1b 	smmlane	r5, fp, lr, r0
    2eb8:	17100111 			; <UNDEFINED> instruction: 0x17100111
			*sap = '\0';
    2ebc:	24020000 	strcs	r0, [r2], #-0
			break;
    2ec0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
		    case 'd': scani (word); break;
    2ec4:	000e030b 	andeq	r0, lr, fp, lsl #6
    2ec8:	00160300 	andseq	r0, r6, r0, lsl #6
    2ecc:	0b3a0e03 	bleq	e866e0 <__ccfg+0xe66738>
    2ed0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2ed4:	24040000 	strcs	r0, [r4], #-0
    2ed8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2edc:	0008030b 	andeq	r0, r8, fp, lsl #6
    2ee0:	000f0500 	andeq	r0, pc, r0, lsl #10
    2ee4:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    2ee8:	15060000 	strne	r0, [r6, #-0]
    2eec:	00192700 	andseq	r2, r9, r0, lsl #14
    2ef0:	01150700 	tsteq	r5, r0, lsl #14
    2ef4:	13011927 	movwne	r1, #6439	; 0x1927
    2ef8:	05080000 	streq	r0, [r8, #-0]
    2efc:	00134900 	andseq	r4, r3, r0, lsl #18
    2f00:	012e0900 			; <UNDEFINED> instruction: 0x012e0900
    2f04:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2f08:	0b3b0b3a 	bleq	ec5bf8 <__ccfg+0xea5c50>
    2f0c:	01111927 	tsteq	r1, r7, lsr #18
    2f10:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2f14:	01194296 			; <UNDEFINED> instruction: 0x01194296
    2f18:	0a000013 	beq	2f6c <vscan+0x16c>
    2f1c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    2f20:	0b3b0b3a 	bleq	ec5c10 <__ccfg+0xea5c68>
    2f24:	17021349 	strne	r1, [r2, -r9, asr #6]
    2f28:	340b0000 	strcc	r0, [fp], #-0
    2f2c:	3a0e0300 	bcc	383b34 <__ccfg+0x363b8c>
    2f30:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		    case 'u': scanu (word); break;
    2f34:	00170213 	andseq	r0, r7, r3, lsl r2
    2f38:	82890c00 	addhi	r0, r9, #0, 24
    2f3c:	01110001 	tsteq	r1, r1
    2f40:	00001331 	andeq	r1, r0, r1, lsr r3
    2f44:	0182890d 	orreq	r8, r2, sp, lsl #18
    2f48:	95011100 	strls	r1, [r1, #-256]	; 0xffffff00
    2f4c:	13311942 	teqne	r1, #1081344	; 0x108000
    2f50:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
    2f54:	03193f01 	tsteq	r9, #1, 30
    2f58:	3b0b3a0e 	blcc	2d1798 <__ccfg+0x2b17f0>
    2f5c:	1119270b 	tstne	r9, fp, lsl #14
    2f60:	40061201 	andmi	r1, r6, r1, lsl #4
    2f64:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2f68:	00001301 	andeq	r1, r0, r1, lsl #6
    2f6c:	0182890f 	orreq	r8, r2, pc, lsl #18
    2f70:	01011101 	tsteq	r1, r1, lsl #2
    2f74:	10000013 	andne	r0, r0, r3, lsl r0
    2f78:	0001828a 	andeq	r8, r1, sl, lsl #5
		    case 'x': scanx (word); break;
    2f7c:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    2f80:	11000018 	tstne	r0, r8, lsl r0
    2f84:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    2f88:	0b3a0e03 	bleq	e8679c <__ccfg+0xe667f4>
    2f8c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2f90:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
    2f94:	01000000 	mrseq	r0, (UNDEF: 0)
    2f98:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2f9c:	0e030b13 	vmoveq.32	d3[0], r0
    2fa0:	17550e1b 	smmlane	r5, fp, lr, r0
    2fa4:	17100111 			; <UNDEFINED> instruction: 0x17100111
    2fa8:	16020000 	strne	r0, [r2], -r0
    2fac:	3a0e0300 	bcc	383bb4 <__ccfg+0x363c0c>
    2fb0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2fb4:	03000013 	movweq	r0, #19
    2fb8:	0b0b0024 	bleq	2c3050 <__ccfg+0x2a30a8>
    2fbc:	0e030b3e 	vmoveq.16	d3[0], r0
    2fc0:	24040000 	strcs	r0, [r4], #-0
    2fc4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2fc8:	0008030b 	andeq	r0, r8, fp, lsl #6
    2fcc:	012e0500 			; <UNDEFINED> instruction: 0x012e0500
    2fd0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2fd4:	0b3b0b3a 	bleq	ec5cc4 <__ccfg+0xea5d1c>
    2fd8:	13491927 	movtne	r1, #39207	; 0x9927
    2fdc:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2fe0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2fe4:	06000019 			; <UNDEFINED> instruction: 0x06000019
    2fe8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2fec:	0b3b0b3a 	bleq	ec5cdc <__ccfg+0xea5d34>
    2ff0:	17021349 	strne	r1, [r2, -r9, asr #6]
			switch (*fmt++) {
    2ff4:	34070000 	strcc	r0, [r7], #-0
    2ff8:	3a0e0300 	bcc	383c00 <__ccfg+0x363c58>
    2ffc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3000:	00180213 	andseq	r0, r8, r3, lsl r2
    3004:	11010000 	mrsne	r0, (UNDEF: 1)
    3008:	130e2501 	movwne	r2, #58625	; 0xe501
		    	    case 'd': scani (lword); break;
    300c:	1b0e030b 	blne	383c40 <__ccfg+0x363c98>
    3010:	1117550e 	tstne	r7, lr, lsl #10
    3014:	00171001 	andseq	r1, r7, r1
    3018:	00240200 	eoreq	r0, r4, r0, lsl #4
    301c:	0b3e0b0b 	bleq	f85c50 <__ccfg+0xf65ca8>
    3020:	00000e03 	andeq	r0, r0, r3, lsl #28
    3024:	03001603 	movweq	r1, #1539	; 0x603
    3028:	3b0b3a0e 	blcc	2d1868 <__ccfg+0x2b18c0>
    302c:	0013490b 	andseq	r4, r3, fp, lsl #18
    3030:	00240400 	eoreq	r0, r4, r0, lsl #8
    3034:	0b3e0b0b 	bleq	f85c68 <__ccfg+0xf65cc0>
    3038:	00000803 	andeq	r0, r0, r3, lsl #16
    303c:	3f012e05 	svccc	0x00012e05
    3040:	3a0e0319 	bcc	383cac <__ccfg+0x363d04>
    3044:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3048:	11134919 	tstne	r3, r9, lsl r9
    304c:	40061201 	andmi	r1, r6, r1, lsl #4
    3050:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    3054:	00001301 	andeq	r1, r0, r1, lsl #6
    3058:	03003406 	movweq	r3, #1030	; 0x406
    305c:	3b0b3a0e 	blcc	2d189c <__ccfg+0x2b18f4>
    3060:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3064:	07000017 	smladeq	r0, r7, r0, r0
		    	    case 'x': scanx (lword); break;
    3068:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    306c:	0b3b0b3a 	bleq	ec5d5c <__ccfg+0xea5db4>
    3070:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    3074:	17080000 	strne	r0, [r8, -r0]
    3078:	3a0b0b01 	bcc	2c5c84 <__ccfg+0x2a5cdc>
    307c:	010b3b0b 	tsteq	fp, fp, lsl #22
    3080:	09000013 	stmdbeq	r0, {r0, r1, r4}
    3084:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    3088:	0b3b0b3a 	bleq	ec5d78 <__ccfg+0xea5dd0>
    308c:	00001349 	andeq	r1, r0, r9, asr #6
    3090:	0300340a 	movweq	r3, #1034	; 0x40a
    3094:	3b0b3a0e 	blcc	2d18d4 <__ccfg+0x2b192c>
    3098:	0013490b 	andseq	r4, r3, fp, lsl #18
    309c:	01010b00 	tsteq	r1, r0, lsl #22
    30a0:	13011349 	movwne	r1, #4937	; 0x1349
    30a4:	210c0000 	mrscs	r0, (UNDEF: 12)
    30a8:	2f134900 	svccs	0x00134900
    30ac:	0000000b 	andeq	r0, r0, fp
    30b0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    30b4:	030b130e 	movweq	r1, #45838	; 0xb30e
    30b8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    30bc:	10011117 	andne	r1, r1, r7, lsl r1
    30c0:	02000017 	andeq	r0, r0, #23
    30c4:	0b0b0024 	bleq	2c315c <__ccfg+0x2a31b4>
    30c8:	0e030b3e 	vmoveq.16	d3[0], r0
    30cc:	16030000 	strne	r0, [r3], -r0
    30d0:	3a0e0300 	bcc	383cd8 <__ccfg+0x363d30>
    30d4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		    	    case 'd': scani (lword); break;
    30d8:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    30dc:	0b0b0024 	bleq	2c3174 <__ccfg+0x2a31cc>
    30e0:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    30e4:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    30e8:	03193f01 	tsteq	r9, #1, 30
    30ec:	3b0b3a0e 	blcc	2d192c <__ccfg+0x2b1984>
    30f0:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
		    	    case 'u': scanu (lword); break;
    30f4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    30f8:	97184006 	ldrls	r4, [r8, -r6]
    30fc:	13011942 	movwne	r1, #6466	; 0x1942
    3100:	34060000 	strcc	r0, [r6], #-0
    3104:	3a0e0300 	bcc	383d0c <__ccfg+0x363d64>
    3108:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    310c:	07000013 	smladeq	r0, r3, r0, r0
    3110:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    3114:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3118:	00001349 	andeq	r1, r0, r9, asr #6
    311c:	3f012e08 	svccc	0x00012e08
    3120:	3a0e0319 	bcc	383d8c <__ccfg+0x363de4>
    3124:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3128:	11134919 	tstne	r3, r9, lsl r9
    312c:	40061201 	andmi	r1, r6, r1, lsl #4
    3130:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    3134:	00001301 	andeq	r1, r0, r1, lsl #6
    3138:	3f012e09 	svccc	0x00012e09
		    	    case 'x': scanx (lword); break;
    313c:	3a0e0319 	bcc	383da8 <__ccfg+0x363e00>
    3140:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
			if ((c = *buf++) == '\0')
    3144:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    3148:	97184006 	ldrls	r4, [r8, -r6]
			sap = va_arg (ap, char*);
    314c:	00001942 	andeq	r1, r0, r2, asr #18
			nc++;
    3150:	0300050a 	movweq	r0, #1290	; 0x50a
			break;
    3154:	3b0b3a0e 	blcc	2d1994 <__ccfg+0x2b19ec>
			while (isspace (*buf)) buf++;
    3158:	02134905 	andseq	r4, r3, #81920	; 0x14000
    315c:	00000018 	andeq	r0, r0, r8, lsl r0
    3160:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
						*sap++ = *buf++;
    3164:	030b130e 	movweq	r1, #45838	; 0xb30e
    3168:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
			while (isspace (*buf)) buf++;
    316c:	10011117 	andne	r1, r1, r7, lsl r1
    3170:	02000017 	andeq	r0, r0, #23
    3174:	0b0b0024 	bleq	2c320c <__ccfg+0x2a3264>
		return 0;
    3178:	0e030b3e 	vmoveq.16	d3[0], r0
    317c:	16030000 	strne	r0, [r3], -r0
		    case 'x': scanx (word); break;
    3180:	3a0e0300 	bcc	383d88 <__ccfg+0x363de0>
    3184:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		    	    case 'x': scanx (lword); break;
    3188:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    318c:	0b0b0024 	bleq	2c3224 <__ccfg+0x2a327c>
    3190:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    3194:	0f050000 	svceq	0x00050000
    3198:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    319c:	06000013 			; <UNDEFINED> instruction: 0x06000013
    31a0:	19270015 	stmdbne	r7!, {r0, r2, r4}
    31a4:	15070000 	strne	r0, [r7, #-0]
    31a8:	01192701 	tsteq	r9, r1, lsl #14
    31ac:	08000013 	stmdaeq	r0, {r0, r1, r4}
    31b0:	13490005 	movtne	r0, #36869	; 0x9005
    31b4:	15090000 	strne	r0, [r9, #-0]
    31b8:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    31bc:	00130113 	andseq	r0, r3, r3, lsl r1
    31c0:	00150a00 	andseq	r0, r5, r0, lsl #20
    31c4:	13491927 	movtne	r1, #39207	; 0x9927
    31c8:	130b0000 	movwne	r0, #45056	; 0xb000
    31cc:	3a0b0b01 	bcc	2c5dd8 <__ccfg+0x2a5e30>
    31d0:	010b3b0b 	tsteq	fp, fp, lsl #22
    31d4:	0c000013 	stceq	0, cr0, [r0], {19}
    31d8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    31dc:	0b3b0b3a 	bleq	ec5ecc <__ccfg+0xea5f24>
    31e0:	0b381349 	bleq	e07f0c <__ccfg+0xde7f64>
    31e4:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
    31e8:	03193f01 	tsteq	r9, #1, 30
    31ec:	3b0b3a0e 	blcc	2d1a2c <__ccfg+0x2b1a84>
    31f0:	2019270b 	andscs	r2, r9, fp, lsl #14
    31f4:	0013010b 	andseq	r0, r3, fp, lsl #2
    31f8:	00050e00 	andeq	r0, r5, r0, lsl #28
    31fc:	0b3a0e03 	bleq	e86a10 <__ccfg+0xe66a68>
    3200:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3204:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
    3208:	03193f01 	tsteq	r9, #1, 30
    320c:	3b0b3a0e 	blcc	2d1a4c <__ccfg+0x2b1aa4>
    3210:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    3214:	010b2013 	tsteq	fp, r3, lsl r0
    3218:	10000013 	andne	r0, r0, r3, lsl r0
    321c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    3220:	0b3b0b3a 	bleq	ec5f10 <__ccfg+0xea5f68>
    3224:	00001349 	andeq	r1, r0, r9, asr #6
    3228:	31012e11 	tstcc	r1, r1, lsl lr
    322c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3230:	97184006 	ldrls	r4, [r8, -r6]
    3234:	13011942 	movwne	r1, #6466	; 0x1942
    3238:	05120000 	ldreq	r0, [r2, #-0]
    323c:	02133100 	andseq	r3, r3, #0, 2
    3240:	13000017 	movwne	r0, #23
    3244:	0111010b 	tsteq	r1, fp, lsl #2
    3248:	13010612 	movwne	r0, #5650	; 0x1612
    324c:	89140000 	ldmdbhi	r4, {}	; <UNPREDICTABLE>
    3250:	11010182 	smlabbne	r1, r2, r1, r0
    3254:	18429301 	stmdane	r2, {r0, r8, r9, ip, pc}^
    3258:	8a150000 	bhi	543260 <__ccfg+0x5232b8>
    325c:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    3260:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    3264:	89160000 	ldmdbhi	r6, {}	; <UNPREDICTABLE>
    3268:	11010182 	smlabbne	r1, r2, r1, r0
    326c:	18429301 	stmdane	r2, {r0, r8, r9, ip, pc}^
    3270:	00001301 	andeq	r1, r0, r1, lsl #6
    3274:	31003417 	tstcc	r0, r7, lsl r4
    3278:	00180213 	andseq	r0, r8, r3, lsl r2
    327c:	010b1800 	tsteq	fp, r0, lsl #16
    3280:	13011755 	movwne	r1, #5973	; 0x1755
    3284:	05190000 	ldreq	r0, [r9, #-0]
    3288:	1c133100 	ldfnes	f3, [r3], {-0}
    328c:	1a00000b 	bne	32c0 <NOROM_OSCHF_TurnOnXosc+0x8>
    3290:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    3294:	341b0000 	ldrcc	r0, [fp], #-0
    3298:	00133100 	andseq	r3, r3, r0, lsl #2
    329c:	012e1c00 			; <UNDEFINED> instruction: 0x012e1c00
    32a0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    32a4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    32a8:	13491927 	movtne	r1, #39207	; 0x9927
    32ac:	06120111 			; <UNDEFINED> instruction: 0x06120111
    32b0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    32b4:	00130119 	andseq	r0, r3, r9, lsl r1
    32b8:	00051d00 	andeq	r1, r5, r0, lsl #26
    32bc:	0b3a0e03 	bleq	e86ad0 <__ccfg+0xe66b28>
    32c0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    32c4:	00001702 	andeq	r1, r0, r2, lsl #14
    32c8:	0300341e 	movweq	r3, #1054	; 0x41e
    32cc:	3b0b3a0e 	blcc	2d1b0c <__ccfg+0x2b1b64>
    32d0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    32d4:	1f000017 	svcne	0x00000017
    32d8:	00018289 	andeq	r8, r1, r9, lsl #5
    32dc:	13310111 	teqne	r1, #1073741828	; 0x40000004
    32e0:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
    32e4:	03193f01 	tsteq	r9, #1, 30
    32e8:	3b0b3a0e 	blcc	2d1b28 <__ccfg+0x2b1b80>
    32ec:	11192705 	tstne	r9, r5, lsl #14
    32f0:	40061201 	andmi	r1, r6, r1, lsl #4
    32f4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    32f8:	00001301 	andeq	r1, r0, r1, lsl #6
    32fc:	01828921 	orreq	r8, r2, r1, lsr #18
    3300:	31011101 	tstcc	r1, r1, lsl #2
    3304:	00130113 	andseq	r0, r3, r3, lsl r1
    3308:	002e2200 	eoreq	r2, lr, r0, lsl #4
    330c:	0b3a0e03 	bleq	e86b20 <__ccfg+0xe66b78>
    3310:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3314:	0b201349 	bleq	808040 <__ccfg+0x7e8098>
    3318:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
    331c:	3a0e0300 	bcc	383f24 <__ccfg+0x363f7c>
    3320:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3324:	000b2019 	andeq	r2, fp, r9, lsl r0
    3328:	00342400 	eorseq	r2, r4, r0, lsl #8
    332c:	0b3a0e03 	bleq	e86b40 <__ccfg+0xe66b98>
    3330:	1349053b 	movtne	r0, #38203	; 0x953b
    3334:	00001702 	andeq	r1, r0, r2, lsl #14
    3338:	31011d25 	tstcc	r1, r5, lsr #26
    333c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3340:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    3344:	00130105 	andseq	r0, r3, r5, lsl #2
    3348:	00052600 	andeq	r2, r5, r0, lsl #12
    334c:	0b3a0e03 	bleq	e86b60 <__ccfg+0xe66bb8>
    3350:	1349053b 	movtne	r0, #38203	; 0x953b
    3354:	00001702 	andeq	r1, r0, r2, lsl #14
    3358:	03003427 	movweq	r3, #1063	; 0x427
    335c:	3b0b3a0e 	blcc	2d1b9c <__ccfg+0x2b1bf4>
    3360:	02134905 	andseq	r4, r3, #81920	; 0x14000
    3364:	28000018 	stmdacs	r0, {r3, r4}
    3368:	08030034 	stmdaeq	r3, {r2, r4, r5}
    336c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3370:	17021349 	strne	r1, [r2, -r9, asr #6]
    3374:	34290000 	strtcc	r0, [r9], #-0
    3378:	3a0e0300 	bcc	383f80 <__ccfg+0x363fd8>
    337c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3380:	00180213 	andseq	r0, r8, r3, lsl r2
    3384:	002e2a00 	eoreq	r2, lr, r0, lsl #20
    3388:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    338c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3390:	13491927 	movtne	r1, #39207	; 0x9927
    3394:	0000193c 	andeq	r1, r0, ip, lsr r9
    3398:	3f002e2b 	svccc	0x00002e2b
    339c:	3a0e0319 	bcc	384008 <__ccfg+0x364060>
    33a0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    33a4:	3c134919 			; <UNDEFINED> instruction: 0x3c134919
    33a8:	2c000019 	stccs	0, cr0, [r0], {25}
    33ac:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    33b0:	0b3a0e03 	bleq	e86bc4 <__ccfg+0xe66c1c>
    33b4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    33b8:	0000193c 	andeq	r1, r0, ip, lsr r9
    33bc:	01110100 	tsteq	r1, r0, lsl #2
    33c0:	0b130e25 	bleq	4c6c5c <__ccfg+0x4a6cb4>
    33c4:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    33c8:	01111755 	tsteq	r1, r5, asr r7
    33cc:	00001710 	andeq	r1, r0, r0, lsl r7
    33d0:	0b002402 	bleq	c3e0 <__exidx_end+0x7338>
    33d4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    33d8:	0300000e 	movweq	r0, #14
    33dc:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    33e0:	0b3b0b3a 	bleq	ec60d0 <__ccfg+0xea6128>
    33e4:	00001349 	andeq	r1, r0, r9, asr #6
    33e8:	0b002404 	bleq	c400 <__exidx_end+0x7358>
    33ec:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    33f0:	05000008 	streq	r0, [r0, #-8]
    33f4:	0b0b000f 	bleq	2c3438 <__ccfg+0x2a3490>
    33f8:	0f060000 	svceq	0x00060000
    33fc:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    3400:	07000013 	smladeq	r0, r3, r0, r0
    3404:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    3408:	0b3a0b0b 	bleq	e8603c <__ccfg+0xe66094>
    340c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    3410:	0d080000 	stceq	0, cr0, [r8, #-0]
    3414:	3a0e0300 	bcc	38401c <__ccfg+0x364074>
    3418:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    341c:	000b3813 	andeq	r3, fp, r3, lsl r8
    3420:	01130900 	tsteq	r3, r0, lsl #18
    3424:	0b3a0b0b 	bleq	e86058 <__ccfg+0xe660b0>
    3428:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    342c:	0d0a0000 	stceq	0, cr0, [sl, #-0]
    3430:	3a0e0300 	bcc	384038 <__ccfg+0x364090>
    3434:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3438:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    343c:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    3440:	0b00000b 	bleq	3474 <NOROM_RFCRfTrimRead+0x9c>
    3444:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    3448:	0b3a0b0b 	bleq	e8607c <__ccfg+0xe660d4>
    344c:	1301053b 	movwne	r0, #5435	; 0x153b
    3450:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    3454:	3a0e0300 	bcc	38405c <__ccfg+0x3640b4>
    3458:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    345c:	000b3813 	andeq	r3, fp, r3, lsl r8
    3460:	01130d00 	tsteq	r3, r0, lsl #26
    3464:	0b3a0b0b 	bleq	e86098 <__ccfg+0xe660f0>
    3468:	1301053b 	movwne	r0, #5435	; 0x153b
    346c:	0d0e0000 	stceq	0, cr0, [lr, #-0]
    3470:	3a0e0300 	bcc	384078 <__ccfg+0x3640d0>
    3474:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3478:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    347c:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    3480:	0f00000b 	svceq	0x0000000b
    3484:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    3488:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    348c:	0b201927 	bleq	809930 <__ccfg+0x7e9988>
    3490:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
    3494:	03193f01 	tsteq	r9, #1, 30
    3498:	3b0b3a0e 	blcc	2d1cd8 <__ccfg+0x2b1d30>
    349c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    34a0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    34a4:	97184006 	ldrls	r4, [r8, -r6]
    34a8:	13011942 	movwne	r1, #6466	; 0x1942
    34ac:	34110000 	ldrcc	r0, [r1], #-0
    34b0:	3a0e0300 	bcc	3840b8 <__ccfg+0x364110>
    34b4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    34b8:	00180213 	andseq	r0, r8, r3, lsl r2
    34bc:	00051200 	andeq	r1, r5, r0, lsl #4
    34c0:	0b3a0803 	bleq	e854d4 <__ccfg+0xe6552c>
    34c4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    34c8:	00001702 	andeq	r1, r0, r2, lsl #14
    34cc:	31001d13 	tstcc	r0, r3, lsl sp
    34d0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    34d4:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    34d8:	1400000b 	strne	r0, [r0], #-11
    34dc:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    34e0:	0b3a0e03 	bleq	e86cf4 <__ccfg+0xe66d4c>
    34e4:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    34e8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    34ec:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    34f0:	15000019 	strne	r0, [r0, #-25]	; 0xffffffe7
    34f4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    34f8:	0b3a0e03 	bleq	e86d0c <__ccfg+0xe66d64>
    34fc:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3500:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3504:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3508:	00130119 	andseq	r0, r3, r9, lsl r1
    350c:	00051600 	andeq	r1, r5, r0, lsl #12
    3510:	0b3a0e03 	bleq	e86d24 <__ccfg+0xe66d7c>
    3514:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3518:	00001802 	andeq	r1, r0, r2, lsl #16
    351c:	03003417 	movweq	r3, #1047	; 0x417
    3520:	3b0b3a0e 	blcc	2d1d60 <__ccfg+0x2b1db8>
    3524:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3528:	18000017 	stmdane	r0, {r0, r1, r2, r4}
    352c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    3530:	0b3b0b3a 	bleq	ec6220 <__ccfg+0xea6278>
    3534:	17021349 	strne	r1, [r2, -r9, asr #6]
    3538:	34190000 	ldrcc	r0, [r9], #-0
    353c:	3a0e0300 	bcc	384144 <__ccfg+0x36419c>
    3540:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3544:	1a000013 	bne	3598 <NOROM_RFCRTrim+0x70>
    3548:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    354c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3550:	17021349 	strne	r1, [r2, -r9, asr #6]
    3554:	341b0000 	ldrcc	r0, [fp], #-0
    3558:	3a0e0300 	bcc	384160 <__ccfg+0x3641b8>
    355c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3560:	00061c13 	andeq	r1, r6, r3, lsl ip
    3564:	00341c00 	eorseq	r1, r4, r0, lsl #24
    3568:	0b3a0803 	bleq	e8557c <__ccfg+0xe655d4>
    356c:	1349053b 	movtne	r0, #38203	; 0x953b
    3570:	00001702 	andeq	r1, r0, r2, lsl #14
    3574:	0182891d 	orreq	r8, r2, sp, lsl r9
    3578:	31011101 	tstcc	r1, r1, lsl #2
    357c:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    3580:	0001828a 	andeq	r8, r1, sl, lsl #5
    3584:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    3588:	1f000018 	svcne	0x00000018
    358c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    3590:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3594:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    3598:	01200000 			; <UNDEFINED> instruction: 0x01200000
    359c:	01134901 	tsteq	r3, r1, lsl #18
    35a0:	21000013 	tstcs	r0, r3, lsl r0
    35a4:	13490021 	movtne	r0, #36897	; 0x9021
    35a8:	00000b2f 	andeq	r0, r0, pc, lsr #22
    35ac:	03003422 	movweq	r3, #1058	; 0x422
    35b0:	3b0b3a0e 	blcc	2d1df0 <__ccfg+0x2b1e48>
    35b4:	1c13490b 			; <UNDEFINED> instruction: 0x1c13490b
    35b8:	2300000a 	movwcs	r0, #10
    35bc:	13490026 	movtne	r0, #36902	; 0x9026
    35c0:	2e240000 	cdpcs	0, 2, cr0, cr4, cr0, {0}
    35c4:	03193f01 	tsteq	r9, #1, 30
    35c8:	3b0b3a0e 	blcc	2d1e08 <__ccfg+0x2b1e60>
    35cc:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    35d0:	00193c13 	andseq	r3, r9, r3, lsl ip
    35d4:	00052500 	andeq	r2, r5, r0, lsl #10
    35d8:	00001349 	andeq	r1, r0, r9, asr #6
    35dc:	01110100 	tsteq	r1, r0, lsl #2
    35e0:	0b130e25 	bleq	4c6e7c <__ccfg+0x4a6ed4>
    35e4:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    35e8:	01111755 	tsteq	r1, r5, asr r7
    35ec:	00001710 	andeq	r1, r0, r0, lsl r7
    35f0:	0b002402 	bleq	c600 <__exidx_end+0x7558>
    35f4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    35f8:	0300000e 	movweq	r0, #14
    35fc:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    3600:	0b3b0b3a 	bleq	ec62f0 <__ccfg+0xea6348>
    3604:	00001349 	andeq	r1, r0, r9, asr #6
    3608:	0b002404 	bleq	c620 <__exidx_end+0x7578>
    360c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    3610:	05000008 	streq	r0, [r0, #-8]
    3614:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    3618:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    361c:	0b201927 	bleq	809ac0 <__ccfg+0x7e9b18>
    3620:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
    3624:	3a0e0300 	bcc	38422c <__ccfg+0x364284>
    3628:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    362c:	000b2019 	andeq	r2, fp, r9, lsl r0
    3630:	012e0700 			; <UNDEFINED> instruction: 0x012e0700
    3634:	0b3a0e03 	bleq	e86e48 <__ccfg+0xe66ea0>
    3638:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    363c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3640:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3644:	00130119 	andseq	r0, r3, r9, lsl r1
    3648:	00050800 	andeq	r0, r5, r0, lsl #16
    364c:	0b3a0e03 	bleq	e86e60 <__ccfg+0xe66eb8>
    3650:	1349053b 	movtne	r0, #38203	; 0x953b
    3654:	00001702 	andeq	r1, r0, r2, lsl #14
    3658:	03003409 	movweq	r3, #1033	; 0x409
    365c:	3b0b3a0e 	blcc	2d1e9c <__ccfg+0x2b1ef4>
    3660:	02134905 	andseq	r4, r3, #81920	; 0x14000
    3664:	0a000017 	beq	36c8 <TrimAfterColdResetWakeupFromShutDown+0x4c>
    3668:	1331001d 	teqne	r1, #29
    366c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3670:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    3674:	0b0b0000 	bleq	2c367c <__ccfg+0x2a36d4>
    3678:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    367c:	00130106 	andseq	r0, r3, r6, lsl #2
    3680:	82890c00 	addhi	r0, r9, #0, 24
    3684:	01110101 	tsteq	r1, r1, lsl #2
    3688:	13011331 	movwne	r1, #4913	; 0x1331
    368c:	8a0d0000 	bhi	343694 <__ccfg+0x3236ec>
    3690:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    3694:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    3698:	890e0000 	stmdbhi	lr, {}	; <UNPREDICTABLE>
    369c:	11010182 	smlabbne	r1, r2, r1, r0
    36a0:	0f000001 	svceq	0x00000001
    36a4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    36a8:	0b3a0e03 	bleq	e86ebc <__ccfg+0xe66f14>
    36ac:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    36b0:	06120111 			; <UNDEFINED> instruction: 0x06120111
    36b4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    36b8:	00130119 	andseq	r0, r3, r9, lsl r1
    36bc:	00341000 	eorseq	r1, r4, r0
    36c0:	0b3a0e03 	bleq	e86ed4 <__ccfg+0xe66f2c>
    36c4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    36c8:	00001702 	andeq	r1, r0, r2, lsl #14
    36cc:	01828911 	orreq	r8, r2, r1, lsl r9
    36d0:	31011100 	mrscc	r1, (UNDEF: 17)
    36d4:	12000013 	andne	r0, r0, #19
    36d8:	01018289 	smlabbeq	r1, r9, r2, r8
    36dc:	13310111 	teqne	r1, #1073741828	; 0x40000004
    36e0:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
    36e4:	03193f01 	tsteq	r9, #1, 30
    36e8:	3b0b3a0e 	blcc	2d1f28 <__ccfg+0x2b1f80>
    36ec:	3c19270b 	ldccc	7, cr2, [r9], {11}
    36f0:	00130119 	andseq	r0, r3, r9, lsl r1
    36f4:	00051400 	andeq	r1, r5, r0, lsl #8
    36f8:	00001349 	andeq	r1, r0, r9, asr #6
    36fc:	3f002e15 	svccc	0x00002e15
    3700:	3a0e0319 	bcc	38436c <__ccfg+0x3643c4>
    3704:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3708:	00193c19 	andseq	r3, r9, r9, lsl ip
    370c:	002e1600 	eoreq	r1, lr, r0, lsl #12
    3710:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3714:	0b3b0b3a 	bleq	ec6404 <__ccfg+0xea645c>
    3718:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    371c:	01000000 	mrseq	r0, (UNDEF: 0)
    3720:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    3724:	0e030b13 	vmoveq.32	d3[0], r0
    3728:	17550e1b 	smmlane	r5, fp, lr, r0
    372c:	17100111 			; <UNDEFINED> instruction: 0x17100111
    3730:	24020000 	strcs	r0, [r2], #-0
    3734:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    3738:	000e030b 	andeq	r0, lr, fp, lsl #6
    373c:	00160300 	andseq	r0, r6, r0, lsl #6
    3740:	0b3a0e03 	bleq	e86f54 <__ccfg+0xe66fac>
    3744:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3748:	24040000 	strcs	r0, [r4], #-0
    374c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    3750:	0008030b 	andeq	r0, r8, fp, lsl #6
    3754:	012e0500 			; <UNDEFINED> instruction: 0x012e0500
    3758:	0b3a0e03 	bleq	e86f6c <__ccfg+0xe66fc4>
    375c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3760:	0b201349 	bleq	80848c <__ccfg+0x7e84e4>
    3764:	00001301 	andeq	r1, r0, r1, lsl #6
    3768:	03000506 	movweq	r0, #1286	; 0x506
    376c:	3b0b3a0e 	blcc	2d1fac <__ccfg+0x2b2004>
    3770:	0013490b 	andseq	r4, r3, fp, lsl #18
    3774:	00340700 	eorseq	r0, r4, r0, lsl #14
    3778:	0b3a0e03 	bleq	e86f8c <__ccfg+0xe66fe4>
    377c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3780:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
    3784:	03193f01 	tsteq	r9, #1, 30
    3788:	3b0b3a0e 	blcc	2d1fc8 <__ccfg+0x2b2020>
    378c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    3790:	010b2013 	tsteq	fp, r3, lsl r0
    3794:	09000013 	stmdbeq	r0, {r0, r1, r4}
    3798:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    379c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    37a0:	00001349 	andeq	r1, r0, r9, asr #6
    37a4:	0300340a 	movweq	r3, #1034	; 0x40a
    37a8:	3b0b3a0e 	blcc	2d1fe8 <__ccfg+0x2b2040>
    37ac:	00134905 	andseq	r4, r3, r5, lsl #18
    37b0:	002e0b00 	eoreq	r0, lr, r0, lsl #22
    37b4:	0b3a0e03 	bleq	e86fc8 <__ccfg+0xe67020>
    37b8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    37bc:	00000b20 	andeq	r0, r0, r0, lsr #22
    37c0:	3f012e0c 	svccc	0x00012e0c
    37c4:	3a0e0319 	bcc	384430 <__ccfg+0x364488>
    37c8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    37cc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    37d0:	97184006 	ldrls	r4, [r8, -r6]
    37d4:	13011942 	movwne	r1, #6466	; 0x1942
    37d8:	050d0000 	streq	r0, [sp, #-0]
    37dc:	3a0e0300 	bcc	3843e4 <__ccfg+0x36443c>
    37e0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    37e4:	00170213 	andseq	r0, r7, r3, lsl r2
    37e8:	00340e00 	eorseq	r0, r4, r0, lsl #28
    37ec:	0b3a0e03 	bleq	e87000 <__ccfg+0xe67058>
    37f0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    37f4:	00001802 	andeq	r1, r0, r2, lsl #16
    37f8:	0300340f 	movweq	r3, #1039	; 0x40f
    37fc:	3b0b3a0e 	blcc	2d203c <__ccfg+0x2b2094>
    3800:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3804:	10000017 	andne	r0, r0, r7, lsl r0
    3808:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    380c:	17550152 			; <UNDEFINED> instruction: 0x17550152
    3810:	0b590b58 	bleq	1646578 <__ccfg+0x16265d0>
    3814:	00001301 	andeq	r1, r0, r1, lsl #6
    3818:	31000511 	tstcc	r0, r1, lsl r5
    381c:	12000013 	andne	r0, r0, #19
    3820:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    3824:	34130000 	ldrcc	r0, [r3], #-0
    3828:	02133100 	andseq	r3, r3, #0, 2
    382c:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
    3830:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    3834:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3838:	0b590b58 	bleq	16465a0 <__ccfg+0x16265f8>
    383c:	0b150000 	bleq	543844 <__ccfg+0x52389c>
    3840:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    3844:	16000006 	strne	r0, [r0], -r6
    3848:	13310034 	teqne	r1, #52	; 0x34
    384c:	00001702 	andeq	r1, r0, r2, lsl #14
    3850:	3f012e17 	svccc	0x00012e17
    3854:	3a0e0319 	bcc	3844c0 <__ccfg+0x364518>
    3858:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    385c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    3860:	97184006 	ldrls	r4, [r8, -r6]
    3864:	13011942 	movwne	r1, #6466	; 0x1942
    3868:	1d180000 	ldcne	0, cr0, [r8, #-0]
    386c:	11133101 	tstne	r3, r1, lsl #2
    3870:	58061201 	stmdapl	r6, {r0, r9, ip}
    3874:	010b590b 	tsteq	fp, fp, lsl #18
    3878:	19000013 	stmdbne	r0, {r0, r1, r4}
    387c:	01018289 	smlabbeq	r1, r9, r2, r8
    3880:	13310111 	teqne	r1, #1073741828	; 0x40000004
    3884:	8a1a0000 	bhi	68388c <__ccfg+0x6638e4>
    3888:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    388c:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    3890:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
    3894:	03193f01 	tsteq	r9, #1, 30
    3898:	3b0b3a0e 	blcc	2d20d8 <__ccfg+0x2b2130>
    389c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    38a0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    38a4:	97184006 	ldrls	r4, [r8, -r6]
    38a8:	13011942 	movwne	r1, #6466	; 0x1942
    38ac:	051c0000 	ldreq	r0, [ip, #-0]
    38b0:	3a0e0300 	bcc	3844b8 <__ccfg+0x364510>
    38b4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    38b8:	00170213 	andseq	r0, r7, r3, lsl r2
    38bc:	00341d00 	eorseq	r1, r4, r0, lsl #26
    38c0:	0b3a0e03 	bleq	e870d4 <__ccfg+0xe6712c>
    38c4:	1349053b 	movtne	r0, #38203	; 0x953b
    38c8:	00001702 	andeq	r1, r0, r2, lsl #14
    38cc:	31012e1e 	tstcc	r1, lr, lsl lr
    38d0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    38d4:	97184006 	ldrls	r4, [r8, -r6]
    38d8:	13011942 	movwne	r1, #6466	; 0x1942
    38dc:	051f0000 	ldreq	r0, [pc, #-0]	; 38e4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x74>
    38e0:	02133100 	andseq	r3, r3, #0, 2
    38e4:	20000017 	andcs	r0, r0, r7, lsl r0
    38e8:	13310034 	teqne	r1, #52	; 0x34
    38ec:	1d210000 	stcne	0, cr0, [r1, #-0]
    38f0:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    38f4:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
    38f8:	0105590b 	tsteq	r5, fp, lsl #18
    38fc:	22000013 	andcs	r0, r0, #19
    3900:	01018289 	smlabbeq	r1, r9, r2, r8
    3904:	13310111 	teqne	r1, #1073741828	; 0x40000004
    3908:	00001301 	andeq	r1, r0, r1, lsl #6
    390c:	01828923 	orreq	r8, r2, r3, lsr #18
    3910:	31011100 	mrscc	r1, (UNDEF: 17)
    3914:	24000013 	strcs	r0, [r0], #-19	; 0xffffffed
    3918:	01018289 	smlabbeq	r1, r9, r2, r8
    391c:	42930111 	addsmi	r0, r3, #1073741828	; 0x40000004
    3920:	00130118 	andseq	r0, r3, r8, lsl r1
    3924:	001d2500 	andseq	r2, sp, r0, lsl #10
    3928:	01111331 	tsteq	r1, r1, lsr r3
    392c:	0b580612 	bleq	160517c <__ccfg+0x15e51d4>
    3930:	00000559 	andeq	r0, r0, r9, asr r5
    3934:	01828926 	orreq	r8, r2, r6, lsr #18
    3938:	01011101 	tsteq	r1, r1, lsl #2
    393c:	27000013 	smladcs	r0, r3, r0, r0
    3940:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3944:	0b3a0e03 	bleq	e87158 <__ccfg+0xe671b0>
    3948:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    394c:	1301193c 	movwne	r1, #6460	; 0x193c
    3950:	05280000 	streq	r0, [r8, #-0]!
    3954:	00134900 	andseq	r4, r3, r0, lsl #18
    3958:	012e2900 			; <UNDEFINED> instruction: 0x012e2900
    395c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3960:	0b3b0b3a 	bleq	ec6650 <__ccfg+0xea66a8>
    3964:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    3968:	00001301 	andeq	r1, r0, r1, lsl #6
    396c:	3f012e2a 	svccc	0x00012e2a
    3970:	3a0e0319 	bcc	3845dc <__ccfg+0x364634>
    3974:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3978:	3c134919 			; <UNDEFINED> instruction: 0x3c134919
    397c:	00000019 	andeq	r0, r0, r9, lsl r0
    3980:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    3984:	030b130e 	movweq	r1, #45838	; 0xb30e
    3988:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    398c:	10011117 	andne	r1, r1, r7, lsl r1
    3990:	02000017 	andeq	r0, r0, #23
    3994:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    3998:	0b3b0b3a 	bleq	ec6688 <__ccfg+0xea66e0>
    399c:	00001349 	andeq	r1, r0, r9, asr #6
    39a0:	0b002403 	bleq	c9b4 <__exidx_end+0x790c>
    39a4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    39a8:	0400000e 	streq	r0, [r0], #-14
    39ac:	0b0b0024 	bleq	2c3a44 <__ccfg+0x2a3a9c>
    39b0:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    39b4:	0f050000 	svceq	0x00050000
    39b8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    39bc:	06000013 			; <UNDEFINED> instruction: 0x06000013
    39c0:	19270015 	stmdbne	r7!, {r0, r2, r4}
    39c4:	15070000 	strne	r0, [r7, #-0]
    39c8:	01192701 	tsteq	r9, r1, lsl #14
    39cc:	08000013 	stmdaeq	r0, {r0, r1, r4}
    39d0:	13490005 	movtne	r0, #36869	; 0x9005
    39d4:	15090000 	strne	r0, [r9, #-0]
    39d8:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    39dc:	00130113 	andseq	r0, r3, r3, lsl r1
    39e0:	00150a00 	andseq	r0, r5, r0, lsl #20
    39e4:	13491927 	movtne	r1, #39207	; 0x9927
    39e8:	130b0000 	movwne	r0, #45056	; 0xb000
    39ec:	3a0b0b01 	bcc	2c65f8 <__ccfg+0x2a6650>
    39f0:	010b3b0b 	tsteq	fp, fp, lsl #22
    39f4:	0c000013 	stceq	0, cr0, [r0], {19}
    39f8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    39fc:	0b3b0b3a 	bleq	ec66ec <__ccfg+0xea6744>
    3a00:	0b381349 	bleq	e0872c <__ccfg+0xde8784>
    3a04:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
    3a08:	3a0e0301 	bcc	384614 <__ccfg+0x36466c>
    3a0c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3a10:	010b2019 	tsteq	fp, r9, lsl r0
    3a14:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    3a18:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    3a1c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3a20:	00001349 	andeq	r1, r0, r9, asr #6
    3a24:	03002e0f 	movweq	r2, #3599	; 0xe0f
    3a28:	3b0b3a0e 	blcc	2d2268 <__ccfg+0x2b22c0>
    3a2c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    3a30:	000b2013 	andeq	r2, fp, r3, lsl r0
    3a34:	002e1000 	eoreq	r1, lr, r0
    3a38:	0b3a0e03 	bleq	e8724c <__ccfg+0xe672a4>
    3a3c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3a40:	00000b20 	andeq	r0, r0, r0, lsr #22
    3a44:	03012e11 	movweq	r2, #7697	; 0x1e11
    3a48:	3b0b3a0e 	blcc	2d2288 <__ccfg+0x2b22e0>
    3a4c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    3a50:	010b2013 	tsteq	fp, r3, lsl r0
    3a54:	12000013 	andne	r0, r0, #19
    3a58:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    3a5c:	0b3b0b3a 	bleq	ec674c <__ccfg+0xea67a4>
    3a60:	00001349 	andeq	r1, r0, r9, asr #6
    3a64:	03003413 	movweq	r3, #1043	; 0x413
    3a68:	3b0b3a0e 	blcc	2d22a8 <__ccfg+0x2b2300>
    3a6c:	0013490b 	andseq	r4, r3, fp, lsl #18
    3a70:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
    3a74:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3a78:	0b3b0b3a 	bleq	ec6768 <__ccfg+0xea67c0>
    3a7c:	01111927 	tsteq	r1, r7, lsr #18
    3a80:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    3a84:	01194297 			; <UNDEFINED> instruction: 0x01194297
    3a88:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    3a8c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    3a90:	0b3b0b3a 	bleq	ec6780 <__ccfg+0xea67d8>
    3a94:	17021349 	strne	r1, [r2, -r9, asr #6]
    3a98:	34160000 	ldrcc	r0, [r6], #-0
    3a9c:	3a0e0300 	bcc	3846a4 <__ccfg+0x3646fc>
    3aa0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3aa4:	00051c13 	andeq	r1, r5, r3, lsl ip
    3aa8:	011d1700 	tsteq	sp, r0, lsl #14
    3aac:	01521331 	cmpeq	r2, r1, lsr r3
    3ab0:	0b581755 	bleq	160980c <__ccfg+0x15e9864>
    3ab4:	13010b59 	movwne	r0, #7001	; 0x1b59
    3ab8:	05180000 	ldreq	r0, [r8, #-0]
    3abc:	1c133100 	ldfnes	f3, [r3], {-0}
    3ac0:	1900000b 	stmdbne	r0, {r0, r1, r3}
    3ac4:	1331001d 	teqne	r1, #29
    3ac8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3acc:	0b590b58 	bleq	1646834 <__ccfg+0x162688c>
    3ad0:	1d1a0000 	ldcne	0, cr0, [sl, #-0]
    3ad4:	11133101 	tstne	r3, r1, lsl #2
    3ad8:	58061201 	stmdapl	r6, {r0, r9, ip}
    3adc:	010b590b 	tsteq	fp, fp, lsl #18
    3ae0:	1b000013 	blne	3b34 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x54>
    3ae4:	00018289 	andeq	r8, r1, r9, lsl #5
    3ae8:	13310111 	teqne	r1, #1073741828	; 0x40000004
    3aec:	891c0000 	ldmdbhi	ip, {}	; <UNPREDICTABLE>
    3af0:	11010182 	smlabbne	r1, r2, r1, r0
    3af4:	00130101 	andseq	r0, r3, r1, lsl #2
    3af8:	828a1d00 	addhi	r1, sl, #0, 26
    3afc:	18020001 	stmdane	r2, {r0}
    3b00:	00184291 	mulseq	r8, r1, r2
    3b04:	82891e00 	addhi	r1, r9, #0, 28
    3b08:	01110101 	tsteq	r1, r1, lsl #2
    3b0c:	13011331 	movwne	r1, #4913	; 0x1331
    3b10:	891f0000 	ldmdbhi	pc, {}	; <UNPREDICTABLE>
    3b14:	11010182 	smlabbne	r1, r2, r1, r0
    3b18:	20000001 	andcs	r0, r0, r1
    3b1c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3b20:	0b3a0e03 	bleq	e87334 <__ccfg+0xe6738c>
    3b24:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3b28:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3b2c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3b30:	00130119 	andseq	r0, r3, r9, lsl r1
    3b34:	00052100 	andeq	r2, r5, r0, lsl #2
    3b38:	0b3a0e03 	bleq	e8734c <__ccfg+0xe673a4>
    3b3c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3b40:	00001702 	andeq	r1, r0, r2, lsl #14
    3b44:	03003422 	movweq	r3, #1058	; 0x422
    3b48:	3b0b3a0e 	blcc	2d2388 <__ccfg+0x2b23e0>
    3b4c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3b50:	23000018 	movwcs	r0, #24
    3b54:	08030034 	stmdaeq	r3, {r2, r4, r5}
    3b58:	0b3b0b3a 	bleq	ec6848 <__ccfg+0xea68a0>
    3b5c:	17021349 	strne	r1, [r2, -r9, asr #6]
    3b60:	34240000 	strtcc	r0, [r4], #-0
    3b64:	3a080300 	bcc	20476c <__ccfg+0x1e47c4>
    3b68:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3b6c:	25000013 	strcs	r0, [r0, #-19]	; 0xffffffed
    3b70:	0111010b 	tsteq	r1, fp, lsl #2
    3b74:	13010612 	movwne	r0, #5650	; 0x1612
    3b78:	34260000 	strtcc	r0, [r6], #-0
    3b7c:	3a0e0300 	bcc	384784 <__ccfg+0x3647dc>
    3b80:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3b84:	00170213 	andseq	r0, r7, r3, lsl r2
    3b88:	011d2700 	tsteq	sp, r0, lsl #14
    3b8c:	01111331 	tsteq	r1, r1, lsr r3
    3b90:	0b580612 	bleq	16053e0 <__ccfg+0x15e5438>
    3b94:	13010559 	movwne	r0, #5465	; 0x1559
    3b98:	05280000 	streq	r0, [r8, #-0]!
    3b9c:	00133100 	andseq	r3, r3, r0, lsl #2
    3ba0:	010b2900 	tsteq	fp, r0, lsl #18
    3ba4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3ba8:	342a0000 	strtcc	r0, [sl], #-0
    3bac:	02133100 	andseq	r3, r3, #0, 2
    3bb0:	2b000017 	blcs	3c14 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x24>
    3bb4:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    3bb8:	17550152 			; <UNDEFINED> instruction: 0x17550152
    3bbc:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    3bc0:	00001301 	andeq	r1, r0, r1, lsl #6
    3bc4:	55010b2c 	strpl	r0, [r1, #-2860]	; 0xfffff4d4
    3bc8:	2d000017 	stccs	0, cr0, [r0, #-92]	; 0xffffffa4
    3bcc:	13490026 	movtne	r0, #36902	; 0x9026
    3bd0:	2e2e0000 	cdpcs	0, 2, cr0, cr14, cr0, {0}
    3bd4:	03193f00 	tsteq	r9, #0, 30
    3bd8:	3b0b3a0e 	blcc	2d2418 <__ccfg+0x2b2470>
    3bdc:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    3be0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3be4:	97184006 	ldrls	r4, [r8, -r6]
    3be8:	00001942 	andeq	r1, r0, r2, asr #18
    3bec:	4901012f 	stmdbmi	r1, {r0, r1, r2, r3, r5, r8}
    3bf0:	00130113 	andseq	r0, r3, r3, lsl r1
    3bf4:	00213000 	eoreq	r3, r1, r0
    3bf8:	0b2f1349 	bleq	bc8924 <__ccfg+0xba897c>
    3bfc:	2e310000 	cdpcs	0, 3, cr0, cr1, cr0, {0}
    3c00:	03193f01 	tsteq	r9, #1, 30
    3c04:	3b0b3a0e 	blcc	2d2444 <__ccfg+0x2b249c>
    3c08:	3c19270b 	ldccc	7, cr2, [r9], {11}
    3c0c:	00130119 	andseq	r0, r3, r9, lsl r1
    3c10:	012e3200 			; <UNDEFINED> instruction: 0x012e3200
    3c14:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3c18:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3c1c:	13491927 	movtne	r1, #39207	; 0x9927
    3c20:	1301193c 	movwne	r1, #6460	; 0x193c
    3c24:	2e330000 	cdpcs	0, 3, cr0, cr3, cr0, {0}
    3c28:	03193f00 	tsteq	r9, #0, 30
    3c2c:	3b0b3a0e 	blcc	2d246c <__ccfg+0x2b24c4>
    3c30:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    3c34:	00193c13 	andseq	r3, r9, r3, lsl ip
    3c38:	11010000 	mrsne	r0, (UNDEF: 1)
    3c3c:	130e2501 	movwne	r2, #58625	; 0xe501
    3c40:	1b0e030b 	blne	384874 <__ccfg+0x3648cc>
    3c44:	1117550e 	tstne	r7, lr, lsl #10
    3c48:	00171001 	andseq	r1, r7, r1
    3c4c:	00240200 	eoreq	r0, r4, r0, lsl #4
    3c50:	0b3e0b0b 	bleq	f86884 <__ccfg+0xf668dc>
    3c54:	00000e03 	andeq	r0, r0, r3, lsl #28
    3c58:	03001603 	movweq	r1, #1539	; 0x603
    3c5c:	3b0b3a0e 	blcc	2d249c <__ccfg+0x2b24f4>
    3c60:	0013490b 	andseq	r4, r3, fp, lsl #18
    3c64:	00240400 	eoreq	r0, r4, r0, lsl #8
    3c68:	0b3e0b0b 	bleq	f8689c <__ccfg+0xf668f4>
    3c6c:	00000803 	andeq	r0, r0, r3, lsl #16
    3c70:	0b010405 	bleq	44c8c <__ccfg+0x24ce4>
    3c74:	3b0b3a0b 	blcc	2d24a8 <__ccfg+0x2b2500>
    3c78:	0013010b 	andseq	r0, r3, fp, lsl #2
    3c7c:	00280600 	eoreq	r0, r8, r0, lsl #12
    3c80:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
    3c84:	04070000 	streq	r0, [r7], #-0
    3c88:	3a0b0b01 	bcc	2c6894 <__ccfg+0x2a68ec>
    3c8c:	01053b0b 	tsteq	r5, fp, lsl #22
    3c90:	08000013 	stmdaeq	r0, {r0, r1, r4}
    3c94:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    3c98:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3c9c:	00001349 	andeq	r1, r0, r9, asr #6
    3ca0:	03002e09 	movweq	r2, #3593	; 0xe09
    3ca4:	3b0b3a0e 	blcc	2d24e4 <__ccfg+0x2b253c>
    3ca8:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    3cac:	000b2013 	andeq	r2, fp, r3, lsl r0
    3cb0:	012e0a00 			; <UNDEFINED> instruction: 0x012e0a00
    3cb4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3cb8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3cbc:	13491927 	movtne	r1, #39207	; 0x9927
    3cc0:	13010b20 	movwne	r0, #6944	; 0x1b20
    3cc4:	340b0000 	strcc	r0, [fp], #-0
    3cc8:	3a0e0300 	bcc	3848d0 <__ccfg+0x364928>
    3ccc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3cd0:	0c000013 	stceq	0, cr0, [r0], {19}
    3cd4:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    3cd8:	0b3a0e03 	bleq	e874ec <__ccfg+0xe67544>
    3cdc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3ce0:	01111349 	tsteq	r1, r9, asr #6
    3ce4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    3ce8:	00194297 	mulseq	r9, r7, r2
    3cec:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
    3cf0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3cf4:	0b3b0b3a 	bleq	ec69e4 <__ccfg+0xea6a3c>
    3cf8:	13491927 	movtne	r1, #39207	; 0x9927
    3cfc:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3d00:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3d04:	00130119 	andseq	r0, r3, r9, lsl r1
    3d08:	00340e00 	eorseq	r0, r4, r0, lsl #28
    3d0c:	0b3a0e03 	bleq	e87520 <__ccfg+0xe67578>
    3d10:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3d14:	00001702 	andeq	r1, r0, r2, lsl #14
    3d18:	31012e0f 	tstcc	r1, pc, lsl #28
    3d1c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3d20:	97184006 	ldrls	r4, [r8, -r6]
    3d24:	13011942 	movwne	r1, #6466	; 0x1942
    3d28:	34100000 	ldrcc	r0, [r0], #-0
    3d2c:	02133100 	andseq	r3, r3, #0, 2
    3d30:	11000017 	tstne	r0, r7, lsl r0
    3d34:	0111010b 	tsteq	r1, fp, lsl #2
    3d38:	00000612 	andeq	r0, r0, r2, lsl r6
    3d3c:	31003412 	tstcc	r0, r2, lsl r4
    3d40:	13000013 	movwne	r0, #19
    3d44:	1331001d 	teqne	r1, #29
    3d48:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3d4c:	0b590b58 	bleq	1646ab4 <__ccfg+0x1626b0c>
    3d50:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
    3d54:	03193f01 	tsteq	r9, #1, 30
    3d58:	3b0b3a0e 	blcc	2d2598 <__ccfg+0x2b25f0>
    3d5c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    3d60:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3d64:	97184006 	ldrls	r4, [r8, -r6]
    3d68:	13011942 	movwne	r1, #6466	; 0x1942
    3d6c:	89150000 	ldmdbhi	r5, {}	; <UNPREDICTABLE>
    3d70:	11000182 	smlabbne	r0, r2, r1, r0
    3d74:	00133101 	andseq	r3, r3, r1, lsl #2
    3d78:	012e1600 			; <UNDEFINED> instruction: 0x012e1600
    3d7c:	0b3a0e03 	bleq	e87590 <__ccfg+0xe675e8>
    3d80:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3d84:	0b201349 	bleq	808ab0 <__ccfg+0x7e8b08>
    3d88:	00001301 	andeq	r1, r0, r1, lsl #6
    3d8c:	03003417 	movweq	r3, #1047	; 0x417
    3d90:	3b0b3a0e 	blcc	2d25d0 <__ccfg+0x2b2628>
    3d94:	00134905 	andseq	r4, r3, r5, lsl #18
    3d98:	00341800 	eorseq	r1, r4, r0, lsl #16
    3d9c:	0b3a0e03 	bleq	e875b0 <__ccfg+0xe67608>
    3da0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3da4:	00001802 	andeq	r1, r0, r2, lsl #16
    3da8:	31001d19 	tstcc	r0, r9, lsl sp
    3dac:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    3db0:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    3db4:	1a00000b 	bne	3de8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1c>
    3db8:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    3dbc:	17550152 			; <UNDEFINED> instruction: 0x17550152
    3dc0:	0b590b58 	bleq	1646b28 <__ccfg+0x1626b80>
    3dc4:	00001301 	andeq	r1, r0, r1, lsl #6
    3dc8:	55010b1b 	strpl	r0, [r1, #-2843]	; 0xfffff4e5
    3dcc:	1c000017 	stcne	0, cr0, [r0], {23}
    3dd0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3dd4:	0b3a0e03 	bleq	e875e8 <__ccfg+0xe67640>
    3dd8:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3ddc:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3de0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3de4:	1d000019 	stcne	0, cr0, [r0, #-100]	; 0xffffff9c
    3de8:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    3dec:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3df0:	0b590b58 	bleq	1646b58 <__ccfg+0x1626bb0>
    3df4:	00001301 	andeq	r1, r0, r1, lsl #6
    3df8:	31011d1e 	tstcc	r1, lr, lsl sp
    3dfc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3e00:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    3e04:	0000000b 	andeq	r0, r0, fp
    3e08:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    3e0c:	030b130e 	movweq	r1, #45838	; 0xb30e
    3e10:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    3e14:	10011117 	andne	r1, r1, r7, lsl r1
    3e18:	02000017 	andeq	r0, r0, #23
    3e1c:	0b0b0024 	bleq	2c3eb4 <__ccfg+0x2a3f0c>
    3e20:	0e030b3e 	vmoveq.16	d3[0], r0
    3e24:	16030000 	strne	r0, [r3], -r0
    3e28:	3a0e0300 	bcc	384a30 <__ccfg+0x364a88>
    3e2c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3e30:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    3e34:	0b0b0024 	bleq	2c3ecc <__ccfg+0x2a3f24>
    3e38:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    3e3c:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    3e40:	3a0e0301 	bcc	384a4c <__ccfg+0x364aa4>
    3e44:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    3e48:	010b2019 	tsteq	fp, r9, lsl r0
    3e4c:	06000013 			; <UNDEFINED> instruction: 0x06000013
    3e50:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    3e54:	0b3b0b3a 	bleq	ec6b44 <__ccfg+0xea6b9c>
    3e58:	00001349 	andeq	r1, r0, r9, asr #6
    3e5c:	03003407 	movweq	r3, #1031	; 0x407
    3e60:	3b0b3a0e 	blcc	2d26a0 <__ccfg+0x2b26f8>
    3e64:	0013490b 	andseq	r4, r3, fp, lsl #18
    3e68:	012e0800 			; <UNDEFINED> instruction: 0x012e0800
    3e6c:	0b3a0e03 	bleq	e87680 <__ccfg+0xe676d8>
    3e70:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3e74:	0b201349 	bleq	808ba0 <__ccfg+0x7e8bf8>
    3e78:	00001301 	andeq	r1, r0, r1, lsl #6
    3e7c:	31012e09 	tstcc	r1, r9, lsl #28
    3e80:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3e84:	97184006 	ldrls	r4, [r8, -r6]
    3e88:	13011942 	movwne	r1, #6466	; 0x1942
    3e8c:	050a0000 	streq	r0, [sl, #-0]
    3e90:	02133100 	andseq	r3, r3, #0, 2
    3e94:	0b000017 	bleq	3ef8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x12c>
    3e98:	13310034 	teqne	r1, #52	; 0x34
    3e9c:	00001702 	andeq	r1, r0, r2, lsl #14
    3ea0:	3100050c 	tstcc	r0, ip, lsl #10
    3ea4:	000b1c13 	andeq	r1, fp, r3, lsl ip
    3ea8:	82890d00 	addhi	r0, r9, #0, 26
    3eac:	01110001 	tsteq	r1, r1
    3eb0:	00001331 	andeq	r1, r0, r1, lsr r3
    3eb4:	0182890e 	orreq	r8, r2, lr, lsl #18
    3eb8:	95011100 	strls	r1, [r1, #-256]	; 0xffffff00
    3ebc:	13311942 	teqne	r1, #1081344	; 0x108000
    3ec0:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
    3ec4:	03193f01 	tsteq	r9, #1, 30
    3ec8:	3b0b3a0e 	blcc	2d2708 <__ccfg+0x2b2760>
    3ecc:	11192705 	tstne	r9, r5, lsl #14
    3ed0:	40061201 	andmi	r1, r6, r1, lsl #4
    3ed4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    3ed8:	00001301 	andeq	r1, r0, r1, lsl #6
    3edc:	03000510 	movweq	r0, #1296	; 0x510
    3ee0:	3b0b3a0e 	blcc	2d2720 <__ccfg+0x2b2778>
    3ee4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3ee8:	11000017 	tstne	r0, r7, lsl r0
    3eec:	01018289 	smlabbeq	r1, r9, r2, r8
    3ef0:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
    3ef4:	00133119 	andseq	r3, r3, r9, lsl r1
    3ef8:	828a1200 	addhi	r1, sl, #0, 4
    3efc:	18020001 	stmdane	r2, {r0}
    3f00:	00184291 	mulseq	r8, r1, r2
    3f04:	00341300 	eorseq	r1, r4, r0, lsl #6
    3f08:	0b3a0e03 	bleq	e8771c <__ccfg+0xe67774>
    3f0c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3f10:	00001702 	andeq	r1, r0, r2, lsl #14
    3f14:	3f012e14 	svccc	0x00012e14
    3f18:	3a0e0319 	bcc	384b84 <__ccfg+0x364bdc>
    3f1c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3f20:	11134919 	tstne	r3, r9, lsl r9
    3f24:	40061201 	andmi	r1, r6, r1, lsl #4
    3f28:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    3f2c:	00001301 	andeq	r1, r0, r1, lsl #6
    3f30:	31011d15 	tstcc	r1, r5, lsl sp
    3f34:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3f38:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    3f3c:	1600000b 	strne	r0, [r0], -fp
    3f40:	0111010b 	tsteq	r1, fp, lsl #2
    3f44:	00000612 	andeq	r0, r0, r2, lsl r6
    3f48:	3f002e17 	svccc	0x00002e17
    3f4c:	3a0e0319 	bcc	384bb8 <__ccfg+0x364c10>
    3f50:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    3f54:	3c134919 			; <UNDEFINED> instruction: 0x3c134919
    3f58:	00000019 	andeq	r0, r0, r9, lsl r0
    3f5c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    3f60:	030b130e 	movweq	r1, #45838	; 0xb30e
    3f64:	110e1b0e 	tstne	lr, lr, lsl #22
    3f68:	10061201 	andne	r1, r6, r1, lsl #4
    3f6c:	02000017 	andeq	r0, r0, #23
    3f70:	0b0b0024 	bleq	2c4008 <__ccfg+0x2a4060>
    3f74:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    3f78:	16030000 	strne	r0, [r3], -r0
    3f7c:	3a0e0300 	bcc	384b84 <__ccfg+0x364bdc>
    3f80:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3f84:	0013490b 	andseq	r4, r3, fp, lsl #18
    3f88:	00240400 	eoreq	r0, r4, r0, lsl #8
    3f8c:	0b3e0b0b 	bleq	f86bc0 <__ccfg+0xf66c18>
    3f90:	00000e03 	andeq	r0, r0, r3, lsl #28
    3f94:	03001605 	movweq	r1, #1541	; 0x605
    3f98:	3b0b3a0e 	blcc	2d27d8 <__ccfg+0x2b2830>
    3f9c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    3fa0:	06000013 			; <UNDEFINED> instruction: 0x06000013
    3fa4:	13490026 	movtne	r0, #36902	; 0x9026
    3fa8:	17070000 	strne	r0, [r7, -r0]
    3fac:	3a0b0b01 	bcc	2c6bb8 <__ccfg+0x2a6c10>
    3fb0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3fb4:	0013010b 	andseq	r0, r3, fp, lsl #2
    3fb8:	000d0800 	andeq	r0, sp, r0, lsl #16
    3fbc:	0b3a0e03 	bleq	e877d0 <__ccfg+0xe67828>
    3fc0:	0b390b3b 	bleq	e46cb4 <__ccfg+0xe26d0c>
    3fc4:	00001349 	andeq	r1, r0, r9, asr #6
    3fc8:	49010109 	stmdbmi	r1, {r0, r3, r8}
    3fcc:	00130113 	andseq	r0, r3, r3, lsl r1
    3fd0:	00210a00 	eoreq	r0, r1, r0, lsl #20
    3fd4:	0b2f1349 	bleq	bc8d00 <__ccfg+0xba8d58>
    3fd8:	130b0000 	movwne	r0, #45056	; 0xb000
    3fdc:	3a0b0b01 	bcc	2c6be8 <__ccfg+0x2a6c40>
    3fe0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3fe4:	0013010b 	andseq	r0, r3, fp, lsl #2
    3fe8:	000d0c00 	andeq	r0, sp, r0, lsl #24
    3fec:	0b3a0e03 	bleq	e87800 <__ccfg+0xe67858>
    3ff0:	0b390b3b 	bleq	e46ce4 <__ccfg+0xe26d3c>
    3ff4:	0b381349 	bleq	e08d20 <__ccfg+0xde8d78>
    3ff8:	0f0d0000 	svceq	0x000d0000
    3ffc:	000b0b00 	andeq	r0, fp, r0, lsl #22
    4000:	00370e00 	eorseq	r0, r7, r0, lsl #28
    4004:	00001349 	andeq	r1, r0, r9, asr #6
    4008:	0301130f 	movweq	r1, #4879	; 0x130f
    400c:	3a0b0b0e 	bcc	2c6c4c <__ccfg+0x2a6ca4>
    4010:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4014:	0013010b 	andseq	r0, r3, fp, lsl #2
    4018:	000d1000 	andeq	r1, sp, r0
    401c:	0b3a0803 	bleq	e86030 <__ccfg+0xe66088>
    4020:	0b390b3b 	bleq	e46d14 <__ccfg+0xe26d6c>
    4024:	0b381349 	bleq	e08d50 <__ccfg+0xde8da8>
    4028:	0f110000 	svceq	0x00110000
    402c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    4030:	12000013 	andne	r0, r0, #19
    4034:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    4038:	0b3a050b 	bleq	e8546c <__ccfg+0xe654c4>
    403c:	0b390b3b 	bleq	e46d30 <__ccfg+0xe26d88>
    4040:	00001301 	andeq	r1, r0, r1, lsl #6
    4044:	03000d13 	movweq	r0, #3347	; 0xd13
    4048:	3b0b3a0e 	blcc	2d2888 <__ccfg+0x2b28e0>
    404c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    4050:	00053813 	andeq	r3, r5, r3, lsl r8
    4054:	00151400 	andseq	r1, r5, r0, lsl #8
    4058:	00001927 	andeq	r1, r0, r7, lsr #18
    405c:	27011515 	smladcs	r1, r5, r5, r1
    4060:	01134919 	tsteq	r3, r9, lsl r9
    4064:	16000013 			; <UNDEFINED> instruction: 0x16000013
    4068:	13490005 	movtne	r0, #36869	; 0x9005
    406c:	13170000 	tstne	r7, #0
    4070:	0b0e0301 	bleq	384c7c <__ccfg+0x364cd4>
    4074:	3b0b3a05 	blcc	2d2890 <__ccfg+0x2b28e8>
    4078:	010b3905 	tsteq	fp, r5, lsl #18
    407c:	18000013 	stmdane	r0, {r0, r1, r4}
    4080:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    4084:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4088:	13490b39 	movtne	r0, #39737	; 0x9b39
    408c:	00000b38 	andeq	r0, r0, r8, lsr fp
    4090:	03000d19 	movweq	r0, #3353	; 0xd19
    4094:	3b0b3a0e 	blcc	2d28d4 <__ccfg+0x2b292c>
    4098:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    409c:	00053813 	andeq	r3, r5, r3, lsl r8
    40a0:	01131a00 	tsteq	r3, r0, lsl #20
    40a4:	0b0b0e03 	bleq	2c78b8 <__ccfg+0x2a7910>
    40a8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    40ac:	13010b39 	movwne	r0, #6969	; 0x1b39
    40b0:	131b0000 	tstne	fp, #0
    40b4:	3a0b0b01 	bcc	2c6cc0 <__ccfg+0x2a6d18>
    40b8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    40bc:	0013010b 	andseq	r0, r3, fp, lsl #2
    40c0:	01171c00 	tsteq	r7, r0, lsl #24
    40c4:	0b3a0b0b 	bleq	e86cf8 <__ccfg+0xe66d50>
    40c8:	0b39053b 	bleq	e455bc <__ccfg+0xe25614>
    40cc:	00001301 	andeq	r1, r0, r1, lsl #6
    40d0:	03000d1d 	movweq	r0, #3357	; 0xd1d
    40d4:	3b0b3a0e 	blcc	2d2914 <__ccfg+0x2b296c>
    40d8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    40dc:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    40e0:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    40e4:	00001301 	andeq	r1, r0, r1, lsl #6
    40e8:	0300341f 	movweq	r3, #1055	; 0x41f
    40ec:	3b0b3a0e 	blcc	2d292c <__ccfg+0x2b2984>
    40f0:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    40f4:	3c193f13 	ldccc	15, cr3, [r9], {19}
    40f8:	20000019 	andcs	r0, r0, r9, lsl r0
    40fc:	00000026 	andeq	r0, r0, r6, lsr #32
    4100:	03003421 	movweq	r3, #1057	; 0x421
    4104:	3b0b3a0e 	blcc	2d2944 <__ccfg+0x2b299c>
    4108:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    410c:	3c193f13 	ldccc	15, cr3, [r9], {19}
    4110:	22000019 	andcs	r0, r0, #25
    4114:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    4118:	0b3a0e03 	bleq	e8792c <__ccfg+0xe67984>
    411c:	0b390b3b 	bleq	e46e10 <__ccfg+0xe26e68>
    4120:	13491927 	movtne	r1, #39207	; 0x9927
    4124:	06120111 			; <UNDEFINED> instruction: 0x06120111
    4128:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    412c:	00130119 	andseq	r0, r3, r9, lsl r1
    4130:	00052300 	andeq	r2, r5, r0, lsl #6
    4134:	0b3a0e03 	bleq	e87948 <__ccfg+0xe679a0>
    4138:	0b390b3b 	bleq	e46e2c <__ccfg+0xe26e84>
    413c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    4140:	05240000 	streq	r0, [r4, #-0]!
    4144:	3a0e0300 	bcc	384d4c <__ccfg+0x364da4>
    4148:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    414c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    4150:	1742b717 	smlaldne	fp, r2, r7, r7
    4154:	34250000 	strtcc	r0, [r5], #-0
    4158:	3a080300 	bcc	204d60 <__ccfg+0x1e4db8>
    415c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4160:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    4164:	1742b717 	smlaldne	fp, r2, r7, r7
    4168:	34260000 	strtcc	r0, [r6], #-0
    416c:	3a0e0300 	bcc	384d74 <__ccfg+0x364dcc>
    4170:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4174:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    4178:	1742b717 	smlaldne	fp, r2, r7, r7
    417c:	01000000 	mrseq	r0, (UNDEF: 0)
    4180:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    4184:	0e030b13 	vmoveq.32	d3[0], r0
    4188:	01110e1b 	tsteq	r1, fp, lsl lr
    418c:	17100612 			; <UNDEFINED> instruction: 0x17100612
    4190:	24020000 	strcs	r0, [r2], #-0
    4194:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    4198:	000e030b 	andeq	r0, lr, fp, lsl #6
    419c:	00240300 	eoreq	r0, r4, r0, lsl #6
    41a0:	0b3e0b0b 	bleq	f86dd4 <__ccfg+0xf66e2c>
    41a4:	00000803 	andeq	r0, r0, r3, lsl #16
    41a8:	03001604 	movweq	r1, #1540	; 0x604
    41ac:	3b0b3a0e 	blcc	2d29ec <__ccfg+0x2b2a44>
    41b0:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    41b4:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
    41b8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    41bc:	0b3b0b3a 	bleq	ec6eac <__ccfg+0xea6f04>
    41c0:	13490b39 	movtne	r0, #39737	; 0x9b39
    41c4:	17060000 	strne	r0, [r6, -r0]
    41c8:	3a0b0b01 	bcc	2c6dd4 <__ccfg+0x2a6e2c>
    41cc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    41d0:	0013010b 	andseq	r0, r3, fp, lsl #2
    41d4:	000d0700 	andeq	r0, sp, r0, lsl #14
    41d8:	0b3a0e03 	bleq	e879ec <__ccfg+0xe67a44>
    41dc:	0b390b3b 	bleq	e46ed0 <__ccfg+0xe26f28>
    41e0:	00001349 	andeq	r1, r0, r9, asr #6
    41e4:	49010108 	stmdbmi	r1, {r3, r8}
    41e8:	00130113 	andseq	r0, r3, r3, lsl r1
    41ec:	00210900 	eoreq	r0, r1, r0, lsl #18
    41f0:	0b2f1349 	bleq	bc8f1c <__ccfg+0xba8f74>
    41f4:	130a0000 	movwne	r0, #40960	; 0xa000
    41f8:	3a0b0b01 	bcc	2c6e04 <__ccfg+0x2a6e5c>
    41fc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4200:	0013010b 	andseq	r0, r3, fp, lsl #2
    4204:	000d0b00 	andeq	r0, sp, r0, lsl #22
    4208:	0b3a0e03 	bleq	e87a1c <__ccfg+0xe67a74>
    420c:	0b390b3b 	bleq	e46f00 <__ccfg+0xe26f58>
    4210:	0b381349 	bleq	e08f3c <__ccfg+0xde8f94>
    4214:	0f0c0000 	svceq	0x000c0000
    4218:	000b0b00 	andeq	r0, fp, r0, lsl #22
    421c:	01130d00 	tsteq	r3, r0, lsl #26
    4220:	0b0b0e03 	bleq	2c7a34 <__ccfg+0x2a7a8c>
    4224:	0b3b0b3a 	bleq	ec6f14 <__ccfg+0xea6f6c>
    4228:	13010b39 	movwne	r0, #6969	; 0x1b39
    422c:	0d0e0000 	stceq	0, cr0, [lr, #-0]
    4230:	3a080300 	bcc	204e38 <__ccfg+0x1e4e90>
    4234:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4238:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    423c:	0f00000b 	svceq	0x0000000b
    4240:	0b0b000f 	bleq	2c4284 <__ccfg+0x2a42dc>
    4244:	00001349 	andeq	r1, r0, r9, asr #6
    4248:	03011310 	movweq	r1, #4880	; 0x1310
    424c:	3a050b0e 	bcc	146e8c <__ccfg+0x126ee4>
    4250:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4254:	0013010b 	andseq	r0, r3, fp, lsl #2
    4258:	000d1100 	andeq	r1, sp, r0, lsl #2
    425c:	0b3a0e03 	bleq	e87a70 <__ccfg+0xe67ac8>
    4260:	0b390b3b 	bleq	e46f54 <__ccfg+0xe26fac>
    4264:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
    4268:	15120000 	ldrne	r0, [r2, #-0]
    426c:	00192700 	andseq	r2, r9, r0, lsl #14
    4270:	01151300 	tsteq	r5, r0, lsl #6
    4274:	13491927 	movtne	r1, #39207	; 0x9927
    4278:	00001301 	andeq	r1, r0, r1, lsl #6
    427c:	49000514 	stmdbmi	r0, {r2, r4, r8, sl}
    4280:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    4284:	13490026 	movtne	r0, #36902	; 0x9026
    4288:	13160000 	tstne	r6, #0
    428c:	0b0e0301 	bleq	384e98 <__ccfg+0x364ef0>
    4290:	3b0b3a05 	blcc	2d2aac <__ccfg+0x2b2b04>
    4294:	010b3905 	tsteq	fp, r5, lsl #18
    4298:	17000013 	smladne	r0, r3, r0, r0
    429c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    42a0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    42a4:	13490b39 	movtne	r0, #39737	; 0x9b39
    42a8:	00000b38 	andeq	r0, r0, r8, lsr fp
    42ac:	03000d18 	movweq	r0, #3352	; 0xd18
    42b0:	3b0b3a0e 	blcc	2d2af0 <__ccfg+0x2b2b48>
    42b4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    42b8:	00053813 	andeq	r3, r5, r3, lsl r8
    42bc:	01131900 	tsteq	r3, r0, lsl #18
    42c0:	0b0b0e03 	bleq	2c7ad4 <__ccfg+0x2a7b2c>
    42c4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    42c8:	13010b39 	movwne	r0, #6969	; 0x1b39
    42cc:	131a0000 	tstne	sl, #0
    42d0:	3a0b0b01 	bcc	2c6edc <__ccfg+0x2a6f34>
    42d4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    42d8:	0013010b 	andseq	r0, r3, fp, lsl #2
    42dc:	01171b00 	tsteq	r7, r0, lsl #22
    42e0:	0b3a0b0b 	bleq	e86f14 <__ccfg+0xe66f6c>
    42e4:	0b39053b 	bleq	e457d8 <__ccfg+0xe25830>
    42e8:	00001301 	andeq	r1, r0, r1, lsl #6
    42ec:	03000d1c 	movweq	r0, #3356	; 0xd1c
    42f0:	3b0b3a0e 	blcc	2d2b30 <__ccfg+0x2b2b88>
    42f4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    42f8:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    42fc:	0e030013 	mcreq	0, 0, r0, cr3, cr3, {0}
    4300:	0000193c 	andeq	r1, r0, ip, lsr r9
    4304:	2701151e 	smladcs	r1, lr, r5, r1
    4308:	00130119 	andseq	r0, r3, r9, lsl r1
    430c:	00341f00 	eorseq	r1, r4, r0, lsl #30
    4310:	0b3a0e03 	bleq	e87b24 <__ccfg+0xe67b7c>
    4314:	0b39053b 	bleq	e45808 <__ccfg+0xe25860>
    4318:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    431c:	0000193c 	andeq	r1, r0, ip, lsr r9
    4320:	03003420 	movweq	r3, #1056	; 0x420
    4324:	3b0b3a0e 	blcc	2d2b64 <__ccfg+0x2b2bbc>
    4328:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    432c:	3c193f13 	ldccc	15, cr3, [r9], {19}
    4330:	21000019 	tstcs	r0, r9, lsl r0
    4334:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    4338:	0b3a0e03 	bleq	e87b4c <__ccfg+0xe67ba4>
    433c:	0b390b3b 	bleq	e47030 <__ccfg+0xe27088>
    4340:	13491927 	movtne	r1, #39207	; 0x9927
    4344:	06120111 			; <UNDEFINED> instruction: 0x06120111
    4348:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    434c:	00130119 	andseq	r0, r3, r9, lsl r1
    4350:	00342200 	eorseq	r2, r4, r0, lsl #4
    4354:	0b3a0e03 	bleq	e87b68 <__ccfg+0xe67bc0>
    4358:	0b390b3b 	bleq	e4704c <__ccfg+0xe270a4>
    435c:	17021349 	strne	r1, [r2, -r9, asr #6]
    4360:	001742b7 			; <UNDEFINED> instruction: 0x001742b7
    4364:	012e2300 			; <UNDEFINED> instruction: 0x012e2300
    4368:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    436c:	0b3b0b3a 	bleq	ec705c <__ccfg+0xea70b4>
    4370:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
    4374:	06120111 			; <UNDEFINED> instruction: 0x06120111
    4378:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    437c:	24000019 	strcs	r0, [r0], #-25	; 0xffffffe7
    4380:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    4384:	0b3b0b3a 	bleq	ec7074 <__ccfg+0xea70cc>
    4388:	13490b39 	movtne	r0, #39737	; 0x9b39
    438c:	00001802 	andeq	r1, r0, r2, lsl #16
    4390:	01110100 	tsteq	r1, r0, lsl #2
    4394:	0b130e25 	bleq	4c7c30 <__ccfg+0x4a7c88>
    4398:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    439c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    43a0:	00001710 	andeq	r1, r0, r0, lsl r7
    43a4:	0b002402 	bleq	d3b4 <__exidx_end+0x830c>
    43a8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    43ac:	03000008 	movweq	r0, #8
    43b0:	0b0b0024 	bleq	2c4448 <__ccfg+0x2a44a0>
    43b4:	0e030b3e 	vmoveq.16	d3[0], r0
    43b8:	16040000 	strne	r0, [r4], -r0
    43bc:	3a0e0300 	bcc	384fc4 <__ccfg+0x36501c>
    43c0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    43c4:	0013490b 	andseq	r4, r3, fp, lsl #18
    43c8:	00160500 	andseq	r0, r6, r0, lsl #10
    43cc:	0b3a0e03 	bleq	e87be0 <__ccfg+0xe67c38>
    43d0:	0b390b3b 	bleq	e470c4 <__ccfg+0xe2711c>
    43d4:	00001349 	andeq	r1, r0, r9, asr #6
    43d8:	0b011706 	bleq	49ff8 <__ccfg+0x2a050>
    43dc:	3b0b3a0b 	blcc	2d2c10 <__ccfg+0x2b2c68>
    43e0:	010b390b 	tsteq	fp, fp, lsl #18
    43e4:	07000013 	smladeq	r0, r3, r0, r0
    43e8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    43ec:	0b3b0b3a 	bleq	ec70dc <__ccfg+0xea7134>
    43f0:	13490b39 	movtne	r0, #39737	; 0x9b39
    43f4:	01080000 	mrseq	r0, (UNDEF: 8)
    43f8:	01134901 	tsteq	r3, r1, lsl #18
    43fc:	09000013 	stmdbeq	r0, {r0, r1, r4}
    4400:	13490021 	movtne	r0, #36897	; 0x9021
    4404:	00000b2f 	andeq	r0, r0, pc, lsr #22
    4408:	0b01130a 	bleq	49038 <__ccfg+0x29090>
    440c:	3b0b3a0b 	blcc	2d2c40 <__ccfg+0x2b2c98>
    4410:	010b390b 	tsteq	fp, fp, lsl #18
    4414:	0b000013 	bleq	4468 <_gettimeofday+0x154>
    4418:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    441c:	0b3b0b3a 	bleq	ec710c <__ccfg+0xea7164>
    4420:	13490b39 	movtne	r0, #39737	; 0x9b39
    4424:	00000b38 	andeq	r0, r0, r8, lsr fp
    4428:	0b000f0c 	bleq	8060 <__exidx_end+0x2fb8>
    442c:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    4430:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    4434:	0b3a0b0b 	bleq	e87068 <__ccfg+0xe670c0>
    4438:	0b390b3b 	bleq	e4712c <__ccfg+0xe27184>
    443c:	00001301 	andeq	r1, r0, r1, lsl #6
    4440:	03000d0e 	movweq	r0, #3342	; 0xd0e
    4444:	3b0b3a08 	blcc	2d2c6c <__ccfg+0x2b2cc4>
    4448:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    444c:	000b3813 	andeq	r3, fp, r3, lsl r8
    4450:	000f0f00 	andeq	r0, pc, r0, lsl #30
    4454:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    4458:	13100000 	tstne	r0, #0
    445c:	0b0e0301 	bleq	385068 <__ccfg+0x3650c0>
    4460:	3b0b3a05 	blcc	2d2c7c <__ccfg+0x2b2cd4>
    4464:	010b390b 	tsteq	fp, fp, lsl #18
    4468:	11000013 	tstne	r0, r3, lsl r0
    446c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    4470:	0b3b0b3a 	bleq	ec7160 <__ccfg+0xea71b8>
    4474:	13490b39 	movtne	r0, #39737	; 0x9b39
    4478:	00000538 	andeq	r0, r0, r8, lsr r5
    447c:	27001512 	smladcs	r0, r2, r5, r1
    4480:	13000019 	movwne	r0, #25
    4484:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    4488:	13011349 	movwne	r1, #4937	; 0x1349
    448c:	05140000 	ldreq	r0, [r4, #-0]
    4490:	00134900 	andseq	r4, r3, r0, lsl #18
    4494:	00261500 	eoreq	r1, r6, r0, lsl #10
    4498:	00001349 	andeq	r1, r0, r9, asr #6
    449c:	03011316 	movweq	r1, #4886	; 0x1316
    44a0:	3a050b0e 	bcc	1470e0 <__ccfg+0x127138>
    44a4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    44a8:	0013010b 	andseq	r0, r3, fp, lsl #2
    44ac:	000d1700 	andeq	r1, sp, r0, lsl #14
    44b0:	0b3a0e03 	bleq	e87cc4 <__ccfg+0xe67d1c>
    44b4:	0b39053b 	bleq	e459a8 <__ccfg+0xe25a00>
    44b8:	0b381349 	bleq	e091e4 <__ccfg+0xde923c>
    44bc:	0d180000 	ldceq	0, cr0, [r8, #-0]
    44c0:	3a0e0300 	bcc	3850c8 <__ccfg+0x365120>
    44c4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    44c8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    44cc:	19000005 	stmdbne	r0, {r0, r2}
    44d0:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    44d4:	0b3a0b0b 	bleq	e87108 <__ccfg+0xe67160>
    44d8:	0b39053b 	bleq	e459cc <__ccfg+0xe25a24>
    44dc:	00001301 	andeq	r1, r0, r1, lsl #6
    44e0:	0b01131a 	bleq	49150 <__ccfg+0x291a8>
    44e4:	3b0b3a0b 	blcc	2d2d18 <__ccfg+0x2b2d70>
    44e8:	010b3905 	tsteq	fp, r5, lsl #18
    44ec:	1b000013 	blne	4540 <CSWTCH.47+0x39>
    44f0:	0b0b0117 	bleq	2c4954 <__ccfg+0x2a49ac>
    44f4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    44f8:	13010b39 	movwne	r0, #6969	; 0x1b39
    44fc:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
    4500:	3a0e0300 	bcc	385108 <__ccfg+0x365160>
    4504:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4508:	0013490b 	andseq	r4, r3, fp, lsl #18
    450c:	00131d00 	andseq	r1, r3, r0, lsl #26
    4510:	193c0e03 	ldmdbne	ip!, {r0, r1, r9, sl, fp}
    4514:	151e0000 	ldrne	r0, [lr, #-0]
    4518:	01192701 	tsteq	r9, r1, lsl #14
    451c:	1f000013 	svcne	0x00000013
    4520:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    4524:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4528:	13490b39 	movtne	r0, #39737	; 0x9b39
    452c:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    4530:	34200000 	strtcc	r0, [r0], #-0
    4534:	3a0e0300 	bcc	38513c <__ccfg+0x365194>
    4538:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    453c:	3f13490b 	svccc	0x0013490b
    4540:	00193c19 	andseq	r3, r9, r9, lsl ip
    4544:	012e2100 			; <UNDEFINED> instruction: 0x012e2100
    4548:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    454c:	0b3b0b3a 	bleq	ec723c <__ccfg+0xea7294>
    4550:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
    4554:	01111349 	tsteq	r1, r9, asr #6
    4558:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    455c:	01194297 			; <UNDEFINED> instruction: 0x01194297
    4560:	22000013 	andcs	r0, r0, #19
    4564:	08030005 	stmdaeq	r3, {r0, r2}
    4568:	0b3b0b3a 	bleq	ec7258 <__ccfg+0xea72b0>
    456c:	13490b39 	movtne	r0, #39737	; 0x9b39
    4570:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    4574:	23000017 	movwcs	r0, #23
    4578:	08030034 	stmdaeq	r3, {r2, r4, r5}
    457c:	0b3b0b3a 	bleq	ec726c <__ccfg+0xea72c4>
    4580:	13490b39 	movtne	r0, #39737	; 0x9b39
    4584:	00001802 	andeq	r1, r0, r2, lsl #16
    4588:	01828924 	orreq	r8, r2, r4, lsr #18
    458c:	31011101 	tstcc	r1, r1, lsl #2
    4590:	25000013 	strcs	r0, [r0, #-19]	; 0xffffffed
    4594:	0001828a 	andeq	r8, r1, sl, lsl #5
    4598:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    459c:	26000018 			; <UNDEFINED> instruction: 0x26000018
    45a0:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    45a4:	0e6e193c 			; <UNDEFINED> instruction: 0x0e6e193c
    45a8:	0b3a0e03 	bleq	e87dbc <__ccfg+0xe67e14>
    45ac:	0b390b3b 	bleq	e472a0 <__ccfg+0xe272f8>
    45b0:	01000000 	mrseq	r0, (UNDEF: 0)
    45b4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    45b8:	0e030b13 	vmoveq.32	d3[0], r0
    45bc:	01110e1b 	tsteq	r1, fp, lsl lr
    45c0:	17100612 			; <UNDEFINED> instruction: 0x17100612
    45c4:	24020000 	strcs	r0, [r2], #-0
    45c8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    45cc:	0008030b 	andeq	r0, r8, fp, lsl #6
    45d0:	00240300 	eoreq	r0, r4, r0, lsl #6
    45d4:	0b3e0b0b 	bleq	f87208 <__ccfg+0xf67260>
    45d8:	00000e03 	andeq	r0, r0, r3, lsl #28
    45dc:	03001604 	movweq	r1, #1540	; 0x604
    45e0:	3b0b3a0e 	blcc	2d2e20 <__ccfg+0x2b2e78>
    45e4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    45e8:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
    45ec:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    45f0:	0b3b0b3a 	bleq	ec72e0 <__ccfg+0xea7338>
    45f4:	13490b39 	movtne	r0, #39737	; 0x9b39
    45f8:	17060000 	strne	r0, [r6, -r0]
    45fc:	3a0b0b01 	bcc	2c7208 <__ccfg+0x2a7260>
    4600:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4604:	0013010b 	andseq	r0, r3, fp, lsl #2
    4608:	000d0700 	andeq	r0, sp, r0, lsl #14
    460c:	0b3a0e03 	bleq	e87e20 <__ccfg+0xe67e78>
    4610:	0b390b3b 	bleq	e47304 <__ccfg+0xe2735c>
    4614:	00001349 	andeq	r1, r0, r9, asr #6
    4618:	49010108 	stmdbmi	r1, {r3, r8}
    461c:	00130113 	andseq	r0, r3, r3, lsl r1
    4620:	00210900 	eoreq	r0, r1, r0, lsl #18
    4624:	0b2f1349 	bleq	bc9350 <__ccfg+0xba93a8>
    4628:	130a0000 	movwne	r0, #40960	; 0xa000
    462c:	3a0b0b01 	bcc	2c7238 <__ccfg+0x2a7290>
    4630:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4634:	0013010b 	andseq	r0, r3, fp, lsl #2
    4638:	000d0b00 	andeq	r0, sp, r0, lsl #22
    463c:	0b3a0e03 	bleq	e87e50 <__ccfg+0xe67ea8>
    4640:	0b390b3b 	bleq	e47334 <__ccfg+0xe2738c>
    4644:	0b381349 	bleq	e09370 <__ccfg+0xde93c8>
    4648:	0f0c0000 	svceq	0x000c0000
    464c:	000b0b00 	andeq	r0, fp, r0, lsl #22
    4650:	01130d00 	tsteq	r3, r0, lsl #26
    4654:	0b0b0e03 	bleq	2c7e68 <__ccfg+0x2a7ec0>
    4658:	0b3b0b3a 	bleq	ec7348 <__ccfg+0xea73a0>
    465c:	13010b39 	movwne	r0, #6969	; 0x1b39
    4660:	0d0e0000 	stceq	0, cr0, [lr, #-0]
    4664:	3a080300 	bcc	20526c <__ccfg+0x1e52c4>
    4668:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    466c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    4670:	0f00000b 	svceq	0x0000000b
    4674:	0b0b000f 	bleq	2c46b8 <__ccfg+0x2a4710>
    4678:	00001349 	andeq	r1, r0, r9, asr #6
    467c:	03011310 	movweq	r1, #4880	; 0x1310
    4680:	3a050b0e 	bcc	1472c0 <__ccfg+0x127318>
    4684:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4688:	0013010b 	andseq	r0, r3, fp, lsl #2
    468c:	000d1100 	andeq	r1, sp, r0, lsl #2
    4690:	0b3a0e03 	bleq	e87ea4 <__ccfg+0xe67efc>
    4694:	0b390b3b 	bleq	e47388 <__ccfg+0xe273e0>
    4698:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
    469c:	15120000 	ldrne	r0, [r2, #-0]
    46a0:	00192700 	andseq	r2, r9, r0, lsl #14
    46a4:	01151300 	tsteq	r5, r0, lsl #6
    46a8:	13491927 	movtne	r1, #39207	; 0x9927
    46ac:	00001301 	andeq	r1, r0, r1, lsl #6
    46b0:	49000514 	stmdbmi	r0, {r2, r4, r8, sl}
    46b4:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    46b8:	13490026 	movtne	r0, #36902	; 0x9026
    46bc:	13160000 	tstne	r6, #0
    46c0:	0b0e0301 	bleq	3852cc <__ccfg+0x365324>
    46c4:	3b0b3a05 	blcc	2d2ee0 <__ccfg+0x2b2f38>
    46c8:	010b3905 	tsteq	fp, r5, lsl #18
    46cc:	17000013 	smladne	r0, r3, r0, r0
    46d0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    46d4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    46d8:	13490b39 	movtne	r0, #39737	; 0x9b39
    46dc:	00000b38 	andeq	r0, r0, r8, lsr fp
    46e0:	03000d18 	movweq	r0, #3352	; 0xd18
    46e4:	3b0b3a0e 	blcc	2d2f24 <__ccfg+0x2b2f7c>
    46e8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    46ec:	00053813 	andeq	r3, r5, r3, lsl r8
    46f0:	01131900 	tsteq	r3, r0, lsl #18
    46f4:	0b0b0e03 	bleq	2c7f08 <__ccfg+0x2a7f60>
    46f8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    46fc:	13010b39 	movwne	r0, #6969	; 0x1b39
    4700:	131a0000 	tstne	sl, #0
    4704:	3a0b0b01 	bcc	2c7310 <__ccfg+0x2a7368>
    4708:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    470c:	0013010b 	andseq	r0, r3, fp, lsl #2
    4710:	01171b00 	tsteq	r7, r0, lsl #22
    4714:	0b3a0b0b 	bleq	e87348 <__ccfg+0xe673a0>
    4718:	0b39053b 	bleq	e45c0c <__ccfg+0xe25c64>
    471c:	00001301 	andeq	r1, r0, r1, lsl #6
    4720:	03000d1c 	movweq	r0, #3356	; 0xd1c
    4724:	3b0b3a0e 	blcc	2d2f64 <__ccfg+0x2b2fbc>
    4728:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    472c:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    4730:	0e030013 	mcreq	0, 0, r0, cr3, cr3, {0}
    4734:	0000193c 	andeq	r1, r0, ip, lsr r9
    4738:	2701151e 	smladcs	r1, lr, r5, r1
    473c:	00130119 	andseq	r0, r3, r9, lsl r1
    4740:	00341f00 	eorseq	r1, r4, r0, lsl #30
    4744:	0b3a0e03 	bleq	e87f58 <__ccfg+0xe67fb0>
    4748:	0b39053b 	bleq	e45c3c <__ccfg+0xe25c94>
    474c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    4750:	0000193c 	andeq	r1, r0, ip, lsr r9
    4754:	03003420 	movweq	r3, #1056	; 0x420
    4758:	3b0b3a0e 	blcc	2d2f98 <__ccfg+0x2b2ff0>
    475c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    4760:	3c193f13 	ldccc	15, cr3, [r9], {19}
    4764:	21000019 	tstcs	r0, r9, lsl r0
    4768:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    476c:	0b3a0e03 	bleq	e87f80 <__ccfg+0xe67fd8>
    4770:	0b390b3b 	bleq	e47464 <__ccfg+0xe274bc>
    4774:	13491927 	movtne	r1, #39207	; 0x9927
    4778:	06120111 			; <UNDEFINED> instruction: 0x06120111
    477c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    4780:	00130119 	andseq	r0, r3, r9, lsl r1
    4784:	00052200 	andeq	r2, r5, r0, lsl #4
    4788:	0b3a0803 	bleq	e8679c <__ccfg+0xe667f4>
    478c:	0b390b3b 	bleq	e47480 <__ccfg+0xe274d8>
    4790:	17021349 	strne	r1, [r2, -r9, asr #6]
    4794:	001742b7 			; <UNDEFINED> instruction: 0x001742b7
    4798:	00052300 	andeq	r2, r5, r0, lsl #6
    479c:	0b3a0e03 	bleq	e87fb0 <__ccfg+0xe68008>
    47a0:	0b390b3b 	bleq	e47494 <__ccfg+0xe274ec>
    47a4:	17021349 	strne	r1, [r2, -r9, asr #6]
    47a8:	001742b7 			; <UNDEFINED> instruction: 0x001742b7
    47ac:	00342400 	eorseq	r2, r4, r0, lsl #8
    47b0:	0b3a0803 	bleq	e867c4 <__ccfg+0xe6681c>
    47b4:	0b390b3b 	bleq	e474a8 <__ccfg+0xe27500>
    47b8:	17021349 	strne	r1, [r2, -r9, asr #6]
    47bc:	001742b7 			; <UNDEFINED> instruction: 0x001742b7
    47c0:	82892500 	addhi	r2, r9, #0, 10
    47c4:	01110101 	tsteq	r1, r1, lsl #2
    47c8:	00001331 	andeq	r1, r0, r1, lsr r3
    47cc:	01828a26 	orreq	r8, r2, r6, lsr #20
    47d0:	91180200 	tstls	r8, r0, lsl #4
    47d4:	00001842 	andeq	r1, r0, r2, asr #16
    47d8:	3f002e27 	svccc	0x00002e27
    47dc:	6e193c19 	mrcvs	12, 0, r3, cr9, cr9, {0}
    47e0:	3a0e030e 	bcc	385420 <__ccfg+0x365478>
    47e4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    47e8:	0000000b 	andeq	r0, r0, fp
    47ec:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    47f0:	030b130e 	movweq	r1, #45838	; 0xb30e
    47f4:	100e1b0e 	andne	r1, lr, lr, lsl #22
    47f8:	02000017 	andeq	r0, r0, #23
    47fc:	0b0b0024 	bleq	2c4894 <__ccfg+0x2a48ec>
    4800:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    4804:	24030000 	strcs	r0, [r3], #-0
    4808:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    480c:	000e030b 	andeq	r0, lr, fp, lsl #6
    4810:	00160400 	andseq	r0, r6, r0, lsl #8
    4814:	0b3a0e03 	bleq	e88028 <__ccfg+0xe68080>
    4818:	0b39053b 	bleq	e45d0c <__ccfg+0xe25d64>
    481c:	00001349 	andeq	r1, r0, r9, asr #6
    4820:	03001605 	movweq	r1, #1541	; 0x605
    4824:	3b0b3a0e 	blcc	2d3064 <__ccfg+0x2b30bc>
    4828:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    482c:	06000013 			; <UNDEFINED> instruction: 0x06000013
    4830:	0b0b0117 	bleq	2c4c94 <__ccfg+0x2a4cec>
    4834:	0b3b0b3a 	bleq	ec7524 <__ccfg+0xea757c>
    4838:	13010b39 	movwne	r0, #6969	; 0x1b39
    483c:	0d070000 	stceq	0, cr0, [r7, #-0]
    4840:	3a0e0300 	bcc	385448 <__ccfg+0x3654a0>
    4844:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4848:	0013490b 	andseq	r4, r3, fp, lsl #18
    484c:	01010800 	tsteq	r1, r0, lsl #16
    4850:	13011349 	movwne	r1, #4937	; 0x1349
    4854:	21090000 	mrscs	r0, (UNDEF: 9)
    4858:	2f134900 	svccs	0x00134900
    485c:	0a00000b 	beq	4890 <patchGenfskRfe+0x16c>
    4860:	0b0b0113 	bleq	2c4cb4 <__ccfg+0x2a4d0c>
    4864:	0b3b0b3a 	bleq	ec7554 <__ccfg+0xea75ac>
    4868:	13010b39 	movwne	r0, #6969	; 0x1b39
    486c:	0d0b0000 	stceq	0, cr0, [fp, #-0]
    4870:	3a0e0300 	bcc	385478 <__ccfg+0x3654d0>
    4874:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4878:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    487c:	0c00000b 	stceq	0, cr0, [r0], {11}
    4880:	0b0b000f 	bleq	2c48c4 <__ccfg+0x2a491c>
    4884:	130d0000 	movwne	r0, #53248	; 0xd000
    4888:	0b0e0301 	bleq	385494 <__ccfg+0x3654ec>
    488c:	3b0b3a0b 	blcc	2d30c0 <__ccfg+0x2b3118>
    4890:	010b390b 	tsteq	fp, fp, lsl #18
    4894:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    4898:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    489c:	0b3b0b3a 	bleq	ec758c <__ccfg+0xea75e4>
    48a0:	13490b39 	movtne	r0, #39737	; 0x9b39
    48a4:	00000b38 	andeq	r0, r0, r8, lsr fp
    48a8:	0b000f0f 	bleq	84ec <__exidx_end+0x3444>
    48ac:	0013490b 	andseq	r4, r3, fp, lsl #18
    48b0:	01131000 	tsteq	r3, r0
    48b4:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
    48b8:	0b3b0b3a 	bleq	ec75a8 <__ccfg+0xea7600>
    48bc:	13010b39 	movwne	r0, #6969	; 0x1b39
    48c0:	0d110000 	ldceq	0, cr0, [r1, #-0]
    48c4:	3a0e0300 	bcc	3854cc <__ccfg+0x365524>
    48c8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    48cc:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    48d0:	12000005 	andne	r0, r0, #5
    48d4:	19270015 	stmdbne	r7!, {r0, r2, r4}
    48d8:	15130000 	ldrne	r0, [r3, #-0]
    48dc:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    48e0:	00130113 	andseq	r0, r3, r3, lsl r1
    48e4:	00051400 	andeq	r1, r5, r0, lsl #8
    48e8:	00001349 	andeq	r1, r0, r9, asr #6
    48ec:	49002615 	stmdbmi	r0, {r0, r2, r4, r9, sl, sp}
    48f0:	16000013 			; <UNDEFINED> instruction: 0x16000013
    48f4:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    48f8:	0b3a050b 	bleq	e85d2c <__ccfg+0xe65d84>
    48fc:	0b39053b 	bleq	e45df0 <__ccfg+0xe25e48>
    4900:	00001301 	andeq	r1, r0, r1, lsl #6
    4904:	03000d17 	movweq	r0, #3351	; 0xd17
    4908:	3b0b3a0e 	blcc	2d3148 <__ccfg+0x2b31a0>
    490c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    4910:	000b3813 	andeq	r3, fp, r3, lsl r8
    4914:	000d1800 	andeq	r1, sp, r0, lsl #16
    4918:	0b3a0e03 	bleq	e8812c <__ccfg+0xe68184>
    491c:	0b39053b 	bleq	e45e10 <__ccfg+0xe25e68>
    4920:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
    4924:	13190000 	tstne	r9, #0
    4928:	0b0e0301 	bleq	385534 <__ccfg+0x36558c>
    492c:	3b0b3a0b 	blcc	2d3160 <__ccfg+0x2b31b8>
    4930:	010b3905 	tsteq	fp, r5, lsl #18
    4934:	1a000013 	bne	4988 <patchGenfskRfe+0x264>
    4938:	0b0b0113 	bleq	2c4d8c <__ccfg+0x2a4de4>
    493c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4940:	13010b39 	movwne	r0, #6969	; 0x1b39
    4944:	171b0000 	ldrne	r0, [fp, -r0]
    4948:	3a0b0b01 	bcc	2c7554 <__ccfg+0x2a75ac>
    494c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4950:	0013010b 	andseq	r0, r3, fp, lsl #2
    4954:	000d1c00 	andeq	r1, sp, r0, lsl #24
    4958:	0b3a0e03 	bleq	e8816c <__ccfg+0xe681c4>
    495c:	0b39053b 	bleq	e45e50 <__ccfg+0xe25ea8>
    4960:	00001349 	andeq	r1, r0, r9, asr #6
    4964:	0300131d 	movweq	r1, #797	; 0x31d
    4968:	00193c0e 	andseq	r3, r9, lr, lsl #24
    496c:	01151e00 	tsteq	r5, r0, lsl #28
    4970:	13011927 	movwne	r1, #6439	; 0x1927
    4974:	341f0000 	ldrcc	r0, [pc], #-0	; 497c <patchGenfskRfe+0x258>
    4978:	3a0e0300 	bcc	385580 <__ccfg+0x3655d8>
    497c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4980:	3f13490b 	svccc	0x0013490b
    4984:	00193c19 	andseq	r3, r9, r9, lsl ip
    4988:	00342000 	eorseq	r2, r4, r0
    498c:	0b3a0e03 	bleq	e881a0 <__ccfg+0xe681f8>
    4990:	0b390b3b 	bleq	e47684 <__ccfg+0xe276dc>
    4994:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    4998:	34210000 	strtcc	r0, [r1], #-0
    499c:	02134700 	andseq	r4, r3, #0, 14
    49a0:	00000018 	andeq	r0, r0, r8, lsl r0
    49a4:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    49a8:	030b130e 	movweq	r1, #45838	; 0xb30e
    49ac:	110e1b0e 	tstne	lr, lr, lsl #22
    49b0:	10061201 	andne	r1, r6, r1, lsl #4
    49b4:	02000017 	andeq	r0, r0, #23
    49b8:	0b0b0024 	bleq	2c4a50 <__ccfg+0x2a4aa8>
    49bc:	0e030b3e 	vmoveq.16	d3[0], r0
    49c0:	24030000 	strcs	r0, [r3], #-0
    49c4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    49c8:	0008030b 	andeq	r0, r8, fp, lsl #6
    49cc:	00160400 	andseq	r0, r6, r0, lsl #8
    49d0:	0b3a0e03 	bleq	e881e4 <__ccfg+0xe6823c>
    49d4:	0b39053b 	bleq	e45ec8 <__ccfg+0xe25f20>
    49d8:	00001349 	andeq	r1, r0, r9, asr #6
    49dc:	03001605 	movweq	r1, #1541	; 0x605
    49e0:	3b0b3a0e 	blcc	2d3220 <__ccfg+0x2b3278>
    49e4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    49e8:	06000013 			; <UNDEFINED> instruction: 0x06000013
    49ec:	0b0b0117 	bleq	2c4e50 <__ccfg+0x2a4ea8>
    49f0:	0b3b0b3a 	bleq	ec76e0 <__ccfg+0xea7738>
    49f4:	13010b39 	movwne	r0, #6969	; 0x1b39
    49f8:	0d070000 	stceq	0, cr0, [r7, #-0]
    49fc:	3a0e0300 	bcc	385604 <__ccfg+0x36565c>
    4a00:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4a04:	0013490b 	andseq	r4, r3, fp, lsl #18
    4a08:	01010800 	tsteq	r1, r0, lsl #16
    4a0c:	13011349 	movwne	r1, #4937	; 0x1349
    4a10:	21090000 	mrscs	r0, (UNDEF: 9)
    4a14:	2f134900 	svccs	0x00134900
    4a18:	0a00000b 	beq	4a4c <patchGenfskRfe+0x328>
    4a1c:	0b0b0113 	bleq	2c4e70 <__ccfg+0x2a4ec8>
    4a20:	0b3b0b3a 	bleq	ec7710 <__ccfg+0xea7768>
    4a24:	13010b39 	movwne	r0, #6969	; 0x1b39
    4a28:	0d0b0000 	stceq	0, cr0, [fp, #-0]
    4a2c:	3a0e0300 	bcc	385634 <__ccfg+0x36568c>
    4a30:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4a34:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    4a38:	0c00000b 	stceq	0, cr0, [r0], {11}
    4a3c:	0b0b000f 	bleq	2c4a80 <__ccfg+0x2a4ad8>
    4a40:	130d0000 	movwne	r0, #53248	; 0xd000
    4a44:	0b0e0301 	bleq	385650 <__ccfg+0x3656a8>
    4a48:	3b0b3a0b 	blcc	2d327c <__ccfg+0x2b32d4>
    4a4c:	010b390b 	tsteq	fp, fp, lsl #18
    4a50:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    4a54:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    4a58:	0b3b0b3a 	bleq	ec7748 <__ccfg+0xea77a0>
    4a5c:	13490b39 	movtne	r0, #39737	; 0x9b39
    4a60:	00000b38 	andeq	r0, r0, r8, lsr fp
    4a64:	0b000f0f 	bleq	86a8 <__exidx_end+0x3600>
    4a68:	0013490b 	andseq	r4, r3, fp, lsl #18
    4a6c:	01131000 	tsteq	r3, r0
    4a70:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
    4a74:	0b3b0b3a 	bleq	ec7764 <__ccfg+0xea77bc>
    4a78:	13010b39 	movwne	r0, #6969	; 0x1b39
    4a7c:	0d110000 	ldceq	0, cr0, [r1, #-0]
    4a80:	3a0e0300 	bcc	385688 <__ccfg+0x3656e0>
    4a84:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4a88:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    4a8c:	12000005 	andne	r0, r0, #5
    4a90:	19270015 	stmdbne	r7!, {r0, r2, r4}
    4a94:	15130000 	ldrne	r0, [r3, #-0]
    4a98:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    4a9c:	00130113 	andseq	r0, r3, r3, lsl r1
    4aa0:	00051400 	andeq	r1, r5, r0, lsl #8
    4aa4:	00001349 	andeq	r1, r0, r9, asr #6
    4aa8:	49002615 	stmdbmi	r0, {r0, r2, r4, r9, sl, sp}
    4aac:	16000013 			; <UNDEFINED> instruction: 0x16000013
    4ab0:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    4ab4:	0b3a050b 	bleq	e85ee8 <__ccfg+0xe65f40>
    4ab8:	0b39053b 	bleq	e45fac <__ccfg+0xe26004>
    4abc:	00001301 	andeq	r1, r0, r1, lsl #6
    4ac0:	03000d17 	movweq	r0, #3351	; 0xd17
    4ac4:	3b0b3a0e 	blcc	2d3304 <__ccfg+0x2b335c>
    4ac8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    4acc:	000b3813 	andeq	r3, fp, r3, lsl r8
    4ad0:	000d1800 	andeq	r1, sp, r0, lsl #16
    4ad4:	0b3a0e03 	bleq	e882e8 <__ccfg+0xe68340>
    4ad8:	0b39053b 	bleq	e45fcc <__ccfg+0xe26024>
    4adc:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
    4ae0:	13190000 	tstne	r9, #0
    4ae4:	0b0e0301 	bleq	3856f0 <__ccfg+0x365748>
    4ae8:	3b0b3a0b 	blcc	2d331c <__ccfg+0x2b3374>
    4aec:	010b3905 	tsteq	fp, r5, lsl #18
    4af0:	1a000013 	bne	4b44 <patchGenfskRfe+0x420>
    4af4:	0b0b0113 	bleq	2c4f48 <__ccfg+0x2a4fa0>
    4af8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4afc:	13010b39 	movwne	r0, #6969	; 0x1b39
    4b00:	171b0000 	ldrne	r0, [fp, -r0]
    4b04:	3a0b0b01 	bcc	2c7710 <__ccfg+0x2a7768>
    4b08:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4b0c:	0013010b 	andseq	r0, r3, fp, lsl #2
    4b10:	000d1c00 	andeq	r1, sp, r0, lsl #24
    4b14:	0b3a0e03 	bleq	e88328 <__ccfg+0xe68380>
    4b18:	0b39053b 	bleq	e4600c <__ccfg+0xe26064>
    4b1c:	00001349 	andeq	r1, r0, r9, asr #6
    4b20:	0300131d 	movweq	r1, #797	; 0x31d
    4b24:	00193c0e 	andseq	r3, r9, lr, lsl #24
    4b28:	01151e00 	tsteq	r5, r0, lsl #28
    4b2c:	13011927 	movwne	r1, #6439	; 0x1927
    4b30:	341f0000 	ldrcc	r0, [pc], #-0	; 4b38 <patchGenfskRfe+0x414>
    4b34:	3a0e0300 	bcc	38573c <__ccfg+0x365794>
    4b38:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4b3c:	3f13490b 	svccc	0x0013490b
    4b40:	00193c19 	andseq	r3, r9, r9, lsl ip
    4b44:	00342000 	eorseq	r2, r4, r0
    4b48:	0b3a0e03 	bleq	e8835c <__ccfg+0xe683b4>
    4b4c:	0b390b3b 	bleq	e47840 <__ccfg+0xe27898>
    4b50:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    4b54:	0000193c 	andeq	r1, r0, ip, lsr r9
    4b58:	03003421 	movweq	r3, #1057	; 0x421
    4b5c:	3b0b3a0e 	blcc	2d339c <__ccfg+0x2b33f4>
    4b60:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    4b64:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
    4b68:	22000018 	andcs	r0, r0, #24
    4b6c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    4b70:	0b3a0e03 	bleq	e88384 <__ccfg+0xe683dc>
    4b74:	0b39053b 	bleq	e46068 <__ccfg+0xe260c0>
    4b78:	01111927 	tsteq	r1, r7, lsr #18
    4b7c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    4b80:	01194297 			; <UNDEFINED> instruction: 0x01194297
    4b84:	23000013 	movwcs	r0, #19
    4b88:	08030005 	stmdaeq	r3, {r0, r2}
    4b8c:	0b3b0b3a 	bleq	ec787c <__ccfg+0xea78d4>
    4b90:	13490b39 	movtne	r0, #39737	; 0x9b39
    4b94:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    4b98:	24000017 	strcs	r0, [r0], #-23	; 0xffffffe9
    4b9c:	0111010b 	tsteq	r1, fp, lsl #2
    4ba0:	13010612 	movwne	r0, #5650	; 0x1612
    4ba4:	34250000 	strtcc	r0, [r5], #-0
    4ba8:	3a080300 	bcc	2057b0 <__ccfg+0x1e5808>
    4bac:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4bb0:	0013490b 	andseq	r4, r3, fp, lsl #18
    4bb4:	00342600 	eorseq	r2, r4, r0, lsl #12
    4bb8:	0b3a0e03 	bleq	e883cc <__ccfg+0xe68424>
    4bbc:	0b390b3b 	bleq	e478b0 <__ccfg+0xe27908>
    4bc0:	17021349 	strne	r1, [r2, -r9, asr #6]
    4bc4:	001742b7 			; <UNDEFINED> instruction: 0x001742b7
    4bc8:	82892700 	addhi	r2, r9, #0, 14
    4bcc:	01110101 	tsteq	r1, r1, lsl #2
    4bd0:	00001331 	andeq	r1, r0, r1, lsr r3
    4bd4:	01828a28 	orreq	r8, r2, r8, lsr #20
    4bd8:	91180200 	tstls	r8, r0, lsl #4
    4bdc:	00001842 	andeq	r1, r0, r2, asr #16
    4be0:	03003429 	movweq	r3, #1065	; 0x429
    4be4:	3b0b3a08 	blcc	2d340c <__ccfg+0x2b3464>
    4be8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    4bec:	b7170213 			; <UNDEFINED> instruction: 0xb7170213
    4bf0:	00001742 	andeq	r1, r0, r2, asr #14
    4bf4:	0182892a 	orreq	r8, r2, sl, lsr #18
    4bf8:	31011101 	tstcc	r1, r1, lsl #2
    4bfc:	00130113 	andseq	r0, r3, r3, lsl r1
    4c00:	82892b00 	addhi	r2, r9, #0, 22
    4c04:	01110101 	tsteq	r1, r1, lsl #2
    4c08:	00001301 	andeq	r1, r0, r1, lsl #6
    4c0c:	3f012e2c 	svccc	0x00012e2c
    4c10:	3a0e0319 	bcc	38587c <__ccfg+0x3658d4>
    4c14:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4c18:	1119270b 	tstne	r9, fp, lsl #14
    4c1c:	40061201 	andmi	r1, r6, r1, lsl #4
    4c20:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    4c24:	00001301 	andeq	r1, r0, r1, lsl #6
    4c28:	0300052d 	movweq	r0, #1325	; 0x52d
    4c2c:	3b0b3a0e 	blcc	2d346c <__ccfg+0x2b34c4>
    4c30:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    4c34:	b7170213 			; <UNDEFINED> instruction: 0xb7170213
    4c38:	00001742 	andeq	r1, r0, r2, asr #14
    4c3c:	3f002e2e 	svccc	0x00002e2e
    4c40:	6e193c19 	mrcvs	12, 0, r3, cr9, cr9, {0}
    4c44:	3a0e030e 	bcc	385884 <__ccfg+0x3658dc>
    4c48:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4c4c:	0000000b 	andeq	r0, r0, fp
    4c50:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    4c54:	030b130e 	movweq	r1, #45838	; 0xb30e
    4c58:	110e1b0e 	tstne	lr, lr, lsl #22
    4c5c:	10061201 	andne	r1, r6, r1, lsl #4
    4c60:	02000017 	andeq	r0, r0, #23
    4c64:	0b0b0024 	bleq	2c4cfc <__ccfg+0x2a4d54>
    4c68:	0e030b3e 	vmoveq.16	d3[0], r0
    4c6c:	24030000 	strcs	r0, [r3], #-0
    4c70:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    4c74:	0008030b 	andeq	r0, r8, fp, lsl #6
    4c78:	00160400 	andseq	r0, r6, r0, lsl #8
    4c7c:	0b3a0e03 	bleq	e88490 <__ccfg+0xe684e8>
    4c80:	0b390b3b 	bleq	e47974 <__ccfg+0xe279cc>
    4c84:	00001349 	andeq	r1, r0, r9, asr #6
    4c88:	0b000f05 	bleq	88a4 <__exidx_end+0x37fc>
    4c8c:	0013490b 	andseq	r4, r3, fp, lsl #18
    4c90:	01150600 	tsteq	r5, r0, lsl #12
    4c94:	13491927 	movtne	r1, #39207	; 0x9927
    4c98:	00001301 	andeq	r1, r0, r1, lsl #6
    4c9c:	49000507 	stmdbmi	r0, {r0, r1, r2, r8, sl}
    4ca0:	08000013 	stmdaeq	r0, {r0, r1, r4}
    4ca4:	00000026 	andeq	r0, r0, r6, lsr #32
    4ca8:	03003409 	movweq	r3, #1033	; 0x409
    4cac:	3b0b3a0e 	blcc	2d34ec <__ccfg+0x2b3544>
    4cb0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    4cb4:	3c193f13 	ldccc	15, cr3, [r9], {19}
    4cb8:	0a000019 	beq	4d24 <patchGenfskRfe+0x600>
    4cbc:	0e030104 	adfeqs	f0, f3, f4
    4cc0:	0b0b0b3e 	bleq	2c79c0 <__ccfg+0x2a7a18>
    4cc4:	0b3a1349 	bleq	e899f0 <__ccfg+0xe69a48>
    4cc8:	0b390b3b 	bleq	e479bc <__ccfg+0xe27a14>
    4ccc:	00001301 	andeq	r1, r0, r1, lsl #6
    4cd0:	0300280b 	movweq	r2, #2059	; 0x80b
    4cd4:	000b1c0e 	andeq	r1, fp, lr, lsl #24
    4cd8:	01010c00 	tsteq	r1, r0, lsl #24
    4cdc:	13011349 	movwne	r1, #4937	; 0x1349
    4ce0:	210d0000 	mrscs	r0, (UNDEF: 13)
    4ce4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    4ce8:	13490026 	movtne	r0, #36902	; 0x9026
    4cec:	340f0000 	strcc	r0, [pc], #-0	; 4cf4 <patchGenfskRfe+0x5d0>
    4cf0:	3a0e0300 	bcc	3858f8 <__ccfg+0x365950>
    4cf4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4cf8:	3f13490b 	svccc	0x0013490b
    4cfc:	00193c19 	andseq	r3, r9, r9, lsl ip
    4d00:	00131000 	andseq	r1, r3, r0
    4d04:	193c0e03 	ldmdbne	ip!, {r0, r1, r9, sl, fp}
    4d08:	15110000 	ldrne	r0, [r1, #-0]
    4d0c:	00192700 	andseq	r2, r9, r0, lsl #14
    4d10:	00171200 	andseq	r1, r7, r0, lsl #4
    4d14:	193c0e03 	ldmdbne	ip!, {r0, r1, r9, sl, fp}
    4d18:	13130000 	tstne	r3, #0
    4d1c:	0b0e0301 	bleq	385928 <__ccfg+0x365980>
    4d20:	3b0b3a0b 	blcc	2d3554 <__ccfg+0x2b35ac>
    4d24:	010b3905 	tsteq	fp, r5, lsl #18
    4d28:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
    4d2c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    4d30:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4d34:	13490b39 	movtne	r0, #39737	; 0x9b39
    4d38:	00000b38 	andeq	r0, r0, r8, lsr fp
    4d3c:	49002115 	stmdbmi	r0, {r0, r2, r4, r8, sp}
    4d40:	000b2f13 	andeq	r2, fp, r3, lsl pc
    4d44:	01041600 	tsteq	r4, r0, lsl #12
    4d48:	0b3e0e03 	bleq	f8855c <__ccfg+0xf685b4>
    4d4c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    4d50:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4d54:	13010b39 	movwne	r0, #6969	; 0x1b39
    4d58:	0d170000 	ldceq	0, cr0, [r7, #-0]
    4d5c:	3a080300 	bcc	205964 <__ccfg+0x1e59bc>
    4d60:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4d64:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    4d68:	1800000b 	stmdane	r0, {r0, r1, r3}
    4d6c:	0b0b0117 	bleq	2c51d0 <__ccfg+0x2a5228>
    4d70:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4d74:	13010b39 	movwne	r0, #6969	; 0x1b39
    4d78:	0d190000 	ldceq	0, cr0, [r9, #-0]
    4d7c:	3a080300 	bcc	205984 <__ccfg+0x1e59dc>
    4d80:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4d84:	0013490b 	andseq	r4, r3, fp, lsl #18
    4d88:	00161a00 	andseq	r1, r6, r0, lsl #20
    4d8c:	0b3a0e03 	bleq	e885a0 <__ccfg+0xe685f8>
    4d90:	0b39053b 	bleq	e46284 <__ccfg+0xe262dc>
    4d94:	00001349 	andeq	r1, r0, r9, asr #6
    4d98:	3f012e1b 	svccc	0x00012e1b
    4d9c:	3a0e0319 	bcc	385a08 <__ccfg+0x365a60>
    4da0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4da4:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    4da8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    4dac:	97184006 	ldrls	r4, [r8, -r6]
    4db0:	00001942 	andeq	r1, r0, r2, asr #18
    4db4:	0300051c 	movweq	r0, #1308	; 0x51c
    4db8:	3b0b3a08 	blcc	2d35e0 <__ccfg+0x2b3638>
    4dbc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    4dc0:	b7170213 			; <UNDEFINED> instruction: 0xb7170213
    4dc4:	00001742 	andeq	r1, r0, r2, asr #14
    4dc8:	0300341d 	movweq	r3, #1053	; 0x41d
    4dcc:	3b0b3a08 	blcc	2d35f4 <__ccfg+0x2b364c>
    4dd0:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    4dd4:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    4dd8:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    4ddc:	341f0000 	ldrcc	r0, [pc], #-0	; 4de4 <patchImageGenfsk+0xc>
    4de0:	3a0e0300 	bcc	3859e8 <__ccfg+0x365a40>
    4de4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4de8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    4dec:	1742b717 	smlaldne	fp, r2, r7, r7
    4df0:	01000000 	mrseq	r0, (UNDEF: 0)
    4df4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    4df8:	0e030b13 	vmoveq.32	d3[0], r0
    4dfc:	01110e1b 	tsteq	r1, fp, lsl lr
    4e00:	17100612 			; <UNDEFINED> instruction: 0x17100612
    4e04:	24020000 	strcs	r0, [r2], #-0
    4e08:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    4e0c:	000e030b 	andeq	r0, lr, fp, lsl #6
    4e10:	00160300 	andseq	r0, r6, r0, lsl #6
    4e14:	0b3a0e03 	bleq	e88628 <__ccfg+0xe68680>
    4e18:	0b390b3b 	bleq	e47b0c <__ccfg+0xe27b64>
    4e1c:	00001349 	andeq	r1, r0, r9, asr #6
    4e20:	0b002404 	bleq	de38 <__exidx_end+0x8d90>
    4e24:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    4e28:	05000008 	streq	r0, [r0, #-8]
    4e2c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    4e30:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4e34:	13490b39 	movtne	r0, #39737	; 0x9b39
    4e38:	17060000 	strne	r0, [r6, -r0]
    4e3c:	3a0b0b01 	bcc	2c7a48 <__ccfg+0x2a7aa0>
    4e40:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4e44:	0013010b 	andseq	r0, r3, fp, lsl #2
    4e48:	000d0700 	andeq	r0, sp, r0, lsl #14
    4e4c:	0b3a0e03 	bleq	e88660 <__ccfg+0xe686b8>
    4e50:	0b390b3b 	bleq	e47b44 <__ccfg+0xe27b9c>
    4e54:	00001349 	andeq	r1, r0, r9, asr #6
    4e58:	49010108 	stmdbmi	r1, {r3, r8}
    4e5c:	00130113 	andseq	r0, r3, r3, lsl r1
    4e60:	00210900 	eoreq	r0, r1, r0, lsl #18
    4e64:	0b2f1349 	bleq	bc9b90 <__ccfg+0xba9be8>
    4e68:	130a0000 	movwne	r0, #40960	; 0xa000
    4e6c:	3a0b0b01 	bcc	2c7a78 <__ccfg+0x2a7ad0>
    4e70:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4e74:	0013010b 	andseq	r0, r3, fp, lsl #2
    4e78:	000d0b00 	andeq	r0, sp, r0, lsl #22
    4e7c:	0b3a0e03 	bleq	e88690 <__ccfg+0xe686e8>
    4e80:	0b390b3b 	bleq	e47b74 <__ccfg+0xe27bcc>
    4e84:	0b381349 	bleq	e09bb0 <__ccfg+0xde9c08>
    4e88:	0f0c0000 	svceq	0x000c0000
    4e8c:	000b0b00 	andeq	r0, fp, r0, lsl #22
    4e90:	01130d00 	tsteq	r3, r0, lsl #26
    4e94:	0b0b0e03 	bleq	2c86a8 <__ccfg+0x2a8700>
    4e98:	0b3b0b3a 	bleq	ec7b88 <__ccfg+0xea7be0>
    4e9c:	13010b39 	movwne	r0, #6969	; 0x1b39
    4ea0:	0f0e0000 	svceq	0x000e0000
    4ea4:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    4ea8:	0f000013 	svceq	0x00000013
    4eac:	13490026 	movtne	r0, #36902	; 0x9026
    4eb0:	0d100000 	ldceq	0, cr0, [r0, #-0]
    4eb4:	3a080300 	bcc	205abc <__ccfg+0x1e5b14>
    4eb8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4ebc:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    4ec0:	1100000b 	tstne	r0, fp
    4ec4:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    4ec8:	0b3a050b 	bleq	e862fc <__ccfg+0xe66354>
    4ecc:	0b390b3b 	bleq	e47bc0 <__ccfg+0xe27c18>
    4ed0:	00001301 	andeq	r1, r0, r1, lsl #6
    4ed4:	03000d12 	movweq	r0, #3346	; 0xd12
    4ed8:	3b0b3a0e 	blcc	2d3718 <__ccfg+0x2b3770>
    4edc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    4ee0:	00053813 	andeq	r3, r5, r3, lsl r8
    4ee4:	00151300 	andseq	r1, r5, r0, lsl #6
    4ee8:	00001927 	andeq	r1, r0, r7, lsr #18
    4eec:	27011514 	smladcs	r1, r4, r5, r1
    4ef0:	01134919 	tsteq	r3, r9, lsl r9
    4ef4:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    4ef8:	13490005 	movtne	r0, #36869	; 0x9005
    4efc:	13160000 	tstne	r6, #0
    4f00:	0b0e0301 	bleq	385b0c <__ccfg+0x365b64>
    4f04:	3b0b3a05 	blcc	2d3720 <__ccfg+0x2b3778>
    4f08:	010b3905 	tsteq	fp, r5, lsl #18
    4f0c:	17000013 	smladne	r0, r3, r0, r0
    4f10:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    4f14:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4f18:	13490b39 	movtne	r0, #39737	; 0x9b39
    4f1c:	00000b38 	andeq	r0, r0, r8, lsr fp
    4f20:	03000d18 	movweq	r0, #3352	; 0xd18
    4f24:	3b0b3a0e 	blcc	2d3764 <__ccfg+0x2b37bc>
    4f28:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    4f2c:	00053813 	andeq	r3, r5, r3, lsl r8
    4f30:	01131900 	tsteq	r3, r0, lsl #18
    4f34:	0b0b0e03 	bleq	2c8748 <__ccfg+0x2a87a0>
    4f38:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4f3c:	13010b39 	movwne	r0, #6969	; 0x1b39
    4f40:	131a0000 	tstne	sl, #0
    4f44:	3a0b0b01 	bcc	2c7b50 <__ccfg+0x2a7ba8>
    4f48:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4f4c:	0013010b 	andseq	r0, r3, fp, lsl #2
    4f50:	01171b00 	tsteq	r7, r0, lsl #22
    4f54:	0b3a0b0b 	bleq	e87b88 <__ccfg+0xe67be0>
    4f58:	0b39053b 	bleq	e4644c <__ccfg+0xe264a4>
    4f5c:	00001301 	andeq	r1, r0, r1, lsl #6
    4f60:	03000d1c 	movweq	r0, #3356	; 0xd1c
    4f64:	3b0b3a0e 	blcc	2d37a4 <__ccfg+0x2b37fc>
    4f68:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    4f6c:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    4f70:	0e030013 	mcreq	0, 0, r0, cr3, cr3, {0}
    4f74:	0000193c 	andeq	r1, r0, ip, lsr r9
    4f78:	2701151e 	smladcs	r1, lr, r5, r1
    4f7c:	00130119 	andseq	r0, r3, r9, lsl r1
    4f80:	00341f00 	eorseq	r1, r4, r0, lsl #30
    4f84:	0b3a0e03 	bleq	e88798 <__ccfg+0xe687f0>
    4f88:	0b39053b 	bleq	e4647c <__ccfg+0xe264d4>
    4f8c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    4f90:	0000193c 	andeq	r1, r0, ip, lsr r9
    4f94:	03003420 	movweq	r3, #1056	; 0x420
    4f98:	3b0b3a0e 	blcc	2d37d8 <__ccfg+0x2b3830>
    4f9c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    4fa0:	3c193f13 	ldccc	15, cr3, [r9], {19}
    4fa4:	21000019 	tstcs	r0, r9, lsl r0
    4fa8:	00000021 	andeq	r0, r0, r1, lsr #32
    4fac:	3f012e22 	svccc	0x00012e22
    4fb0:	3a0e0319 	bcc	385c1c <__ccfg+0x365c74>
    4fb4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4fb8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    4fbc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    4fc0:	97184006 	ldrls	r4, [r8, -r6]
    4fc4:	13011942 	movwne	r1, #6466	; 0x1942
    4fc8:	05230000 	streq	r0, [r3, #-0]!
    4fcc:	3a0e0300 	bcc	385bd4 <__ccfg+0x365c2c>
    4fd0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4fd4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    4fd8:	1742b717 	smlaldne	fp, r2, r7, r7
    4fdc:	05240000 	streq	r0, [r4, #-0]!
    4fe0:	3a0e0300 	bcc	385be8 <__ccfg+0x365c40>
    4fe4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4fe8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    4fec:	00000018 	andeq	r0, r0, r8, lsl r0

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	00000298 	muleq	r0, r8, r2
       4:	000002dc 	ldrdeq	r0, [r0], -ip
       8:	06500001 	ldrbeq	r0, [r0], -r1
       c:	09000005 	stmdbeq	r0, {r0, r2}
}
      10:	01000005 	tsteq	r0, r5
      14:	00005000 	andeq	r5, r0, r0
      18:	00000000 	andeq	r0, r0, r0
      1c:	03b60000 			; <UNDEFINED> instruction: 0x03b60000
      20:	03be0000 			; <UNDEFINED> instruction: 0x03be0000
      24:	00050000 	andeq	r0, r5, r0
      28:	00063003 	andeq	r3, r6, r3
      2c:	00000020 	andeq	r0, r0, r0, lsr #32
      30:	00000000 	andeq	r0, r0, r0
      34:	00042000 	andeq	r2, r4, r0
      38:	00042800 	andeq	r2, r4, r0, lsl #16
      3c:	03000500 	movweq	r0, #1280	; 0x500
			i = k;
      40:	20000544 	andcs	r0, r0, r4, asr #10
	...
}
      4c:	0000048e 	andeq	r0, r0, lr, lsl #9
      50:	00000496 	muleq	r0, r6, r4
      54:	44030005 	strmi	r0, [r3], #-5
		release;
      58:	00200005 	eoreq	r0, r0, r5
      5c:	00000000 	andeq	r0, r0, r0
		b->length - b->u.pointers.head - b->u.pointers.tail;
      60:	bc000000 	stclt	0, cr0, [r0], {-0}
	b->u.pointers.tail =
      64:	d9000001 	stmdble	r0, {r0}
}
      68:	01000001 	tsteq	r0, r1
		return NULL;
      6c:	02685000 	rsbeq	r5, r8, #0
      70:	026f0000 	rsbeq	r0, pc, #0
      74:	00010000 	andeq	r0, r1, r0
      78:	00000050 	andeq	r0, r0, r0, asr r0
	...
      88:	53000100 	movwpl	r0, #256	; 0x100
	...
      94:	00530001 	subseq	r0, r3, r1
      98:	00000000 	andeq	r0, r0, r0
      9c:	4c000000 	stcmi	0, cr0, [r0], {-0}
      a0:	5d000001 	stcpl	0, cr0, [r0, #-4]
      a4:	01000001 	tsteq	r0, r1
      a8:	015e5000 	cmpeq	lr, r0
      ac:	01660000 	cmneq	r6, r0
      b0:	00010000 	andeq	r0, r1, r0
      b4:	00000050 	andeq	r0, r0, r0, asr r0
      b8:	00000000 	andeq	r0, r0, r0
      bc:	00016000 	andeq	r6, r1, r0
      c0:	00016200 	andeq	r6, r1, r0, lsl #4
      c4:	73000500 	movwvc	r0, #1280	; 0x500
char * assembleMessage(message * messagePtr) {
      c8:	08230600 	stmdaeq	r3!, {r9, sl}
	...
      d4:	0000016e 	andeq	r0, r0, lr, ror #2
      d8:	00000170 	andeq	r0, r0, r0, ror r1
        p = (char*)umalloc(6);
      dc:	70500001 	subsvc	r0, r0, r1
      e0:	92000001 	andls	r0, r0, #1
    p[0] = messagePtr->senderGroupId;
      e4:	01000001 	tsteq	r0, r1
      e8:	00005600 	andeq	r5, r0, r0, lsl #12
    p[2] = messagePtr->messageType;
      ec:	00000000 	andeq	r0, r0, r0
    p[3] = messagePtr->requestNumber;
      f0:	01820000 	orreq	r0, r2, r0
    p[4] = messagePtr->senderId;
      f4:	01880000 	orreq	r0, r8, r0
    p[5] = messagePtr->destinationId;
      f8:	00010000 	andeq	r0, r1, r0
        p = (char*)umalloc(8);
      fc:	00018850 	andeq	r8, r1, r0, asr r8
     100:	00019200 	andeq	r9, r1, r0, lsl #4
     104:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
        p = (char*)umalloc(26);
     110:	00000188 	andeq	r0, r0, r8, lsl #3
        strcpy(p + 6, messagePtr->messageRecord);
     114:	0000018b 	andeq	r0, r0, fp, lsl #3
     118:	00500001 	subseq	r0, r0, r1
        strcpy(p + 8, messagePtr->messageRecord);
     11c:	00000000 	andeq	r0, r0, r0
        p = (char*)umalloc(28);
     120:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
     124:	3e000001 	cdpcc	0, 0, cr0, cr0, cr1, {0}
     128:	01000001 	tsteq	r0, r1
        p[7] = 0x00;
     12c:	00005000 	andeq	r5, r0, r0
     130:	00000000 	andeq	r0, r0, r0
        strcpy(p + 8, messagePtr->messageRecord);
     134:	01420000 	mrseq	r0, (UNDEF: 66)
    switch(messageType) 
     138:	01440000 	mrseq	r0, (UNDEF: 68)
int getPacketSize(char messageType) {
     13c:	00010000 	andeq	r0, r1, r0
     140:	00000050 	andeq	r0, r0, r0, asr r0
}
     144:	00000000 	andeq	r0, r0, r0
     148:	0000c800 	andeq	ip, r0, r0, lsl #16
fsm transmitter (message * messagePtr) {
     14c:	0000de00 	andeq	sp, r0, r0, lsl #28
     150:	50000100 	andpl	r0, r0, r0, lsl #2
     154:	000000de 	ldrdeq	r0, [r0], -lr
}
     158:	000000fc 	strdeq	r0, [r0], -ip
     15c:	fc550001 	mrrc2	0, 0, r0, r5, cr1
fsm transmitter (message * messagePtr) {
     160:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
        char * assembledMessage = assembleMessage(messagePtr);
     164:	01000000 	mrseq	r0, (UNDEF: 0)
     168:	00fe5000 	rscseq	r5, lr, r0
     16c:	010e0000 	mrseq	r0, (UNDEF: 14)
        spkt = tcv_wnp (Transmit_Message, sfd,  getPacketSize(messagePtr->messageType));
     170:	00010000 	andeq	r0, r1, r0
     174:	00010e55 	andeq	r0, r1, r5, asr lr
     178:	00011000 	andeq	r1, r1, r0
     17c:	50000100 	andpl	r0, r0, r0, lsl #2
     180:	00000110 	andeq	r0, r0, r0, lsl r1
        spkt [0] = 0;
     184:	00000120 	andeq	r0, r0, r0, lsr #2
        strcpy(p, assembledMessage);
     188:	20550001 	subscs	r0, r5, r1
        tcv_endp (spkt);
     18c:	22000001 	andcs	r0, r0, #1
     190:	01000001 	tsteq	r0, r1
}
     194:	01225000 			; <UNDEFINED> instruction: 0x01225000
        finish;
     198:	01360000 	teqeq	r6, r0
     19c:	00010000 	andeq	r0, r1, r0
     1a0:	00000055 	andeq	r0, r0, r5, asr r0
char randomNumber() {
     1a4:	00000000 	andeq	r0, r0, r0
   srand((unsigned) time(&t));
     1a8:	0000e400 	andeq	lr, r0, r0, lsl #8
     1ac:	0000fc00 	andeq	pc, r0, r0, lsl #24
   return (char)rand();
     1b0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
}
     1b4:	00000106 	andeq	r0, r0, r6, lsl #2
     1b8:	0000010e 	andeq	r0, r0, lr, lsl #2
fsm find {
     1bc:	18500001 	ldmdane	r0, {r0}^
     1c0:	1a000001 	bne	1cc <find+0x10>
     1c4:	01000001 	tsteq	r0, r1
     1c8:	011a5000 	tsteq	sl, r0
        i = 0;
     1cc:	01200000 			; <UNDEFINED> instruction: 0x01200000
     1d0:	00010000 	andeq	r0, r1, r0
        sendCount = 0;
     1d4:	00012a54 	andeq	r2, r1, r4, asr sl
        currentRequestNumber = randomNumber();
     1d8:	00013400 	andeq	r3, r1, r0, lsl #8
        messagePtr -> senderGroupId = groupId;
     1dc:	50000100 	andpl	r0, r0, r0, lsl #2
     1e0:	00000134 	andeq	r0, r0, r4, lsr r1
     1e4:	00000136 	andeq	r0, r0, r6, lsr r1
     1e8:	00540001 	subseq	r0, r4, r1
	...
        messagePtr -> senderId = nodeId;
     1f8:	01000000 	mrseq	r0, (UNDEF: 0)
     1fc:	00005000 	andeq	r5, r0, r0
	...
        call transmitter(messagePtr, Wait);
     20c:	00010000 	andeq	r0, r1, r0
     210:	00000050 	andeq	r0, r0, r0, asr r0
     214:	00000000 	andeq	r0, r0, r0
     218:	000da400 	andeq	sl, sp, r0, lsl #8
     21c:	000da400 	andeq	sl, sp, r0, lsl #8
     220:	50000100 	andpl	r0, r0, r0, lsl #2
	...
        delay(3*1024, Send_Discovery_Request);
     22c:	00000c30 	andeq	r0, r0, r0, lsr ip
     230:	00000c36 	andeq	r0, r0, r6, lsr ip
        ser_outf(Display_Neighbours, "Neighbours:");
     234:	66560001 	ldrbvs	r0, [r6], -r1
     238:	6a00000c 	bvs	270 <find+0xb4>
        if (neighbours[i] == 1) {
     23c:	0100000c 	tsteq	r0, ip
     240:	00005600 	andeq	r5, r0, r0, lsl #12
     244:	00000000 	andeq	r0, r0, r0
            ser_outf(Display_Neighbour, " %d", i);
     248:	0b1a0000 	bleq	680250 <__ccfg+0x6602a8>
     24c:	0b1e0000 	bleq	780254 <__ccfg+0x7602ac>
        i++;
     250:	00010000 	andeq	r0, r1, r0
     254:	000b3452 	andeq	r3, fp, r2, asr r4
            proceed Display_Neighbour;
     258:	000b4800 	andeq	r4, fp, r0, lsl #16
     25c:	52000100 	andpl	r0, r0, #0, 2
	...
}
     268:	00000b22 	andeq	r0, r0, r2, lsr #22
     26c:	00000b28 	andeq	r0, r0, r8, lsr #22
     270:	00530001 	subseq	r0, r3, r1
     274:	00000000 	andeq	r0, r0, r0
     278:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
     27c:	e200000a 	and	r0, r0, #10
     280:	0100000a 	tsteq	r0, sl
     284:	00005300 	andeq	r5, r0, r0, lsl #6
     288:	00000000 	andeq	r0, r0, r0
     28c:	0ad80000 	beq	ff600294 <_estack+0xdf5fb294>
     290:	0ade0000 	beq	ff780298 <_estack+0xdf77b298>
     294:	00010000 	andeq	r0, r1, r0
fsm root {
     298:	00000053 	andeq	r0, r0, r3, asr r0
     29c:	00000000 	andeq	r0, r0, r0
     2a0:	000b6e00 	andeq	r6, fp, r0, lsl #28
     2a4:	000b7800 	andeq	r7, fp, r0, lsl #16
     2a8:	53000100 	movwpl	r0, #256	; 0x100
	...
     2b4:	00000b60 	andeq	r0, r0, r0, ror #22
     2b8:	00000b8a 	andeq	r0, r0, sl, lsl #23
     2bc:	00520001 	subseq	r0, r2, r1
     2c0:	00000000 	andeq	r0, r0, r0
     2c4:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
     2c8:	b800000b 	stmdalt	r0, {r0, r1, r3}
        recordCount = 0;
     2cc:	0100000b 	tsteq	r0, fp
        nodeId = 1;
     2d0:	00005300 	andeq	r5, r0, r0, lsl #6
     2d4:	00000000 	andeq	r0, r0, r0
        groupId = 1;
     2d8:	0ba00000 	bleq	fe8002e0 <_estack+0xde7fb2e0>
     2dc:	0bd60000 	bleq	ff5802e4 <_estack+0xdf57b2e4>
        messagePtr = (message *) umalloc(sizeof(message));
     2e0:	00010000 	andeq	r0, r1, r0
        phys_cc1350(0, MAX_PACKET_LENGTH);
     2e4:	00000050 	andeq	r0, r0, r0, asr r0
     2e8:	00000000 	andeq	r0, r0, r0
     2ec:	000a4600 	andeq	r4, sl, r0, lsl #12
        tcv_plug(0, &plug_null);
     2f0:	000a5000 	andeq	r5, sl, r0
     2f4:	53000100 	movwpl	r0, #256	; 0x100
	...
        sfd = tcv_open(WNONE, 0, 0);
     300:	00000a38 	andeq	r0, r0, r8, lsr sl
		tcv_control(sfd, PHYSOPT_ON, NULL);
     304:	00000a62 	andeq	r0, r0, r2, ror #20
        sfd = tcv_open(WNONE, 0, 0);
     308:	00520001 	subseq	r0, r2, r1
		tcv_control(sfd, PHYSOPT_ON, NULL);
     30c:	00000000 	andeq	r0, r0, r0
		if (sfd < 0) {
     310:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
			diag("Cannot open tcv interface");
     314:	a200000a 	andge	r0, r0, #10
     318:	0100000a 	tsteq	r0, sl
			halt();
     31c:	00005300 	andeq	r5, r0, r0, lsl #6
        currentProtocol = IDLE;
     320:	00000000 	andeq	r0, r0, r0
     324:	0a8a0000 	beq	fe28032c <_estack+0xde27b32c>
        ser_outf(Menu_Header, "\r\nGroup %d Device #%d (%d/%d records)\r\n", groupId, nodeId, recordCount, MAX_RECORDS);
     328:	0ab20000 	beq	fec80330 <_estack+0xdec7b330>
     32c:	00010000 	andeq	r0, r1, r0
     330:	00000052 	andeq	r0, r0, r2, asr r0
     334:	00000000 	andeq	r0, r0, r0
     338:	00056c00 	andeq	r6, r5, r0, lsl #24
     33c:	00057000 	andeq	r7, r5, r0
        ser_outf(Options, menu);
     340:	50000100 	andpl	r0, r0, r0, lsl #2
     344:	00000570 	andeq	r0, r0, r0, ror r5
        ser_inf(Get_Choice, "%c", &choice);
     348:	00000573 	andeq	r0, r0, r3, ror r5
     34c:	00510001 	subseq	r0, r1, r1
     350:	00000000 	andeq	r0, r0, r0
        switch (choice)
     354:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
     358:	fa000008 	blx	380 <root+0xe8>
     35c:	01000008 	tsteq	r0, r8
     360:	00005000 	andeq	r5, r0, r0
     364:	00000000 	andeq	r0, r0, r0
     368:	08f80000 	ldmeq	r8!, {}^	; <UNPREDICTABLE>
     36c:	090e0000 	stmdbeq	lr, {}	; <UNPREDICTABLE>
     370:	00010000 	andeq	r0, r1, r0
     374:	00090e51 	andeq	r0, r9, r1, asr lr
     378:	00091200 	andeq	r1, r9, r0, lsl #4
     37c:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
     380:	00000918 	andeq	r0, r0, r8, lsl r9
        proceed Menu_Header;
     384:	0000092e 	andeq	r0, r0, lr, lsr #18
     388:	2e550001 	cdpcs	0, 5, cr0, cr5, cr1, {0}
        ser_outf(Set_Group_ID, "New Group ID: ");
     38c:	3c000009 	stccc	0, cr0, [r0], {9}
     390:	01000009 	tsteq	r0, r9
        ser_inf(Get_Group_ID, "%d", &groupId);
     394:	093c5100 	ldmdbeq	ip!, {r8, ip, lr}
     398:	096a0000 	stmdbeq	sl!, {}^	; <UNPREDICTABLE>
        proceed Menu_Header;
     39c:	00010000 	andeq	r0, r1, r0
     3a0:	00097055 	andeq	r7, r9, r5, asr r0
        ser_outf(Set_Node_ID, "New node ID (1-25):");
     3a4:	00099800 	andeq	r9, r9, r0, lsl #16
     3a8:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
        ser_inf(Get_Node_ID, "%d", &nodeId);
     3ac:	00000998 	muleq	r0, r8, r9
     3b0:	000009a6 	andeq	r0, r0, r6, lsr #19
     3b4:	a6510001 	ldrbge	r0, [r1], -r1
    if (node < 1 || node > 25) {
     3b8:	b0000009 	andlt	r0, r0, r9
     3bc:	01000009 	tsteq	r0, r9
            proceed Set_Node_ID;
     3c0:	09b05500 	ldmibeq	r0!, {r8, sl, ip, lr}
        proceed Menu_Header;
     3c4:	09bb0000 	ldmibeq	fp!, {}	; <UNPREDICTABLE>
     3c8:	00010000 	andeq	r0, r1, r0
        call find(Menu_Header);
     3cc:	0009bb51 	andeq	fp, r9, r1, asr fp
     3d0:	0009be00 	andeq	fp, r9, r0, lsl #28
     3d4:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
     3d8:	000009be 			; <UNDEFINED> instruction: 0x000009be
     3dc:	000009c4 	andeq	r0, r0, r4, asr #19
            proceed Set_Node_ID;
     3e0:	c4510001 	ldrbgt	r0, [r1], #-1
            break;
     3e4:	d6000009 	strle	r0, [r0], -r9
            proceed Set_Node_ID;
     3e8:	01000009 	tsteq	r0, r9
            proceed Find_Neighbours;
     3ec:	09d65500 	ldmibeq	r6, {r8, sl, ip, lr}^
            proceed Create_Record;
     3f0:	09e80000 	stmibeq	r8!, {}^	; <UNPREDICTABLE>
            proceed Delete_Record;
     3f4:	00010000 	andeq	r0, r1, r0
            proceed Retrieve_Record;
     3f8:	0009e851 	andeq	lr, r9, r1, asr r8
            diag("Reset Local Storage");
     3fc:	000a0800 	andeq	r0, sl, r0, lsl #16
            break;
     400:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
        ser_outf(Create_Record, "Receiver node ID (1-25):");
     40c:	000008f8 	strdeq	r0, [r0], -r8
     410:	0000090e 	andeq	r0, r0, lr, lsl #18
        ser_inf(Get_Receiver_Node, "%d", &receiverId);
     414:	0e520001 	cdpeq	0, 5, cr0, cr2, cr1, {0}
     418:	14000009 	strne	r0, [r0], #-9
     41c:	01000009 	tsteq	r0, r9
    if (node < 1 || node > 25) {
     420:	09185600 	ldmdbeq	r8, {r9, sl, ip, lr}
     424:	09280000 	stmdbeq	r8!, {}	; <UNPREDICTABLE>
            proceed Create_Record;
     428:	00010000 	andeq	r0, r1, r0
     42c:	00092e56 	andeq	r2, r9, r6, asr lr
        ser_in(Get_Message, messagePtr->messageRecord, RECORD_LENGTH);
     430:	00093c00 	andeq	r3, r9, r0, lsl #24
     434:	52000100 	andpl	r0, r0, #0, 2
     438:	0000093c 	andeq	r0, r0, ip, lsr r9
        if(strlen(messagePtr->messageRecord) >= RECORD_LENGTH) {
     43c:	0000096c 	andeq	r0, r0, ip, ror #18
     440:	70560001 	subsvc	r0, r6, r1
     444:	98000009 	stmdals	r0, {r0, r3}
            messagePtr->messageRecord[RECORD_LENGTH - 1] = '/0';
     448:	01000009 	tsteq	r0, r9
        proceed Transmit_Message;
     44c:	09985600 	ldmibeq	r8, {r9, sl, ip, lr}
            messagePtr->messageRecord[RECORD_LENGTH - 1] = '/0';
     450:	09a60000 	stmibeq	r6!, {}	; <UNPREDICTABLE>
        proceed Transmit_Message;
     454:	00010000 	andeq	r0, r1, r0
        currentProtocol = DELETE_RECORD;
     458:	0009a652 	andeq	sl, r9, r2, asr r6
        ser_outf(Retrieve_Record, "Delete Record from Neighbour:\n\r");
     45c:	0009b000 	andeq	fp, r9, r0
        currentProtocol = DELETE_RECORD;
     460:	56000100 	strpl	r0, [r0], -r0, lsl #2
        ser_outf(Retrieve_Record, "Delete Record from Neighbour:\n\r");
     464:	000009b0 			; <UNDEFINED> instruction: 0x000009b0
        proceed Get_Receiving_Node;
     468:	000009bb 			; <UNDEFINED> instruction: 0x000009bb
        currentProtocol = RETRIEVE_RECORD;
     46c:	be520001 	cdplt	0, 5, cr0, cr2, cr1, {0}
        ser_outf(Retrieve_Record, "Retrieve Record from Neighbour:\n\r");
     470:	c9000009 	stmdbgt	r0, {r0, r3}
        currentProtocol = RETRIEVE_RECORD;
     474:	01000009 	tsteq	r0, r9
        ser_outf(Retrieve_Record, "Retrieve Record from Neighbour:\n\r");
     478:	09c95200 	stmibeq	r9, {r9, ip, lr}^
        ser_outf(Prompt_Recieving_Node, "Neighbour node ID (1-25):");
     47c:	09d60000 	ldmibeq	r6, {}^	; <UNPREDICTABLE>
     480:	00010000 	andeq	r0, r1, r0
        ser_inf(Get_Receiving_Node, "%d", &receiverId);
     484:	0009d654 	andeq	sp, r9, r4, asr r6
     488:	000a0800 	andeq	r0, sl, r0, lsl #16
     48c:	52000100 	andpl	r0, r0, #0, 2
	...
            proceed Prompt_Recieving_Node;
     498:	0000086c 	andeq	r0, r0, ip, ror #16
        ser_outf(Prompt_Record_Index, "Record index:");
     49c:	0000087a 	andeq	r0, r0, sl, ror r8
     4a0:	00500001 	subseq	r0, r0, r1
        char desiredRecordIndex = -1;
     4a4:	00000000 	andeq	r0, r0, r0
        ser_inf(Get_Record_Index, "%d", &desiredRecordIndex);
     4a8:	6c000000 	stcvs	0, cr0, [r0], {-0}
     4ac:	7b000008 	blvc	4d4 <root+0x23c>
        char desiredRecordIndex = -1;
     4b0:	01000008 	tsteq	r0, r8
        ser_inf(Get_Record_Index, "%d", &desiredRecordIndex);
     4b4:	00005100 	andeq	r5, r0, r0, lsl #2
        messagePtr->recordIndex = desiredRecordIndex;
     4b8:	00000000 	andeq	r0, r0, r0
     4bc:	081c0000 	ldmdaeq	ip, {}	; <UNPREDICTABLE>
     4c0:	08330000 	ldmdaeq	r3!, {}	; <UNPREDICTABLE>
        proceed Transmit_Message;
     4c4:	00010000 	andeq	r0, r1, r0
        messagePtr -> senderGroupId = groupId;
     4c8:	00085650 	andeq	r5, r8, r0, asr r6
     4cc:	00086c00 	andeq	r6, r8, r0, lsl #24
     4d0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
        messagePtr -> requestNumber = randomNumber();
     4dc:	00000712 	andeq	r0, r0, r2, lsl r7
        messagePtr -> senderId = nodeId;
     4e0:	00000722 	andeq	r0, r0, r2, lsr #14
     4e4:	22520001 	subscs	r0, r2, #1
        call transmitter(messagePtr, Menu_Header);
     4e8:	2a000007 	bcs	50c <root+0x274>
        messagePtr -> destinationId = receiverId;
     4ec:	05000007 	streq	r0, [r0, #-7]
     4f0:	20040c00 	andcs	r0, r4, r0, lsl #24
        call transmitter(messagePtr, Menu_Header);
     4f4:	07c44009 	strbeq	r4, [r4, r9]
     4f8:	07c80000 	strbeq	r0, [r8, r0]
     4fc:	00050000 	andeq	r0, r5, r0
     500:	0920040c 	stmdbeq	r0!, {r2, r3, sl}
     504:	0007c840 	andeq	ip, r7, r0, asr #16
     508:	0007ca00 	andeq	ip, r7, r0, lsl #20
     50c:	52000100 	andpl	r0, r0, #0, 2
     510:	000007ca 	andeq	r0, r0, sl, asr #15
     514:	000007cc 	andeq	r0, r0, ip, asr #15
     518:	040c0005 	streq	r0, [ip], #-5
     51c:	00400920 	subeq	r0, r0, r0, lsr #18
     520:	00000000 	andeq	r0, r0, r0
     524:	2c000000 	stccs	0, cr0, [r0], {-0}
     528:	36000007 	strcc	r0, [r0], -r7
     52c:	01000007 	tsteq	r0, r7
     530:	073a5200 	ldreq	r5, [sl, -r0, lsl #4]!
     534:	07440000 	strbeq	r0, [r4, -r0]
     538:	00010000 	andeq	r0, r1, r0
     53c:	00074852 	andeq	r4, r7, r2, asr r8
     540:	00075200 	andeq	r5, r7, r0, lsl #4
     544:	52000100 	andpl	r0, r0, #0, 2
     548:	00000756 	andeq	r0, r0, r6, asr r7
     54c:	00000762 	andeq	r0, r0, r2, ror #14
     550:	ee520001 	cdp	0, 5, cr0, cr2, cr1, {0}
     554:	f2000007 	vhadd.s8	d0, d0, d7
     558:	01000007 	tsteq	r0, r7
     55c:	00005200 	andeq	r5, r0, r0, lsl #4
     560:	00000000 	andeq	r0, r0, r0
     564:	06b20000 	ldrteq	r0, [r2], r0
     568:	06c40000 	strbeq	r0, [r4], r0
static void devinit_uart (int devnum) {
     56c:	00010000 	andeq	r0, r1, r0
	adddevfunc (ioreq_uart_a, devnum);
     570:	00000054 	andeq	r0, r0, r4, asr r0
     574:	00000000 	andeq	r0, r0, r0
void udelay (volatile word n) {
     578:	00064c00 	andeq	r4, r6, r0, lsl #24
     57c:	00065400 	andeq	r5, r6, r0, lsl #8
	while (n) {
     580:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	while (n--);
     58c:	0000064c 	andeq	r0, r0, ip, asr #12
     590:	00000652 	andeq	r0, r0, r2, asr r6
     594:	52510001 	subspl	r0, r1, #1
		n--;
     598:	57000006 	strpl	r0, [r0, -r6]
     59c:	01000006 	tsteq	r0, r6
     5a0:	00005200 	andeq	r5, r0, r0, lsl #4
	...
	while (n) {
     5b0:	00010000 	andeq	r0, r1, r0
}
     5b4:	00000050 	andeq	r0, r0, r0, asr r0
	...
		n--;
     5c4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
void __pi_ondomain (lword d) {
     5d0:	00510001 	subseq	r0, r1, r1
	...
			__pi_systat.effpdm = 1;
     5e0:	01000000 	mrseq	r0, (UNDEF: 0)
	PRCMPowerDomainOn (d);
     5e4:	00005200 	andeq	r5, r0, r0, lsl #4
     5e8:	00000000 	andeq	r0, r0, r0
     5ec:	00010000 	andeq	r0, r1, r0
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     5f0:	00000054 	andeq	r0, r0, r4, asr r0
     5f4:	00000000 	andeq	r0, r0, r0
     5f8:	00060c00 	andeq	r0, r6, r0, lsl #24
	__pi_systat.ondmns |= d;
     5fc:	00061700 	andeq	r1, r6, r0, lsl #14
     600:	50000100 	andpl	r0, r0, r0, lsl #2
}
     604:	00000617 	andeq	r0, r0, r7, lsl r6
     608:	00000640 	andeq	r0, r0, r0, asr #12
void __pi_offdomain (lword d) {
     60c:	00540001 	subseq	r0, r4, r1
     610:	00000000 	andeq	r0, r0, r0
	PRCMPowerDomainOff (d);
     614:	d0000000 	andle	r0, r0, r0
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     618:	e8000005 	stmda	r0, {r0, r2}
     61c:	01000005 	tsteq	r0, r5
     620:	05e85000 	strbeq	r5, [r8, #0]!
	if (d & PRCM_DOMAIN_RFCORE) {
     624:	06000000 	streq	r0, [r0], -r0
     628:	00010000 	andeq	r0, r1, r0
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     62c:	00000054 	andeq	r0, r0, r4, asr r0
     630:	00000000 	andeq	r0, r0, r0
			__pi_systat.effpdm = __pi_systat.reqpdm;
     634:	0005a400 	andeq	sl, r5, r0, lsl #8
     638:	0005aa00 	andeq	sl, r5, r0, lsl #20
	__pi_systat.ondmns &= ~d;
     63c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	diag ("SYSERR: %x, %s", ec, m);
     650:	00500001 	subseq	r0, r0, r1
     654:	00000000 	andeq	r0, r0, r0
  __ASM volatile ("cpsid i" : : : "memory");
     658:	6c000000 	stcvs	0, cr0, [r0], {-0}
     65c:	8a000016 	bhi	6bc <tci_run_delay_timer+0x1c>
     660:	02000016 	andeq	r0, r0, #22
     664:	8a709100 	bhi	1c24a6c <__ccfg+0x1c04ac4>
		all_leds_blink;
     668:	b2000016 	andlt	r0, r0, #22
     66c:	01000016 	tsteq	r0, r6, lsl r0
     670:	16b65400 	ldrtne	r5, [r6], r0, lsl #8
     674:	16be0000 	ldrtne	r0, [lr], r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     678:	00010000 	andeq	r0, r1, r0
     67c:	0016cc54 	andseq	ip, r6, r4, asr ip
     680:	00171600 	andseq	r1, r7, r0, lsl #12
     684:	56000100 	strpl	r0, [r0], -r0, lsl #2
     688:	0000171a 	andeq	r1, r0, sl, lsl r7
     68c:	00001792 	muleq	r0, r2, r7
	while (1) {
     690:	00560001 	subseq	r0, r6, r1
     694:	00000000 	andeq	r0, r0, r0
     698:	d6000000 	strle	r0, [r0], -r0
     69c:	14000016 	strne	r0, [r0], #-22	; 0xffffffea
void tci_run_delay_timer () {
     6a0:	01000017 	tsteq	r0, r7, lsl r0
	setdel = __pi_mintk - __pi_old;
     6a4:	171a5100 	ldrne	r5, [sl, -r0, lsl #2]
     6a8:	172c0000 	strne	r0, [ip, -r0]!
     6ac:	00010000 	andeq	r0, r1, r0
     6b0:	00173851 	andseq	r3, r7, r1, asr r8
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     6b4:	00174200 	andseq	r4, r7, r0, lsl #4
     6b8:	51000100 	mrspl	r0, (UNDEF: 16)
     6bc:	00001754 	andeq	r1, r0, r4, asr r7
     6c0:	00001758 	andeq	r1, r0, r8, asr r7
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     6c4:	78510001 	ldmdavc	r1, {r0}^
	sti_tim;
     6c8:	7c000017 	stcvc	0, cr0, [r0], {23}
}
     6cc:	01000017 	tsteq	r0, r7, lsl r0
     6d0:	00005100 	andeq	r5, r0, r0, lsl #2
     6d4:	00000000 	andeq	r0, r0, r0
     6d8:	16d60000 	ldrbne	r0, [r6], r0
     6dc:	17140000 	ldrne	r0, [r4, -r0]
	cli_aux;
     6e0:	00010000 	andeq	r0, r1, r0
     6e4:	00171a55 	andseq	r1, r7, r5, asr sl
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     6e8:	00174200 	andseq	r4, r7, r0, lsl #4
     6ec:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
     6f0:	00001754 	andeq	r1, r0, r4, asr r7
     6f4:	00001758 	andeq	r1, r0, r8, asr r7
	sti_aux;
     6f8:	78550001 	ldmdavc	r5, {r0}^
}
     6fc:	92000017 	andls	r0, r0, #23
     700:	01000017 	tsteq	r0, r7, lsl r0
     704:	00005500 	andeq	r5, r0, r0, lsl #10
void AONRTCIntHandler () {
     708:	00000000 	andeq	r0, r0, r0
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     70c:	17480000 	strbne	r0, [r8, -r0]
     710:	17540000 	ldrbne	r0, [r4, -r0]
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     714:	00010000 	andeq	r0, r1, r0
		if (__pi_utims [0] == 0)
     718:	00175855 	andseq	r5, r7, r5, asr r8
     71c:	00177200 	andseq	r7, r7, r0, lsl #4
		if (*(__pi_utims [0])) {
     720:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
     724:	00001776 	andeq	r1, r0, r6, ror r7
			(*(__pi_utims [0]))--;
     728:	00001778 	andeq	r1, r0, r8, ror r7
		if (__pi_utims [1] == 0)
     72c:	00550001 	subseq	r0, r5, r1
		if (*(__pi_utims [1])) {
     730:	00000000 	andeq	r0, r0, r0
			aux_timer_inactive = 0;
     734:	fc000000 	stc2	0, cr0, [r0], {-0}
			(*(__pi_utims [1]))--;
     738:	14000016 	strne	r0, [r0], #-22	; 0xffffffea
		if (__pi_utims [2] == 0)
     73c:	01000017 	tsteq	r0, r7, lsl r0
		if (*(__pi_utims [2])) {
     740:	00005400 	andeq	r5, r0, r0, lsl #8
			(*(__pi_utims [2]))--;
     744:	00000000 	andeq	r0, r0, r0
		if (__pi_utims [3] != 0) {
     748:	17420000 	strbne	r0, [r2, -r0]
			if (*(__pi_utims [3])) {
     74c:	17540000 	ldrbne	r0, [r4, -r0]
				aux_timer_inactive = 0;
     750:	00010000 	andeq	r0, r1, r0
				(*(__pi_utims [3]))--;
     754:	00175854 	andseq	r5, r7, r4, asr r8
	if (__pi_systat.ledsts) {
     758:	00176c00 	andseq	r6, r7, r0, lsl #24
     75c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
		if (__pi_systat.ledblc++ == 0) {
     760:	0000176c 	andeq	r1, r0, ip, ror #14
     764:	00001778 	andeq	r1, r0, r8, ror r7
			if (__pi_systat.ledblk) {
     768:	00530001 	subseq	r0, r3, r1
     76c:	00000000 	andeq	r0, r0, r0
     770:	84000000 	strhi	r0, [r0], #-0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     774:	92000017 	andls	r0, r0, #23
     778:	01000017 	tsteq	r0, r7, lsl r0
				if (__pi_systat.ledsts & 0x2)
     77c:	00005100 	andeq	r5, r0, r0, lsl #2
     780:	00000000 	andeq	r0, r0, r0
     784:	116c0000 	cmnne	ip, r0
				if (__pi_systat.ledsts & 0x4)
     788:	11780000 	cmnne	r8, r0
				__pi_systat.ledblk = 0;
     78c:	00010000 	andeq	r0, r1, r0
     790:	00000050 	andeq	r0, r0, r0, asr r0
	...
	if (events & AON_RTC_EVFLAGS_CH0) {
     7a0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		__pi_new += setdel;
     7ac:	00500001 	subseq	r0, r0, r1
	...
		RISE_N_SHINE;
     7bc:	01000000 	mrseq	r0, (UNDEF: 0)
     7c0:	00005100 	andeq	r5, r0, r0, lsl #2
		aux_timer_inactive = 1;
     7c4:	00000000 	andeq	r0, r0, r0
     7c8:	00010000 	andeq	r0, r1, r0
				if (__pi_systat.ledsts & 0x1)
     7cc:	00000051 	andeq	r0, r0, r1, asr r0
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     7dc:	52000100 	andpl	r0, r0, #0, 2
	...
				__pi_systat.ledblk = 1;
     7e8:	00520001 	subseq	r0, r2, r1
	...
			cli_aux;
     7f8:	01000000 	mrseq	r0, (UNDEF: 0)
     7fc:	00005300 	andeq	r5, r0, r0, lsl #6
     800:	00000000 	andeq	r0, r0, r0
     804:	00010000 	andeq	r0, r1, r0
     808:	00000053 	andeq	r0, r0, r3, asr r0
     80c:	00000000 	andeq	r0, r0, r0
     810:	53000100 	movwpl	r0, #256	; 0x100
	...
	cli_tim;
     824:	00500001 	subseq	r0, r0, r1
	if (setdel) {
     828:	00000000 	andeq	r0, r0, r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     82c:	54000000 	strpl	r0, [r0], #-0
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     830:	5c000016 	stcpl	0, cr0, [r0], {22}
     834:	01000016 	tsteq	r0, r6, lsl r0
     838:	00005000 	andeq	r5, r0, r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     83c:	00000000 	andeq	r0, r0, r0
				AON_RTC_O_CH0CMP)) - gettav ());
     840:	15780000 	ldrbne	r0, [r8, #-0]!
	return NO;
     844:	157e0000 	ldrbne	r0, [lr, #-0]!
			setdel = 0;
     848:	00010000 	andeq	r0, r1, r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     84c:	00000050 	andeq	r0, r0, r0, asr r0
     850:	00000000 	andeq	r0, r0, r0
}
     854:	00158e00 	andseq	r8, r5, r0, lsl #28
		sti_tim;
     858:	0015ba00 	andseq	fp, r5, r0, lsl #20
		return YES;
     85c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     860:	000015ba 			; <UNDEFINED> instruction: 0x000015ba
     864:	000015c0 	andeq	r1, r0, r0, asr #11
     868:	c0520001 	subsgt	r0, r2, r1
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     86c:	08000015 	stmdaeq	r0, {r0, r2, r4}
	UARTDisable (UART0_BASE);
     870:	01000016 	tsteq	r0, r6, lsl r0
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     874:	16085400 	strne	r5, [r8], -r0, lsl #8
	UARTDisable (UART0_BASE);
     878:	16200000 	strtne	r0, [r0], -r0
	UARTConfigSetExpClk (UART0_BASE,
     87c:	00010000 	andeq	r0, r1, r0
     880:	00000050 	andeq	r0, r0, r0, asr r0
     884:	00000000 	andeq	r0, r0, r0
     888:	0015ba00 	andseq	fp, r5, r0, lsl #20
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     88c:	0015be00 	andseq	fp, r5, r0, lsl #28
     890:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     894:	000015be 			; <UNDEFINED> instruction: 0x000015be
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     898:	000015c0 	andeq	r1, r0, r0, asr #11
     89c:	d6530001 	ldrble	r0, [r3], -r1
     8a0:	df000015 	svcle	0x00000015
	urates [0] = rate;
     8a4:	01000015 	tsteq	r0, r5, lsl r0
}
     8a8:	00005000 	andeq	r5, r0, r0
     8ac:	00000000 	andeq	r0, r0, r0
     8b0:	15c80000 	strbne	r0, [r8]
     8b4:	15d80000 	ldrbne	r0, [r8]
     8b8:	00010000 	andeq	r0, r1, r0
     8bc:	00000053 	andeq	r0, r0, r3, asr r0
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     8c0:	00000000 	andeq	r0, r0, r0
     8c4:	00158e00 	andseq	r8, r5, r0, lsl #28
     8c8:	0015ac00 	andseq	sl, r5, r0, lsl #24
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     8cc:	50000100 	andpl	r0, r0, r0, lsl #2
     8d0:	000015b2 			; <UNDEFINED> instruction: 0x000015b2
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     8d4:	000015d2 	ldrdeq	r1, [r0], -r2
     8d8:	d2500001 	subsle	r0, r0, #1
	__pi_uart_setrate (urates [0], __pi_uart);
     8dc:	dc000015 	stcle	0, cr0, [r0], {21}
     8e0:	02000015 	andeq	r0, r0, #21
     8e4:	007c7400 	rsbseq	r7, ip, r0, lsl #8
     8e8:	00000000 	andeq	r0, r0, r0
     8ec:	ec000000 	stc	0, cr0, [r0], {-0}
     8f0:	1a000010 	bne	938 <ioreq_uart_a+0x40>
     8f4:	01000011 	tsteq	r0, r1, lsl r0
	switch (operation) {
     8f8:	11285000 			; <UNDEFINED> instruction: 0x11285000
static int ioreq_uart_a (int operation, char *buf, int len) {
     8fc:	116c0000 	cmnne	ip, r0
     900:	00010000 	andeq	r0, r1, r0
     904:	00000050 	andeq	r0, r0, r0, asr r0
     908:	00000000 	andeq	r0, r0, r0
     90c:	0010f400 	andseq	pc, r0, r0, lsl #8
				*buf++ = uart_a_read;
     910:	00110000 	andseq	r0, r1, r0
     914:	53000100 	movwpl	r0, #256	; 0x100
			while (len && uart_a_char_available) {
     918:	00001100 	andeq	r1, r0, r0, lsl #2
     91c:	00001102 	andeq	r1, r0, r2, lsl #2
     920:	00700002 	rsbseq	r0, r0, r2
			if (len != operation) {
     924:	00001106 	andeq	r1, r0, r6, lsl #2
}
     928:	0000115e 	andeq	r1, r0, lr, asr r1
     92c:	5e530001 	cdppl	0, 5, cr0, cr3, cr1, {0}
			uart_a_disable_int;
     930:	62000011 	andvs	r0, r0, #17
			if (uart_a_char_available) {
     934:	02000011 	andeq	r0, r0, #17
				*buf++ = uart_a_read;
     938:	62007300 	andvs	r7, r0, #0, 6
			uart_a_disable_int;
     93c:	6c000011 	stcvs	0, cr0, [r0], {17}
     940:	01000011 	tsteq	r0, r1, lsl r0
			if (uart_a_char_available) {
     944:	00005300 	andeq	r5, r0, r0, lsl #6
     948:	00000000 	andeq	r0, r0, r0
				uart_a_enable_int;
     94c:	10f40000 	rscsne	r0, r4, r0
     950:	10f60000 	rscsne	r0, r6, r0
				goto Redo_rx;
     954:	00010000 	andeq	r0, r1, r0
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     958:	00110652 	andseq	r0, r1, r2, asr r6
     95c:	00114600 	andseq	r4, r1, r0, lsl #12
			return -2;
     960:	52000100 	andpl	r0, r0, #0, 2
     964:	0000115e 	andeq	r1, r0, lr, asr r1
				uart_a_write (*buf);
     968:	00001162 	andeq	r1, r0, r2, ror #2
     96c:	62530001 	subsvs	r0, r3, #1
			while (len && uart_a_room_in_tx) {
     970:	6c000011 	stcvs	0, cr0, [r0], {17}
     974:	01000011 	tsteq	r0, r1, lsl r0
     978:	00005200 	andeq	r5, r0, r0, lsl #4
			if (len != operation) {
     97c:	00000000 	andeq	r0, r0, r0
			uart_a_disable_int;
     980:	14a00000 	strtne	r0, [r0], #0
     984:	14a80000 	strtne	r0, [r8], #0
			if (uart_a_room_in_tx) {
     988:	00010000 	andeq	r0, r1, r0
     98c:	0014ac51 	andseq	sl, r4, r1, asr ip
				uart_a_enable_int;
     990:	0014ae00 	andseq	sl, r4, r0, lsl #28
     994:	51000100 	mrspl	r0, (UNDEF: 16)
	...
				uart_a_write (*buf);
     9a0:	000013f4 	strdeq	r1, [r0], -r4
     9a4:	00001410 	andeq	r1, r0, r0, lsl r4
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     9a8:	16500001 	ldrbne	r0, [r0], -r1
     9ac:	22000014 	andcs	r0, r0, #20
			uart_a_enable_int;
     9b0:	01000014 	tsteq	r0, r4, lsl r0
     9b4:	00005000 	andeq	r5, r0, r0
     9b8:	00000000 	andeq	r0, r0, r0
			return 0;
     9bc:	13f40000 	mvnsne	r0, #0
			if (len == UART_CNTRL_SETRATE) {
     9c0:	14120000 	ldrne	r0, [r2], #-0
				if (__pi_uart_setrate (*((word*)buf),
     9c4:	00010000 	andeq	r0, r1, r0
     9c8:	00141651 	andseq	r1, r4, r1, asr r6
     9cc:	00142000 	andseq	r2, r4, r0
				syserror (EREQPAR, "uar");
     9d0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
				return 1;
     9dc:	000013f4 	strdeq	r1, [r0], -r4
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     9e0:	00001415 	andeq	r1, r0, r5, lsl r4
			syserror (ENOOPER, "uai");
     9e4:	16520001 	ldrbne	r0, [r2], -r1
     9e8:	1e000014 	mcrne	0, 0, r0, cr0, cr4, {0}
     9ec:	01000014 	tsteq	r0, r4, lsl r0
     9f0:	00005200 	andeq	r5, r0, r0, lsl #4
     9f4:	00000000 	andeq	r0, r0, r0
     9f8:	13f40000 	mvnsne	r0, #0
     9fc:	140c0000 	strne	r0, [ip], #-0
     a00:	00010000 	andeq	r0, r1, r0
     a04:	00140c53 	andseq	r0, r4, r3, asr ip
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     a08:	00149000 	andseq	r9, r4, r0
void UART0IntHandler () {
     a0c:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     a18:	000013f4 	strdeq	r1, [r0], -r4
     a1c:	00001474 	andeq	r1, r0, r4, ror r4
     a20:	00910002 	addseq	r0, r1, r2
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     a24:	00001474 	andeq	r1, r0, r4, ror r4
     a28:	00001490 	muleq	r0, r0, r4
		RISE_N_SHINE;
     a2c:	00910002 	addseq	r0, r1, r2
	...
		i_trigger (devevent (UART_A, READ));
     a38:	00001424 	andeq	r1, r0, r4, lsr #8
     a3c:	0000143a 	andeq	r1, r0, sl, lsr r4
     a40:	42500001 	subsmi	r0, r0, #1
     a44:	54000014 	strpl	r0, [r0], #-20	; 0xffffffec
     a48:	01000014 	tsteq	r0, r4, lsl r0
     a4c:	14645000 	strbtne	r5, [r4], #-0
     a50:	146c0000 	strbtne	r0, [ip], #-0
     a54:	00010000 	andeq	r0, r1, r0
     a58:	00147450 	andseq	r7, r4, r0, asr r4
     a5c:	00147c00 	andseq	r7, r4, r0, lsl #24
     a60:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     a6c:	000013d0 	ldrdeq	r1, [r0], -r0
		i_trigger (devevent (UART_A, WRITE));
     a70:	000013d6 	ldrdeq	r1, [r0], -r6
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     a74:	dc500001 	mrrcle	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     a78:	e4000013 	str	r0, [r0], #-19	; 0xffffffed
		RISE_N_SHINE;
     a7c:	01000013 	tsteq	r0, r3, lsl r0
     a80:	13e85000 	mvnne	r5, #0
     a84:	13f40000 	mvnsne	r0, #0
		i_trigger (devevent (UART_A, WRITE));
     a88:	00010000 	andeq	r0, r1, r0
     a8c:	00000050 	andeq	r0, r0, r0, asr r0
     a90:	00000000 	andeq	r0, r0, r0
     a94:	0013d000 	andseq	sp, r3, r0
     a98:	0013d800 	andseq	sp, r3, r0, lsl #16
     a9c:	51000100 	mrspl	r0, (UNDEF: 16)
     aa0:	000013dc 	ldrdeq	r1, [r0], -ip
     aa4:	000013e6 	andeq	r1, r0, r6, ror #7
     aa8:	e8510001 	ldmda	r1, {r0}^
     aac:	f4000013 	vst4.8	{d0-d3}, [r0 :64], r3
     ab0:	01000013 	tsteq	r0, r3, lsl r0
}
     ab4:	00005100 	andeq	r5, r0, r0, lsl #2
     ab8:	00000000 	andeq	r0, r0, r0
     abc:	13c20000 	bicne	r0, r2, #0
     ac0:	13ca0000 	bicne	r0, sl, #0
     ac4:	00010000 	andeq	r0, r1, r0
void __buttons_setirq (int val) {
     ac8:	0013ce50 	andseq	ip, r3, r0, asr lr
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     acc:	0013d000 	andseq	sp, r3, r0
     ad0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     adc:	000013c2 	andeq	r1, r0, r2, asr #7
		bn = BUTTON_GPIO (__button_list [i]);
     ae0:	000013c4 	andeq	r1, r0, r4, asr #7
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     ae4:	00520001 	subseq	r0, r2, r1
     ae8:	00000000 	andeq	r0, r0, r0
     aec:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
     af0:	b0000013 	andlt	r0, r0, r3, lsl r0
     af4:	01000013 	tsteq	r0, r3, lsl r0
     af8:	00005000 	andeq	r5, r0, r0
}
     afc:	00000000 	andeq	r0, r0, r0
     b00:	13ae0000 			; <UNDEFINED> instruction: 0x13ae0000
     b04:	13b80000 			; <UNDEFINED> instruction: 0x13b80000
     b08:	00010000 	andeq	r0, r1, r0
void __pinlist_setirq (int val) {
     b0c:	0013bc51 	andseq	fp, r3, r1, asr ip
	for (i = 0; i < N_PINLIST; i++) {
     b10:	0013c200 	andseq	ip, r3, r0, lsl #4
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     b14:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     b20:	000013ae 	andeq	r1, r0, lr, lsr #7
     b24:	000013b2 			; <UNDEFINED> instruction: 0x000013b2
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     b28:	00520001 	subseq	r0, r2, r1
	...
}
     b38:	01000000 	mrseq	r0, (UNDEF: 0)
     b3c:	00005000 	andeq	r5, r0, r0
	...
if (buttons_int) {
     b4c:	00010000 	andeq	r0, r1, r0
     b50:	00000051 	andeq	r0, r0, r1, asr r0
	...
	i_trigger ((aword)&__button_list);
     b60:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     b6c:	00500001 	subseq	r0, r0, r1
	...
     b7c:	01000000 	mrseq	r0, (UNDEF: 0)
     b80:	00005100 	andeq	r5, r0, r0, lsl #2
	...
	RISE_N_SHINE;
     b90:	00010000 	andeq	r0, r1, r0
if (pin_sensor_int) {
     b94:	00000050 	andeq	r0, r0, r0, asr r0
     b98:	00000000 	andeq	r0, r0, r0
	i_trigger ((aword)(&__input_pins));
     b9c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     bb0:	00510001 	subseq	r0, r1, r1
	...
     bc0:	01000000 	mrseq	r0, (UNDEF: 0)
     bc4:	00005200 	andeq	r5, r0, r0, lsl #4
	__pinsen_disable_and_clear;
     bc8:	00000000 	andeq	r0, r0, r0
	RISE_N_SHINE;
     bcc:	139e0000 	orrsne	r0, lr, #0
     bd0:	13a00000 	movne	r0, #0
     bd4:	00010000 	andeq	r0, r1, r0
}
     bd8:	00000050 	andeq	r0, r0, r0, asr r0
     bdc:	00000000 	andeq	r0, r0, r0
     be0:	00139e00 	andseq	r9, r3, r0, lsl #28
     be4:	0013a000 	andseq	sl, r3, r0
     be8:	51000100 	mrspl	r0, (UNDEF: 16)
void system_init () {
     bec:	000013a4 	andeq	r1, r0, r4, lsr #7
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     bf0:	000013ae 	andeq	r1, r0, lr, lsr #7
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     bf4:	00510001 	subseq	r0, r1, r1
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     bf8:	00000000 	andeq	r0, r0, r0
     bfc:	90000000 	andls	r0, r0, r0
     c00:	94000013 	strls	r0, [r0], #-19	; 0xffffffed
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     c04:	01000013 	tsteq	r0, r3, lsl r0
     c08:	13945000 	orrsne	r5, r4, #0
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     c0c:	139e0000 	orrsne	r0, lr, #0
     c10:	00010000 	andeq	r0, r1, r0
     c14:	00000053 	andeq	r0, r0, r3, asr r0
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     c18:	00000000 	andeq	r0, r0, r0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     c1c:	00139400 	andseq	r9, r3, r0, lsl #8
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     c20:	00139e00 	andseq	r9, r3, r0, lsl #28
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     c24:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		pin = (port_confs [i] >> 19) & 0x1f;
     c38:	00500001 	subseq	r0, r0, r1
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     c3c:	00000000 	andeq	r0, r0, r0
     c40:	01000000 	mrseq	r0, (UNDEF: 0)
     c44:	00005100 	andeq	r5, r0, r0, lsl #2
	...
     c54:	00010000 	andeq	r0, r1, r0
		if (port_confs [i] & 0x40)
     c58:	00000052 	andeq	r0, r0, r2, asr r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     c5c:	00000000 	andeq	r0, r0, r0
     c60:	52000100 	andpl	r0, r0, #0, 2
	...
     c74:	00500001 	subseq	r0, r0, r1
	all_leds_blink;
     c78:	00000000 	andeq	r0, r0, r0
     c7c:	6c000000 	stcvs	0, cr0, [r0], {-0}
     c80:	74000013 	strvc	r0, [r0], #-19	; 0xffffffed
     c84:	01000013 	tsteq	r0, r3, lsl r0
     c88:	13765000 	cmnne	r6, #0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     c8c:	137a0000 	cmnne	sl, #0
     c90:	00010000 	andeq	r0, r1, r0
     c94:	00137a50 	andseq	r7, r3, r0, asr sl
     c98:	00139000 	andseq	r9, r3, r0
     c9c:	53000100 	movwpl	r0, #256	; 0x100
	...
	IntEnable (INT_AON_RTC_COMB);
     cb0:	00500001 	subseq	r0, r0, r1
     cb4:	00000000 	andeq	r0, r0, r0
	__pi_malloc_init ();
     cb8:	01000000 	mrseq	r0, (UNDEF: 0)
	IntEnable (INT_AON_GPIO_EDGE);
     cbc:	00005000 	andeq	r5, r0, r0
	...
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     ccc:	00010000 	andeq	r0, r1, r0
     cd0:	00000050 	andeq	r0, r0, r0, asr r0
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     cd4:	00000000 	andeq	r0, r0, r0
     cd8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	urates [0] = UART_RATE / 100;
     cec:	00500001 	subseq	r0, r0, r1
	reinit_uart ();
     cf0:	00000000 	andeq	r0, r0, r0
	EXTRA_INITIALIZERS;
     cf4:	01000000 	mrseq	r0, (UNDEF: 0)
     cf8:	00005700 	andeq	r5, r0, r0, lsl #14
	...
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     d08:	00010000 	andeq	r0, r1, r0
     d0c:	00000056 	andeq	r0, r0, r6, asr r0
	...
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     d1c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	IntEnable (INT_UART0_COMB);
     d28:	00500001 	subseq	r0, r0, r1
     d2c:	00000000 	andeq	r0, r0, r0
}
     d30:	01000000 	mrseq	r0, (UNDEF: 0)
	tci_run_auxiliary_timer ();
     d34:	00005800 	andeq	r5, r0, r0, lsl #16
		diag ("");
     d38:	00000000 	andeq	r0, r0, r0
     d3c:	00010000 	andeq	r0, r1, r0
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     d40:	00000050 	andeq	r0, r0, r0, asr r0
	...
		diag ("Leftover RAM: %d bytes",
     d50:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
     d5c:	00540001 	subseq	r0, r4, r1
	...
     d6c:	01000000 	mrseq	r0, (UNDEF: 0)
     d70:	00005800 	andeq	r5, r0, r0, lsl #16
     d74:	00000000 	andeq	r0, r0, r0
     d78:	00010000 	andeq	r0, r1, r0
     d7c:	00000058 	andeq	r0, r0, r8, asr r0
     d80:	00000000 	andeq	r0, r0, r0
     d84:	00152800 	andseq	r2, r5, r0, lsl #16
     d88:	00153000 	andseq	r3, r5, r0
     d8c:	50000100 	andpl	r0, r0, r0, lsl #2
     d90:	00001530 	andeq	r1, r0, r0, lsr r5
     d94:	0000153a 	andeq	r1, r0, sl, lsr r5
     d98:	40500001 	subsmi	r0, r0, r1
     d9c:	4c000015 	stcmi	0, cr0, [r0], {21}
     da0:	01000015 	tsteq	r0, r5, lsl r0
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
     da4:	15605000 	strbne	r5, [r0, #-0]!
     da8:	156a0000 	strbne	r0, [sl, #-0]!
     dac:	00010000 	andeq	r0, r1, r0
     db0:	00000050 	andeq	r0, r0, r0, asr r0
     db4:	00000000 	andeq	r0, r0, r0
     db8:	00153600 	andseq	r3, r5, r0, lsl #12
     dbc:	00156800 	andseq	r6, r5, r0, lsl #16
     dc0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
}
     dc4:	00001568 	andeq	r1, r0, r8, ror #10
__attribute__ ((noreturn)) void __pi_release () {
     dc8:	0000156a 	andeq	r1, r0, sl, ror #10
     dcc:	6a520001 	bvs	1480dd8 <__ccfg+0x1460e30>
     dd0:	6c000015 	stcvs	0, cr0, [r0], {21}
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     dd4:	01000015 	tsteq	r0, r5, lsl r0
	check_stack_overflow;
     dd8:	00005400 	andeq	r5, r0, r0, lsl #8
     ddc:	00000000 	andeq	r0, r0, r0
     de0:	10b60000 	adcsne	r0, r6, r0
	update_n_wake (MAX_WORD, NO);
     de4:	10e80000 	rscne	r0, r8, r0
     de8:	00010000 	andeq	r0, r1, r0
     dec:	00000056 	andeq	r0, r0, r6, asr r0
	for_all_tasks (__pi_curr) {
     df0:	00000000 	andeq	r0, r0, r0
     df4:	0010cc00 	andseq	ip, r0, r0, lsl #24
     df8:	0010d600 	andseq	sp, r0, r0, lsl #12
  __ASM volatile ("cpsid i" : : : "memory");
     dfc:	53000100 	movwpl	r0, #256	; 0x100
	...
	system_event_count ++;
     e10:	00500001 	subseq	r0, r0, r1
     e14:	00000000 	andeq	r0, r0, r0
	switch (__pi_systat.effpdm) {
     e18:	01000000 	mrseq	r0, (UNDEF: 0)
     e1c:	00005400 	andeq	r5, r0, r0, lsl #8
	...
	__SLEEP;
     e2c:	00010000 	andeq	r0, r1, r0
     e30:	00000050 	andeq	r0, r0, r0, asr r0
	check_stack_overflow;
     e34:	00000000 	andeq	r0, r0, r0
     e38:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			(__pi_curr->code) (tstate (__pi_curr));
     e44:	00001334 	andeq	r1, r0, r4, lsr r3
			goto Redo;
     e48:	0000134d 	andeq	r1, r0, sp, asr #6
	for_all_tasks (__pi_curr) {
     e4c:	00500001 	subseq	r0, r0, r1
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     e50:	00000000 	andeq	r0, r0, r0
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     e54:	34000000 	strcc	r0, [r0], #-0
     e58:	4a000013 	bmi	eac <__pi_release+0xe4>
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     e5c:	01000013 	tsteq	r0, r3, lsl r0
     e60:	00005100 	andeq	r5, r0, r0, lsl #2
     e64:	00000000 	andeq	r0, r0, r0
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     e68:	13100000 	tstne	r0, #0
     e6c:	13240000 			; <UNDEFINED> instruction: 0x13240000
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     e70:	00010000 	andeq	r0, r1, r0
     e74:	00132450 	andseq	r2, r3, r0, asr r4
			__WFI ();
     e78:	00132800 	andseq	r2, r3, r0, lsl #16
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     e7c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     e80:	0000132c 	andeq	r1, r0, ip, lsr #6
}
     e84:	00001334 	andeq	r1, r0, r4, lsr r3
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     e88:	00500001 	subseq	r0, r0, r1
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     e8c:	00000000 	andeq	r0, r0, r0
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     e90:	10000000 	andne	r0, r0, r0
     e94:	27000013 	smladcs	r0, r3, r0, r0
			PRCMPowerDomainOff (__pi_systat.ondmns |
     e98:	01000013 	tsteq	r0, r3, lsl r0
     e9c:	132c5100 			; <UNDEFINED> instruction: 0x132c5100
     ea0:	13340000 	teqne	r4, #0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     ea4:	00010000 	andeq	r0, r1, r0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ea8:	00000051 	andeq	r0, r0, r1, asr r0
     eac:	00000000 	andeq	r0, r0, r0
     eb0:	00131800 	andseq	r1, r3, r0, lsl #16
     eb4:	00132700 	andseq	r2, r3, r0, lsl #14
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     eb8:	53000100 	movwpl	r0, #256	; 0x100
     ebc:	0000132c 	andeq	r1, r0, ip, lsr #6
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     ec0:	00001334 	andeq	r1, r0, r4, lsr r3
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     ec4:	00530001 	subseq	r0, r3, r1
	...
     ed4:	01000000 	mrseq	r0, (UNDEF: 0)
			SysCtrlSetRechargeBeforePowerDown
     ed8:	00005000 	andeq	r5, r0, r0
	...
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     ee8:	00010000 	andeq	r0, r1, r0
     eec:	00000051 	andeq	r0, r0, r1, asr r0
     ef0:	00000000 	andeq	r0, r0, r0
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     ef4:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     f08:	00520001 	subseq	r0, r2, r1
     f0c:	00000000 	andeq	r0, r0, r0
			while (!(AONWUCPowerStatusGet () &
     f10:	01000000 	mrseq	r0, (UNDEF: 0)
			PRCMPowerDomainOn (__pi_systat.ondmns);
     f14:	00005200 	andeq	r5, r0, r0, lsl #4
     f18:	00000000 	andeq	r0, r0, r0
     f1c:	12f00000 	rscsne	r0, r0, #0
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     f20:	12fa0000 	rscsne	r0, sl, #0
     f24:	00010000 	andeq	r0, r1, r0
     f28:	00000053 	andeq	r0, r0, r3, asr r0
     f2c:	00000000 	andeq	r0, r0, r0
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     f30:	00129400 	andseq	r9, r2, r0, lsl #8
     f34:	00129a00 	andseq	r9, r2, r0, lsl #20
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     f38:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			reinit_uart ();
     f44:	00001620 	andeq	r1, r0, r0, lsr #12
     f48:	00001626 	andeq	r1, r0, r6, lsr #12
     f4c:	26500001 	ldrbcs	r0, [r0], -r1
}
     f50:	54000016 	strpl	r0, [r0], #-22	; 0xffffffea
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     f54:	01000016 	tsteq	r0, r6, lsl r0
     f58:	00005500 	andeq	r5, r0, r0, lsl #10
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     f5c:	00000000 	andeq	r0, r0, r0
     f60:	16200000 	strtne	r0, [r0], -r0
     f64:	162b0000 	strtne	r0, [fp], -r0
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     f68:	00010000 	andeq	r0, r1, r0
     f6c:	00162b51 	andseq	r2, r6, r1, asr fp
     f70:	00165400 	andseq	r5, r6, r0, lsl #8
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     f74:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     f80:	0000163c 	andeq	r1, r0, ip, lsr r6
     f84:	00001640 	andeq	r1, r0, r0, asr #12
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     f88:	42530001 	subsmi	r0, r3, #1
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     f8c:	46000016 			; <UNDEFINED> instruction: 0x46000016
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     f90:	01000016 	tsteq	r0, r6, lsl r0
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     f94:	16465300 	strbne	r5, [r6], -r0, lsl #6
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     f98:	16540000 	ldrbne	r0, [r4], -r0
     f9c:	00010000 	andeq	r0, r1, r0
			PRCMPowerDomainOff (
     fa0:	00000052 	andeq	r0, r0, r2, asr r0
     fa4:	00000000 	andeq	r0, r0, r0
	__SLEEP;
     fa8:	0011c000 	andseq	ip, r1, r0
     fac:	0011c500 	andseq	ip, r1, r0, lsl #10
  __ASM volatile ("cpsie i" : : : "memory");
     fb0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	goto Redo;
     fbc:	000011c0 	andeq	r1, r0, r0, asr #3
     fc0:	000011c5 	andeq	r1, r0, r5, asr #3
     fc4:	00510001 	subseq	r0, r1, r1
	...
     fd4:	01000000 	mrseq	r0, (UNDEF: 0)
     fd8:	00005000 	andeq	r5, r0, r0
     fdc:	00000000 	andeq	r0, r0, r0
     fe0:	00010000 	andeq	r0, r1, r0
     fe4:	00000050 	andeq	r0, r0, r0, asr r0
	...
     ff4:	53000100 	movwpl	r0, #256	; 0x100
	...
    1000:	00530001 	subseq	r0, r3, r1
    1004:	00000000 	andeq	r0, r0, r0
    1008:	94000000 	strls	r0, [r0], #-0
    100c:	9c000011 	stcls	0, cr0, [r0], {17}
    1010:	01000011 	tsteq	r0, r1, lsl r0
    1014:	119c5000 	orrsne	r5, ip, r0
    1018:	11af0000 			; <UNDEFINED> instruction: 0x11af0000
    101c:	00010000 	andeq	r0, r1, r0
	cli_tim;
    1020:	0011b053 	andseq	fp, r1, r3, asr r0
    1024:	0011c000 	andseq	ip, r1, r0
    1028:	53000100 	movwpl	r0, #256	; 0x100
	...
	mdelay (500);
    1034:	0000119e 	muleq	r0, lr, r1
	setpowermode (2);
    1038:	000011af 	andeq	r1, r0, pc, lsr #3
	__PCB = NULL;
    103c:	b0500001 	subslt	r0, r0, r1
	release;
    1040:	c0000011 	andgt	r0, r0, r1, lsl r0
    1044:	01000011 	tsteq	r0, r1, lsl r0
    1048:	00005000 	andeq	r5, r0, r0
	...
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    1058:	00010000 	andeq	r0, r1, r0
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    105c:	00000050 	andeq	r0, r0, r0, asr r0
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    1060:	00000000 	andeq	r0, r0, r0
	system_init ();
    1064:	53000100 	movwpl	r0, #256	; 0x100
	...
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    1070:	00530001 	subseq	r0, r3, r1
	...
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    1080:	01000000 	mrseq	r0, (UNDEF: 0)
    1084:	00005000 	andeq	r5, r0, r0
	delay (16, 0);
    1088:	00000000 	andeq	r0, r0, r0
    108c:	00010000 	andeq	r0, r1, r0
    1090:	00000050 	andeq	r0, r0, r0, asr r0
	...
	__pi_release ();
    10a0:	53000100 	movwpl	r0, #256	; 0x100
	...
    10ac:	000011c8 	andeq	r1, r0, r8, asr #3
static void killev (__pi_pcb_t *pid) {
    10b0:	000011ce 	andeq	r1, r0, lr, asr #3
	wfun = (aword)(pid->code);
    10b4:	00500001 	subseq	r0, r0, r1
	for_all_tasks (i) {
    10b8:	00000000 	andeq	r0, r0, r0
		for (j = 0; j < nevents (i); j++) {
    10bc:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    10c0:	d1000011 	tstle	r0, r1, lsl r0
    10c4:	01000011 	tsteq	r0, r1, lsl r0
			    || i->Events [j] . Event == wfun
    10c8:	00005100 	andeq	r5, r0, r0, lsl #2
		for (j = 0; j < nevents (i); j++) {
    10cc:	00000000 	andeq	r0, r0, r0
			if (i->Events [j] . Event == (aword)pid
    10d0:	11d60000 	bicsne	r0, r6, r0
    10d4:	12140000 	andsne	r0, r4, #0
    10d8:	00010000 	andeq	r0, r1, r0
				wakeupev (i, j);
    10dc:	00121854 	andseq	r1, r2, r4, asr r8
    10e0:	00126600 	andseq	r6, r2, r0, lsl #12
	for_all_tasks (i) {
    10e4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
}
    10e8:	00001268 	andeq	r1, r0, r8, ror #4
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    10ec:	00001272 	andeq	r1, r0, r2, ror r2
static void qfree (aword *ch) {
    10f0:	00540001 	subseq	r0, r4, r1
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    10f4:	00000000 	andeq	r0, r0, r0
	cc = (aword*)(mpools + MA_NP);
    10f8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
	m_setnextp (ch, chunk);
    10fc:	10000012 	andne	r0, r0, r2, lsl r0
	m_setnextp (cc, ch);
    1100:	01000012 	tsteq	r0, r2, lsl r0
}
    1104:	12185000 	andsne	r5, r8, #0
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    1108:	12680000 	rsbne	r0, r8, #0
    110c:	00010000 	andeq	r0, r1, r0
    1110:	00000050 	andeq	r0, r0, r0, asr r0
			m_setnextp (cc, m_nextp (chunk));
    1114:	00000000 	andeq	r0, r0, r0
			m_size (chunk) += m_hdrlen + m_size (ch);
    1118:	0012a800 	andseq	sl, r2, r0, lsl #16
    111c:	0012bc00 	andseq	fp, r2, r0, lsl #24
    1120:	50000100 	andpl	r0, r0, r0, lsl #2
    1124:	000012c2 	andeq	r1, r0, r2, asr #5
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    1128:	000012dc 	ldrdeq	r1, [r0], -ip
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    112c:	00500001 	subseq	r0, r0, r1
    1130:	00000000 	andeq	r0, r0, r0
    1134:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
			m_setnextp (cc, m_nextp (chunk));
    1138:	be000012 	mcrlt	0, 0, r0, cr0, cr2, {0}
			m_size (ch) += m_hdrlen + m_size (chunk);
    113c:	01000012 	tsteq	r0, r2, lsl r0
    1140:	12c25100 	sbcne	r5, r2, #0, 2
    1144:	12c80000 	sbcne	r0, r8, #0
    1148:	00010000 	andeq	r0, r1, r0
    114c:	00000051 	andeq	r0, r0, r1, asr r0
    1150:	00000000 	andeq	r0, r0, r0
			if (m_size (chunk) >= m_size (ch))
    1154:	0012ba00 	andseq	fp, r2, r0, lsl #20
    1158:	0012bc00 	andseq	fp, r2, r0, lsl #24
    115c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		chunk = m_nextp (chunk))
    1168:	000012ba 			; <UNDEFINED> instruction: 0x000012ba
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    116c:	000012be 			; <UNDEFINED> instruction: 0x000012be
	diag_wait (a);
    1170:	00510001 	subseq	r0, r1, r1
	diag_wchar (c, a);
    1174:	00000000 	andeq	r0, r0, r0
    1178:	e0000000 	and	r0, r0, r0
}
    117c:	ee000014 	mcr	0, 0, r0, cr0, cr4, {0}
    1180:	01000014 	tsteq	r0, r4, lsl r0
	syserror (ESTATE, "state");
    1184:	14f45000 	ldrbtne	r5, [r4], #0
    1188:	15070000 	strne	r0, [r7, #-0]
    118c:	00010000 	andeq	r0, r1, r0
    1190:	00000050 	andeq	r0, r0, r0, asr r0
	for (i = 0; i < MAX_UTIMERS; i++)
    1194:	00000000 	andeq	r0, r0, r0
void utimer_add (address ut) {
    1198:	0014ec00 	andseq	lr, r4, r0, lsl #24
    119c:	0014ee00 	andseq	lr, r4, r0, lsl #28
		if (__pi_utims [i] == NULL)
    11a0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
    11b4:	00500001 	subseq	r0, r0, r1
    11b8:	00000000 	andeq	r0, r0, r0
    11bc:	01000000 	mrseq	r0, (UNDEF: 0)
	*t = v;
    11c0:	00005000 	andeq	r5, r0, r0
	...
	if (TCI_UPDATE_DELAY_TICKS (force))
    11d0:	00010000 	andeq	r0, r1, r0
    11d4:	00000055 	andeq	r0, r0, r5, asr r0
	...
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    11e4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    11f0:	00500001 	subseq	r0, r0, r1
	...
    1200:	01000000 	mrseq	r0, (UNDEF: 0)
    1204:	00005000 	andeq	r5, r0, r0
    1208:	00000000 	andeq	r0, r0, r0
		for_all_tasks (i) {
    120c:	00010000 	andeq	r0, r1, r0
	__pi_mintk = znew + min;
    1210:	00000050 	andeq	r0, r0, r0, asr r0
    1214:	00000000 	andeq	r0, r0, r0
			if (!twaiting (i))
    1218:	75000200 	strvc	r0, [r0, #-512]	; 0xfffffe00
	...
			if (twakecnd (__pi_old, znew, i->Timer)) {
    1224:	001d4800 	andseq	r4, sp, r0, lsl #16
    1228:	001d6800 	andseq	r6, sp, r0, lsl #16
    122c:	50000100 	andpl	r0, r0, r0, lsl #2
    1230:	00001d6e 	andeq	r1, r0, lr, ror #26
    1234:	00001d6f 	andeq	r1, r0, pc, ror #26
    1238:	00500001 	subseq	r0, r0, r1
    123c:	00000000 	andeq	r0, r0, r0
    1240:	52000000 	andpl	r0, r0, #0
    1244:	7800001d 	stmdavc	r0, {r0, r2, r3, r4}
    1248:	0100001d 	tsteq	r0, sp, lsl r0
    124c:	1d785400 	cfldrdne	mvd5, [r8, #-0]
				wakeuptm (i);
    1250:	1d7b0000 	ldclne	0, cr0, [fp, #-0]
    1254:	00010000 	andeq	r0, r1, r0
		for_all_tasks (i) {
    1258:	00000050 	andeq	r0, r0, r0, asr r0
				d = i->Timer - znew;
    125c:	00000000 	andeq	r0, r0, r0
    1260:	001d1400 	andseq	r1, sp, r0, lsl #8
    1264:	001d2400 	andseq	r2, sp, r0, lsl #8
		if ((word)(__pi_mintk - znew) < min) 
    1268:	50000100 	andpl	r0, r0, r0, lsl #2
    126c:	00001d2a 	andeq	r1, r0, sl, lsr #26
    1270:	00001d32 	andeq	r1, r0, r2, lsr sp
	__pi_old = znew;
    1274:	00500001 	subseq	r0, r0, r1
}
    1278:	00000000 	andeq	r0, r0, r0
	TCI_RUN_DELAY_TIMER;
    127c:	30000000 	andcc	r0, r0, r0
}
    1280:	3c00001d 	stccc	0, cr0, [r0], {29}
    1284:	0100001d 	tsteq	r0, sp, lsl r0
    1288:	00005300 	andeq	r5, r0, r0, lsl #6
    128c:	00000000 	andeq	r0, r0, r0
    1290:	1d320000 	ldcne	0, cr0, [r2, #-0]
void proceed (word state) {
    1294:	1d380000 	ldcne	0, cr0, [r8, #-0]
	prcdstate (__pi_curr, state);
    1298:	00010000 	andeq	r0, r1, r0
    129c:	001d3850 	andseq	r3, sp, r0, asr r8
	release;
    12a0:	001d3c00 	andseq	r3, sp, r0, lsl #24
    12a4:	73000200 	movwvc	r0, #512	; 0x200
	...
	if (j >= MAX_EVENTS_PER_TASK)
    12b0:	001cd400 	andseq	sp, ip, r0, lsl #8
    12b4:	001ce400 	andseq	lr, ip, r0, lsl #8
    12b8:	50000100 	andpl	r0, r0, r0, lsl #2
		syserror (ENEVENTS, "sw");
    12bc:	00001cea 	andeq	r1, r0, sl, ror #25
    12c0:	00001cf2 	strdeq	r1, [r0], -r2
	setestate (__pi_curr->Events [j], state, event);
    12c4:	00500001 	subseq	r0, r0, r1
	incwait (__pi_curr);
    12c8:	00000000 	andeq	r0, r0, r0
	setestate (__pi_curr->Events [j], state, event);
    12cc:	d4000000 	strle	r0, [r0], #-0
}
    12d0:	e600001c 			; <UNDEFINED> instruction: 0xe600001c
    12d4:	0100001c 	tsteq	r0, ip, lsl r0
    12d8:	1cea5100 	stfnee	f5, [sl]
void __pi_trigger (aword event) {
    12dc:	1d140000 	ldcne	0, cr0, [r4, #-0]
	for_all_tasks (i) {
    12e0:	00010000 	andeq	r0, r1, r0
		for (j = 0; j < nevents (i); j++) {
    12e4:	00000051 	andeq	r0, r0, r1, asr r0
    12e8:	00000000 	andeq	r0, r0, r0
    12ec:	001cf000 	andseq	pc, ip, r0
    12f0:	001cf800 	andseq	pc, ip, r0, lsl #16
			if (i->Events [j] . Event == event) {
    12f4:	53000100 	movwpl	r0, #256	; 0x100
    12f8:	00001d02 	andeq	r1, r0, r2, lsl #26
    12fc:	00001d14 	andeq	r1, r0, r4, lsl sp
				wakeupev (i, j);
    1300:	00530001 	subseq	r0, r3, r1
    1304:	00000000 	andeq	r0, r0, r0
	for_all_tasks (i) {
    1308:	f2000000 	vhadd.s8	d0, d0, d0
}
    130c:	0000001c 	andeq	r0, r0, ip, lsl r0
aword __pi_join (aword pid, word st) {
    1310:	0100001d 	tsteq	r0, sp, lsl r0
	for_all_tasks (i) {
    1314:	1d025000 	stcne	0, cr5, [r2, #-0]
    1318:	1d040000 	stcne	0, cr0, [r4, #-0]
	return 0;
    131c:	00010000 	andeq	r0, r1, r0
		if ((aword)i == pid) {
    1320:	001d0450 	andseq	r0, sp, r0, asr r4
			__pi_wait (pid, st);
    1324:	001d1400 	andseq	r1, sp, r0, lsl #8
}
    1328:	73000200 	movwvc	r0, #512	; 0x200
	...
void delay (word d, word state) {
    1334:	001c3800 	andseq	r3, ip, r0, lsl #16
	settstate (__pi_curr, state);
    1338:	001c5200 	andseq	r5, ip, r0, lsl #4
    133c:	50000100 	andpl	r0, r0, r0, lsl #2
    1340:	00001c52 	andeq	r1, r0, r2, asr ip
    1344:	00001c58 	andeq	r1, r0, r8, asr ip
	update_n_wake (d, YES);
    1348:	58550001 	ldmdapl	r5, {r0}^
    134c:	6200001c 	andvs	r0, r0, #28
	__pi_curr->Timer = __pi_old + d;
    1350:	0100001c 	tsteq	r0, ip, lsl r0
    1354:	1c625000 	stclne	0, cr5, [r2], #-0
	inctimer (__pi_curr);
    1358:	1cd40000 	ldclne	0, cr0, [r4], {0}
    135c:	00010000 	andeq	r0, r1, r0
    1360:	00000055 	andeq	r0, r0, r5, asr r0
}
    1364:	00000000 	andeq	r0, r0, r0
    1368:	001c3800 	andseq	r3, ip, r0, lsl #16
	if (fun == NULL)
    136c:	001c5200 	andseq	r5, ip, r0, lsl #4
		return (int) __pi_curr;
    1370:	51000100 	mrspl	r0, (UNDEF: 16)
    1374:	00001c52 	andeq	r1, r0, r2, asr ip
	for_all_tasks (i)
    1378:	00001c58 	andeq	r1, r0, r8, asr ip
}
    137c:	58570001 	ldmdapl	r7, {r0}^
		if (i->code == fun)
    1380:	6200001c 	andvs	r0, r0, #28
	for_all_tasks (i)
    1384:	0100001c 	tsteq	r0, ip, lsl r0
    1388:	1c625100 	stfnee	f5, [r2], #-0
    138c:	1cd40000 	ldclne	0, cr0, [r4], {0}
int __pi_strlen (const char *s) {
    1390:	00010000 	andeq	r0, r1, r0
	for (i = 0; *(s+i) != '\0'; i++);
    1394:	00000057 	andeq	r0, r0, r7, asr r0
}
    1398:	00000000 	andeq	r0, r0, r0
	for (i = 0; *(s+i) != '\0'; i++);
    139c:	001c3800 	andseq	r3, ip, r0, lsl #16
	while ((Boolean)(*d++ = *s++));
    13a0:	001c5200 	andseq	r5, ip, r0, lsl #4
    13a4:	52000100 	andpl	r0, r0, #0, 2
    13a8:	00001c52 	andeq	r1, r0, r2, asr ip
}
    13ac:	00001c58 	andeq	r1, r0, r8, asr ip
	while (n--)
    13b0:	58540001 	ldmdapl	r4, {r0}^
    13b4:	6200001c 	andvs	r0, r0, #28
		*dest++ = *src++;
    13b8:	0100001c 	tsteq	r0, ip, lsl r0
    13bc:	1c625200 	sfmne	f5, 2, [r2], #-0
    13c0:	1cd40000 	ldclne	0, cr0, [r4], {0}
	while (n--)
    13c4:	00010000 	andeq	r0, r1, r0
}
    13c8:	00000054 	andeq	r0, r0, r4, asr r0
		*dest++ = c;
    13cc:	00000000 	andeq	r0, r0, r0
void adddevfunc (devreqfun_t rf, int loc) {
    13d0:	001c9200 	andseq	r9, ip, r0, lsl #4
		syserror (EREQPAR, "addv");
    13d4:	001caa00 	andseq	sl, ip, r0, lsl #20
		syserror (ERESOURCE, "addv");
    13d8:	50000100 	andpl	r0, r0, r0, lsl #2
	if (ioreq [loc] != NULL)
    13dc:	00001caa 	andeq	r1, r0, sl, lsr #25
    13e0:	00001caf 	andeq	r1, r0, pc, lsr #25
		syserror (ERESOURCE, "addv");
    13e4:	00510001 	subseq	r0, r1, r1
	ioreq [loc] = rf;
    13e8:	00000000 	andeq	r0, r0, r0
}
    13ec:	b0000000 	andlt	r0, r0, r0
    13f0:	bf00001c 	svclt	0x0000001c
sint io (word retry, word dev, word operation, char *buf, word len) {
    13f4:	0100001c 	tsteq	r0, ip, lsl r0
    13f8:	00005000 	andeq	r5, r0, r0
    13fc:	00000000 	andeq	r0, r0, r0
    1400:	1be80000 	blne	ffa01408 <_estack+0xdf9fc408>
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1404:	1bf60000 	blne	ffd8140c <_estack+0xdfd7c40c>
    1408:	00010000 	andeq	r0, r1, r0
    140c:	001bf650 	andseq	pc, fp, r0, asr r6	; <UNPREDICTABLE>
		syserror (ENODEVICE, "io");
    1410:	001c2400 	andseq	r2, ip, r0, lsl #8
    1414:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
	ret = (ioreq [dev]) (operation, buf, len);
    1420:	00001be8 	andeq	r1, r0, r8, ror #23
	if (ret >= 0)
    1424:	00001bfc 	strdeq	r1, [r0], -ip
	if (ret == -1) {
    1428:	00510001 	subseq	r0, r1, r1
    142c:	0f00001c 	svceq	0x0000001c
		if (retry == WNONE)
    1430:	0100001c 	tsteq	r0, ip, lsl r0
		iowait (dev, operation, retry);
    1434:	00005100 	andeq	r5, r0, r0, lsl #2
    1438:	00000000 	andeq	r0, r0, r0
    143c:	1be80000 	blne	ffa01444 <_estack+0xdf9fc444>
			release;
    1440:	1bfc0000 	blne	fff01448 <_estack+0xdfefc448>
	if (ret == -2) {
    1444:	00010000 	andeq	r0, r1, r0
		if (retry != WNONE) {
    1448:	001c0052 	andseq	r0, ip, r2, asr r0
    144c:	001c0f00 	andseq	r0, ip, r0, lsl #30
			iowait (dev, operation, retry);
    1450:	52000100 	andpl	r0, r0, #0, 2
	...
			(ioreq [dev]) (NONE, buf, len);
    145c:	00001c10 	andeq	r1, r0, r0, lsl ip
    1460:	00001c1a 	andeq	r1, r0, sl, lsl ip
		(ioreq [dev]) (NONE, buf, len);
    1464:	1a500001 	bne	1401470 <__ccfg+0x13e14c8>
    1468:	1e00001c 	mcrne	0, 0, r0, cr0, cr12, {0}
    146c:	0700001c 	smladeq	r0, ip, r0, r0
}
    1470:	32007400 	andcc	r7, r0, #0, 8
	if (retry != WNONE) {
    1474:	22007224 	andcs	r7, r0, #36, 4	; 0x40000002
		delay (-ret - 2, retry);
    1478:	00001c1e 	andeq	r1, r0, lr, lsl ip
    147c:	00001c38 	andeq	r1, r0, r8, lsr ip
    1480:	00500001 	subseq	r0, r0, r1
	...
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1490:	01000000 	mrseq	r0, (UNDEF: 0)
    1494:	00005000 	andeq	r5, r0, r0
	...
		syserror (ERESOURCE, "mal1");
    14a4:	00010000 	andeq	r0, r1, r0
    14a8:	00000051 	andeq	r0, r0, r1, asr r0
	...
	m_size (mpools [0]) = mlen - m_hdrlen;
    14b8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    14c4:	00550001 	subseq	r0, r5, r1
	...
}
    14d4:	01000000 	mrseq	r0, (UNDEF: 0)
    14d8:	00005100 	andeq	r5, r0, r0, lsl #2
    14dc:	00000000 	andeq	r0, r0, r0
void __pi_free (aword *ch) {
    14e0:	00010000 	andeq	r0, r1, r0
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    14e4:	00000056 	andeq	r0, r0, r6, asr r0
	...
	mcfree [MA_NP] += m_size (ch);
    14f4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1500:	00540001 	subseq	r0, r4, r1
	...
		trigger ((aword)(&(mevent [MA_NP])));
    1510:	01000000 	mrseq	r0, (UNDEF: 0)
		mevent [MA_NP] . nwait --;
    1514:	00005000 	andeq	r5, r0, r0
}
    1518:	00000000 	andeq	r0, r0, r0
    151c:	00010000 	andeq	r0, r1, r0
    1520:	00000050 	andeq	r0, r0, r0, asr r0
	...
	j = NULL;
    1530:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	syserror (EREQPAR, "kpi");
    153c:	00510001 	subseq	r0, r1, r1
	...
			killev (i);
    154c:	01000000 	mrseq	r0, (UNDEF: 0)
			ufree (i);
    1550:	00005000 	andeq	r5, r0, r0
			if (i == __pi_curr)
    1554:	00000000 	andeq	r0, r0, r0
    1558:	00010000 	andeq	r0, r1, r0
				release;
    155c:	00000050 	andeq	r0, r0, r0, asr r0
	...
}
    156c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	if (size < 8)
    1578:	00510001 	subseq	r0, r1, r1
		_size = 2;
    157c:	00000000 	andeq	r0, r0, r0
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1580:	20000000 	andcs	r0, r0, r0
		_size = (((aword)size) + 3) >> 2;
    1584:	3800001b 	stmdacc	r0, {r0, r1, r3, r4}
		if (m_magic (chunk) != MALLOC_MAGIC)
    1588:	0100001b 	tsteq	r0, fp, lsl r0
		_size = (((aword)size) + 3) >> 2;
    158c:	1b3e5000 	blne	f95594 <__ccfg+0xf755ec>
		if (mevent [MA_NP] . nfail != 255)
    1590:	1b480000 	blne	1201598 <__ccfg+0x11e15f0>
    1594:	00010000 	andeq	r0, r1, r0
			mevent [MA_NP] . nfail ++;
    1598:	001b4a50 	andseq	r4, fp, r0, asr sl
		mnfree [MA_NP] = 0;
    159c:	001b5800 	andseq	r5, fp, r0, lsl #16
    15a0:	50000100 	andpl	r0, r0, r0, lsl #2
		if (m_magic (chunk) != MALLOC_MAGIC)
    15a4:	00001b5e 	andeq	r1, r0, lr, asr fp
    15a8:	00001b60 	andeq	r1, r0, r0, ror #22
			syserror (EMALLOC, "malc");
    15ac:	6a500001 	bvs	14015b8 <__ccfg+0x13e1610>
    15b0:	6c00001b 	stcvs	0, cr0, [r0], {27}
		if (m_size (chunk) >= _size)
    15b4:	0100001b 	tsteq	r0, fp, lsl r0
    15b8:	00005000 	andeq	r5, r0, r0
		chunk = m_nextp (chunk)) {
    15bc:	00000000 	andeq	r0, r0, r0
		m_setnextp (cc, m_nextp (chunk));
    15c0:	1b200000 	blne	8015c8 <__ccfg+0x7e1620>
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    15c4:	1b5a0000 	blne	16815cc <__ccfg+0x1661624>
    15c8:	00010000 	andeq	r0, r1, r0
			m_size (chunk) = _size;
    15cc:	001b5e51 	andseq	r5, fp, r1, asr lr
			cc = chunk + _size + m_hdrlen;
    15d0:	001b6900 	andseq	r6, fp, r0, lsl #18
    15d4:	51000100 	mrspl	r0, (UNDEF: 16)
			m_size (cc) = waste - m_hdrlen;
    15d8:	00001b6a 	andeq	r1, r0, sl, ror #22
			QFREE;
    15dc:	00001b80 	andeq	r1, r0, r0, lsl #23
		mevent [MA_NP] . nfail = 0;
    15e0:	00510001 	subseq	r0, r1, r1
		mcfree [MA_NP] -= m_size (chunk);
    15e4:	00000000 	andeq	r0, r0, r0
    15e8:	20000000 	andcs	r0, r0, r0
    15ec:	5d00001b 	stcpl	0, cr0, [r0, #-108]	; 0xffffff94
    15f0:	0100001b 	tsteq	r0, fp, lsl r0
		m_size (chunk) |= MALLOC_UMASK;
    15f4:	1b5e5200 	blne	1795dfc <__ccfg+0x1775e54>
		if (mnfree [MA_NP] > mcfree [MA_NP])
    15f8:	1b690000 	blne	1a41600 <__ccfg+0x1a21658>
		m_size (chunk) |= MALLOC_UMASK;
    15fc:	00010000 	andeq	r0, r1, r0
			mnfree [MA_NP] = mcfree [MA_NP];
    1600:	001b6a52 	andseq	r6, fp, r2, asr sl
}
    1604:	001b8000 	andseq	r8, fp, r0
    1608:	52000100 	andpl	r0, r0, #0, 2
	...
    1614:	00001b38 	andeq	r1, r0, r8, lsr fp
    1618:	00001b3c 	andeq	r1, r0, ip, lsr fp
    161c:	00500001 	subseq	r0, r0, r1
	...
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    162c:	01000000 	mrseq	r0, (UNDEF: 0)
		if ((j = __PCB) == NULL)
    1630:	00005000 	andeq	r5, r0, r0
	i->Next = NULL;
    1634:	00000000 	andeq	r0, r0, r0
	i->data = data;
    1638:	00010000 	andeq	r0, r1, r0
		if ((j = __PCB) == NULL)
    163c:	00000050 	andeq	r0, r0, r0, asr r0
	...
	return (aword) i;
    164c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	if (mevent [MA_NP] . nwait != 255)
    1658:	00540001 	subseq	r0, r4, r1
	...
	wait ((aword)(&(mevent [MA_NP])), state);
    1668:	01000000 	mrseq	r0, (UNDEF: 0)
void diag (const char *mess, ...) {
    166c:	00005100 	andeq	r5, r0, r0, lsl #2
	...
	diag_disable_int (a, is);
    167c:	00010000 	andeq	r0, r1, r0
    1680:	00000052 	andeq	r0, r0, r2, asr r0
				d = (bc == 16) ? 10000 : 1000000000;
    1684:	00000000 	andeq	r0, r0, r0
	diag_disable_int (a, is);
    1688:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    169c:	00500001 	subseq	r0, r0, r1
	diag_wait (a);
    16a0:	00000000 	andeq	r0, r0, r0
	diag_enable_int (a, is);
    16a4:	01000000 	mrseq	r0, (UNDEF: 0)
    16a8:	00005400 	andeq	r5, r0, r0, lsl #8
	...
		if (*mess == '%') {
    16b8:	00010000 	andeq	r0, r1, r0
    16bc:	00000051 	andeq	r0, r0, r1, asr r0
			if (*mess == 'l') {
    16c0:	00000000 	andeq	r0, r0, r0
    16c4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			switch (*mess) {
    16d8:	00520001 	subseq	r0, r2, r1
    16dc:	00000000 	andeq	r0, r0, r0
    16e0:	01000000 	mrseq	r0, (UNDEF: 0)
				dgout ('%');
    16e4:	00005500 	andeq	r5, r0, r0, lsl #10
    16e8:	00000000 	andeq	r0, r0, r0
				dgout (*mess);
    16ec:	1a380000 	bne	e016f4 <__ccfg+0xde174c>
    16f0:	1a4e0000 	bne	13816f8 <__ccfg+0x1361750>
			switch (*mess) {
    16f4:	00010000 	andeq	r0, r1, r0
					v = __pi_hex_enc_table [
    16f8:	001a5450 	andseq	r5, sl, r0, asr r4
					i += 4;
    16fc:	001a7400 	andseq	r7, sl, r0, lsl #8
					(val >> (bc - i)) & 0xf];
    1700:	50000100 	andpl	r0, r0, r0, lsl #2
	...
					dgout (v);
    170c:	00001a38 	andeq	r1, r0, r8, lsr sl
				while (i < bc) {
    1710:	00001a4e 	andeq	r1, r0, lr, asr #20
			mess++;
    1714:	54510001 	ldrbpl	r0, [r1], #-1
					d /= 10;
    1718:	6c00001a 	stcvs	0, cr0, [r0], {26}
				if ((val >> (bc - 1)) & 1) {
    171c:	0100001a 	tsteq	r0, sl, lsl r0
    1720:	1a6e5100 	bne	1b95b28 <__ccfg+0x1b75b80>
					dgout ('-');
    1724:	1a7a0000 	bne	1e8172c <__ccfg+0x1e61784>
    1728:	00010000 	andeq	r0, r1, r0
						val |= 0xffff0000;
    172c:	00000051 	andeq	r0, r0, r1, asr r0
    1730:	00000000 	andeq	r0, r0, r0
    1734:	001a3800 	andseq	r3, sl, r0, lsl #16
				d = (bc == 16) ? 10000 : 1000000000;
    1738:	001a4e00 	andseq	r4, sl, r0, lsl #28
    173c:	52000100 	andpl	r0, r0, #0, 2
    1740:	00001a4e 	andeq	r1, r0, lr, asr #20
					v = (word) (val / d);
    1744:	00001a54 	andeq	r1, r0, r4, asr sl
					if (v || d == 1) break;
    1748:	54540001 	ldrbpl	r0, [r4], #-1
    174c:	6000001a 	andvs	r0, r0, sl, lsl r0
					d /= 10;
    1750:	0100001a 	tsteq	r0, sl, lsl r0
				d = (bc == 16) ? 10000 : 1000000000;
    1754:	1a605200 	bne	1815f5c <__ccfg+0x17f5fb4>
					dgout (v + '0');
    1758:	1a860000 	bne	fe181760 <_estack+0xde17c760>
    175c:	00010000 	andeq	r0, r1, r0
    1760:	001a8c54 	andseq	r8, sl, r4, asr ip
					d /= 10;
    1764:	001a9200 	andseq	r9, sl, r0, lsl #4
					val = val - (v * d);
    1768:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
					if (d == 0) break;
    176c:	00001a96 	muleq	r0, r6, sl
					v = (word) (val / d);
    1770:	00001aaa 	andeq	r1, r0, sl, lsr #21
    1774:	00540001 	subseq	r0, r4, r1
				if (bc == 16)
    1778:	00000000 	andeq	r0, r0, r0
				d = (bc == 16) ? 10000 : 1000000000;
    177c:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
					val &= 0xffff;
    1780:	4600001a 			; <UNDEFINED> instruction: 0x4600001a
					dgout (*s);
    1784:	0100001a 	tsteq	r0, sl, lsl r0
					s++;
    1788:	00005300 	andeq	r5, r0, r0, lsl #6
				while (*s != '\0') {
    178c:	00000000 	andeq	r0, r0, r0
    1790:	1ab40000 	bne	fed01798 <_estack+0xdecfc798>
			dgout (*mess++);
    1794:	1ac00000 	bne	ff00179c <_estack+0xdeffc79c>
    1798:	00010000 	andeq	r0, r1, r0
    179c:	001ac650 	andseq	ip, sl, r0, asr r6
    17a0:	001ade00 	andseq	sp, sl, r0, lsl #28
    17a4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	__pi_seed = __pi_seed * 1103515245 + 12345;
    17b0:	00001a7c 	andeq	r1, r0, ip, ror sl
    17b4:	00001a86 	andeq	r1, r0, r6, lsl #21
	^ entropy
    17b8:	8c500001 	mrrchi	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
}
    17bc:	9100001a 	tstls	r0, sl, lsl r0
    17c0:	0100001a 	tsteq	r0, sl, lsl r0
    17c4:	1a965000 	bne	fe5957cc <_estack+0xde5907cc>
    17c8:	1aa40000 	bne	fe9017d0 <_estack+0xde8fc7d0>
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    17cc:	00010000 	andeq	r0, r1, r0
	word cs = size + hblenb;
    17d0:	00000050 	andeq	r0, r0, r0, asr r0
	...
}
    17e0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    17ec:	00500001 	subseq	r0, r0, r1
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    17f0:	00000000 	andeq	r0, r0, r0
		p->attributes.b.queued = 0;
    17f4:	01000000 	mrseq	r0, (UNDEF: 0)
    17f8:	00005000 	andeq	r5, r0, r0
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    17fc:	00000000 	andeq	r0, r0, r0
	deq (p);	// Remove from queue
    1800:	00010000 	andeq	r0, r1, r0
}
    1804:	00000050 	andeq	r0, r0, r0, asr r0
	...
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1814:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	if (q_empty (q))
    1820:	00510001 	subseq	r0, r1, r1
    1824:	00000000 	andeq	r0, r0, r0
		trigger (q);
    1828:	01000000 	mrseq	r0, (UNDEF: 0)
	if (p->attributes.b.urgent) {
    182c:	00005100 	andeq	r5, r0, r0, lsl #2
		p->u.bqueue.next = q->next;
    1830:	00000000 	andeq	r0, r0, r0
		p->u.bqueue.prev = q;
    1834:	00010000 	andeq	r0, r1, r0
		q->next->prev = (qitem_t*) p;
    1838:	00000051 	andeq	r0, r0, r1, asr r0
	...
		p->u.bqueue.prev = q->prev;
    1848:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
		q->prev = (qitem_t*) p;
    1854:	0070000a 	rsbseq	r0, r0, sl
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    1858:	68032432 	stmdavs	r3, {r1, r4, r5, sl, sp}
	deq (p);	// Soft dequeue, timer and hook left intact
    185c:	22200005 	eorcs	r0, r0, #5
	...
	switch (dv) {
    1868:	00540001 	subseq	r0, r4, r1
    186c:	00000000 	andeq	r0, r0, r0
			p->attributes.b.urgent = 1;
    1870:	0a000000 	beq	1878 <dispose+0x20>
    1874:	32007000 	andcc	r7, r0, #0
			verify_ses (p, "dispose ses");
    1878:	05680324 	strbeq	r0, [r8, #-804]!	; 0xfffffcdc
    187c:	00222000 	eoreq	r2, r2, r0
    1880:	00000000 	andeq	r0, r0, r0
    1884:	01000000 	mrseq	r0, (UNDEF: 0)
    1888:	00005400 	andeq	r5, r0, r0, lsl #8
			verify_phy (p, "dispose phy");
    188c:	00000000 	andeq	r0, r0, r0
    1890:	000a0000 	andeq	r0, sl, r0
}
    1894:	24320070 	ldrtcs	r0, [r2], #-112	; 0xffffff90
			enq (oqueues [p->attributes.b.phys], p);
    1898:	00056803 	andeq	r6, r5, r3, lsl #16
			p->attributes.b.urgent = 1;
    189c:	00002220 	andeq	r2, r0, r0, lsr #4
	...
			verify_phy (p, "dispose phy");
    18ac:	00010000 	andeq	r0, r1, r0
    18b0:	00000055 	andeq	r0, r0, r5, asr r0
    18b4:	00000000 	andeq	r0, r0, r0
    18b8:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
}
    18cc:	00540001 	subseq	r0, r4, r1
    18d0:	00000000 	andeq	r0, r0, r0
    18d4:	01000000 	mrseq	r0, (UNDEF: 0)
    18d8:	00005400 	andeq	r5, r0, r0, lsl #8
	...
	if (b->attributes.b.outgoing) {
    18e8:	00010000 	andeq	r0, r1, r0
	b = header (p);
    18ec:	00000050 	andeq	r0, r0, r0, asr r0
	if (b->attributes.b.outgoing) {
    18f0:	00000000 	andeq	r0, r0, r0
		verify_ses (b, "tcv02");
    18f4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1900:	00500001 	subseq	r0, r0, r1
	...
		verify_plg (b, tcv_out, "tcv03");
    1910:	01000000 	mrseq	r0, (UNDEF: 0)
    1914:	00005500 	andeq	r5, r0, r0, lsl #10
	...
    1924:	00010000 	andeq	r0, r1, r0
    1928:	00000050 	andeq	r0, r0, r0, asr r0
	...
		rlp (b);
    1938:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1944:	00500001 	subseq	r0, r0, r1
    1948:	00000000 	andeq	r0, r0, r0
    194c:	01000000 	mrseq	r0, (UNDEF: 0)
    1950:	00005000 	andeq	r5, r0, r0
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    1954:	00000000 	andeq	r0, r0, r0
    1958:	00010000 	andeq	r0, r1, r0
    195c:	00000050 	andeq	r0, r0, r0, asr r0
	...
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    196c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    1978:	00510001 	subseq	r0, r1, r1
    197c:	00000000 	andeq	r0, r0, r0
			syserror (ENODEVICE, "tcv04");
    1980:	01000000 	mrseq	r0, (UNDEF: 0)
		syserror (EMALLOC, "tcv05");
    1984:	00005100 	andeq	r5, r0, r0, lsl #2
	...
	attp.b.outgoing = 1;
    1994:	00010000 	andeq	r0, r1, r0
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1998:	00000053 	andeq	r0, r0, r3, asr r0
		if (descriptors [fd] == NULL)
    199c:	00000000 	andeq	r0, r0, r0
    19a0:	70000a00 	andvc	r0, r0, r0, lsl #20
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    19a4:	03243200 			; <UNDEFINED> instruction: 0x03243200
		return ERROR;
    19a8:	20000568 	andcs	r0, r0, r8, ror #10
}
    19ac:	00000022 	andeq	r0, r0, r2, lsr #32
    19b0:	00000000 	andeq	r0, r0, r0
    19b4:	53000100 	movwpl	r0, #256	; 0x100
	...
	descriptors [fd] = s;
    19c0:	0070000a 	rsbseq	r0, r0, sl
	q_init (&(s->rqueue));
    19c4:	68032432 	stmdavs	r3, {r1, r4, r5, sl, sp}
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    19c8:	22200005 	eorcs	r0, r0, #5
	...
    19d4:	00530001 	subseq	r0, r3, r1
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    19d8:	00000000 	andeq	r0, r0, r0
    19dc:	0a000000 	beq	19e4 <tcv_open+0x90>
    19e0:	32007000 	andcc	r7, r0, #0
	descriptors [fd] = s;
    19e4:	05680324 	strbeq	r0, [r8, #-804]!	; 0xfffffcdc
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    19e8:	00222000 	eoreq	r2, r2, r0
	...
		syserror (EMALLOC, "tcv05");
    19f8:	01000000 	mrseq	r0, (UNDEF: 0)
    19fc:	00005000 	andeq	r5, r0, r0
    1a00:	00000000 	andeq	r0, r0, r0
    1a04:	00010000 	andeq	r0, r1, r0
    1a08:	00000050 	andeq	r0, r0, r0, asr r0
	...
	    (plugins [ord] != NULL && plugins [ord] != pl))
    1a18:	53000100 	movwpl	r0, #256	; 0x100
	...
	plugins [ord] = pl;
    1a24:	00530001 	subseq	r0, r3, r1
	return 0;
    1a28:	00000000 	andeq	r0, r0, r0
		return ERROR;
    1a2c:	01000000 	mrseq	r0, (UNDEF: 0)
}
    1a30:	00005300 	andeq	r5, r0, r0, lsl #6
	...
								Boolean urg) {
    1a40:	00010000 	andeq	r0, r1, r0
	verify_fds (fd, "tcv16");
    1a44:	00000052 	andeq	r0, r0, r2, asr r0
    1a48:	00000000 	andeq	r0, r0, r0
    1a4c:	52000100 	andpl	r0, r0, #0, 2
	...
	verify_pld (s, tcv_frm, "tcv17");
    1a58:	00520001 	subseq	r0, r2, r1
    1a5c:	00000000 	andeq	r0, r0, r0
    1a60:	01000000 	mrseq	r0, (UNDEF: 0)
    1a64:	00005200 	andeq	r5, r0, r0, lsl #4
	...
	ptrs.tail = (word) urg;
    1a74:	00010000 	andeq	r0, r1, r0
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    1a78:	00000050 	andeq	r0, r0, r0, asr r0
	...
}
    1a88:	51000100 	mrspl	r0, (UNDEF: 16)
	...
			release;
    1a94:	00510001 	subseq	r0, r1, r1
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    1a98:	00000000 	andeq	r0, r0, r0
    1a9c:	01000000 	mrseq	r0, (UNDEF: 0)
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    1aa0:	00005100 	andeq	r5, r0, r0, lsl #2
    1aa4:	00000000 	andeq	r0, r0, r0
    1aa8:	00010000 	andeq	r0, r1, r0
    1aac:	00000051 	andeq	r0, r0, r1, asr r0
    1ab0:	00000000 	andeq	r0, r0, r0
    1ab4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	b->attributes = s->attpattern;
    1ac8:	00550001 	subseq	r0, r5, r1
	...
	b->u.pointers.tail = length;
    1ad8:	01000000 	mrseq	r0, (UNDEF: 0)
	return (address) (b + 1);
    1adc:	00005400 	andeq	r5, r0, r0, lsl #8
    1ae0:	00000000 	andeq	r0, r0, r0
    1ae4:	00010000 	andeq	r0, r1, r0
    1ae8:	00000050 	andeq	r0, r0, r0, asr r0
    1aec:	00000000 	andeq	r0, r0, r0
    1af0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
	verify_fph (phy, "tcv23");
    1b04:	00500001 	subseq	r0, r0, r1
    1b08:	00000000 	andeq	r0, r0, r0
    1b0c:	01000000 	mrseq	r0, (UNDEF: 0)
}
    1b10:	00005000 	andeq	r5, r0, r0
	return (physical [phy]) (opt, arg);
    1b14:	00000000 	andeq	r0, r0, r0
    1b18:	00070000 	andeq	r0, r7, r0
    1b1c:	24320071 	ldrtcs	r0, [r2], #-113	; 0xffffff8f
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    1b20:	00220072 	eoreq	r0, r2, r2, ror r0
	if (opt < 0) {
    1b24:	00000000 	andeq	r0, r0, r0
		if (fd < 0)
    1b28:	01000000 	mrseq	r0, (UNDEF: 0)
		if (opt == PHYSOPT_PLUGINFO) {
    1b2c:	00005000 	andeq	r5, r0, r0
			if (fd >= TCV_MAX_PLUGS)
    1b30:	00000000 	andeq	r0, r0, r0
			if ((p = plugins [fd]) == NULL)
    1b34:	1a140000 	bne	501b3c <__ccfg+0x4e1b94>
    1b38:	1a2a0000 	bne	a81b40 <__ccfg+0xa61b98>
}
    1b3c:	00010000 	andeq	r0, r1, r0
		if (fd >= TCV_MAX_PHYS)
    1b40:	001a2c50 	andseq	r2, sl, r0, asr ip
		return physinfo [fd];
    1b44:	001a3000 	andseq	r3, sl, r0
    1b48:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	verify_fds (fd, "tcv22");
    1b5c:	00500001 	subseq	r0, r0, r1
}
    1b60:	00000000 	andeq	r0, r0, r0
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    1b64:	01000000 	mrseq	r0, (UNDEF: 0)
    1b68:	00005000 	andeq	r5, r0, r0
	...
			return 0;
    1b78:	00010000 	andeq	r0, r1, r0
    1b7c:	00000051 	andeq	r0, r0, r1, asr r0
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    1b80:	00000000 	andeq	r0, r0, r0
    1b84:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
			syserror (EREQPAR, "tcv26");
    1b90:	00510001 	subseq	r0, r1, r1
		verify_fds (ses, "tcv27");
    1b94:	00000000 	andeq	r0, r0, r0
    1b98:	01000000 	mrseq	r0, (UNDEF: 0)
    1b9c:	00005500 	andeq	r5, r0, r0, lsl #10
    1ba0:	00000000 	andeq	r0, r0, r0
    1ba4:	00010000 	andeq	r0, r1, r0
		if ((p = apb (size)) != NULL) {
    1ba8:	00000051 	andeq	r0, r0, r1, asr r0
    1bac:	00000000 	andeq	r0, r0, r0
		return NULL;
    1bb0:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
			dispose (p, dsp);
    1bc4:	00560001 	subseq	r0, r6, r1
	...
	if ((p = apb (size)) != NULL)
    1bd4:	01000000 	mrseq	r0, (UNDEF: 0)
		return (address)(p + 1);
    1bd8:	00005000 	andeq	r5, r0, r0
    1bdc:	00000000 	andeq	r0, r0, r0
    1be0:	19540000 	ldmdbne	r4, {}^	; <UNPREDICTABLE>
    1be4:	19820000 	stmibne	r2, {}	; <UNPREDICTABLE>
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1be8:	00010000 	andeq	r0, r1, r0
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    1bec:	00198850 	andseq	r8, r9, r0, asr r8
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1bf0:	0019a800 	andseq	sl, r9, r0, lsl #16
    1bf4:	50000100 	andpl	r0, r0, r0, lsl #2
		syserror (EREQPAR, "tcv28");
    1bf8:	000019e8 	andeq	r1, r0, r8, ror #19
		syserror (EMALLOC, "tcv29");
    1bfc:	000019ea 	andeq	r1, r0, sl, ror #19
	physical [phy] = ps;
    1c00:	00500001 	subseq	r0, r0, r1
	physinfo [phy] = info;
    1c04:	00000000 	andeq	r0, r0, r0
    1c08:	54000000 	strpl	r0, [r0], #-0
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    1c0c:	84000019 	strhi	r0, [r0], #-25	; 0xffffffe7
    1c10:	01000019 	tsteq	r0, r9, lsl r0
    1c14:	19845100 	stmibne	r4, {r8, ip, lr}
		syserror (EMALLOC, "tcv29");
    1c18:	19880000 	stmibne	r8, {}	; <UNPREDICTABLE>
    1c1c:	00010000 	andeq	r0, r1, r0
	q_init (q);
    1c20:	00198857 	andseq	r8, r9, r7, asr r8
}
    1c24:	0019a800 	andseq	sl, r9, r0, lsl #16
    1c28:	51000100 	mrspl	r0, (UNDEF: 16)
    1c2c:	000019a8 	andeq	r1, r0, r8, lsr #19
    1c30:	000019b4 			; <UNDEFINED> instruction: 0x000019b4
    1c34:	b8570001 	ldmdalt	r7, {r0}^
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1c38:	e8000019 	stmda	r0, {r0, r3, r4}
	verify_fph (phy, "tcv30");
    1c3c:	01000019 	tsteq	r0, r9, lsl r0
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1c40:	19e85700 	stmibne	r8!, {r8, r9, sl, ip, lr}^
    1c44:	19ed0000 	stmibne	sp!, {}^	; <UNPREDICTABLE>
	verify_fph (phy, "tcv30");
    1c48:	00010000 	andeq	r0, r1, r0
    1c4c:	0019ed51 	andseq	lr, r9, r1, asr sp
    1c50:	001a1400 	andseq	r1, sl, r0, lsl #8
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1c54:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1c60:	00001954 	andeq	r1, r0, r4, asr r9
		if (plugins [plg] == NULL)
    1c64:	00001984 	andeq	r1, r0, r4, lsl #19
    1c68:	78910002 	ldmvc	r1, {r1}
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    1c6c:	00001988 	andeq	r1, r0, r8, lsl #19
}
    1c70:	000019a8 	andeq	r1, r0, r8, lsr #19
    1c74:	78910002 	ldmvc	r1, {r1}
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1c78:	000019b8 			; <UNDEFINED> instruction: 0x000019b8
    1c7c:	000019c4 	andeq	r1, r0, r4, asr #19
    1c80:	78910002 	ldmvc	r1, {r1}
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1c84:	000019e8 	andeq	r1, r0, r8, ror #19
    1c88:	00001a14 	andeq	r1, r0, r4, lsl sl
    1c8c:	78910002 	ldmvc	r1, {r1}
	...
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    1c98:	0000199c 	muleq	r0, ip, r9
	len -= (ap.head + ap.tail);
    1c9c:	000019ac 	andeq	r1, r0, ip, lsr #19
    1ca0:	b8560001 	ldmdalt	r6, {r0}^
    1ca4:	14000019 	strne	r0, [r0], #-25	; 0xffffffe7
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    1ca8:	0100001a 	tsteq	r0, sl, lsl r0
    1cac:	00005600 	andeq	r5, r0, r0, lsl #12
    1cb0:	00000000 	andeq	r0, r0, r0
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    1cb4:	19b80000 	ldmibne	r8!, {}	; <UNPREDICTABLE>
    1cb8:	19d20000 	ldmibne	r2, {}^	; <UNPREDICTABLE>
    1cbc:	00010000 	andeq	r0, r1, r0
	return 1;
    1cc0:	0019d250 	andseq	sp, r9, r0, asr r2
    1cc4:	0019d600 	andseq	sp, r9, r0, lsl #12
    1cc8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    1ccc:	000019d6 	ldrdeq	r1, [r0], -r6
    1cd0:	000019da 	ldrdeq	r1, [r0], -sl
	verify_fph (phy, "tcv32");
    1cd4:	da500001 	ble	1401ce0 <__ccfg+0x13e1d38>
    1cd8:	e8000019 	stmda	r0, {r0, r3, r4}
    1cdc:	01000019 	tsteq	r0, r9, lsl r0
    1ce0:	19ee5400 	stmibne	lr!, {sl, ip, lr}^
    1ce4:	19f60000 	ldmibne	r6!, {}^	; <UNPREDICTABLE>
    1ce8:	00010000 	andeq	r0, r1, r0
	oq = oqueues [phy];
    1cec:	0019f650 	andseq	pc, r9, r0, asr r6	; <UNPREDICTABLE>
	b = q_first (oq);
    1cf0:	001a1400 	andseq	r1, sl, r0, lsl #8
	if (q_end (b, oq)) {
    1cf4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
}
    1d00:	000018e4 	andeq	r1, r0, r4, ror #17
		return NULL;
    1d04:	0000190a 	andeq	r1, r0, sl, lsl #18
    1d08:	0e500001 	cdpeq	0, 5, cr0, cr0, cr1, {0}
    1d0c:	2b000019 	blcs	1d78 <tcvphy_end+0x30>
    1d10:	01000019 	tsteq	r0, r9, lsl r0
	verify_fph (phy, "tcv33");
    1d14:	19385000 	ldmdbne	r8!, {ip, lr}
    1d18:	193a0000 	ldmdbne	sl!, {}	; <UNPREDICTABLE>
    1d1c:	00010000 	andeq	r0, r1, r0
    1d20:	00000050 	andeq	r0, r0, r0, asr r0
    1d24:	00000000 	andeq	r0, r0, r0
    1d28:	0018ee00 	andseq	lr, r8, r0, lsl #28
	oq = oqueues [phy];
    1d2c:	00193400 	andseq	r3, r9, r0, lsl #8
	b = q_first (oq);
    1d30:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
		return NULL;
    1d34:	00001934 	andeq	r1, r0, r4, lsr r9
	return (address)(b + 1);
    1d38:	00001937 	andeq	r1, r0, r7, lsr r9
}
    1d3c:	38500001 	ldmdacc	r0, {r0}^
    1d40:	3e000019 	mcrcc	0, 0, r0, cr0, cr9, {0}
    1d44:	01000019 	tsteq	r0, r9, lsl r0
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    1d48:	193e5400 	ldmdbne	lr!, {sl, ip, lr}
	verify_plg (b, tcv_xmt, "tcv34");
    1d4c:	19410000 	stmdbne	r1, {}^	; <UNPREDICTABLE>
	hblock_t *b = header (pkt);
    1d50:	00010000 	andeq	r0, r1, r0
	verify_plg (b, tcv_xmt, "tcv34");
    1d54:	00000050 	andeq	r0, r0, r0, asr r0
    1d58:	00000000 	andeq	r0, r0, r0
    1d5c:	0017cc00 	andseq	ip, r7, r0, lsl #24
    1d60:	0017d200 	andseq	sp, r7, r0, lsl #4
    1d64:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	dispose (b, plugins [b->attributes.b.plugin] ->
    1d70:	000017fc 	strdeq	r1, [r0], -ip
}
    1d74:	00001809 	andeq	r1, r0, r9, lsl #16
	dispose (b, plugins [b->attributes.b.plugin] ->
    1d78:	00500001 	subseq	r0, r0, r1
    1d7c:	00000000 	andeq	r0, r0, r0
    1d80:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
}
    1d84:	fa000017 	blx	1de8 <get_byte+0x10>
    while(1)
    1d88:	01000017 	tsteq	r0, r7, lsl r0
{
    1d8c:	00005000 	andeq	r5, r0, r0
    SetupTrimDevice();
    1d90:	00000000 	andeq	r0, r0, r0
    pui32Src = &_etext;
    1d94:	180c0000 	stmdane	ip, {}	; <UNPREDICTABLE>
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1d98:	181a0000 	ldmdane	sl, {}	; <UNPREDICTABLE>
    __asm("    ldr     r0, =_bss\n"
    1d9c:	00010000 	andeq	r0, r1, r0
    1da0:	00181a50 	andseq	r1, r8, r0, asr sl
    1da4:	00182000 	andseq	r2, r8, r0
    1da8:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    1dac:	00001820 	andeq	r1, r0, r0, lsr #16
   main();
    1db0:	00001829 	andeq	r1, r0, r9, lsr #16
    FaultISR();
    1db4:	29500001 	ldmdbcs	r0, {r0}^
        *pui32Dest++ = *pui32Src++;
    1db8:	58000018 	stmdapl	r0, {r3, r4}
    1dbc:	01000018 	tsteq	r0, r8, lsl r0
    1dc0:	00005500 	andeq	r5, r0, r0, lsl #10
    1dc4:	00000000 	andeq	r0, r0, r0
    1dc8:	180c0000 	stmdane	ip, {}	; <UNPREDICTABLE>
    1dcc:	181c0000 	ldmdane	ip, {}	; <UNPREDICTABLE>
    1dd0:	00010000 	andeq	r0, r1, r0
    1dd4:	00181c51 	andseq	r1, r8, r1, asr ip
static byte get_byte () {
    1dd8:	00182000 	andseq	r2, r8, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1ddc:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    1de0:	00001820 	andeq	r1, r0, r0, lsr #16
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1de4:	00001829 	andeq	r1, r0, r9, lsr #16
    1de8:	29510001 	ldmdbcs	r1, {r0}^
		if (ee_inp)
    1dec:	58000018 	stmdapl	r0, {r3, r4}
			b |= 1;
    1df0:	01000018 	tsteq	r0, r8, lsl r0
    1df4:	00005400 	andeq	r5, r0, r0, lsl #8
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1df8:	00000000 	andeq	r0, r0, r0
	for (b = 0, i = 0; i < 8; i++) {
    1dfc:	18180000 	ldmdane	r8, {}	; <UNPREDICTABLE>
}
    1e00:	181a0000 	ldmdane	sl, {}	; <UNPREDICTABLE>
    1e04:	00010000 	andeq	r0, r1, r0
    1e08:	00181a50 	andseq	r1, r8, r0, asr sl
static void put_byte (byte b) {
    1e0c:	00182000 	andseq	r2, r8, r0
    1e10:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
		if (b & 0x80)
    1e1c:	00001818 	andeq	r1, r0, r8, lsl r8
    1e20:	0000181c 	andeq	r1, r0, ip, lsl r8
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1e24:	1c510001 	mrrcne	0, 0, r0, r1, cr1
	for (i = 0; i < 8; i++) {
    1e28:	20000018 	andcs	r0, r0, r8, lsl r0
		b <<= 1;
    1e2c:	01000018 	tsteq	r0, r8, lsl r0
	for (i = 0; i < 8; i++) {
    1e30:	00005400 	andeq	r5, r0, r0, lsl #8
}
    1e34:	00000000 	andeq	r0, r0, r0
    1e38:	18580000 	ldmdane	r8, {}^	; <UNPREDICTABLE>
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1e3c:	18880000 	stmne	r8, {}	; <UNPREDICTABLE>
    1e40:	00010000 	andeq	r0, r1, r0
	put_byte (cmd);
    1e44:	00188850 	andseq	r8, r8, r0, asr r8
    1e48:	00189400 	andseq	r9, r8, r0, lsl #8
}
    1e4c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    1e50:	00001894 	muleq	r0, r4, r8
static void wwait (word st, word del) {
    1e54:	0000189b 	muleq	r0, fp, r8
    1e58:	9c510001 	mrrcls	0, 0, r0, r1, cr1
    1e5c:	c2000018 	andgt	r0, r0, #24
	while (dopen && (rdsr () & 1)) {
    1e60:	01000018 	tsteq	r0, r8, lsl r0
    1e64:	18c25000 	stmiane	r2, {ip, lr}^
    1e68:	18c40000 	stmiane	r4, {}^	; <UNPREDICTABLE>
    1e6c:	00010000 	andeq	r0, r1, r0
	put_byte (CMD_RDSR);
    1e70:	0018c454 	andseq	ip, r8, r4, asr r4
	r = get_byte ();
    1e74:	0018cb00 	andseq	ip, r8, r0, lsl #22
    1e78:	50000100 	andpl	r0, r0, r0, lsl #2
	while (dopen && (rdsr () & 1)) {
    1e7c:	000018cc 	andeq	r1, r0, ip, asr #17
}
    1e80:	000018e4 	andeq	r1, r0, r4, ror #17
		if (st == WNONE)
    1e84:	00500001 	subseq	r0, r0, r1
    1e88:	00000000 	andeq	r0, r0, r0
			mdelay (1);
    1e8c:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    1e90:	62000018 	andvs	r0, r0, #24
			delay (del, st);
    1e94:	01000018 	tsteq	r0, r8, lsl r0
    1e98:	00005100 	andeq	r5, r0, r0, lsl #2
			release;
    1e9c:	00000000 	andeq	r0, r0, r0
    1ea0:	18a40000 	stmiane	r4!, {}	; <UNPREDICTABLE>
    1ea4:	18c20000 	stmiane	r2, {}^	; <UNPREDICTABLE>
static void ready () {
    1ea8:	00010000 	andeq	r0, r1, r0
	if (dopen) {
    1eac:	0018c250 	andseq	ip, r8, r0, asr r2
		wwait (WNONE, 1);
    1eb0:	0018c400 	andseq	ip, r8, r0, lsl #8
    1eb4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
}
    1ec0:	00001af4 	strdeq	r1, [r0], -r4
    1ec4:	00001afa 	strdeq	r1, [r0], -sl
    1ec8:	fa500001 	blx	1401ed4 <__ccfg+0x13e1f2c>
	udelay (1);
    1ecc:	0600001a 			; <UNDEFINED> instruction: 0x0600001a
    1ed0:	0100001b 	tsteq	r0, fp, lsl r0
	udelay (1);
    1ed4:	00005300 	andeq	r5, r0, r0, lsl #6
		dopen = DOPEN_TEMP;
    1ed8:	00000000 	andeq	r0, r0, r0
    1edc:	1af40000 	bne	ffd01ee4 <_estack+0xdfcfcee4>
    1ee0:	1afe0000 	bne	fff81ee8 <_estack+0xdff7cee8>
    1ee4:	00010000 	andeq	r0, r1, r0
static void cclose () {
    1ee8:	001afe51 	andseq	pc, sl, r1, asr lr	; <UNPREDICTABLE>
	if (dopen == DOPEN_TEMP) {
    1eec:	001b0a00 	andseq	r0, fp, r0, lsl #20
    1ef0:	50000100 	andpl	r0, r0, r0, lsl #2
		wwait (WNONE, 1);
    1ef4:	00001b10 	andeq	r1, r0, r0, lsl fp
    1ef8:	00001b15 	andeq	r1, r0, r5, lsl fp
	cmd_0 (CMD_DP);
    1efc:	00500001 	subseq	r0, r0, r1
    1f00:	00000000 	andeq	r0, r0, r0
		dopen = 0;
    1f04:	f4000000 	vst4.8	{d0-d3}, [r0], r0
}
    1f08:	0200001a 	andeq	r0, r0, #26
word ee_open () {
    1f0c:	0100001b 	tsteq	r0, fp, lsl r0
	ready ();
    1f10:	1b025200 	blne	96718 <__ccfg+0x76770>
	dopen = DOPEN_PERM;
    1f14:	1b0c0000 	blne	301f1c <__ccfg+0x2e1f74>
    1f18:	00010000 	andeq	r0, r1, r0
}
    1f1c:	001b1051 	andseq	r1, fp, r1, asr r0
	if (dopen) {
    1f20:	001b1500 	andseq	r1, fp, r0, lsl #10
    1f24:	51000100 	mrspl	r0, (UNDEF: 16)
	...
}
    1f30:	00001b08 	andeq	r1, r0, r8, lsl #22
int ser_in (word st, char *buf, int len) {
    1f34:	00001b0a 	andeq	r1, r0, sl, lsl #22
    1f38:	00500001 	subseq	r0, r0, r1
	if (len == 0)
    1f3c:	00000000 	andeq	r0, r0, r0
	if (__inpline == NULL) {
    1f40:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
		if ((prcs = running (__inserial)) == 0) {
    1f44:	0c00001b 	stceq	0, cr0, [r0], {27}
    1f48:	0100001b 	tsteq	r0, fp, lsl r0
			prcs = runthread (__inserial);
    1f4c:	00005100 	andeq	r5, r0, r0, lsl #2
    1f50:	00000000 	andeq	r0, r0, r0
			if (prcs == 0) {
    1f54:	1b800000 	blne	fe001f5c <_estack+0xddffcf5c>
				npwait (st);
    1f58:	1b840000 	blne	fe101f60 <_estack+0xde0fcf60>
		release;
    1f5c:	00010000 	andeq	r0, r1, r0
		join (prcs, st);
    1f60:	00000050 	andeq	r0, r0, r0, asr r0
    1f64:	00000000 	andeq	r0, r0, r0
	if (*__inpline == NULL) // bin cmd
    1f68:	001b8000 	andseq	r8, fp, r0
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    1f6c:	001b9200 	andseq	r9, fp, r0, lsl #4
	if (prcs >= len)
    1f70:	51000100 	mrspl	r0, (UNDEF: 16)
		prcs = len-1;
    1f74:	00001b92 	muleq	r0, r2, fp
	memcpy (buf, __inpline, prcs);
    1f78:	00001b96 	muleq	r0, r6, fp
    1f7c:	96560001 	ldrbls	r0, [r6], -r1
    1f80:	a600001b 			; <UNDEFINED> instruction: 0xa600001b
	ufree (__inpline);
    1f84:	0100001b 	tsteq	r0, fp, lsl r0
	__inpline = NULL;
    1f88:	1ba65100 	blne	fe996390 <_estack+0xde991390>
	if (*buf) // if it's NULL, it's a bin cmd
    1f8c:	1ba80000 	blne	fea01f94 <_estack+0xde9fcf94>
		buf [prcs] = '\0';
    1f90:	00010000 	andeq	r0, r1, r0
}
    1f94:	001ba856 	andseq	sl, fp, r6, asr r8
		prcs = strlen (__inpline);
    1f98:	001bab00 	andseq	sl, fp, r0, lsl #22
    1f9c:	51000100 	mrspl	r0, (UNDEF: 16)
		return 0;
    1fa0:	00001bab 	andeq	r1, r0, fp, lsr #23
    1fa4:	00001bce 	andeq	r1, r0, lr, asr #23
    1fa8:	ce560001 	cdpgt	0, 5, cr0, cr6, cr1, {0}
int ser_outf (word st, const char *m, ...) {
    1fac:	d100001b 	tstle	r0, fp, lsl r0
    1fb0:	0100001b 	tsteq	r0, fp, lsl r0
	if ((prcs = running (__outserial)) != 0) {
    1fb4:	1bd15100 	blne	ff4563bc <_estack+0xdf4513bc>
    1fb8:	1be80000 	blne	ffa01fc0 <_estack+0xdf9fcfc0>
		join (prcs, st);
    1fbc:	00010000 	andeq	r0, r1, r0
    1fc0:	00000056 	andeq	r0, r0, r6, asr r0
		release;
    1fc4:	00000000 	andeq	r0, r0, r0
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1fc8:	001b8000 	andseq	r8, fp, r0
    1fcc:	001b9500 	andseq	r9, fp, r0, lsl #10
    1fd0:	52000100 	andpl	r0, r0, #0, 2
		umwait (st);
    1fd4:	00001b95 	muleq	r0, r5, fp
    1fd8:	00001b96 	muleq	r0, r6, fp
	if (runstrand (__outserial, buf) == 0) {
    1fdc:	96550001 	ldrbls	r0, [r5], -r1
    1fe0:	ab00001b 	blge	2054 <ser_inf+0x54>
    1fe4:	0100001b 	tsteq	r0, fp, lsl r0
		ufree (buf);
    1fe8:	1bab5200 	blne	fead67f0 <_estack+0xdead17f0>
		npwait (st);
    1fec:	1bce0000 	blne	ff381ff4 <_estack+0xdf37cff4>
}
    1ff0:	00010000 	andeq	r0, r1, r0
    1ff4:	001bce55 	andseq	ip, fp, r5, asr lr
    1ff8:	001bd100 	andseq	sp, fp, r0, lsl #2
    1ffc:	52000100 	andpl	r0, r0, #0, 2
int ser_inf (word st, const char *fmt, ...) {
    2000:	00001bd1 	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    2004:	00001be8 	andeq	r1, r0, r8, ror #23
	if (fmt == NULL)
    2008:	00550001 	subseq	r0, r5, r1
	if (__inpline == NULL) {
    200c:	00000000 	andeq	r0, r0, r0
		if ((prcs = running (__inserial)) == 0) {
    2010:	ac000000 	stcge	0, cr0, [r0], {-0}
    2014:	b200001b 	andlt	r0, r0, #27
			prcs = runthread (__inserial);
    2018:	0100001b 	tsteq	r0, fp, lsl r0
    201c:	1bb45000 	blne	fed16024 <_estack+0xded11024>
			if (prcs == 0) {
    2020:	1bc70000 	blne	ff1c2028 <_estack+0xdf1bd028>
				npwait (st);
    2024:	00010000 	andeq	r0, r1, r0
		release;
    2028:	001bc750 	andseq	ip, fp, r0, asr r7
		join (prcs, st);
    202c:	001bce00 	andseq	ip, fp, r0, lsl #28
    2030:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	va_start (ap, fmt);
    2034:	00001bd2 	ldrdeq	r1, [r0], -r2
	prcs = vscan (__inpline, fmt, ap);
    2038:	00001bd8 	ldrdeq	r1, [r0], -r8
    203c:	00500001 	subseq	r0, r0, r1
	ufree (__inpline);
    2040:	00000000 	andeq	r0, r0, r0
	__inpline = NULL;
    2044:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
}
    2048:	9200001b 	andls	r0, r0, #27
    204c:	0100001b 	tsteq	r0, fp, lsl r0
    2050:	00005100 	andeq	r5, r0, r0, lsl #2
		return 0;
    2054:	00000000 	andeq	r0, r0, r0
    2058:	1d980000 	ldcne	0, cr0, [r8]
    205c:	1db10000 	ldcne	0, cr0, [r1]
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    2060:	00010000 	andeq	r0, r1, r0
    2064:	001dbc52 	andseq	fp, sp, r2, asr ip
    2068:	001dd000 	andseq	sp, sp, r0
	RF_cmdFs.frequency = 
    206c:	52000100 	andpl	r0, r0, #0, 2
	...
}
    2078:	00001d98 	muleq	r0, r8, sp
    207c:	00001db1 			; <UNDEFINED> instruction: 0x00001db1
static int option (int opt, address val) {
    2080:	c0530001 	subsgt	r0, r3, r1
    2084:	d000001d 	andle	r0, r0, sp, lsl r0
    2088:	0100001d 	tsteq	r0, sp, lsl r0
    208c:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    209c:	00010000 	andeq	r0, r1, r0
    20a0:	00000050 	andeq	r0, r0, r0, asr r0
    20a4:	00000000 	andeq	r0, r0, r0
    20a8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			_BIS (dstate, DSTATE_RXON);
    20bc:	00510001 	subseq	r0, r1, r1
	int ret = 0;
    20c0:	00000000 	andeq	r0, r0, r0
			p_trigger (drvprcs, qevent);
    20c4:	01000000 	mrseq	r0, (UNDEF: 0)
    20c8:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    20d8:	00010000 	andeq	r0, r1, r0
    20dc:	00000052 	andeq	r0, r0, r2, asr r0
    20e0:	00000000 	andeq	r0, r0, r0
    20e4:	52000100 	andpl	r0, r0, #0, 2
	...
			statid = (val == NULL) ? 0 : *val;
    20f8:	00510001 	subseq	r0, r1, r1
	...
	if (val != NULL)
    2108:	01000000 	mrseq	r0, (UNDEF: 0)
		*val = ret;
    210c:	00005000 	andeq	r5, r0, r0
	...
				memcpy (val, &rxstat,
    211c:	00010000 	andeq	r0, r1, r0
    2120:	00000050 	andeq	r0, r0, r0, asr r0
				memset (&rxstat, 0, 
    2124:	00000000 	andeq	r0, r0, r0
    2128:	03000500 	movweq	r0, #1280	; 0x500
	...
				utimer_set (bckf_timer, *val);
    2138:	00500001 	subseq	r0, r0, r1
    213c:	00000000 	andeq	r0, r0, r0
    2140:	05000000 	streq	r0, [r0, #-0]
			for (ret = 0; ret < 8; ret++)
    2144:	00000300 	andeq	r0, r0, r0, lsl #6
	...
    2158:	00010000 	andeq	r0, r1, r0
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    215c:	00000050 	andeq	r0, r0, r0, asr r0
    2160:	00000000 	andeq	r0, r0, r0
    2164:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			_BIS (dstate, DSTATE_IRST);
    2170:	00500001 	subseq	r0, r0, r1
    2174:	00000000 	andeq	r0, r0, r0
    2178:	01000000 	mrseq	r0, (UNDEF: 0)
			ret = (int) channel;
    217c:	00005000 	andeq	r5, r0, r0
	...
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    218c:	00010000 	andeq	r0, r1, r0
    2190:	00000050 	andeq	r0, r0, r0, asr r0
	...
			ret = (int) vrate;
    21a0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    21b4:	00500001 	subseq	r0, r0, r1
	...
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    21c4:	01000000 	mrseq	r0, (UNDEF: 0)
    21c8:	00005100 	andeq	r5, r0, r0, lsl #2
    21cc:	00000000 	andeq	r0, r0, r0
    21d0:	00010000 	andeq	r0, r1, r0
			syserror (EREQPAR, "cc13 op");
    21d4:	00000056 	andeq	r0, r0, r6, asr r0
	...
    21e4:	52000100 	andpl	r0, r0, #0, 2
	...
    21f8:	00530001 	subseq	r0, r3, r1
	...
    2208:	01000000 	mrseq	r0, (UNDEF: 0)
    220c:	00005400 	andeq	r5, r0, r0, lsl #8
static void issue_cmd (lword cmd) {
    2210:	00000000 	andeq	r0, r0, r0
    2214:	00010000 	andeq	r0, r1, r0
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    2218:	00000054 	andeq	r0, r0, r4, asr r0
    221c:	00000000 	andeq	r0, r0, r0
    2220:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
			diag ("HUP %lx %lx", cmd, res);
    2234:	00500001 	subseq	r0, r0, r1
    2238:	00000000 	andeq	r0, r0, r0
			syserror (EHARDWARE, "hang ic0");
    223c:	01000000 	mrseq	r0, (UNDEF: 0)
		udelay (1);
    2240:	00005000 	andeq	r5, r0, r0
	...
}
    2250:	00010000 	andeq	r0, r1, r0
    2254:	00000051 	andeq	r0, r0, r1, asr r0
static void rx_de () {
    2258:	00000000 	andeq	r0, r0, r0
	if ((dstate & DSTATE_RXAC) == 0)
    225c:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
	_BIC (dstate, DSTATE_RXAC);
    2268:	00510001 	subseq	r0, r1, r1
	...
}
    2278:	01000000 	mrseq	r0, (UNDEF: 0)
static void rf_off () {
    227c:	00005200 	andeq	r5, r0, r0, lsl #4
	if ((dstate & DSTATE_RFON) == 0)
    2280:	00000000 	andeq	r0, r0, r0
    2284:	00010000 	andeq	r0, r1, r0
	IntDisable (INT_RFC_CPE_0);
    2288:	00000054 	andeq	r0, r0, r4, asr r0
	...
	RFCSynthPowerDown ();
    2298:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
	OSCHF_SwitchToRcOscTurnOffXosc ();
    22ac:	00500001 	subseq	r0, r0, r1
	...
	_BIC (dstate, DSTATE_RFON);
    22bc:	01000000 	mrseq	r0, (UNDEF: 0)
    22c0:	00005000 	andeq	r5, r0, r0
}
    22c4:	00000000 	andeq	r0, r0, r0
    22c8:	00010000 	andeq	r0, r1, r0
    22cc:	00000055 	andeq	r0, r0, r5, asr r0
    22d0:	00000000 	andeq	r0, r0, r0
    22d4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		if (timeout-- == 0) {
    22e8:	00510001 	subseq	r0, r1, r1
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    22ec:	00000000 	andeq	r0, r0, r0
    22f0:	01000000 	mrseq	r0, (UNDEF: 0)
    22f4:	00005600 	andeq	r5, r0, r0, lsl #12
			syserror (EHARDWARE, "rt2");
    22f8:	00000000 	andeq	r0, r0, r0
    22fc:	00010000 	andeq	r0, r1, r0
		udelay (1);
    2300:	00000056 	andeq	r0, r0, r6, asr r0
		if (cmd->status == tstat)
    2304:	00000000 	andeq	r0, r0, r0
}
    2308:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    231c:	00520001 	subseq	r0, r2, r1
	OSCHF_TurnOnXosc();
    2320:	00000000 	andeq	r0, r0, r0
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    2324:	01000000 	mrseq	r0, (UNDEF: 0)
    2328:	00005200 	andeq	r5, r0, r0, lsl #4
    232c:	00000000 	andeq	r0, r0, r0
    2330:	1e540000 	cdpne	0, 5, cr0, cr4, cr0, {0}
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2334:	1e640000 	cdpne	0, 6, cr0, cr4, cr0, {0}
    2338:	00010000 	andeq	r0, r1, r0
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    233c:	00000050 	andeq	r0, r0, r0, asr r0
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    2340:	00000000 	andeq	r0, r0, r0
	issue_cmd (
    2344:	001e5400 	andseq	r5, lr, r0, lsl #8
    2348:	001e6400 	andseq	r6, lr, r0, lsl #8
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    234c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
   pPatchTab[80] = 0;
    2358:	00001e76 	andeq	r1, r0, r6, ror lr
   } while (--nIterations);
    235c:	00001e7a 	andeq	r1, r0, sl, ror lr
   pPatchTab[53] = 2;
    2360:	00500001 	subseq	r0, r0, r1
    2364:	00000000 	andeq	r0, r0, r0
   pPatchTab[55] = 3;
    2368:	3c000000 	stccc	0, cr0, [r0], {-0}
   pPatchTab[110] = 4;
    236c:	4700001e 	smladmi	r0, lr, r0, r0
   pPatchTab[107] = 5;
    2370:	0100001e 	tsteq	r0, lr, lsl r0
   pPatchTab[65] = 6;
    2374:	00005000 	andeq	r5, r0, r0
    2378:	00000000 	andeq	r0, r0, r0
   pPatchTab[57] = 1;
    237c:	1e0c0000 	cdpne	0, 0, cr0, cr12, cr0, {0}
   pIrqPatch[1] = _IRQ_PATCH_0;
    2380:	1e280000 	cdpne	0, 2, cr0, cr8, cr0, {0}
   const uint32_t *pS = patchGenfskRfe;
    2384:	00010000 	andeq	r0, r1, r0
      t2 = *pS++;
    2388:	001e3050 	andseq	r3, lr, r0, asr r0
      t4 = *pS++;
    238c:	001e3c00 	andseq	r3, lr, r0, lsl #24
      t6 = *pS++;
    2390:	50000100 	andpl	r0, r0, r0, lsl #2
	...
      *pD++ = t2;
    239c:	00001de8 	andeq	r1, r0, r8, ror #27
      *pD++ = t3;
    23a0:	00001dec 	andeq	r1, r0, ip, ror #27
      *pD++ = t5;
    23a4:	f0500001 			; <UNDEFINED> instruction: 0xf0500001
      *pD++ = t7;
    23a8:	0c00001d 	stceq	0, cr0, [r0], {29}
   } while (--nIterations);
    23ac:	0100001e 	tsteq	r0, lr, lsl r0
    23b0:	00005000 	andeq	r5, r0, r0
      *pD++ = t8;
    23b4:	00000000 	andeq	r0, r0, r0
   } while (--nIterations);
    23b8:	1f340000 	svcne	0x00340000
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    23bc:	1f420000 	svcne	0x00420000
   *pD++ = t2;
    23c0:	00010000 	andeq	r0, r1, r0
   *pD++ = t3;
    23c4:	001f9e50 	andseq	r9, pc, r0, asr lr	; <UNPREDICTABLE>
   *pD++ = t4;
    23c8:	001fac00 	andseq	sl, pc, r0, lsl #24
   *pD++ = t5;
    23cc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	RFCAdi3VcoLdoVoltageMode (true);
    23d8:	00001f34 	andeq	r1, r0, r4, lsr pc
       	RFCRfTrimSet (&rfTrim);
    23dc:	00001f49 	andeq	r1, r0, r9, asr #30
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    23e0:	49510001 	ldmdbmi	r1, {r0}^
    23e4:	6800001f 	stmdavs	r0, {r0, r1, r2, r3, r4}
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    23e8:	0100001f 	tsteq	r0, pc, lsl r0
    23ec:	1f685700 	svcne	0x00685700
	issue_cmd ((lword)&cmd_srt);
    23f0:	1f700000 	svcne	0x00700000
    23f4:	00010000 	andeq	r0, r1, r0
	issue_cmd ((lword)&RF_cmdFs);
    23f8:	001f7051 	andseq	r7, pc, r1, asr r0	; <UNPREDICTABLE>
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    23fc:	001f9600 	andseq	r9, pc, r0, lsl #12
    2400:	57000100 	strpl	r0, [r0, -r0, lsl #2]
    2404:	00001f96 	muleq	r0, r6, pc	; <UNPREDICTABLE>
	IntEnable (INT_RFC_CPE_0);
    2408:	00001f99 	muleq	r0, r9, pc	; <UNPREDICTABLE>
	_BIC (dstate, DSTATE_IRST);
    240c:	99510001 	ldmdbls	r1, {r0}^
    2410:	9e00001f 	mcrls	0, 0, r0, cr0, cr15, {0}
    2414:	0100001f 	tsteq	r0, pc, lsl r0
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    2418:	1f9e5700 	svcne	0x009e5700
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    241c:	1fac0000 	svcne	0x00ac0000
	IntEnable (INT_RFC_CPE_0);
    2420:	00010000 	andeq	r0, r1, r0
    2424:	00000051 	andeq	r0, r0, r1, asr r0
}
    2428:	00000000 	andeq	r0, r0, r0
	IntEnable (INT_RFC_CPE_0);
    242c:	001f3400 	andseq	r3, pc, r0, lsl #8
    2430:	001f4900 	andseq	r4, pc, r0, lsl #18
    2434:	52000100 	andpl	r0, r0, #0, 2
    2438:	00001f49 	andeq	r1, r0, r9, asr #30
    243c:	00001f68 	andeq	r1, r0, r8, ror #30
    2440:	68550001 	ldmdavs	r5, {r0}^
    2444:	7000001f 	andvc	r0, r0, pc, lsl r0
    2448:	0100001f 	tsteq	r0, pc, lsl r0
    244c:	1f705200 	svcne	0x00705200
    2450:	1f960000 	svcne	0x00960000
    2454:	00010000 	andeq	r0, r1, r0
    2458:	001f9655 	andseq	r9, pc, r5, asr r6	; <UNPREDICTABLE>
    245c:	001f9900 	andseq	r9, pc, r0, lsl #18
    2460:	52000100 	andpl	r0, r0, #0, 2
    2464:	00001f99 	muleq	r0, r9, pc	; <UNPREDICTABLE>
    2468:	00001f9e 	muleq	r0, lr, pc	; <UNPREDICTABLE>
    246c:	9e550001 	cdpls	0, 5, cr0, cr5, cr1, {0}
    2470:	ac00001f 	stcge	0, cr0, [r0], {31}
    2474:	0100001f 	tsteq	r0, pc, lsl r0
    2478:	00005200 	andeq	r5, r0, r0, lsl #4
    247c:	00000000 	andeq	r0, r0, r0
    2480:	1f4a0000 	svcne	0x004a0000
    2484:	1f500000 	svcne	0x00500000
    2488:	00010000 	andeq	r0, r1, r0
    248c:	001f5050 	andseq	r5, pc, r0, asr r0	; <UNPREDICTABLE>
static void rx_int_enable () {
    2490:	001f5300 	andseq	r5, pc, r0, lsl #6
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2494:	51000100 	mrspl	r0, (UNDEF: 16)
    2498:	00001f54 	andeq	r1, r0, r4, asr pc
    249c:	00001f58 	andeq	r1, r0, r8, asr pc
    24a0:	60500001 	subsvs	r0, r0, r1
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    24a4:	6500001f 	strvs	r0, [r0, #-31]	; 0xffffffe1
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    24a8:	0100001f 	tsteq	r0, pc, lsl r0
    24ac:	1f705000 	svcne	0x00705000
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    24b0:	1f920000 	svcne	0x00920000
    24b4:	00010000 	andeq	r0, r1, r0
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    24b8:	001f9c54 	andseq	r9, pc, r4, asr ip	; <UNPREDICTABLE>
    24bc:	001f9e00 	andseq	r9, pc, r0, lsl #28
    24c0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    24cc:	00001fac 	andeq	r1, r0, ip, lsr #31
		if (db->status == DATA_ENTRY_FINISHED) {
    24d0:	00001fb4 			; <UNDEFINED> instruction: 0x00001fb4
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    24d4:	00500001 	subseq	r0, r0, r1
    24d8:	00000000 	andeq	r0, r0, r0
			nr++;
    24dc:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    24e0:	c100001f 	tstgt	r0, pc, lsl r0
    24e4:	0100001f 	tsteq	r0, pc, lsl r0
    24e8:	1fc15000 	svcne	0x00c15000
    24ec:	1fc60000 	svcne	0x00c60000
				__dp [pl + 1] = __dp [pl] - 128;
    24f0:	00010000 	andeq	r0, r1, r0
				pl = __dp [1] + 2;
    24f4:	001fc656 	andseq	ip, pc, r6, asr r6	; <UNPREDICTABLE>
				__dp [pl + 1] = __dp [pl] - 128;
    24f8:	001fcf00 	andseq	ip, pc, r0, lsl #30
    24fc:	50000100 	andpl	r0, r0, r0, lsl #2
				__dp [pl] = 0;
    2500:	00001fcf 	andeq	r1, r0, pc, asr #31
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2504:	00001ff6 	strdeq	r1, [r0], -r6
    2508:	f6560001 			; <UNDEFINED> instruction: 0xf6560001
    250c:	0000001f 	andeq	r0, r0, pc, lsl r0
			db->status = DATA_ENTRY_PENDING;
    2510:	01000020 	tsteq	r0, r0, lsr #32
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2514:	00005000 	andeq	r5, r0, r0
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    2518:	00000000 	andeq	r0, r0, r0
				diag ("BAD RX");
    251c:	1fd00000 	svcne	0x00d00000
    2520:	1fd40000 	svcne	0x00d40000
	if (nr) {
    2524:	00010000 	andeq	r0, r1, r0
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2528:	001fd450 	andseq	sp, pc, r0, asr r4	; <UNPREDICTABLE>
}
    252c:	001fdc00 	andseq	sp, pc, r0, lsl #24
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2530:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    2534:	00001fdc 	ldrdeq	r1, [r0], -ip
    2538:	00001fe0 	andeq	r1, r0, r0, ror #31
}
    253c:	e0500001 	subs	r0, r0, r1
    2540:	f600001f 			; <UNDEFINED> instruction: 0xf600001f
    2544:	0100001f 	tsteq	r0, pc, lsl r0
    2548:	00005500 	andeq	r5, r0, r0, lsl #10
    254c:	00000000 	andeq	r0, r0, r0
    2550:	20000000 	andcs	r0, r0, r0
    2554:	200e0000 	andcs	r0, lr, r0
    2558:	00010000 	andeq	r0, r1, r0
    255c:	00205450 	eoreq	r5, r0, r0, asr r4
thread (cc1350_driver)
    2560:	00206000 	eoreq	r6, r0, r0
    2564:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2570:	00002016 	andeq	r2, r0, r6, lsl r0
		if (dstate & DSTATE_IRST) {
    2574:	0000201c 	andeq	r2, r0, ip, lsl r0
    2578:	1c500001 	mrrcne	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    257c:	1f000020 	svcne	0x00000020
			rf_off ();
    2580:	01000020 	tsteq	r0, r0, lsr #32
			_BIC (dstate,
    2584:	20205100 	eorcs	r5, r0, r0, lsl #2
    2588:	20240000 	eorcs	r0, r4, r0
		if (dstate & DSTATE_RXAC) {
    258c:	00010000 	andeq	r0, r1, r0
    2590:	00202c50 	eoreq	r2, r0, r0, asr ip
			if ((dstate & DSTATE_RXON) == 0)
    2594:	00203100 	eoreq	r3, r0, r0, lsl #2
				rx_de ();
    2598:	50000100 	andpl	r0, r0, r0, lsl #2
		if (paylen == 0) {
    259c:	0000203e 	andeq	r2, r0, lr, lsr r0
    25a0:	00002040 	andeq	r2, r0, r0, asr #32
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    25a4:	40500001 	subsmi	r0, r0, r1
    25a8:	48000020 	stmdami	r0, {r5}
    25ac:	01000020 	tsteq	r0, r0, lsr #32
    25b0:	00005400 	andeq	r5, r0, r0, lsl #8
				sysassert (paylen <= rbuffl && paylen > 0 &&
    25b4:	00000000 	andeq	r0, r0, r0
    25b8:	27c00000 	strbcs	r0, [r0, r0]
    25bc:	27ce0000 	strbcs	r0, [lr, r0]
    25c0:	00010000 	andeq	r0, r1, r0
    25c4:	0027ce50 	eoreq	ip, r7, r0, asr lr
    25c8:	0027d400 	eoreq	sp, r7, r0, lsl #8
    25cc:	56000100 	strpl	r0, [r0], -r0, lsl #2
    25d0:	000027d4 	ldrdeq	r2, [r0], -r4
		} else if (dstate & DSTATE_RXON) {
    25d4:	000027de 	ldrdeq	r2, [r0], -lr
	if (dstate & DSTATE_RFON)
    25d8:	de500001 	cdple	0, 5, cr0, cr0, cr1, {0}
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    25dc:	e2000027 	and	r0, r0, #39	; 0x27
		re->status = DATA_ENTRY_PENDING;
    25e0:	01000027 	tsteq	r0, r7, lsr #32
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    25e4:	27e25600 	strbcs	r5, [r2, r0, lsl #12]!
	issue_cmd ((lword)&RF_cmdPropRx);
    25e8:	27f20000 	ldrbcs	r0, [r2, r0]!
	_BIS (dstate, DSTATE_RXAC);
    25ec:	00010000 	andeq	r0, r1, r0
    25f0:	0027f250 	eoreq	pc, r7, r0, asr r2	; <UNPREDICTABLE>
    25f4:	0028ea00 	eoreq	lr, r8, r0, lsl #20
    25f8:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
				if (statid != 0xffff)
    2604:	000027c0 	andeq	r2, r0, r0, asr #15
    2608:	000027d0 	ldrdeq	r2, [r0], -r0
					((address)(RF_cmdPropTx.pPkt)) [0] =
    260c:	d4510001 	ldrble	r0, [r1], #-1
				RF_cmdPropTx.pktLen = (byte) paylen;
    2610:	e0000027 	and	r0, r0, r7, lsr #32
		if (paylen == 0) {
    2614:	01000027 	tsteq	r0, r7, lsr #32
			wait (qevent, DR_LOOP);
    2618:	27e25100 	strbcs	r5, [r2, r0, lsl #2]!
    261c:	27f20000 	ldrbcs	r0, [r2, r0]!
			if (dstate & DSTATE_RXAC) {
    2620:	00010000 	andeq	r0, r1, r0
    2624:	00000051 	andeq	r0, r0, r1, asr r0
				rx_int_enable ();
    2628:	00000000 	andeq	r0, r0, r0
			release;
    262c:	00282800 	eoreq	r2, r8, r0, lsl #16
			} else if (dstate & DSTATE_RFON) {
    2630:	00283c00 	eoreq	r3, r8, r0, lsl #24
				delay (offdelay, DR_GOOF);
    2634:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    2638:	0000283c 	andeq	r2, r0, ip, lsr r8
    263c:	00002842 	andeq	r2, r0, r2, asr #16
		if (bckf_timer) {
    2640:	00700002 	rsbseq	r0, r0, r2
	...
			wait (qevent, DR_LOOP);
    264c:	000027f2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
			delay (bckf_timer, DR_LOOP);
    2650:	000027fb 	strdeq	r2, [r0], -fp
    2654:	fb530001 	blx	14c2662 <__ccfg+0x14a26ba>
			if (dstate & DSTATE_RXAC)
    2658:	5e000027 	cdppl	0, 0, cr0, cr0, cr7, {1}
    265c:	01000028 	tsteq	r0, r8, lsr #32
	if (dstate & DSTATE_RFON)
    2660:	28905b00 	ldmcs	r0, {r8, r9, fp, ip, lr}
    2664:	28940000 	ldmcs	r4, {}	; <UNPREDICTABLE>
		rx_de ();
    2668:	00010000 	andeq	r0, r1, r0
		RF_cmdPropTx . status = 0;
    266c:	0000005b 	andeq	r0, r0, fp, asr r0
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2670:	00000000 	andeq	r0, r0, r0
    2674:	0027fc00 	eoreq	pc, r7, r0, lsl #24
    2678:	00280000 	eoreq	r0, r8, r0
		issue_cmd ((lword)&cmd_cs);
    267c:	50000100 	andpl	r0, r0, r0, lsl #2
		if (dstate & DSTATE_IRST)
    2680:	00002806 	andeq	r2, r0, r6, lsl #16
    2684:	0000282c 	andeq	r2, r0, ip, lsr #16
    2688:	2c500001 	mrrccs	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    268c:	2f000028 	svccs	0x00000028
    2690:	01000028 	tsteq	r0, r8, lsr #32
			delay (1, DR_XMIT);
    2694:	28905300 	ldmcs	r0, {r8, r9, ip, lr}
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2698:	28940000 	ldmcs	r4, {}	; <UNPREDICTABLE>
    269c:	00010000 	andeq	r0, r1, r0
    26a0:	00000050 	andeq	r0, r0, r0, asr r0
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    26a4:	00000000 	andeq	r0, r0, r0
    26a8:	00208000 	eoreq	r8, r0, r0
				RF_cmdPropTx . status = 0;
    26ac:	0020ae00 	eoreq	sl, r0, r0, lsl #28
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    26b0:	50000100 	andpl	r0, r0, r0, lsl #2
				issue_cmd ((lword)&RF_cmdPropTx);
    26b4:	000020b6 	strheq	r2, [r0], -r6
				proceed (DR_XMIT);
    26b8:	000020c0 	andeq	r2, r0, r0, asr #1
    26bc:	ee500001 	cdp	0, 5, cr0, cr0, cr1, {0}
			txtries++;
    26c0:	00000020 	andeq	r0, r0, r0, lsr #32
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    26c4:	01000021 	tsteq	r0, r1, lsr #32
    26c8:	21045000 	mrscs	r5, (UNDEF: 4)
    26cc:	21080000 	mrscs	r0, (UNDEF: 8)
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    26d0:	00010000 	andeq	r0, r1, r0
		goto DR_LOOP__;
    26d4:	00211050 	eoreq	r1, r1, r0, asr r0
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    26d8:	00211400 	eoreq	r1, r1, r0, lsl #8
		paylen = 0;
    26dc:	50000100 	andpl	r0, r0, r0, lsl #2
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    26e0:	00002116 	andeq	r2, r0, r6, lsl r1
		txtries = 0;
    26e4:	0000211c 	andeq	r2, r0, ip, lsl r1
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    26e8:	24500001 	ldrbcs	r0, [r0], #-1
    26ec:	26000021 	strcs	r0, [r0], -r1, lsr #32
    26f0:	01000021 	tsteq	r0, r1, lsr #32
    26f4:	212c5000 			; <UNDEFINED> instruction: 0x212c5000
    26f8:	21310000 	teqcs	r1, r0
		    tcvphy_top (physid) == NULL)
    26fc:	00010000 	andeq	r0, r1, r0
    2700:	00214050 	eoreq	r4, r1, r0, asr r0
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2704:	00214600 	eoreq	r4, r1, r0, lsl #12
    2708:	50000100 	andpl	r0, r0, r0, lsl #2
			rf_off ();
    270c:	0000215c 	andeq	r2, r0, ip, asr r1
endthread
    2710:	00002160 	andeq	r2, r0, r0, ror #2
    2714:	7c500001 	mrrcvc	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    2718:	80000021 	andhi	r0, r0, r1, lsr #32
    271c:	01000021 	tsteq	r0, r1, lsr #32
    2720:	21825000 	orrcs	r5, r2, r0
    2724:	21d40000 	bicscs	r0, r4, r0
    2728:	00010000 	andeq	r0, r1, r0
    272c:	00000050 	andeq	r0, r0, r0, asr r0
    2730:	00000000 	andeq	r0, r0, r0
    2734:	00208000 	eoreq	r8, r0, r0
    2738:	0020c000 	eoreq	ip, r0, r0
    273c:	51000100 	mrspl	r0, (UNDEF: 16)
    2740:	000020ee 	andeq	r2, r0, lr, ror #1
    2744:	00002100 	andeq	r2, r0, r0, lsl #2
    2748:	04510001 	ldrbeq	r0, [r1], #-1
    274c:	08000021 	stmdaeq	r0, {r0, r5}
void RFCCPE0IntHandler (void) {
    2750:	01000021 	tsteq	r0, r1, lsr #32
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2754:	21085100 	mrscs	r5, (UNDEF: 24)
		_BIS (dstate, DSTATE_IRST);
    2758:	21100000 	tstcs	r0, r0
    275c:	00010000 	andeq	r0, r1, r0
    2760:	00211054 	eoreq	r1, r1, r4, asr r0
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    2764:	00211e00 	eoreq	r1, r1, r0, lsl #28
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    2768:	51000100 	mrspl	r0, (UNDEF: 16)
    276c:	0000211e 	andeq	r2, r0, lr, lsl r1
	p_trigger (drvprcs, qevent);
    2770:	00002124 	andeq	r2, r0, r4, lsr #2
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2774:	24540001 	ldrbcs	r0, [r4], #-1
    2778:	29000021 	stmdbcs	r0, {r0, r5}
    277c:	01000021 	tsteq	r0, r1, lsr #32
    2780:	21295100 			; <UNDEFINED> instruction: 0x21295100
    2784:	212c0000 			; <UNDEFINED> instruction: 0x212c0000
    2788:	00010000 	andeq	r0, r1, r0
    278c:	00212c54 	eoreq	r2, r1, r4, asr ip
    2790:	00213100 	eoreq	r3, r1, r0, lsl #2
    2794:	51000100 	mrspl	r0, (UNDEF: 16)
    2798:	00002131 	andeq	r2, r0, r1, lsr r1
	RISE_N_SHINE;
    279c:	00002140 	andeq	r2, r0, r0, asr #2
    27a0:	40540001 	subsmi	r0, r4, r1
    27a4:	42000021 	andmi	r0, r0, #33	; 0x21
}
    27a8:	01000021 	tsteq	r0, r1, lsr #32
    27ac:	21425100 	mrscs	r5, (UNDEF: 82)
    27b0:	21440000 	mrscs	r0, (UNDEF: 68)
    27b4:	00010000 	andeq	r0, r1, r0
    27b8:	00214454 	eoreq	r4, r1, r4, asr r4
    27bc:	00214c00 	eoreq	r4, r1, r0, lsl #24
void phys_cc1350 (int phy, int mbs) {
    27c0:	51000100 	mrspl	r0, (UNDEF: 16)
	if (rbuffl != 0)
    27c4:	0000214c 	andeq	r2, r0, ip, asr #2
    27c8:	0000215c 	andeq	r2, r0, ip, asr r1
		syserror (ETOOMANY, "cc13");
    27cc:	5c540001 	mrrcpl	0, 0, r0, r4, cr1
		syserror (EREQPAR, "cc13 mb");
    27d0:	d6000021 	strle	r0, [r0], -r1, lsr #32
	if (mbs == 0)
    27d4:	01000021 	tsteq	r0, r1, lsr #32
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    27d8:	21d65100 	bicscs	r5, r6, r0, lsl #2
		syserror (EREQPAR, "cc13 mb");
    27dc:	22100000 	andscs	r0, r0, #0
    27e0:	00010000 	andeq	r0, r1, r0
	i = 0;
    27e4:	00000054 	andeq	r0, r0, r4, asr r0
	rbuffl = (byte) mbs;
    27e8:	00000000 	andeq	r0, r0, r0
		db->config.type = 0;	// General (data in structure)
    27ec:	0020b400 	eoreq	fp, r0, r0, lsl #8
	rbuffl = (byte) mbs;
    27f0:	0020b600 	eoreq	fp, r0, r0, lsl #12
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    27f4:	50000100 	andpl	r0, r0, r0, lsl #2
    27f8:	000020c2 	andeq	r2, r0, r2, asr #1
		if (db == NULL)
    27fc:	000020ec 	andeq	r2, r0, ip, ror #1
			syserror (EMALLOC, "cc13");
    2800:	08500001 	ldmdaeq	r0, {r0}^
    2804:	10000021 	andne	r0, r0, r1, lsr #32
    2808:	01000021 	tsteq	r0, r1, lsr #32
		db->status = DATA_ENTRY_PENDING;
    280c:	214c5000 	mrscs	r5, (UNDEF: 76)
		if (i)
    2810:	215c0000 	cmpcs	ip, r0
			da->pNextEntry = (byte*) db;
    2814:	00010000 	andeq	r0, r1, r0
		db->length = rbuffl + 2;
    2818:	00216650 	eoreq	r6, r1, r0, asr r6
    281c:	00217c00 	eoreq	r7, r1, r0, lsl #24
		db->config.type = 0;	// General (data in structure)
    2820:	50000100 	andpl	r0, r0, r0, lsl #2
		db->length = rbuffl + 2;
    2824:	00002180 	andeq	r2, r0, r0, lsl #3
	db->pNextEntry = (byte*) re;
    2828:	00002182 	andeq	r2, r0, r2, lsl #3
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    282c:	00500001 	subseq	r0, r0, r1
    2830:	00000000 	andeq	r0, r0, r0
	if (rbuffs == NULL)
    2834:	d6000000 	strle	r0, [r0], -r0
	rbuffs->pCurrEntry = (byte*) re;
    2838:	e0000020 	and	r0, r0, r0, lsr #32
	rbuffs->pLastEntry = NULL;
    283c:	01000020 	tsteq	r0, r0, lsr #32
    2840:	00005300 	andeq	r5, r0, r0, lsl #6
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2844:	00000000 	andeq	r0, r0, r0
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    2848:	25600000 	strbcs	r0, [r0, #-0]!
    284c:	25740000 	ldrbcs	r0, [r4, #-0]!
    2850:	00010000 	andeq	r0, r1, r0
	rbuffl -= 2;
    2854:	0026e850 	eoreq	lr, r6, r0, asr r8
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2858:	00270000 	eoreq	r0, r7, r0
	rbuffl -= 2;
    285c:	50000100 	andpl	r0, r0, r0, lsl #2
	physid = phy;
    2860:	00002710 	andeq	r2, r0, r0, lsl r7
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2864:	00002717 	andeq	r2, r0, r7, lsl r7
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2868:	00500001 	subseq	r0, r0, r1
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    286c:	00000000 	andeq	r0, r0, r0
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2870:	e0000000 	and	r0, r0, r0
    2874:	e8000025 	stmda	r0, {r0, r2, r5}
	utimer_add (&bckf_timer);
    2878:	01000025 	tsteq	r0, r5, lsr #32
	drvprcs = runthread (cc1350_driver);
    287c:	25e85200 	strbcs	r5, [r8, #512]!	; 0x200
    2880:	25eb0000 	strbcs	r0, [fp, #0]!
    2884:	00020000 	andeq	r0, r2, r0
	if (drvprcs == 0)
    2888:	00000072 	andeq	r0, r0, r2, ror r0
		syserror (ERESOURCE, "cc13");
    288c:	00000000 	andeq	r0, r0, r0
    2890:	27860000 	strcs	r0, [r6, r0]
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    2894:	27900000 	ldrcs	r0, [r0, r0]
    2898:	00010000 	andeq	r0, r1, r0
    289c:	00000053 	andeq	r0, r0, r3, asr r0
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    28a0:	00000000 	andeq	r0, r0, r0
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    28a4:	0024ce00 	eoreq	ip, r4, r0, lsl #28
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    28a8:	00251200 	eoreq	r1, r5, r0, lsl #4
    28ac:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    28b0:	00002512 	andeq	r2, r0, r2, lsl r5
    28b4:	0000251a 	andeq	r2, r0, sl, lsl r5
    28b8:	00740002 	rsbseq	r0, r4, r2
    28bc:	0000251a 	andeq	r2, r0, sl, lsl r5
    28c0:	00002524 	andeq	r2, r0, r4, lsr #10
    28c4:	24540001 	ldrbcs	r0, [r4], #-1
    28c8:	29000025 	stmdbcs	r0, {r0, r2, r5}
	plugch ();
    28cc:	02000025 	andeq	r0, r0, #37	; 0x25
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    28d0:	3a007400 	bcc	1f8d8 <__exidx_end+0x1a830>
    28d4:	3e000025 	cdpcc	0, 0, cr0, cr0, cr5, {1}
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    28d8:	02000025 	andeq	r0, r0, #37	; 0x25
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    28dc:	00007400 	andeq	r7, r0, r0, lsl #8
    28e0:	00000000 	andeq	r0, r0, r0
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    28e4:	f6000000 			; <UNDEFINED> instruction: 0xf6000000
}
    28e8:	0d000024 	stceq	0, cr0, [r0, #-144]	; 0xffffff70
    28ec:	01000025 	tsteq	r0, r5, lsr #32
    28f0:	00005200 	andeq	r5, r0, r0, lsl #4
    28f4:	00000000 	andeq	r0, r0, r0
    28f8:	24ce0000 	strbcs	r0, [lr], #0
    28fc:	252e0000 	strcs	r0, [lr, #-0]!
    2900:	00010000 	andeq	r0, r1, r0
    2904:	00253a55 	eoreq	r3, r5, r5, asr sl
    2908:	00253e00 	eoreq	r3, r5, r0, lsl #28
    290c:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    2918:	00002210 	andeq	r2, r0, r0, lsl r2
    291c:	00002216 	andeq	r2, r0, r6, lsl r2
    2920:	16500001 	ldrbne	r0, [r0], -r1
    2924:	48000022 	stmdami	r0, {r1, r5}
    2928:	01000022 	tsteq	r0, r2, lsr #32
    292c:	00005400 	andeq	r5, r0, r0, lsl #8
    2930:	00000000 	andeq	r0, r0, r0
    2934:	221e0000 	andscs	r0, lr, #0
    2938:	22280000 	eorcs	r0, r8, #0
    293c:	00010000 	andeq	r0, r1, r0
    2940:	00222e52 	eoreq	r2, r2, r2, asr lr
    2944:	00223900 	eoreq	r3, r2, r0, lsl #18
    2948:	52000100 	andpl	r0, r0, #0, 2
    294c:	0000223e 	andeq	r2, r0, lr, lsr r2
    2950:	00002243 	andeq	r2, r0, r3, asr #4
    2954:	46520001 	ldrbmi	r0, [r2], -r1
    2958:	58000022 	stmdapl	r0, {r1, r5}
    295c:	01000022 	tsteq	r0, r2, lsr #32
    2960:	00005200 	andeq	r5, r0, r0, lsl #4
    2964:	00000000 	andeq	r0, r0, r0
    2968:	22260000 	eorcs	r0, r6, #0
    296c:	22280000 	eorcs	r0, r8, #0
    2970:	00010000 	andeq	r0, r1, r0
    2974:	00000054 	andeq	r0, r0, r4, asr r0
    2978:	00000000 	andeq	r0, r0, r0
    297c:	0022d800 	eoreq	sp, r2, r0, lsl #16
    2980:	0022e200 	eoreq	lr, r2, r0, lsl #4
    2984:	50000100 	andpl	r0, r0, r0, lsl #2
    2988:	000022e2 	andeq	r2, r0, r2, ror #5
    298c:	00002308 	andeq	r2, r0, r8, lsl #6
    2990:	00540001 	subseq	r0, r4, r1
    2994:	00000000 	andeq	r0, r0, r0
    2998:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    299c:	e2000022 	and	r0, r0, #34	; 0x22
    29a0:	01000022 	tsteq	r0, r2, lsr #32
    29a4:	22e25100 	rsccs	r5, r2, #0, 2
    29a8:	23080000 	movwcs	r0, #32768	; 0x8000
    29ac:	00010000 	andeq	r0, r1, r0
    29b0:	00000055 	andeq	r0, r0, r5, asr r0
    29b4:	00000000 	andeq	r0, r0, r0
    29b8:	0023b200 	eoreq	fp, r3, r0, lsl #4
    29bc:	0023ba00 	eoreq	fp, r3, r0, lsl #20
    29c0:	52000100 	andpl	r0, r0, #0, 2
	...
    29cc:	00002386 	andeq	r2, r0, r6, lsl #7
    29d0:	000023b2 			; <UNDEFINED> instruction: 0x000023b2
strand (__outserial, const char*)
    29d4:	b6530001 	ldrblt	r0, [r3], -r1
    29d8:	ba000023 	blt	2a6c <__inserial+0x28>
    29dc:	01000023 	tsteq	r0, r3, lsr #32
    29e0:	00005300 	andeq	r5, r0, r0, lsl #6
endstrand
    29e4:	00000000 	andeq	r0, r0, r0
    29e8:	238c0000 	orrcs	r0, ip, #0
	ptr = data;
    29ec:	23ba0000 			; <UNDEFINED> instruction: 0x23ba0000
    29f0:	00010000 	andeq	r0, r1, r0
	if (*ptr)
    29f4:	0000005e 	andeq	r0, r0, lr, asr r0
		len = strlen (ptr);
    29f8:	00000000 	andeq	r0, r0, r0
    29fc:	00239000 	eoreq	r9, r3, r0
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    2a00:	0023ba00 	eoreq	fp, r3, r0, lsl #20
    2a04:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
    2a10:	00002394 	muleq	r0, r4, r3
	len -= quant;
    2a14:	000023d0 	ldrdeq	r2, [r0], -r0
    2a18:	00550001 	subseq	r0, r5, r1
    2a1c:	00000000 	andeq	r0, r0, r0
	if (len == 0) {
    2a20:	94000000 	strls	r0, [r0], #-0
		ufree (data);
    2a24:	ac000023 	stcge	0, cr0, [r0], {35}	; 0x23
		finish;
    2a28:	01000023 	tsteq	r0, r3, lsr #32
    2a2c:	23ac5000 			; <UNDEFINED> instruction: 0x23ac5000
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    2a30:	23b60000 			; <UNDEFINED> instruction: 0x23b60000
    2a34:	00020000 	andeq	r0, r2, r0
    2a38:	23b61873 			; <UNDEFINED> instruction: 0x23b61873
    2a3c:	23b80000 			; <UNDEFINED> instruction: 0x23b80000
    2a40:	00020000 	andeq	r0, r2, r0
strand (__inserial, address)
    2a44:	00001870 	andeq	r1, r0, r0, ror r8
    2a48:	00000000 	andeq	r0, r0, r0
    2a4c:	23b20000 			; <UNDEFINED> instruction: 0x23b20000
    2a50:	23d00000 	bicscs	r0, r0, #0
    2a54:	00010000 	andeq	r0, r1, r0
	if (__inpline != NULL)
    2a58:	00000054 	andeq	r0, r0, r4, asr r0
    2a5c:	00000000 	andeq	r0, r0, r0
		finish;
    2a60:	00298800 	eoreq	r8, r9, r0, lsl #16
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    2a64:	00298a00 	eoreq	r8, r9, r0, lsl #20
    2a68:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		umwait (IM_INIT);
    2a74:	00002984 	andeq	r2, r0, r4, lsl #19
		release;
    2a78:	00002986 	andeq	r2, r0, r6, lsl #19
	savedata (data);
    2a7c:	00500001 	subseq	r0, r0, r1
	len = MAX_LINE_LENGTH;
    2a80:	00000000 	andeq	r0, r0, r0
	io (IM_READ, __cport, READ, ptr, 1);
    2a84:	7c000000 	stcvc	0, cr0, [r0], {-0}
    2a88:	7e000029 	cdpvc	0, 0, cr0, cr0, cr9, {1}
    2a8c:	01000029 	tsteq	r0, r9, lsr #32
    2a90:	00005000 	andeq	r5, r0, r0
	if (ptr == (char*) data) { // new line
    2a94:	00000000 	andeq	r0, r0, r0
    2a98:	29580000 	ldmdbcs	r8, {}^	; <UNPREDICTABLE>
		if (*ptr == '\0') { // bin cmd
    2a9c:	29620000 	stmdbcs	r2!, {}^	; <UNPREDICTABLE>
			proceed (IM_BIN);
    2aa0:	00010000 	andeq	r0, r1, r0
    2aa4:	00296450 	eoreq	r6, r9, r0, asr r4
		if (*ptr < 0x20)
    2aa8:	00297200 	eoreq	r7, r9, r0, lsl #4
    2aac:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	if (*ptr == '\n' || *ptr == '\r') {
    2ab8:	00002958 	andeq	r2, r0, r8, asr r9
    2abc:	0000295a 	andeq	r2, r0, sl, asr r9
    2ac0:	00510001 	subseq	r0, r1, r1
		*ptr = '\0';
    2ac4:	00000000 	andeq	r0, r0, r0
		__inpline = (char*)data;
    2ac8:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
		finish;
    2acc:	5c000029 	stcpl	0, cr0, [r0], {41}	; 0x29
	if (len) {
    2ad0:	01000029 	tsteq	r0, r9, lsr #32
		ptr++;
    2ad4:	00005200 	andeq	r5, r0, r0, lsl #4
    2ad8:	00000000 	andeq	r0, r0, r0
		len--;
    2adc:	29580000 	ldmdbcs	r8, {}^	; <UNPREDICTABLE>
	proceed (IM_READ);
    2ae0:	29700000 	ldmdbcs	r0!, {}^	; <UNPREDICTABLE>
	io (IM_BIN, __cport, READ, ptr, 1);
    2ae4:	00010000 	andeq	r0, r1, r0
    2ae8:	00000053 	andeq	r0, r0, r3, asr r0
    2aec:	00000000 	andeq	r0, r0, r0
    2af0:	00293400 	eoreq	r3, r9, r0, lsl #8
    2af4:	00294000 	eoreq	r4, r9, r0
	len -= 2;
    2af8:	50000100 	andpl	r0, r0, r0, lsl #2
	if (len > *ptr + 1) // 1 for 0x04
    2afc:	00002940 	andeq	r2, r0, r0, asr #18
    2b00:	00002958 	andeq	r2, r0, r8, asr r9
		len = *ptr + 1;
    2b04:	00530001 	subseq	r0, r3, r1
    2b08:	00000000 	andeq	r0, r0, r0
	ptr++;
    2b0c:	8c000000 	stchi	0, cr0, [r0], {-0}
	quant = io (IM_BINL, __cport, READ, ptr, len);
    2b10:	9a000029 	bls	2bbc <__pi_vfparse+0x3c>
    2b14:	01000029 	tsteq	r0, r9, lsr #32
    2b18:	299a5000 	ldmibcs	sl, {ip, lr}
    2b1c:	29d40000 	ldmibcs	r4, {}^	; <UNPREDICTABLE>
    2b20:	00010000 	andeq	r0, r1, r0
    2b24:	00000055 	andeq	r0, r0, r5, asr r0
	len -= quant;
    2b28:	00000000 	andeq	r0, r0, r0
		__inpline = (char*)data;
    2b2c:	00298c00 	eoreq	r8, r9, r0, lsl #24
		finish;
    2b30:	00299d00 	eoreq	r9, r9, r0, lsl #26
	ptr += quant;
    2b34:	51000100 	mrspl	r0, (UNDEF: 16)
    2b38:	0000299d 	muleq	r0, sp, r9
endstrand
    2b3c:	000029d4 	ldrdeq	r2, [r0], -r4
    2b40:	00560001 	subseq	r0, r6, r1
	proceed (IM_BINL);
    2b44:	00000000 	andeq	r0, r0, r0
endstrand
    2b48:	8c000000 	stchi	0, cr0, [r0], {-0}
    2b4c:	9d000029 	stcls	0, cr0, [r0, #-164]	; 0xffffff5c
    2b50:	01000029 	tsteq	r0, r9, lsr #32
    2b54:	29ac5200 	stmibcs	ip!, {r9, ip, lr}
    2b58:	29b20000 	ldmibcs	r2!, {}	; <UNPREDICTABLE>
    2b5c:	00010000 	andeq	r0, r1, r0
		if (res && (d < n))
    2b60:	00000052 	andeq	r0, r0, r2, asr r0
    2b64:	00000000 	andeq	r0, r0, r0
    2b68:	0029d400 	eoreq	sp, r9, r0, lsl #8
    2b6c:	0029eb00 	eoreq	lr, r9, r0, lsl #22
			res [d] = (char) c;
    2b70:	50000100 	andpl	r0, r0, r0, lsl #2
		d++;
    2b74:	000029ec 	andeq	r2, r0, ip, ror #19
    2b78:	000029f8 	strdeq	r2, [r0], -r8
    2b7c:	30500001 	subscc	r0, r0, r1
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2b80:	4400002a 	strmi	r0, [r0], #-42	; 0xffffffd6
    2b84:	0100002a 	tsteq	r0, sl, lsr #32
    2b88:	00005000 	andeq	r5, r0, r0
				enci (10000);
    2b8c:	00000000 	andeq	r0, r0, r0
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2b90:	29dc0000 	ldmibcs	ip, {}^	; <UNPREDICTABLE>
    2b94:	29e80000 	stmibcs	r8!, {}^	; <UNPREDICTABLE>
	d = 0;
    2b98:	00010000 	andeq	r0, r1, r0
		c = *fm++;
    2b9c:	0029e855 	eoreq	lr, r9, r5, asr r8
		if (c == '\\') {
    2ba0:	0029eb00 	eoreq	lr, r9, r0, lsl #22
			if ((c = *fm++) == '\0') {
    2ba4:	73000200 	movwvc	r0, #512	; 0x200
    2ba8:	0029ec08 	eoreq	lr, r9, r8, lsl #24
				outc ('\\');
    2bac:	002a4400 	eoreq	r4, sl, r0, lsl #8
			if ((c = *fm++) == '\0') {
    2bb0:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
			outc (c);
    2bbc:	00002a12 	andeq	r2, r0, r2, lsl sl
    2bc0:	00002a24 	andeq	r2, r0, r4, lsr #20
			if (c == '\0')
    2bc4:	00500001 	subseq	r0, r0, r1
    2bc8:	00000000 	andeq	r0, r0, r0
			outc (c);
    2bcc:	44000000 	strmi	r0, [r0], #-0
				outc (val);
    2bd0:	6000002a 	andvs	r0, r0, sl, lsr #32
				val = (word) va_arg (ap, aword);
    2bd4:	0100002a 	tsteq	r0, sl, lsr #32
		if (c == '%') {
    2bd8:	2b465000 	blcs	1196be0 <__ccfg+0x1176c38>
    2bdc:	2b4f0000 	blcs	13c2be4 <__ccfg+0x13a2c3c>
			c = *fm++;
    2be0:	00010000 	andeq	r0, r1, r0
			switch (c) {
    2be4:	00000050 	andeq	r0, r0, r0, asr r0
    2be8:	00000000 	andeq	r0, r0, r0
    2bec:	002a4c00 	eoreq	r4, sl, r0, lsl #24
    2bf0:	002a6e00 	eoreq	r6, sl, r0, lsl #28
    2bf4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    2bf8:	00002a6e 	andeq	r2, r0, lr, ror #20
    2bfc:	00002a75 	andeq	r2, r0, r5, ror sl
    2c00:	75500001 	ldrbvc	r0, [r0, #-1]
				outc ('%');
    2c04:	7a00002a 	bvc	2cb4 <__pi_vfparse+0x134>
    2c08:	0100002a 	tsteq	r0, sl, lsr #32
				outc (c);
    2c0c:	2a7a5400 	bcs	1e97c14 <__ccfg+0x1e77c6c>
    2c10:	2a840000 	bcs	fe102c18 <_estack+0xde0fdc18>
    2c14:	00010000 	andeq	r0, r1, r0
				if (c == '\0')
    2c18:	002a8450 	eoreq	r8, sl, r0, asr r4
				return d;
    2c1c:	002b4200 	eoreq	r4, fp, r0, lsl #4
}
    2c20:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    2c24:	00002b46 	andeq	r2, r0, r6, asr #22
			switch (c) {
    2c28:	00002b4c 	andeq	r2, r0, ip, asr #22
    2c2c:	4c540001 	mrrcmi	0, 0, r0, r4, cr1
    2c30:	4f00002b 	svcmi	0x0000002b
				for (i = 12; ; i -= 4) {
    2c34:	0200002b 	andeq	r0, r0, #43	; 0x2b
				val = (word) va_arg (ap, aword);
    2c38:	00087200 	andeq	r7, r8, r0, lsl #4
						[ (val >> i) & 0xf ]);
    2c3c:	00000000 	andeq	r0, r0, r0
    2c40:	26000000 	strcs	r0, [r0], -r0
    2c44:	2800002b 	stmdacs	r0, {r0, r1, r3, r5}
					outc (__pi_hex_enc_table
    2c48:	0100002b 	tsteq	r0, fp, lsr #32
    2c4c:	2b285000 	blcs	a16c54 <__ccfg+0x9f6cac>
					if (i == 0)
    2c50:	2b420000 	blcs	1082c58 <__ccfg+0x1062cb0>
    2c54:	00010000 	andeq	r0, r1, r0
				for (i = 12; ; i -= 4) {
    2c58:	00000056 	andeq	r0, r0, r6, asr r0
				val = (word) va_arg (ap, aword);
    2c5c:	00000000 	andeq	r0, r0, r0
				if (c == 'd' && (val & 0x8000) != 0) {
    2c60:	002db000 	eoreq	fp, sp, r0
				val = (word) va_arg (ap, aword);
    2c64:	002dc700 	eoreq	ip, sp, r0, lsl #14
				if (c == 'd' && (val & 0x8000) != 0) {
    2c68:	50000100 	andpl	r0, r0, r0, lsl #2
    2c6c:	00002dc7 	andeq	r2, r0, r7, asr #27
					outc ('-');
    2c70:	00002dce 	andeq	r2, r0, lr, asr #27
    2c74:	ce540001 	cdpgt	0, 5, cr0, cr4, cr1, {0}
					val = (~val) + 1;
    2c78:	d000002d 	andle	r0, r0, sp, lsr #32
    2c7c:	0100002d 	tsteq	r0, sp, lsr #32
				for (i = 12; ; i -= 4) {
    2c80:	2dd05000 	ldclcs	0, cr5, [r0]
				enci (10000);
    2c84:	2de00000 	stclcs	0, cr0, [r0]
    2c88:	00010000 	andeq	r0, r1, r0
    2c8c:	002de054 	eoreq	lr, sp, r4, asr r0
    2c90:	002def00 	eoreq	lr, sp, r0, lsl #30
    2c94:	50000100 	andpl	r0, r0, r0, lsl #2
    2c98:	00002def 	andeq	r2, r0, pc, ror #27
    2c9c:	00002e00 	andeq	r2, r0, r0, lsl #28
    2ca0:	00540001 	subseq	r0, r4, r1
    2ca4:	00000000 	andeq	r0, r0, r0
    2ca8:	b0000000 	andlt	r0, r0, r0
    2cac:	c400002d 	strgt	r0, [r0], #-45	; 0xffffffd3
    2cb0:	0100002d 	tsteq	r0, sp, lsr #32
    2cb4:	2dc45100 	stfcse	f5, [r4]
    2cb8:	2dc70000 	stclcs	0, cr0, [r7]
    2cbc:	00010000 	andeq	r0, r1, r0
    2cc0:	002dc752 	eoreq	ip, sp, r2, asr r7
    2cc4:	002dce00 	eoreq	ip, sp, r0, lsl #28
    2cc8:	56000100 	strpl	r0, [r0], -r0, lsl #2
				if (c == 'd' || c == 'u') {
    2ccc:	00002dce 	andeq	r2, r0, lr, asr #27
    2cd0:	00002dd3 	ldrdeq	r2, [r0], -r3
					if (c == 'd' &&
    2cd4:	d3510001 	cmple	r1, #1
					val = va_arg (ap, lword);
    2cd8:	0000002d 	andeq	r0, r0, sp, lsr #32
					fm++;
    2cdc:	0100002e 	tsteq	r0, lr, lsr #32
					if (c == 'd' &&
    2ce0:	00005600 	andeq	r5, r0, r0, lsl #12
    2ce4:	00000000 	andeq	r0, r0, r0
						outc ('-');
    2ce8:	2db00000 	ldccs	0, cr0, [r0]
    2cec:	2db80000 	ldccs	0, cr0, [r8]
						val = (~val) + 1;
    2cf0:	00010000 	andeq	r0, r1, r0
				enci (10000);
    2cf4:	002dbc52 	eoreq	fp, sp, r2, asr ip
					enci (1000000000UL);
    2cf8:	002dc000 	eoreq	ip, sp, r0
    2cfc:	52000100 	andpl	r0, r0, #0, 2
    2d00:	00002dc8 	andeq	r2, r0, r8, asr #27
    2d04:	00002dce 	andeq	r2, r0, lr, asr #27
    2d08:	da570001 	ble	15c2d14 <__ccfg+0x15a2d6c>
    2d0c:	0000002d 	andeq	r0, r0, sp, lsr #32
    2d10:	0100002e 	tsteq	r0, lr, lsr #32
    2d14:	00005700 	andeq	r5, r0, r0, lsl #14
    2d18:	00000000 	andeq	r0, r0, r0
    2d1c:	2dda0000 	ldclcs	0, cr0, [sl]
    2d20:	2dfc0000 	ldclcs	0, cr0, [ip]
    2d24:	00010000 	andeq	r0, r1, r0
    2d28:	002dfc55 	eoreq	pc, sp, r5, asr ip	; <UNPREDICTABLE>
    2d2c:	002e0000 	eoreq	r0, lr, r0
    2d30:	58000100 	stmdapl	r0, {r8}
	...
				} else if (c == 'x') {
    2d3c:	00002df4 	strdeq	r2, [r0], -r4
					for (i = 28; ; i -= 4) {
    2d40:	00002df8 	strdeq	r2, [r0], -r8
					val = va_arg (ap, lword);
    2d44:	00500001 	subseq	r0, r0, r1
							[ (val >> i) & 0xf ]);
    2d48:	00000000 	andeq	r0, r0, r0
    2d4c:	80000000 	andhi	r0, r0, r0
						outc (__pi_hex_enc_table
    2d50:	9a00002b 	bls	2e04 <vscan+0x4>
    2d54:	0100002b 	tsteq	r0, fp, lsr #32
    2d58:	00005000 	andeq	r5, r0, r0
						if (i == 0)
    2d5c:	00000000 	andeq	r0, r0, r0
    2d60:	2b800000 	blcs	fe002d68 <_estack+0xddffdd68>
					for (i = 28; ; i -= 4) {
    2d64:	2b9a0000 	blcs	fe682d6c <_estack+0xde67dd6c>
					outc ('%');
    2d68:	00010000 	andeq	r0, r1, r0
    2d6c:	00000051 	andeq	r0, r0, r1, asr r0
    2d70:	00000000 	andeq	r0, r0, r0
					outc ('l');
    2d74:	002b8000 	eoreq	r8, fp, r0
    2d78:	002b9a00 	eoreq	r9, fp, r0, lsl #20
				val = (word) va_arg (ap, aword);
    2d7c:	52000100 	andpl	r0, r0, #0, 2
				outc (val);
    2d80:	00002baa 	andeq	r2, r0, sl, lsr #23
    2d84:	00002bd6 	ldrdeq	r2, [r0], -r6
				while (*st != '\0') {
    2d88:	e4550001 	ldrb	r0, [r5], #-1
    2d8c:	a200002b 	andge	r0, r0, #43	; 0x2b
    2d90:	0100002d 	tsteq	r0, sp, lsr #32
    2d94:	00005500 	andeq	r5, r0, r0, lsl #10
					outc (*st);
    2d98:	00000000 	andeq	r0, r0, r0
    2d9c:	2b800000 	blcs	fe002da4 <_estack+0xddffdda4>
					st++;
    2da0:	2b840000 	blcs	fe102da8 <_estack+0xde0fdda8>
		c = *fm++;
    2da4:	00010000 	andeq	r0, r1, r0
    2da8:	002b8653 	eoreq	r8, fp, r3, asr r6
    2dac:	002b8800 	eoreq	r8, fp, r0, lsl #16
char *vform (char *res, const char *fm, va_list aq) {
    2db0:	53000300 	movwpl	r0, #768	; 0x300
    2db4:	2b880493 	blcs	fe204008 <_estack+0xde1ff008>
	if (res != NULL) {
    2db8:	2bd20000 	blcs	ff482dc0 <_estack+0xdf47ddc0>
		__pi_vfparse (res, MAX_WORD, fm, aq);
    2dbc:	00030000 	andeq	r0, r3, r0
    2dc0:	d2049354 	andle	r9, r4, #84, 6	; 0x50000001
    2dc4:	2600002b 	strcs	r0, [r0], -fp, lsr #32
}
    2dc8:	0300002c 	movweq	r0, #44	; 0x2c
    2dcc:	04935400 	ldreq	r5, [r3], #1024	; 0x400
	fml = strlen (fm) + 17;
    2dd0:	00002c26 	andeq	r2, r0, r6, lsr #24
    2dd4:	00002c32 	andeq	r2, r0, r2, lsr ip
    2dd8:	93540003 	cmpls	r4, #3
	if ((res = (char*) umalloc (fml)) == NULL)
    2ddc:	002c3a04 	eoreq	r3, ip, r4, lsl #20
    2de0:	002c5c00 	eoreq	r5, ip, r0, lsl #24
    2de4:	54000300 	strpl	r0, [r0], #-768	; 0xfffffd00
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    2de8:	2c600493 	cfstrdcs	mvd0, [r0], #-588	; 0xfffffdb4
    2dec:	2cda0000 	ldclcs	0, cr0, [sl], {0}
    2df0:	00030000 	andeq	r0, r3, r0
    2df4:	e0049354 	and	r9, r4, r4, asr r3
		ufree (res);
    2df8:	f400002c 	vst4.8	{d0-d3}, [r0 :128], ip
		goto Again;
    2dfc:	0300002c 	movweq	r0, #44	; 0x2c
	if (buf == NULL || fmt == NULL)
    2e00:	04935400 	ldreq	r5, [r3], #1024	; 0x400
int vscan (const char *buf, const char *fmt, va_list ap) {
    2e04:	00002d3a 	andeq	r2, r0, sl, lsr sp
	if (buf == NULL || fmt == NULL)
    2e08:	00002d46 	andeq	r2, r0, r6, asr #26
    2e0c:	93540003 	cmpls	r4, #3
    2e10:	002d6804 	eoreq	r6, sp, r4, lsl #16
		    	    case 'u': scanu (lword); break;
    2e14:	002d7a00 	eoreq	r7, sp, r0, lsl #20
			while (isspace (*buf)) buf++;
    2e18:	54000300 	strpl	r0, [r0], #-768	; 0xfffffd00
    2e1c:	2d7e0493 	cfldrdcs	mvd0, [lr, #-588]!	; 0xfffffdb4
	while (*fmt != '\0') {
    2e20:	2d860000 	stccs	0, cr0, [r6]
		if (*fmt++ != '%')
    2e24:	00030000 	andeq	r0, r3, r0
		switch (*fmt++) {
    2e28:	8a049354 	bhi	127b80 <__ccfg+0x107bd8>
    2e2c:	b000002d 	andlt	r0, r0, sp, lsr #32
    2e30:	0300002d 	movweq	r0, #45	; 0x2d
    2e34:	04935400 	ldreq	r5, [r3], #1024	; 0x400
	...
    2e40:	00002b9e 	muleq	r0, lr, fp
}
    2e44:	00002ba8 	andeq	r2, r0, r8, lsr #23
		switch (*fmt++) {
    2e48:	a8590001 	ldmdage	r9, {r0}^
    2e4c:	aa00002b 	bge	2f00 <vscan+0x100>
    2e50:	0200002b 	andeq	r0, r0, #43	; 0x2b
    2e54:	aa007200 	bge	1f65c <__exidx_end+0x1a5b4>
			while (isspace (*buf)) buf++;
    2e58:	ce00002b 	cdpgt	0, 0, cr0, cr0, cr11, {1}
    2e5c:	0100002b 	tsteq	r0, fp, lsr #32
    2e60:	2bd65900 	blcs	ff599268 <_estack+0xdf594268>
    2e64:	2be40000 	blcs	ff902e6c <_estack+0xdf8fde6c>
    2e68:	00010000 	andeq	r0, r1, r0
    2e6c:	002be459 	eoreq	lr, fp, r9, asr r4
			if (*buf == '\0')
    2e70:	002c1c00 	eoreq	r1, ip, r0, lsl #24
			if (*buf != ',') {
    2e74:	58000100 	stmdapl	r0, {r8}
			sap = va_arg (ap, char*);
    2e78:	00002c26 	andeq	r2, r0, r6, lsr #24
			nc++;
    2e7c:	00002c36 	andeq	r2, r0, r6, lsr ip
			if (*buf != ',') {
    2e80:	36580001 	ldrbcc	r0, [r8], -r1
				while (!isspace (*buf) && *buf != ',' &&
    2e84:	3e00002c 	cdpcc	0, 0, cr0, cr0, cr12, {1}
    2e88:	0200002c 	andeq	r0, r0, #44	; 0x2c
    2e8c:	5c017200 	sfmpl	f7, 4, [r1], {-0}
    2e90:	8600002c 	strhi	r0, [r0], -ip, lsr #32
    2e94:	0100002c 	tsteq	r0, ip, lsr #32
    2e98:	2c8a5800 	stccs	8, cr5, [sl], {0}
    2e9c:	2c8e0000 	stccs	0, cr0, [lr], {0}
			while (isspace (*buf)) buf++;
    2ea0:	00010000 	andeq	r0, r1, r0
    2ea4:	002c9850 	eoreq	r9, ip, r0, asr r8
    2ea8:	002ca200 	eoreq	sl, ip, r0, lsl #4
    2eac:	50000100 	andpl	r0, r0, r0, lsl #2
    2eb0:	00002cc2 	andeq	r2, r0, r2, asr #25
			if (*buf == ',') buf++;
    2eb4:	00002cc4 	andeq	r2, r0, r4, asr #25
    2eb8:	ca500001 	bgt	1402ec4 <__ccfg+0x13e2f1c>
			*sap = '\0';
    2ebc:	cc00002c 	stcgt	0, cr0, [r0], {44}	; 0x2c
			break;
    2ec0:	0100002c 	tsteq	r0, ip, lsr #32
		    case 'd': scani (word); break;
    2ec4:	2ccc5800 	stclcs	8, cr5, [ip], {0}
    2ec8:	2cef0000 	stclcs	0, cr0, [pc]	; 2ed0 <vscan+0xd0>
    2ecc:	00010000 	andeq	r0, r1, r0
    2ed0:	002cfe53 	eoreq	pc, ip, r3, asr lr	; <UNPREDICTABLE>
    2ed4:	002d0200 	eoreq	r0, sp, r0, lsl #4
    2ed8:	59000100 	stmdbpl	r0, {r8}
    2edc:	00002d0c 	andeq	r2, r0, ip, lsl #26
    2ee0:	00002d2c 	andeq	r2, r0, ip, lsr #26
    2ee4:	32590001 	subscc	r0, r9, #1
    2ee8:	3400002d 	strcc	r0, [r0], #-45	; 0xffffffd3
    2eec:	0100002d 	tsteq	r0, sp, lsr #32
    2ef0:	2d3a5900 			; <UNDEFINED> instruction: 0x2d3a5900
    2ef4:	2d480000 	stclcs	0, cr0, [r8, #-0]
    2ef8:	00010000 	andeq	r0, r1, r0
    2efc:	002d6853 	eoreq	r6, sp, r3, asr r8
    2f00:	002d7100 	eoreq	r7, sp, r0, lsl #2
    2f04:	53000100 	movwpl	r0, #256	; 0x100
    2f08:	00002d7a 	andeq	r2, r0, sl, ror sp
    2f0c:	00002d8e 	andeq	r2, r0, lr, lsl #27
    2f10:	a2580001 	subsge	r0, r8, #1
    2f14:	b000002d 	andlt	r0, r0, sp, lsr #32
    2f18:	0100002d 	tsteq	r0, sp, lsr #32
    2f1c:	00005900 	andeq	r5, r0, r0, lsl #18
    2f20:	00000000 	andeq	r0, r0, r0
    2f24:	2c3e0000 	ldccs	0, cr0, [lr], #-0
    2f28:	2c5c0000 	mracs	r0, ip, acc0
    2f2c:	00010000 	andeq	r0, r1, r0
    2f30:	00000058 	andeq	r0, r0, r8, asr r0
		    case 'u': scanu (word); break;
    2f34:	00000000 	andeq	r0, r0, r0
    2f38:	002c6800 	eoreq	r6, ip, r0, lsl #16
    2f3c:	002c7c00 	eoreq	r7, ip, r0, lsl #24
    2f40:	59000100 	stmdbpl	r0, {r8}
    2f44:	00002c80 	andeq	r2, r0, r0, lsl #25
    2f48:	00002cae 	andeq	r2, r0, lr, lsr #25
    2f4c:	b6590001 	ldrblt	r0, [r9], -r1
    2f50:	ca00002c 	bgt	3008 <vscan+0x208>
    2f54:	0100002c 	tsteq	r0, ip, lsr #32
    2f58:	00005900 	andeq	r5, r0, r0, lsl #18
    2f5c:	00000000 	andeq	r0, r0, r0
    2f60:	2c860000 	stccs	0, cr0, [r6], {0}
    2f64:	2cb80000 	ldccs	0, cr0, [r8]
    2f68:	00010000 	andeq	r0, r1, r0
    2f6c:	002cb858 	eoreq	fp, ip, r8, asr r8
    2f70:	002cc400 	eoreq	ip, ip, r0, lsl #8
    2f74:	53000100 	movwpl	r0, #256	; 0x100
    2f78:	00002cc4 	andeq	r2, r0, r4, asr #25
		    case 'x': scanx (word); break;
    2f7c:	00002cca 	andeq	r2, r0, sl, asr #25
    2f80:	00580001 	subseq	r0, r8, r1
    2f84:	00000000 	andeq	r0, r0, r0
    2f88:	f4000000 	vst4.8	{d0-d3}, [r0], r0
    2f8c:	3a00002c 	bcc	3044 <vscan+0x244>
    2f90:	0100002d 	tsteq	r0, sp, lsr #32
    2f94:	00005a00 	andeq	r5, r0, r0, lsl #20
    2f98:	00000000 	andeq	r0, r0, r0
    2f9c:	2cfa0000 	ldclcs	0, cr0, [sl]
    2fa0:	2d240000 	stccs	0, cr0, [r4, #-0]
    2fa4:	00010000 	andeq	r0, r1, r0
    2fa8:	002d2458 	eoreq	r2, sp, r8, asr r4
    2fac:	002d3400 	eoreq	r3, sp, r0, lsl #8
    2fb0:	53000100 	movwpl	r0, #256	; 0x100
    2fb4:	00002d34 	andeq	r2, r0, r4, lsr sp
    2fb8:	00002d3a 	andeq	r2, r0, sl, lsr sp
    2fbc:	00580001 	subseq	r0, r8, r1
    2fc0:	00000000 	andeq	r0, r0, r0
    2fc4:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    2fc8:	6800002d 	stmdavs	r0, {r0, r2, r3, r5}
    2fcc:	0100002d 	tsteq	r0, sp, lsr #32
    2fd0:	00005800 	andeq	r5, r0, r0, lsl #16
    2fd4:	00000000 	andeq	r0, r0, r0
    2fd8:	2d7a0000 	ldclcs	0, cr0, [sl, #-0]
    2fdc:	2d7e0000 	ldclcs	0, cr0, [lr, #-0]
    2fe0:	00020000 	andeq	r0, r2, r0
    2fe4:	2d7e0074 	ldclcs	0, cr0, [lr, #-464]!	; 0xfffffe30
    2fe8:	2d860000 	stccs	0, cr0, [r6]
    2fec:	00020000 	andeq	r0, r2, r0
    2ff0:	00007c74 	andeq	r7, r0, r4, ror ip
			switch (*fmt++) {
    2ff4:	00000000 	andeq	r0, r0, r0
    2ff8:	2d920000 	ldccs	0, cr0, [r2]
    2ffc:	2da00000 	stccs	0, cr0, [r0]
    3000:	00010000 	andeq	r0, r1, r0
    3004:	00000058 	andeq	r0, r0, r8, asr r0
    3008:	00000000 	andeq	r0, r0, r0
		    	    case 'd': scani (lword); break;
    300c:	002e0000 	eoreq	r0, lr, r0
    3010:	002e1c00 	eoreq	r1, lr, r0, lsl #24
    3014:	50000100 	andpl	r0, r0, r0, lsl #2
    3018:	00002e5a 	andeq	r2, r0, sl, asr lr
    301c:	00002e6c 	andeq	r2, r0, ip, ror #28
    3020:	6c530001 	mrrcvs	0, 0, r0, r3, cr1
    3024:	8000002e 	andhi	r0, r0, lr, lsr #32
    3028:	0100002e 	tsteq	r0, lr, lsr #32
    302c:	2e825600 	cdpcs	6, 8, cr5, cr2, cr0, {0}
    3030:	2e9e0000 	cdpcs	0, 9, cr0, cr14, cr0, {0}
    3034:	00010000 	andeq	r0, r1, r0
    3038:	002eb056 	eoreq	fp, lr, r6, asr r0
    303c:	002ebc00 	eoreq	fp, lr, r0, lsl #24
    3040:	56000100 	strpl	r0, [r0], -r0, lsl #2
    3044:	00002ebc 			; <UNDEFINED> instruction: 0x00002ebc
    3048:	00002ec2 	andeq	r2, r0, r2, asr #29
    304c:	c8530001 	ldmdagt	r3, {r0}^
    3050:	cc00002e 	stcgt	0, cr0, [r0], {46}	; 0x2e
    3054:	0100002e 	tsteq	r0, lr, lsr #32
    3058:	2ecc5300 	cdpcs	3, 12, cr5, cr12, cr0, {0}
    305c:	2edc0000 	cdpcs	0, 13, cr0, cr12, cr0, {0}
    3060:	00010000 	andeq	r0, r1, r0
    3064:	002edc5e 	eoreq	sp, lr, lr, asr ip
		    	    case 'x': scanx (lword); break;
    3068:	002ef200 	eoreq	pc, lr, r0, lsl #4
    306c:	53000100 	movwpl	r0, #256	; 0x100
    3070:	00002ef2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    3074:	00002efa 	strdeq	r2, [r0], -sl
    3078:	005e0001 	subseq	r0, lr, r1
    307c:	1c00002f 	stcne	0, cr0, [r0], {47}	; 0x2f
    3080:	0100002f 	tsteq	r0, pc, lsr #32
    3084:	2f1c5300 	svccs	0x001c5300
    3088:	2f220000 	svccs	0x00220000
    308c:	00010000 	andeq	r0, r1, r0
    3090:	002f225e 	eoreq	r2, pc, lr, asr r2	; <UNPREDICTABLE>
    3094:	002f2400 	eoreq	r2, pc, r0, lsl #8
    3098:	53000100 	movwpl	r0, #256	; 0x100
    309c:	00002f30 	andeq	r2, r0, r0, lsr pc
    30a0:	00002f32 	andeq	r2, r0, r2, lsr pc
    30a4:	325e0001 	subscc	r0, lr, #1
    30a8:	4600002f 	strmi	r0, [r0], -pc, lsr #32
    30ac:	0100002f 	tsteq	r0, pc, lsr #32
    30b0:	2f465300 	svccs	0x00465300
    30b4:	2f560000 	svccs	0x00560000
    30b8:	00010000 	andeq	r0, r1, r0
    30bc:	002f5656 	eoreq	r5, pc, r6, asr r6	; <UNPREDICTABLE>
    30c0:	002f6a00 	eoreq	r6, pc, r0, lsl #20
    30c4:	53000100 	movwpl	r0, #256	; 0x100
    30c8:	00002f78 	andeq	r2, r0, r8, ror pc
    30cc:	00002f7a 	andeq	r2, r0, sl, ror pc
    30d0:	7a560001 	bvc	15830dc <__ccfg+0x1563134>
    30d4:	9200002f 	andls	r0, r0, #47	; 0x2f
		    	    case 'd': scani (lword); break;
    30d8:	0100002f 	tsteq	r0, pc, lsr #32
    30dc:	2f925300 	svccs	0x00925300
    30e0:	2fac0000 	svccs	0x00ac0000
    30e4:	00010000 	andeq	r0, r1, r0
    30e8:	002fb256 	eoreq	fp, pc, r6, asr r2	; <UNPREDICTABLE>
    30ec:	002fd400 	eoreq	sp, pc, r0, lsl #8
    30f0:	53000100 	movwpl	r0, #256	; 0x100
		    	    case 'u': scanu (lword); break;
    30f4:	00002fd4 	ldrdeq	r2, [r0], -r4
    30f8:	00002fe6 	andeq	r2, r0, r6, ror #31
    30fc:	0c560001 	mrrceq	0, 0, r0, r6, cr1
    3100:	10000030 	andne	r0, r0, r0, lsr r0
    3104:	01000030 	tsteq	r0, r0, lsr r0
    3108:	30105300 	andscc	r5, r0, r0, lsl #6
    310c:	30200000 	eorcc	r0, r0, r0
    3110:	00010000 	andeq	r0, r1, r0
    3114:	00302058 	eorseq	r2, r0, r8, asr r0
    3118:	00303000 	eorseq	r3, r0, r0
    311c:	53000100 	movwpl	r0, #256	; 0x100
    3120:	00003030 	andeq	r3, r0, r0, lsr r0
    3124:	0000303a 	andeq	r3, r0, sl, lsr r0
    3128:	40580001 	subsmi	r0, r8, r1
    312c:	62000030 	andvs	r0, r0, #48	; 0x30
    3130:	01000030 	tsteq	r0, r0, lsr r0
    3134:	30685300 	rsbcc	r5, r8, r0, lsl #6
    3138:	30780000 	rsbscc	r0, r8, r0
		    	    case 'x': scanx (lword); break;
    313c:	00010000 	andeq	r0, r1, r0
    3140:	00307853 	eorseq	r7, r0, r3, asr r8
			if ((c = *buf++) == '\0')
    3144:	00309200 	eorseq	r9, r0, r0, lsl #4
    3148:	56000100 	strpl	r0, [r0], -r0, lsl #2
			sap = va_arg (ap, char*);
    314c:	00003098 	muleq	r0, r8, r0
			nc++;
    3150:	000030b8 	strheq	r3, [r0], -r8
			break;
    3154:	b8530001 	ldmdalt	r3, {r0}^
			while (isspace (*buf)) buf++;
    3158:	ca000030 	bgt	3220 <NOROM_CPUcpsid>
    315c:	01000030 	tsteq	r0, r0, lsr r0
    3160:	30de5600 	sbcscc	r5, lr, r0, lsl #12
						*sap++ = *buf++;
    3164:	30e20000 	rsccc	r0, r2, r0
    3168:	00010000 	andeq	r0, r1, r0
			while (isspace (*buf)) buf++;
    316c:	0030e258 	eorseq	lr, r0, r8, asr r2
    3170:	0030e600 	eorseq	lr, r0, r0, lsl #12
    3174:	53000100 	movwpl	r0, #256	; 0x100
		return 0;
    3178:	000030f0 	strdeq	r3, [r0], -r0
    317c:	000030f2 	strdeq	r3, [r0], -r2
		    case 'x': scanx (word); break;
    3180:	f2580001 	vhadd.s16	d16, d8, d1
    3184:	08000030 	stmdaeq	r0, {r4, r5}
		    	    case 'x': scanx (lword); break;
    3188:	01000031 	tsteq	r0, r1, lsr r0
    318c:	31085300 	mrscc	r5, (UNDEF: 56)
    3190:	31180000 	tstcc	r8, r0
    3194:	00010000 	andeq	r0, r1, r0
    3198:	00311856 	eorseq	r1, r1, r6, asr r8
    319c:	00312e00 	eorseq	r2, r1, r0, lsl #28
    31a0:	53000100 	movwpl	r0, #256	; 0x100
    31a4:	00003138 	andeq	r3, r0, r8, lsr r1
    31a8:	0000313a 	andeq	r3, r0, sl, lsr r1
    31ac:	3a560001 	bcc	15831b8 <__ccfg+0x1563210>
    31b0:	42000031 	andmi	r0, r0, #49	; 0x31
    31b4:	01000031 	tsteq	r0, r1, lsr r0
    31b8:	31465300 	mrscc	r5, SPSR_und
    31bc:	31560000 	cmpcc	r6, r0
    31c0:	00010000 	andeq	r0, r1, r0
    31c4:	00315653 	eorseq	r5, r1, r3, asr r6
    31c8:	00316400 	eorseq	r6, r1, r0, lsl #8
    31cc:	56000100 	strpl	r0, [r0], -r0, lsl #2
    31d0:	00003164 	andeq	r3, r0, r4, ror #2
    31d4:	0000316a 	andeq	r3, r0, sl, ror #2
    31d8:	6a580001 	bvs	16031e4 <__ccfg+0x15e323c>
    31dc:	76000031 			; <UNDEFINED> instruction: 0x76000031
    31e0:	01000031 	tsteq	r0, r1, lsr r0
    31e4:	31765600 	cmncc	r6, r0, lsl #12
    31e8:	317e0000 	cmncc	lr, r0
    31ec:	00010000 	andeq	r0, r1, r0
    31f0:	00317e50 	eorseq	r7, r1, r0, asr lr
    31f4:	00319000 	eorseq	r9, r1, r0
    31f8:	53000100 	movwpl	r0, #256	; 0x100
	...
    3204:	00002e00 	andeq	r2, r0, r0, lsl #28
    3208:	00002e1e 	andeq	r2, r0, lr, lsl lr
    320c:	1e510001 	cdpne	0, 5, cr0, cr1, cr1, {0}
    3210:	2400002e 	strcs	r0, [r0], #-46	; 0xffffffd2
    3214:	0100002e 	tsteq	r0, lr, lsr #32
    3218:	2e245600 	cfmadda32cs	mvax0, mvax5, mvfx4, mvfx0
    321c:	2e420000 	cdpcs	0, 4, cr0, cr2, cr0, {0}
    3220:	00010000 	andeq	r0, r1, r0
    3224:	002e4851 	eoreq	r4, lr, r1, asr r8
    3228:	00319000 	eorseq	r9, r1, r0
    322c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    3238:	00002e00 	andeq	r2, r0, r0, lsl #28
    323c:	00002e00 	andeq	r2, r0, r0, lsl #28
    3240:	00520001 	subseq	r0, r2, r1
    3244:	1c00002e 	stcne	0, cr0, [r0], {46}	; 0x2e
    3248:	0300002e 	movweq	r0, #46	; 0x2e
    324c:	04935200 	ldreq	r5, [r3], #512	; 0x200
    3250:	00002ec2 	andeq	r2, r0, r2, asr #29
    3254:	00002ef6 	strdeq	r2, [r0], -r6
    3258:	1c520001 	mrrcne	0, 0, r0, r2, cr1
    325c:	2200002f 	andcs	r0, r0, #47	; 0x2f
    3260:	0100002f 	tsteq	r0, pc, lsr #32
    3264:	2f325200 	svccs	0x00325200
    3268:	2f4c0000 	svccs	0x004c0000
    326c:	00010000 	andeq	r0, r1, r0
    3270:	002f7a52 	eoreq	r7, pc, r2, asr sl	; <UNPREDICTABLE>
    3274:	002fa200 	eoreq	sl, pc, r0, lsl #4
    3278:	52000100 	andpl	r0, r0, #0, 2
    327c:	00002ff4 	strdeq	r2, [r0], -r4
    3280:	00003034 	andeq	r3, r0, r4, lsr r0
    3284:	62520001 	subsvs	r0, r2, #1
    3288:	88000030 	stmdahi	r0, {r4, r5}
    328c:	01000030 	tsteq	r0, r0, lsr r0
    3290:	30d85200 	sbcscc	r5, r8, r0, lsl #4
    3294:	30e20000 	rsccc	r0, r2, r0
    3298:	00010000 	andeq	r0, r1, r0
    329c:	0030f252 	eorseq	pc, r0, r2, asr r2	; <UNPREDICTABLE>
    32a0:	00310e00 	eorseq	r0, r1, r0, lsl #28
    32a4:	52000100 	andpl	r0, r0, #0, 2
    32a8:	0000313a 	andeq	r3, r0, sl, lsr r1
    32ac:	00003150 	andeq	r3, r0, r0, asr r1
    32b0:	56520001 	ldrbpl	r0, [r2], -r1
    32b4:	64000031 	strvs	r0, [r0], #-49	; 0xffffffcf
    32b8:	01000031 	tsteq	r0, r1, lsr r0
    32bc:	31765200 	cmncc	r6, r0, lsl #4
    32c0:	317e0000 	cmncc	lr, r0
    32c4:	00010000 	andeq	r0, r1, r0
    32c8:	00000052 	andeq	r0, r0, r2, asr r0
    32cc:	00000000 	andeq	r0, r0, r0
    32d0:	002e7e00 	eoreq	r7, lr, r0, lsl #28
    32d4:	002e8000 	eoreq	r8, lr, r0
    32d8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    32dc:	00002ef8 	strdeq	r2, [r0], -r8
    32e0:	00002f1c 	andeq	r2, r0, ip, lsl pc
    32e4:	22540001 	subscs	r0, r4, #1
    32e8:	3200002f 	andcc	r0, r0, #47	; 0x2f
    32ec:	0100002f 	tsteq	r0, pc, lsr #32
    32f0:	2f4e5400 	svccs	0x004e5400
    32f4:	2f7a0000 	svccs	0x007a0000
    32f8:	00010000 	andeq	r0, r1, r0
    32fc:	002fa454 	eoreq	sl, pc, r4, asr r4	; <UNPREDICTABLE>
    3300:	002ff400 	eoreq	pc, pc, r0, lsl #8
    3304:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    3308:	00003036 	andeq	r3, r0, r6, lsr r0
    330c:	00003062 	andeq	r3, r0, r2, rrx
    3310:	8a540001 	bhi	150331c <__ccfg+0x14e3374>
    3314:	d8000030 	stmdale	r0, {r4, r5}
    3318:	01000030 	tsteq	r0, r0, lsr r0
    331c:	30e25400 	rsccc	r5, r2, r0, lsl #8
    3320:	30f20000 	rscscc	r0, r2, r0
    3324:	00010000 	andeq	r0, r1, r0
    3328:	00311054 	eorseq	r1, r1, r4, asr r0
    332c:	00313a00 	eorseq	r3, r1, r0, lsl #20
    3330:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    3334:	00003152 	andeq	r3, r0, r2, asr r1
    3338:	00003156 	andeq	r3, r0, r6, asr r1
    333c:	7e540001 	cdpvc	0, 5, cr0, cr4, cr1, {0}
    3340:	90000031 	andls	r0, r0, r1, lsr r0
    3344:	01000031 	tsteq	r0, r1, lsr r0
    3348:	00005400 	andeq	r5, r0, r0, lsl #8
    334c:	00000000 	andeq	r0, r0, r0
    3350:	2ef20000 	cdpcs	0, 15, cr0, cr2, cr0, {0}
    3354:	2f1c0000 	svccs	0x001c0000
    3358:	00010000 	andeq	r0, r1, r0
    335c:	002f2258 	eoreq	r2, pc, r8, asr r2	; <UNPREDICTABLE>
    3360:	002f3200 	eoreq	r3, pc, r0, lsl #4
    3364:	58000100 	stmdapl	r0, {r8}
	...
    3370:	00002fd4 	ldrdeq	r2, [r0], -r4
    3374:	00002fe6 	andeq	r2, r0, r6, ror #31
    3378:	e6590001 	ldrb	r0, [r9], -r1
    337c:	ee00002f 	cdp	0, 0, cr0, cr0, cr15, {1}
    3380:	0100002f 	tsteq	r0, pc, lsr #32
    3384:	00005000 	andeq	r5, r0, r0
    3388:	00000000 	andeq	r0, r0, r0
    338c:	30300000 	eorscc	r0, r0, r0
    3390:	305a0000 	subscc	r0, sl, r0
    3394:	00010000 	andeq	r0, r1, r0
    3398:	0030e250 	eorseq	lr, r0, r0, asr r2
    339c:	0030f200 	eorseq	pc, r0, r0, lsl #4
    33a0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    33ac:	000030b8 	strheq	r3, [r0], -r8
    33b0:	000030ca 	andeq	r3, r0, sl, asr #1
    33b4:	ca590001 	bgt	16433c0 <__ccfg+0x1623418>
    33b8:	d2000030 	andle	r0, r0, #48	; 0x30
    33bc:	01000030 	tsteq	r0, r0, lsr r0
    33c0:	00005000 	andeq	r5, r0, r0
    33c4:	00000000 	andeq	r0, r0, r0
    33c8:	31460000 	mrscc	r0, (UNDEF: 70)
    33cc:	31560000 	cmpcc	r6, r0
    33d0:	00010000 	andeq	r0, r1, r0
    33d4:	00000050 	andeq	r0, r0, r0, asr r0
    33d8:	00000000 	andeq	r0, r0, r0
    33dc:	002e8200 	eoreq	r8, lr, r0, lsl #4
    33e0:	002e9e00 	eoreq	r9, lr, r0, lsl #28
    33e4:	5e000100 	adfpls	f0, f0, f0
    33e8:	00003168 	andeq	r3, r0, r8, ror #2
    33ec:	0000316a 	andeq	r3, r0, sl, ror #2
    33f0:	005e0001 	subseq	r0, lr, r1
    33f4:	00000000 	andeq	r0, r0, r0
    33f8:	90000000 	andls	r0, r0, r0
    33fc:	97000031 	smladxls	r0, r1, r0, r0
    3400:	01000031 	tsteq	r0, r1, lsr r0
    3404:	31975000 	orrscc	r5, r7, r0
    3408:	31ae0000 			; <UNDEFINED> instruction: 0x31ae0000
    340c:	00010000 	andeq	r0, r1, r0
    3410:	0031ae56 	eorseq	sl, r1, r6, asr lr
    3414:	0031b200 	eorseq	fp, r1, r0, lsl #4
    3418:	f3000400 	vshl.u8	d0, d0, d0
    341c:	b29f5001 	addslt	r5, pc, #1
    3420:	b4000031 	strlt	r0, [r0], #-49	; 0xffffffcf
    3424:	01000031 	tsteq	r0, r1, lsr r0
    3428:	31b45600 			; <UNDEFINED> instruction: 0x31b45600
    342c:	31b80000 			; <UNDEFINED> instruction: 0x31b80000
    3430:	00040000 	andeq	r0, r4, r0
    3434:	9f5001f3 	svcls	0x005001f3
	...
    3440:	0000319a 	muleq	r0, sl, r1
    3444:	000031a3 	andeq	r3, r0, r3, lsr #3
    3448:	00700005 	rsbseq	r0, r0, r5
    344c:	a39f2930 	orrsge	r2, pc, #48, 18	; 0xc0000
    3450:	ae000031 	mcrge	0, 0, r0, cr0, cr1, {1}
    3454:	05000031 	streq	r0, [r0, #-49]	; 0xffffffcf
    3458:	30007500 	andcc	r7, r0, r0, lsl #10
    345c:	31b29f29 			; <UNDEFINED> instruction: 0x31b29f29
    3460:	31b40000 			; <UNDEFINED> instruction: 0x31b40000
    3464:	00050000 	andeq	r0, r5, r0
    3468:	29300075 	ldmdbcs	r0!, {r0, r2, r4, r5, r6}
    346c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    347c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3488:	00560001 	subseq	r0, r6, r1
    348c:	00000000 	andeq	r0, r0, r0
    3490:	04000000 	streq	r0, [r0], #-0
    3494:	5001f300 	andpl	pc, r1, r0, lsl #6
    3498:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    349c:	00000000 	andeq	r0, r0, r0
    34a0:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    34ac:	01f30004 	mvnseq	r0, r4
    34b0:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    34c0:	00010000 	andeq	r0, r1, r0
    34c4:	00000051 	andeq	r0, r0, r1, asr r0
    34c8:	00000000 	andeq	r0, r0, r0
    34cc:	f3000400 	vshl.u8	d0, d0, d0
    34d0:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    34e0:	05000000 	streq	r0, [r0, #-0]
    34e4:	30007000 	andcc	r7, r0, r0
    34e8:	00009f29 	andeq	r9, r0, r9, lsr #30
    34ec:	00000000 	andeq	r0, r0, r0
    34f0:	00050000 	andeq	r0, r5, r0
    34f4:	29300075 	ldmdbcs	r0!, {r0, r2, r4, r5, r6}
    34f8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    34fc:	00000000 	andeq	r0, r0, r0
    3500:	75000500 	strvc	r0, [r0, #-1280]	; 0xfffffb00
    3504:	9f293000 	svcls	0x00293000
	...
    3510:	000031bc 			; <UNDEFINED> instruction: 0x000031bc
    3514:	000031ce 	andeq	r3, r0, lr, asr #3
    3518:	00700007 	rsbseq	r0, r0, r7
    351c:	263f243f 			; <UNDEFINED> instruction: 0x263f243f
    3520:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3524:	00000000 	andeq	r0, r0, r0
    3528:	0031c400 	eorseq	ip, r1, r0, lsl #8
    352c:	0031cc00 	eorseq	ip, r1, r0, lsl #24
    3530:	72000d00 	andvc	r0, r0, #0, 26
    3534:	00717a80 	rsbseq	r7, r1, r0, lsl #21
    3538:	26482448 	strbcs	r2, [r8], -r8, asr #8
    353c:	9f26341e 	svcls	0x0026341e
    3540:	000031cc 	andeq	r3, r0, ip, asr #3
    3544:	000031e8 	andeq	r3, r0, r8, ror #3
    3548:	0071000c 	rsbseq	r0, r1, ip
    354c:	26482448 	strbcs	r2, [r8], -r8, asr #8
    3550:	341e0072 	ldrcc	r0, [lr], #-114	; 0xffffff8e
    3554:	00009f26 	andeq	r9, r0, r6, lsr #30
    3558:	00000000 	andeq	r0, r0, r0
    355c:	31ee0000 	mvncc	r0, r0
    3560:	31f80000 	mvnscc	r0, r0
    3564:	00010000 	andeq	r0, r1, r0
    3568:	00000053 	andeq	r0, r0, r3, asr r0
    356c:	00000000 	andeq	r0, r0, r0
    3570:	0031f000 	eorseq	pc, r1, r0
    3574:	0031fc00 	eorseq	pc, r1, r0, lsl #24
    3578:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3584:	00003230 	andeq	r3, r0, r0, lsr r2
    3588:	00003248 	andeq	r3, r0, r8, asr #4
    358c:	48500001 	ldmdami	r0, {r0}^
    3590:	82000032 	andhi	r0, r0, #50	; 0x32
    3594:	01000032 	tsteq	r0, r2, lsr r0
    3598:	32825500 	addcc	r5, r2, #0, 10
    359c:	328c0000 	addcc	r0, ip, #0
    35a0:	00040000 	andeq	r0, r4, r0
    35a4:	9f5001f3 	svcls	0x005001f3
	...
    35b0:	00003230 	andeq	r3, r0, r0, lsr r2
    35b4:	00003236 	andeq	r3, r0, r6, lsr r2
    35b8:	36510001 	ldrbcc	r0, [r1], -r1
    35bc:	6e000032 	mcrvs	0, 0, r0, cr0, cr2, {1}
    35c0:	01000032 	tsteq	r0, r2, lsr r0
    35c4:	326e5400 	rsbcc	r5, lr, #0, 8
    35c8:	328c0000 	addcc	r0, ip, #0
    35cc:	00040000 	andeq	r0, r4, r0
    35d0:	9f5101f3 	svcls	0x005101f3
	...
    35dc:	0000326a 	andeq	r3, r0, sl, ror #4
    35e0:	0000327e 	andeq	r3, r0, lr, ror r2
    35e4:	00550001 	subseq	r0, r5, r1
    35e8:	00000000 	andeq	r0, r0, r0
    35ec:	6a000000 	bvs	35f4 <NOROM_RFCRTrim+0xcc>
    35f0:	6e000032 	mcrvs	0, 0, r0, cr0, cr2, {1}
    35f4:	01000032 	tsteq	r0, r2, lsr r0
    35f8:	326e5400 	rsbcc	r5, lr, #0, 8
    35fc:	327e0000 	rsbscc	r0, lr, #0
    3600:	00040000 	andeq	r0, r4, r0
    3604:	9f5101f3 	svcls	0x005101f3
	...
    3610:	0000328c 	andeq	r3, r0, ip, lsl #5
    3614:	000032aa 	andeq	r3, r0, sl, lsr #5
    3618:	aa500001 	bge	1403624 <__ccfg+0x13e367c>
    361c:	b8000032 	stmdalt	r0, {r1, r4, r5}
    3620:	04000032 	streq	r0, [r0], #-50	; 0xffffffce
    3624:	5001f300 	andpl	pc, r1, r0, lsl #6
    3628:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    3638:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3644:	00560001 	subseq	r0, r6, r1
    3648:	00000000 	andeq	r0, r0, r0
    364c:	04000000 	streq	r0, [r0], #-0
    3650:	5001f300 	andpl	pc, r1, r0, lsl #6
    3654:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    3664:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    3678:	00700007 	rsbseq	r0, r0, r7
    367c:	191c0073 	ldmdbne	ip, {r0, r1, r4, r5, r6}
    3680:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3684:	00000000 	andeq	r0, r0, r0
    3688:	70000400 	andvc	r0, r0, r0, lsl #8
    368c:	009f1900 	addseq	r1, pc, r0, lsl #18
	...
    369c:	04000000 	streq	r0, [r0], #-0
    36a0:	07d00a00 	ldrbeq	r0, [r0, r0, lsl #20]
    36a4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    36a8:	00000000 	andeq	r0, r0, r0
    36ac:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    36b8:	00720005 	rsbseq	r0, r2, r5
    36bc:	009f2540 	addseq	r2, pc, r0, asr #10
    36c0:	00000000 	andeq	r0, r0, r0
    36c4:	01000000 	mrseq	r0, (UNDEF: 0)
    36c8:	00005000 	andeq	r5, r0, r0
    36cc:	00000000 	andeq	r0, r0, r0
    36d0:	00040000 	andeq	r0, r4, r0
    36d4:	9f07d00a 	svcls	0x0007d00a
	...
    36e0:	00500001 	subseq	r0, r0, r1
    36e4:	00000000 	andeq	r0, r0, r0
    36e8:	0a000000 	beq	36f0 <TrimAfterColdResetWakeupFromShutDown+0x74>
    36ec:	16000033 			; <UNDEFINED> instruction: 0x16000033
    36f0:	01000033 	tsteq	r0, r3, lsr r0
    36f4:	00005000 	andeq	r5, r0, r0
    36f8:	00000000 	andeq	r0, r0, r0
    36fc:	330a0000 	movwcc	r0, #40960	; 0xa000
    3700:	33160000 	tstcc	r6, #0
    3704:	00010000 	andeq	r0, r1, r0
    3708:	00000053 	andeq	r0, r0, r3, asr r0
	...
    3718:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3724:	1b700003 	blne	1c03738 <__ccfg+0x1be3790>
    3728:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    372c:	00000000 	andeq	r0, r0, r0
    3730:	f3000400 	vshl.u8	d0, d0, d0
    3734:	009f5001 	addseq	r5, pc, r1
	...
    3744:	07000000 	streq	r0, [r0, -r0]
    3748:	48007400 	stmdami	r0, {sl, ip, sp, lr}
    374c:	9f264824 	svcls	0x00264824
	...
    3760:	00500001 	subseq	r0, r0, r1
    3764:	00000000 	andeq	r0, r0, r0
    3768:	06000000 	streq	r0, [r0], -r0
    376c:	5001f300 	andpl	pc, r1, r0, lsl #6
    3770:	009f1c4b 	addseq	r1, pc, fp, asr #24
	...
    3780:	01000000 	mrseq	r0, (UNDEF: 0)
    3784:	00005500 	andeq	r5, r0, r0, lsl #10
    3788:	00000000 	andeq	r0, r0, r0
    378c:	000c0000 	andeq	r0, ip, r0
    3790:	4b5001f3 	blmi	1403f64 <__ccfg+0x13e3fbc>
    3794:	5001f31c 	andpl	pc, r1, ip, lsl r3	; <UNPREDICTABLE>
    3798:	9f1e1c4b 	svcls	0x001e1c4b
	...
    37ac:	0071002c 	rsbseq	r0, r1, ip, lsr #32
    37b0:	00712640 	rsbseq	r2, r1, r0, asr #12
    37b4:	26482440 	strbcs	r2, [r8], -r0, asr #8
    37b8:	331e0070 	tstcc	lr, #112	; 0x70
    37bc:	00712226 	rsbseq	r2, r1, r6, lsr #4
    37c0:	26482448 	strbcs	r2, [r8], -r8, asr #8
    37c4:	3a1e0075 	bcc	7839a0 <__ccfg+0x7639f8>
    37c8:	00742226 	rsbseq	r2, r4, r6, lsr #4
    37cc:	26482448 	strbcs	r2, [r8], -r8, asr #8
    37d0:	701e0075 	andsvc	r0, lr, r5, ror r0
    37d4:	26421e00 	strbcs	r1, [r2], -r0, lsl #28
    37d8:	00009f22 	andeq	r9, r0, r2, lsr #30
    37dc:	00000000 	andeq	r0, r0, r0
    37e0:	00320000 	eorseq	r0, r2, r0
    37e4:	26400071 			; <UNDEFINED> instruction: 0x26400071
    37e8:	4b5001f3 	blmi	1403fbc <__ccfg+0x13e4014>
    37ec:	4000711c 	andmi	r7, r0, ip, lsl r1
    37f0:	1e264824 	cdpne	8, 2, cr4, cr6, cr4, {1}
    37f4:	71222633 			; <UNDEFINED> instruction: 0x71222633
    37f8:	48244800 	stmdami	r4!, {fp, lr}
    37fc:	1e007526 	cfsh32ne	mvfx7, mvfx0, #22
    3800:	f322263a 	vmin.u32	d2, d2, d26
    3804:	1c4b5001 	mcrrne	0, 0, r5, fp, cr1
    3808:	24480074 	strbcs	r0, [r8], #-116	; 0xffffff8c
    380c:	751e2648 	ldrvc	r2, [lr, #-1608]	; 0xfffff9b8
    3810:	26421e00 	strbcs	r1, [r2], -r0, lsl #28
    3814:	00009f22 	andeq	r9, r0, r2, lsr #30
	...
    3824:	00010000 	andeq	r0, r1, r0
    3828:	00000050 	andeq	r0, r0, r0, asr r0
    382c:	00000000 	andeq	r0, r0, r0
    3830:	f3000400 	vshl.u8	d0, d0, d0
    3834:	009f5001 	addseq	r5, pc, r1
	...
    3844:	0b000000 	bleq	384c <NOROM_SetupSetVddrLevel+0x58>
    3848:	70007000 	andvc	r7, r0, r0
    384c:	26461e00 	strbcs	r1, [r6], -r0, lsl #28
    3850:	9f1c0070 	svcls	0x001c0070
	...
    385c:	00500001 	subseq	r0, r0, r1
    3860:	00000000 	andeq	r0, r0, r0
    3864:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    3868:	5001f300 	andpl	pc, r1, r0, lsl #6
    386c:	1e5001f3 	mrcne	1, 2, r0, cr0, cr3, {7}
    3870:	01f32646 	mvnseq	r2, r6, asr #12
    3874:	009f1c50 	addseq	r1, pc, r0, asr ip	; <UNPREDICTABLE>
	...
    3884:	01000000 	mrseq	r0, (UNDEF: 0)
    3888:	00005500 	andeq	r5, r0, r0, lsl #10
    388c:	00000000 	andeq	r0, r0, r0
    3890:	00050000 	andeq	r0, r5, r0
    3894:	0910380c 	ldmdbeq	r0, {r2, r3, fp, ip, sp}
    3898:	00000040 	andeq	r0, r0, r0, asr #32
	...
    38a8:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    38bc:	00700006 	rsbseq	r0, r0, r6
    38c0:	9f1c0076 	svcls	0x001c0076
	...
    38cc:	00500001 	subseq	r0, r0, r1
	...
    38dc:	0a000000 	beq	38e4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x74>
    38e0:	08007000 	stmdaeq	r0, {ip, sp, lr}
    38e4:	1a2444fc 	bne	914cdc <__ccfg+0x8f4d34>
    38e8:	009f2546 	addseq	r2, pc, r6, asr #10
	...
    38f8:	01000000 	mrseq	r0, (UNDEF: 0)
    38fc:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    390c:	00090000 	andeq	r0, r9, r0
    3910:	000a0073 	andeq	r0, sl, r3, ror r0
    3914:	253a1afc 	ldrcs	r1, [sl, #-2812]!	; 0xfffff504
    3918:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    3928:	73000a00 	movwvc	r0, #2560	; 0xa00
    392c:	40fc0800 	rscsmi	r0, ip, r0, lsl #16
    3930:	25421a24 	strbcs	r1, [r2, #-2596]	; 0xfffff5dc
    3934:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3938:	00000000 	andeq	r0, r0, r0
    393c:	00336400 	eorseq	r6, r3, r0, lsl #8
    3940:	00338200 	eorseq	r8, r3, r0, lsl #4
    3944:	50000100 	andpl	r0, r0, r0, lsl #2
    3948:	00003382 	andeq	r3, r0, r2, lsl #7
    394c:	0000338c 	andeq	r3, r0, ip, lsl #7
    3950:	01f30004 	mvnseq	r0, r4
    3954:	00009f50 	andeq	r9, r0, r0, asr pc
    3958:	00000000 	andeq	r0, r0, r0
    395c:	33ee0000 	mvncc	r0, #0
    3960:	33f00000 	mvnscc	r0, #0
    3964:	00010000 	andeq	r0, r1, r0
    3968:	0033f253 	eorseq	pc, r3, r3, asr r2	; <UNPREDICTABLE>
    396c:	0033f400 	eorseq	pc, r3, r0, lsl #8
    3970:	53000100 	movwpl	r0, #256	; 0x100
	...
    397c:	00003528 	andeq	r3, r0, r8, lsr #10
    3980:	0000355e 	andeq	r3, r0, lr, asr r5
    3984:	5e500001 	cdppl	0, 5, cr0, cr0, cr1, {0}
    3988:	40000035 	andmi	r0, r0, r5, lsr r0
    398c:	04000036 	streq	r0, [r0], #-54	; 0xffffffca
    3990:	5001f300 	andpl	pc, r1, r0, lsl #6
    3994:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3998:	00000000 	andeq	r0, r0, r0
    399c:	00354600 	eorseq	r4, r5, r0, lsl #12
    39a0:	00354a00 	eorseq	r4, r5, r0, lsl #20
    39a4:	51000100 	mrspl	r0, (UNDEF: 16)
    39a8:	0000354a 	andeq	r3, r0, sl, asr #10
    39ac:	00003550 	andeq	r3, r0, r0, asr r5
    39b0:	9f320002 	svcls	0x00320002
    39b4:	00003554 	andeq	r3, r0, r4, asr r5
    39b8:	000035de 	ldrdeq	r3, [r0], -lr
    39bc:	de510001 	cdple	0, 5, cr0, cr1, cr1, {0}
    39c0:	e2000035 	and	r0, r0, #53	; 0x35
    39c4:	03000035 	movweq	r0, #53	; 0x35
    39c8:	9f057100 	svcls	0x00057100
    39cc:	00003604 	andeq	r3, r0, r4, lsl #12
    39d0:	0000361a 	andeq	r3, r0, sl, lsl r6
    39d4:	1a510001 	bne	14439e0 <__ccfg+0x1423a38>
    39d8:	1c000036 	stcne	0, cr0, [r0], {54}	; 0x36
    39dc:	03000036 	movweq	r0, #54	; 0x36
    39e0:	9f057100 	svcls	0x00057100
	...
    39ec:	000035aa 	andeq	r3, r0, sl, lsr #11
    39f0:	000035b0 			; <UNDEFINED> instruction: 0x000035b0
    39f4:	b8530001 	ldmdalt	r3, {r0}^
    39f8:	ba000035 	blt	3ad4 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio+0x8>
    39fc:	01000035 	tsteq	r0, r5, lsr r0
    3a00:	35ce5300 	strbcc	r5, [lr, #768]	; 0x300
    3a04:	35d00000 	ldrbcc	r0, [r0]
    3a08:	00010000 	andeq	r0, r1, r0
    3a0c:	0035d853 	eorseq	sp, r5, r3, asr r8
    3a10:	0035e400 	eorseq	lr, r5, r0, lsl #8
    3a14:	53000100 	movwpl	r0, #256	; 0x100
    3a18:	00003604 	andeq	r3, r0, r4, lsl #12
    3a1c:	00003610 	andeq	r3, r0, r0, lsl r6
    3a20:	14530001 	ldrbne	r0, [r3], #-1
    3a24:	1c000036 	stcne	0, cr0, [r0], {54}	; 0x36
    3a28:	01000036 	tsteq	r0, r6, lsr r0
    3a2c:	00005300 	andeq	r5, r0, r0, lsl #6
    3a30:	00000000 	andeq	r0, r0, r0
    3a34:	35480000 	strbcc	r0, [r8, #-0]
    3a38:	354a0000 	strbcc	r0, [sl, #-0]
    3a3c:	00010000 	andeq	r0, r1, r0
    3a40:	00354c53 	eorseq	r4, r5, r3, asr ip
    3a44:	00355000 	eorseq	r5, r5, r0
    3a48:	53000100 	movwpl	r0, #256	; 0x100
    3a4c:	00003556 	andeq	r3, r0, r6, asr r5
    3a50:	0000355e 	andeq	r3, r0, lr, asr r5
    3a54:	5e530001 	cdppl	0, 5, cr0, cr3, cr1, {0}
    3a58:	74000035 	strvc	r0, [r0], #-53	; 0xffffffcb
    3a5c:	03000035 	movweq	r0, #53	; 0x35
    3a60:	9f6c7400 	svcls	0x006c7400
    3a64:	00003578 	andeq	r3, r0, r8, ror r5
    3a68:	0000357e 	andeq	r3, r0, lr, ror r5
    3a6c:	6c740003 	ldclvs	0, cr0, [r4], #-12
    3a70:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3a74:	00000000 	andeq	r0, r0, r0
    3a78:	00356e00 	eorseq	r6, r5, r0, lsl #28
    3a7c:	0035f200 	eorseq	pc, r5, r0, lsl #4
    3a80:	52000100 	andpl	r0, r0, #0, 2
    3a84:	000035f2 	strdeq	r3, [r0], -r2
    3a88:	000035f8 	strdeq	r3, [r0], -r8
    3a8c:	00700002 	rsbseq	r0, r0, r2
    3a90:	000035f8 	strdeq	r3, [r0], -r8
    3a94:	000035fc 	strdeq	r3, [r0], -ip
    3a98:	fc520001 	mrrc2	0, 0, r0, r2, cr1
    3a9c:	02000035 	andeq	r0, r0, #53	; 0x35
    3aa0:	02000036 	andeq	r0, r0, #54	; 0x36
    3aa4:	04007000 	streq	r7, [r0], #-0
    3aa8:	0c000036 	stceq	0, cr0, [r0], {54}	; 0x36
    3aac:	01000036 	tsteq	r0, r6, lsr r0
    3ab0:	360c5200 	strcc	r5, [ip], -r0, lsl #4
    3ab4:	36120000 	ldrcc	r0, [r2], -r0
    3ab8:	00020000 	andeq	r0, r2, r0
    3abc:	36140070 			; <UNDEFINED> instruction: 0x36140070
    3ac0:	361c0000 	ldrcc	r0, [ip], -r0
    3ac4:	00010000 	andeq	r0, r1, r0
    3ac8:	00000052 	andeq	r0, r0, r2, asr r0
    3acc:	00000000 	andeq	r0, r0, r0
    3ad0:	00352800 	eorseq	r2, r5, r0, lsl #16
    3ad4:	00357400 	eorseq	r7, r5, r0, lsl #8
    3ad8:	30000200 	andcc	r0, r0, r0, lsl #4
    3adc:	0035749f 	mlaseq	r5, pc, r4, r7	; <UNPREDICTABLE>
    3ae0:	00357800 	eorseq	r7, r5, r0, lsl #16
    3ae4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    3ae8:	00003578 	andeq	r3, r0, r8, ror r5
    3aec:	0000357e 	andeq	r3, r0, lr, ror r5
    3af0:	9f300002 	svcls	0x00300002
    3af4:	0000357e 	andeq	r3, r0, lr, ror r5
    3af8:	0000361c 	andeq	r3, r0, ip, lsl r6
    3afc:	00540001 	subseq	r0, r4, r1
    3b00:	00000000 	andeq	r0, r0, r0
    3b04:	40000000 	andmi	r0, r0, r0
    3b08:	4a000036 	bmi	3be8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x108>
    3b0c:	01000036 	tsteq	r0, r6, lsr r0
    3b10:	364a5000 	strbcc	r5, [sl], -r0
    3b14:	365c0000 	ldrbcc	r0, [ip], -r0
    3b18:	00030000 	andeq	r0, r3, r0
    3b1c:	5c9f7075 	ldcpl	0, cr7, [pc], {117}	; 0x75
    3b20:	60000036 	andvs	r0, r0, r6, lsr r0
    3b24:	04000036 	streq	r0, [r0], #-54	; 0xffffffca
    3b28:	5001f300 	andpl	pc, r1, r0, lsl #6
    3b2c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    3b3c:	30000200 	andcc	r0, r0, r0, lsl #4
    3b40:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3b44:	00000000 	andeq	r0, r0, r0
    3b48:	31000200 	mrscc	r0, R8_usr
    3b4c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3b50:	00000000 	andeq	r0, r0, r0
    3b54:	32000200 	andcc	r0, r0, #0, 4
    3b58:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3b5c:	00000000 	andeq	r0, r0, r0
    3b60:	33000200 	movwcc	r0, #512	; 0x200
    3b64:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3b68:	00000000 	andeq	r0, r0, r0
    3b6c:	34000200 	strcc	r0, [r0], #-512	; 0xfffffe00
    3b70:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3b74:	00000000 	andeq	r0, r0, r0
    3b78:	35000200 	strcc	r0, [r0, #-512]	; 0xfffffe00
    3b7c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3b80:	00000000 	andeq	r0, r0, r0
    3b84:	36000200 	strcc	r0, [r0], -r0, lsl #4
    3b88:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3b8c:	00000000 	andeq	r0, r0, r0
    3b90:	37000200 	strcc	r0, [r0, -r0, lsl #4]
    3b94:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3b98:	00000000 	andeq	r0, r0, r0
    3b9c:	38000200 	stmdacc	r0, {r9}
    3ba0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3ba4:	00000000 	andeq	r0, r0, r0
    3ba8:	39000200 	stmdbcc	r0, {r9}
    3bac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3bb0:	00000000 	andeq	r0, r0, r0
    3bb4:	3a000200 	bcc	43bc <_gettimeofday+0xa8>
    3bb8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3bbc:	00000000 	andeq	r0, r0, r0
    3bc0:	3b000200 	blcc	43c8 <_gettimeofday+0xb4>
    3bc4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3bc8:	00000000 	andeq	r0, r0, r0
    3bcc:	3c000200 	sfmcc	f0, 4, [r0], {-0}
    3bd0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3bd4:	00000000 	andeq	r0, r0, r0
    3bd8:	00367c00 	eorseq	r7, r6, r0, lsl #24
    3bdc:	0036ba00 	eorseq	fp, r6, r0, lsl #20
    3be0:	50000100 	andpl	r0, r0, r0, lsl #2
    3be4:	000036ba 			; <UNDEFINED> instruction: 0x000036ba
    3be8:	0000371c 	andeq	r3, r0, ip, lsl r7
    3bec:	1c550001 	mrrcne	0, 0, r0, r5, cr1
    3bf0:	50000037 	andpl	r0, r0, r7, lsr r0
    3bf4:	04000037 	streq	r0, [r0], #-55	; 0xffffffc9
    3bf8:	5001f300 	andpl	pc, r1, r0, lsl #6
    3bfc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3c00:	00000000 	andeq	r0, r0, r0
    3c04:	0036b800 	eorseq	fp, r6, r0, lsl #16
    3c08:	00371c00 	eorseq	r1, r7, r0, lsl #24
    3c0c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    3c18:	000036ce 	andeq	r3, r0, lr, asr #13
    3c1c:	000036d0 	ldrdeq	r3, [r0], -r0
    3c20:	00730007 	rsbseq	r0, r3, r7
    3c24:	1affff0a 	bne	3854 <NOROM_SetupSetVddrLevel+0x60>
    3c28:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3c2c:	00000000 	andeq	r0, r0, r0
    3c30:	0036de00 	eorseq	sp, r6, r0, lsl #28
    3c34:	0036f800 	eorseq	pc, r6, r0, lsl #16
    3c38:	53000100 	movwpl	r0, #256	; 0x100
	...
    3c44:	000036e2 	andeq	r3, r0, r2, ror #13
    3c48:	000036ee 	andeq	r3, r0, lr, ror #13
    3c4c:	ee520001 	cdp	0, 5, cr0, cr2, cr1, {0}
    3c50:	f2000036 	vqadd.s8	d0, d0, d22
    3c54:	03000036 	movweq	r0, #54	; 0x36
    3c58:	9f067100 	svcls	0x00067100
    3c5c:	000036f2 	strdeq	r3, [r0], -r2
    3c60:	000036fa 	strdeq	r3, [r0], -sl
    3c64:	00520001 	subseq	r0, r2, r1
    3c68:	00000000 	andeq	r0, r0, r0
    3c6c:	56000000 	strpl	r0, [r0], -r0
    3c70:	d0000037 	andle	r0, r0, r7, lsr r0
    3c74:	01000037 	tsteq	r0, r7, lsr r0
    3c78:	00005400 	andeq	r5, r0, r0, lsl #8
    3c7c:	00000000 	andeq	r0, r0, r0
    3c80:	37bc0000 	ldrcc	r0, [ip, r0]!
    3c84:	37c60000 	strbcc	r0, [r6, r0]
    3c88:	00010000 	andeq	r0, r1, r0
    3c8c:	00000053 	andeq	r0, r0, r3, asr r0
    3c90:	00000000 	andeq	r0, r0, r0
    3c94:	0037f400 	eorseq	pc, r7, r0, lsl #8
    3c98:	00381a00 	eorseq	r1, r8, r0, lsl #20
    3c9c:	50000100 	andpl	r0, r0, r0, lsl #2
    3ca0:	0000381a 	andeq	r3, r0, sl, lsl r8
    3ca4:	00003870 	andeq	r3, r0, r0, ror r8
    3ca8:	01f30004 	mvnseq	r0, r4
    3cac:	00009f50 	andeq	r9, r0, r0, asr pc
    3cb0:	00000000 	andeq	r0, r0, r0
    3cb4:	381c0000 	ldmdacc	ip, {}	; <UNPREDICTABLE>
    3cb8:	38500000 	ldmdacc	r0, {}^	; <UNPREDICTABLE>
    3cbc:	00010000 	andeq	r0, r1, r0
    3cc0:	00000053 	andeq	r0, r0, r3, asr r0
    3cc4:	00000000 	andeq	r0, r0, r0
    3cc8:	00382000 	eorseq	r2, r8, r0
    3ccc:	00382e00 	eorseq	r2, r8, r0, lsl #28
    3cd0:	51000100 	mrspl	r0, (UNDEF: 16)
    3cd4:	0000382e 	andeq	r3, r0, lr, lsr #16
    3cd8:	00003830 	andeq	r3, r0, r0, lsr r8
    3cdc:	00720006 	rsbseq	r0, r2, r6
    3ce0:	9f1c0073 	svcls	0x001c0073
    3ce4:	00003830 	andeq	r3, r0, r0, lsr r8
    3ce8:	00003836 	andeq	r3, r0, r6, lsr r8
    3cec:	00510001 	subseq	r0, r1, r1
    3cf0:	00000000 	andeq	r0, r0, r0
    3cf4:	0c000000 	stceq	0, cr0, [r0], {-0}
    3cf8:	1e000038 	mcrne	0, 0, r0, cr0, cr8, {1}
    3cfc:	01000038 	tsteq	r0, r8, lsr r0
    3d00:	00005300 	andeq	r5, r0, r0, lsl #6
    3d04:	00000000 	andeq	r0, r0, r0
    3d08:	38700000 	ldmdacc	r0!, {}^	; <UNPREDICTABLE>
    3d0c:	38930000 	ldmcc	r3, {}	; <UNPREDICTABLE>
    3d10:	00010000 	andeq	r0, r1, r0
    3d14:	00389350 	eorseq	r9, r8, r0, asr r3
    3d18:	00389e00 	eorseq	r9, r8, r0, lsl #28
    3d1c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    3d20:	0000389e 	muleq	r0, lr, r8
    3d24:	000038a6 	andeq	r3, r0, r6, lsr #17
    3d28:	a6500001 	ldrbge	r0, [r0], -r1
    3d2c:	f2000038 	vqadd.s8	d0, d0, d24
    3d30:	01000038 	tsteq	r0, r8, lsr r0
    3d34:	00005400 	andeq	r5, r0, r0, lsl #8
    3d38:	00000000 	andeq	r0, r0, r0
    3d3c:	38ac0000 	stmiacc	ip!, {}	; <UNPREDICTABLE>
    3d40:	38b00000 	ldmcc	r0!, {}	; <UNPREDICTABLE>
    3d44:	00010000 	andeq	r0, r1, r0
    3d48:	0038b253 	eorseq	fp, r8, r3, asr r2
    3d4c:	0038c000 	eorseq	ip, r8, r0
    3d50:	53000100 	movwpl	r0, #256	; 0x100
    3d54:	000038c2 	andeq	r3, r0, r2, asr #17
    3d58:	000038ca 	andeq	r3, r0, sl, asr #17
    3d5c:	00530001 	subseq	r0, r3, r1
    3d60:	00000000 	andeq	r0, r0, r0
    3d64:	ac000000 	stcge	0, cr0, [r0], {-0}
    3d68:	e0000038 	and	r0, r0, r8, lsr r0
    3d6c:	05000038 	streq	r0, [r0, #-56]	; 0xffffffc8
    3d70:	4c007400 	cfstrsmi	mvf7, [r0], {-0}
    3d74:	38e09f26 	stmiacc	r0!, {r1, r2, r5, r8, r9, sl, fp, ip, pc}^
    3d78:	391c0000 	ldmdbcc	ip, {}	; <UNPREDICTABLE>
    3d7c:	00060000 	andeq	r0, r6, r0
    3d80:	4c5001f3 	ldfmie	f0, [r0], {243}	; 0xf3
    3d84:	00009f26 	andeq	r9, r0, r6, lsr #30
    3d88:	00000000 	andeq	r0, r0, r0
    3d8c:	38a60000 	stmiacc	r6!, {}	; <UNPREDICTABLE>
    3d90:	38b00000 	ldmcc	r0!, {}	; <UNPREDICTABLE>
    3d94:	00010000 	andeq	r0, r1, r0
    3d98:	00000053 	andeq	r0, r0, r3, asr r0
    3d9c:	00000000 	andeq	r0, r0, r0
    3da0:	00391c00 	eorseq	r1, r9, r0, lsl #24
    3da4:	00393000 	eorseq	r3, r9, r0
    3da8:	50000100 	andpl	r0, r0, r0, lsl #2
    3dac:	00003930 	andeq	r3, r0, r0, lsr r9
    3db0:	00003978 	andeq	r3, r0, r8, ror r9
    3db4:	01f30004 	mvnseq	r0, r4
    3db8:	00009f50 	andeq	r9, r0, r0, asr pc
    3dbc:	00000000 	andeq	r0, r0, r0
    3dc0:	39220000 	stmdbcc	r2!, {}	; <UNPREDICTABLE>
    3dc4:	392a0000 	stmdbcc	sl!, {}	; <UNPREDICTABLE>
    3dc8:	00010000 	andeq	r0, r1, r0
    3dcc:	00000053 	andeq	r0, r0, r3, asr r0
    3dd0:	00000000 	andeq	r0, r0, r0
    3dd4:	00392600 	eorseq	r2, r9, r0, lsl #12
    3dd8:	00393800 	eorseq	r3, r9, r0, lsl #16
    3ddc:	52000100 	andpl	r0, r0, #0, 2
    3de0:	00003938 	andeq	r3, r0, r8, lsr r9
    3de4:	0000393a 	andeq	r3, r0, sl, lsr r9
    3de8:	00720005 	rsbseq	r0, r2, r5
    3dec:	3a9f2531 	bcc	fe7cd2b8 <_estack+0xde7c82b8>
    3df0:	40000039 	andmi	r0, r0, r9, lsr r0
    3df4:	01000039 	tsteq	r0, r9, lsr r0
    3df8:	39445200 	stmdbcc	r4, {r9, ip, lr}^
    3dfc:	39560000 	ldmdbcc	r6, {}^	; <UNPREDICTABLE>
    3e00:	00010000 	andeq	r0, r1, r0
    3e04:	00395a52 	eorseq	r5, r9, r2, asr sl
    3e08:	00396400 	eorseq	r6, r9, r0, lsl #8
    3e0c:	52000100 	andpl	r0, r0, #0, 2
    3e10:	00003966 	andeq	r3, r0, r6, ror #18
    3e14:	00003978 	andeq	r3, r0, r8, ror r9
    3e18:	00520001 	subseq	r0, r2, r1
    3e1c:	00000000 	andeq	r0, r0, r0
    3e20:	2a000000 	bcs	3e28 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x5c>
    3e24:	34000039 	strcc	r0, [r0], #-57	; 0xffffffc7
    3e28:	01000039 	tsteq	r0, r9, lsr r0
    3e2c:	39345300 	ldmdbcc	r4!, {r8, r9, ip, lr}
    3e30:	39360000 	ldmdbcc	r6!, {}	; <UNPREDICTABLE>
    3e34:	00050000 	andeq	r0, r5, r0
    3e38:	25310073 	ldrcs	r0, [r1, #-115]!	; 0xffffff8d
    3e3c:	0039369f 	mlaseq	r9, pc, r6, r3	; <UNPREDICTABLE>
    3e40:	00393800 	eorseq	r3, r9, r0, lsl #16
    3e44:	53000100 	movwpl	r0, #256	; 0x100
    3e48:	00003938 	andeq	r3, r0, r8, lsr r9
    3e4c:	00003944 	andeq	r3, r0, r4, asr #18
    3e50:	ff0a0004 			; <UNDEFINED> instruction: 0xff0a0004
    3e54:	39449fff 	stmdbcc	r4, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}^
    3e58:	394a0000 	stmdbcc	sl, {}^	; <UNPREDICTABLE>
    3e5c:	00010000 	andeq	r0, r1, r0
    3e60:	00394e53 	eorseq	r4, r9, r3, asr lr
    3e64:	00395400 	eorseq	r5, r9, r0, lsl #8
    3e68:	53000100 	movwpl	r0, #256	; 0x100
    3e6c:	00003954 	andeq	r3, r0, r4, asr r9
    3e70:	00003966 	andeq	r3, r0, r6, ror #18
    3e74:	9f310002 	svcls	0x00310002
    3e78:	00003966 	andeq	r3, r0, r6, ror #18
    3e7c:	00003978 	andeq	r3, r0, r8, ror r9
    3e80:	00530001 	subseq	r0, r3, r1
    3e84:	00000000 	andeq	r0, r0, r0
    3e88:	2a000000 	bcs	3e90 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xc4>
    3e8c:	30000039 	andcc	r0, r0, r9, lsr r0
    3e90:	02000039 	andeq	r0, r0, #57	; 0x39
    3e94:	309f3000 	addscc	r3, pc, r0
    3e98:	6c000039 	stcvs	0, cr0, [r0], {57}	; 0x39
    3e9c:	01000039 	tsteq	r0, r9, lsr r0
    3ea0:	00005000 	andeq	r5, r0, r0
    3ea4:	00000000 	andeq	r0, r0, r0
    3ea8:	396c0000 	stmdbcc	ip!, {}^	; <UNPREDICTABLE>
    3eac:	39700000 	ldmdbcc	r0!, {}^	; <UNPREDICTABLE>
    3eb0:	00080000 	andeq	r0, r8, r0
    3eb4:	24400072 	strbcs	r0, [r0], #-114	; 0xffffff8e
    3eb8:	9f210073 	svcls	0x00210073
    3ebc:	00003970 	andeq	r3, r0, r0, ror r9
    3ec0:	00003978 	andeq	r3, r0, r8, ror r9
    3ec4:	00500001 	subseq	r0, r0, r1
    3ec8:	00000000 	andeq	r0, r0, r0
    3ecc:	82000000 	andhi	r0, r0, #0
    3ed0:	86000039 			; <UNDEFINED> instruction: 0x86000039
    3ed4:	0a000039 	beq	3fc0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f4>
    3ed8:	33007000 	movwcc	r7, #0
    3edc:	7324381a 			; <UNDEFINED> instruction: 0x7324381a
    3ee0:	8a9f2100 	bhi	fe7cc2e8 <_estack+0xde7c72e8>
    3ee4:	90000039 	andls	r0, r0, r9, lsr r0
    3ee8:	01000039 	tsteq	r0, r9, lsr r0
    3eec:	00005000 	andeq	r5, r0, r0
	...
    3efc:	00070000 	andeq	r0, r7, r0
    3f00:	ff0a0070 			; <UNDEFINED> instruction: 0xff0a0070
    3f04:	009f1a3f 	addseq	r1, pc, pc, lsr sl	; <UNPREDICTABLE>
    3f08:	00000000 	andeq	r0, r0, r0
    3f0c:	94000000 	strls	r0, [r0], #-0
    3f10:	98000039 	stmdals	r0, {r0, r3, r4, r5}
    3f14:	0f000039 	svceq	0x00000039
    3f18:	08007000 	stmdaeq	r0, {ip, sp, lr}
    3f1c:	00701afc 	ldrshteq	r1, [r0], #-172	; 0xffffff54
    3f20:	f3f88011 	vshr.u32	d24, d1, #8
    3f24:	9f211a67 	svcls	0x00211a67
	...
    3f30:	00003994 	muleq	r0, r4, r9
    3f34:	00003998 	muleq	r0, r8, r9
    3f38:	00500001 	subseq	r0, r0, r1
    3f3c:	00000000 	andeq	r0, r0, r0
    3f40:	a4000000 	strge	r0, [r0], #-0
    3f44:	a8000039 	stmdage	r0, {r0, r3, r4, r5}
    3f48:	0f000039 	svceq	0x00000039
    3f4c:	08007000 	stmdaeq	r0, {ip, sp, lr}
    3f50:	00701a3f 	rsbseq	r1, r0, pc, lsr sl
    3f54:	fcffc00c 	ldc2l	0, cr12, [pc], #48	; 3f8c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1c0>
    3f58:	9f211a00 	svcls	0x00211a00
	...
    3f64:	000039a4 	andeq	r3, r0, r4, lsr #19
    3f68:	000039a8 	andeq	r3, r0, r8, lsr #19
    3f6c:	00500001 	subseq	r0, r0, r1
    3f70:	00000000 	andeq	r0, r0, r0
    3f74:	b4000000 	strlt	r0, [r0], #-0
    3f78:	0a000039 	beq	4064 <NOROM_ChipInfo_GetChipFamily>
    3f7c:	0100003a 	tsteq	r0, sl, lsr r0
    3f80:	3a0a5000 	bcc	297f88 <__ccfg+0x277fe0>
    3f84:	3a180000 	bcc	603f8c <__ccfg+0x5e3fe4>
    3f88:	00040000 	andeq	r0, r4, r0
    3f8c:	9f5001f3 	svcls	0x005001f3
	...
    3f98:	000039f4 	strdeq	r3, [r0], -r4
    3f9c:	000039fc 	strdeq	r3, [r0], -ip
    3fa0:	00740017 	rsbseq	r0, r4, r7, lsl r0
    3fa4:	1aff000a 	bne	fffc3fd4 <_estack+0xdffbefd4>
    3fa8:	f0080074 			; <UNDEFINED> instruction: 0xf0080074
    3fac:	0072211a 	rsbseq	r2, r2, sl, lsl r1
    3fb0:	73212444 			; <UNDEFINED> instruction: 0x73212444
    3fb4:	21244000 			; <UNDEFINED> instruction: 0x21244000
    3fb8:	003a009f 	mlaseq	sl, pc, r0, r0	; <UNPREDICTABLE>
    3fbc:	003a1800 	eorseq	r1, sl, r0, lsl #16
    3fc0:	53000100 	movwpl	r0, #256	; 0x100
	...
    3fcc:	000039bc 			; <UNDEFINED> instruction: 0x000039bc
    3fd0:	00003a06 	andeq	r3, r0, r6, lsl #20
    3fd4:	00540001 	subseq	r0, r4, r1
    3fd8:	00000000 	andeq	r0, r0, r0
    3fdc:	c2000000 	andgt	r0, r0, #0
    3fe0:	d6000039 			; <UNDEFINED> instruction: 0xd6000039
    3fe4:	01000039 	tsteq	r0, r9, lsr r0
    3fe8:	39d65200 	ldmibcc	r6, {r9, ip, lr}^
    3fec:	39e20000 	stmibcc	r2!, {}^	; <UNPREDICTABLE>
    3ff0:	00060000 	andeq	r0, r6, r0
    3ff4:	ec090074 	stc	0, cr0, [r9], {116}	; 0x74
    3ff8:	39f49f24 	ldmibcc	r4!, {r2, r5, r8, r9, sl, fp, ip, pc}^
    3ffc:	39fc0000 	ldmibcc	ip!, {}^	; <UNPREDICTABLE>
    4000:	00010000 	andeq	r0, r1, r0
    4004:	00000052 	andeq	r0, r0, r2, asr r0
    4008:	00000000 	andeq	r0, r0, r0
    400c:	0039ca00 	eorseq	ip, r9, r0, lsl #20
    4010:	0039e800 	eorseq	lr, r9, r0, lsl #16
    4014:	53000100 	movwpl	r0, #256	; 0x100
    4018:	000039e8 	andeq	r3, r0, r8, ror #19
    401c:	000039f4 	strdeq	r3, [r0], -r4
    4020:	00740006 	rsbseq	r0, r4, r6
    4024:	9f24f009 	svcls	0x0024f009
    4028:	000039f4 	strdeq	r3, [r0], -r4
    402c:	00003a00 	andeq	r3, r0, r0, lsl #20
    4030:	00530001 	subseq	r0, r3, r1
    4034:	00000000 	andeq	r0, r0, r0
    4038:	d4000000 	strle	r0, [r0], #-0
    403c:	d6000039 			; <UNDEFINED> instruction: 0xd6000039
    4040:	06000039 			; <UNDEFINED> instruction: 0x06000039
    4044:	72007600 	andvc	r7, r0, #0, 12
    4048:	d69f2200 	ldrle	r2, [pc], r0, lsl #4
    404c:	de000039 	mcrle	0, 0, r0, cr0, cr9, {1}
    4050:	01000039 	tsteq	r0, r9, lsr r0
    4054:	39de5200 	ldmibcc	lr, {r9, ip, lr}^
    4058:	39e00000 	stmibcc	r0!, {}^	; <UNPREDICTABLE>
    405c:	00090000 	andeq	r0, r9, r0
    4060:	ec090074 	stc	0, cr0, [r9], {116}	; 0x74
    4064:	22007624 	andcs	r7, r0, #36, 12	; 0x2400000
    4068:	0039e09f 	mlaseq	r9, pc, r0, lr	; <UNPREDICTABLE>
    406c:	0039e200 	eorseq	lr, r9, r0, lsl #4
    4070:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    4074:	000039e6 	andeq	r3, r0, r6, ror #19
    4078:	000039e8 	andeq	r3, r0, r8, ror #19
    407c:	00710006 	rsbseq	r0, r1, r6
    4080:	9f220073 	svcls	0x00220073
    4084:	000039e8 	andeq	r3, r0, r8, ror #19
    4088:	000039f0 	strdeq	r3, [r0], -r0
    408c:	f0530001 			; <UNDEFINED> instruction: 0xf0530001
    4090:	f2000039 	vqadd.s8	d0, d0, d25
    4094:	09000039 	stmdbeq	r0, {r0, r3, r4, r5}
    4098:	09007400 	stmdbeq	r0, {sl, ip, sp, lr}
    409c:	007124f0 	ldrshteq	r2, [r1], #-64	; 0xffffffc0
    40a0:	39f29f22 	ldmibcc	r2!, {r1, r5, r8, r9, sl, fp, ip, pc}^
    40a4:	39f40000 	ldmibcc	r4!, {}^	; <UNPREDICTABLE>
    40a8:	00020000 	andeq	r0, r2, r0
    40ac:	00009f30 	andeq	r9, r0, r0, lsr pc
    40b0:	00000000 	andeq	r0, r0, r0
    40b4:	3a180000 	bcc	6040bc <__ccfg+0x5e4114>
    40b8:	3a200000 	bcc	8040c0 <__ccfg+0x7e4118>
    40bc:	00010000 	andeq	r0, r1, r0
    40c0:	003a2050 	eorseq	r2, sl, r0, asr r0
    40c4:	003a2c00 	eorseq	r2, sl, r0, lsl #24
    40c8:	f3000400 	vshl.u8	d0, d0, d0
    40cc:	009f5001 	addseq	r5, pc, r1
    40d0:	00000000 	andeq	r0, r0, r0
    40d4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    40d8:	2600003a 			; <UNDEFINED> instruction: 0x2600003a
    40dc:	0200003a 	andeq	r0, r0, #58	; 0x3a
    40e0:	269f3000 	ldrcs	r3, [pc], r0
    40e4:	2c00003a 	stccs	0, cr0, [r0], {58}	; 0x3a
    40e8:	0100003a 	tsteq	r0, sl, lsr r0
    40ec:	00005000 	andeq	r5, r0, r0
    40f0:	00000000 	andeq	r0, r0, r0
    40f4:	3a1a0000 	bcc	6840fc <__ccfg+0x664154>
    40f8:	3a200000 	bcc	804100 <__ccfg+0x7e4158>
    40fc:	00010000 	andeq	r0, r1, r0
    4100:	003a2050 	eorseq	r2, sl, r0, asr r0
    4104:	003a2c00 	eorseq	r2, sl, r0, lsl #24
    4108:	f3000400 	vshl.u8	d0, d0, d0
    410c:	009f5001 	addseq	r5, pc, r1
    4110:	00000000 	andeq	r0, r0, r0
    4114:	24000000 	strcs	r0, [r0], #-0
    4118:	2600003a 			; <UNDEFINED> instruction: 0x2600003a
    411c:	0100003a 	tsteq	r0, sl, lsr r0
    4120:	00005000 	andeq	r5, r0, r0
    4124:	00000000 	andeq	r0, r0, r0
    4128:	3a2c0000 	bcc	b04130 <__ccfg+0xae4188>
    412c:	3a340000 	bcc	d04134 <__ccfg+0xce418c>
    4130:	00010000 	andeq	r0, r1, r0
    4134:	003a3450 	eorseq	r3, sl, r0, asr r4
    4138:	003a4000 	eorseq	r4, sl, r0
    413c:	f3000400 	vshl.u8	d0, d0, d0
    4140:	009f5001 	addseq	r5, pc, r1
    4144:	00000000 	andeq	r0, r0, r0
    4148:	2c000000 	stccs	0, cr0, [r0], {-0}
    414c:	3a00003a 	bcc	423c <rand+0x18>
    4150:	0200003a 	andeq	r0, r0, #58	; 0x3a
    4154:	3a9f3100 	bcc	fe7d055c <_estack+0xde7cb55c>
    4158:	4000003a 	andmi	r0, r0, sl, lsr r0
    415c:	0100003a 	tsteq	r0, sl, lsr r0
    4160:	00005000 	andeq	r5, r0, r0
    4164:	00000000 	andeq	r0, r0, r0
    4168:	3a2e0000 	bcc	b84170 <__ccfg+0xb641c8>
    416c:	3a340000 	bcc	d04174 <__ccfg+0xce41cc>
    4170:	00010000 	andeq	r0, r1, r0
    4174:	003a3450 	eorseq	r3, sl, r0, asr r4
    4178:	003a4000 	eorseq	r4, sl, r0
    417c:	f3000400 	vshl.u8	d0, d0, d0
    4180:	009f5001 	addseq	r5, pc, r1
    4184:	00000000 	andeq	r0, r0, r0
    4188:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    418c:	3a00003a 	bcc	427c <time+0x20>
    4190:	0100003a 	tsteq	r0, sl, lsr r0
    4194:	00005000 	andeq	r5, r0, r0
    4198:	00000000 	andeq	r0, r0, r0
    419c:	3a400000 	bcc	10041a4 <__ccfg+0xfe41fc>
    41a0:	3a480000 	bcc	12041a8 <__ccfg+0x11e4200>
    41a4:	00010000 	andeq	r0, r1, r0
    41a8:	003a4850 	eorseq	r4, sl, r0, asr r8
    41ac:	003a5400 	eorseq	r5, sl, r0, lsl #8
    41b0:	f3000400 	vshl.u8	d0, d0, d0
    41b4:	009f5001 	addseq	r5, pc, r1
    41b8:	00000000 	andeq	r0, r0, r0
    41bc:	40000000 	andmi	r0, r0, r0
    41c0:	4e00003a 	mcrmi	0, 0, r0, cr0, cr10, {1}
    41c4:	0200003a 	andeq	r0, r0, #58	; 0x3a
    41c8:	4e9f3100 	fmlmie	f3, f7, f0
    41cc:	5400003a 	strpl	r0, [r0], #-58	; 0xffffffc6
    41d0:	0100003a 	tsteq	r0, sl, lsr r0
    41d4:	00005000 	andeq	r5, r0, r0
    41d8:	00000000 	andeq	r0, r0, r0
    41dc:	3a420000 	bcc	10841e4 <__ccfg+0x106423c>
    41e0:	3a480000 	bcc	12041e8 <__ccfg+0x11e4240>
    41e4:	00010000 	andeq	r0, r1, r0
    41e8:	003a4850 	eorseq	r4, sl, r0, asr r8
    41ec:	003a5400 	eorseq	r5, sl, r0, lsl #8
    41f0:	f3000400 	vshl.u8	d0, d0, d0
    41f4:	009f5001 	addseq	r5, pc, r1
    41f8:	00000000 	andeq	r0, r0, r0
    41fc:	4c000000 	stcmi	0, cr0, [r0], {-0}
    4200:	4e00003a 	mcrmi	0, 0, r0, cr0, cr10, {1}
    4204:	0100003a 	tsteq	r0, sl, lsr r0
    4208:	00005000 	andeq	r5, r0, r0
    420c:	00000000 	andeq	r0, r0, r0
    4210:	3a540000 	bcc	1504218 <__ccfg+0x14e4270>
    4214:	3a600000 	bcc	180421c <__ccfg+0x17e4274>
    4218:	00010000 	andeq	r0, r1, r0
    421c:	003a6050 	eorseq	r6, sl, r0, asr r0
    4220:	003a7c00 	eorseq	r7, sl, r0, lsl #24
    4224:	f3000400 	vshl.u8	d0, d0, d0
    4228:	009f5001 	addseq	r5, pc, r1
    422c:	00000000 	andeq	r0, r0, r0
    4230:	54000000 	strpl	r0, [r0], #-0
    4234:	7600003a 			; <UNDEFINED> instruction: 0x7600003a
    4238:	0200003a 	andeq	r0, r0, #58	; 0x3a
    423c:	769f3000 	ldrvc	r3, [pc], r0
    4240:	7c00003a 	stcvc	0, cr0, [r0], {58}	; 0x3a
    4244:	0100003a 	tsteq	r0, sl, lsr r0
    4248:	00005000 	andeq	r5, r0, r0
    424c:	00000000 	andeq	r0, r0, r0
    4250:	3a560000 	bcc	1584258 <__ccfg+0x15642b0>
    4254:	3a600000 	bcc	180425c <__ccfg+0x17e42b4>
    4258:	00010000 	andeq	r0, r1, r0
    425c:	003a6050 	eorseq	r6, sl, r0, asr r0
    4260:	003a7c00 	eorseq	r7, sl, r0, lsl #24
    4264:	f3000400 	vshl.u8	d0, d0, d0
    4268:	009f5001 	addseq	r5, pc, r1
    426c:	00000000 	andeq	r0, r0, r0
    4270:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    4274:	7000003a 	andvc	r0, r0, sl, lsr r0
    4278:	1000003a 	andne	r0, r0, sl, lsr r0
    427c:	4c007300 	stcmi	3, cr7, [r0], {-0}
    4280:	481a2446 	ldmdami	sl, {r1, r2, r6, sl, sp}
    4284:	72243225 	eorvc	r3, r4, #1342177282	; 0x50000002
    4288:	21243800 			; <UNDEFINED> instruction: 0x21243800
    428c:	003a729f 	mlaseq	sl, pc, r2, r7	; <UNPREDICTABLE>
    4290:	003a7600 	eorseq	r7, sl, r0, lsl #12
    4294:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    42a0:	00003a5c 	andeq	r3, r0, ip, asr sl
    42a4:	00003a70 	andeq	r3, r0, r0, ror sl
    42a8:	00530001 	subseq	r0, r3, r1
    42ac:	00000000 	andeq	r0, r0, r0
    42b0:	80000000 	andhi	r0, r0, r0
    42b4:	8400003a 	strhi	r0, [r0], #-58	; 0xffffffc6
    42b8:	0900003a 	stmdbeq	r0, {r1, r3, r4, r5}
    42bc:	48007000 	stmdami	r0, {ip, sp, lr}
    42c0:	431a2440 	tstmi	sl, #64, 8	; 0x40000000
    42c4:	00009f25 	andeq	r9, r0, r5, lsr #30
    42c8:	00000000 	andeq	r0, r0, r0
    42cc:	3a8c0000 	bcc	fe3042d4 <_estack+0xde2ff2d4>
    42d0:	3a980000 	bcc	fe6042d8 <_estack+0xde5ff2d8>
    42d4:	00010000 	andeq	r0, r1, r0
    42d8:	003a9850 	eorseq	r9, sl, r0, asr r8
    42dc:	003ab800 	eorseq	fp, sl, r0, lsl #16
    42e0:	f3000400 	vshl.u8	d0, d0, d0
    42e4:	009f5001 	addseq	r5, pc, r1
    42e8:	00000000 	andeq	r0, r0, r0
    42ec:	8c000000 	stchi	0, cr0, [r0], {-0}
    42f0:	ae00003a 	mcrge	0, 0, r0, cr0, cr10, {1}
    42f4:	0600003a 			; <UNDEFINED> instruction: 0x0600003a
    42f8:	80000c00 	andhi	r0, r0, r0, lsl #24
    42fc:	ae9f403f 	mrcge	0, 4, r4, cr15, cr15, {1}
    4300:	b800003a 	stmdalt	r0, {r1, r3, r4, r5}
    4304:	0100003a 	tsteq	r0, sl, lsr r0
    4308:	00005000 	andeq	r5, r0, r0
    430c:	00000000 	andeq	r0, r0, r0
    4310:	3a8e0000 	bcc	fe384318 <_estack+0xde37f318>
    4314:	3a980000 	bcc	fe60431c <_estack+0xde5ff31c>
    4318:	00010000 	andeq	r0, r1, r0
    431c:	003a9850 	eorseq	r9, sl, r0, asr r8
    4320:	003ab800 	eorseq	fp, sl, r0, lsl #16
    4324:	f3000400 	vshl.u8	d0, d0, d0
    4328:	009f5001 	addseq	r5, pc, r1
    432c:	00000000 	andeq	r0, r0, r0
    4330:	9c000000 	stcls	0, cr0, [r0], {-0}
    4334:	a200003a 	andge	r0, r0, #58	; 0x3a
    4338:	1000003a 	andne	r0, r0, sl, lsr r0
    433c:	0a007300 	beq	20f44 <__ccfg+0xf9c>
    4340:	341a03f0 	ldrcc	r0, [sl], #-1008	; 0xfffffc10
    4344:	72244025 	eorvc	r4, r4, #37	; 0x25
    4348:	21244600 			; <UNDEFINED> instruction: 0x21244600
    434c:	003aac9f 	mlaseq	sl, pc, ip, sl	; <UNPREDICTABLE>
    4350:	003aae00 	eorseq	sl, sl, r0, lsl #28
    4354:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4360:	00003a94 	muleq	r0, r4, sl
    4364:	00003aa2 	andeq	r3, r0, r2, lsr #21
    4368:	00530001 	subseq	r0, r3, r1
    436c:	00000000 	andeq	r0, r0, r0
    4370:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    4374:	c000003a 	andgt	r0, r0, sl, lsr r0
    4378:	0100003a 	tsteq	r0, sl, lsr r0
    437c:	3ac05000 	bcc	ff018384 <_estack+0xdf013384>
    4380:	3acc0000 	bcc	ff304388 <_estack+0xdf2ff388>
    4384:	00040000 	andeq	r0, r4, r0
    4388:	9f5001f3 	svcls	0x005001f3
	...
    4394:	00003ab8 			; <UNDEFINED> instruction: 0x00003ab8
    4398:	00003ac6 	andeq	r3, r0, r6, asr #21
    439c:	9f300002 	svcls	0x00300002
    43a0:	00003ac6 	andeq	r3, r0, r6, asr #21
    43a4:	00003acc 	andeq	r3, r0, ip, asr #21
    43a8:	00500001 	subseq	r0, r0, r1
    43ac:	00000000 	andeq	r0, r0, r0
    43b0:	ba000000 	blt	43b8 <_gettimeofday+0xa4>
    43b4:	c000003a 	andgt	r0, r0, sl, lsr r0
    43b8:	0100003a 	tsteq	r0, sl, lsr r0
    43bc:	3ac05000 	bcc	ff0183c4 <_estack+0xdf0133c4>
    43c0:	3acc0000 	bcc	ff3043c8 <_estack+0xdf2ff3c8>
    43c4:	00040000 	andeq	r0, r4, r0
    43c8:	9f5001f3 	svcls	0x005001f3
	...
    43d4:	00003ac4 	andeq	r3, r0, r4, asr #21
    43d8:	00003ac6 	andeq	r3, r0, r6, asr #21
    43dc:	00500001 	subseq	r0, r0, r1
    43e0:	00000000 	andeq	r0, r0, r0
    43e4:	cc000000 	stcgt	0, cr0, [r0], {-0}
    43e8:	d400003a 	strle	r0, [r0], #-58	; 0xffffffc6
    43ec:	0100003a 	tsteq	r0, sl, lsr r0
    43f0:	3ad45000 	bcc	ff5183f8 <_estack+0xdf5133f8>
    43f4:	3ae00000 	bcc	ff8043fc <_estack+0xdf7ff3fc>
    43f8:	00040000 	andeq	r0, r4, r0
    43fc:	9f5001f3 	svcls	0x005001f3
	...
    4408:	00003acc 	andeq	r3, r0, ip, asr #21
    440c:	00003ada 	ldrdeq	r3, [r0], -sl
    4410:	9f300002 	svcls	0x00300002
    4414:	00003ada 	ldrdeq	r3, [r0], -sl
    4418:	00003ae0 	andeq	r3, r0, r0, ror #21
    441c:	00500001 	subseq	r0, r0, r1
    4420:	00000000 	andeq	r0, r0, r0
    4424:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
    4428:	d400003a 	strle	r0, [r0], #-58	; 0xffffffc6
    442c:	0100003a 	tsteq	r0, sl, lsr r0
    4430:	3ad45000 	bcc	ff518438 <_estack+0xdf513438>
    4434:	3ae00000 	bcc	ff80443c <_estack+0xdf7ff43c>
    4438:	00040000 	andeq	r0, r4, r0
    443c:	9f5001f3 	svcls	0x005001f3
	...
    4448:	00003ad8 	ldrdeq	r3, [r0], -r8
    444c:	00003ada 	ldrdeq	r3, [r0], -sl
    4450:	00500001 	subseq	r0, r0, r1
    4454:	00000000 	andeq	r0, r0, r0
    4458:	e0000000 	and	r0, r0, r0
    445c:	e600003a 			; <UNDEFINED> instruction: 0xe600003a
    4460:	0100003a 	tsteq	r0, sl, lsr r0
    4464:	3ae65000 	bcc	ff99846c <_estack+0xdf99346c>
    4468:	3bd00000 	blcc	ff404470 <_estack+0xdf3ff470>
    446c:	00010000 	andeq	r0, r1, r0
    4470:	003bd055 	eorseq	sp, fp, r5, asr r0
    4474:	003bf000 	eorseq	pc, fp, r0
    4478:	f3000400 	vshl.u8	d0, d0, d0
    447c:	009f5001 	addseq	r5, pc, r1
    4480:	00000000 	andeq	r0, r0, r0
    4484:	e0000000 	and	r0, r0, r0
    4488:	e900003a 	stmdb	r0, {r1, r3, r4, r5}
    448c:	0100003a 	tsteq	r0, sl, lsr r0
    4490:	3ae95100 	bcc	ffa58898 <_estack+0xdfa53898>
    4494:	3bf00000 	blcc	ffc0449c <_estack+0xdfbff49c>
    4498:	00040000 	andeq	r0, r4, r0
    449c:	9f5101f3 	svcls	0x005101f3
	...
    44a8:	00003aee 	andeq	r3, r0, lr, ror #21
    44ac:	00003af2 	strdeq	r3, [r0], -r2
    44b0:	f2500001 	vhadd.s16	d16, d0, d1
    44b4:	f500003a 			; <UNDEFINED> instruction: 0xf500003a
    44b8:	0100003a 	tsteq	r0, sl, lsr r0
    44bc:	3afa5200 	bcc	ffe98cc4 <_estack+0xdfe93cc4>
    44c0:	3afe0000 	bcc	fff844c8 <_estack+0xdff7f4c8>
    44c4:	00010000 	andeq	r0, r1, r0
    44c8:	003b2850 	eorseq	r2, fp, r0, asr r8
    44cc:	003b2a00 	eorseq	r2, fp, r0, lsl #20
    44d0:	50000100 	andpl	r0, r0, r0, lsl #2
    44d4:	00003b2a 	andeq	r3, r0, sl, lsr #22
    44d8:	00003b2d 	andeq	r3, r0, sp, lsr #22
    44dc:	36520001 	ldrbcc	r0, [r2], -r1
    44e0:	3800003b 	stmdacc	r0, {r0, r1, r3, r4, r5}
    44e4:	0100003b 	tsteq	r0, fp, lsr r0
    44e8:	3b385000 	blcc	e184f0 <__ccfg+0xdf8548>
    44ec:	3b3b0000 	blcc	ec44f4 <__ccfg+0xea454c>
    44f0:	00010000 	andeq	r0, r1, r0
    44f4:	003b4652 	eorseq	r4, fp, r2, asr r6
    44f8:	003b4800 	eorseq	r4, fp, r0, lsl #16
    44fc:	50000100 	andpl	r0, r0, r0, lsl #2
    4500:	00003b48 	andeq	r3, r0, r8, asr #22
    4504:	00003b4b 	andeq	r3, r0, fp, asr #22
    4508:	52520001 	subspl	r0, r2, #1
    450c:	5400003b 	strpl	r0, [r0], #-59	; 0xffffffc5
    4510:	0100003b 	tsteq	r0, fp, lsr r0
    4514:	3b645000 	blcc	191851c <__ccfg+0x18f8574>
    4518:	3b680000 	blcc	1a04520 <__ccfg+0x19e4578>
    451c:	00010000 	andeq	r0, r1, r0
    4520:	003b7650 	eorseq	r7, fp, r0, asr r6
    4524:	003b7800 	eorseq	r7, fp, r0, lsl #16
    4528:	50000100 	andpl	r0, r0, r0, lsl #2
    452c:	00003b78 	andeq	r3, r0, r8, ror fp
    4530:	00003b7b 	andeq	r3, r0, fp, ror fp
    4534:	82520001 	subshi	r0, r2, #1
    4538:	8400003b 	strhi	r0, [r0], #-59	; 0xffffffc5
    453c:	0100003b 	tsteq	r0, fp, lsr r0
    4540:	3b945000 	blcc	fe518548 <_estack+0xde513548>
    4544:	3b960000 	blcc	fe58454c <_estack+0xde57f54c>
    4548:	00010000 	andeq	r0, r1, r0
    454c:	003ba650 	eorseq	sl, fp, r0, asr r6
    4550:	003baa00 	eorseq	sl, fp, r0, lsl #20
    4554:	50000100 	andpl	r0, r0, r0, lsl #2
    4558:	00003bbe 			; <UNDEFINED> instruction: 0x00003bbe
    455c:	00003bc0 	andeq	r3, r0, r0, asr #23
    4560:	c0500001 	subsgt	r0, r0, r1
    4564:	c300003b 	movwgt	r0, #59	; 0x3b
    4568:	0100003b 	tsteq	r0, fp, lsr r0
    456c:	00005200 	andeq	r5, r0, r0, lsl #4
    4570:	00000000 	andeq	r0, r0, r0
    4574:	3b160000 	blcc	58457c <__ccfg+0x5645d4>
    4578:	3b1c0000 	blcc	704580 <__ccfg+0x6e45d8>
    457c:	00070000 	andeq	r0, r7, r0
    4580:	ff0a0072 			; <UNDEFINED> instruction: 0xff0a0072
    4584:	009f1a3f 	addseq	r1, pc, pc, lsr sl	; <UNPREDICTABLE>
    4588:	00000000 	andeq	r0, r0, r0
    458c:	0a000000 	beq	4594 <CSWTCH.47+0x8d>
    4590:	1400003c 	strne	r0, [r0], #-60	; 0xffffffc4
    4594:	0900003c 	stmdbeq	r0, {r2, r3, r4, r5}
    4598:	0c007300 	stceq	3, cr7, [r0], {-0}
    459c:	20000004 	andcs	r0, r0, r4
    45a0:	00009f21 	andeq	r9, r0, r1, lsr #30
    45a4:	00000000 	andeq	r0, r0, r0
    45a8:	3c540000 	mracc	r0, r4, acc0
    45ac:	3c5c0000 	mracc	r0, ip, acc0
    45b0:	00010000 	andeq	r0, r1, r0
    45b4:	003c5c50 	eorseq	r5, ip, r0, asr ip
    45b8:	003c7c00 	eorseq	r7, ip, r0, lsl #24
    45bc:	f3000400 	vshl.u8	d0, d0, d0
    45c0:	009f5001 	addseq	r5, pc, r1
    45c4:	00000000 	andeq	r0, r0, r0
    45c8:	7c000000 	stcvc	0, cr0, [r0], {-0}
    45cc:	a400003c 	strge	r0, [r0], #-60	; 0xffffffc4
    45d0:	0100003c 	tsteq	r0, ip, lsr r0
    45d4:	3ca45000 	stccc	0, cr5, [r4]
    45d8:	3ce40000 	stclcc	0, cr0, [r4]
    45dc:	00010000 	andeq	r0, r1, r0
    45e0:	003ce454 	eorseq	lr, ip, r4, asr r4
    45e4:	003cec00 	eorseq	lr, ip, r0, lsl #24
    45e8:	50000100 	andpl	r0, r0, r0, lsl #2
    45ec:	00003cec 	andeq	r3, r0, ip, ror #25
    45f0:	00003d36 	andeq	r3, r0, r6, lsr sp
    45f4:	36540001 	ldrbcc	r0, [r4], -r1
    45f8:	7200003d 	andvc	r0, r0, #61	; 0x3d
    45fc:	0400003d 	streq	r0, [r0], #-61	; 0xffffffc3
    4600:	5001f300 	andpl	pc, r1, r0, lsl #6
    4604:	003d729f 	mlaseq	sp, pc, r2, r7	; <UNPREDICTABLE>
    4608:	003d7600 	eorseq	r7, sp, r0, lsl #12
    460c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    4610:	00003d76 	andeq	r3, r0, r6, ror sp
    4614:	00003dcc 	andeq	r3, r0, ip, asr #27
    4618:	01f30004 	mvnseq	r0, r4
    461c:	00009f50 	andeq	r9, r0, r0, asr pc
    4620:	00000000 	andeq	r0, r0, r0
    4624:	3c920000 	ldccc	0, cr0, [r2], {0}
    4628:	3cd40000 	ldclcc	0, cr0, [r4], {0}
    462c:	00010000 	andeq	r0, r1, r0
    4630:	00000053 	andeq	r0, r0, r3, asr r0
    4634:	00000000 	andeq	r0, r0, r0
    4638:	003d0600 	eorseq	r0, sp, r0, lsl #12
    463c:	003d0c00 	eorseq	r0, sp, r0, lsl #24
    4640:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    464c:	00003d36 	andeq	r3, r0, r6, lsr sp
    4650:	00003d38 	andeq	r3, r0, r8, lsr sp
    4654:	38500001 	ldmdacc	r0, {r0}^
    4658:	4c00003d 	stcmi	0, cr0, [r0], {61}	; 0x3d
    465c:	0100003d 	tsteq	r0, sp, lsr r0
    4660:	00005400 	andeq	r5, r0, r0, lsl #8
    4664:	00000000 	andeq	r0, r0, r0
    4668:	3d4c0000 	stclcc	0, cr0, [ip, #-0]
    466c:	3d6c0000 	stclcc	0, cr0, [ip, #-0]
    4670:	00010000 	andeq	r0, r1, r0
    4674:	00000054 	andeq	r0, r0, r4, asr r0
	...
    4684:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    4690:	7f750003 	svcvc	0x00750003
    4694:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4698:	00000000 	andeq	r0, r0, r0
    469c:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    46a8:	00003dcc 	andeq	r3, r0, ip, asr #27
    46ac:	00003deb 	andeq	r3, r0, fp, ror #27
    46b0:	eb500001 	bl	14046bc <__ccfg+0x13e4714>
    46b4:	ac00003d 	stcge	0, cr0, [r0], {61}	; 0x3d
    46b8:	0100003e 	tsteq	r0, lr, lsr r0
    46bc:	3eac5700 	cdpcc	7, 10, cr5, cr12, cr0, {0}
    46c0:	3fec0000 	svccc	0x00ec0000
    46c4:	00040000 	andeq	r0, r4, r0
    46c8:	9f5001f3 	svcls	0x005001f3
	...
    46d4:	00003dec 	andeq	r3, r0, ip, ror #27
    46d8:	00003f6c 	andeq	r3, r0, ip, ror #30
    46dc:	6e500001 	cdpvs	0, 5, cr0, cr0, cr1, {0}
    46e0:	a800003f 	stmdage	r0, {r0, r1, r2, r3, r4, r5}
    46e4:	0100003f 	tsteq	r0, pc, lsr r0
    46e8:	00005000 	andeq	r5, r0, r0
    46ec:	00000000 	andeq	r0, r0, r0
    46f0:	3e940000 	cdpcc	0, 9, cr0, cr4, cr0, {0}
    46f4:	3e980000 	cdpcc	0, 9, cr0, cr8, cr0, {0}
    46f8:	00030000 	andeq	r0, r3, r0
    46fc:	989f7170 	ldmls	pc, {r4, r5, r6, r8, ip, sp, lr}	; <UNPREDICTABLE>
    4700:	9e00003e 	mcrls	0, 0, r0, cr0, cr14, {1}
    4704:	0100003e 	tsteq	r0, lr, lsr r0
    4708:	3e9e5100 	fmlcce	f5, f6, f0
    470c:	3ebe0000 	cdpcc	0, 11, cr0, cr14, cr0, {0}
    4710:	00020000 	andeq	r0, r2, r0
    4714:	3ebe5491 	mrccc	4, 5, r5, cr14, cr1, {4}
    4718:	3eca0000 	cdpcc	0, 12, cr0, cr10, cr0, {0}
    471c:	00010000 	andeq	r0, r1, r0
    4720:	003eca51 	eorseq	ip, lr, r1, asr sl
    4724:	003ecc00 	eorseq	ip, lr, r0, lsl #24
    4728:	91000200 	mrsls	r0, R8_usr
    472c:	003ecc54 	eorseq	ip, lr, r4, asr ip
    4730:	003ece00 	eorseq	ip, lr, r0, lsl #28
    4734:	51000100 	mrspl	r0, (UNDEF: 16)
    4738:	00003ece 	andeq	r3, r0, lr, asr #29
    473c:	00003f74 	andeq	r3, r0, r4, ror pc
    4740:	54910002 	ldrpl	r0, [r1], #2
	...
    474c:	00003df8 	strdeq	r3, [r0], -r8
    4750:	00003e52 	andeq	r3, r0, r2, asr lr
    4754:	5a510001 	bpl	1444760 <__ccfg+0x14247b8>
    4758:	5c00003e 	stcpl	0, cr0, [r0], {62}	; 0x3e
    475c:	0100003e 	tsteq	r0, lr, lsr r0
    4760:	00005100 	andeq	r5, r0, r0, lsl #2
    4764:	00000000 	andeq	r0, r0, r0
    4768:	3e4a0000 	cdpcc	0, 4, cr0, cr10, cr0, {0}
    476c:	3e580000 	cdpcc	0, 5, cr0, cr8, cr0, {0}
    4770:	00010000 	andeq	r0, r1, r0
    4774:	003e5a52 	eorseq	r5, lr, r2, asr sl
    4778:	003f3c00 	eorseq	r3, pc, r0, lsl #24
    477c:	52000100 	andpl	r0, r0, #0, 2
	...
    4788:	00003e4a 	andeq	r3, r0, sl, asr #28
    478c:	00003f32 	andeq	r3, r0, r2, lsr pc
    4790:	00530001 	subseq	r0, r3, r1
    4794:	00000000 	andeq	r0, r0, r0
    4798:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    479c:	4600003d 			; <UNDEFINED> instruction: 0x4600003d
    47a0:	0100003f 	tsteq	r0, pc, lsr r0
    47a4:	00005500 	andeq	r5, r0, r0, lsl #10
    47a8:	00000000 	andeq	r0, r0, r0
    47ac:	3dec0000 	stclcc	0, cr0, [ip]
    47b0:	3e740000 	cdpcc	0, 7, cr0, cr4, cr0, {0}
    47b4:	00020000 	andeq	r0, r2, r0
    47b8:	3e749f30 	mrccc	15, 3, r9, cr4, cr0, {1}
    47bc:	3fa80000 	svccc	0x00a80000
    47c0:	00010000 	andeq	r0, r1, r0
    47c4:	00000054 	andeq	r0, r0, r4, asr r0
    47c8:	00000000 	andeq	r0, r0, r0
    47cc:	003e6c00 	eorseq	r6, lr, r0, lsl #24
    47d0:	003e7600 	eorseq	r7, lr, r0, lsl #12
    47d4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    47e0:	00003e94 	muleq	r0, r4, lr
    47e4:	00003ee4 	andeq	r3, r0, r4, ror #29
    47e8:	9f300002 	svcls	0x00300002
    47ec:	00003ee4 	andeq	r3, r0, r4, ror #29
    47f0:	00003f04 	andeq	r3, r0, r4, lsl #30
    47f4:	04510001 	ldrbeq	r0, [r1], #-1
    47f8:	0a00003f 	beq	48fc <patchGenfskRfe+0x1d8>
    47fc:	0200003f 	andeq	r0, r0, #63	; 0x3f
    4800:	0a9f3000 	beq	fe7d0808 <_estack+0xde7cb808>
    4804:	4400003f 	strmi	r0, [r0], #-63	; 0xffffffc1
    4808:	0100003f 	tsteq	r0, pc, lsr r0
    480c:	00005100 	andeq	r5, r0, r0, lsl #2
    4810:	00000000 	andeq	r0, r0, r0
    4814:	3ec00000 	cdpcc	0, 12, cr0, cr0, cr0, {0}
    4818:	3ec40000 	cdpcc	0, 12, cr0, cr4, cr0, {0}
    481c:	00010000 	andeq	r0, r1, r0
    4820:	003ecc5e 	eorseq	ip, lr, lr, asr ip
    4824:	003ece00 	eorseq	ip, lr, r0, lsl #28
    4828:	5e000100 	adfpls	f0, f0, f0
    482c:	00003ece 	andeq	r3, r0, lr, asr #29
    4830:	00003ed4 	ldrdeq	r3, [r0], -r4
    4834:	d4510001 	ldrble	r0, [r1], #-1
    4838:	dc00003e 	stcle	0, cr0, [r0], {62}	; 0x3e
    483c:	0300003e 	movweq	r0, #62	; 0x3e
    4840:	9f7f7100 	svcls	0x007f7100
	...
    484c:	00003e94 	muleq	r0, r4, lr
    4850:	00003ebe 			; <UNDEFINED> instruction: 0x00003ebe
    4854:	9f300002 	svcls	0x00300002
    4858:	00003ebe 			; <UNDEFINED> instruction: 0x00003ebe
    485c:	00003ec8 	andeq	r3, r0, r8, asr #29
    4860:	c85e0001 	ldmdagt	lr, {r0}^
    4864:	ca00003e 	bgt	4964 <patchGenfskRfe+0x240>
    4868:	0500003e 	streq	r0, [r0, #-62]	; 0xffffffc2
    486c:	38007100 	stmdacc	r0, {r8, ip, sp, lr}
    4870:	3eca9f26 	cdpcc	15, 12, cr9, cr10, cr6, {1}
    4874:	3ecc0000 	cdpcc	0, 12, cr0, cr12, cr0, {0}
    4878:	00060000 	andeq	r0, r6, r0
    487c:	38065491 	stmdacc	r6, {r0, r4, r7, sl, ip, lr}
    4880:	3ecc9f26 	cdpcc	15, 12, cr9, cr12, cr6, {1}
    4884:	3ece0000 	cdpcc	0, 12, cr0, cr14, cr0, {0}
    4888:	00010000 	andeq	r0, r1, r0
    488c:	003ece5e 	eorseq	ip, lr, lr, asr lr
    4890:	003f0400 	eorseq	r0, pc, r0, lsl #8
    4894:	91000600 	tstls	r0, r0, lsl #12
    4898:	26380654 			; <UNDEFINED> instruction: 0x26380654
    489c:	003f049f 	mlaseq	pc, pc, r4, r0	; <UNPREDICTABLE>
    48a0:	003f0a00 	eorseq	r0, pc, r0, lsl #20
    48a4:	30000200 	andcc	r0, r0, r0, lsl #4
    48a8:	003f0a9f 	mlaseq	pc, pc, sl, r0	; <UNPREDICTABLE>
    48ac:	003f7400 	eorseq	r7, pc, r0, lsl #8
    48b0:	5e000100 	adfpls	f0, f0, f0
	...
    48bc:	00003ee0 	andeq	r3, r0, r0, ror #29
    48c0:	00003f04 	andeq	r3, r0, r4, lsl #30
    48c4:	005c0001 	subseq	r0, ip, r1
    48c8:	00000000 	andeq	r0, r0, r0
    48cc:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    48d0:	7400003f 	strvc	r0, [r0], #-63	; 0xffffffc1
    48d4:	0100003f 	tsteq	r0, pc, lsr r0
    48d8:	00005a00 	andeq	r5, r0, r0, lsl #20
    48dc:	00000000 	andeq	r0, r0, r0
    48e0:	3f120000 	svccc	0x00120000
    48e4:	3f4e0000 	svccc	0x004e0000
    48e8:	00010000 	andeq	r0, r1, r0
    48ec:	003f4e5c 	eorseq	r4, pc, ip, asr lr	; <UNPREDICTABLE>
    48f0:	003f5200 	eorseq	r5, pc, r0, lsl #4
    48f4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    4900:	00003f52 	andeq	r3, r0, r2, asr pc
    4904:	00003f5c 	andeq	r3, r0, ip, asr pc
    4908:	00710017 	rsbseq	r0, r1, r7, lsl r0
    490c:	244b4012 	strbcs	r4, [fp], #-18	; 0xffffffee
    4910:	ffff0a22 			; <UNDEFINED> instruction: 0xffff0a22
    4914:	4b401416 	blmi	1009974 <__ccfg+0xfe99cc>
    4918:	282d2224 	stmdacs	sp!, {r2, r5, r9, sp}
    491c:	13160001 	tstne	r6, #1
    4920:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4924:	00000000 	andeq	r0, r0, r0
    4928:	003f7c00 	eorseq	r7, pc, r0, lsl #24
    492c:	003f8800 	eorseq	r8, pc, r0, lsl #16
    4930:	30000200 	andcc	r0, r0, r0, lsl #4
    4934:	003f889f 	mlaseq	pc, pc, r8, r8	; <UNPREDICTABLE>
    4938:	003fa800 	eorseq	sl, pc, r0, lsl #16
    493c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    4948:	00003f7e 	andeq	r3, r0, lr, ror pc
    494c:	00003f80 	andeq	r3, r0, r0, lsl #31
    4950:	80530001 	subshi	r0, r3, r1
    4954:	8800003f 	stmdahi	r0, {r0, r1, r2, r3, r4, r5}
    4958:	0200003f 	andeq	r0, r0, #63	; 0x3f
    495c:	889f4f00 	ldmhi	pc, {r8, r9, sl, fp, lr}	; <UNPREDICTABLE>
    4960:	9800003f 	stmdals	r0, {r0, r1, r2, r3, r4, r5}
    4964:	0100003f 	tsteq	r0, pc, lsr r0
    4968:	3f985300 	svccc	0x00985300
    496c:	3f9c0000 	svccc	0x009c0000
    4970:	00050000 	andeq	r0, r5, r0
    4974:	25340073 	ldrcs	r0, [r4, #-115]!	; 0xffffff8d
    4978:	003f9c9f 	mlaseq	pc, pc, ip, r9	; <UNPREDICTABLE>
    497c:	003fa000 	eorseq	sl, pc, r0
    4980:	53000100 	movwpl	r0, #256	; 0x100
	...
    498c:	00003e94 	muleq	r0, r4, lr
    4990:	00003f74 	andeq	r3, r0, r4, ror pc
    4994:	9c0c0006 	stcls	0, cr0, [ip], {6}
    4998:	9f500013 	svcls	0x00500013
	...
    49a4:	00003e00 	andeq	r3, r0, r0, lsl #28
    49a8:	00003e0c 	andeq	r3, r0, ip, lsl #28
    49ac:	00530001 	subseq	r0, r3, r1
    49b0:	00000000 	andeq	r0, r0, r0
    49b4:	20000000 	andcs	r0, r0, r0
    49b8:	2c00003e 	stccs	0, cr0, [r0], {62}	; 0x3e
    49bc:	0100003e 	tsteq	r0, lr, lsr r0
    49c0:	00005200 	andeq	r5, r0, r0, lsl #4
    49c4:	00000000 	andeq	r0, r0, r0
    49c8:	3e360000 	cdpcc	0, 3, cr0, cr6, cr0, {0}
    49cc:	3e420000 	cdpcc	0, 4, cr0, cr2, cr0, {0}
    49d0:	00010000 	andeq	r0, r1, r0
    49d4:	00000052 	andeq	r0, r0, r2, asr r0
    49d8:	00000000 	andeq	r0, r0, r0
    49dc:	003e4200 	eorseq	r4, lr, r0, lsl #4
    49e0:	003f3200 	eorseq	r3, pc, r0, lsl #4
    49e4:	53000100 	movwpl	r0, #256	; 0x100
	...
    49f0:	00003ffa 	strdeq	r3, [r0], -sl
    49f4:	00004004 	andeq	r4, r0, r4
    49f8:	04500001 	ldrbeq	r0, [r0], #-1
    49fc:	0e000040 	cdpeq	0, 0, cr0, cr0, cr0, {2}
    4a00:	0e000040 	cdpeq	0, 0, cr0, cr0, cr0, {2}
    4a04:	12007000 	andne	r7, r0, #0
    4a08:	14168009 	ldrne	r8, [r6], #-9
    4a0c:	0001282b 	andeq	r2, r1, fp, lsr #16
    4a10:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
    4a14:	00000000 	andeq	r0, r0, r0
    4a18:	f4000000 	vst4.8	{d0-d3}, [r0], r0
    4a1c:	2000003f 	andcs	r0, r0, pc, lsr r0
    4a20:	01000040 	tsteq	r0, r0, asr #32
    4a24:	00005400 	andeq	r5, r0, r0, lsl #8
    4a28:	00000000 	andeq	r0, r0, r0
    4a2c:	40240000 	eormi	r0, r4, r0
    4a30:	402a0000 	eormi	r0, sl, r0
    4a34:	00150000 	andseq	r0, r5, r0
    4a38:	40120073 	andsmi	r0, r2, r3, ror r0
    4a3c:	4f22244b 	svcmi	0x0022244b
    4a40:	4b401416 	blmi	1009aa0 <__ccfg+0xfe9af8>
    4a44:	282d2224 	stmdacs	sp!, {r2, r5, r9, sp}
    4a48:	13160001 	tstne	r6, #1
    4a4c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4a50:	00000000 	andeq	r0, r0, r0
    4a54:	00403000 	subeq	r3, r0, r0
    4a58:	00403a00 	subeq	r3, r0, r0, lsl #20
    4a5c:	74001700 	strvc	r1, [r0], #-1792	; 0xfffff900
    4a60:	4b401200 	blmi	1009268 <__ccfg+0xfe92c0>
    4a64:	ff0a2224 			; <UNDEFINED> instruction: 0xff0a2224
    4a68:	401416ff 			; <UNDEFINED> instruction: 0x401416ff
    4a6c:	2d22244b 	cfstrscs	mvf2, [r2, #-300]!	; 0xfffffed4
    4a70:	16000128 	strne	r0, [r0], -r8, lsr #2
    4a74:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    4a84:	00010000 	andeq	r0, r1, r0
    4a88:	00000052 	andeq	r0, r0, r2, asr r0
	...
    4a98:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4aac:	00510001 	subseq	r0, r1, r1
	...
    4abc:	01000000 	mrseq	r0, (UNDEF: 0)
    4ac0:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    4ad0:	00160000 	andseq	r0, r6, r0
    4ad4:	ff080070 			; <UNDEFINED> instruction: 0xff080070
    4ad8:	4b400070 	blmi	1004ca0 <__ccfg+0xfe4cf8>
    4adc:	050c2224 	streq	r2, [ip, #-548]	; 0xfffffddc
    4ae0:	2d800000 	stccs	0, cr0, [r0]
    4ae4:	16000128 	strne	r0, [r0], -r8, lsr #2
    4ae8:	00009f13 	andeq	r9, r0, r3, lsl pc
    4aec:	00000000 	andeq	r0, r0, r0
    4af0:	40640000 	rsbmi	r0, r4, r0
    4af4:	40a60000 	adcmi	r0, r6, r0
    4af8:	00030000 	andeq	r0, r3, r0
    4afc:	a69fff09 	ldrge	pc, [pc], r9, lsl #30
    4b00:	b0000040 	andlt	r0, r0, r0, asr #32
    4b04:	01000040 	tsteq	r0, r0, asr #32
    4b08:	00005000 	andeq	r5, r0, r0
    4b0c:	00000000 	andeq	r0, r0, r0
    4b10:	40700000 	rsbsmi	r0, r0, r0
    4b14:	407e0000 	rsbsmi	r0, lr, r0
    4b18:	00010000 	andeq	r0, r1, r0
    4b1c:	00408250 	subeq	r8, r0, r0, asr r2
    4b20:	00409e00 	subeq	r9, r0, r0, lsl #28
    4b24:	50000100 	andpl	r0, r0, r0, lsl #2
    4b28:	000040a0 	andeq	r4, r0, r0, lsr #1
    4b2c:	000040a2 	andeq	r4, r0, r2, lsr #1
    4b30:	a4500001 	ldrbge	r0, [r0], #-1
    4b34:	a6000040 	strge	r0, [r0], -r0, asr #32
    4b38:	01000040 	tsteq	r0, r0, asr #32
    4b3c:	00005000 	andeq	r5, r0, r0
	...
    4b4c:	00030000 	andeq	r0, r3, r0
    4b50:	009fff09 	addseq	pc, pc, r9, lsl #30
    4b54:	00000000 	andeq	r0, r0, r0
    4b58:	01000000 	mrseq	r0, (UNDEF: 0)
    4b5c:	00005000 	andeq	r5, r0, r0
	...
    4b6c:	00010000 	andeq	r0, r1, r0
    4b70:	00000054 	andeq	r0, r0, r4, asr r0
    4b74:	00000000 	andeq	r0, r0, r0
    4b78:	0040b000 	subeq	fp, r0, r0
    4b7c:	0040ea00 	subeq	lr, r0, r0, lsl #20
    4b80:	09000300 	stmdbeq	r0, {r8, r9}
    4b84:	40ea9fff 	strdmi	r9, [sl], #255	; 0xff	; <UNPREDICTABLE>
    4b88:	40ee0000 	rscmi	r0, lr, r0
    4b8c:	00020000 	andeq	r0, r2, r0
    4b90:	40ee9f44 	rscmi	r9, lr, r4, asr #30
    4b94:	40f20000 	rscsmi	r0, r2, r0
    4b98:	00020000 	andeq	r0, r2, r0
    4b9c:	40f29f45 	rscsmi	r9, r2, r5, asr #30
    4ba0:	41100000 	tstmi	r0, r0
    4ba4:	00030000 	andeq	r0, r3, r0
    4ba8:	109fff09 	addsne	pc, pc, r9, lsl #30
    4bac:	12000041 	andne	r0, r0, #65	; 0x41
    4bb0:	01000041 	tsteq	r0, r1, asr #32
    4bb4:	41125000 	tstmi	r2, r0
    4bb8:	41140000 	tstmi	r4, r0
    4bbc:	00030000 	andeq	r0, r3, r0
    4bc0:	149fff09 	ldrne	pc, [pc], #3849	; 4bc8 <patchGenfskRfe+0x4a4>
    4bc4:	1c000041 	stcne	0, cr0, [r0], {65}	; 0x41
    4bc8:	01000041 	tsteq	r0, r1, asr #32
    4bcc:	00005000 	andeq	r5, r0, r0
    4bd0:	00000000 	andeq	r0, r0, r0
    4bd4:	40c00000 	sbcmi	r0, r0, r0
    4bd8:	41180000 	tstmi	r8, r0
    4bdc:	00010000 	andeq	r0, r1, r0
    4be0:	00000054 	andeq	r0, r0, r4, asr r0
    4be4:	00000000 	andeq	r0, r0, r0
    4be8:	00413400 	subeq	r3, r1, r0, lsl #8
    4bec:	00413d00 	subeq	r3, r1, r0, lsl #26
    4bf0:	50000100 	andpl	r0, r0, r0, lsl #2
    4bf4:	0000413d 	andeq	r4, r0, sp, lsr r1
    4bf8:	00004152 	andeq	r4, r0, r2, asr r1
    4bfc:	52540001 	subspl	r0, r4, #1
    4c00:	56000041 	strpl	r0, [r0], -r1, asr #32
    4c04:	04000041 	streq	r0, [r0], #-65	; 0xffffffbf
    4c08:	5001f300 	andpl	pc, r1, r0, lsl #6
    4c0c:	0041569f 	umaaleq	r5, r1, pc, r6	; <UNPREDICTABLE>
    4c10:	00415800 	subeq	r5, r1, r0, lsl #16
    4c14:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    4c18:	00004158 	andeq	r4, r0, r8, asr r1
    4c1c:	0000415c 	andeq	r4, r0, ip, asr r1
    4c20:	01f30004 	mvnseq	r0, r4
    4c24:	00009f50 	andeq	r9, r0, r0, asr pc
    4c28:	00000000 	andeq	r0, r0, r0
    4c2c:	41340000 	teqmi	r4, r0
    4c30:	413d0000 	teqmi	sp, r0
    4c34:	00010000 	andeq	r0, r1, r0
    4c38:	00413d51 	subeq	r3, r1, r1, asr sp
    4c3c:	00415200 	subeq	r5, r1, r0, lsl #4
    4c40:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    4c44:	00004152 	andeq	r4, r0, r2, asr r1
    4c48:	00004156 	andeq	r4, r0, r6, asr r1
    4c4c:	01f30004 	mvnseq	r0, r4
    4c50:	41569f51 	cmpmi	r6, r1, asr pc
    4c54:	41580000 	cmpmi	r8, r0
    4c58:	00010000 	andeq	r0, r1, r0
    4c5c:	00415855 	subeq	r5, r1, r5, asr r8
    4c60:	00415c00 	subeq	r5, r1, r0, lsl #24
    4c64:	f3000400 	vshl.u8	d0, d0, d0
    4c68:	009f5101 	addseq	r5, pc, r1, lsl #2
    4c6c:	00000000 	andeq	r0, r0, r0
    4c70:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    4c74:	55000041 	strpl	r0, [r0, #-65]	; 0xffffffbf
    4c78:	05000041 	streq	r0, [r0, #-65]	; 0xffffffbf
    4c7c:	30007000 	andcc	r7, r0, r0
    4c80:	41569f29 	cmpmi	r6, r9, lsr #30
    4c84:	415c0000 	cmpmi	ip, r0
    4c88:	00050000 	andeq	r0, r5, r0
    4c8c:	29300070 	ldmdbcs	r0!, {r4, r5, r6}
    4c90:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4c94:	00000000 	andeq	r0, r0, r0
    4c98:	00415c00 	subeq	r5, r1, r0, lsl #24
    4c9c:	00415e00 	subeq	r5, r1, r0, lsl #28
    4ca0:	50000100 	andpl	r0, r0, r0, lsl #2
    4ca4:	0000415e 	andeq	r4, r0, lr, asr r1
    4ca8:	00004164 	andeq	r4, r0, r4, ror #2
    4cac:	01f30004 	mvnseq	r0, r4
    4cb0:	00009f50 	andeq	r9, r0, r0, asr pc
    4cb4:	00000000 	andeq	r0, r0, r0
    4cb8:	415c0000 	cmpmi	ip, r0
    4cbc:	41600000 	cmnmi	r0, r0
    4cc0:	00010000 	andeq	r0, r1, r0
    4cc4:	00416051 	subeq	r6, r1, r1, asr r0
    4cc8:	00416400 	subeq	r6, r1, r0, lsl #8
    4ccc:	f3000400 	vshl.u8	d0, d0, d0
    4cd0:	009f5101 	addseq	r5, pc, r1, lsl #2
    4cd4:	00000000 	andeq	r0, r0, r0
    4cd8:	5c000000 	stcpl	0, cr0, [r0], {-0}
    4cdc:	63000041 	movwvs	r0, #65	; 0x41
    4ce0:	01000041 	tsteq	r0, r1, asr #32
    4ce4:	41635200 	cmnmi	r3, r0, lsl #4
    4ce8:	41640000 	cmnmi	r4, r0
    4cec:	00040000 	andeq	r0, r4, r0
    4cf0:	9f5201f3 	svcls	0x005201f3
	...
    4d04:	00500001 	subseq	r0, r0, r1
    4d08:	00000000 	andeq	r0, r0, r0
    4d0c:	04000000 	streq	r0, [r0], #-0
    4d10:	5001f300 	andpl	pc, r1, r0, lsl #6
    4d14:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4d24:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    4d30:	01f30004 	mvnseq	r0, r4
    4d34:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    4d44:	00010000 	andeq	r0, r1, r0
    4d48:	00000052 	andeq	r0, r0, r2, asr r0
    4d4c:	00000000 	andeq	r0, r0, r0
    4d50:	f3000400 	vshl.u8	d0, d0, d0
    4d54:	009f5201 	addseq	r5, pc, r1, lsl #4
    4d58:	00000000 	andeq	r0, r0, r0
    4d5c:	01000000 	mrseq	r0, (UNDEF: 0)
    4d60:	00005200 	andeq	r5, r0, r0, lsl #4
    4d64:	00000000 	andeq	r0, r0, r0
    4d68:	00150000 	andseq	r0, r5, r0
    4d6c:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    4d70:	5201f325 	andpl	pc, r1, #-1811939328	; 0x94000000
    4d74:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    4d78:	282e3025 	stmdacs	lr!, {r0, r2, r5, ip, sp}
    4d7c:	13160001 	tstne	r6, #1
    4d80:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4d90:	53000100 	movwpl	r0, #256	; 0x100
	...
    4d9c:	01f30004 	mvnseq	r0, r4
    4da0:	00009f53 	andeq	r9, r0, r3, asr pc
	...
    4db0:	00040000 	andeq	r0, r4, r0
    4db4:	9f048070 	svcls	0x00048070
	...
    4dc0:	01f3000d 	mvnseq	r0, sp
    4dc4:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    4dc8:	23225001 			; <UNDEFINED> instruction: 0x23225001
    4dcc:	009f0480 	addseq	r0, pc, r0, lsl #9
    4dd0:	00000000 	andeq	r0, r0, r0
    4dd4:	01000000 	mrseq	r0, (UNDEF: 0)
    4dd8:	00005000 	andeq	r5, r0, r0
    4ddc:	00000000 	andeq	r0, r0, r0
    4de0:	00520000 	subseq	r0, r2, r0
    4de4:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    4de8:	5001f324 	andpl	pc, r1, r4, lsr #6
    4dec:	04802322 	streq	r2, [r0], #802	; 0x322
    4df0:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    4df4:	5001f324 	andpl	pc, r1, r4, lsr #6
    4df8:	5201f322 	andpl	pc, r1, #-2013265920	; 0x88000000
    4dfc:	29302540 	ldmdbcs	r0!, {r6, r8, sl, sp}
    4e00:	16000128 	strne	r0, [r0], -r8, lsr #2
    4e04:	04842313 	streq	r2, [r4], #787	; 0x313
    4e08:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    4e0c:	5001f324 	andpl	pc, r1, r4, lsr #6
    4e10:	04802322 	streq	r2, [r0], #802	; 0x322
    4e14:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    4e18:	5001f324 	andpl	pc, r1, r4, lsr #6
    4e1c:	5201f322 	andpl	pc, r1, #-2013265920	; 0x88000000
    4e20:	29302540 	ldmdbcs	r0!, {r6, r8, sl, sp}
    4e24:	16000128 	strne	r0, [r0], -r8, lsr #2
    4e28:	5201f313 	andpl	pc, r1, #1275068416	; 0x4c000000
    4e2c:	2e302540 	cfneg32cs	mvfx2, mvfx0
    4e30:	16000128 	strne	r0, [r0], -r8, lsr #2
    4e34:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    4e44:	00010000 	andeq	r0, r1, r0
    4e48:	00000051 	andeq	r0, r0, r1, asr r0
    4e4c:	00000000 	andeq	r0, r0, r0
    4e50:	30002f00 	andcc	r2, r0, r0, lsl #30
    4e54:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    4e58:	5201f325 	andpl	pc, r1, #-1811939328	; 0x94000000
    4e5c:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    4e60:	282e3025 	stmdacs	lr!, {r0, r2, r5, ip, sp}
    4e64:	13160001 	tstne	r6, #1
    4e68:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    4e6c:	5301f325 	movwpl	pc, #4901	; 0x1325	; <UNPREDICTABLE>
    4e70:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
    4e74:	f3131600 	vmax.u16	d1, d3, d0
    4e78:	29305301 	ldmdbcs	r0!, {r0, r8, r9, ip, lr}
    4e7c:	16000128 	strne	r0, [r0], -r8, lsr #2
    4e80:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    4e90:	00010000 	andeq	r0, r1, r0
    4e94:	00000050 	andeq	r0, r0, r0, asr r0
    4e98:	00000000 	andeq	r0, r0, r0
    4e9c:	f3000400 	vshl.u8	d0, d0, d0
    4ea0:	009f5001 	addseq	r5, pc, r1
	...
    4eb0:	01000000 	mrseq	r0, (UNDEF: 0)
    4eb4:	00005100 	andeq	r5, r0, r0, lsl #2
    4eb8:	00000000 	andeq	r0, r0, r0
    4ebc:	00040000 	andeq	r0, r4, r0
    4ec0:	9f5101f3 	svcls	0x005101f3
	...
    4ed4:	00520001 	subseq	r0, r2, r1
    4ed8:	00000000 	andeq	r0, r0, r0
    4edc:	04000000 	streq	r0, [r0], #-0
    4ee0:	5201f300 	andpl	pc, r1, #0, 6
    4ee4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4ee8:	00000000 	andeq	r0, r0, r0
    4eec:	52000100 	andpl	r0, r0, #0, 2
	...
    4ef8:	01f3001b 	mvnseq	r0, fp, lsl r0
    4efc:	f3254052 	vqadd.u32	q2, <illegal reg q2.5>, q1
    4f00:	01f35201 	mvnseq	r5, r1, lsl #4
    4f04:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    4f08:	000f0c22 	andeq	r0, pc, r2, lsr #24
    4f0c:	282b8000 	stmdacs	fp!, {pc}
    4f10:	13160001 	tstne	r6, #1
    4f14:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4f24:	53000100 	movwpl	r0, #256	; 0x100
	...
    4f30:	01f30004 	mvnseq	r0, r4
    4f34:	00009f53 	andeq	r9, r0, r3, asr pc
    4f38:	00000000 	andeq	r0, r0, r0
    4f3c:	00010000 	andeq	r0, r1, r0
    4f40:	00000053 	andeq	r0, r0, r3, asr r0
    4f44:	00000000 	andeq	r0, r0, r0
    4f48:	f3001b00 	vqrdmulh.s<illegal width 8>	d1, d0, d0
    4f4c:	1c405301 	mcrrne	3, 0, r5, r0, cr1
    4f50:	f35301f3 	vbsl	q8, <illegal reg q9.5>, <illegal reg q9.5>
    4f54:	4b405301 	blmi	1019b60 <__ccfg+0xff9bb8>
    4f58:	0f0c2224 	svceq	0x000c2224
    4f5c:	2b800000 	blcs	fe004f64 <_estack+0xddffff64>
    4f60:	16000128 	strne	r0, [r0], -r8, lsr #2
    4f64:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    4f74:	00020000 	andeq	r0, r2, r0
    4f78:	00000091 	muleq	r0, r1, r0
    4f7c:	00000000 	andeq	r0, r0, r0
    4f80:	00020000 	andeq	r0, r2, r0
    4f84:	0000007d 	andeq	r0, r0, sp, ror r0
	...
    4f94:	00040000 	andeq	r0, r4, r0
    4f98:	9f048070 	svcls	0x00048070
	...
    4fa4:	01f3000d 	mvnseq	r0, sp
    4fa8:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    4fac:	23225001 			; <UNDEFINED> instruction: 0x23225001
    4fb0:	009f0480 	addseq	r0, pc, r0, lsl #9
    4fb4:	00000000 	andeq	r0, r0, r0
    4fb8:	01000000 	mrseq	r0, (UNDEF: 0)
    4fbc:	00005000 	andeq	r5, r0, r0
    4fc0:	00000000 	andeq	r0, r0, r0
    4fc4:	00640000 	rsbeq	r0, r4, r0
    4fc8:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    4fcc:	5001f324 	andpl	pc, r1, r4, lsr #6
    4fd0:	04802322 	streq	r2, [r0], #802	; 0x322
    4fd4:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    4fd8:	5001f324 	andpl	pc, r1, r4, lsr #6
    4fdc:	5301f322 	movwpl	pc, #4898	; 0x1322	; <UNPREDICTABLE>
    4fe0:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    4fe4:	00000f0c 	andeq	r0, r0, ip, lsl #30
    4fe8:	01282c80 	smlawbeq	r8, r0, ip, r2
    4fec:	23131600 	tstcs	r3, #0, 12
    4ff0:	01f30484 	mvnseq	r0, r4, lsl #9
    4ff4:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    4ff8:	23225001 			; <UNDEFINED> instruction: 0x23225001
    4ffc:	01f30480 	mvnseq	r0, r0, lsl #9
    5000:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    5004:	f3225001 	vhadd.u32	d5, d2, d1
    5008:	4b405301 	blmi	1019c14 <__ccfg+0xff9c6c>
    500c:	0f0c2224 	svceq	0x000c2224
    5010:	2c800000 	stccs	0, cr0, [r0], {0}
    5014:	16000128 	strne	r0, [r0], -r8, lsr #2
    5018:	5301f313 	movwpl	pc, #4883	; 0x1313	; <UNPREDICTABLE>
    501c:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    5020:	00000f0c 	andeq	r0, r0, ip, lsl #30
    5024:	01282b80 	smlawbeq	r8, r0, fp, r2
    5028:	9f131600 	svcls	0x00131600
	...
    503c:	0074000a 	rsbseq	r0, r4, sl
    5040:	1affff0a 	bne	4c70 <patchGenfskRfe+0x54c>
    5044:	9f240073 	svcls	0x00240073
	...
    5050:	007d000c 	rsbseq	r0, sp, ip
    5054:	ff0a0294 			; <UNDEFINED> instruction: 0xff0a0294
    5058:	00731aff 	ldrshteq	r1, [r3], #-175	; 0xffffff51
    505c:	00009f24 	andeq	r9, r0, r4, lsr #30
    5060:	00000000 	andeq	r0, r0, r0
    5064:	00240000 	eoreq	r0, r4, r0
    5068:	0294007d 	addseq	r0, r4, #125	; 0x7d
    506c:	1affff0a 	bne	4c9c <patchGenfskRfe+0x578>
    5070:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    5074:	5301f31c 	movwpl	pc, #4892	; 0x131c	; <UNPREDICTABLE>
    5078:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    507c:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    5080:	8000000f 	andhi	r0, r0, pc
    5084:	0001282b 	andeq	r2, r1, fp, lsr #16
    5088:	9f241316 	svcls	0x00241316
	...
    509c:	00500001 	subseq	r0, r0, r1
    50a0:	00000000 	andeq	r0, r0, r0
    50a4:	04000000 	streq	r0, [r0], #-0
    50a8:	5001f300 	andpl	pc, r1, r0, lsl #6
    50ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    50bc:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    50c8:	01f30004 	mvnseq	r0, r4
    50cc:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    50dc:	00010000 	andeq	r0, r1, r0
    50e0:	00000052 	andeq	r0, r0, r2, asr r0
    50e4:	00000000 	andeq	r0, r0, r0
    50e8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    50f4:	01f30015 	mvnseq	r0, r5, lsl r0
    50f8:	f3254052 	vqadd.u32	q2, <illegal reg q2.5>, q1
    50fc:	01f35201 	mvnseq	r5, r1, lsl #4
    5100:	30254052 	eorcc	r4, r5, r2, asr r0
    5104:	0001282e 	andeq	r2, r1, lr, lsr #16
    5108:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    5118:	01000000 	mrseq	r0, (UNDEF: 0)
    511c:	00005500 	andeq	r5, r0, r0, lsl #10
    5120:	00000000 	andeq	r0, r0, r0
    5124:	001d0000 	andseq	r0, sp, r0
    5128:	f35001f3 	vbsl	q8, q8, <illegal reg q9.5>
    512c:	23225101 			; <UNDEFINED> instruction: 0x23225101
    5130:	5001f302 	andpl	pc, r1, r2, lsl #6
    5134:	225101f3 	subscs	r0, r1, #-1073741764	; 0xc000003c
    5138:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    513c:	282e3025 	stmdacs	lr!, {r0, r2, r5, ip, sp}
    5140:	13160001 	tstne	r6, #1
    5144:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5154:	75000600 	strvc	r0, [r0, #-1536]	; 0xfffffa00
    5158:	1a007400 	bne	22160 <__ccfg+0x21b8>
    515c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    516c:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    5178:	01f3001d 	mvnseq	r0, sp, lsl r0
    517c:	5101f350 	tstpl	r1, r0, asr r3	; <UNPREDICTABLE>
    5180:	f3022322 	vcgt.u8	d2, d2, d18
    5184:	01f35001 	mvnseq	r5, r1
    5188:	01f32251 	mvnseq	r2, r1, asr r2
    518c:	30254052 	eorcc	r4, r5, r2, asr r0
    5190:	0001282e 	andeq	r2, r1, lr, lsr #16
    5194:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    51a4:	07000000 	streq	r0, [r0, -r0]
    51a8:	0a007500 	beq	225b0 <__ccfg+0x2608>
    51ac:	9f1affff 	svcls	0x001affff
	...
    51c0:	00700005 	rsbseq	r0, r0, r5
    51c4:	009f2930 	addseq	r2, pc, r0, lsr r9	; <UNPREDICTABLE>
	...
    51d4:	01000000 	mrseq	r0, (UNDEF: 0)
    51d8:	00005000 	andeq	r5, r0, r0
    51dc:	00000000 	andeq	r0, r0, r0
    51e0:	00040000 	andeq	r0, r4, r0
    51e4:	9f5001f3 	svcls	0x005001f3
	...
    51f8:	00510001 	subseq	r0, r1, r1
    51fc:	00000000 	andeq	r0, r0, r0
    5200:	04000000 	streq	r0, [r0], #-0
    5204:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    5208:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5218:	52000100 	andpl	r0, r0, #0, 2
	...
    5224:	00540001 	subseq	r0, r4, r1
    5228:	00000000 	andeq	r0, r0, r0
    522c:	1b000000 	blne	5234 <__exidx_end+0x18c>
    5230:	5201f300 	andpl	pc, r1, #0, 6
    5234:	01f32540 	mvnseq	r2, r0, asr #10
    5238:	5301f352 	movwpl	pc, #4946	; 0x1352	; <UNPREDICTABLE>
    523c:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    5240:	00000f0c 	andeq	r0, r0, ip, lsl #30
    5244:	01282b80 	smlawbeq	r8, r0, fp, r2
    5248:	9f131600 	svcls	0x00131600
	...
    525c:	00530001 	subseq	r0, r3, r1
    5260:	00000000 	andeq	r0, r0, r0
    5264:	01000000 	mrseq	r0, (UNDEF: 0)
    5268:	00005500 	andeq	r5, r0, r0, lsl #10
    526c:	00000000 	andeq	r0, r0, r0
    5270:	001b0000 	andseq	r0, fp, r0
    5274:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    5278:	5301f31c 	movwpl	pc, #4892	; 0x131c	; <UNPREDICTABLE>
    527c:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    5280:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    5284:	8000000f 	andhi	r0, r0, pc
    5288:	0001282b 	andeq	r2, r1, fp, lsr #16
    528c:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    529c:	01000000 	mrseq	r0, (UNDEF: 0)
    52a0:	00005600 	andeq	r5, r0, r0, lsl #12
    52a4:	00000000 	andeq	r0, r0, r0
    52a8:	00060000 	andeq	r0, r6, r0
    52ac:	00710070 	rsbseq	r0, r1, r0, ror r0
    52b0:	00009f22 	andeq	r9, r0, r2, lsr #30
    52b4:	00000000 	andeq	r0, r0, r0
    52b8:	00010000 	andeq	r0, r1, r0
    52bc:	00000056 	andeq	r0, r0, r6, asr r0
    52c0:	00000000 	andeq	r0, r0, r0
    52c4:	f3002300 	vcgt.u8	d2, d0, d0
    52c8:	01f35001 	mvnseq	r5, r1
    52cc:	02232251 	eoreq	r2, r3, #268435461	; 0x10000005
    52d0:	f35001f3 	vbsl	q8, q8, <illegal reg q9.5>
    52d4:	f3225101 	vrhadd.u32	d5, d2, d1
    52d8:	4b405301 	blmi	1019ee4 <__ccfg+0xff9f3c>
    52dc:	0f0c2224 	svceq	0x000c2224
    52e0:	2b800000 	blcs	fe0052e8 <_estack+0xde0002e8>
    52e4:	16000128 	strne	r0, [r0], -r8, lsr #2
    52e8:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    52f8:	00060000 	andeq	r0, r6, r0
    52fc:	00740076 	rsbseq	r0, r4, r6, ror r0
    5300:	00009f1a 	andeq	r9, r0, sl, lsl pc
    5304:	00000000 	andeq	r0, r0, r0
    5308:	00010000 	andeq	r0, r1, r0
    530c:	00000050 	andeq	r0, r0, r0, asr r0
	...
    531c:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    5328:	01f30023 	mvnseq	r0, r3, lsr #32
    532c:	5101f350 	tstpl	r1, r0, asr r3	; <UNPREDICTABLE>
    5330:	f3022322 	vcgt.u8	d2, d2, d18
    5334:	01f35001 	mvnseq	r5, r1
    5338:	01f32251 	mvnseq	r2, r1, asr r2
    533c:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    5340:	000f0c22 	andeq	r0, pc, r2, lsr #24
    5344:	282b8000 	stmdacs	fp!, {pc}
    5348:	13160001 	tstne	r6, #1
    534c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    535c:	76000700 	strvc	r0, [r0], -r0, lsl #14
    5360:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    5364:	00009f1a 	andeq	r9, r0, sl, lsl pc
	...
    5374:	00050000 	andeq	r0, r5, r0
    5378:	29300070 	ldmdbcs	r0!, {r4, r5, r6}
    537c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5394:	00005200 	andeq	r5, r0, r0, lsl #4
    5398:	51000100 	mrspl	r0, (UNDEF: 16)
    539c:	00000052 	andeq	r0, r0, r2, asr r0
    53a0:	00000096 	muleq	r0, r6, r0
    53a4:	01f30004 	mvnseq	r0, r4
    53a8:	00969f51 	addseq	r9, r6, r1, asr pc
    53ac:	00980000 	addseq	r0, r8, r0
    53b0:	00010000 	andeq	r0, r1, r0
    53b4:	00009851 	andeq	r9, r0, r1, asr r8
    53b8:	0000a000 	andeq	sl, r0, r0
    53bc:	f3000400 	vshl.u8	d0, d0, d0
    53c0:	a09f5101 	addsge	r5, pc, r1, lsl #2
    53c4:	a6000000 	strge	r0, [r0], -r0
    53c8:	01000000 	mrseq	r0, (UNDEF: 0)
    53cc:	00a65100 	adceq	r5, r6, r0, lsl #2
    53d0:	00aa0000 	adceq	r0, sl, r0
    53d4:	00040000 	andeq	r0, r4, r0
    53d8:	9f5101f3 	svcls	0x005101f3
	...
    53e4:	02000000 	andeq	r0, r0, #0
    53e8:	00000002 	andeq	r0, r0, r2
    53ec:	01000000 	mrseq	r0, (UNDEF: 0)
    53f0:	00000001 	andeq	r0, r0, r1
	...
    5410:	0000002a 	andeq	r0, r0, sl, lsr #32
    5414:	2a520001 	bcs	1485420 <__ccfg+0x1465478>
    5418:	40000000 	andmi	r0, r0, r0
    541c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    5420:	72007100 	andvc	r7, r0, #0, 2
    5424:	00742200 	rsbseq	r2, r4, r0, lsl #4
    5428:	00409f1c 	subeq	r9, r0, ip, lsl pc
    542c:	00420000 	subeq	r0, r2, r0
    5430:	000b0000 	andeq	r0, fp, r0
    5434:	00720071 	rsbseq	r0, r2, r1, ror r0
    5438:	1c007422 	cfstrsne	mvf7, [r0], {34}	; 0x22
    543c:	429f1c40 	addsmi	r1, pc, #64, 24	; 0x4000
    5440:	4c000000 	stcmi	0, cr0, [r0], {-0}
    5444:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    5448:	72007100 	andvc	r7, r0, #0, 2
    544c:	00742200 	rsbseq	r2, r4, r0, lsl #4
    5450:	00569f1c 	subseq	r9, r6, ip, lsl pc
    5454:	005a0000 	subseq	r0, sl, r0
    5458:	00010000 	andeq	r0, r1, r0
    545c:	00005a53 	andeq	r5, r0, r3, asr sl
    5460:	00005e00 	andeq	r5, r0, r0, lsl #28
    5464:	73000600 	movwvc	r0, #1536	; 0x600
    5468:	1c007600 	stcne	6, cr7, [r0], {-0}
    546c:	00005e9f 	muleq	r0, pc, lr	; <UNPREDICTABLE>
    5470:	00006000 	andeq	r6, r0, r0
    5474:	73000800 	movwvc	r0, #2048	; 0x800
    5478:	1c007600 	stcne	6, cr7, [r0], {-0}
    547c:	609f1c34 	addsvs	r1, pc, r4, lsr ip	; <UNPREDICTABLE>
    5480:	6a000000 	bvs	5488 <__exidx_end+0x3e0>
    5484:	06000000 	streq	r0, [r0], -r0
    5488:	76007300 	strvc	r7, [r0], -r0, lsl #6
    548c:	6a9f1c00 	bvs	fe7cc494 <_estack+0xde7c7494>
    5490:	72000000 	andvc	r0, r0, #0
    5494:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    5498:	3f007200 	svccc	0x00007200
    549c:	1c00761a 	stcne	6, cr7, [r0], {26}
    54a0:	0000729f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    54a4:	00007600 	andeq	r7, r0, r0, lsl #12
    54a8:	f3000900 	vmls.i8	d0, d0, d0
    54ac:	1a3f5201 	bne	fd9cb8 <__ccfg+0xfb9d10>
    54b0:	9f1c0076 	svcls	0x001c0076
    54b4:	00000076 	andeq	r0, r0, r6, ror r0
    54b8:	00000078 	andeq	r0, r0, r8, ror r0
    54bc:	78520001 	ldmdavc	r2, {r0}^
    54c0:	80000000 	andhi	r0, r0, r0
    54c4:	01000000 	mrseq	r0, (UNDEF: 0)
    54c8:	00805600 	addeq	r5, r0, r0, lsl #12
    54cc:	00820000 	addeq	r0, r2, r0
    54d0:	00070000 	andeq	r0, r7, r0
    54d4:	76200073 			; <UNDEFINED> instruction: 0x76200073
    54d8:	829f2200 	addshi	r2, pc, #0, 4
    54dc:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    54e0:	06000000 	streq	r0, [r0], -r0
    54e4:	73007600 	movwvc	r7, #1536	; 0x600
    54e8:	889f1c00 	ldmhi	pc, {sl, fp, ip}	; <UNPREDICTABLE>
    54ec:	8c000000 	stchi	0, cr0, [r0], {-0}
    54f0:	07000000 	streq	r0, [r0, -r0]
    54f4:	20007300 	andcs	r7, r0, r0, lsl #6
    54f8:	9f220076 	svcls	0x00220076
    54fc:	00000096 	muleq	r0, r6, r0
    5500:	0000009a 	muleq	r0, sl, r0
    5504:	9a520001 	bls	1485510 <__ccfg+0x1465568>
    5508:	a0000000 	andge	r0, r0, r0
    550c:	01000000 	mrseq	r0, (UNDEF: 0)
    5510:	00a05600 	adceq	r5, r0, r0, lsl #12
    5514:	00a20000 	adceq	r0, r2, r0
    5518:	00010000 	andeq	r0, r1, r0
    551c:	0000a252 	andeq	sl, r0, r2, asr r2
    5520:	0000a600 	andeq	sl, r0, r0, lsl #12
    5524:	56000100 	strpl	r0, [r0], -r0, lsl #2
    5528:	000000a6 	andeq	r0, r0, r6, lsr #1
    552c:	000000aa 	andeq	r0, r0, sl, lsr #1
    5530:	00530001 	subseq	r0, r3, r1
    5534:	00000000 	andeq	r0, r0, r0
    5538:	02000000 	andeq	r0, r0, #0
    553c:	00000000 	andeq	r0, r0, r0
    5540:	01010000 	mrseq	r0, (UNDEF: 1)
	...
    554c:	76000000 	strvc	r0, [r0], -r0
    5550:	01000000 	mrseq	r0, (UNDEF: 0)
    5554:	00765000 	rsbseq	r5, r6, r0
    5558:	00800000 	addeq	r0, r0, r0
    555c:	00010000 	andeq	r0, r1, r0
    5560:	00008055 	andeq	r8, r0, r5, asr r0
    5564:	00008200 	andeq	r8, r0, r0, lsl #4
    5568:	75000800 	strvc	r0, [r0, #-2048]	; 0xfffff800
    556c:	22007300 	andcs	r7, r0, #0, 6
    5570:	829f0123 	addshi	r0, pc, #-1073741816	; 0xc0000008
    5574:	82000000 	andhi	r0, r0, #0
    5578:	06000000 	streq	r0, [r0], -r0
    557c:	73007500 	movwvc	r7, #1280	; 0x500
    5580:	829f2200 	addshi	r2, pc, #0, 4
    5584:	8c000000 	stchi	0, cr0, [r0], {-0}
    5588:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    558c:	73007500 	movwvc	r7, #1280	; 0x500
    5590:	01232200 			; <UNDEFINED> instruction: 0x01232200
    5594:	0000969f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    5598:	00009800 	andeq	r9, r0, r0, lsl #16
    559c:	50000100 	andpl	r0, r0, r0, lsl #2
    55a0:	00000098 	muleq	r0, r8, r0
    55a4:	000000a0 	andeq	r0, r0, r0, lsr #1
    55a8:	a0550001 	subsge	r0, r5, r1
    55ac:	aa000000 	bge	55b4 <__exidx_end+0x50c>
    55b0:	01000000 	mrseq	r0, (UNDEF: 0)
    55b4:	00005000 	andeq	r5, r0, r0
    55b8:	00000000 	andeq	r0, r0, r0
    55bc:	00030000 	andeq	r0, r3, r0
    55c0:	00000000 	andeq	r0, r0, r0
    55c4:	01000000 	mrseq	r0, (UNDEF: 0)
    55c8:	00000001 	andeq	r0, r0, r1
    55cc:	00000000 	andeq	r0, r0, r0
    55d0:	00520000 	subseq	r0, r2, r0
    55d4:	00010000 	andeq	r0, r1, r0
    55d8:	00005251 	andeq	r5, r0, r1, asr r2
    55dc:	00007600 	andeq	r7, r0, r0, lsl #12
    55e0:	f3000400 	vshl.u8	d0, d0, d0
    55e4:	769f5101 	ldrvc	r5, [pc], r1, lsl #2
    55e8:	80000000 	andhi	r0, r0, r0
    55ec:	01000000 	mrseq	r0, (UNDEF: 0)
    55f0:	00805100 	addeq	r5, r0, r0, lsl #2
    55f4:	00820000 	addeq	r0, r2, r0
    55f8:	00080000 	andeq	r0, r8, r0
    55fc:	00730071 	rsbseq	r0, r3, r1, ror r0
    5600:	9f012322 	svcls	0x00012322
    5604:	00000082 	andeq	r0, r0, r2, lsl #1
    5608:	00000082 	andeq	r0, r0, r2, lsl #1
    560c:	00710006 	rsbseq	r0, r1, r6
    5610:	9f220073 	svcls	0x00220073
    5614:	00000082 	andeq	r0, r0, r2, lsl #1
    5618:	0000008c 	andeq	r0, r0, ip, lsl #1
    561c:	00710008 	rsbseq	r0, r1, r8
    5620:	23220073 			; <UNDEFINED> instruction: 0x23220073
    5624:	00969f01 	addseq	r9, r6, r1, lsl #30
    5628:	00a60000 	adceq	r0, r6, r0
    562c:	00010000 	andeq	r0, r1, r0
    5630:	0000a651 	andeq	sl, r0, r1, asr r6
    5634:	0000aa00 	andeq	sl, r0, r0, lsl #20
    5638:	f3000400 	vshl.u8	d0, d0, d0
    563c:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    5648:	01010101 	tsteq	r1, r1, lsl #2
    564c:	01010202 	tsteq	r1, r2, lsl #4
    5650:	00000000 	andeq	r0, r0, r0
    5654:	01010000 	mrseq	r0, (UNDEF: 1)
    5658:	00000000 	andeq	r0, r0, r0
    565c:	2a000000 	bcs	5664 <__exidx_end+0x5bc>
    5660:	2c000000 	stccs	0, cr0, [r0], {-0}
    5664:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    5668:	71007000 	mrsvc	r7, (UNDEF: 0)
    566c:	00741c00 	rsbseq	r1, r4, r0, lsl #24
    5670:	002c9f22 	eoreq	r9, ip, r2, lsr #30
    5674:	003a0000 	eorseq	r0, sl, r0
    5678:	000b0000 	andeq	r0, fp, r0
    567c:	00710070 	rsbseq	r0, r1, r0, ror r0
    5680:	2200741c 	andcs	r7, r0, #28, 8	; 0x1c000000
    5684:	3a9f0423 	bcc	fe7c6718 <_estack+0xde7c1718>
    5688:	3a000000 	bcc	5690 <__exidx_end+0x5e8>
    568c:	0b000000 	bleq	5694 <__exidx_end+0x5ec>
    5690:	71007000 	mrsvc	r7, (UNDEF: 0)
    5694:	00741c00 	rsbseq	r1, r4, r0, lsl #24
    5698:	9f082322 	svcls	0x00082322
    569c:	0000003a 	andeq	r0, r0, sl, lsr r0
    56a0:	00000040 	andeq	r0, r0, r0, asr #32
    56a4:	0070000b 	rsbseq	r0, r0, fp
    56a8:	741c0071 	ldrvc	r0, [ip], #-113	; 0xffffff8f
    56ac:	0c232200 	sfmeq	f2, 4, [r3], #-0
    56b0:	0000409f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    56b4:	00004200 	andeq	r4, r0, r0, lsl #4
    56b8:	70000b00 	andvc	r0, r0, r0, lsl #22
    56bc:	1c007100 	stfnes	f7, [r0], {-0}
    56c0:	23220074 			; <UNDEFINED> instruction: 0x23220074
    56c4:	00429f10 	subeq	r9, r2, r0, lsl pc
    56c8:	004c0000 	subeq	r0, ip, r0
    56cc:	00090000 	andeq	r0, r9, r0
    56d0:	00710070 	rsbseq	r0, r1, r0, ror r0
    56d4:	2200741c 	andcs	r7, r0, #28, 8	; 0x1c000000
    56d8:	0000569f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    56dc:	00005a00 	andeq	r5, r0, r0, lsl #20
    56e0:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    56e4:	0000005a 	andeq	r0, r0, sl, asr r0
    56e8:	0000005a 	andeq	r0, r0, sl, asr r0
    56ec:	00750006 	rsbseq	r0, r5, r6
    56f0:	9f220076 	svcls	0x00220076
    56f4:	0000005a 	andeq	r0, r0, sl, asr r0
    56f8:	00000060 	andeq	r0, r0, r0, rrx
    56fc:	00750008 	rsbseq	r0, r5, r8
    5700:	23220076 			; <UNDEFINED> instruction: 0x23220076
    5704:	00609f04 	rsbeq	r9, r0, r4, lsl #30
    5708:	00740000 	rsbseq	r0, r4, r0
    570c:	00060000 	andeq	r0, r6, r0
    5710:	00760075 	rsbseq	r0, r6, r5, ror r0
    5714:	00749f22 	rsbseq	r9, r4, r2, lsr #30
    5718:	00780000 	rsbseq	r0, r8, r0
    571c:	000b0000 	andeq	r0, fp, r0
    5720:	2434017c 	ldrtcs	r0, [r4], #-380	; 0xfffffe84
    5724:	76220070 			; <UNDEFINED> instruction: 0x76220070
    5728:	a69f2200 	ldrge	r2, [pc], r0, lsl #4
    572c:	aa000000 	bge	5734 <__exidx_end+0x68c>
    5730:	01000000 	mrseq	r0, (UNDEF: 0)
    5734:	00005500 	andeq	r5, r0, r0, lsl #10
    5738:	00000000 	andeq	r0, r0, r0
    573c:	01000000 	mrseq	r0, (UNDEF: 0)
    5740:	02010101 	andeq	r0, r1, #1073741824	; 0x40000000
    5744:	00010102 	andeq	r0, r1, r2, lsl #2
    5748:	00000000 	andeq	r0, r0, r0
    574c:	00010100 	andeq	r0, r1, r0, lsl #2
    5750:	00000000 	andeq	r0, r0, r0
    5754:	002a0000 	eoreq	r0, sl, r0
    5758:	002c0000 	eoreq	r0, ip, r0
    575c:	00010000 	andeq	r0, r1, r0
    5760:	00002c54 	andeq	r2, r0, r4, asr ip
    5764:	00003a00 	andeq	r3, r0, r0, lsl #20
    5768:	74000300 	strvc	r0, [r0], #-768	; 0xfffffd00
    576c:	003a9f04 	eorseq	r9, sl, r4, lsl #30
    5770:	003a0000 	eorseq	r0, sl, r0
    5774:	00030000 	andeq	r0, r3, r0
    5778:	3a9f0874 	bcc	fe7c7950 <_estack+0xde7c2950>
    577c:	40000000 	andmi	r0, r0, r0
    5780:	03000000 	movweq	r0, #0
    5784:	9f0c7400 	svcls	0x000c7400
    5788:	00000040 	andeq	r0, r0, r0, asr #32
    578c:	00000042 	andeq	r0, r0, r2, asr #32
    5790:	10740003 	rsbsne	r0, r4, r3
    5794:	0000429f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    5798:	00004c00 	andeq	r4, r0, r0, lsl #24
    579c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    57a0:	00000054 	andeq	r0, r0, r4, asr r0
    57a4:	0000005a 	andeq	r0, r0, sl, asr r0
    57a8:	5a510001 	bpl	14457b4 <__ccfg+0x142580c>
    57ac:	5a000000 	bpl	57b4 <__exidx_end+0x70c>
    57b0:	06000000 	streq	r0, [r0], -r0
    57b4:	76007100 	strvc	r7, [r0], -r0, lsl #2
    57b8:	5a9f2200 	bpl	fe7cdfc0 <_estack+0xde7c8fc0>
    57bc:	60000000 	andvs	r0, r0, r0
    57c0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    57c4:	76007100 	strvc	r7, [r0], -r0, lsl #2
    57c8:	04232200 	strteq	r2, [r3], #-512	; 0xfffffe00
    57cc:	0000609f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    57d0:	00007600 	andeq	r7, r0, r0, lsl #12
    57d4:	71000600 	tstvc	r0, r0, lsl #12
    57d8:	22007600 	andcs	r7, r0, #0, 12
    57dc:	0000769f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    57e0:	00007800 	andeq	r7, r0, r0, lsl #16
    57e4:	7c000c00 	stcvc	12, cr0, [r0], {-0}
    57e8:	f3243401 	vshl.u32	d3, d1, d4
    57ec:	76225101 	strtvc	r5, [r2], -r1, lsl #2
    57f0:	a69f2200 	ldrge	r2, [pc], r0, lsl #4
    57f4:	aa000000 	bge	57fc <__exidx_end+0x754>
    57f8:	01000000 	mrseq	r0, (UNDEF: 0)
    57fc:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    5808:	01000000 	mrseq	r0, (UNDEF: 0)
    580c:	0000001a 	andeq	r0, r0, sl, lsl r0
    5810:	0000001c 	andeq	r0, r0, ip, lsl r0
    5814:	1c540001 	mrrcne	0, 0, r0, r4, cr1
    5818:	24000000 	strcs	r0, [r0], #-0
    581c:	02000000 	andeq	r0, r0, #0
    5820:	27007300 	strcs	r7, [r0, -r0, lsl #6]
    5824:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    5828:	04000000 	streq	r0, [r0], #-0
    582c:	7ed87400 	cdpvc	4, 13, cr7, cr8, cr0, {0}
    5830:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    583c:	00000400 	andeq	r0, r0, r0, lsl #8
    5840:	00000600 	andeq	r0, r0, r0, lsl #12
    5844:	73000200 	movwvc	r0, #512	; 0x200
    5848:	00000600 	andeq	r0, r0, r0, lsl #12
    584c:	00000800 	andeq	r0, r0, r0, lsl #16
    5850:	53000100 	movwpl	r0, #256	; 0x100
	...
    5868:	0000000c 	andeq	r0, r0, ip
    586c:	0c500001 	mrrceq	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    5870:	24000000 	strcs	r0, [r0], #-0
    5874:	01000000 	mrseq	r0, (UNDEF: 0)
    5878:	00245400 	eoreq	r5, r4, r0, lsl #8
    587c:	002a0000 	eoreq	r0, sl, r0
    5880:	00040000 	andeq	r0, r4, r0
    5884:	9f5001f3 	svcls	0x005001f3
    5888:	0000002a 	andeq	r0, r0, sl, lsr #32
    588c:	00000038 	andeq	r0, r0, r8, lsr r0
    5890:	00540001 	subseq	r0, r4, r1
	...
    589c:	01010000 	mrseq	r0, (UNDEF: 1)
    58a0:	00000000 	andeq	r0, r0, r0
    58a4:	0a000000 	beq	58ac <__exidx_end+0x804>
    58a8:	01000000 	mrseq	r0, (UNDEF: 0)
    58ac:	000a5000 	andeq	r5, sl, r0
    58b0:	00160000 	andseq	r0, r6, r0
    58b4:	00010000 	andeq	r0, r1, r0
    58b8:	00001655 	andeq	r1, r0, r5, asr r6
    58bc:	00001c00 	andeq	r1, r0, r0, lsl #24
    58c0:	f3000400 	vshl.u8	d0, d0, d0
    58c4:	1c9f5001 	ldcne	0, cr5, [pc], {1}
    58c8:	2c000000 	stccs	0, cr0, [r0], {-0}
    58cc:	01000000 	mrseq	r0, (UNDEF: 0)
    58d0:	00005500 	andeq	r5, r0, r0, lsl #10
	...
    58e4:	0000000c 	andeq	r0, r0, ip
    58e8:	0c510001 	mrrceq	0, 0, r0, r1, cr1
    58ec:	11000000 	mrsne	r0, (UNDEF: 0)
    58f0:	01000000 	mrseq	r0, (UNDEF: 0)
    58f4:	00115000 	andseq	r5, r1, r0
    58f8:	002c0000 	eoreq	r0, ip, r0
    58fc:	00040000 	andeq	r0, r4, r0
    5900:	9f5101f3 	svcls	0x005101f3
	...
    5914:	00000011 	andeq	r0, r0, r1, lsl r0
    5918:	11520001 	cmpne	r2, r1
    591c:	2c000000 	stccs	0, cr0, [r0], {-0}
    5920:	04000000 	streq	r0, [r0], #-0
    5924:	5201f300 	andpl	pc, r1, #0, 6
    5928:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    592c:	00000000 	andeq	r0, r0, r0
    5930:	12000000 	andne	r0, r0, #0
    5934:	2c000000 	stccs	0, cr0, [r0], {-0}
    5938:	01000000 	mrseq	r0, (UNDEF: 0)
    593c:	00005000 	andeq	r5, r0, r0
	...
    5948:	00010100 	andeq	r0, r1, r0, lsl #2
    594c:	00000020 	andeq	r0, r0, r0, lsr #32
    5950:	00000034 	andeq	r0, r0, r4, lsr r0
    5954:	34500001 	ldrbcc	r0, [r0], #-1
    5958:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
    595c:	01000000 	mrseq	r0, (UNDEF: 0)
    5960:	00ae5500 	adceq	r5, lr, r0, lsl #10
    5964:	00b80000 	adcseq	r0, r8, r0
    5968:	00040000 	andeq	r0, r4, r0
    596c:	9f5001f3 	svcls	0x005001f3
	...
    5978:	003a0001 	eorseq	r0, sl, r1
    597c:	00410000 	subeq	r0, r1, r0
    5980:	00010000 	andeq	r0, r1, r0
    5984:	00000051 	andeq	r0, r0, r1, asr r0
	...
    5990:	36000000 	strcc	r0, [r0], -r0
    5994:	3c000000 	stccc	0, cr0, [r0], {-0}
    5998:	01000000 	mrseq	r0, (UNDEF: 0)
    599c:	003c5100 	eorseq	r5, ip, r0, lsl #2
    59a0:	00480000 	subeq	r0, r8, r0
    59a4:	00010000 	andeq	r0, r1, r0
    59a8:	00004854 	andeq	r4, r0, r4, asr r8
    59ac:	00005000 	andeq	r5, r0, r0
    59b0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    59c0:	00000076 	andeq	r0, r0, r6, ror r0
    59c4:	00000078 	andeq	r0, r0, r8, ror r0
    59c8:	78510001 	ldmdavc	r1, {r0}^
    59cc:	84000000 	strhi	r0, [r0], #-0
    59d0:	01000000 	mrseq	r0, (UNDEF: 0)
    59d4:	00005400 	andeq	r5, r0, r0, lsl #8
    59d8:	00000000 	andeq	r0, r0, r0
    59dc:	00010000 	andeq	r0, r1, r0
    59e0:	00000076 	andeq	r0, r0, r6, ror r0
    59e4:	0000007d 	andeq	r0, r0, sp, ror r0
    59e8:	00510001 	subseq	r0, r1, r1
	...
    59f4:	01010000 	mrseq	r0, (UNDEF: 1)
    59f8:	00000000 	andeq	r0, r0, r0
    59fc:	00000f00 	andeq	r0, r0, r0, lsl #30
    5a00:	50000100 	andpl	r0, r0, r0, lsl #2
    5a04:	0000000f 	andeq	r0, r0, pc
    5a08:	00000018 	andeq	r0, r0, r8, lsl r0
    5a0c:	18550001 	ldmdane	r5, {r0}^
    5a10:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    5a14:	04000000 	streq	r0, [r0], #-0
    5a18:	5001f300 	andpl	pc, r1, r0, lsl #6
    5a1c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5a28:	00000101 	andeq	r0, r0, r1, lsl #2
    5a2c:	06000000 	streq	r0, [r0], -r0
    5a30:	01000000 	mrseq	r0, (UNDEF: 0)
    5a34:	00065100 	andeq	r5, r6, r0, lsl #2
    5a38:	00180000 	andseq	r0, r8, r0
    5a3c:	00010000 	andeq	r0, r1, r0
    5a40:	00001854 	andeq	r1, r0, r4, asr r8
    5a44:	00001e00 	andeq	r1, r0, r0, lsl #28
    5a48:	f3000400 	vshl.u8	d0, d0, d0
    5a4c:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    5a5c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    5a60:	06000000 	streq	r0, [r0], -r0
    5a64:	04935000 	ldreq	r5, [r3], #0
    5a68:	0e049351 	mcreq	3, 0, r9, cr4, cr1, {2}
    5a6c:	54000000 	strpl	r0, [r0], #-0
    5a70:	06000000 	streq	r0, [r0], -r0
    5a74:	f503f300 			; <UNDEFINED> instruction: 0xf503f300
    5a78:	009f2500 	addseq	r2, pc, r0, lsl #10
	...
    5a88:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    5a8c:	06000000 	streq	r0, [r0], -r0
    5a90:	04935200 	ldreq	r5, [r3], #512	; 0x200
    5a94:	3e049353 	mcrcc	3, 0, r9, cr4, cr3, {2}
    5a98:	54000000 	strpl	r0, [r0], #-0
    5a9c:	06000000 	streq	r0, [r0], -r0
    5aa0:	f503f300 			; <UNDEFINED> instruction: 0xf503f300
    5aa4:	009f2502 	addseq	r2, pc, r2, lsl #10
	...
    5ab0:	00001a02 	andeq	r1, r0, r2, lsl #20
    5ab4:	00004a00 	andeq	r4, r0, r0, lsl #20
    5ab8:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    5ac4:	00000001 	andeq	r0, r0, r1
    5ac8:	001a0000 	andseq	r0, sl, r0
    5acc:	001e0000 	andseq	r0, lr, r0
    5ad0:	00060000 	andeq	r0, r6, r0
    5ad4:	00740070 	rsbseq	r0, r4, r0, ror r0
    5ad8:	001e9f1e 	andseq	r9, lr, lr, lsl pc
    5adc:	00220000 	eoreq	r0, r2, r0
    5ae0:	00010000 	andeq	r0, r1, r0
    5ae4:	00002650 	andeq	r2, r0, r0, asr r6
    5ae8:	00004400 	andeq	r4, r0, r0, lsl #8
    5aec:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    5afc:	0000001c 	andeq	r0, r0, ip, lsl r0
    5b00:	00000036 	andeq	r0, r0, r6, lsr r0
    5b04:	36550001 	ldrbcc	r0, [r5], -r1
    5b08:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    5b0c:	0c000000 	stceq	0, cr0, [r0], {-0}
    5b10:	40007200 	andmi	r7, r0, r0, lsl #4
    5b14:	7c254024 	stcvc	0, cr4, [r5], #-144	; 0xffffff70
    5b18:	1e254000 	cdpne	0, 2, cr4, cr5, cr0, {0}
    5b1c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5b20:	00000000 	andeq	r0, r0, r0
    5b24:	20000000 	andcs	r0, r0, r0
    5b28:	3c000000 	stccc	0, cr0, [r0], {-0}
    5b2c:	01000000 	mrseq	r0, (UNDEF: 0)
    5b30:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    5b3c:	00120000 	andseq	r0, r2, r0
    5b40:	001e0000 	andseq	r0, lr, r0
    5b44:	00010000 	andeq	r0, r1, r0
    5b48:	00001e50 	andeq	r1, r0, r0, asr lr
    5b4c:	00005400 	andeq	r5, r0, r0, lsl #8
    5b50:	7c000700 	stcvc	7, cr0, [r0], {-0}
    5b54:	40244000 	eormi	r4, r4, r0
    5b58:	00009f25 	andeq	r9, r0, r5, lsr #30
	...
    5b64:	00160000 	andseq	r0, r6, r0
    5b68:	001c0000 	andseq	r0, ip, r0
    5b6c:	00010000 	andeq	r0, r1, r0
    5b70:	00001c55 	andeq	r1, r0, r5, asr ip
    5b74:	00003e00 	andeq	r3, r0, r0, lsl #28
    5b78:	72000700 	andvc	r0, r0, #0, 14
    5b7c:	40244000 	eormi	r4, r4, r0
    5b80:	00009f25 	andeq	r9, r0, r5, lsr #30
	...
    5b8c:	00140000 	andseq	r0, r4, r0
    5b90:	00200000 	eoreq	r0, r0, r0
    5b94:	00010000 	andeq	r0, r1, r0
    5b98:	00002051 	andeq	r2, r0, r1, asr r0
    5b9c:	00005400 	andeq	r5, r0, r0, lsl #8
    5ba0:	7c000500 	cfstr32vc	mvfx0, [r0], {-0}
    5ba4:	9f254000 	svcls	0x00254000
	...
    5bb0:	00000001 	andeq	r0, r0, r1
    5bb4:	00000016 	andeq	r0, r0, r6, lsl r0
    5bb8:	00000024 	andeq	r0, r0, r4, lsr #32
    5bbc:	24540001 	ldrbcs	r0, [r4], #-1
    5bc0:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    5bc4:	05000000 	streq	r0, [r0, #-0]
    5bc8:	40007200 	andmi	r7, r0, r0, lsl #4
    5bcc:	00009f25 	andeq	r9, r0, r5, lsr #30
	...
    5bdc:	00040000 	andeq	r0, r4, r0
    5be0:	00010000 	andeq	r0, r1, r0
    5be4:	00000450 	andeq	r0, r0, r0, asr r4
    5be8:	00001000 	andeq	r1, r0, r0
    5bec:	f3000400 	vshl.u8	d0, d0, d0
    5bf0:	009f5001 	addseq	r5, pc, r1
    5bf4:	00000000 	andeq	r0, r0, r0
    5bf8:	Address 0x0000000000005bf8 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000054 	andeq	r0, r0, r4, asr r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
}
  10:	000000c8 	andeq	r0, r0, r8, asr #1
  14:	0000006e 	andeq	r0, r0, lr, rrx
  18:	00000138 	andeq	r0, r0, r8, lsr r1
  1c:	00000014 	andeq	r0, r0, r4, lsl r0
  20:	0000014c 	andeq	r0, r0, ip, asr #2
  24:	00000058 	andeq	r0, r0, r8, asr r0
  28:	000001a4 	andeq	r0, r0, r4, lsr #3
  2c:	00000018 	andeq	r0, r0, r8, lsl r0
  30:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
  34:	000000dc 	ldrdeq	r0, [r0], -ip
  38:	00000000 	andeq	r0, r0, r0
  3c:	00000018 	andeq	r0, r0, r8, lsl r0
			i = k;
  40:	00000000 	andeq	r0, r0, r0
				j->Next = k;
  44:	0000000c 	andeq	r0, r0, ip
  48:	00000298 	muleq	r0, r8, r2
}
  4c:	000002d4 	ldrdeq	r0, [r0], -r4
	...
		release;
  58:	000000e4 	andeq	r0, r0, r4, ror #1
  5c:	14440002 	strbne	r0, [r4], #-2
		b->length - b->u.pointers.head - b->u.pointers.tail;
  60:	00040000 	andeq	r0, r4, r0
	b->u.pointers.tail =
  64:	00000000 	andeq	r0, r0, r0
}
  68:	0000056c 	andeq	r0, r0, ip, ror #10
		return NULL;
  6c:	0000000c 	andeq	r0, r0, ip
  70:	00000578 	andeq	r0, r0, r8, ror r5
  74:	0000002c 	andeq	r0, r0, ip, lsr #32
  78:	000005a4 	andeq	r0, r0, r4, lsr #11
  7c:	0000002a 	andeq	r0, r0, sl, lsr #32
  80:	000005d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  84:	0000003c 	andeq	r0, r0, ip, lsr r0
  88:	0000060c 	andeq	r0, r0, ip, lsl #12
  8c:	00000040 	andeq	r0, r0, r0, asr #32
  90:	00000000 	andeq	r0, r0, r0
  94:	00000020 	andeq	r0, r0, r0, lsr #32
  98:	0000064c 	andeq	r0, r0, ip, asr #12
  9c:	00000054 	andeq	r0, r0, r4, asr r0
  a0:	000006a0 	andeq	r0, r0, r0, lsr #13
  a4:	00000040 	andeq	r0, r0, r0, asr #32
  a8:	000006e0 	andeq	r0, r0, r0, ror #13
  ac:	00000028 	andeq	r0, r0, r8, lsr #32
  b0:	00000708 	andeq	r0, r0, r8, lsl #14
  b4:	00000114 	andeq	r0, r0, r4, lsl r1
  b8:	0000081c 	andeq	r0, r0, ip, lsl r8
  bc:	00000050 	andeq	r0, r0, r0, asr r0
  c0:	0000086c 	andeq	r0, r0, ip, ror #16
  c4:	00000054 	andeq	r0, r0, r4, asr r0
char * assembleMessage(message * messagePtr) {
  c8:	000008c0 	andeq	r0, r0, r0, asr #17
  cc:	00000038 	andeq	r0, r0, r8, lsr r0
  d0:	000008f8 	strdeq	r0, [r0], -r8
  d4:	00000110 	andeq	r0, r0, r0, lsl r1
  d8:	00000000 	andeq	r0, r0, r0
        p = (char*)umalloc(6);
  dc:	0000000c 	andeq	r0, r0, ip
  e0:	00000a08 	andeq	r0, r0, r8, lsl #20
    p[0] = messagePtr->senderGroupId;
  e4:	000000c0 	andeq	r0, r0, r0, asr #1
  e8:	00000ac8 	andeq	r0, r0, r8, asr #21
    p[2] = messagePtr->messageType;
  ec:	00000044 	andeq	r0, r0, r4, asr #32
    p[3] = messagePtr->requestNumber;
  f0:	00000b0c 	andeq	r0, r0, ip, lsl #22
    p[4] = messagePtr->senderId;
  f4:	0000003c 	andeq	r0, r0, ip, lsr r0
    p[5] = messagePtr->destinationId;
  f8:	00000b48 	andeq	r0, r0, r8, asr #22
        p = (char*)umalloc(8);
  fc:	000000a4 	andeq	r0, r0, r4, lsr #1
 100:	00000bec 	andeq	r0, r0, ip, ror #23
 104:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
        p[7] = 0x00;
 108:	00000da4 	andeq	r0, r0, r4, lsr #27
        break;
 10c:	00000024 	andeq	r0, r0, r4, lsr #32
        p = (char*)umalloc(26);
 110:	00000000 	andeq	r0, r0, r0
        strcpy(p + 6, messagePtr->messageRecord);
 114:	00000028 	andeq	r0, r0, r8, lsr #32
 118:	00000dc8 	andeq	r0, r0, r8, asr #27
        strcpy(p + 8, messagePtr->messageRecord);
 11c:	00000258 	andeq	r0, r0, r8, asr r2
        p = (char*)umalloc(28);
 120:	00001020 	andeq	r1, r0, r0, lsr #32
 124:	00000030 	andeq	r0, r0, r0, lsr r0
 128:	00000000 	andeq	r0, r0, r0
        p[7] = 0x00;
 12c:	0000005c 	andeq	r0, r0, ip, asr r0
 130:	00001050 	andeq	r1, r0, r0, asr r0
        strcpy(p + 8, messagePtr->messageRecord);
 134:	00000060 	andeq	r0, r0, r0, rrx
	...
int getPacketSize(char messageType) {
 140:	00000154 	andeq	r0, r0, r4, asr r1
}
 144:	28d40002 	ldmcs	r4, {r1}^
 148:	00040000 	andeq	r0, r4, r0
fsm transmitter (message * messagePtr) {
 14c:	00000000 	andeq	r0, r0, r0
 150:	000010b0 	strheq	r1, [r0], -r0
 154:	0000003c 	andeq	r0, r0, ip, lsr r0
}
 158:	000010ec 	andeq	r1, r0, ip, ror #1
 15c:	00000080 	andeq	r0, r0, r0, lsl #1
fsm transmitter (message * messagePtr) {
 160:	0000116c 	andeq	r1, r0, ip, ror #2
        char * assembledMessage = assembleMessage(messagePtr);
 164:	00000018 	andeq	r0, r0, r8, lsl r0
 168:	00000000 	andeq	r0, r0, r0
 16c:	00000024 	andeq	r0, r0, r4, lsr #32
        spkt = tcv_wnp (Transmit_Message, sfd,  getPacketSize(messagePtr->messageType));
 170:	00001184 	andeq	r1, r0, r4, lsl #3
 174:	00000010 	andeq	r0, r0, r0, lsl r0
 178:	00001194 	muleq	r0, r4, r1
 17c:	0000002c 	andeq	r0, r0, ip, lsr #32
 180:	00000000 	andeq	r0, r0, r0
        spkt [0] = 0;
 184:	0000004c 	andeq	r0, r0, ip, asr #32
        strcpy(p, assembledMessage);
 188:	000011c0 	andeq	r1, r0, r0, asr #3
        tcv_endp (spkt);
 18c:	00000006 	andeq	r0, r0, r6
 190:	000011c8 	andeq	r1, r0, r8, asr #3
}
 194:	000000cc 	andeq	r0, r0, ip, asr #1
        finish;
 198:	00001294 	muleq	r0, r4, r2
 19c:	00000014 	andeq	r0, r0, r4, lsl r0
 1a0:	000012a8 	andeq	r1, r0, r8, lsr #5
char randomNumber() {
 1a4:	00000034 	andeq	r0, r0, r4, lsr r0
   srand((unsigned) time(&t));
 1a8:	000012dc 	ldrdeq	r1, [r0], -ip
 1ac:	00000034 	andeq	r0, r0, r4, lsr r0
   return (char)rand();
 1b0:	00000000 	andeq	r0, r0, r0
}
 1b4:	0000002c 	andeq	r0, r0, ip, lsr #32
 1b8:	00001310 	andeq	r1, r0, r0, lsl r3
fsm find {
 1bc:	00000024 	andeq	r0, r0, r4, lsr #32
 1c0:	00001334 	andeq	r1, r0, r4, lsr r3
 1c4:	00000038 	andeq	r0, r0, r8, lsr r0
 1c8:	00000000 	andeq	r0, r0, r0
        i = 0;
 1cc:	00000014 	andeq	r0, r0, r4, lsl r0
 1d0:	00000000 	andeq	r0, r0, r0
        sendCount = 0;
 1d4:	00000040 	andeq	r0, r0, r0, asr #32
        currentRequestNumber = randomNumber();
 1d8:	00000000 	andeq	r0, r0, r0
        messagePtr -> senderGroupId = groupId;
 1dc:	00000018 	andeq	r0, r0, r8, lsl r0
 1e0:	0000136c 	andeq	r1, r0, ip, ror #6
 1e4:	00000024 	andeq	r0, r0, r4, lsr #32
 1e8:	00000000 	andeq	r0, r0, r0
        messagePtr -> requestNumber = currentRequestNumber;
 1ec:	00000020 	andeq	r0, r0, r0, lsr #32
 1f0:	00001390 	muleq	r0, r0, r3
        messagePtr -> senderId = nodeId;
 1f4:	0000000e 	andeq	r0, r0, lr
 1f8:	0000139e 	muleq	r0, lr, r3
 1fc:	00000010 	andeq	r0, r0, r0, lsl r0
        if(sendCount == 2) {
 200:	00000000 	andeq	r0, r0, r0
 204:	0000001c 	andeq	r0, r0, ip, lsl r0
            proceed Display_Neighbours;
 208:	00000000 	andeq	r0, r0, r0
        call transmitter(messagePtr, Wait);
 20c:	00000010 	andeq	r0, r0, r0, lsl r0
 210:	00000000 	andeq	r0, r0, r0
 214:	00000006 	andeq	r0, r0, r6
 218:	000013ae 	andeq	r1, r0, lr, lsr #7
 21c:	00000014 	andeq	r0, r0, r4, lsl r0
 220:	000013c2 	andeq	r1, r0, r2, asr #7
        sendCount++;
 224:	0000000e 	andeq	r0, r0, lr
        delay(3*1024, Send_Discovery_Request);
 228:	000013d0 	ldrdeq	r1, [r0], -r0
 22c:	00000024 	andeq	r0, r0, r4, lsr #32
 230:	000013f4 	strdeq	r1, [r0], -r4
        ser_outf(Display_Neighbours, "Neighbours:");
 234:	0000009c 	muleq	r0, ip, r0
 238:	00001490 	muleq	r0, r0, r4
        if (neighbours[i] == 1) {
 23c:	00000050 	andeq	r0, r0, r0, asr r0
 240:	000014e0 	andeq	r1, r0, r0, ror #9
 244:	00000048 	andeq	r0, r0, r8, asr #32
            ser_outf(Display_Neighbour, " %d", i);
 248:	00001528 	andeq	r1, r0, r8, lsr #10
 24c:	00000050 	andeq	r0, r0, r0, asr r0
        i++;
 250:	00000000 	andeq	r0, r0, r0
 254:	00000058 	andeq	r0, r0, r8, asr r0
            proceed Display_Neighbour;
 258:	00001578 	andeq	r1, r0, r8, ror r5
 25c:	000000a8 	andeq	r0, r0, r8, lsr #1
}
 260:	00001620 	andeq	r1, r0, r0, lsr #12
        finish;
 264:	00000034 	andeq	r0, r0, r4, lsr r0
}
 268:	00001654 	andeq	r1, r0, r4, asr r6
 26c:	00000018 	andeq	r0, r0, r8, lsl r0
 270:	00000000 	andeq	r0, r0, r0
 274:	00000030 	andeq	r0, r0, r0, lsr r0
 278:	00000000 	andeq	r0, r0, r0
 27c:	00000038 	andeq	r0, r0, r8, lsr r0
 280:	0000166c 	andeq	r1, r0, ip, ror #12
 284:	0000013c 	andeq	r0, r0, ip, lsr r1
 288:	000017a8 	andeq	r1, r0, r8, lsr #15
 28c:	00000024 	andeq	r0, r0, r4, lsr #32
	...
fsm root {
 298:	00000104 	andeq	r0, r0, r4, lsl #2
 29c:	3af70002 	bcc	ffdc02ac <_estack+0xdfdbb2ac>
 2a0:	00040000 	andeq	r0, r4, r0
 2a4:	00000000 	andeq	r0, r0, r0
 2a8:	000017cc 	andeq	r1, r0, ip, asr #15
 2ac:	00000016 	andeq	r0, r0, r6, lsl r0
 2b0:	000017e2 	andeq	r1, r0, r2, ror #15
 2b4:	0000001a 	andeq	r0, r0, sl, lsl r0
 2b8:	000017fc 	strdeq	r1, [r0], -ip
 2bc:	0000000e 	andeq	r0, r0, lr
 2c0:	0000180c 	andeq	r1, r0, ip, lsl #16
 2c4:	0000004c 	andeq	r0, r0, ip, asr #32
 2c8:	00001858 	andeq	r1, r0, r8, asr r8
        recordCount = 0;
 2cc:	0000008c 	andeq	r0, r0, ip, lsl #1
        nodeId = 1;
 2d0:	000018e4 	andeq	r1, r0, r4, ror #17
 2d4:	00000070 	andeq	r0, r0, r0, ror r0
        groupId = 1;
 2d8:	00001954 	andeq	r1, r0, r4, asr r9
 2dc:	000000c0 	andeq	r0, r0, r0, asr #1
        messagePtr = (message *) umalloc(sizeof(message));
 2e0:	00000000 	andeq	r0, r0, r0
        phys_cc1350(0, MAX_PACKET_LENGTH);
 2e4:	0000006c 	andeq	r0, r0, ip, rrx
 2e8:	00001a14 	andeq	r1, r0, r4, lsl sl
 2ec:	00000024 	andeq	r0, r0, r4, lsr #32
        tcv_plug(0, &plug_null);
 2f0:	00000000 	andeq	r0, r0, r0
 2f4:	00000080 	andeq	r0, r0, r0, lsl #1
        sfd = tcv_open(WNONE, 0, 0);
 2f8:	00000000 	andeq	r0, r0, r0
 2fc:	00000070 	andeq	r0, r0, r0, ror r0
 300:	00000000 	andeq	r0, r0, r0
		tcv_control(sfd, PHYSOPT_ON, NULL);
 304:	00000078 	andeq	r0, r0, r8, ror r0
        sfd = tcv_open(WNONE, 0, 0);
 308:	00001a38 	andeq	r1, r0, r8, lsr sl
		tcv_control(sfd, PHYSOPT_ON, NULL);
 30c:	000000bc 	strheq	r0, [r0], -ip
		if (sfd < 0) {
 310:	00000000 	andeq	r0, r0, r0
			diag("Cannot open tcv interface");
 314:	0000003a 	andeq	r0, r0, sl, lsr r0
 318:	00000000 	andeq	r0, r0, r0
			halt();
 31c:	00000038 	andeq	r0, r0, r8, lsr r0
        currentProtocol = IDLE;
 320:	00000000 	andeq	r0, r0, r0
 324:	0000000a 	andeq	r0, r0, sl
        ser_outf(Menu_Header, "\r\nGroup %d Device #%d (%d/%d records)\r\n", groupId, nodeId, recordCount, MAX_RECORDS);
 328:	00001af4 	strdeq	r1, [r0], -r4
 32c:	0000002c 	andeq	r0, r0, ip, lsr #32
 330:	00001b20 	andeq	r1, r0, r0, lsr #22
 334:	00000060 	andeq	r0, r0, r0, rrx
 338:	00000000 	andeq	r0, r0, r0
 33c:	00000040 	andeq	r0, r0, r0, asr #32
        ser_outf(Options, menu);
 340:	00000000 	andeq	r0, r0, r0
 344:	0000002c 	andeq	r0, r0, ip, lsr #32
        ser_inf(Get_Choice, "%c", &choice);
 348:	00000000 	andeq	r0, r0, r0
 34c:	0000003c 	andeq	r0, r0, ip, lsr r0
 350:	00000000 	andeq	r0, r0, r0
        switch (choice)
 354:	00000006 	andeq	r0, r0, r6
 358:	00001b80 	andeq	r1, r0, r0, lsl #23
 35c:	00000068 	andeq	r0, r0, r8, rrx
 360:	00001be8 	andeq	r1, r0, r8, ror #23
 364:	00000050 	andeq	r0, r0, r0, asr r0
 368:	00001c38 	andeq	r1, r0, r8, lsr ip
 36c:	0000009c 	muleq	r0, ip, r0
 370:	00001cd4 	ldrdeq	r1, [r0], -r4
 374:	00000040 	andeq	r0, r0, r0, asr #32
 378:	00001d14 	andeq	r1, r0, r4, lsl sp
 37c:	00000034 	andeq	r0, r0, r4, lsr r0
 380:	00001d48 	andeq	r1, r0, r8, asr #26
        proceed Menu_Header;
 384:	0000003c 	andeq	r0, r0, ip, lsr r0
 388:	00000000 	andeq	r0, r0, r0
        ser_outf(Set_Group_ID, "New Group ID: ");
 38c:	0000003c 	andeq	r0, r0, ip, lsr r0
 390:	00001d84 	andeq	r1, r0, r4, lsl #27
        ser_inf(Get_Group_ID, "%d", &groupId);
 394:	00000002 	andeq	r0, r0, r2
	...
        proceed Menu_Header;
 3a0:	00000034 	andeq	r0, r0, r4, lsr r0
        ser_outf(Set_Node_ID, "New node ID (1-25):");
 3a4:	4e2e0002 	cdpmi	0, 2, cr0, cr14, cr2, {0}
 3a8:	00040000 	andeq	r0, r4, r0
        ser_inf(Get_Node_ID, "%d", &nodeId);
 3ac:	00000000 	andeq	r0, r0, r0
 3b0:	00001d86 	andeq	r1, r0, r6, lsl #27
 3b4:	00000002 	andeq	r0, r0, r2
    if (node < 1 || node > 25) {
 3b8:	00001d88 	andeq	r1, r0, r8, lsl #27
 3bc:	00000002 	andeq	r0, r0, r2
            proceed Set_Node_ID;
 3c0:	00001d8a 	andeq	r1, r0, sl, lsl #27
        proceed Menu_Header;
 3c4:	00000002 	andeq	r0, r0, r2
 3c8:	00001d8c 	andeq	r1, r0, ip, lsl #27
        call find(Menu_Header);
 3cc:	00000044 	andeq	r0, r0, r4, asr #32
	...
 3d8:	00000014 	andeq	r0, r0, r4, lsl r0
 3dc:	4fa60002 	svcmi	0x00a60002
            proceed Set_Node_ID;
 3e0:	00040000 	andeq	r0, r4, r0
	...
            proceed Create_Record;
 3f0:	00000024 	andeq	r0, r0, r4, lsr #32
            proceed Delete_Record;
 3f4:	54e10002 	strbtpl	r0, [r1], #2
            proceed Retrieve_Record;
 3f8:	00040000 	andeq	r0, r4, r0
	...
            diag("Reset Local Storage");
 404:	00000002 	andeq	r0, r0, r2
        currentProtocol = CREATE_RECORD;
 408:	00000000 	andeq	r0, r0, r0
        ser_outf(Create_Record, "Receiver node ID (1-25):");
 40c:	00000058 	andeq	r0, r0, r8, asr r0
	...
        ser_inf(Get_Receiver_Node, "%d", &receiverId);
 418:	00000024 	andeq	r0, r0, r4, lsr #32
 41c:	59e50002 	stmibpl	r5!, {r1}^
    if (node < 1 || node > 25) {
 420:	00040000 	andeq	r0, r4, r0
	...
            proceed Create_Record;
 42c:	000000cc 	andeq	r0, r0, ip, asr #1
        ser_in(Get_Message, messagePtr->messageRecord, RECORD_LENGTH);
 430:	00000000 	andeq	r0, r0, r0
 434:	00000038 	andeq	r0, r0, r8, lsr r0
	...
        if(strlen(messagePtr->messageRecord) >= RECORD_LENGTH) {
 440:	0000008c 	andeq	r0, r0, ip, lsl #1
 444:	5edf0002 	cdppl	0, 13, cr0, cr15, cr2, {0}
            messagePtr->messageRecord[RECORD_LENGTH - 1] = '/0';
 448:	00040000 	andeq	r0, r4, r0
        proceed Transmit_Message;
 44c:	00000000 	andeq	r0, r0, r0
            messagePtr->messageRecord[RECORD_LENGTH - 1] = '/0';
 450:	00001dd8 	ldrdeq	r1, [r0], -r8
        proceed Transmit_Message;
 454:	00000034 	andeq	r0, r0, r4, lsr r0
        currentProtocol = DELETE_RECORD;
 458:	00001e0c 	andeq	r1, r0, ip, lsl #28
        ser_outf(Retrieve_Record, "Delete Record from Neighbour:\n\r");
 45c:	00000030 	andeq	r0, r0, r0, lsr r0
        currentProtocol = DELETE_RECORD;
 460:	00001e3c 	andeq	r1, r0, ip, lsr lr
        ser_outf(Retrieve_Record, "Delete Record from Neighbour:\n\r");
 464:	00000018 	andeq	r0, r0, r8, lsl r0
        proceed Get_Receiving_Node;
 468:	00001e54 	andeq	r1, r0, r4, asr lr
        currentProtocol = RETRIEVE_RECORD;
 46c:	00000054 	andeq	r0, r0, r4, asr r0
        ser_outf(Retrieve_Record, "Retrieve Record from Neighbour:\n\r");
 470:	00001ea8 	andeq	r1, r0, r8, lsr #29
        currentProtocol = RETRIEVE_RECORD;
 474:	00000040 	andeq	r0, r0, r0, asr #32
        ser_outf(Retrieve_Record, "Retrieve Record from Neighbour:\n\r");
 478:	00001ee8 	andeq	r1, r0, r8, ror #29
        ser_outf(Prompt_Recieving_Node, "Neighbour node ID (1-25):");
 47c:	00000024 	andeq	r0, r0, r4, lsr #32
 480:	00001f0c 	andeq	r1, r0, ip, lsl #30
        ser_inf(Get_Receiving_Node, "%d", &receiverId);
 484:	00000014 	andeq	r0, r0, r4, lsl r0
 488:	00001f20 	andeq	r1, r0, r0, lsr #30
 48c:	00000014 	andeq	r0, r0, r4, lsl r0
    if (node < 1 || node > 25) {
 490:	00000000 	andeq	r0, r0, r0
 494:	00000064 	andeq	r0, r0, r4, rrx
            proceed Prompt_Recieving_Node;
 498:	00000000 	andeq	r0, r0, r0
        ser_outf(Prompt_Record_Index, "Record index:");
 49c:	00000128 	andeq	r0, r0, r8, lsr #2
 4a0:	00000000 	andeq	r0, r0, r0
        char desiredRecordIndex = -1;
 4a4:	000000ec 	andeq	r0, r0, ip, ror #1
        ser_inf(Get_Record_Index, "%d", &desiredRecordIndex);
 4a8:	00000000 	andeq	r0, r0, r0
 4ac:	00000002 	andeq	r0, r0, r2
        char desiredRecordIndex = -1;
 4b0:	00000000 	andeq	r0, r0, r0
        ser_inf(Get_Record_Index, "%d", &desiredRecordIndex);
 4b4:	00000004 	andeq	r0, r0, r4
        messagePtr->recordIndex = desiredRecordIndex;
 4b8:	00000000 	andeq	r0, r0, r0
 4bc:	00000014 	andeq	r0, r0, r4, lsl r0
 4c0:	00000000 	andeq	r0, r0, r0
        proceed Transmit_Message;
 4c4:	0000001a 	andeq	r0, r0, sl, lsl r0
	...
        messagePtr -> senderGroupId = groupId;
 4d0:	0000001c 	andeq	r0, r0, ip, lsl r0
        messagePtr -> messageType = currentProtocol;
 4d4:	698a0002 	stmibvs	sl, {r1}
 4d8:	00040000 	andeq	r0, r4, r0
        messagePtr -> requestNumber = randomNumber();
 4dc:	00000000 	andeq	r0, r0, r0
        messagePtr -> senderId = nodeId;
 4e0:	00001f34 	andeq	r1, r0, r4, lsr pc
 4e4:	00000078 	andeq	r0, r0, r8, ror r0
	...
        messagePtr -> destinationId = receiverId;
 4f0:	0000001c 	andeq	r0, r0, ip, lsl r0
        call transmitter(messagePtr, Menu_Header);
 4f4:	6da00002 	stcvs	0, cr0, [r0, #8]!
 4f8:	00040000 	andeq	r0, r4, r0
 4fc:	00000000 	andeq	r0, r0, r0
 500:	00001fac 	andeq	r1, r0, ip, lsr #31
 504:	00000054 	andeq	r0, r0, r4, asr r0
	...
 510:	0000001c 	andeq	r0, r0, ip, lsl r0
 514:	71f00002 	mvnsvc	r0, r2
 518:	00040000 	andeq	r0, r4, r0
 51c:	00000000 	andeq	r0, r0, r0
 520:	00002000 	andeq	r2, r0, r0
 524:	00000060 	andeq	r0, r0, r0, rrx
	...
 530:	0000006c 	andeq	r0, r0, ip, rrx
 534:	76400002 	strbvc	r0, [r0], -r2
 538:	00040000 	andeq	r0, r4, r0
 53c:	00000000 	andeq	r0, r0, r0
 540:	00002060 	andeq	r2, r0, r0, rrx
 544:	00000020 	andeq	r0, r0, r0, lsr #32
 548:	00002080 	andeq	r2, r0, r0, lsl #1
 54c:	00000190 	muleq	r0, r0, r1
 550:	00002210 	andeq	r2, r0, r0, lsl r2
 554:	00000048 	andeq	r0, r0, r8, asr #32
 558:	00002258 	andeq	r2, r0, r8, asr r2
 55c:	00000024 	andeq	r0, r0, r4, lsr #32
 560:	0000227c 	andeq	r2, r0, ip, ror r2
 564:	0000005c 	andeq	r0, r0, ip, asr r0
 568:	000022d8 	ldrdeq	r2, [r0], -r8
static void devinit_uart (int devnum) {
 56c:	00000038 	andeq	r0, r0, r8, lsr r0
	adddevfunc (ioreq_uart_a, devnum);
 570:	00002310 	andeq	r2, r0, r0, lsl r3
 574:	00000180 	andeq	r0, r0, r0, lsl #3
void udelay (volatile word n) {
 578:	00002490 	muleq	r0, r0, r4
 57c:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	while (n) {
 580:	00002560 	andeq	r2, r0, r0, ror #10
 584:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
}
 588:	00002750 	andeq	r2, r0, r0, asr r7
	while (n--);
 58c:	00000070 	andeq	r0, r0, r0, ror r0
 590:	000027c0 	andeq	r2, r0, r0, asr #15
 594:	00000174 	andeq	r0, r0, r4, ror r1
	...
		n--;
 5a0:	00000044 	andeq	r0, r0, r4, asr #32
void mdelay (volatile word n) {
 5a4:	9ab80002 	bls	fee005b4 <_estack+0xdedfb5b4>
 5a8:	00040000 	andeq	r0, r4, r0
	while (n) {
 5ac:	00000000 	andeq	r0, r0, r0
 5b0:	00002934 	andeq	r2, r0, r4, lsr r9
}
 5b4:	00000024 	andeq	r0, r0, r4, lsr #32
		udelay (999);
 5b8:	00002958 	andeq	r2, r0, r8, asr r9
 5bc:	00000024 	andeq	r0, r0, r4, lsr #32
		n--;
 5c0:	0000297c 	andeq	r2, r0, ip, ror r9
 5c4:	00000008 	andeq	r0, r0, r8
 5c8:	00002984 	andeq	r2, r0, r4, lsl #19
 5cc:	00000004 	andeq	r0, r0, r4
void __pi_ondomain (lword d) {
 5d0:	00002988 	andeq	r2, r0, r8, lsl #19
 5d4:	00000004 	andeq	r0, r0, r4
		if (__pi_systat.effpdm > 1)
 5d8:	0000298c 	andeq	r2, r0, ip, lsl #19
 5dc:	00000048 	andeq	r0, r0, r8, asr #32
	...
	PRCMPowerDomainOn (d);
 5e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 5ec:	a1ed0002 	mvnge	r0, r2
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
 5f0:	00040000 	andeq	r0, r4, r0
 5f4:	00000000 	andeq	r0, r0, r0
 5f8:	000029d4 	ldrdeq	r2, [r0], -r4
	__pi_systat.ondmns |= d;
 5fc:	00000070 	andeq	r0, r0, r0, ror r0
	...
}
 608:	0000001c 	andeq	r0, r0, ip, lsl r0
void __pi_offdomain (lword d) {
 60c:	a61e0002 	ldrge	r0, [lr], -r2
 610:	00040000 	andeq	r0, r4, r0
	PRCMPowerDomainOff (d);
 614:	00000000 	andeq	r0, r0, r0
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
 618:	00002a44 	andeq	r2, r0, r4, asr #20
 61c:	0000011c 	andeq	r0, r0, ip, lsl r1
	...
	if (d & PRCM_DOMAIN_RFCORE) {
 628:	0000002c 	andeq	r0, r0, ip, lsr #32
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
 62c:	aa620002 	bge	188063c <__ccfg+0x1860694>
 630:	00040000 	andeq	r0, r4, r0
			__pi_systat.effpdm = __pi_systat.reqpdm;
 634:	00000000 	andeq	r0, r0, r0
 638:	00002b60 	andeq	r2, r0, r0, ror #22
	__pi_systat.ondmns &= ~d;
 63c:	00000020 	andeq	r0, r0, r0, lsr #32
 640:	00002b80 	andeq	r2, r0, r0, lsl #23
}
 644:	00000230 	andeq	r0, r0, r0, lsr r2
 648:	00002db0 			; <UNDEFINED> instruction: 0x00002db0
void __pi_syserror (word ec, const char *m) {
 64c:	00000050 	andeq	r0, r0, r0, asr r0
	...
  __ASM volatile ("cpsid i" : : : "memory");
 658:	0000001c 	andeq	r0, r0, ip, lsl r0
 65c:	b0560002 	subslt	r0, r6, r2
 660:	00040000 	andeq	r0, r4, r0
 664:	00000000 	andeq	r0, r0, r0
		all_leds_blink;
 668:	00002e00 	andeq	r2, r0, r0, lsl #28
 66c:	00000390 	muleq	r0, r0, r3
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
 678:	00000014 	andeq	r0, r0, r4, lsl r0
 67c:	b5e90002 	strblt	r0, [r9, #2]!
 680:	00040000 	andeq	r0, r4, r0
	...
	while (1) {
 690:	00000024 	andeq	r0, r0, r4, lsr #32
 694:	d5d70002 	ldrble	r0, [r7, #2]
 698:	00040000 	andeq	r0, r4, r0
 69c:	00000000 	andeq	r0, r0, r0
void tci_run_delay_timer () {
 6a0:	00003190 	muleq	r0, r0, r1
	setdel = __pi_mintk - __pi_old;
 6a4:	00000028 	andeq	r0, r0, r8, lsr #32
 6a8:	00000000 	andeq	r0, r0, r0
 6ac:	0000002c 	andeq	r0, r0, ip, lsr #32
	...
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
 6b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6bc:	d7650002 	strble	r0, [r5, -r2]!
 6c0:	00040000 	andeq	r0, r4, r0
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
 6c4:	00000000 	andeq	r0, r0, r0
	sti_tim;
 6c8:	000031b8 			; <UNDEFINED> instruction: 0x000031b8
}
 6cc:	00000030 	andeq	r0, r0, r0, lsr r0
	...
 6d8:	00000024 	andeq	r0, r0, r4, lsr #32
 6dc:	d83e0002 	ldmdale	lr!, {r1}
	cli_aux;
 6e0:	00040000 	andeq	r0, r4, r0
 6e4:	00000000 	andeq	r0, r0, r0
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
 6e8:	000031e8 	andeq	r3, r0, r8, ror #3
 6ec:	00000020 	andeq	r0, r0, r0, lsr #32
 6f0:	00003208 	andeq	r3, r0, r8, lsl #4
 6f4:	00000018 	andeq	r0, r0, r8, lsl r0
	...
}
 700:	0000003c 	andeq	r0, r0, ip, lsr r0
 704:	d9850002 	stmible	r5, {r1}
void AONRTCIntHandler () {
 708:	00040000 	andeq	r0, r4, r0
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
 70c:	00000000 	andeq	r0, r0, r0
 710:	00003220 	andeq	r3, r0, r0, lsr #4
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
 714:	00000008 	andeq	r0, r0, r8
		if (__pi_utims [0] == 0)
 718:	00000000 	andeq	r0, r0, r0
 71c:	00000006 	andeq	r0, r0, r6
		if (*(__pi_utims [0])) {
 720:	00003228 	andeq	r3, r0, r8, lsr #4
 724:	00000008 	andeq	r0, r0, r8
			(*(__pi_utims [0]))--;
 728:	00000000 	andeq	r0, r0, r0
		if (__pi_utims [1] == 0)
 72c:	00000006 	andeq	r0, r0, r6
		if (*(__pi_utims [1])) {
 730:	00000000 	andeq	r0, r0, r0
			aux_timer_inactive = 0;
 734:	00000008 	andeq	r0, r0, r8
	...
		if (*(__pi_utims [2])) {
 740:	00000064 	andeq	r0, r0, r4, rrx
			(*(__pi_utims [2]))--;
 744:	dabf0002 	ble	fefc0754 <_estack+0xdefbb754>
		if (__pi_utims [3] != 0) {
 748:	00040000 	andeq	r0, r4, r0
			if (*(__pi_utims [3])) {
 74c:	00000000 	andeq	r0, r0, r0
				aux_timer_inactive = 0;
 750:	00003230 	andeq	r3, r0, r0, lsr r2
				(*(__pi_utims [3]))--;
 754:	0000005c 	andeq	r0, r0, ip, asr r0
	if (__pi_systat.ledsts) {
 758:	0000328c 	andeq	r3, r0, ip, lsl #5
 75c:	0000002c 	andeq	r0, r0, ip, lsr #32
		if (__pi_systat.ledblc++ == 0) {
 760:	00000000 	andeq	r0, r0, r0
 764:	00000090 	muleq	r0, r0, r0
			if (__pi_systat.ledblk) {
 768:	000032b8 			; <UNDEFINED> instruction: 0x000032b8
 76c:	00000018 	andeq	r0, r0, r8, lsl r0
 770:	000032d0 	ldrdeq	r3, [r0], -r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
 774:	00000060 	andeq	r0, r0, r0, rrx
 778:	00003330 	andeq	r3, r0, r0, lsr r3
				if (__pi_systat.ledsts & 0x2)
 77c:	00000034 	andeq	r0, r0, r4, lsr r0
 780:	00000000 	andeq	r0, r0, r0
 784:	00000038 	andeq	r0, r0, r8, lsr r0
				if (__pi_systat.ledsts & 0x4)
 788:	00000000 	andeq	r0, r0, r0
				__pi_systat.ledblk = 0;
 78c:	0000000c 	andeq	r0, r0, ip
 790:	00000000 	andeq	r0, r0, r0
			if (__pi_systat.fstblk)
 794:	00000034 	andeq	r0, r0, r4, lsr r0
 798:	00000000 	andeq	r0, r0, r0
				__pi_systat.ledblc = 200;
 79c:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
		__pi_new += setdel;
 7a8:	00000054 	andeq	r0, r0, r4, asr r0
 7ac:	e3820002 	orr	r0, r2, #2
		setdel = 0;
 7b0:	00040000 	andeq	r0, r4, r0
	...
		RISE_N_SHINE;
 7bc:	00000014 	andeq	r0, r0, r4, lsl r0
 7c0:	00003364 	andeq	r3, r0, r4, ror #6
		aux_timer_inactive = 1;
 7c4:	00000028 	andeq	r0, r0, r8, lsr #32
 7c8:	0000338c 	andeq	r3, r0, ip, lsl #7
				if (__pi_systat.ledsts & 0x1)
 7cc:	0000004c 	andeq	r0, r0, ip, asr #32
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
 7d0:	000033d8 	ldrdeq	r3, [r0], -r8
 7d4:	00000150 	andeq	r0, r0, r0, asr r1
				if (__pi_systat.ledsts & 0x2)
 7d8:	00003528 	andeq	r3, r0, r8, lsr #10
 7dc:	00000118 	andeq	r0, r0, r8, lsl r1
 7e0:	00003640 	andeq	r3, r0, r0, asr #12
				if (__pi_systat.ledsts & 0x8)
 7e4:	00000020 	andeq	r0, r0, r0, lsr #32
				__pi_systat.ledblk = 1;
 7e8:	00000000 	andeq	r0, r0, r0
 7ec:	00000060 	andeq	r0, r0, r0, rrx
		if (aux_timer_inactive) {
 7f0:	00003660 	andeq	r3, r0, r0, ror #12
			cli_aux;
 7f4:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
 800:	00000024 	andeq	r0, r0, r4, lsr #32
 804:	ee3a0002 	cdp	0, 3, cr0, cr10, cr2, {0}
 808:	00040000 	andeq	r0, r4, r0
 80c:	00000000 	andeq	r0, r0, r0
 810:	0000367c 	andeq	r3, r0, ip, ror r6
 814:	000000d4 	ldrdeq	r0, [r0], -r4
 818:	00003750 	andeq	r3, r0, r0, asr r7
word tci_update_delay_ticks (Boolean force) {
 81c:	000000a4 	andeq	r0, r0, r4, lsr #1
	...
	if (setdel) {
 828:	000000b4 	strheq	r0, [r0], -r4
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
 82c:	f0450002 			; <UNDEFINED> instruction: 0xf0450002
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
 830:	00040000 	andeq	r0, r4, r0
 834:	00000000 	andeq	r0, r0, r0
 838:	000037f4 	strdeq	r3, [r0], -r4
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
 83c:	0000007c 	andeq	r0, r0, ip, ror r0
				AON_RTC_O_CH0CMP)) - gettav ());
 840:	00003870 	andeq	r3, r0, r0, ror r8
	return NO;
 844:	000000ac 	andeq	r0, r0, ip, lsr #1
			setdel = 0;
 848:	0000391c 	andeq	r3, r0, ip, lsl r9
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
 84c:	0000005c 	andeq	r0, r0, ip, asr r0
 850:	00003978 	andeq	r3, r0, r8, ror r9
}
 854:	00000018 	andeq	r0, r0, r8, lsl r0
		sti_tim;
 858:	00000000 	andeq	r0, r0, r0
		return YES;
 85c:	00000010 	andeq	r0, r0, r0, lsl r0
 860:	00003990 	muleq	r0, r0, r9
 864:	00000010 	andeq	r0, r0, r0, lsl r0
 868:	000039a0 	andeq	r3, r0, r0, lsr #19
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
 86c:	00000014 	andeq	r0, r0, r4, lsl r0
	UARTDisable (UART0_BASE);
 870:	000039b4 			; <UNDEFINED> instruction: 0x000039b4
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
 874:	00000064 	andeq	r0, r0, r4, rrx
	UARTDisable (UART0_BASE);
 878:	00003a18 	andeq	r3, r0, r8, lsl sl
	UARTConfigSetExpClk (UART0_BASE,
 87c:	00000014 	andeq	r0, r0, r4, lsl r0
 880:	00003a2c 	andeq	r3, r0, ip, lsr #20
 884:	00000014 	andeq	r0, r0, r4, lsl r0
 888:	00003a40 	andeq	r3, r0, r0, asr #20
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
 88c:	00000014 	andeq	r0, r0, r4, lsl r0
 890:	00003a54 	andeq	r3, r0, r4, asr sl
 894:	00000028 	andeq	r0, r0, r8, lsr #32
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
 898:	00003a7c 	andeq	r3, r0, ip, ror sl
 89c:	00000010 	andeq	r0, r0, r0, lsl r0
 8a0:	00003a8c 	andeq	r3, r0, ip, lsl #21
	urates [0] = rate;
 8a4:	0000002c 	andeq	r0, r0, ip, lsr #32
}
 8a8:	00003ab8 			; <UNDEFINED> instruction: 0x00003ab8
 8ac:	00000014 	andeq	r0, r0, r4, lsl r0
 8b0:	00003acc 	andeq	r3, r0, ip, asr #21
 8b4:	00000014 	andeq	r0, r0, r4, lsl r0
 8b8:	00003ae0 	andeq	r3, r0, r0, ror #21
 8bc:	00000110 	andeq	r0, r0, r0, lsl r1
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
 8c0:	00003bf0 	strdeq	r3, [r0], -r0
 8c4:	00000064 	andeq	r0, r0, r4, rrx
 8c8:	00003c54 	andeq	r3, r0, r4, asr ip
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
 8cc:	00000028 	andeq	r0, r0, r8, lsr #32
 8d0:	00003c7c 	andeq	r3, r0, ip, ror ip
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
 8d4:	00000150 	andeq	r0, r0, r0, asr r1
	...
	__pi_uart_setrate (urates [0], __pi_uart);
 8e0:	0000003c 	andeq	r0, r0, ip, lsr r0
 8e4:	fb600002 	blx	18008f6 <__ccfg+0x17e094e>
 8e8:	00040000 	andeq	r0, r4, r0
	...
 8f4:	000000f4 	strdeq	r0, [r0], -r4
	switch (operation) {
 8f8:	00003dcc 	andeq	r3, r0, ip, asr #27
static int ioreq_uart_a (int operation, char *buf, int len) {
 8fc:	00000220 	andeq	r0, r0, r0, lsr #4
 900:	00003fec 	andeq	r3, r0, ip, ror #31
 904:	00000060 	andeq	r0, r0, r0, rrx
 908:	00000000 	andeq	r0, r0, r0
 90c:	00000078 	andeq	r0, r0, r8, ror r0
				*buf++ = uart_a_read;
 910:	0000404c 	andeq	r4, r0, ip, asr #32
 914:	00000018 	andeq	r0, r0, r8, lsl r0
	...
			while (len && uart_a_char_available) {
 920:	00000044 	andeq	r0, r0, r4, asr #32
			if (len != operation) {
 924:	04870002 	streq	r0, [r7], #2
}
 928:	00040001 	andeq	r0, r4, r1
	...
			if (uart_a_char_available) {
 934:	00000010 	andeq	r0, r0, r0, lsl r0
				*buf++ = uart_a_read;
 938:	00000000 	andeq	r0, r0, r0
			uart_a_disable_int;
 93c:	00000018 	andeq	r0, r0, r8, lsl r0
 940:	00004064 	andeq	r4, r0, r4, rrx
			if (uart_a_char_available) {
 944:	0000004c 	andeq	r0, r0, ip, asr #32
 948:	00000000 	andeq	r0, r0, r0
				uart_a_enable_int;
 94c:	00000030 	andeq	r0, r0, r0, lsr r0
 950:	000040b0 	strheq	r4, [r0], -r0
				goto Redo_rx;
 954:	0000006c 	andeq	r0, r0, ip, rrx
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
 958:	0000411c 	andeq	r4, r0, ip, lsl r1
 95c:	00000016 	andeq	r0, r0, r6, lsl r0
	...
				uart_a_write (*buf);
 968:	00000044 	andeq	r0, r0, r4, asr #32
 96c:	08570002 	ldmdaeq	r7, {r1}^
			while (len && uart_a_room_in_tx) {
 970:	00040001 	andeq	r0, r4, r1
 974:	00000000 	andeq	r0, r0, r0
 978:	00004134 	andeq	r4, r0, r4, lsr r1
			if (len != operation) {
 97c:	00000028 	andeq	r0, r0, r8, lsr #32
			uart_a_disable_int;
 980:	0000415c 	andeq	r4, r0, ip, asr r1
 984:	00000008 	andeq	r0, r0, r8
			if (uart_a_room_in_tx) {
 988:	00000000 	andeq	r0, r0, r0
 98c:	00000022 	andeq	r0, r0, r2, lsr #32
				uart_a_enable_int;
 990:	00000000 	andeq	r0, r0, r0
 994:	0000002e 	andeq	r0, r0, lr, lsr #32
				*buf++ = uart_a_read;
 998:	00000000 	andeq	r0, r0, r0
			if (uart_a_room_in_tx) {
 99c:	00000034 	andeq	r0, r0, r4, lsr r0
				uart_a_write (*buf);
 9a0:	00000000 	andeq	r0, r0, r0
 9a4:	00000040 	andeq	r0, r0, r0, asr #32
	...
			uart_a_enable_int;
 9b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 9b4:	0e020002 	cdpeq	0, 0, cr0, cr2, cr2, {0}
 9b8:	00040001 	andeq	r0, r4, r1
			return 0;
 9bc:	00000000 	andeq	r0, r0, r0
			if (len == UART_CNTRL_SETRATE) {
 9c0:	00004164 	andeq	r4, r0, r4, ror #2
				if (__pi_uart_setrate (*((word*)buf),
 9c4:	000000aa 	andeq	r0, r0, sl, lsr #1
	...
				syserror (EREQPAR, "uar");
 9d0:	0000001c 	andeq	r0, r0, ip, lsl r0
			syserror (ENOOPER, "uai");
 9d4:	1d370002 	ldcne	0, cr0, [r7, #-8]!
			if (len == UART_CNTRL_GETRATE) {
 9d8:	00040001 	andeq	r0, r4, r1
				return 1;
 9dc:	00000000 	andeq	r0, r0, r0
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
 9e0:	00004210 	andeq	r4, r0, r0, lsl r2
			syserror (ENOOPER, "uai");
 9e4:	0000004c 	andeq	r0, r0, ip, asr #32
	...
 9f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 9f4:	26b10002 	ldrtcs	r0, [r1], r2
 9f8:	00040001 	andeq	r0, r4, r1
 9fc:	00000000 	andeq	r0, r0, r0
 a00:	0000425c 	andeq	r4, r0, ip, asr r2
 a04:	00000038 	andeq	r0, r0, r8, lsr r0
	...
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
 a10:	0000001c 	andeq	r0, r0, ip, lsl r0
 a14:	30aa0002 	adccc	r0, sl, r2
 a18:	00040001 	andeq	r0, r4, r1
 a1c:	00000000 	andeq	r0, r0, r0
 a20:	00004294 	muleq	r0, r4, r2
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
 a24:	0000002c 	andeq	r0, r0, ip, lsr #32
	...
		RISE_N_SHINE;
 a30:	00000014 	andeq	r0, r0, r4, lsl r0
		i_trigger (devevent (UART_A, READ));
 a34:	3ae20002 	bcc	ff880a44 <_estack+0xdf87ba44>
 a38:	00040001 	andeq	r0, r4, r1
	...
 a48:	0000001c 	andeq	r0, r0, ip, lsl r0
 a4c:	440c0002 	strmi	r0, [ip], #-2
 a50:	00040001 	andeq	r0, r4, r1
	...
 a5c:	000000b8 	strheq	r0, [r0], -r8
	...
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
 a68:	0000001c 	andeq	r0, r0, ip, lsl r0
 a6c:	4ece0002 	cdpmi	0, 12, cr0, cr14, cr2, {0}
		i_trigger (devevent (UART_A, WRITE));
 a70:	00040001 	andeq	r0, r4, r1
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
 a74:	00000000 	andeq	r0, r0, r0
 a78:	000042c0 	andeq	r4, r0, r0, asr #5
		RISE_N_SHINE;
 a7c:	00000054 	andeq	r0, r0, r4, asr r0
	...
		i_trigger (devevent (UART_A, WRITE));
 a88:	0000001c 	andeq	r0, r0, ip, lsl r0
 a8c:	59640002 	stmdbpl	r4!, {r1}^
 a90:	00040001 	andeq	r0, r4, r1
 a94:	00000000 	andeq	r0, r0, r0
 a98:	00004314 	andeq	r4, r0, r4, lsl r3
 a9c:	00000010 	andeq	r0, r0, r0, lsl r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
       0:	000001cc 	andeq	r0, r0, ip, asr #3
       4:	0000025e 	andeq	r0, r0, lr, asr r2
       8:	00000262 	andeq	r0, r0, r2, ror #4
       c:	00000268 	andeq	r0, r0, r8, ror #4
}
      10:	0000026c 	andeq	r0, r0, ip, ror #4
      14:	00000298 	muleq	r0, r8, r2
	...
      20:	000002cc 	andeq	r0, r0, ip, asr #5
      24:	00000502 	andeq	r0, r0, r2, lsl #10
      28:	00000506 	andeq	r0, r0, r6, lsl #10
      2c:	0000050a 	andeq	r0, r0, sl, lsl #10
	...
      38:	00000348 	andeq	r0, r0, r8, asr #6
      3c:	0000038a 	andeq	r0, r0, sl, lsl #7
			i = k;
      40:	000003de 	ldrdeq	r0, [r0], -lr
				j->Next = k;
      44:	00000406 	andeq	r0, r0, r6, lsl #8
	...
}
      50:	000000c8 	andeq	r0, r0, r8, asr #1
      54:	00000136 	andeq	r0, r0, r6, lsr r1
		release;
      58:	00000138 	andeq	r0, r0, r8, lsr r1
      5c:	0000014c 	andeq	r0, r0, ip, asr #2
		b->length - b->u.pointers.head - b->u.pointers.tail;
      60:	0000014c 	andeq	r0, r0, ip, asr #2
	b->u.pointers.tail =
      64:	000001a4 	andeq	r0, r0, r4, lsr #3
}
      68:	000001a4 	andeq	r0, r0, r4, lsr #3
		return NULL;
      6c:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
      70:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
      74:	00000298 	muleq	r0, r8, r2
      78:	00000001 	andeq	r0, r0, r1
      7c:	00000001 	andeq	r0, r0, r1
      80:	00000001 	andeq	r0, r0, r1
      84:	00000001 	andeq	r0, r0, r1
      88:	00000298 	muleq	r0, r8, r2
      8c:	0000056c 	andeq	r0, r0, ip, ror #10
	...
      98:	0000065a 	andeq	r0, r0, sl, asr r6
      9c:	00000660 	andeq	r0, r0, r0, ror #12
      a0:	00000660 	andeq	r0, r0, r0, ror #12
      a4:	00000660 	andeq	r0, r0, r0, ror #12
      a8:	00000664 	andeq	r0, r0, r4, ror #12
      ac:	00000666 	andeq	r0, r0, r6, ror #12
	...
      b8:	00000660 	andeq	r0, r0, r0, ror #12
      bc:	00000662 	andeq	r0, r0, r2, ror #12
      c0:	00000666 	andeq	r0, r0, r6, ror #12
      c4:	00000668 	andeq	r0, r0, r8, ror #12
	...
char * assembleMessage(message * messagePtr) {
      d0:	00000678 	andeq	r0, r0, r8, ror r6
      d4:	0000067a 	andeq	r0, r0, sl, ror r6
      d8:	0000067c 	andeq	r0, r0, ip, ror r6
        p = (char*)umalloc(6);
      dc:	0000067e 	andeq	r0, r0, lr, ror r6
	...
    p[0] = messagePtr->senderGroupId;
      e8:	000006b2 			; <UNDEFINED> instruction: 0x000006b2
    p[2] = messagePtr->messageType;
      ec:	000006b6 			; <UNDEFINED> instruction: 0x000006b6
    p[3] = messagePtr->requestNumber;
      f0:	000006b8 			; <UNDEFINED> instruction: 0x000006b8
    p[4] = messagePtr->senderId;
      f4:	000006ba 			; <UNDEFINED> instruction: 0x000006ba
    p[5] = messagePtr->destinationId;
      f8:	000006bc 			; <UNDEFINED> instruction: 0x000006bc
        p = (char*)umalloc(8);
      fc:	000006c4 	andeq	r0, r0, r4, asr #13
	...
        p[7] = 0x00;
     108:	000006e8 	andeq	r0, r0, r8, ror #13
        break;
     10c:	000006ee 	andeq	r0, r0, lr, ror #13
        p = (char*)umalloc(26);
     110:	000006f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
        strcpy(p + 6, messagePtr->messageRecord);
     114:	000006f6 	strdeq	r0, [r0], -r6
	...
        p = (char*)umalloc(28);
     120:	00000718 	andeq	r0, r0, r8, lsl r7
     124:	0000079e 	muleq	r0, lr, r7
     128:	000007c4 	andeq	r0, r0, r4, asr #15
        p[7] = 0x00;
     12c:	0000081c 	andeq	r0, r0, ip, lsl r8
	...
    switch(messageType) 
     138:	0000088c 	andeq	r0, r0, ip, lsl #17
int getPacketSize(char messageType) {
     13c:	0000088e 	andeq	r0, r0, lr, lsl #17
     140:	00000890 	muleq	r0, r0, r8
}
     144:	000008a4 	andeq	r0, r0, r4, lsr #17
	...
fsm transmitter (message * messagePtr) {
     150:	000008c0 	andeq	r0, r0, r0, asr #17
     154:	000008c2 	andeq	r0, r0, r2, asr #17
}
     158:	000008c4 	andeq	r0, r0, r4, asr #17
     15c:	000008cc 	andeq	r0, r0, ip, asr #17
	...
        char * assembledMessage = assembleMessage(messagePtr);
     168:	00000a08 	andeq	r0, r0, r8, lsl #20
     16c:	00000a0c 	andeq	r0, r0, ip, lsl #20
        spkt = tcv_wnp (Transmit_Message, sfd,  getPacketSize(messagePtr->messageType));
     170:	00000a0e 	andeq	r0, r0, lr, lsl #20
     174:	00000a10 	andeq	r0, r0, r0, lsl sl
     178:	00000a12 	andeq	r0, r0, r2, lsl sl
     17c:	00000a14 	andeq	r0, r0, r4, lsl sl
	...
        strcpy(p, assembledMessage);
     188:	00000a70 	andeq	r0, r0, r0, ror sl
        tcv_endp (spkt);
     18c:	00000a74 	andeq	r0, r0, r4, ror sl
     190:	00000a86 	andeq	r0, r0, r6, lsl #21
}
     194:	00000ab2 			; <UNDEFINED> instruction: 0x00000ab2
	...
        finish;
     1a0:	00000ac8 	andeq	r0, r0, r8, asr #21
char randomNumber() {
     1a4:	00000ac8 	andeq	r0, r0, r8, asr #21
   srand((unsigned) time(&t));
     1a8:	00000aca 	andeq	r0, r0, sl, asr #21
     1ac:	00000acc 	andeq	r0, r0, ip, asr #21
	...
}
     1b8:	00000acc 	andeq	r0, r0, ip, asr #21
fsm find {
     1bc:	00000ace 	andeq	r0, r0, lr, asr #21
     1c0:	00000ad0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     1c4:	00000ad2 	ldrdeq	r0, [r0], -r2
     1c8:	00000ad8 	ldrdeq	r0, [r0], -r8
        i = 0;
     1cc:	00000ade 	ldrdeq	r0, [r0], -lr
     1d0:	00000ae8 	andeq	r0, r0, r8, ror #21
        sendCount = 0;
     1d4:	00000aea 	andeq	r0, r0, sl, ror #21
        currentRequestNumber = randomNumber();
     1d8:	00000af6 	strdeq	r0, [r0], -r6
        messagePtr -> senderGroupId = groupId;
     1dc:	00000af8 	strdeq	r0, [r0], -r8
	...
     1e8:	00000b0c 	andeq	r0, r0, ip, lsl #22
        messagePtr -> requestNumber = currentRequestNumber;
     1ec:	00000b0c 	andeq	r0, r0, ip, lsl #22
     1f0:	00000b0e 	andeq	r0, r0, lr, lsl #22
        messagePtr -> senderId = nodeId;
     1f4:	00000b10 	andeq	r0, r0, r0, lsl fp
	...
        if(sendCount == 2) {
     200:	00000b12 	andeq	r0, r0, r2, lsl fp
     204:	00000b14 	andeq	r0, r0, r4, lsl fp
            proceed Display_Neighbours;
     208:	00000b16 	andeq	r0, r0, r6, lsl fp
        call transmitter(messagePtr, Wait);
     20c:	00000b18 	andeq	r0, r0, r8, lsl fp
     210:	00000b22 	andeq	r0, r0, r2, lsr #22
     214:	00000b26 	andeq	r0, r0, r6, lsr #22
     218:	00000b30 	andeq	r0, r0, r0, lsr fp
     21c:	00000b32 	andeq	r0, r0, r2, lsr fp
	...
        delay(3*1024, Send_Discovery_Request);
     228:	00000c16 	andeq	r0, r0, r6, lsl ip
     22c:	00000c18 	andeq	r0, r0, r8, lsl ip
     230:	00000c1a 	andeq	r0, r0, sl, lsl ip
        ser_outf(Display_Neighbours, "Neighbours:");
     234:	00000c1e 	andeq	r0, r0, lr, lsl ip
     238:	00000c2e 	andeq	r0, r0, lr, lsr #24
        if (neighbours[i] == 1) {
     23c:	00000c30 	andeq	r0, r0, r0, lsr ip
	...
            ser_outf(Display_Neighbour, " %d", i);
     248:	00000c18 	andeq	r0, r0, r8, lsl ip
     24c:	00000c1a 	andeq	r0, r0, sl, lsl ip
        i++;
     250:	00000c1e 	andeq	r0, r0, lr, lsl ip
     254:	00000c2e 	andeq	r0, r0, lr, lsr #24
            proceed Display_Neighbour;
     258:	00000c30 	andeq	r0, r0, r0, lsr ip
     25c:	00000c6a 	andeq	r0, r0, sl, ror #24
	...
}
     268:	00000c22 	andeq	r0, r0, r2, lsr #24
     26c:	00000c26 	andeq	r0, r0, r6, lsr #24
     270:	00000c4e 	andeq	r0, r0, lr, asr #24
     274:	00000c56 	andeq	r0, r0, r6, asr ip
	...
     280:	00000c26 	andeq	r0, r0, r6, lsr #24
     284:	00000c2a 	andeq	r0, r0, sl, lsr #24
     288:	00000c62 	andeq	r0, r0, r2, ror #24
     28c:	00000c66 	andeq	r0, r0, r6, ror #24
	...
fsm root {
     298:	00000c2a 	andeq	r0, r0, sl, lsr #24
     29c:	00000c2e 	andeq	r0, r0, lr, lsr #24
     2a0:	00000c5c 	andeq	r0, r0, ip, asr ip
     2a4:	00000c62 	andeq	r0, r0, r2, ror #24
	...
     2b0:	00000c6a 	andeq	r0, r0, sl, ror #24
     2b4:	00000c6c 	andeq	r0, r0, ip, ror #24
     2b8:	00000c6e 	andeq	r0, r0, lr, ror #24
     2bc:	00000c70 	andeq	r0, r0, r0, ror ip
     2c0:	00000c72 	andeq	r0, r0, r2, ror ip
     2c4:	00000c74 	andeq	r0, r0, r4, ror ip
	...
        nodeId = 1;
     2d0:	00000c6c 	andeq	r0, r0, ip, ror #24
     2d4:	00000c6e 	andeq	r0, r0, lr, ror #24
        groupId = 1;
     2d8:	00000c74 	andeq	r0, r0, r4, ror ip
     2dc:	00000c76 	andeq	r0, r0, r6, ror ip
	...
        phys_cc1350(0, MAX_PACKET_LENGTH);
     2e8:	00000c86 	andeq	r0, r0, r6, lsl #25
     2ec:	00000c88 	andeq	r0, r0, r8, lsl #25
        tcv_plug(0, &plug_null);
     2f0:	00000c8a 	andeq	r0, r0, sl, lsl #25
     2f4:	00000c8c 	andeq	r0, r0, ip, lsl #25
	...
        sfd = tcv_open(WNONE, 0, 0);
     300:	00000c9e 	muleq	r0, lr, ip
		tcv_control(sfd, PHYSOPT_ON, NULL);
     304:	00000ca0 	andeq	r0, r0, r0, lsr #25
        sfd = tcv_open(WNONE, 0, 0);
     308:	00000ca2 	andeq	r0, r0, r2, lsr #25
		tcv_control(sfd, PHYSOPT_ON, NULL);
     30c:	00000ca4 	andeq	r0, r0, r4, lsr #25
	...
			diag("Cannot open tcv interface");
     318:	00000ce6 	andeq	r0, r0, r6, ror #25
			halt();
     31c:	00000ce6 	andeq	r0, r0, r6, ror #25
        currentProtocol = IDLE;
     320:	00000cea 	andeq	r0, r0, sl, ror #25
     324:	00000cec 	andeq	r0, r0, ip, ror #25
	...
        ser_outf(Menu_Header, "\r\nGroup %d Device #%d (%d/%d records)\r\n", groupId, nodeId, recordCount, MAX_RECORDS);
     330:	00000d1c 	andeq	r0, r0, ip, lsl sp
     334:	00000d1e 	andeq	r0, r0, lr, lsl sp
     338:	00000d20 	andeq	r0, r0, r0, lsr #26
     33c:	00000d28 	andeq	r0, r0, r8, lsr #26
	...
        ser_inf(Get_Choice, "%c", &choice);
     348:	00000dc8 	andeq	r0, r0, r8, asr #27
     34c:	00000dc8 	andeq	r0, r0, r8, asr #27
     350:	00000dce 	andeq	r0, r0, lr, asr #27
        switch (choice)
     354:	00000dd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     358:	00000dd2 	ldrdeq	r0, [r0], -r2
     35c:	00000dd6 	ldrdeq	r0, [r0], -r6
	...
     368:	00000de2 	andeq	r0, r0, r2, ror #27
     36c:	00000de4 	andeq	r0, r0, r4, ror #27
     370:	00000dfa 	strdeq	r0, [r0], -sl
     374:	00000dfc 	strdeq	r0, [r0], -ip
     378:	00000e0e 	andeq	r0, r0, lr, lsl #28
     37c:	00000e2a 	andeq	r0, r0, sl, lsr #28
     380:	00000e4e 	andeq	r0, r0, lr, asr #28
        proceed Menu_Header;
     384:	00000fa8 	andeq	r0, r0, r8, lsr #31
	...
        ser_outf(Set_Group_ID, "New Group ID: ");
     390:	00000de2 	andeq	r0, r0, r2, ror #27
        ser_inf(Get_Group_ID, "%d", &groupId);
     394:	00000de4 	andeq	r0, r0, r4, ror #27
     398:	00000e82 	andeq	r0, r0, r2, lsl #29
        proceed Menu_Header;
     39c:	00000e86 	andeq	r0, r0, r6, lsl #29
	...
        ser_outf(Set_Node_ID, "New node ID (1-25):");
     3a8:	00000e86 	andeq	r0, r0, r6, lsl #29
        ser_inf(Get_Node_ID, "%d", &nodeId);
     3ac:	00000e86 	andeq	r0, r0, r6, lsl #29
     3b0:	00000e8a 	andeq	r0, r0, sl, lsl #29
     3b4:	00000e8e 	andeq	r0, r0, lr, lsl #29
    if (node < 1 || node > 25) {
     3b8:	00000e92 	muleq	r0, r2, lr
     3bc:	00000e94 	muleq	r0, r4, lr
	...
        proceed Menu_Header;
     3c8:	00000e86 	andeq	r0, r0, r6, lsl #29
        call find(Menu_Header);
     3cc:	00000e8a 	andeq	r0, r0, sl, lsl #29
     3d0:	00000ea0 	andeq	r0, r0, r0, lsr #29
     3d4:	00000ea2 	andeq	r0, r0, r2, lsr #29
     3d8:	00000ea6 	andeq	r0, r0, r6, lsr #29
     3dc:	00000eaa 	andeq	r0, r0, sl, lsr #29
	...
            proceed Set_Node_ID;
     3e8:	00000e8e 	andeq	r0, r0, lr, lsl #29
            proceed Find_Neighbours;
     3ec:	00000e92 	muleq	r0, r2, lr
            proceed Create_Record;
     3f0:	00000e94 	muleq	r0, r4, lr
            proceed Delete_Record;
     3f4:	00000e96 	muleq	r0, r6, lr
            proceed Retrieve_Record;
     3f8:	00000e9a 	muleq	r0, sl, lr
            diag("Reset Local Storage");
     3fc:	00000e9e 	muleq	r0, lr, lr
	...
        currentProtocol = CREATE_RECORD;
     408:	00000ea2 	andeq	r0, r0, r2, lsr #29
        ser_outf(Create_Record, "Receiver node ID (1-25):");
     40c:	00000ea6 	andeq	r0, r0, r6, lsr #29
     410:	00000ec0 	andeq	r0, r0, r0, asr #29
        ser_inf(Get_Receiver_Node, "%d", &receiverId);
     414:	00000ec4 	andeq	r0, r0, r4, asr #29
     418:	00000ec6 	andeq	r0, r0, r6, asr #29
     41c:	00000ece 	andeq	r0, r0, lr, asr #29
	...
            proceed Create_Record;
     428:	00000eb8 			; <UNDEFINED> instruction: 0x00000eb8
     42c:	00000eba 			; <UNDEFINED> instruction: 0x00000eba
        ser_in(Get_Message, messagePtr->messageRecord, RECORD_LENGTH);
     430:	00000ebc 			; <UNDEFINED> instruction: 0x00000ebc
     434:	00000ec0 	andeq	r0, r0, r0, asr #29
	...
        if(strlen(messagePtr->messageRecord) >= RECORD_LENGTH) {
     440:	00000efc 	strdeq	r0, [r0], -ip
     444:	00000f00 	andeq	r0, r0, r0, lsl #30
            messagePtr->messageRecord[RECORD_LENGTH - 1] = '/0';
     448:	00000f02 	andeq	r0, r0, r2, lsl #30
        proceed Transmit_Message;
     44c:	00000f0a 	andeq	r0, r0, sl, lsl #30
	...
        currentProtocol = DELETE_RECORD;
     458:	00000f00 	andeq	r0, r0, r0, lsl #30
        ser_outf(Retrieve_Record, "Delete Record from Neighbour:\n\r");
     45c:	00000f02 	andeq	r0, r0, r2, lsl #30
        currentProtocol = DELETE_RECORD;
     460:	00000f0e 	andeq	r0, r0, lr, lsl #30
        ser_outf(Retrieve_Record, "Delete Record from Neighbour:\n\r");
     464:	00000f10 	andeq	r0, r0, r0, lsl pc
	...
        ser_outf(Retrieve_Record, "Retrieve Record from Neighbour:\n\r");
     470:	00000f2e 	andeq	r0, r0, lr, lsr #30
        currentProtocol = RETRIEVE_RECORD;
     474:	00000f30 	andeq	r0, r0, r0, lsr pc
        ser_outf(Retrieve_Record, "Retrieve Record from Neighbour:\n\r");
     478:	00000f32 	andeq	r0, r0, r2, lsr pc
        ser_outf(Prompt_Recieving_Node, "Neighbour node ID (1-25):");
     47c:	00000f34 	andeq	r0, r0, r4, lsr pc
	...
        ser_inf(Get_Receiving_Node, "%d", &receiverId);
     488:	00000f30 	andeq	r0, r0, r0, lsr pc
     48c:	00000f32 	andeq	r0, r0, r2, lsr pc
    if (node < 1 || node > 25) {
     490:	00000f34 	andeq	r0, r0, r4, lsr pc
     494:	00000f38 	andeq	r0, r0, r8, lsr pc
	...
        ser_outf(Prompt_Record_Index, "Record index:");
     4a0:	00000f8e 	andeq	r0, r0, lr, lsl #31
        char desiredRecordIndex = -1;
     4a4:	00000f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
        ser_inf(Get_Record_Index, "%d", &desiredRecordIndex);
     4a8:	00000f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
     4ac:	00000f92 	muleq	r0, r2, pc	; <UNPREDICTABLE>
	...
        messagePtr->recordIndex = desiredRecordIndex;
     4b8:	00000f96 	muleq	r0, r6, pc	; <UNPREDICTABLE>
     4bc:	00000f9a 	muleq	r0, sl, pc	; <UNPREDICTABLE>
     4c0:	00000f9c 	muleq	r0, ip, pc	; <UNPREDICTABLE>
        proceed Transmit_Message;
     4c4:	00000f9e 	muleq	r0, lr, pc	; <UNPREDICTABLE>
	...
        messagePtr -> senderGroupId = groupId;
     4d0:	00000001 	andeq	r0, r0, r1
        messagePtr -> messageType = currentProtocol;
     4d4:	00000001 	andeq	r0, r0, r1
     4d8:	00000001 	andeq	r0, r0, r1
        messagePtr -> requestNumber = randomNumber();
     4dc:	00000001 	andeq	r0, r0, r1
	...
        call transmitter(messagePtr, Menu_Header);
     4e8:	00001050 	andeq	r1, r0, r0, asr r0
        messagePtr -> destinationId = receiverId;
     4ec:	00001050 	andeq	r1, r0, r0, asr r0
     4f0:	00001054 	andeq	r1, r0, r4, asr r0
        call transmitter(messagePtr, Menu_Header);
     4f4:	00001060 	andeq	r1, r0, r0, rrx
	...
     500:	0000056c 	andeq	r0, r0, ip, ror #10
     504:	00000578 	andeq	r0, r0, r8, ror r5
     508:	00000578 	andeq	r0, r0, r8, ror r5
     50c:	000005a4 	andeq	r0, r0, r4, lsr #11
     510:	000005a4 	andeq	r0, r0, r4, lsr #11
     514:	000005ce 	andeq	r0, r0, lr, asr #11
     518:	000005d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     51c:	0000060c 	andeq	r0, r0, ip, lsl #12
     520:	0000060c 	andeq	r0, r0, ip, lsl #12
     524:	0000064c 	andeq	r0, r0, ip, asr #12
     528:	00000001 	andeq	r0, r0, r1
     52c:	00000001 	andeq	r0, r0, r1
     530:	0000064c 	andeq	r0, r0, ip, asr #12
     534:	000006a0 	andeq	r0, r0, r0, lsr #13
     538:	000006a0 	andeq	r0, r0, r0, lsr #13
     53c:	000006e0 	andeq	r0, r0, r0, ror #13
     540:	000006e0 	andeq	r0, r0, r0, ror #13
     544:	00000708 	andeq	r0, r0, r8, lsl #14
     548:	00000708 	andeq	r0, r0, r8, lsl #14
     54c:	0000081c 	andeq	r0, r0, ip, lsl r8
     550:	0000081c 	andeq	r0, r0, ip, lsl r8
     554:	0000086c 	andeq	r0, r0, ip, ror #16
     558:	0000086c 	andeq	r0, r0, ip, ror #16
     55c:	000008c0 	andeq	r0, r0, r0, asr #17
     560:	000008c0 	andeq	r0, r0, r0, asr #17
     564:	000008f8 	strdeq	r0, [r0], -r8
     568:	000008f8 	strdeq	r0, [r0], -r8
static void devinit_uart (int devnum) {
     56c:	00000a08 	andeq	r0, r0, r8, lsl #20
	adddevfunc (ioreq_uart_a, devnum);
     570:	00000001 	andeq	r0, r0, r1
     574:	00000001 	andeq	r0, r0, r1
void udelay (volatile word n) {
     578:	00000a08 	andeq	r0, r0, r8, lsl #20
     57c:	00000ac8 	andeq	r0, r0, r8, asr #21
	while (n) {
     580:	00000ac8 	andeq	r0, r0, r8, asr #21
     584:	00000b0c 	andeq	r0, r0, ip, lsl #22
}
     588:	00000b0c 	andeq	r0, r0, ip, lsl #22
	while (n--);
     58c:	00000b48 	andeq	r0, r0, r8, asr #22
     590:	00000b48 	andeq	r0, r0, r8, asr #22
     594:	00000bec 	andeq	r0, r0, ip, ror #23
		n--;
     598:	00000bec 	andeq	r0, r0, ip, ror #23
     59c:	00000da4 	andeq	r0, r0, r4, lsr #27
     5a0:	00000da4 	andeq	r0, r0, r4, lsr #27
void mdelay (volatile word n) {
     5a4:	00000dc8 	andeq	r0, r0, r8, asr #27
     5a8:	00000001 	andeq	r0, r0, r1
	while (n) {
     5ac:	00000001 	andeq	r0, r0, r1
     5b0:	00000dc8 	andeq	r0, r0, r8, asr #27
}
     5b4:	00001020 	andeq	r1, r0, r0, lsr #32
		udelay (999);
     5b8:	00001020 	andeq	r1, r0, r0, lsr #32
     5bc:	00001050 	andeq	r1, r0, r0, asr r0
		n--;
     5c0:	00000001 	andeq	r0, r0, r1
     5c4:	00000001 	andeq	r0, r0, r1
     5c8:	00001050 	andeq	r1, r0, r0, asr r0
     5cc:	000010b0 	strheq	r1, [r0], -r0
	...
		if (__pi_systat.effpdm > 1)
     5d8:	0000116c 	andeq	r1, r0, ip, ror #2
     5dc:	0000116e 	andeq	r1, r0, lr, ror #2
			__pi_systat.effpdm = 1;
     5e0:	0000116e 	andeq	r1, r0, lr, ror #2
	PRCMPowerDomainOn (d);
     5e4:	00001170 	andeq	r1, r0, r0, ror r1
	...
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     5f0:	000011d6 	ldrdeq	r1, [r0], -r6
     5f4:	00001278 	andeq	r1, r0, r8, ror r2
     5f8:	0000127c 	andeq	r1, r0, ip, ror r2
	__pi_systat.ondmns |= d;
     5fc:	00001280 	andeq	r1, r0, r0, lsl #5
	...
}
     608:	00001630 	andeq	r1, r0, r0, lsr r6
void __pi_offdomain (lword d) {
     60c:	00001632 	andeq	r1, r0, r2, lsr r6
     610:	00001636 	andeq	r1, r0, r6, lsr r6
	PRCMPowerDomainOff (d);
     614:	00001638 	andeq	r1, r0, r8, lsr r6
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     618:	0000163c 	andeq	r1, r0, ip, lsr r6
     61c:	00001640 	andeq	r1, r0, r0, asr #12
     620:	00001642 	andeq	r1, r0, r2, asr #12
	if (d & PRCM_DOMAIN_RFCORE) {
     624:	0000164c 	andeq	r1, r0, ip, asr #12
	...
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     630:	0000167e 	andeq	r1, r0, lr, ror r6
			__pi_systat.effpdm = __pi_systat.reqpdm;
     634:	00001680 	andeq	r1, r0, r0, lsl #13
     638:	00001682 	andeq	r1, r0, r2, lsl #13
	__pi_systat.ondmns &= ~d;
     63c:	00001686 	andeq	r1, r0, r6, lsl #13
     640:	00001716 	andeq	r1, r0, r6, lsl r7
}
     644:	00001778 	andeq	r1, r0, r8, ror r7
     648:	0000177c 	andeq	r1, r0, ip, ror r7
void __pi_syserror (word ec, const char *m) {
     64c:	00001780 	andeq	r1, r0, r0, lsl #15
	diag ("SYSERR: %x, %s", ec, m);
     650:	00001782 	andeq	r1, r0, r2, lsl #15
     654:	00001784 	andeq	r1, r0, r4, lsl #15
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     660:	0000169a 	muleq	r0, sl, r6
     664:	0000169c 	muleq	r0, ip, r6
		all_leds_blink;
     668:	0000169c 	muleq	r0, ip, r6
     66c:	0000169e 	muleq	r0, lr, r6
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     678:	000010b0 	strheq	r1, [r0], -r0
     67c:	000010ec 	andeq	r1, r0, ip, ror #1
     680:	000010ec 	andeq	r1, r0, ip, ror #1
     684:	0000116c 	andeq	r1, r0, ip, ror #2
     688:	0000116c 	andeq	r1, r0, ip, ror #2
     68c:	00001184 	andeq	r1, r0, r4, lsl #3
	while (1) {
     690:	00000001 	andeq	r0, r0, r1
     694:	00000001 	andeq	r0, r0, r1
     698:	00001184 	andeq	r1, r0, r4, lsl #3
     69c:	00001194 	muleq	r0, r4, r1
void tci_run_delay_timer () {
     6a0:	00001194 	muleq	r0, r4, r1
	setdel = __pi_mintk - __pi_old;
     6a4:	000011c0 	andeq	r1, r0, r0, asr #3
     6a8:	00000001 	andeq	r0, r0, r1
     6ac:	00000001 	andeq	r0, r0, r1
     6b0:	000011c0 	andeq	r1, r0, r0, asr #3
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     6b4:	000011c6 	andeq	r1, r0, r6, asr #3
     6b8:	000011c8 	andeq	r1, r0, r8, asr #3
     6bc:	00001294 	muleq	r0, r4, r2
     6c0:	00001294 	muleq	r0, r4, r2
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     6c4:	000012a8 	andeq	r1, r0, r8, lsr #5
	sti_tim;
     6c8:	000012a8 	andeq	r1, r0, r8, lsr #5
}
     6cc:	000012dc 	ldrdeq	r1, [r0], -ip
     6d0:	000012dc 	ldrdeq	r1, [r0], -ip
     6d4:	00001310 	andeq	r1, r0, r0, lsl r3
     6d8:	00000001 	andeq	r0, r0, r1
     6dc:	00000001 	andeq	r0, r0, r1
	cli_aux;
     6e0:	00001310 	andeq	r1, r0, r0, lsl r3
     6e4:	00001334 	andeq	r1, r0, r4, lsr r3
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     6e8:	00001334 	andeq	r1, r0, r4, lsr r3
     6ec:	0000136c 	andeq	r1, r0, ip, ror #6
     6f0:	00000001 	andeq	r0, r0, r1
     6f4:	00000001 	andeq	r0, r0, r1
	sti_aux;
     6f8:	00000001 	andeq	r0, r0, r1
}
     6fc:	00000001 	andeq	r0, r0, r1
     700:	00000001 	andeq	r0, r0, r1
     704:	00000001 	andeq	r0, r0, r1
void AONRTCIntHandler () {
     708:	0000136c 	andeq	r1, r0, ip, ror #6
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     70c:	00001390 	muleq	r0, r0, r3
     710:	00000001 	andeq	r0, r0, r1
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     714:	00000001 	andeq	r0, r0, r1
		if (__pi_utims [0] == 0)
     718:	00001390 	muleq	r0, r0, r3
     71c:	0000139e 	muleq	r0, lr, r3
		if (*(__pi_utims [0])) {
     720:	0000139e 	muleq	r0, lr, r3
     724:	000013ae 	andeq	r1, r0, lr, lsr #7
			(*(__pi_utims [0]))--;
     728:	00000001 	andeq	r0, r0, r1
		if (__pi_utims [1] == 0)
     72c:	00000001 	andeq	r0, r0, r1
		if (*(__pi_utims [1])) {
     730:	00000001 	andeq	r0, r0, r1
			aux_timer_inactive = 0;
     734:	00000001 	andeq	r0, r0, r1
			(*(__pi_utims [1]))--;
     738:	00000001 	andeq	r0, r0, r1
		if (__pi_utims [2] == 0)
     73c:	00000001 	andeq	r0, r0, r1
		if (*(__pi_utims [2])) {
     740:	000013ae 	andeq	r1, r0, lr, lsr #7
			(*(__pi_utims [2]))--;
     744:	000013c2 	andeq	r1, r0, r2, asr #7
		if (__pi_utims [3] != 0) {
     748:	000013c2 	andeq	r1, r0, r2, asr #7
			if (*(__pi_utims [3])) {
     74c:	000013d0 	ldrdeq	r1, [r0], -r0
				aux_timer_inactive = 0;
     750:	000013d0 	ldrdeq	r1, [r0], -r0
				(*(__pi_utims [3]))--;
     754:	000013f4 	strdeq	r1, [r0], -r4
	if (__pi_systat.ledsts) {
     758:	000013f4 	strdeq	r1, [r0], -r4
     75c:	00001490 	muleq	r0, r0, r4
		if (__pi_systat.ledblc++ == 0) {
     760:	00001490 	muleq	r0, r0, r4
     764:	000014e0 	andeq	r1, r0, r0, ror #9
			if (__pi_systat.ledblk) {
     768:	000014e0 	andeq	r1, r0, r0, ror #9
     76c:	00001528 	andeq	r1, r0, r8, lsr #10
     770:	00001528 	andeq	r1, r0, r8, lsr #10
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     774:	00001578 	andeq	r1, r0, r8, ror r5
     778:	00000001 	andeq	r0, r0, r1
				if (__pi_systat.ledsts & 0x2)
     77c:	00000001 	andeq	r0, r0, r1
     780:	00001578 	andeq	r1, r0, r8, ror r5
     784:	00001620 	andeq	r1, r0, r0, lsr #12
				if (__pi_systat.ledsts & 0x4)
     788:	00001620 	andeq	r1, r0, r0, lsr #12
				__pi_systat.ledblk = 0;
     78c:	00001654 	andeq	r1, r0, r4, asr r6
     790:	00001654 	andeq	r1, r0, r4, asr r6
			if (__pi_systat.fstblk)
     794:	0000166c 	andeq	r1, r0, ip, ror #12
     798:	00000001 	andeq	r0, r0, r1
				__pi_systat.ledblc = 200;
     79c:	00000001 	andeq	r0, r0, r1
	if (events & AON_RTC_EVFLAGS_CH0) {
     7a0:	00000001 	andeq	r0, r0, r1
		cli_tim;
     7a4:	00000001 	andeq	r0, r0, r1
		__pi_new += setdel;
     7a8:	0000166c 	andeq	r1, r0, ip, ror #12
     7ac:	000017a8 	andeq	r1, r0, r8, lsr #15
		setdel = 0;
     7b0:	000017a8 	andeq	r1, r0, r8, lsr #15
		RISE_N_SHINE;
     7b4:	000017cc 	andeq	r1, r0, ip, asr #15
	...
     7c0:	0000188c 	andeq	r1, r0, ip, lsl #17
		aux_timer_inactive = 1;
     7c4:	00001892 	muleq	r0, r2, r8
     7c8:	00001898 	muleq	r0, r8, r8
				if (__pi_systat.ledsts & 0x1)
     7cc:	0000189c 	muleq	r0, ip, r8
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     7d0:	000018a4 	andeq	r1, r0, r4, lsr #17
     7d4:	000018c4 	andeq	r1, r0, r4, asr #17
	...
     7e0:	00000001 	andeq	r0, r0, r1
				if (__pi_systat.ledsts & 0x8)
     7e4:	00000001 	andeq	r0, r0, r1
				__pi_systat.ledblk = 1;
     7e8:	00000001 	andeq	r0, r0, r1
     7ec:	00000001 	andeq	r0, r0, r1
	...
			cli_aux;
     7f8:	000017cc 	andeq	r1, r0, ip, asr #15
     7fc:	000017e2 	andeq	r1, r0, r2, ror #15
     800:	000017e2 	andeq	r1, r0, r2, ror #15
     804:	000017fc 	strdeq	r1, [r0], -ip
     808:	000017fc 	strdeq	r1, [r0], -ip
     80c:	0000180a 	andeq	r1, r0, sl, lsl #16
     810:	0000180c 	andeq	r1, r0, ip, lsl #16
     814:	00001858 	andeq	r1, r0, r8, asr r8
     818:	00001858 	andeq	r1, r0, r8, asr r8
word tci_update_delay_ticks (Boolean force) {
     81c:	000018e4 	andeq	r1, r0, r4, ror #17
	cli_tim;
     820:	000018e4 	andeq	r1, r0, r4, ror #17
     824:	00001954 	andeq	r1, r0, r4, asr r9
	if (setdel) {
     828:	00001954 	andeq	r1, r0, r4, asr r9
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     82c:	00001a14 	andeq	r1, r0, r4, lsl sl
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     830:	00000001 	andeq	r0, r0, r1
     834:	00000001 	andeq	r0, r0, r1
     838:	00001a14 	andeq	r1, r0, r4, lsl sl
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     83c:	00001a38 	andeq	r1, r0, r8, lsr sl
				AON_RTC_O_CH0CMP)) - gettav ());
     840:	00000001 	andeq	r0, r0, r1
	return NO;
     844:	00000001 	andeq	r0, r0, r1
			setdel = 0;
     848:	00000001 	andeq	r0, r0, r1
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     84c:	00000001 	andeq	r0, r0, r1
     850:	00000001 	andeq	r0, r0, r1
}
     854:	00000001 	andeq	r0, r0, r1
		sti_tim;
     858:	00001a38 	andeq	r1, r0, r8, lsr sl
		return YES;
     85c:	00001af4 	strdeq	r1, [r0], -r4
     860:	00000001 	andeq	r0, r0, r1
     864:	00000001 	andeq	r0, r0, r1
     868:	00000001 	andeq	r0, r0, r1
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     86c:	00000001 	andeq	r0, r0, r1
	UARTDisable (UART0_BASE);
     870:	00000001 	andeq	r0, r0, r1
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     874:	00000001 	andeq	r0, r0, r1
	UARTDisable (UART0_BASE);
     878:	00001af4 	strdeq	r1, [r0], -r4
	UARTConfigSetExpClk (UART0_BASE,
     87c:	00001b20 	andeq	r1, r0, r0, lsr #22
     880:	00001b20 	andeq	r1, r0, r0, lsr #22
     884:	00001b80 	andeq	r1, r0, r0, lsl #23
     888:	00000001 	andeq	r0, r0, r1
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     88c:	00000001 	andeq	r0, r0, r1
     890:	00000001 	andeq	r0, r0, r1
     894:	00000001 	andeq	r0, r0, r1
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     898:	00000001 	andeq	r0, r0, r1
     89c:	00000001 	andeq	r0, r0, r1
     8a0:	00000001 	andeq	r0, r0, r1
	urates [0] = rate;
     8a4:	00000001 	andeq	r0, r0, r1
}
     8a8:	00001b80 	andeq	r1, r0, r0, lsl #23
     8ac:	00001be8 	andeq	r1, r0, r8, ror #23
     8b0:	00001be8 	andeq	r1, r0, r8, ror #23
     8b4:	00001c38 	andeq	r1, r0, r8, lsr ip
     8b8:	00001c38 	andeq	r1, r0, r8, lsr ip
     8bc:	00001cd4 	ldrdeq	r1, [r0], -r4
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     8c0:	00001cd4 	ldrdeq	r1, [r0], -r4
     8c4:	00001d14 	andeq	r1, r0, r4, lsl sp
     8c8:	00001d14 	andeq	r1, r0, r4, lsl sp
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     8cc:	00001d48 	andeq	r1, r0, r8, asr #26
     8d0:	00001d48 	andeq	r1, r0, r8, asr #26
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     8d4:	00001d84 	andeq	r1, r0, r4, lsl #27
     8d8:	00000001 	andeq	r0, r0, r1
	__pi_uart_setrate (urates [0], __pi_uart);
     8dc:	00000001 	andeq	r0, r0, r1
     8e0:	00001d84 	andeq	r1, r0, r4, lsl #27
     8e4:	00001d86 	andeq	r1, r0, r6, lsl #27
	...
     8f0:	00001d86 	andeq	r1, r0, r6, lsl #27
     8f4:	00001d88 	andeq	r1, r0, r8, lsl #27
	switch (operation) {
     8f8:	00001d88 	andeq	r1, r0, r8, lsl #27
static int ioreq_uart_a (int operation, char *buf, int len) {
     8fc:	00001d8a 	andeq	r1, r0, sl, lsl #27
     900:	00001d8a 	andeq	r1, r0, sl, lsl #27
     904:	00001d8c 	andeq	r1, r0, ip, lsl #27
     908:	00001d8c 	andeq	r1, r0, ip, lsl #27
     90c:	00001dd0 	ldrdeq	r1, [r0], -r0
	...
			while (len && uart_a_char_available) {
     918:	00000001 	andeq	r0, r0, r1
     91c:	00000001 	andeq	r0, r0, r1
     920:	00000001 	andeq	r0, r0, r1
			if (len != operation) {
     924:	00000001 	andeq	r0, r0, r1
}
     928:	00000001 	andeq	r0, r0, r1
     92c:	00000001 	andeq	r0, r0, r1
			uart_a_disable_int;
     930:	00000001 	andeq	r0, r0, r1
			if (uart_a_char_available) {
     934:	00000001 	andeq	r0, r0, r1
	...
			uart_a_disable_int;
     940:	00000001 	andeq	r0, r0, r1
			if (uart_a_char_available) {
     944:	00000001 	andeq	r0, r0, r1
     948:	00000001 	andeq	r0, r0, r1
				uart_a_enable_int;
     94c:	00000001 	andeq	r0, r0, r1
	...
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     958:	00000001 	andeq	r0, r0, r1
     95c:	00000001 	andeq	r0, r0, r1
			return -2;
     960:	00000001 	andeq	r0, r0, r1
     964:	00000001 	andeq	r0, r0, r1
				uart_a_write (*buf);
     968:	00000001 	andeq	r0, r0, r1
     96c:	00000001 	andeq	r0, r0, r1
			while (len && uart_a_room_in_tx) {
     970:	00000001 	andeq	r0, r0, r1
     974:	00000001 	andeq	r0, r0, r1
	...
			uart_a_disable_int;
     980:	00000001 	andeq	r0, r0, r1
     984:	00000001 	andeq	r0, r0, r1
			if (uart_a_room_in_tx) {
     988:	00000001 	andeq	r0, r0, r1
     98c:	00000001 	andeq	r0, r0, r1
	...
				*buf++ = uart_a_read;
     998:	00000001 	andeq	r0, r0, r1
			if (uart_a_room_in_tx) {
     99c:	00000001 	andeq	r0, r0, r1
				uart_a_write (*buf);
     9a0:	00000001 	andeq	r0, r0, r1
     9a4:	00000001 	andeq	r0, r0, r1
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     9a8:	00000001 	andeq	r0, r0, r1
     9ac:	00000001 	andeq	r0, r0, r1
	...
			uart_a_enable_int;
     9b8:	00000001 	andeq	r0, r0, r1
			return 0;
     9bc:	00000001 	andeq	r0, r0, r1
			if (len == UART_CNTRL_SETRATE) {
     9c0:	00000001 	andeq	r0, r0, r1
				if (__pi_uart_setrate (*((word*)buf),
     9c4:	00000001 	andeq	r0, r0, r1
	...
				syserror (EREQPAR, "uar");
     9d0:	00001ddc 	ldrdeq	r1, [r0], -ip
			syserror (ENOOPER, "uai");
     9d4:	00001de0 	andeq	r1, r0, r0, ror #27
			if (len == UART_CNTRL_GETRATE) {
     9d8:	00001de6 	andeq	r1, r0, r6, ror #27
				return 1;
     9dc:	00001de8 	andeq	r1, r0, r8, ror #27
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     9e0:	00001df6 	strdeq	r1, [r0], -r6
			syserror (ENOOPER, "uai");
     9e4:	00001df6 	strdeq	r1, [r0], -r6
     9e8:	00001df8 	strdeq	r1, [r0], -r8
     9ec:	00001dfa 	strdeq	r1, [r0], -sl
	...
     9f8:	00001de2 	andeq	r1, r0, r2, ror #27
     9fc:	00001de4 	andeq	r1, r0, r4, ror #27
     a00:	00001dfa 	strdeq	r1, [r0], -sl
     a04:	00001dfc 	strdeq	r1, [r0], -ip
	...
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     a10:	00001de4 	andeq	r1, r0, r4, ror #27
     a14:	00001de6 	andeq	r1, r0, r6, ror #27
     a18:	00001de8 	andeq	r1, r0, r8, ror #27
     a1c:	00001dea 	andeq	r1, r0, sl, ror #27
     a20:	00001df0 	strdeq	r1, [r0], -r0
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     a24:	00001df0 	strdeq	r1, [r0], -r0
	...
		RISE_N_SHINE;
     a30:	00001e14 	andeq	r1, r0, r4, lsl lr
		i_trigger (devevent (UART_A, READ));
     a34:	00001e1c 	andeq	r1, r0, ip, lsl lr
     a38:	00001e26 	andeq	r1, r0, r6, lsr #28
     a3c:	00001e26 	andeq	r1, r0, r6, lsr #28
     a40:	00001e2a 	andeq	r1, r0, sl, lsr #28
     a44:	00001e2c 	andeq	r1, r0, ip, lsr #28
	...
     a50:	00001e2c 	andeq	r1, r0, ip, lsr #28
     a54:	00001e2c 	andeq	r1, r0, ip, lsr #28
     a58:	00001e2e 	andeq	r1, r0, lr, lsr #28
     a5c:	00001e30 	andeq	r1, r0, r0, lsr lr
	...
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     a68:	00001e3c 	andeq	r1, r0, ip, lsr lr
     a6c:	00001e3e 	andeq	r1, r0, lr, lsr lr
		i_trigger (devevent (UART_A, WRITE));
     a70:	00001e40 	andeq	r1, r0, r0, asr #28
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     a74:	00001e44 	andeq	r1, r0, r4, asr #28
	...
		RISE_N_SHINE;
     a80:	00001e5c 	andeq	r1, r0, ip, asr lr
     a84:	00001e5e 	andeq	r1, r0, lr, asr lr
		i_trigger (devevent (UART_A, WRITE));
     a88:	00001e62 	andeq	r1, r0, r2, ror #28
     a8c:	00001e64 	andeq	r1, r0, r4, ror #28
     a90:	00001e6a 	andeq	r1, r0, sl, ror #28
     a94:	00001e7a 	andeq	r1, r0, sl, ror lr
	...
     aa0:	00001e5c 	andeq	r1, r0, ip, asr lr
     aa4:	00001e5e 	andeq	r1, r0, lr, asr lr
     aa8:	00001e62 	andeq	r1, r0, r2, ror #28
     aac:	00001e64 	andeq	r1, r0, r4, ror #28
     ab0:	00001e6a 	andeq	r1, r0, sl, ror #28
}
     ab4:	00001e6a 	andeq	r1, r0, sl, ror #28
     ab8:	00001e6c 	andeq	r1, r0, ip, ror #28
     abc:	00001e6e 	andeq	r1, r0, lr, ror #28
	...
void __buttons_setirq (int val) {
     ac8:	00001ec2 	andeq	r1, r0, r2, asr #29
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     acc:	00001ec6 	andeq	r1, r0, r6, asr #29
     ad0:	00001ec8 	andeq	r1, r0, r8, asr #29
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     ad4:	00001eca 	andeq	r1, r0, sl, asr #29
	...
		bn = BUTTON_GPIO (__button_list [i]);
     ae0:	00001ece 	andeq	r1, r0, lr, asr #29
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     ae4:	00001ece 	andeq	r1, r0, lr, asr #29
     ae8:	00001ed0 	ldrdeq	r1, [r0], -r0
     aec:	00001ed2 	ldrdeq	r1, [r0], -r2
	...
     af8:	00000001 	andeq	r0, r0, r1
}
     afc:	00000001 	andeq	r0, r0, r1
     b00:	00000001 	andeq	r0, r0, r1
     b04:	00000001 	andeq	r0, r0, r1
	...
	for (i = 0; i < N_PINLIST; i++) {
     b10:	00000001 	andeq	r0, r0, r1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     b14:	00000001 	andeq	r0, r0, r1
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     b18:	00000001 	andeq	r0, r0, r1
	for (i = 0; i < N_PINLIST; i++) {
     b1c:	00000001 	andeq	r0, r0, r1
	...
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     b28:	00000001 	andeq	r0, r0, r1
     b2c:	00000001 	andeq	r0, r0, r1
     b30:	00000001 	andeq	r0, r0, r1
	for (i = 0; i < N_PINLIST; i++) {
     b34:	00000001 	andeq	r0, r0, r1
	...
}
     b40:	00000001 	andeq	r0, r0, r1
     b44:	00000001 	andeq	r0, r0, r1
void GPIOIntHandler () {
     b48:	00000001 	andeq	r0, r0, r1
if (buttons_int) {
     b4c:	00000001 	andeq	r0, r0, r1
	...
	buttons_disable ();
     b58:	00001dd8 	ldrdeq	r1, [r0], -r8
	i_trigger ((aword)&__button_list);
     b5c:	00001e0c 	andeq	r1, r0, ip, lsl #28
     b60:	00001e0c 	andeq	r1, r0, ip, lsl #28
     b64:	00001e3c 	andeq	r1, r0, ip, lsr lr
     b68:	00001e3c 	andeq	r1, r0, ip, lsr lr
     b6c:	00001e54 	andeq	r1, r0, r4, asr lr
     b70:	00001e54 	andeq	r1, r0, r4, asr lr
     b74:	00001ea8 	andeq	r1, r0, r8, lsr #29
     b78:	00001ea8 	andeq	r1, r0, r8, lsr #29
     b7c:	00001ee8 	andeq	r1, r0, r8, ror #29
     b80:	00001ee8 	andeq	r1, r0, r8, ror #29
     b84:	00001f0c 	andeq	r1, r0, ip, lsl #30
	RISE_N_SHINE;
     b88:	00001f0c 	andeq	r1, r0, ip, lsl #30
     b8c:	00001f20 	andeq	r1, r0, r0, lsr #30
     b90:	00001f20 	andeq	r1, r0, r0, lsr #30
if (pin_sensor_int) {
     b94:	00001f34 	andeq	r1, r0, r4, lsr pc
     b98:	00000001 	andeq	r0, r0, r1
	i_trigger ((aword)(&__input_pins));
     b9c:	00000001 	andeq	r0, r0, r1
     ba0:	00000001 	andeq	r0, r0, r1
     ba4:	00000001 	andeq	r0, r0, r1
     ba8:	00000001 	andeq	r0, r0, r1
     bac:	00000001 	andeq	r0, r0, r1
     bb0:	00000001 	andeq	r0, r0, r1
     bb4:	00000001 	andeq	r0, r0, r1
     bb8:	00000001 	andeq	r0, r0, r1
     bbc:	00000001 	andeq	r0, r0, r1
     bc0:	00000001 	andeq	r0, r0, r1
     bc4:	00000001 	andeq	r0, r0, r1
	__pinsen_disable_and_clear;
     bc8:	00000001 	andeq	r0, r0, r1
	RISE_N_SHINE;
     bcc:	00000001 	andeq	r0, r0, r1
	...
}
     bd8:	00001f34 	andeq	r1, r0, r4, lsr pc
     bdc:	00001fac 	andeq	r1, r0, ip, lsr #31
	...
     be8:	00001fac 	andeq	r1, r0, ip, lsr #31
void system_init () {
     bec:	00002000 	andeq	r2, r0, r0
	...
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     bf8:	00002000 	andeq	r2, r0, r0
     bfc:	00002060 	andeq	r2, r0, r0, rrx
	...
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     c08:	00002286 	andeq	r2, r0, r6, lsl #5
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     c0c:	00002288 	andeq	r2, r0, r8, lsl #5
     c10:	0000229c 	muleq	r0, ip, r2
     c14:	0000229e 	muleq	r0, lr, r2
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     c18:	000022a0 	andeq	r2, r0, r0, lsr #5
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     c1c:	000022a2 	andeq	r2, r0, r2, lsr #5
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     c28:	00002310 	andeq	r2, r0, r0, lsl r3
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     c2c:	00002316 	andeq	r2, r0, r6, lsl r3
		pin = (port_confs [i] >> 19) & 0x1f;
     c30:	0000231a 	andeq	r2, r0, sl, lsl r3
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     c34:	0000231c 	andeq	r2, r0, ip, lsl r3
	...
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     c40:	0000233e 	andeq	r2, r0, lr, lsr r3
     c44:	00002344 	andeq	r2, r0, r4, asr #6
     c48:	00002346 	andeq	r2, r0, r6, asr #6
		if (port_confs [i] & 0x80)
     c4c:	00002348 	andeq	r2, r0, r8, asr #6
	...
		if (port_confs [i] & 0x40)
     c58:	0000234c 	andeq	r2, r0, ip, asr #6
     c5c:	00002358 	andeq	r2, r0, r8, asr r3
     c60:	00002358 	andeq	r2, r0, r8, asr r3
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     c64:	0000235c 	andeq	r2, r0, ip, asr r3
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     c68:	0000235e 	andeq	r2, r0, lr, asr r3
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     c6c:	00002382 	andeq	r2, r0, r2, lsl #7
	...
	all_leds_blink;
     c78:	0000235c 	andeq	r2, r0, ip, asr r3
     c7c:	0000235e 	andeq	r2, r0, lr, asr r3
     c80:	00002382 	andeq	r2, r0, r2, lsl #7
     c84:	000023bc 			; <UNDEFINED> instruction: 0x000023bc
     c88:	000023be 			; <UNDEFINED> instruction: 0x000023be
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     c8c:	000023d0 	ldrdeq	r2, [r0], -r0
	...
     c98:	00002490 	muleq	r0, r0, r4
     c9c:	00002490 	muleq	r0, r0, r4
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     ca0:	00002494 	muleq	r0, r4, r4
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     ca4:	000024ae 	andeq	r2, r0, lr, lsr #9
     ca8:	000024b0 			; <UNDEFINED> instruction: 0x000024b0
	IntEnable (INT_AON_RTC_COMB);
     cac:	000024b2 			; <UNDEFINED> instruction: 0x000024b2
     cb0:	000024b4 			; <UNDEFINED> instruction: 0x000024b4
     cb4:	000024b6 			; <UNDEFINED> instruction: 0x000024b6
	__pi_malloc_init ();
     cb8:	000024ba 			; <UNDEFINED> instruction: 0x000024ba
	IntEnable (INT_AON_GPIO_EDGE);
     cbc:	000024c4 	andeq	r2, r0, r4, asr #9
	...
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     cc8:	000025d6 	ldrdeq	r2, [r0], -r6
     ccc:	000025da 	ldrdeq	r2, [r0], -sl
     cd0:	000025f6 	strdeq	r2, [r0], -r6
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     cd4:	000025fa 	strdeq	r2, [r0], -sl
	...
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     ce0:	000025da 	ldrdeq	r2, [r0], -sl
     ce4:	000025f6 	strdeq	r2, [r0], -r6
	urates [0] = UART_RATE / 100;
     ce8:	000025fa 	strdeq	r2, [r0], -sl
     cec:	00002602 	andeq	r2, r0, r2, lsl #12
	...
	EXTRA_INITIALIZERS;
     cf8:	0000276e 	andeq	r2, r0, lr, ror #14
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     cfc:	00002770 	andeq	r2, r0, r0, ror r7
     d00:	00002772 	andeq	r2, r0, r2, ror r7
     d04:	00002776 	andeq	r2, r0, r6, ror r7
	...
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     d10:	00002770 	andeq	r2, r0, r0, ror r7
     d14:	00002772 	andeq	r2, r0, r2, ror r7
			devinit [i] . init (devinit [i] . param);
     d18:	00002776 	andeq	r2, r0, r6, ror r7
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     d1c:	0000279c 	muleq	r0, ip, r7
	...
	IntEnable (INT_UART0_COMB);
     d28:	000027e4 	andeq	r2, r0, r4, ror #15
     d2c:	000027e6 	andeq	r2, r0, r6, ror #15
}
     d30:	000027ea 	andeq	r2, r0, sl, ror #15
	tci_run_auxiliary_timer ();
     d34:	000027f0 	strdeq	r2, [r0], -r0
		diag ("");
     d38:	000027f2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
     d3c:	0000283e 	andeq	r2, r0, lr, lsr r8
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     d40:	00002840 	andeq	r2, r0, r0, asr #16
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     d44:	00002844 	andeq	r2, r0, r4, asr #16
		diag ("Leftover RAM: %d bytes",
     d48:	00002846 	andeq	r2, r0, r6, asr #16
     d4c:	00002856 	andeq	r2, r0, r6, asr r8
     d50:	0000285a 	andeq	r2, r0, sl, asr r8
     d54:	0000285e 	andeq	r2, r0, lr, asr r8
     d58:	00002890 	muleq	r0, r0, r8
     d5c:	00002894 	muleq	r0, r4, r8
	...
     d68:	0000289a 	muleq	r0, sl, r8
     d6c:	0000289c 	muleq	r0, ip, r8
     d70:	0000289e 	muleq	r0, lr, r8
     d74:	000028cc 	andeq	r2, r0, ip, asr #17
	...
     d80:	00002060 	andeq	r2, r0, r0, rrx
     d84:	00002080 	andeq	r2, r0, r0, lsl #1
     d88:	00002080 	andeq	r2, r0, r0, lsl #1
     d8c:	00002210 	andeq	r2, r0, r0, lsl r2
     d90:	00002210 	andeq	r2, r0, r0, lsl r2
     d94:	00002258 	andeq	r2, r0, r8, asr r2
     d98:	00002258 	andeq	r2, r0, r8, asr r2
     d9c:	0000227c 	andeq	r2, r0, ip, ror r2
     da0:	0000227c 	andeq	r2, r0, ip, ror r2
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
     da4:	000022d8 	ldrdeq	r2, [r0], -r8
     da8:	000022d8 	ldrdeq	r2, [r0], -r8
     dac:	00002310 	andeq	r2, r0, r0, lsl r3
     db0:	00002310 	andeq	r2, r0, r0, lsl r3
     db4:	00002490 	muleq	r0, r0, r4
     db8:	00002490 	muleq	r0, r0, r4
     dbc:	00002560 	andeq	r2, r0, r0, ror #10
     dc0:	00002560 	andeq	r2, r0, r0, ror #10
}
     dc4:	00002750 	andeq	r2, r0, r0, asr r7
__attribute__ ((noreturn)) void __pi_release () {
     dc8:	00002750 	andeq	r2, r0, r0, asr r7
     dcc:	000027c0 	andeq	r2, r0, r0, asr #15
     dd0:	000027c0 	andeq	r2, r0, r0, asr #15
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     dd4:	00002934 	andeq	r2, r0, r4, lsr r9
	...
	check_stack_overflow;
     de0:	00002934 	andeq	r2, r0, r4, lsr r9
	update_n_wake (MAX_WORD, NO);
     de4:	00002958 	andeq	r2, r0, r8, asr r9
     de8:	00002958 	andeq	r2, r0, r8, asr r9
     dec:	0000297c 	andeq	r2, r0, ip, ror r9
	for_all_tasks (__pi_curr) {
     df0:	0000297c 	andeq	r2, r0, ip, ror r9
     df4:	00002984 	andeq	r2, r0, r4, lsl #19
     df8:	00002984 	andeq	r2, r0, r4, lsl #19
  __ASM volatile ("cpsid i" : : : "memory");
     dfc:	00002988 	andeq	r2, r0, r8, lsl #19
	__SLEEP;
     e00:	00002988 	andeq	r2, r0, r8, lsl #19
     e04:	0000298c 	andeq	r2, r0, ip, lsl #19
     e08:	0000298c 	andeq	r2, r0, ip, lsl #19
     e0c:	000029d4 	ldrdeq	r2, [r0], -r4
	...
	switch (__pi_systat.effpdm) {
     e18:	000029e2 	andeq	r2, r0, r2, ror #19
     e1c:	000029e2 	andeq	r2, r0, r2, ror #19
     e20:	000029e8 	andeq	r2, r0, r8, ror #19
     e24:	00002a44 	andeq	r2, r0, r4, asr #20
	...
     e30:	000029d4 	ldrdeq	r2, [r0], -r4
	check_stack_overflow;
     e34:	00002a44 	andeq	r2, r0, r4, asr #20
	...
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     e40:	00002a58 	andeq	r2, r0, r8, asr sl
			(__pi_curr->code) (tstate (__pi_curr));
     e44:	00002b3c 	andeq	r2, r0, ip, lsr fp
			goto Redo;
     e48:	00002b42 	andeq	r2, r0, r2, asr #22
	for_all_tasks (__pi_curr) {
     e4c:	00002b46 	andeq	r2, r0, r6, asr #22
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     e50:	00002b4c 	andeq	r2, r0, ip, asr #22
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     e54:	00002b60 	andeq	r2, r0, r0, ror #22
	...
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     e60:	00002a44 	andeq	r2, r0, r4, asr #20
     e64:	00002b60 	andeq	r2, r0, r0, ror #22
	...
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     e70:	00002b8c 	andeq	r2, r0, ip, lsl #23
     e74:	00002b8e 	andeq	r2, r0, lr, lsl #23
			__WFI ();
     e78:	00002c5c 	andeq	r2, r0, ip, asr ip
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     e7c:	00002c80 	andeq	r2, r0, r0, lsl #25
     e80:	00002c82 	andeq	r2, r0, r2, lsl #25
}
     e84:	00002cca 	andeq	r2, r0, sl, asr #25
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     e88:	00002cf4 	strdeq	r2, [r0], -r4
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     e8c:	00002cf6 	strdeq	r2, [r0], -r6
	...
			PRCMPowerDomainOff (__pi_systat.ondmns |
     e98:	00002b8e 	andeq	r2, r0, lr, lsl #23
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     e9c:	00002b90 	muleq	r0, r0, fp
     ea0:	00002c32 	andeq	r2, r0, r2, lsr ip
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     ea4:	00002c5c 	andeq	r2, r0, ip, asr ip
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ea8:	00002c80 	andeq	r2, r0, r0, lsl #25
     eac:	00002c82 	andeq	r2, r0, r2, lsl #25
	...
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     eb8:	00002bce 	andeq	r2, r0, lr, asr #23
     ebc:	00002bd6 	ldrdeq	r2, [r0], -r6
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     ec0:	00002d7a 	andeq	r2, r0, sl, ror sp
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     ec4:	00002d86 	andeq	r2, r0, r6, lsl #27
	...
     ed0:	00002cd4 	ldrdeq	r2, [r0], -r4
     ed4:	00002cf4 	strdeq	r2, [r0], -r4
			SysCtrlSetRechargeBeforePowerDown
     ed8:	00002cf6 	strdeq	r2, [r0], -r6
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     edc:	00002d3a 	andeq	r2, r0, sl, lsr sp
	...
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     ee8:	00002b60 	andeq	r2, r0, r0, ror #22
     eec:	00002b80 	andeq	r2, r0, r0, lsl #23
     ef0:	00002b80 	andeq	r2, r0, r0, lsl #23
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     ef4:	00002db0 			; <UNDEFINED> instruction: 0x00002db0
     ef8:	00002db0 			; <UNDEFINED> instruction: 0x00002db0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     efc:	00002e00 	andeq	r2, r0, r0, lsl #28
	...
     f08:	00002e14 	andeq	r2, r0, r4, lsl lr
     f0c:	00002e18 	andeq	r2, r0, r8, lsl lr
			while (!(AONWUCPowerStatusGet () &
     f10:	000030f2 	strdeq	r3, [r0], -r2
			PRCMPowerDomainOn (__pi_systat.ondmns);
     f14:	0000313a 	andeq	r3, r0, sl, lsr r1
	...
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     f20:	00002e18 	andeq	r2, r0, r8, lsl lr
     f24:	00002e1e 	andeq	r2, r0, lr, lsl lr
     f28:	00002e56 	andeq	r2, r0, r6, asr lr
     f2c:	00002ec2 	andeq	r2, r0, r2, asr #29
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     f30:	00003156 	andeq	r3, r0, r6, asr r1
     f34:	00003176 	andeq	r3, r0, r6, ror r1
	...
			SysCtrlAdjustRechargeAfterPowerDown ();
     f40:	00002f7a 	andeq	r2, r0, sl, ror pc
			reinit_uart ();
     f44:	00002ff4 	strdeq	r2, [r0], -r4
     f48:	0000317e 	andeq	r3, r0, lr, ror r1
     f4c:	00003186 	andeq	r3, r0, r6, lsl #3
	...
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     f58:	0000300c 	andeq	r3, r0, ip
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     f5c:	00003062 	andeq	r3, r0, r2, rrx
     f60:	000030d8 	ldrdeq	r3, [r0], -r8
     f64:	000030f2 	strdeq	r3, [r0], -r2
	...
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     f70:	00003068 	andeq	r3, r0, r8, rrx
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     f74:	000030d8 	ldrdeq	r3, [r0], -r8
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     f78:	0000313a 	andeq	r3, r0, sl, lsr r1
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     f7c:	00003142 	andeq	r3, r0, r2, asr #2
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     f80:	00003186 	andeq	r3, r0, r6, lsl #3
     f84:	00003190 	muleq	r0, r0, r1
	...
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     f90:	00002e00 	andeq	r2, r0, r0, lsl #28
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     f94:	00003190 	muleq	r0, r0, r1
	...
			PRCMPowerDomainOff (
     fa0:	00003190 	muleq	r0, r0, r1
     fa4:	000031b8 			; <UNDEFINED> instruction: 0x000031b8
	__SLEEP;
     fa8:	00000001 	andeq	r0, r0, r1
     fac:	00000001 	andeq	r0, r0, r1
	...
	goto Redo;
     fb8:	000031b8 			; <UNDEFINED> instruction: 0x000031b8
     fbc:	000031e8 	andeq	r3, r0, r8, ror #3
	...
     fc8:	000031e8 	andeq	r3, r0, r8, ror #3
     fcc:	00003208 	andeq	r3, r0, r8, lsl #4
     fd0:	00003208 	andeq	r3, r0, r8, lsl #4
     fd4:	00003220 	andeq	r3, r0, r0, lsr #4
	...
     fe0:	00003220 	andeq	r3, r0, r0, lsr #4
     fe4:	00003228 	andeq	r3, r0, r8, lsr #4
     fe8:	00000001 	andeq	r0, r0, r1
     fec:	00000001 	andeq	r0, r0, r1
     ff0:	00003228 	andeq	r3, r0, r8, lsr #4
     ff4:	00003230 	andeq	r3, r0, r0, lsr r2
     ff8:	00000001 	andeq	r0, r0, r1
     ffc:	00000001 	andeq	r0, r0, r1
    1000:	00000001 	andeq	r0, r0, r1
    1004:	00000001 	andeq	r0, r0, r1
	...
    1010:	00003292 	muleq	r0, r2, r2
    1014:	000032a2 	andeq	r3, r0, r2, lsr #5
    1018:	000032a8 	andeq	r3, r0, r8, lsr #5
    101c:	000032aa 	andeq	r3, r0, sl, lsr #5
	...
	cli_tim;
    1028:	00003230 	andeq	r3, r0, r0, lsr r2
	diag ("PicOS halted");
    102c:	0000328c 	andeq	r3, r0, ip, lsl #5
	mdelay (500);
    1030:	0000328c 	andeq	r3, r0, ip, lsl #5
    1034:	000032b8 			; <UNDEFINED> instruction: 0x000032b8
	setpowermode (2);
    1038:	00000001 	andeq	r0, r0, r1
	__PCB = NULL;
    103c:	00000001 	andeq	r0, r0, r1
	release;
    1040:	000032b8 			; <UNDEFINED> instruction: 0x000032b8
    1044:	000032d0 	ldrdeq	r3, [r0], -r0
    1048:	000032d0 	ldrdeq	r3, [r0], -r0
    104c:	00003330 	andeq	r3, r0, r0, lsr r3
int main (void) {
    1050:	00003330 	andeq	r3, r0, r0, lsr r3
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    1054:	00003364 	andeq	r3, r0, r4, ror #6
    1058:	00000001 	andeq	r0, r0, r1
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    105c:	00000001 	andeq	r0, r0, r1
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    1060:	00000001 	andeq	r0, r0, r1
	system_init ();
    1064:	00000001 	andeq	r0, r0, r1
	tcv_init ();
    1068:	00000001 	andeq	r0, r0, r1
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    106c:	00000001 	andeq	r0, r0, r1
    1070:	00000001 	andeq	r0, r0, r1
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
    1074:	00000001 	andeq	r0, r0, r1
	...
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    1080:	00000001 	andeq	r0, r0, r1
    1084:	00000001 	andeq	r0, r0, r1
	delay (16, 0);
    1088:	00003364 	andeq	r3, r0, r4, ror #6
    108c:	0000338c 	andeq	r3, r0, ip, lsl #7
    1090:	0000338c 	andeq	r3, r0, ip, lsl #7
	__pi_release ();
    1094:	000033d8 	ldrdeq	r3, [r0], -r8
    1098:	000033d8 	ldrdeq	r3, [r0], -r8
    109c:	00003528 	andeq	r3, r0, r8, lsr #10
    10a0:	00003528 	andeq	r3, r0, r8, lsr #10
    10a4:	00003640 	andeq	r3, r0, r0, asr #12
    10a8:	00003640 	andeq	r3, r0, r0, asr #12
    10ac:	00003660 	andeq	r3, r0, r0, ror #12
static void killev (__pi_pcb_t *pid) {
    10b0:	00000001 	andeq	r0, r0, r1
	wfun = (aword)(pid->code);
    10b4:	00000001 	andeq	r0, r0, r1
	for_all_tasks (i) {
    10b8:	00003660 	andeq	r3, r0, r0, ror #12
		for (j = 0; j < nevents (i); j++) {
    10bc:	0000367c 	andeq	r3, r0, ip, ror r6
	...
			    || i->Events [j] . Event == wfun
    10c8:	0000367c 	andeq	r3, r0, ip, ror r6
		for (j = 0; j < nevents (i); j++) {
    10cc:	00003750 	andeq	r3, r0, r0, asr r7
			if (i->Events [j] . Event == (aword)pid
    10d0:	00003750 	andeq	r3, r0, r0, asr r7
    10d4:	000037f4 	strdeq	r3, [r0], -r4
	...
				wakeupev (i, j);
    10e0:	00003802 	andeq	r3, r0, r2, lsl #16
	for_all_tasks (i) {
    10e4:	00003804 	andeq	r3, r0, r4, lsl #16
}
    10e8:	00003808 	andeq	r3, r0, r8, lsl #16
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    10ec:	0000380c 	andeq	r3, r0, ip, lsl #16
	...
	cc = (aword*)(mpools + MA_NP);
    10f8:	00003b10 	andeq	r3, r0, r0, lsl fp
	m_setnextp (ch, chunk);
    10fc:	00003b12 	andeq	r3, r0, r2, lsl fp
	m_setnextp (cc, ch);
    1100:	00003b14 	andeq	r3, r0, r4, lsl fp
}
    1104:	00003b16 	andeq	r3, r0, r6, lsl fp
	...
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    1110:	000037f4 	strdeq	r3, [r0], -r4
			m_setnextp (cc, m_nextp (chunk));
    1114:	00003870 	andeq	r3, r0, r0, ror r8
			m_size (chunk) += m_hdrlen + m_size (ch);
    1118:	00003870 	andeq	r3, r0, r0, ror r8
    111c:	0000391c 	andeq	r3, r0, ip, lsl r9
    1120:	0000391c 	andeq	r3, r0, ip, lsl r9
    1124:	00003978 	andeq	r3, r0, r8, ror r9
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    1128:	00003978 	andeq	r3, r0, r8, ror r9
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    112c:	00003990 	muleq	r0, r0, r9
    1130:	00000001 	andeq	r0, r0, r1
    1134:	00000001 	andeq	r0, r0, r1
			m_setnextp (cc, m_nextp (chunk));
    1138:	00003990 	muleq	r0, r0, r9
			m_size (ch) += m_hdrlen + m_size (chunk);
    113c:	000039a0 	andeq	r3, r0, r0, lsr #19
    1140:	000039a0 	andeq	r3, r0, r0, lsr #19
    1144:	000039b4 			; <UNDEFINED> instruction: 0x000039b4
    1148:	000039b4 			; <UNDEFINED> instruction: 0x000039b4
    114c:	00003a18 	andeq	r3, r0, r8, lsl sl
    1150:	00003a18 	andeq	r3, r0, r8, lsl sl
			if (m_size (chunk) >= m_size (ch))
    1154:	00003a2c 	andeq	r3, r0, ip, lsr #20
    1158:	00003a2c 	andeq	r3, r0, ip, lsr #20
    115c:	00003a40 	andeq	r3, r0, r0, asr #20
		chunk = m_nextp (chunk))
    1160:	00003a40 	andeq	r3, r0, r0, asr #20
    1164:	00003a54 	andeq	r3, r0, r4, asr sl
    1168:	00003a54 	andeq	r3, r0, r4, asr sl
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    116c:	00003a7c 	andeq	r3, r0, ip, ror sl
	diag_wait (a);
    1170:	00003a7c 	andeq	r3, r0, ip, ror sl
	diag_wchar (c, a);
    1174:	00003a8c 	andeq	r3, r0, ip, lsl #21
    1178:	00003a8c 	andeq	r3, r0, ip, lsl #21
}
    117c:	00003ab8 			; <UNDEFINED> instruction: 0x00003ab8
    1180:	00003ab8 			; <UNDEFINED> instruction: 0x00003ab8
	syserror (ESTATE, "state");
    1184:	00003acc 	andeq	r3, r0, ip, asr #21
    1188:	00003acc 	andeq	r3, r0, ip, asr #21
    118c:	00003ae0 	andeq	r3, r0, r0, ror #21
    1190:	00003ae0 	andeq	r3, r0, r0, ror #21
	for (i = 0; i < MAX_UTIMERS; i++)
    1194:	00003bf0 	strdeq	r3, [r0], -r0
void utimer_add (address ut) {
    1198:	00003bf0 	strdeq	r3, [r0], -r0
    119c:	00003c54 	andeq	r3, r0, r4, asr ip
		if (__pi_utims [i] == NULL)
    11a0:	00003c54 	andeq	r3, r0, r4, asr ip
	for (i = 0; i < MAX_UTIMERS; i++)
    11a4:	00003c7c 	andeq	r3, r0, ip, ror ip
    11a8:	00003c7c 	andeq	r3, r0, ip, ror ip
		syserror (ERESOURCE, "ut a");
    11ac:	00003dcc 	andeq	r3, r0, ip, asr #27
	...
}
    11b8:	00000001 	andeq	r0, r0, r1
    11bc:	00000001 	andeq	r0, r0, r1
	*t = v;
    11c0:	00000001 	andeq	r0, r0, r1
	TCI_RUN_AUXILIARY_TIMER;
    11c4:	00000001 	andeq	r0, r0, r1
	...
	if (TCI_UPDATE_DELAY_TICKS (force))
    11d0:	00003e42 	andeq	r3, r0, r2, asr #28
    11d4:	00003e44 	andeq	r3, r0, r4, asr #28
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    11d8:	00003e46 	andeq	r3, r0, r6, asr #28
    11dc:	00003e4a 	andeq	r3, r0, sl, asr #28
	...
    11e8:	00000001 	andeq	r0, r0, r1
    11ec:	00000001 	andeq	r0, r0, r1
    11f0:	00003dcc 	andeq	r3, r0, ip, asr #27
    11f4:	00003fec 	andeq	r3, r0, ip, ror #31
    11f8:	00003fec 	andeq	r3, r0, ip, ror #31
    11fc:	0000404c 	andeq	r4, r0, ip, asr #32
    1200:	00000001 	andeq	r0, r0, r1
    1204:	00000001 	andeq	r0, r0, r1
    1208:	0000404c 	andeq	r4, r0, ip, asr #32
		for_all_tasks (i) {
    120c:	00004064 	andeq	r4, r0, r4, rrx
	...
			if (!twaiting (i))
    1218:	000040b2 	strheq	r4, [r0], -r2
    121c:	000040b6 	strheq	r4, [r0], -r6
			if (twakecnd (__pi_old, znew, i->Timer)) {
    1220:	000040bc 	strheq	r4, [r0], -ip
    1224:	000040be 	strheq	r4, [r0], -lr
	...
    1230:	000040b6 	strheq	r4, [r0], -r6
    1234:	000040bc 	strheq	r4, [r0], -ip
    1238:	000040be 	strheq	r4, [r0], -lr
    123c:	000040c6 	andeq	r4, r0, r6, asr #1
	...
    1248:	00000001 	andeq	r0, r0, r1
    124c:	00000001 	andeq	r0, r0, r1
				wakeuptm (i);
    1250:	00000001 	andeq	r0, r0, r1
    1254:	00000001 	andeq	r0, r0, r1
		for_all_tasks (i) {
    1258:	00004064 	andeq	r4, r0, r4, rrx
				d = i->Timer - znew;
    125c:	000040b0 	strheq	r4, [r0], -r0
    1260:	00000001 	andeq	r0, r0, r1
    1264:	00000001 	andeq	r0, r0, r1
		if ((word)(__pi_mintk - znew) < min) 
    1268:	000040b0 	strheq	r4, [r0], -r0
    126c:	0000411c 	andeq	r4, r0, ip, lsl r1
    1270:	0000411c 	andeq	r4, r0, ip, lsl r1
	__pi_old = znew;
    1274:	00004132 	andeq	r4, r0, r2, lsr r1
	...
}
    1280:	00004134 	andeq	r4, r0, r4, lsr r1
    1284:	0000415c 	andeq	r4, r0, ip, asr r1
    1288:	0000415c 	andeq	r4, r0, ip, asr r1
    128c:	00004164 	andeq	r4, r0, r4, ror #2
    1290:	00000001 	andeq	r0, r0, r1
void proceed (word state) {
    1294:	00000001 	andeq	r0, r0, r1
	prcdstate (__pi_curr, state);
    1298:	00000001 	andeq	r0, r0, r1
    129c:	00000001 	andeq	r0, r0, r1
	release;
    12a0:	00000001 	andeq	r0, r0, r1
    12a4:	00000001 	andeq	r0, r0, r1
void __pi_wait (aword event, word state) {
    12a8:	00000001 	andeq	r0, r0, r1
	sint j = nevents (__pi_curr);
    12ac:	00000001 	andeq	r0, r0, r1
	...
		syserror (ENEVENTS, "sw");
    12c0:	00000004 	andeq	r0, r0, r4
	setestate (__pi_curr->Events [j], state, event);
    12c4:	00000006 	andeq	r0, r0, r6
	incwait (__pi_curr);
    12c8:	0000000a 	andeq	r0, r0, sl
	setestate (__pi_curr->Events [j], state, event);
    12cc:	00000026 	andeq	r0, r0, r6, lsr #32
}
    12d0:	00000028 	andeq	r0, r0, r8, lsr #32
    12d4:	00000038 	andeq	r0, r0, r8, lsr r0
    12d8:	0000003e 	andeq	r0, r0, lr, lsr r0
void __pi_trigger (aword event) {
    12dc:	00000040 	andeq	r0, r0, r0, asr #32
	for_all_tasks (i) {
    12e0:	00000042 	andeq	r0, r0, r2, asr #32
		for (j = 0; j < nevents (i); j++) {
    12e4:	00000048 	andeq	r0, r0, r8, asr #32
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	000006ea 	andeq	r0, r0, sl, ror #13
       4:	024a0003 	subeq	r0, sl, #3
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
}
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	2f010000 	svccs	0x00010000
      1c:	2f727375 	svccs	0x00727375
      20:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
      24:	2f656475 	svccs	0x00656475
      28:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
      2c:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; fffffe90 <_estack+0xdfffae90>
      30:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
      34:	2f00656e 	svccs	0x0000656e
      38:	2f727375 	svccs	0x00727375
      3c:	2f62696c 	svccs	0x0062696c
			i = k;
      40:	2f636367 	svccs	0x00636367
				j->Next = k;
      44:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
      48:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
}
      4c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
      50:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
      54:	2f312e32 	svccs	0x00312e32
		release;
      58:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
      5c:	00656475 	rsbeq	r6, r5, r5, ror r4
		b->length - b->u.pointers.head - b->u.pointers.tail;
      60:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
	b->u.pointers.tail =
      64:	636e692f 	cmnvs	lr, #770048	; 0xbc000
}
      68:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
		return NULL;
      6c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
      70:	2f62696c 	svccs	0x0062696c
      74:	00737973 	rsbseq	r7, r3, r3, ror r9
      78:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; ffffffc4 <_estack+0xdfffafc4>
      7c:	616d2f65 	cmnvs	sp, r5, ror #30
      80:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
      84:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
      88:	706f746b 	rsbvc	r7, pc, fp, ror #8
      8c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
      90:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
      94:	4349502f 	movtmi	r5, #36911	; 0x902f
      98:	502f534f 	eorpl	r5, pc, pc, asr #6
      9c:	534f6369 	movtpl	r6, #62313	; 0xf369
      a0:	3143432f 	cmpcc	r3, pc, lsr #6
      a4:	00585833 	subseq	r5, r8, r3, lsr r8
      a8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; fffffff4 <_estack+0xdfffaff4>
      ac:	616d2f65 	cmnvs	sp, r5, ror #30
      b0:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
      b4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
      b8:	706f746b 	rsbvc	r7, pc, fp, ror #8
      bc:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
      c0:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
      c4:	4349502f 	movtmi	r5, #36911	; 0x902f
char * assembleMessage(message * messagePtr) {
      c8:	502f534f 	eorpl	r5, pc, pc, asr #6
      cc:	534f6369 	movtpl	r6, #62313	; 0xf369
      d0:	6f682f00 	svcvs	0x00682f00
      d4:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; ffffff28 <_estack+0xdfffaf28>
      d8:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
        p = (char*)umalloc(6);
      dc:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
      e0:	6f746b73 	svcvs	0x00746b73
    p[0] = messagePtr->senderGroupId;
      e4:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
      e8:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    p[2] = messagePtr->messageType;
      ec:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    p[3] = messagePtr->requestNumber;
      f0:	2f534f43 	svccs	0x00534f43
    p[4] = messagePtr->senderId;
      f4:	4f636950 	svcmi	0x00636950
    p[5] = messagePtr->destinationId;
      f8:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
        p = (char*)umalloc(8);
      fc:	2f736269 	svccs	0x00736269
     100:	74654e56 	strbtvc	r4, [r5], #-3670	; 0xfffff1aa
     104:	682f0049 	stmdavs	pc!, {r0, r3, r6}	; <UNPREDICTABLE>
        p[7] = 0x00;
     108:	2f656d6f 	svccs	0x00656d6f
        break;
     10c:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
        p = (char*)umalloc(26);
     110:	442f6e69 	strtmi	r6, [pc], #-3689	; 118 <_Min_Stack_Size+0x18>
        strcpy(p + 6, messagePtr->messageRecord);
     114:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
     118:	4f2f706f 	svcmi	0x002f706f
        strcpy(p + 8, messagePtr->messageRecord);
     11c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
        p = (char*)umalloc(28);
     120:	502f5445 	eorpl	r5, pc, r5, asr #8
     124:	534f4349 	movtpl	r4, #62281	; 0xf349
     128:	6369502f 	cmnvs	r9, #47	; 0x2f
        p[7] = 0x00;
     12c:	6b2f534f 	blvs	bd4e70 <__ccfg+0xbb4ec8>
     130:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
        strcpy(p + 8, messagePtr->messageRecord);
     134:	682f006c 	stmdavs	pc!, {r2, r3, r5, r6}	; <UNPREDICTABLE>
    switch(messageType) 
     138:	2f656d6f 	svccs	0x00656d6f
int getPacketSize(char messageType) {
     13c:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
     140:	442f6e69 	strtmi	r6, [pc], #-3689	; 148 <getPacketSize+0x10>
}
     144:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
     148:	4f2f706f 	svcmi	0x002f706f
fsm transmitter (message * messagePtr) {
     14c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
     150:	502f5445 	eorpl	r5, pc, r5, asr #8
     154:	534f4349 	movtpl	r4, #62281	; 0xf349
}
     158:	6369502f 	cmnvs	r9, #47	; 0x2f
     15c:	562f534f 	strtpl	r5, [pc], -pc, asr #6
fsm transmitter (message * messagePtr) {
     160:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
        char * assembledMessage = assembleMessage(messagePtr);
     164:	756c502f 	strbvc	r5, [ip, #-47]!	; 0xffffffd1
     168:	6c754e67 	ldclvs	14, cr4, [r5], #-412	; 0xfffffe64
     16c:	6100006c 	tstvs	r0, ip, rrx
        spkt = tcv_wnp (Transmit_Message, sfd,  getPacketSize(messagePtr->messageType));
     170:	632e7070 			; <UNDEFINED> instruction: 0x632e7070
     174:	00000063 	andeq	r0, r0, r3, rrx
     178:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
     17c:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
     180:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
        spkt [0] = 0;
     184:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
        strcpy(p, assembledMessage);
     188:	00010068 	andeq	r0, r1, r8, rrx
        tcv_endp (spkt);
     18c:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
     190:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
}
     194:	00020068 	andeq	r0, r2, r8, rrx
        finish;
     198:	79745f00 	ldmdbvc	r4!, {r8, r9, sl, fp, ip, lr}^
     19c:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
     1a0:	00030068 	andeq	r0, r3, r8, rrx
char randomNumber() {
     1a4:	65657200 	strbvs	r7, [r5, #-512]!	; 0xfffffe00
   srand((unsigned) time(&t));
     1a8:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     1ac:	00000300 	andeq	r0, r0, r0, lsl #6
   return (char)rand();
     1b0:	6b636f6c 	blvs	18dbf68 <__ccfg+0x18bbfc0>
}
     1b4:	0300682e 	movweq	r6, #2094	; 0x82e
     1b8:	735f0000 	cmpvc	pc, #0
fsm find {
     1bc:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
     1c0:	00682e74 	rsbeq	r2, r8, r4, ror lr
     1c4:	74000003 	strvc	r0, [r0], #-3
     1c8:	73657079 	cmnvc	r5, #121	; 0x79
        i = 0;
     1cc:	0300682e 	movweq	r6, #2094	; 0x82e
     1d0:	74730000 	ldrbtvc	r0, [r3], #-0
        sendCount = 0;
     1d4:	67726164 	ldrbvs	r6, [r2, -r4, ror #2]!
        currentRequestNumber = randomNumber();
     1d8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
        messagePtr -> senderGroupId = groupId;
     1dc:	72610000 	rsbvc	r0, r1, #0
     1e0:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
     1e4:	00000400 	andeq	r0, r0, r0, lsl #8
     1e8:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
        messagePtr -> requestNumber = currentRequestNumber;
     1ec:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
     1f0:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
        messagePtr -> senderId = nodeId;
     1f4:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
     1f8:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
     1fc:	00000400 	andeq	r0, r0, r0, lsl #8
        if(sendCount == 2) {
     200:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
     204:	5f736e6f 	svcpl	0x00736e6f
            proceed Display_Neighbours;
     208:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
        call transmitter(messagePtr, Wait);
     20c:	00040068 	andeq	r0, r4, r8, rrx
     210:	73797300 	cmnvc	r9, #0, 6
     214:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
     218:	00000500 	andeq	r0, r0, r0, lsl #10
     21c:	5f766374 	svcpl	0x00766374
     220:	73666564 	cmnvc	r6, #100, 10	; 0x19000000
        sendCount++;
     224:	0600682e 	streq	r6, [r0], -lr, lsr #16
        delay(3*1024, Send_Discovery_Request);
     228:	656b0000 	strbvs	r0, [fp, #-0]!
     22c:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
     230:	0700682e 	streq	r6, [r0, -lr, lsr #16]
        ser_outf(Display_Neighbours, "Neighbours:");
     234:	6c700000 	ldclvs	0, cr0, [r0], #-0
     238:	6e5f6775 	mrcvs	7, 2, r6, cr15, cr5, {3}
        if (neighbours[i] == 1) {
     23c:	2e6c6c75 	mcrcs	12, 3, r6, cr12, cr5, {3}
     240:	00080068 	andeq	r0, r8, r8, rrx
     244:	75623c00 	strbvc	r3, [r2, #-3072]!	; 0xfffff400
            ser_outf(Display_Neighbour, " %d", i);
     248:	2d746c69 	ldclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
     24c:	003e6e69 	eorseq	r6, lr, r9, ror #28
        i++;
     250:	00000000 	andeq	r0, r0, r0
     254:	05002e05 	streq	r2, [r0, #-3589]	; 0xfffff1fb
            proceed Display_Neighbour;
     258:	0000c802 	andeq	ip, r0, r2, lsl #16
     25c:	013f0300 	teqeq	pc, r0, lsl #6
}
     260:	14130505 	ldrne	r0, [r3], #-1285	; 0xfffffafb
        finish;
     264:	0f062e05 	svceq	0x00062e05
}
     268:	0609052e 	streq	r0, [r9], -lr, lsr #10
     26c:	061e0589 	ldreq	r0, [lr], -r9, lsl #11
     270:	06090501 	streq	r0, [r9], -r1, lsl #10
     274:	0305054b 	movweq	r0, #21835	; 0x554b
     278:	0a050117 	beq	1406dc <__ccfg+0x120734>
     27c:	01050106 	tsteq	r5, r6, lsl #2
     280:	030a0527 	movweq	r0, #42279	; 0xa527
     284:	05052079 	streq	r2, [r5, #-121]	; 0xffffff87
     288:	16052106 	strne	r2, [r5], -r6, lsl #2
     28c:	0a050106 	beq	1406ac <__ccfg+0x120704>
     290:	06050520 	streq	r0, [r5], -r0, lsr #10
     294:	06160521 	ldreq	r0, [r6], -r1, lsr #10
fsm root {
     298:	200a0501 	andcs	r0, sl, r1, lsl #10
     29c:	21060505 	tstcs	r6, r5, lsl #10
     2a0:	01061605 	tsteq	r6, r5, lsl #12
     2a4:	05200a05 	streq	r0, [r0, #-2565]!	; 0xfffff5fb
     2a8:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
     2ac:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
     2b0:	0505200a 	streq	r2, [r5, #-10]
     2b4:	01052206 	tsteq	r5, r6, lsl #4
     2b8:	09051306 	stmdbeq	r5, {r1, r2, r8, r9, ip}
     2bc:	20660306 	rsbcs	r0, r6, r6, lsl #6
     2c0:	01061e05 	tsteq	r6, r5, lsl #28
     2c4:	053e1a05 	ldreq	r1, [lr, #-2565]!	; 0xfffff5fb
     2c8:	09051e1e 	stmdbeq	r5, {r1, r2, r3, r4, r9, sl, fp, ip}
        recordCount = 0;
     2cc:	0e052206 	cdpeq	2, 0, cr2, cr5, cr6, {0}
        nodeId = 1;
     2d0:	09050106 	stmdbeq	r5, {r1, r2, r8}
     2d4:	0e052106 	adfeqs	f2, f5, f6
        groupId = 1;
     2d8:	09050106 	stmdbeq	r5, {r1, r2, r8}
     2dc:	05232f06 	streq	r2, [r3, #-3846]!	; 0xfffff0fa
        messagePtr = (message *) umalloc(sizeof(message));
     2e0:	0501061e 	streq	r0, [r1, #-1566]	; 0xfffff9e2
        phys_cc1350(0, MAX_PACKET_LENGTH);
     2e4:	1e053d09 	cdpne	13, 0, cr3, cr5, cr9, {0}
     2e8:	0609051f 			; <UNDEFINED> instruction: 0x0609051f
     2ec:	06270621 	strteq	r0, [r7], -r1, lsr #12
        tcv_plug(0, &plug_null);
     2f0:	1e051c2f 	cdpne	12, 0, cr1, cr5, cr15, {1}
     2f4:	1a050106 	bne	140714 <__ccfg+0x12076c>
        sfd = tcv_open(WNONE, 0, 0);
     2f8:	1f1e053d 	svcne	0x001e053d
     2fc:	21060905 	tstcs	r6, r5, lsl #18
     300:	01060e05 	tsteq	r6, r5, lsl #28
		tcv_control(sfd, PHYSOPT_ON, NULL);
     304:	21060905 	tstcs	r6, r5, lsl #18
        sfd = tcv_open(WNONE, 0, 0);
     308:	01060e05 	tsteq	r6, r5, lsl #28
		tcv_control(sfd, PHYSOPT_ON, NULL);
     30c:	05210905 	streq	r0, [r1, #-2309]!	; 0xfffff6fb
		if (sfd < 0) {
     310:	09051f0e 	stmdbeq	r5, {r1, r2, r3, r8, r9, sl, fp, ip}
			diag("Cannot open tcv interface");
     314:	02022106 	andeq	r2, r2, #-2147483647	; 0x80000001
     318:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
			halt();
     31c:	02050025 	andeq	r0, r5, #37	; 0x25
        currentProtocol = IDLE;
     320:	00000138 	andeq	r0, r0, r8, lsr r1
     324:	0100f003 	tsteq	r0, r3	; <UNPREDICTABLE>
        ser_outf(Menu_Header, "\r\nGroup %d Device #%d (%d/%d records)\r\n", groupId, nodeId, recordCount, MAX_RECORDS);
     328:	14130505 	ldrne	r0, [r3], #-1285	; 0xfffffafb
     32c:	1d062505 	cfstr32ne	mvfx2, [r6, #-20]	; 0xffffffec
     330:	03060505 	movweq	r0, #25861	; 0x6505
     334:	01054a18 	tsteq	r5, r8, lsl sl
     338:	05021306 	streq	r1, [r2, #-774]	; 0xfffffcfa
     33c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
        ser_outf(Options, menu);
     340:	02050021 	andeq	r0, r5, #33	; 0x21
     344:	0000014c 	andeq	r0, r0, ip, asr #2
        ser_inf(Get_Choice, "%c", &choice);
     348:	01018e03 	tsteq	r1, r3, lsl #28
     34c:	05012305 	streq	r2, [r1, #-773]	; 0xfffffcfb
     350:	21050158 	tstcs	r5, r8, asr r1
        switch (choice)
     354:	58050106 	stmdapl	r5, {r1, r2, r8}
     358:	06130520 	ldreq	r0, [r3], -r0, lsr #10
     35c:	054a1103 	strbeq	r1, [sl, #-259]	; 0xfffffefd
     360:	05010601 	streq	r0, [r1, #-1537]	; 0xfffff9ff
     364:	4f052e13 	svcmi	0x00052e13
     368:	052e6f03 	streq	r6, [lr, #-3843]!	; 0xfffff0fd
     36c:	09052e2d 	stmdbeq	r5, {r0, r2, r3, r5, r9, sl, fp, sp}
     370:	23052306 	movwcs	r2, #21254	; 0x5306
     374:	10050106 	andne	r0, r5, r6, lsl #2
     378:	1b230541 	blne	8c1884 <__ccfg+0x8a18dc>
     37c:	22060905 	andcs	r0, r6, #81920	; 0x14000
     380:	06100515 			; <UNDEFINED> instruction: 0x06100515
        proceed Menu_Header;
     384:	06090501 	streq	r0, [r9], -r1, lsl #10
     388:	0514069f 	ldreq	r0, [r4, #-1695]	; 0xfffff961
        ser_outf(Set_Group_ID, "New Group ID: ");
     38c:	09051e12 	stmdbeq	r5, {r1, r4, r9, sl, fp, ip}
     390:	30132f06 	andscc	r2, r3, r6, lsl #30
        ser_inf(Get_Group_ID, "%d", &groupId);
     394:	0601053f 			; <UNDEFINED> instruction: 0x0601053f
     398:	2d090513 	cfstr32cs	mvfx0, [r9, #-76]	; 0xffffffb4
        proceed Menu_Header;
     39c:	01000702 	tsteq	r0, r2, lsl #14
     3a0:	00150501 	andseq	r0, r5, r1, lsl #10
        ser_outf(Set_Node_ID, "New node ID (1-25):");
     3a4:	01a40205 			; <UNDEFINED> instruction: 0x01a40205
     3a8:	a7030000 	strge	r0, [r3, -r0]
        ser_inf(Get_Node_ID, "%d", &nodeId);
     3ac:	04050101 	streq	r0, [r5], #-257	; 0xfffffeff
     3b0:	15051513 	strne	r1, [r5, #-1299]	; 0xfffffaed
     3b4:	05240e06 	streq	r0, [r4, #-3590]!	; 0xfffff1fa
    if (node < 1 || node > 25) {
     3b8:	30063c04 	andcc	r3, r6, r4, lsl #24
     3bc:	01061105 	tsteq	r6, r5, lsl #2
            proceed Set_Node_ID;
     3c0:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
        proceed Menu_Header;
     3c4:	01010004 	tsteq	r1, r4
     3c8:	05001a05 	streq	r1, [r0, #-2565]	; 0xfffff5fb
        call find(Menu_Header);
     3cc:	0001bc02 	andeq	fp, r1, r2, lsl #24
     3d0:	01b90300 			; <UNDEFINED> instruction: 0x01b90300
     3d4:	011c0501 	tsteq	ip, r1, lsl #10
     3d8:	01061a05 	tsteq	r6, r5, lsl #20
     3dc:	83060505 	movwhi	r0, #25861	; 0x6505
            proceed Set_Node_ID;
     3e0:	15090513 	strne	r0, [r9, #-1299]	; 0xfffffaed
            break;
     3e4:	01060b05 	tsteq	r6, r5, lsl #22
            proceed Set_Node_ID;
     3e8:	3d060905 	vstrcc.16	s0, [r6, #-10]	; <UNPREDICTABLE>
            proceed Find_Neighbours;
     3ec:	01061305 	tsteq	r6, r5, lsl #6
            proceed Create_Record;
     3f0:	2f060905 	svccs	0x00060905
            proceed Delete_Record;
     3f4:	01062005 	tsteq	r6, r5
            proceed Retrieve_Record;
     3f8:	052e1e05 	streq	r1, [lr, #-3589]!	; 0xfffff1fb
            diag("Reset Local Storage");
     3fc:	1e052214 	mcrne	2, 0, r2, cr5, cr4, {0}
            break;
     400:	0609051e 			; <UNDEFINED> instruction: 0x0609051e
            diag("Reset Local Storage");
     404:	06250522 	strteq	r0, [r5], -r2, lsr #10
        currentProtocol = CREATE_RECORD;
     408:	20140501 	andscs	r0, r4, r1, lsl #10
        ser_outf(Create_Record, "Receiver node ID (1-25):");
     40c:	05202505 	streq	r2, [r0, #-1285]!	; 0xfffffafb
     410:	053d0609 	ldreq	r0, [sp, #-1545]!	; 0xfffff9f7
        ser_inf(Get_Receiver_Node, "%d", &receiverId);
     414:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
     418:	23052125 	movwcs	r2, #20773	; 0x5125
     41c:	0609051f 			; <UNDEFINED> instruction: 0x0609051f
    if (node < 1 || node > 25) {
     420:	06140521 	ldreq	r0, [r4], -r1, lsr #10
     424:	20250501 	eorcs	r0, r5, r1, lsl #10
            proceed Create_Record;
     428:	21060905 	tstcs	r6, r5, lsl #18
     42c:	01062005 	tsteq	r6, r5
        ser_in(Get_Message, messagePtr->messageRecord, RECORD_LENGTH);
     430:	05201405 	streq	r1, [r0, #-1029]!	; 0xfffffbfb
     434:	25052020 	strcs	r2, [r5, #-32]	; 0xffffffe0
     438:	1f200521 	svcne	0x00200521
        if(strlen(messagePtr->messageRecord) >= RECORD_LENGTH) {
     43c:	21060905 	tstcs	r6, r5, lsl #18
     440:	06160515 			; <UNDEFINED> instruction: 0x06160515
     444:	200b0501 	andcs	r0, fp, r1, lsl #10
            messagePtr->messageRecord[RECORD_LENGTH - 1] = '/0';
     448:	3d060d05 	stccc	13, cr0, [r6, #-20]	; 0xffffffec
        proceed Transmit_Message;
     44c:	053f0905 	ldreq	r0, [pc, #-2309]!	; fffffb4f <_estack+0xdfffab4f>
            messagePtr->messageRecord[RECORD_LENGTH - 1] = '/0';
     450:	1205010e 	andne	r0, r5, #-2147483645	; 0x80000003
        proceed Transmit_Message;
     454:	11050106 	tstne	r5, r6, lsl #2
        currentProtocol = DELETE_RECORD;
     458:	06540582 	ldrbeq	r0, [r4], -r2, lsl #11
        ser_outf(Retrieve_Record, "Delete Record from Neighbour:\n\r");
     45c:	2e6d0520 	cdpcs	5, 6, cr0, cr13, cr0, {1}
        currentProtocol = DELETE_RECORD;
     460:	05130905 	ldreq	r0, [r3, #-2309]	; 0xfffff6fb
        ser_outf(Retrieve_Record, "Delete Record from Neighbour:\n\r");
     464:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
        proceed Get_Receiving_Node;
     468:	5b3f0609 	blpl	fc1c94 <__ccfg+0xfa1cec>
        currentProtocol = RETRIEVE_RECORD;
     46c:	0617054d 	ldreq	r0, [r7], -sp, asr #10
        ser_outf(Retrieve_Record, "Retrieve Record from Neighbour:\n\r");
     470:	3c0c0501 	cfstr32cc	mvfx0, [ip], {1}
        currentProtocol = RETRIEVE_RECORD;
     474:	3d060d05 	stccc	13, cr0, [r6, #-20]	; 0xffffffec
        ser_outf(Retrieve_Record, "Retrieve Record from Neighbour:\n\r");
     478:	054d0905 	strbeq	r0, [sp, #-2309]	; 0xfffff6fb
        ser_outf(Prompt_Recieving_Node, "Neighbour node ID (1-25):");
     47c:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
     480:	0a05300b 	beq	14c4b4 <__ccfg+0x12c50c>
        ser_inf(Get_Receiving_Node, "%d", &receiverId);
     484:	0609051e 			; <UNDEFINED> instruction: 0x0609051e
     488:	060b0522 	streq	r0, [fp], -r2, lsr #10
     48c:	060d0501 	streq	r0, [sp], -r1, lsl #10
    if (node < 1 || node > 25) {
     490:	3f090521 	svccc	0x00090521
     494:	14060105 	strne	r0, [r6], #-261	; 0xfffffefb
            proceed Prompt_Recieving_Node;
     498:	052c0905 	streq	r0, [ip, #-2309]!	; 0xfffff6fb
        ser_outf(Prompt_Record_Index, "Record index:");
     49c:	053e0613 	ldreq	r0, [lr, #-1555]!	; 0xfffff9ed
     4a0:	05010601 	streq	r0, [r1, #-1537]	; 0xfffff9ff
        char desiredRecordIndex = -1;
     4a4:	16022e13 			; <UNDEFINED> instruction: 0x16022e13
        ser_inf(Get_Record_Index, "%d", &desiredRecordIndex);
     4a8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     4ac:	02050017 	andeq	r0, r5, #23
        char desiredRecordIndex = -1;
     4b0:	00000000 	andeq	r0, r0, r0
        ser_inf(Get_Record_Index, "%d", &desiredRecordIndex);
     4b4:	0101b003 	tsteq	r1, r3
        messagePtr->recordIndex = desiredRecordIndex;
     4b8:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
     4bc:	1505010a 	strne	r0, [r5, #-266]	; 0xfffffef6
     4c0:	060e0501 	streq	r0, [lr], -r1, lsl #10
        proceed Transmit_Message;
     4c4:	21170501 	tstcs	r7, r1, lsl #10
        messagePtr -> senderGroupId = groupId;
     4c8:	2e060905 	vmlacs.f16	s0, s12, s10	; <UNPREDICTABLE>
     4cc:	11061f05 	tstne	r6, r5, lsl #30
     4d0:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
        messagePtr -> messageType = currentProtocol;
     4d4:	1d052117 	stfnes	f2, [r5, #-92]	; 0xffffffa4
     4d8:	15052d06 	strne	r2, [r5, #-3334]	; 0xfffff2fa
        messagePtr -> requestNumber = randomNumber();
     4dc:	06050501 	streq	r0, [r5], -r1, lsl #10
        messagePtr -> senderId = nodeId;
     4e0:	23010501 	movwcs	r0, #5377	; 0x1501
     4e4:	01000402 	tsteq	r0, r2, lsl #8
        call transmitter(messagePtr, Menu_Header);
     4e8:	00220501 	eoreq	r0, r2, r1, lsl #10
        messagePtr -> destinationId = receiverId;
     4ec:	00000205 	andeq	r0, r0, r5, lsl #4
     4f0:	ee030000 	cdp	0, 0, cr0, cr3, cr0, {0}
        call transmitter(messagePtr, Menu_Header);
     4f4:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
     4f8:	06080513 			; <UNDEFINED> instruction: 0x06080513
     4fc:	25010501 	strcs	r0, [r1, #-1281]	; 0xfffffaff
     500:	01000502 	tsteq	r0, r2, lsl #10
     504:	001a0501 	andseq	r0, sl, r1, lsl #10
     508:	02980205 	addseq	r0, r8, #1342177280	; 0x50000000
     50c:	f6030000 			; <UNDEFINED> instruction: 0xf6030000
     510:	1c050101 	stfnes	f0, [r5], {1}
     514:	061a0501 	ldreq	r0, [sl], -r1, lsl #10
     518:	06050501 	streq	r0, [r5], -r1, lsl #10
     51c:	0a039208 	beq	e4d44 <__ccfg+0xc4d9c>
     520:	15090501 	strne	r0, [r9, #-1281]	; 0xfffffaff
     524:	01061505 	tsteq	r6, r5, lsl #10
     528:	05301005 	ldreq	r1, [r0, #-5]!
     52c:	09051e15 	stmdbeq	r5, {r0, r2, r4, r9, sl, fp, ip}
     530:	10052206 	andne	r2, r5, r6, lsl #4
     534:	09050106 	stmdbeq	r5, {r1, r2, r8}
     538:	11052f06 	tstne	r5, r6, lsl #30
     53c:	2c050106 	stfcss	f0, [r5], {6}
     540:	1e110522 	cfmul64ne	mvdx0, mvdx1, mvdx2
     544:	22060905 	andcs	r0, r6, #81920	; 0x14000
     548:	01062c05 	tsteq	r6, r5, lsl #24
     54c:	052e1405 	streq	r1, [lr, #-1029]!	; 0xfffffbfb
     550:	14052309 	strne	r2, [r5], #-777	; 0xfffffcf7
     554:	0609051d 			; <UNDEFINED> instruction: 0x0609051d
     558:	054d3f23 	strbeq	r3, [sp, #-3875]	; 0xfffff0dd
     55c:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
     560:	0305660d 	movweq	r6, #22029	; 0x560d
     564:	2d0d0521 	cfstr32cs	mvfx0, [sp, #-132]	; 0xffffff7c
     568:	21060305 	tstcs	r6, r5, lsl #6
static void devinit_uart (int devnum) {
     56c:	06060531 			; <UNDEFINED> instruction: 0x06060531
	adddevfunc (ioreq_uart_a, devnum);
     570:	06040501 	streq	r0, [r4], -r1, lsl #10
     574:	09053d3d 	stmdbeq	r5, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
void udelay (volatile word n) {
     578:	06190532 			; <UNDEFINED> instruction: 0x06190532
     57c:	2f090501 	svccs	0x00090501
	while (n) {
     580:	051f1905 	ldreq	r1, [pc, #-2309]	; fffffc83 <_estack+0xdfffac83>
     584:	cb210609 	blgt	841db0 <__ccfg+0x821e08>
}
     588:	0368144d 	cmneq	r8, #1291845632	; 0x4d000000
	while (n--);
     58c:	4074082c 	rsbsmi	r0, r4, ip, lsr #16
     590:	4d405a4c 	vstrmi	s11, [r0, #-304]	; 0xfffffed0
     594:	03050568 	movweq	r0, #21864	; 0x5568
		n--;
     598:	05017f8a 	streq	r7, [r1, #-3978]	; 0xfffff076
     59c:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
     5a0:	09052008 	stmdbeq	r5, {r3, sp}
void mdelay (volatile word n) {
     5a4:	0d053d06 	stceq	13, cr3, [r5, #-24]	; 0xffffffe8
     5a8:	0100f603 	tsteq	r0, r3, lsl #12	; <UNPREDICTABLE>
	while (n) {
     5ac:	403f0905 	eorsmi	r0, pc, r5, lsl #18
     5b0:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
}
     5b4:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
		udelay (999);
     5b8:	4a057411 	bmi	15d604 <__ccfg+0x13d65c>
     5bc:	0d052006 	stceq	0, cr2, [r5, #-24]	; 0xffffffe8
		n--;
     5c0:	2e7fbf03 	cdpcs	15, 7, cr11, cr15, cr3, {0}
     5c4:	2f062506 	svccs	0x00062506
     5c8:	3333331f 	teqcc	r3, #2080374784	; 0x7c000000
     5cc:	25063333 	strcs	r3, [r6, #-819]	; 0xfffffccd
void __pi_ondomain (lword d) {
     5d0:	051f2f06 	ldreq	r2, [pc, #-3846]	; fffff6d2 <_estack+0xdfffa6d2>
     5d4:	2e1e0363 	cdpcs	3, 1, cr0, cr14, cr3, {3}
		if (__pi_systat.effpdm > 1)
     5d8:	05190905 	ldreq	r0, [r9, #-2309]	; 0xfffff6fb
     5dc:	05010619 	streq	r0, [r1, #-1561]	; 0xfffff9e7
			__pi_systat.effpdm = 1;
     5e0:	19052f09 	stmdbne	r5, {r0, r3, r8, r9, sl, fp, sp}
	PRCMPowerDomainOn (d);
     5e4:	0609052d 	streq	r0, [r9], -sp, lsr #10
     5e8:	05683121 	strbeq	r3, [r8, #-289]!	; 0xfffffedf
     5ec:	7ef50305 	cdpvc	3, 15, cr0, cr5, cr5, {0}
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     5f0:	06120501 	ldreq	r0, [r2], -r1, lsl #10
     5f4:	20080501 	andcs	r0, r8, r1, lsl #10
     5f8:	3d060905 	vstrcc.16	s0, [r6, #-10]	; <UNPREDICTABLE>
	__pi_systat.ondmns |= d;
     5fc:	8b030d05 	blhi	c3a18 <__ccfg+0xa3a70>
     600:	09050101 	stmdbeq	r5, {r0, r8}
}
     604:	06270540 	strteq	r0, [r7], -r0, asr #10
     608:	20090501 	andcs	r0, r9, r1, lsl #10
void __pi_offdomain (lword d) {
     60c:	05202705 	streq	r2, [r0, #-1797]!	; 0xfffff8fb
     610:	4c062009 	stcmi	0, cr2, [r6], {9}
	PRCMPowerDomainOff (d);
     614:	01062305 	tsteq	r6, r5, lsl #6
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     618:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
     61c:	0d053c0b 	stceq	12, cr3, [r5, #-44]	; 0xffffffd4
     620:	2f052206 	svccs	0x00052206
	if (d & PRCM_DOMAIN_RFCORE) {
     624:	09050106 	stmdbeq	r5, {r1, r2, r8}
     628:	2b2f053f 	blcs	bc1b2c <__ccfg+0xba1b84>
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     62c:	31060905 	tstcc	r6, r5, lsl #18
     630:	06190533 			; <UNDEFINED> instruction: 0x06190533
			__pi_systat.effpdm = __pi_systat.reqpdm;
     634:	2f090501 	svccs	0x00090501
     638:	052d1905 	streq	r1, [sp, #-2309]!	; 0xfffff6fb
	__pi_systat.ondmns &= ~d;
     63c:	2f210609 	svccs	0x00210609
     640:	0619053f 			; <UNDEFINED> instruction: 0x0619053f
}
     644:	2f090501 	svccs	0x00090501
     648:	052d1905 	streq	r1, [sp, #-2309]!	; 0xfffff6fb
void __pi_syserror (word ec, const char *m) {
     64c:	31210609 			; <UNDEFINED> instruction: 0x31210609
	diag ("SYSERR: %x, %s", ec, m);
     650:	0505684d 	streq	r6, [r5, #-2125]	; 0xfffff7b3
     654:	017ed603 	cmneq	lr, r3, lsl #12
     658:	01061205 	tsteq	r6, r5, lsl #4
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     65c:	05200805 	streq	r0, [r0, #-2053]!	; 0xfffff7fb
     660:	053d0609 	ldreq	r0, [sp, #-1545]!	; 0xfffff9f7
     664:	01aa030d 			; <UNDEFINED> instruction: 0x01aa030d
		all_leds_blink;
     668:	40090501 	andmi	r0, r9, r1, lsl #10
     66c:	060e054d 	streq	r0, [lr], -sp, asr #10
     670:	21090501 	tstcs	r9, r1, lsl #10
     674:	05490e05 	strbeq	r0, [r9, #-3589]	; 0xfffff1fb
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     678:	2f2f0609 	svccs	0x002f0609
     67c:	01062105 	tsteq	r6, r5, lsl #2
     680:	054c0905 	strbeq	r0, [ip, #-2309]	; 0xfffff6fb
     684:	09051e21 	stmdbeq	r5, {r0, r5, r9, sl, fp, ip}
     688:	05322206 	ldreq	r2, [r2, #-518]!	; 0xfffffdfa
     68c:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
	while (1) {
     690:	14052025 	strne	r2, [r5], #-37	; 0xffffffdb
     694:	20250520 	eorcs	r0, r5, r0, lsr #10
     698:	3d060905 	vstrcc.16	s0, [r6, #-10]	; <UNPREDICTABLE>
     69c:	01062305 	tsteq	r6, r5, lsl #6
void tci_run_delay_timer () {
     6a0:	05201405 	streq	r1, [r0, #-1029]!	; 0xfffffbfb
	setdel = __pi_mintk - __pi_old;
     6a4:	09052023 	stmdbeq	r5, {r0, r1, r5, sp}
     6a8:	14052f06 	strne	r2, [r5], #-3846	; 0xfffff0fa
     6ac:	27050106 	strcs	r0, [r5, -r6, lsl #2]
     6b0:	2f200520 	svccs	0x00200520
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     6b4:	051f2505 	ldreq	r2, [pc, #-1285]	; 1b7 <randomNumber+0x13>
     6b8:	05210609 	streq	r0, [r1, #-1545]!	; 0xfffff9f7
     6bc:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
     6c0:	12052020 	andne	r2, r5, #32
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     6c4:	1d200523 	cfstr32ne	mvfx0, [r0, #-140]!	; 0xffffff74
	sti_tim;
     6c8:	21060905 	tstcs	r6, r5, lsl #18
}
     6cc:	01062505 	tsteq	r6, r5, lsl #10
     6d0:	3e060905 	vmlacc.f16	s0, s12, s10	; <UNPREDICTABLE>
     6d4:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
     6d8:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
     6dc:	01055811 	tsteq	r5, r1, lsl r8
	cli_aux;
     6e0:	0613053d 			; <UNDEFINED> instruction: 0x0613053d
     6e4:	0601052e 	streq	r0, [r1], -lr, lsr #10
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     6e8:	0031022e 	eorseq	r0, r1, lr, lsr #4
     6ec:	155c0101 	ldrbne	r0, [ip, #-257]	; 0xfffffeff
     6f0:	00030000 	andeq	r0, r3, r0
     6f4:	0000029b 	muleq	r0, fp, r2
	sti_aux;
     6f8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
}
     6fc:	0101000d 	tsteq	r1, sp
     700:	00000101 	andeq	r0, r0, r1, lsl #2
     704:	00000100 	andeq	r0, r0, r0, lsl #2
void AONRTCIntHandler () {
     708:	6f682f01 	svcvs	0x00682f01
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     70c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 560 <root+0x2c8>
     710:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     714:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
		if (__pi_utims [0] == 0)
     718:	6f746b73 	svcvs	0x00746b73
     71c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
		if (*(__pi_utims [0])) {
     720:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
     724:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
			(*(__pi_utims [0]))--;
     728:	2f534f43 	svccs	0x00534f43
		if (__pi_utims [1] == 0)
     72c:	4f636950 	svcmi	0x00636950
		if (*(__pi_utims [1])) {
     730:	43432f53 	movtmi	r2, #16211	; 0x3f53
			aux_timer_inactive = 0;
     734:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
			(*(__pi_utims [1]))--;
     738:	6f682f00 	svcvs	0x00682f00
		if (__pi_utims [2] == 0)
     73c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 590 <udelay+0x18>
		if (*(__pi_utims [2])) {
     740:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
			(*(__pi_utims [2]))--;
     744:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
		if (__pi_utims [3] != 0) {
     748:	6f746b73 	svcvs	0x00746b73
			if (*(__pi_utims [3])) {
     74c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
				aux_timer_inactive = 0;
     750:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
				(*(__pi_utims [3]))--;
     754:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
	if (__pi_systat.ledsts) {
     758:	2f534f43 	svccs	0x00534f43
     75c:	4f636950 	svcmi	0x00636950
		if (__pi_systat.ledblc++ == 0) {
     760:	43432f53 	movtmi	r2, #16211	; 0x3f53
     764:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
			if (__pi_systat.ledblk) {
     768:	3143432f 	cmpcc	r3, pc, lsr #6
     76c:	57585833 	smmlarpl	r8, r3, r8, r5
     770:	2f455241 	svccs	0x00455241
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     774:	76697264 	strbtvc	r7, [r9], -r4, ror #4
     778:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
				if (__pi_systat.ledsts & 0x2)
     77c:	682f0062 	stmdavs	pc!, {r1, r5, r6}	; <UNPREDICTABLE>
     780:	2f656d6f 	svccs	0x00656d6f
     784:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
				if (__pi_systat.ledsts & 0x4)
     788:	442f6e69 	strtmi	r6, [pc], #-3689	; 790 <AONRTCIntHandler+0x88>
				__pi_systat.ledblk = 0;
     78c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
     790:	4f2f706f 	svcmi	0x002f706f
			if (__pi_systat.fstblk)
     794:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
     798:	502f5445 	eorpl	r5, pc, r5, asr #8
				__pi_systat.ledblc = 200;
     79c:	534f4349 	movtpl	r4, #62281	; 0xf349
	if (events & AON_RTC_EVFLAGS_CH0) {
     7a0:	6369502f 	cmnvs	r9, #47	; 0x2f
		cli_tim;
     7a4:	502f534f 	eorpl	r5, pc, pc, asr #6
		__pi_new += setdel;
     7a8:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
     7ac:	004f492f 	subeq	r4, pc, pc, lsr #18
		setdel = 0;
     7b0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 6fc <tci_run_auxiliary_timer+0x1c>
		RISE_N_SHINE;
     7b4:	616d2f65 	cmnvs	sp, r5, ror #30
		__pi_new += setdel;
     7b8:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
		RISE_N_SHINE;
     7bc:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     7c0:	706f746b 	rsbvc	r7, pc, fp, ror #8
		aux_timer_inactive = 1;
     7c4:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
     7c8:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
				if (__pi_systat.ledsts & 0x1)
     7cc:	4349502f 	movtmi	r5, #36911	; 0x902f
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     7d0:	502f534f 	eorpl	r5, pc, pc, asr #6
     7d4:	534f6369 	movtpl	r6, #62313	; 0xf369
				if (__pi_systat.ledsts & 0x2)
     7d8:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
     7dc:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
     7e0:	6f736e65 	svcvs	0x00736e65
				if (__pi_systat.ledsts & 0x8)
     7e4:	2f007372 	svccs	0x00007372
				__pi_systat.ledblk = 1;
     7e8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     7ec:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
		if (aux_timer_inactive) {
     7f0:	2f6e6974 	svccs	0x006e6974
			cli_aux;
     7f4:	6b736544 	blvs	1cd9d0c <__ccfg+0x1cb9d64>
     7f8:	2f706f74 	svccs	0x00706f74
     7fc:	4f534c4f 	svcmi	0x00534c4f
     800:	2f54454e 	svccs	0x0054454e
     804:	4f434950 	svcmi	0x00434950
     808:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
     80c:	2f534f63 	svccs	0x00534f63
     810:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
     814:	2f006c65 	svccs	0x00006c65
     818:	2f727375 	svccs	0x00727375
word tci_update_delay_ticks (Boolean force) {
     81c:	2f62696c 	svccs	0x0062696c
	cli_tim;
     820:	2f636367 	svccs	0x00636367
     824:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
	if (setdel) {
     828:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     82c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     830:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
     834:	2f312e32 	svccs	0x00312e32
     838:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     83c:	00656475 	rsbeq	r6, r5, r5, ror r4
				AON_RTC_O_CH0CMP)) - gettav ());
     840:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 78c <AONRTCIntHandler+0x84>
	return NO;
     844:	616d2f65 	cmnvs	sp, r5, ror #30
			setdel = 0;
     848:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     84c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     850:	706f746b 	rsbvc	r7, pc, fp, ror #8
}
     854:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
		sti_tim;
     858:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
		return YES;
     85c:	4349502f 	movtmi	r5, #36911	; 0x902f
     860:	502f534f 	eorpl	r5, pc, pc, asr #6
     864:	534f6369 	movtpl	r6, #62313	; 0xf369
     868:	616d0000 	cmnvs	sp, r0
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     86c:	632e6e69 			; <UNDEFINED> instruction: 0x632e6e69
	UARTDisable (UART0_BASE);
     870:	00000100 	andeq	r0, r0, r0, lsl #2
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     874:	5f737973 	svcpl	0x00737973
	UARTDisable (UART0_BASE);
     878:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
	UARTConfigSetExpClk (UART0_BASE,
     87c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     880:	6d630000 	stclvs	0, cr0, [r3, #-0]
     884:	5f736973 	svcpl	0x00736973
     888:	2e636367 	cdpcs	3, 6, cr6, cr3, cr7, {3}
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     88c:	00010068 	andeq	r0, r1, r8, rrx
     890:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
     894:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     898:	69000002 	stmdbvs	r0, {r1}
     89c:	745f7172 	ldrbvc	r7, [pc], #-370	; 8a4 <__pi_uart_setrate+0x38>
     8a0:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
	urates [0] = rate;
     8a4:	64656c5f 	strbtvs	r6, [r5], #-3167	; 0xfffff3a1
}
     8a8:	00682e73 	rsbeq	r2, r8, r3, ror lr
     8ac:	75000003 	strvc	r0, [r0, #-3]
     8b0:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
     8b4:	00020068 	andeq	r0, r2, r8, rrx
     8b8:	71726900 	cmnvc	r2, r0, lsl #18
     8bc:	7475625f 	ldrbtvc	r6, [r5], #-607	; 0xfffffda1
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     8c0:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
     8c4:	0300682e 	movweq	r6, #2094	; 0x82e
     8c8:	72690000 	rsbvc	r0, r9, #0
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     8cc:	69705f71 	ldmdbvs	r0!, {r0, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     8d0:	65735f6e 	ldrbvs	r5, [r3, #-3950]!	; 0xfffff092
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     8d4:	726f736e 	rsbvc	r7, pc, #-1207959551	; 0xb8000001
     8d8:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
	__pi_uart_setrate (urates [0], __pi_uart);
     8dc:	72700000 	rsbsvc	r0, r0, #0
     8e0:	682e6d63 	stmdavs	lr!, {r0, r1, r5, r6, r8, sl, fp, sp, lr}
     8e4:	00000200 	andeq	r0, r0, r0, lsl #4
     8e8:	5f6e6f61 	svcpl	0x006e6f61
     8ec:	2e637472 	mcrcs	4, 3, r7, cr3, cr2, {3}
     8f0:	00020068 	andeq	r0, r2, r8, rrx
     8f4:	72777000 	rsbsvc	r7, r7, #0
	switch (operation) {
     8f8:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
static int ioreq_uart_a (int operation, char *buf, int len) {
     8fc:	00682e6c 	rsbeq	r2, r8, ip, ror #28
     900:	61000002 	tstvs	r0, r2
     904:	695f6e6f 	ldmdbvs	pc, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^	; <UNPREDICTABLE>
     908:	682e636f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}
     90c:	00000200 	andeq	r0, r0, r0, lsl #4
				*buf++ = uart_a_read;
     910:	65686373 	strbvs	r6, [r8, #-883]!	; 0xfffffc8d
     914:	656c7564 	strbvs	r7, [ip, #-1380]!	; 0xfffffa9c
			while (len && uart_a_char_available) {
     918:	00682e72 	rsbeq	r2, r8, r2, ror lr
     91c:	61000005 	tstvs	r0, r5
     920:	775f6e6f 	ldrbvc	r6, [pc, -pc, ror #28]
			if (len != operation) {
     924:	682e6375 	stmdavs	lr!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}
}
     928:	00000200 	andeq	r0, r0, r0, lsl #4
     92c:	5f6e6f61 	svcpl	0x006e6f61
			uart_a_disable_int;
     930:	6d746162 	ldfvse	f6, [r4, #-392]!	; 0xfffffe78
			if (uart_a_char_available) {
     934:	682e6e6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
				*buf++ = uart_a_read;
     938:	00000200 	andeq	r0, r0, r0, lsl #4
			uart_a_disable_int;
     93c:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     940:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
			if (uart_a_char_available) {
     944:	00000600 	andeq	r0, r0, r0, lsl #12
     948:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
				uart_a_enable_int;
     94c:	0100682e 	tsteq	r0, lr, lsr #16
     950:	616d0000 	cmnvs	sp, r0
				goto Redo_rx;
     954:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     958:	00000100 	andeq	r0, r0, r0, lsl #2
     95c:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
			return -2;
     960:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
     964:	0100682e 	tsteq	r0, lr, lsr #16
				uart_a_write (*buf);
     968:	75620000 	strbvc	r0, [r2, #-0]!
     96c:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
			while (len && uart_a_room_in_tx) {
     970:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     974:	00682e73 	rsbeq	r2, r8, r3, ror lr
     978:	73000001 	movwvc	r0, #1
			if (len != operation) {
     97c:	6f697379 	svcvs	0x00697379
			uart_a_disable_int;
     980:	0700682e 	streq	r6, [r0, -lr, lsr #16]
     984:	656b0000 	strbvs	r0, [fp, #-0]!
			if (uart_a_room_in_tx) {
     988:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
     98c:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
				uart_a_enable_int;
     990:	05000000 	streq	r0, [r0, #-0]
     994:	02050027 	andeq	r0, r5, #39	; 0x27
				*buf++ = uart_a_read;
     998:	0000056c 	andeq	r0, r0, ip, ror #10
			if (uart_a_room_in_tx) {
     99c:	0106fc03 	tsteq	r6, r3, lsl #24	; <UNPREDICTABLE>
				uart_a_write (*buf);
     9a0:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
     9a4:	05100627 	ldreq	r0, [r0, #-1575]	; 0xfffff9d9
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     9a8:	05022202 	streq	r2, [r2, #-514]	; 0xfffffdfe
     9ac:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
			uart_a_enable_int;
     9b0:	0205001f 	andeq	r0, r5, #31
     9b4:	00000578 	andeq	r0, r0, r8, ror r5
     9b8:	05011803 	streq	r1, [r1, #-2051]	; 0xfffff7fd
			return 0;
     9bc:	08053d02 	stmdaeq	r5, {r1, r8, sl, fp, ip, sp}
			if (len == UART_CNTRL_SETRATE) {
     9c0:	06090501 	streq	r0, [r9], -r1, lsl #10
				if (__pi_uart_setrate (*((word*)buf),
     9c4:	3c080501 	cfstr32cc	mvfx0, [r8], {1}
     9c8:	05240105 	streq	r0, [r4, #-261]!	; 0xfffffefb
     9cc:	052b0603 	streq	r0, [fp, #-1539]!	; 0xfffff9fd
				syserror (EREQPAR, "uar");
     9d0:	0d051b02 	vstreq	d1, [r5, #-8]
			syserror (ENOOPER, "uai");
     9d4:	01080501 	tsteq	r8, r1, lsl #10
			if (len == UART_CNTRL_GETRATE) {
     9d8:	01060a05 	tsteq	r6, r5, lsl #20
				return 1;
     9dc:	053c0805 	ldreq	r0, [ip, #-2053]!	; 0xfffff7fb
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     9e0:	05340603 	ldreq	r0, [r4, #-1539]!	; 0xfffff9fd
			syserror (ENOOPER, "uai");
     9e4:	02010604 	andeq	r0, r1, #4, 12	; 0x400000
     9e8:	01010007 	tsteq	r1, r7
     9ec:	05001f05 	streq	r1, [r0, #-3845]	; 0xfffff0fb
     9f0:	0005a402 	andeq	sl, r5, r2, lsl #8
     9f4:	011f0300 	tsteq	pc, r0, lsl #6
     9f8:	053d0205 	ldreq	r0, [sp, #-517]!	; 0xfffffdfb
     9fc:	09050108 	stmdbeq	r5, {r3, r8}
     a00:	08050106 	stmdaeq	r5, {r1, r2, r8}
     a04:	2401053c 	strcs	r0, [r1], #-1340	; 0xfffffac4
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     a08:	39060305 	stmdbcc	r6, {r0, r2, r8, r9}
void UART0IntHandler () {
     a0c:	0604054b 	streq	r0, [r4], -fp, asr #10
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     a10:	00070201 	andeq	r0, r7, r1, lsl #4
     a14:	1e050101 	adfnes	f0, f5, f1
     a18:	d0020500 	andle	r0, r2, r0, lsl #10
     a1c:	03000005 	movweq	r0, #5
     a20:	0205012a 	andeq	r0, r5, #-2147483638	; 0x8000000a
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     a24:	061e0516 			; <UNDEFINED> instruction: 0x061e0516
     a28:	2405050e 	strcs	r0, [r5], #-1294	; 0xfffffaf2
		RISE_N_SHINE;
     a2c:	051c1e05 	ldreq	r1, [ip, #-3589]	; 0xfffff1fb
     a30:	03052405 	movweq	r2, #21509	; 0x5405
		i_trigger (devevent (UART_A, READ));
     a34:	12052206 	andne	r2, r5, #1610612736	; 0x60000000
     a38:	06050106 	streq	r0, [r5], -r6, lsl #2
     a3c:	0604052e 	streq	r0, [r4], -lr, lsr #10
     a40:	06170521 	ldreq	r0, [r7], -r1, lsr #10
     a44:	06020501 	streq	r0, [r2], -r1, lsl #10
     a48:	3b05593f 	blcc	156f4c <__ccfg+0x136fa4>
     a4c:	01080501 	tsteq	r8, r1, lsl #10
     a50:	01060905 	tsteq	r6, r5, lsl #18
     a54:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
     a58:	05300602 	ldreq	r0, [r0, #-1538]!	; 0xfffff9fe
     a5c:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
     a60:	05024b01 	streq	r4, [r2, #-2817]	; 0xfffff4ff
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     a64:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     a68:	0205001f 	andeq	r0, r5, #31
     a6c:	0000060c 	andeq	r0, r0, ip, lsl #12
		i_trigger (devevent (UART_A, WRITE));
     a70:	05013a03 	streq	r3, [r1, #-2563]	; 0xfffff5fd
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     a74:	1f051702 	svcne	0x00051702
     a78:	02050d06 	andeq	r0, r5, #384	; 0x180
		RISE_N_SHINE;
     a7c:	1b1f0525 	blne	7c1f18 <__ccfg+0x7a1f70>
     a80:	06250205 	strteq	r0, [r5], -r5, lsl #4
     a84:	013c053d 	teqeq	ip, sp, lsr r5
		i_trigger (devevent (UART_A, WRITE));
     a88:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
     a8c:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
     a90:	02054a08 	andeq	r4, r5, #8, 20	; 0x8000
     a94:	05053006 	streq	r3, [r5, #-6]
     a98:	03050106 	movweq	r0, #20742	; 0x5106
     a9c:	12054b06 	andne	r4, r5, #6144	; 0x1800
     aa0:	27050106 	strcs	r0, [r5, -r6, lsl #2]
     aa4:	20060520 	andcs	r0, r6, r0, lsr #10
     aa8:	21060405 	tstcs	r6, r5, lsl #8
     aac:	01062405 	tsteq	r6, r5, lsl #8
     ab0:	053c1705 	ldreq	r1, [ip, #-1797]!	; 0xfffff8fb
}
     ab4:	05230602 	streq	r0, [r3, #-1538]!	; 0xfffff9fe
     ab8:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
     abc:	05024b01 	streq	r4, [r2, #-2817]	; 0xfffff4ff
     ac0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     ac4:	02050013 	andeq	r0, r5, #19
void __buttons_setirq (int val) {
     ac8:	00000000 	andeq	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     acc:	0100ce03 	tsteq	r0, r3, lsl #28
     ad0:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     ad4:	051e0613 	ldreq	r0, [lr, #-1555]	; 0xfffff9ed
     ad8:	33062202 	movwcc	r2, #25090	; 0x6202
     adc:	13030536 	movwne	r0, #13622	; 0x3536
		bn = BUTTON_GPIO (__button_list [i]);
     ae0:	04050204 	streq	r0, [r5], #-516	; 0xfffffdfc
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     ae4:	0101f003 	tsteq	r1, r3	; <UNPREDICTABLE>
     ae8:	065c0530 			; <UNDEFINED> instruction: 0x065c0530
     aec:	06040501 	streq	r0, [r4], -r1, lsl #10
     af0:	0a05143e 	beq	145bf0 <__ccfg+0x125c48>
     af4:	00050210 	andeq	r0, r5, r0, lsl r2
     af8:	2d050101 	stfcss	f0, [r5, #-4]
}
     afc:	4c020500 	cfstr32mi	mvfx0, [r2], {-0}
     b00:	03000006 	movweq	r0, #6
     b04:	05010197 	streq	r0, [r1, #-407]	; 0xfffffe69
     b08:	01011402 	tsteq	r1, r2, lsl #8
void __pinlist_setirq (int val) {
     b0c:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
	for (i = 0; i < N_PINLIST; i++) {
     b10:	05017903 	streq	r7, [r1, #-2307]	; 0xfffff6fd
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     b14:	03063502 	movweq	r3, #25858	; 0x6502
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     b18:	03044a09 	movweq	r4, #18953	; 0x4a09
	for (i = 0; i < N_PINLIST; i++) {
     b1c:	b5030305 	strlt	r0, [r3, #-773]	; 0xfffffcfb
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     b20:	0404017f 	streq	r0, [r4], #-383	; 0xfffffe81
     b24:	03062d05 	movweq	r2, #27909	; 0x6d05
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     b28:	042001cb 	strteq	r0, [r0], #-459	; 0xfffffe35
     b2c:	06020501 	streq	r0, [r2], -r1, lsl #10
     b30:	3c7f8f03 	ldclcc	15, cr8, [pc], #-12	; b2c <__pinlist_setirq+0x20>
	for (i = 0; i < N_PINLIST; i++) {
     b34:	01130305 	tsteq	r3, r5, lsl #6
}
     b38:	05040401 	streq	r0, [r4, #-1025]	; 0xfffffbff
     b3c:	00eb0329 	rsceq	r0, fp, r9, lsr #6
     b40:	17050501 	strne	r0, [r5, -r1, lsl #10]
     b44:	01062d05 	tsteq	r6, r5, lsl #26
void GPIOIntHandler () {
     b48:	03050104 	movweq	r0, #20740	; 0x5104
if (buttons_int) {
     b4c:	207f9003 	rsbscs	r9, pc, r3
     b50:	2d050404 	cfstrscs	mvf0, [r5, #-16]
	buttons_disable ();
     b54:	2000f003 	andcs	pc, r0, r3
     b58:	03050104 	movweq	r0, #20740	; 0x5104
	i_trigger ((aword)&__button_list);
     b5c:	7f900306 	svcvc	0x00900306
     b60:	05040420 	streq	r0, [r4, #-1056]	; 0xfffffbe0
     b64:	00eb0329 	rsceq	r0, fp, r9, lsr #6
     b68:	17050501 	strne	r0, [r5, -r1, lsl #10]
     b6c:	01062d05 	tsteq	r6, r5, lsl #26
     b70:	03050104 	movweq	r0, #20740	; 0x5104
     b74:	7f900306 	svcvc	0x00900306
     b78:	01010120 	tsteq	r1, r0, lsr #2
     b7c:	66010101 	strvs	r0, [r1], -r1, lsl #2
     b80:	04012e01 	streq	r2, [r1], #-3585	; 0xfffff1ff
     b84:	03290504 			; <UNDEFINED> instruction: 0x03290504
	RISE_N_SHINE;
     b88:	050101a1 	streq	r0, [r1, #-417]	; 0xfffffe5f
     b8c:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
     b90:	01040106 	tsteq	r4, r6, lsl #2
if (pin_sensor_int) {
     b94:	da030305 	ble	c17b0 <__ccfg+0xa1808>
     b98:	0404207e 	streq	r2, [r4], #-126	; 0xffffff82
	i_trigger ((aword)(&__input_pins));
     b9c:	a6032d05 	strge	r2, [r3], -r5, lsl #26
     ba0:	01042001 	tsteq	r4, r1
     ba4:	03060305 	movweq	r0, #25349	; 0x6305
     ba8:	04207eda 	strteq	r7, [r0], #-3802	; 0xfffff126
     bac:	03290504 			; <UNDEFINED> instruction: 0x03290504
     bb0:	050101a1 	streq	r0, [r1, #-417]	; 0xfffffe5f
     bb4:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
     bb8:	01040106 	tsteq	r4, r6, lsl #2
     bbc:	03060305 	movweq	r0, #25349	; 0x6305
     bc0:	01207eda 	ldrdeq	r7, [r0, -sl]!
     bc4:	01010101 	tsteq	r1, r1, lsl #2
	__pinsen_disable_and_clear;
     bc8:	2e015801 	cdpcs	8, 0, cr5, cr1, cr1, {0}
	RISE_N_SHINE;
     bcc:	02110805 	andseq	r0, r1, #327680	; 0x50000
     bd0:	01010009 	tsteq	r1, r9
     bd4:	05001d05 	streq	r1, [r0, #-3333]	; 0xfffff2fb
}
     bd8:	0006a002 	andeq	sl, r6, r2
     bdc:	029d0300 	addseq	r0, sp, #0, 6
     be0:	16020501 	strne	r0, [r2], -r1, lsl #10
     be4:	0e061d05 	cdpeq	13, 0, cr1, cr6, cr5, {0}
     be8:	05241605 	streq	r1, [r4, #-1541]!	; 0xfffff9fb
void system_init () {
     bec:	16054a09 	strne	r4, [r5], -r9, lsl #20
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     bf0:	2e090520 	cfsh32cs	mvfx0, mvfx9, #16
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     bf4:	23060205 	movwcs	r0, #25093	; 0x6205
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     bf8:	05017603 	streq	r7, [r1, #-1539]	; 0xfffff9fd
     bfc:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
     c00:	2e0d0302 	cdpcs	3, 0, cr0, cr13, cr2, {0}
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     c04:	73032f05 	movwvc	r2, #16133	; 0x3f05
     c08:	032a0520 			; <UNDEFINED> instruction: 0x032a0520
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     c0c:	2f05200a 	svccs	0x0005200a
     c10:	05207603 	streq	r7, [r0, #-1539]!	; 0xfffff9fd
     c14:	2a052e36 	bcs	14c4f4 <__ccfg+0x12c54c>
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     c18:	052e0a03 	streq	r0, [lr, #-2563]!	; 0xfffff5fd
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     c1c:	05230602 	streq	r0, [r3, #-1538]!	; 0xfffff9fe
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     c20:	022f0601 	eoreq	r0, pc, #1048576	; 0x100000
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     c24:	0101000b 	tsteq	r1, fp
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     c28:	05002105 	streq	r2, [r0, #-261]	; 0xfffffefb
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     c2c:	0006e002 	andeq	lr, r6, r2
		pin = (port_confs [i] >> 19) & 0x1f;
     c30:	02aa0300 	adceq	r0, sl, #0, 6
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     c34:	17020501 	strne	r0, [r2, -r1, lsl #10]
		pin = (port_confs [i] >> 19) & 0x1f;
     c38:	1b062105 	blne	189054 <__ccfg+0x1690ac>
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     c3c:	05250205 	streq	r0, [r5, #-517]!	; 0xfffffdfb
     c40:	052e0609 	streq	r0, [lr, #-1545]!	; 0xfffff9f7
     c44:	69031402 	stmdbvs	r3, {r1, sl, ip}
     c48:	06110501 	ldreq	r0, [r1], -r1, lsl #10
		if (port_confs [i] & 0x80)
     c4c:	2e2f0501 	cfsh64cs	mvdx0, mvdx15, #1
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     c50:	17032a05 	strne	r2, [r3, -r5, lsl #20]
     c54:	032f0520 			; <UNDEFINED> instruction: 0x032f0520
		if (port_confs [i] & 0x40)
     c58:	36052069 	strcc	r2, [r5], -r9, rrx
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     c5c:	032a052e 			; <UNDEFINED> instruction: 0x032a052e
     c60:	02052017 	andeq	r2, r5, #23
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     c64:	09052306 	stmdbeq	r5, {r1, r2, r8, r9, sp}
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     c68:	0601052e 	streq	r0, [r1], -lr, lsr #10
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     c6c:	00060213 	andeq	r0, r6, r3, lsl r2
	all_leds_blink;
     c70:	1a050101 	bne	14107c <__ccfg+0x1210d4>
     c74:	08020500 	stmdaeq	r2, {r8, sl}
     c78:	03000007 	movweq	r0, #7
     c7c:	050102b7 	streq	r0, [r1, #-695]	; 0xfffffd49
     c80:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
     c84:	050e061a 	streq	r0, [lr, #-1562]	; 0xfffff9e6
     c88:	0905240b 	stmdbeq	r5, {r0, r1, r3, sl, sp}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     c8c:	0602052e 	streq	r0, [r2], -lr, lsr #10
     c90:	06050532 			; <UNDEFINED> instruction: 0x06050532
     c94:	1e2b0514 	mcrne	5, 1, r0, cr11, cr4, {0}
     c98:	22060205 	andcs	r0, r6, #1342177280	; 0x50000000
     c9c:	01060505 	tsteq	r6, r5, lsl #10
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     ca0:	25060305 	strcs	r0, [r6, #-773]	; 0xfffffcfb
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     ca4:	12051518 	andne	r1, r5, #24, 10	; 0x6000000
     ca8:	06050106 	streq	r0, [r5], -r6, lsl #2
	IntEnable (INT_AON_RTC_COMB);
     cac:	0603052e 	streq	r0, [r3], -lr, lsr #10
     cb0:	06070530 			; <UNDEFINED> instruction: 0x06070530
     cb4:	20060501 	andcs	r0, r6, r1, lsl #10
	__pi_malloc_init ();
     cb8:	2f060405 	svccs	0x00060405
	IntEnable (INT_AON_GPIO_EDGE);
     cbc:	01061705 	tsteq	r6, r5, lsl #14
     cc0:	2f060405 	svccs	0x00060405
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     cc4:	01061705 	tsteq	r6, r5, lsl #14
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     cc8:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
     ccc:	01061205 	tsteq	r6, r5, lsl #4
     cd0:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     cd4:	05220603 	streq	r0, [r2, #-1539]!	; 0xfffff9fd
     cd8:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     cdc:	04052006 	streq	r2, [r5], #-6
     ce0:	17052106 	strne	r2, [r5, -r6, lsl #2]
     ce4:	051f1306 	ldreq	r1, [pc, #-774]	; 9e6 <ioreq_uart_a+0xee>
	urates [0] = UART_RATE / 100;
     ce8:	052f0604 	streq	r0, [pc, #-1540]!	; 6ec <tci_run_auxiliary_timer+0xc>
     cec:	12051403 	andne	r1, r5, #50331648	; 0x3000000
	reinit_uart ();
     cf0:	06050106 	streq	r0, [r5], -r6, lsl #2
	EXTRA_INITIALIZERS;
     cf4:	06030520 	streq	r0, [r3], -r0, lsr #10
     cf8:	06070522 	streq	r0, [r7], -r2, lsr #10
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     cfc:	20060501 	andcs	r0, r6, r1, lsl #10
     d00:	21060405 	tstcs	r6, r5, lsl #8
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     d04:	13061705 	movwne	r1, #26373	; 0x6705
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     d08:	0604051f 			; <UNDEFINED> instruction: 0x0604051f
     d0c:	1403052f 	strne	r0, [r3], #-1327	; 0xfffffad1
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     d10:	01061205 	tsteq	r6, r5, lsl #4
     d14:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
			devinit [i] . init (devinit [i] . param);
     d18:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     d1c:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
     d20:	05052007 	streq	r2, [r5, #-7]
     d24:	18052106 	stmdane	r5, {r1, r2, r8, sp}
	IntEnable (INT_UART0_COMB);
     d28:	051f1306 	ldreq	r1, [pc, #-774]	; a2a <UART0IntHandler+0x22>
     d2c:	042f0605 	strteq	r0, [pc], #-1541	; d34 <system_init+0x148>
}
     d30:	03020505 	movweq	r0, #9477	; 0x2505
	tci_run_auxiliary_timer ();
     d34:	05017da3 	streq	r7, [r1, #-3491]	; 0xfffff25d
		diag ("");
     d38:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
     d3c:	03052e05 	movweq	r2, #24069	; 0x5e05
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     d40:	12053006 	andne	r3, r5, #6
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     d44:	19050106 	stmdbne	r5, {r1, r2, r8}
		diag ("Leftover RAM: %d bytes",
     d48:	3c060520 	cfstr32cc	mvfx0, [r6], {32}
     d4c:	21060405 	tstcs	r6, r5, lsl #8
     d50:	01061305 	tsteq	r6, r5, lsl #6
     d54:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
     d58:	07052f14 	smladeq	r5, r4, pc, r2	; <UNPREDICTABLE>
     d5c:	0605051f 			; <UNDEFINED> instruction: 0x0605051f
     d60:	06080521 	streq	r0, [r8], -r1, lsr #10
     d64:	06060501 	streq	r0, [r6], -r1, lsl #10
     d68:	05040421 	streq	r0, [r4, #-1057]	; 0xfffffbdf
     d6c:	02960329 	addseq	r0, r6, #-1543503872	; 0xa4000000
     d70:	17050501 	strne	r0, [r5, -r1, lsl #10]
     d74:	01062d05 	tsteq	r6, r5, lsl #26
     d78:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
     d7c:	7de60306 	stclvc	3, cr0, [r6, #24]!
     d80:	0614054a 	ldreq	r0, [r4], -sl, asr #10
     d84:	20080501 	andcs	r0, r8, r1, lsl #10
     d88:	21060605 	tstcs	r6, r5, lsl #12
     d8c:	29050404 	stmdbcs	r5, {r2, sl}
     d90:	01029403 	tsteq	r2, r3, lsl #8
     d94:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
     d98:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
     d9c:	06050505 	streq	r0, [r5], -r5, lsl #10
     da0:	4a7de803 	bmi	1f7adb4 <__ccfg+0x1f5ae0c>
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
     da4:	01061405 	tsteq	r6, r5, lsl #8
     da8:	21060605 	tstcs	r6, r5, lsl #12
     dac:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
     db0:	06140513 			; <UNDEFINED> instruction: 0x06140513
     db4:	06060501 	streq	r0, [r6], -r1, lsl #10
     db8:	05010121 	streq	r0, [r1, #-289]	; 0xfffffedf
     dbc:	18051305 	stmdane	r5, {r0, r2, r8, r9, ip}
     dc0:	0a030106 	beq	c11e0 <__ccfg+0xa1238>
}
     dc4:	0604053c 			; <UNDEFINED> instruction: 0x0604053c
__attribute__ ((noreturn)) void __pi_release () {
     dc8:	06130522 	ldreq	r0, [r3], -r2, lsr #10
     dcc:	20070501 	andcs	r0, r7, r1, lsl #10
     dd0:	2f060505 	svccs	0x00060505
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     dd4:	01061805 	tsteq	r6, r5, lsl #16
	check_stack_overflow;
     dd8:	0b050104 	bleq	1411f0 <__ccfg+0x121248>
     ddc:	02cd0306 	sbceq	r0, sp, #402653184	; 0x18000000
     de0:	1a02052e 	bne	822a0 <__ccfg+0x622f8>
	update_n_wake (MAX_WORD, NO);
     de4:	01060505 	tsteq	r6, r5, lsl #10
     de8:	34060305 	strcc	r0, [r6], #-773	; 0xfffffcfb
     dec:	30060c05 	andcc	r0, r6, r5, lsl #24
	for_all_tasks (__pi_curr) {
     df0:	062c0305 	strteq	r0, [ip], -r5, lsl #6
     df4:	060c0522 	streq	r0, [ip], -r2, lsr #10
     df8:	2f0a0501 	svccs	0x000a0501
  __ASM volatile ("cpsid i" : : : "memory");
     dfc:	051f0c05 	ldreq	r0, [pc, #-3077]	; 1ff <find+0x43>
	__SLEEP;
     e00:	0c052203 	sfmeq	f2, 4, [r5], {3}
     e04:	0603051e 			; <UNDEFINED> instruction: 0x0603051e
     e08:	4a01132f 	bmi	45acc <__ccfg+0x25b24>
     e0c:	05190205 	ldreq	r0, [r9, #-517]	; 0xfffffdfb
	system_event_count ++;
     e10:	05130601 	ldreq	r0, [r3, #-1537]	; 0xfffff9ff
     e14:	20450316 	subcs	r0, r5, r6, lsl r3
	switch (__pi_systat.effpdm) {
     e18:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
     e1c:	7dc90306 	stclvc	3, cr0, [r9, #24]
     e20:	0608054a 	streq	r0, [r8], -sl, asr #10
     e24:	06060501 	streq	r0, [r6], -r1, lsl #10
			__WFI ();
     e28:	05040421 	streq	r0, [r4, #-1057]	; 0xfffffbdf
     e2c:	02c20329 	sbceq	r0, r2, #-1543503872	; 0xa4000000
     e30:	17050501 	strne	r0, [r5, -r1, lsl #10]
	check_stack_overflow;
     e34:	01062d05 	tsteq	r6, r5, lsl #26
     e38:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     e3c:	7dba0306 	ldcvc	3, cr0, [sl, #24]!
     e40:	0614054a 	ldreq	r0, [r4], -sl, asr #10
			(__pi_curr->code) (tstate (__pi_curr));
     e44:	20080501 	andcs	r0, r8, r1, lsl #10
			goto Redo;
     e48:	21060605 	tstcs	r6, r5, lsl #12
	for_all_tasks (__pi_curr) {
     e4c:	29050404 	stmdbcs	r5, {r2, sl}
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     e50:	0102c003 	tsteq	r2, r3
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     e54:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
     e58:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     e5c:	06050505 	streq	r0, [r5], -r5, lsl #10
     e60:	4a7dbc03 	bmi	1f6fe74 <__ccfg+0x1f4fecc>
     e64:	01061405 	tsteq	r6, r5, lsl #8
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     e68:	21060605 	tstcs	r6, r5, lsl #12
     e6c:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     e70:	06140513 			; <UNDEFINED> instruction: 0x06140513
     e74:	06060501 	streq	r0, [r6], -r1, lsl #10
			__WFI ();
     e78:	05010121 	streq	r0, [r1, #-289]	; 0xfffffedf
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     e7c:	18051305 	stmdane	r5, {r0, r2, r8, r9, ip}
     e80:	01040106 	tsteq	r4, r6, lsl #2
}
     e84:	03060305 	movweq	r0, #25349	; 0x6305
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     e88:	054a02ce 	strbeq	r0, [sl, #-718]	; 0xfffffd32
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     e8c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     e90:	02300604 	eorseq	r0, r0, #4, 12	; 0x400000
     e94:	01010015 	tsteq	r1, r5, lsl r0
			PRCMPowerDomainOff (__pi_systat.ondmns |
     e98:	05002d05 	streq	r2, [r0, #-3333]	; 0xfffff2fb
     e9c:	00081c02 	andeq	r1, r8, r2, lsl #24
     ea0:	03890300 	orreq	r0, r9, #0, 6
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     ea4:	16020501 	strne	r0, [r2], -r1, lsl #10
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ea8:	0e062d05 	cdpeq	13, 0, cr2, cr6, cr5, {0}
     eac:	05240205 	streq	r0, [r4, #-517]!	; 0xfffffdfb
     eb0:	02052f06 	andeq	r2, r5, #6, 30
     eb4:	0521061f 	streq	r0, [r1, #-1567]!	; 0xfffff9e1
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     eb8:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
     ebc:	03052005 	movweq	r2, #20485	; 0x5005
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     ec0:	20090306 	andcs	r0, r9, r6, lsl #6
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     ec4:	01060605 	tsteq	r6, r5, lsl #12
     ec8:	23060405 	movwcs	r0, #25605	; 0x6405
     ecc:	01061a05 	tsteq	r6, r5, lsl #20
     ed0:	03060205 	movweq	r0, #25093	; 0x6205
     ed4:	052e7ef9 	streq	r7, [lr, #-3833]!	; 0xfffff107
			SysCtrlSetRechargeBeforePowerDown
     ed8:	05010610 	streq	r0, [r1, #-1552]	; 0xfffff9f0
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     edc:	1a052e2e 	bne	14c79c <__ccfg+0x12c7f4>
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     ee0:	3c018703 	stccc	7, cr8, [r1], {3}
     ee4:	2018052f 	andscs	r0, r8, pc, lsr #10
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     ee8:	051f1705 	ldreq	r1, [pc, #-1797]	; 7eb <AONRTCIntHandler+0xe3>
     eec:	200a0309 	andcs	r0, sl, r9, lsl #6
     ef0:	76030d05 	strvc	r0, [r3], -r5, lsl #26
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     ef4:	230b0520 	movwcs	r0, #46368	; 0xb520
     ef8:	051d0d05 	ldreq	r0, [sp, #-3333]	; 0xfffff2fb
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     efc:	134d0604 	movtne	r0, #54788	; 0xd604
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     f00:	19060105 	stmdbne	r6, {r0, r2, r8}
     f04:	29060305 	stmdbcs	r6, {r0, r2, r8, r9}
     f08:	060a052f 	streq	r0, [sl], -pc, lsr #10
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     f0c:	00090201 	andeq	r0, r9, r1, lsl #4
			while (!(AONWUCPowerStatusGet () &
     f10:	33050101 	movwcc	r0, #20737	; 0x5101
			PRCMPowerDomainOn (__pi_systat.ondmns);
     f14:	6c020500 	cfstr32vs	mvfx0, [r2], {-0}
     f18:	03000008 	movweq	r0, #8
     f1c:	050105d3 	streq	r0, [r1, #-1491]	; 0xfffffa2d
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     f20:	05171402 	ldreq	r1, [r7, #-1026]	; 0xfffffbfe
     f24:	79030633 	stmdbvc	r3, {r0, r1, r4, r5, r9, sl}
     f28:	27020501 	strcs	r0, [r2, -r1, lsl #10]
     f2c:	79033305 	stmdbvc	r3, {r0, r2, r8, r9, ip, sp}
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     f30:	2702053c 	smladxcs	r2, ip, r5, r0
     f34:	02043e06 	andeq	r3, r4, #6, 28	; 0x60
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     f38:	d5030505 	strle	r0, [r3, #-1285]	; 0xfffffafb
     f3c:	0104017b 	tsteq	r4, fp, ror r1
			SysCtrlAdjustRechargeAfterPowerDown ();
     f40:	03060205 	movweq	r0, #25093	; 0x6205
			reinit_uart ();
     f44:	060104ab 	streq	r0, [r1], -fp, lsr #9
     f48:	04820903 	streq	r0, [r2], #2307	; 0x903
     f4c:	03240506 			; <UNDEFINED> instruction: 0x03240506
}
     f50:	05017dd9 	streq	r7, [r1, #-3545]	; 0xfffff227
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     f54:	23051705 	movwcs	r1, #22277	; 0x5705
     f58:	01040106 	tsteq	r4, r6, lsl #2
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     f5c:	a5030105 	strge	r0, [r3, #-261]	; 0xfffffefb
     f60:	06042002 	streq	r2, [r4], -r2
     f64:	db032305 	blle	c9b80 <__ccfg+0xa9bd8>
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     f68:	0505207d 	streq	r2, [r5, #-125]	; 0xffffff83
     f6c:	22054f06 	andcs	r4, r5, #6, 30
     f70:	01040106 	tsteq	r4, r6, lsl #2
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     f74:	03060205 	movweq	r0, #25093	; 0x6205
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     f78:	0566029e 	strbeq	r0, [r6, #-670]!	; 0xfffffd62
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     f7c:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     f80:	052f0602 	streq	r0, [pc, #-1538]!	; 986 <ioreq_uart_a+0x8e>
     f84:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     f88:	0101000c 	tsteq	r1, ip
     f8c:	05001c05 	streq	r1, [r0, #-3077]	; 0xfffff3fb
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     f90:	0008c002 	andeq	ip, r8, r2
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     f94:	05ef0300 	strbeq	r0, [pc, #768]!	; 129c <proceed+0x8>
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     f98:	17020501 	strne	r0, [r2, -r1, lsl #10]
     f9c:	24050604 	strcs	r0, [r5], #-1540	; 0xfffff9fc
			PRCMPowerDomainOff (
     fa0:	017df703 	cmneq	sp, r3, lsl #14	; <UNPREDICTABLE>
     fa4:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
	__SLEEP;
     fa8:	04010623 	streq	r0, [r1], #-1571	; 0xfffff9dd
     fac:	03020501 	movweq	r0, #9473	; 0x2501
  __ASM volatile ("cpsie i" : : : "memory");
     fb0:	04200288 	strteq	r0, [r0], #-648	; 0xfffffd78
	goto Redo;
     fb4:	03230506 			; <UNDEFINED> instruction: 0x03230506
     fb8:	04207df8 	strteq	r7, [r0], #-3576	; 0xfffff208
     fbc:	06020501 	streq	r0, [r2], -r1, lsl #10
     fc0:	4a028503 	bmi	a23d4 <__ccfg+0x8242c>
     fc4:	24050604 	strcs	r0, [r5], #-1540	; 0xfffff9fc
     fc8:	017cc903 	cmneq	ip, r3, lsl #18
     fcc:	17172d05 	ldrne	r2, [r7, -r5, lsl #26]
     fd0:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
     fd4:	04010623 	streq	r0, [r1], #-1571	; 0xfffff9dd
     fd8:	06020501 	streq	r0, [r2], -r1, lsl #10
     fdc:	3c03a903 			; <UNDEFINED> instruction: 0x3c03a903
     fe0:	27050604 	strcs	r0, [r5, -r4, lsl #12]
     fe4:	0102ce03 	tsteq	r2, r3, lsl #28
     fe8:	05140505 	ldreq	r0, [r4, #-1285]	; 0xfffffafb
     fec:	04010624 	streq	r0, [r1], #-1572	; 0xfffff9dc
     ff0:	06020501 	streq	r0, [r2], -r1, lsl #10
     ff4:	587db203 	ldmdapl	sp!, {r0, r1, r9, ip, sp, pc}^
     ff8:	01000e02 	tsteq	r0, r2, lsl #28
     ffc:	003d0501 	eorseq	r0, sp, r1, lsl #10
    1000:	08f80205 	ldmeq	r8!, {r0, r2, r9}^
    1004:	8f030000 	svchi	0x00030000
    1008:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    100c:	063d0514 			; <UNDEFINED> instruction: 0x063d0514
    1010:	05052e1e 	streq	r2, [r5, #-3614]	; 0xfffff1e2
    1014:	820b0306 	andhi	r0, fp, #402653184	; 0x18000000
    1018:	01060e05 	tsteq	r6, r5, lsl #28
    101c:	052f0805 	streq	r0, [pc, #-2053]!	; 81f <tci_update_delay_ticks+0x3>
	cli_tim;
    1020:	05051f0e 	streq	r1, [r5, #-3854]	; 0xfffff0f2
    1024:	0a052f06 	beq	14cc44 <__ccfg+0x12cc9c>
    1028:	0612050f 	ldreq	r0, [r2], -pc, lsl #10
	diag ("PicOS halted");
    102c:	2e0f0520 	cfsh32cs	mvfx0, mvfx15, #16
	mdelay (500);
    1030:	34060405 	strcc	r0, [r6], #-1029	; 0xfffffbfb
    1034:	01060705 	tsteq	r6, r5, lsl #14
	setpowermode (2);
    1038:	03060505 	movweq	r0, #25861	; 0x6505
	__PCB = NULL;
    103c:	16052e28 	strne	r2, [r5], -r8, lsr #28
	release;
    1040:	01050106 	tsteq	r5, r6, lsl #2
    1044:	05203403 	streq	r3, [r0, #-1027]!	; 0xfffffbfd
    1048:	7fa00309 	svcvc	0x00a00309
    104c:	0304053c 	movweq	r0, #17724	; 0x453c
int main (void) {
    1050:	0805200b 	stmdaeq	r5, {r0, r1, r3, sp}
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    1054:	030e0521 	movweq	r0, #58657	; 0xe521
    1058:	04052e74 	streq	r2, [r5], #-3700	; 0xfffff18c
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    105c:	3c0b0306 	stccc	3, cr0, [fp], {6}
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    1060:	0608054b 	streq	r0, [r8], -fp, asr #10
	system_init ();
    1064:	2e070501 	cfsh32cs	mvfx0, mvfx7, #1
	tcv_init ();
    1068:	30060505 	andcc	r0, r6, r5, lsl #10
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    106c:	2404054b 	strcs	r0, [r4], #-1355	; 0xfffffab5
    1070:	03060b05 	movweq	r0, #27397	; 0x6b05
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
    1074:	04054a24 	streq	r4, [r5], #-2596	; 0xfffff5dc
    1078:	0521062d 	streq	r0, [r1, #-1581]!	; 0xfffff9d3
    107c:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    1080:	6e030605 	cfmadd32vs	mvax0, mvfx0, mvfx3, mvfx5
    1084:	06080520 	streq	r0, [r8], -r0, lsr #10
	delay (16, 0);
    1088:	1e050530 	cfmv64hrne	mvdx5, r0
    108c:	05132f06 	ldreq	r2, [r3, #-3846]	; 0xfffff0fa
    1090:	12050e0a 	andne	r0, r5, #10, 28	; 0xa0
	__pi_release ();
    1094:	0f052006 	svceq	0x00052006
    1098:	0604052e 	streq	r0, [r4], -lr, lsr #10
    109c:	06070535 			; <UNDEFINED> instruction: 0x06070535
    10a0:	06040501 	streq	r0, [r4], -r1, lsl #10
    10a4:	08054b34 	stmdaeq	r5, {r2, r4, r5, r8, r9, fp, lr}
    10a8:	07050106 	streq	r0, [r5, -r6, lsl #2]
    10ac:	0605052e 	streq	r0, [r5], -lr, lsr #10
static void killev (__pi_pcb_t *pid) {
    10b0:	09054b2f 	stmdbeq	r5, {r0, r1, r2, r3, r5, r8, r9, fp, lr}
	wfun = (aword)(pid->code);
    10b4:	204d0306 	subcs	r0, sp, r6, lsl #6
	for_all_tasks (i) {
    10b8:	30030405 	andcc	r0, r3, r5, lsl #8
		for (j = 0; j < nevents (i); j++) {
    10bc:	21080520 	tstcs	r8, r0, lsr #10
    10c0:	74030505 	strvc	r0, [r3], #-1285	; 0xfffffafb
    10c4:	0604052e 	streq	r0, [r4], -lr, lsr #10
			    || i->Events [j] . Event == wfun
    10c8:	5e3c1103 	rsfple	f1, f4, f3
		for (j = 0; j < nevents (i); j++) {
    10cc:	3d060b05 	vstrcc	d0, [r6, #-20]	; 0xffffffec
			if (i->Events [j] . Event == (aword)pid
    10d0:	061f0405 	ldreq	r0, [pc], -r5, lsl #8
    10d4:	060b052f 	streq	r0, [fp], -pc, lsr #10
    10d8:	06040501 	streq	r0, [r4], -r1, lsl #10
				wakeupev (i, j);
    10dc:	06070525 	streq	r0, [r7], -r5, lsr #10
    10e0:	06050501 	streq	r0, [r5], -r1, lsl #10
	for_all_tasks (i) {
    10e4:	0609052f 	streq	r0, [r9], -pc, lsr #10
}
    10e8:	4a080501 	bmi	2024f4 <__ccfg+0x1e254c>
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    10ec:	31060505 	tstcc	r6, r5, lsl #10
static void qfree (aword *ch) {
    10f0:	03060405 	movweq	r0, #25605	; 0x6405
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    10f4:	03062e16 	movweq	r2, #28182	; 0x6e16
	cc = (aword*)(mpools + MA_NP);
    10f8:	07052e6d 	streq	r2, [r5, -sp, ror #28]
	m_setnextp (ch, chunk);
    10fc:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
	m_setnextp (cc, ch);
    1100:	02052f06 	andeq	r2, r5, #6, 30
}
    1104:	017f8803 	cmneq	pc, r3, lsl #16
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    1108:	01061005 	tsteq	r6, r5
    110c:	f9030c05 			; <UNDEFINED> instruction: 0xf9030c05
    1110:	13052000 	movwne	r2, #20480	; 0x5000
			m_setnextp (cc, m_nextp (chunk));
    1114:	0605051f 			; <UNDEFINED> instruction: 0x0605051f
			m_size (chunk) += m_hdrlen + m_size (ch);
    1118:	060c052f 	streq	r0, [ip], -pc, lsr #10
    111c:	06040501 	streq	r0, [r4], -r1, lsl #10
    1120:	02201103 	eoreq	r1, r0, #-1073741824	; 0xc0000000
    1124:	01010012 	tsteq	r1, r2, lsl r0
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    1128:	05002b05 	streq	r2, [r0, #-2821]	; 0xfffff4fb
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    112c:	00000002 	andeq	r0, r0, r2
    1130:	05ea0300 	strbeq	r0, [sl, #768]!	; 0x300
    1134:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
			m_setnextp (cc, m_nextp (chunk));
    1138:	13060105 	movwne	r0, #24837	; 0x6105
			m_size (ch) += m_hdrlen + m_size (chunk);
    113c:	01000602 	tsteq	r0, r2, lsl #12
    1140:	00190501 	andseq	r0, r9, r1, lsl #10
    1144:	0a080205 	beq	201960 <__ccfg+0x1e19b8>
    1148:	81030000 	mrshi	r0, (UNDEF: 3)
    114c:	02050107 	andeq	r0, r5, #-1073741823	; 0xc0000001
    1150:	05060414 	streq	r0, [r6, #-1044]	; 0xfffffbec
			if (m_size (chunk) >= m_size (ch))
    1154:	01120324 	tsteq	r2, r4, lsr #6
    1158:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    115c:	04010622 	streq	r0, [r1], #-1570	; 0xfffff9de
		chunk = m_nextp (chunk))
    1160:	03190501 	tsteq	r9, #4194304	; 0x400000
    1164:	06042e67 	streq	r2, [r4], -r7, ror #28
    1168:	19032205 	stmdbne	r3, {r0, r2, r9, sp}
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    116c:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
	diag_wait (a);
    1170:	206b0306 	rsbcs	r0, fp, r6, lsl #6
	diag_wchar (c, a);
    1174:	22050604 	andcs	r0, r5, #4, 12	; 0x400000
    1178:	04201503 	strteq	r1, [r0], #-1283	; 0xfffffafd
}
    117c:	06020501 	streq	r0, [r2], -r1, lsl #10
    1180:	05206b03 	streq	r6, [r0, #-2819]!	; 0xfffff4fd
	syserror (ESTATE, "state");
    1184:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    1188:	29052005 	stmdbcs	r5, {r0, r2, sp}
    118c:	2e1c052e 	cfmul64cs	mvdx0, mvdx12, mvdx14
    1190:	2f060305 	svccs	0x00060305
	for (i = 0; i < MAX_UTIMERS; i++)
    1194:	1358014b 	cmpne	r8, #-1073741806	; 0xc0000012
void utimer_add (address ut) {
    1198:	2e010101 	adfcss	f0, f1, f1
    119c:	66062006 	strvs	r2, [r6], -r6
		if (__pi_utims [i] == NULL)
    11a0:	014a662e 	cmpeq	sl, lr, lsr #12
	for (i = 0; i < MAX_UTIMERS; i++)
    11a4:	1502052e 	strne	r0, [r2, #-1326]	; 0xfffffad2
    11a8:	01060605 	tsteq	r6, r5, lsl #12
		syserror (ERESOURCE, "ut a");
    11ac:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
	__pi_utims [i] = ut;
    11b0:	18052e25 	stmdane	r5, {r0, r2, r5, r9, sl, fp, sp}
}
    11b4:	0603052e 	streq	r0, [r3], -lr, lsr #10
    11b8:	2c14062f 	ldccs	6, cr0, [r4], {47}	; 0x2f
    11bc:	58014b06 	stmdapl	r1, {r1, r2, r8, r9, fp, lr}
	*t = v;
    11c0:	01010113 	tsteq	r1, r3, lsl r1
	TCI_RUN_AUXILIARY_TIMER;
    11c4:	0620062e 	strteq	r0, [r0], -lr, lsr #12
void update_n_wake (word min, Boolean force) {
    11c8:	4a582e66 	bmi	160cb68 <__ccfg+0x15ecbc0>
	if (TCI_UPDATE_DELAY_TICKS (force))
    11cc:	06010501 	streq	r0, [r1], -r1, lsl #10
    11d0:	000b0232 	andeq	r0, fp, r2, lsr r2
    11d4:	21050101 	tstcs	r5, r1, lsl #2
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    11d8:	c8020500 	stmdagt	r2, {r8, sl}
    11dc:	0300000a 	movweq	r0, #10
    11e0:	050107d9 	streq	r0, [r1, #-2009]	; 0xfffff827
    11e4:	14131402 	ldrne	r1, [r3], #-1026	; 0xfffffbfe
    11e8:	03050304 	movweq	r0, #21252	; 0x5304
    11ec:	0178fe03 	cmneq	r8, r3, lsl #28	; <UNPREDICTABLE>
    11f0:	21050104 	tstcs	r5, r4, lsl #2
    11f4:	06fd0306 	ldrbteq	r0, [sp], r6, lsl #6
    11f8:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
    11fc:	79830303 	stmibvc	r3, {r0, r1, r8, r9}
    1200:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    1204:	83030602 	movwhi	r0, #13826	; 0x3602
    1208:	0e052007 	cdpeq	0, 0, cr2, cr5, cr7, {0}
		for_all_tasks (i) {
    120c:	13030501 	movwne	r0, #13569	; 0x3501
	__pi_mintk = znew + min;
    1210:	33050404 	movwcc	r0, #21508	; 0x5404
    1214:	7dad0306 	stcvc	3, cr0, [sp, #24]!
			if (!twaiting (i))
    1218:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    121c:	02d30308 	sbcseq	r0, r3, #8, 6	; 0x20000000
			if (twakecnd (__pi_old, znew, i->Timer)) {
    1220:	05040420 	streq	r0, [r4, #-1056]	; 0xfffffbe0
    1224:	7dad032d 	stcvc	3, cr0, [sp, #180]!	; 0xb4
    1228:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    122c:	02d30308 	sbcseq	r0, r3, #8, 6	; 0x20000000
    1230:	22030520 	andcs	r0, r3, #32, 10	; 0x8000000
    1234:	051e0805 	ldreq	r0, [lr, #-2053]	; 0xfffff7fb
    1238:	04210603 	strteq	r0, [r1], #-1539	; 0xfffff9fd
    123c:	03290504 			; <UNDEFINED> instruction: 0x03290504
    1240:	05017da7 	streq	r7, [r1, #-3495]	; 0xfffff259
    1244:	33051705 	movwcc	r1, #22277	; 0x5705
    1248:	2d050106 	stfcss	f0, [r5, #-24]	; 0xffffffe8
    124c:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
				wakeuptm (i);
    1250:	d5030603 	strle	r0, [r3, #-1539]	; 0xfffff9fd
    1254:	08052002 	stmdaeq	r5, {r1, sp}
		for_all_tasks (i) {
    1258:	03051e06 	movweq	r1, #24070	; 0x5e06
				d = i->Timer - znew;
    125c:	2c080522 	cfstr32cs	mvfx0, [r8], {34}	; 0x22
    1260:	33050404 	movwcc	r0, #21508	; 0x5404
    1264:	207dad03 	rsbscs	sl, sp, r3, lsl #26
		if ((word)(__pi_mintk - znew) < min) 
    1268:	03050104 	movweq	r0, #20740	; 0x5104
    126c:	2002d503 	andcs	sp, r2, r3, lsl #10
    1270:	05584105 	ldrbeq	r4, [r8, #-261]	; 0xfffffefb
	__pi_old = znew;
    1274:	051d061d 	ldreq	r0, [sp, #-1565]	; 0xfffff9e3
}
    1278:	0305010e 	movweq	r0, #20750	; 0x510e
	TCI_RUN_DELAY_TIMER;
    127c:	04041313 	streq	r1, [r4], #-787	; 0xfffffced
}
    1280:	a7032905 	strge	r2, [r3, -r5, lsl #18]
    1284:	0505017d 	streq	r0, [r5, #-381]	; 0xfffffe83
    1288:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    128c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    1290:	d5030603 	strle	r0, [r3, #-1539]	; 0xfffff9fd
void proceed (word state) {
    1294:	41052002 	tstmi	r5, r2
	prcdstate (__pi_curr, state);
    1298:	1d050106 	stfnes	f0, [r5, #-24]	; 0xffffffe8
    129c:	0e051d06 	cdpeq	13, 0, cr1, cr5, cr6, {0}
	release;
    12a0:	18020501 	stmdane	r2, {r0, r8, sl}
    12a4:	03050304 	movweq	r0, #21252	; 0x5304
void __pi_wait (aword event, word state) {
    12a8:	0178ec03 	cmneq	r8, r3, lsl #24
	sint j = nevents (__pi_curr);
    12ac:	01050104 	tsteq	r5, r4, lsl #2
	if (j >= MAX_EVENTS_PER_TASK)
    12b0:	07950306 	ldreq	r0, [r5, r6, lsl #6]
    12b4:	00080220 	andeq	r0, r8, r0, lsr #4
    12b8:	21050101 	tstcs	r5, r1, lsl #2
		syserror (ENEVENTS, "sw");
    12bc:	0c020500 	cfstr32eq	mvfx0, [r2], {-0}
    12c0:	0300000b 	movweq	r0, #11
	setestate (__pi_curr->Events [j], state, event);
    12c4:	050107ec 	streq	r0, [r1, #-2028]	; 0xfffff814
	incwait (__pi_curr);
    12c8:	14131402 	ldrne	r1, [r3], #-1026	; 0xfffffbfe
	setestate (__pi_curr->Events [j], state, event);
    12cc:	03050304 	movweq	r0, #21252	; 0x5304
}
    12d0:	0178eb03 	cmneq	r8, r3, lsl #22
    12d4:	21050104 	tstcs	r5, r4, lsl #2
    12d8:	07900306 	ldreq	r0, [r0, r6, lsl #6]
void __pi_trigger (aword event) {
    12dc:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
	for_all_tasks (i) {
    12e0:	78f00303 	ldmvc	r0!, {r0, r1, r8, r9}^
		for (j = 0; j < nevents (i); j++) {
    12e4:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    12e8:	96030602 	strls	r0, [r3], -r2, lsl #12
    12ec:	0e052007 	cdpeq	0, 0, cr2, cr5, cr7, {0}
    12f0:	06090501 	streq	r0, [r9], -r1, lsl #10
			if (i->Events [j] . Event == event) {
    12f4:	05040401 	streq	r0, [r4, #-1025]	; 0xfffffbff
    12f8:	7d9b0333 	ldcvc	3, cr0, [fp, #204]	; 0xcc
    12fc:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
				wakeupev (i, j);
    1300:	02e60308 	rsceq	r0, r6, #8, 6	; 0x20000000
    1304:	05040420 	streq	r0, [r4, #-1056]	; 0xfffffbe0
	for_all_tasks (i) {
    1308:	7d9a032d 	ldcvc	3, cr0, [sl, #180]	; 0xb4
}
    130c:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
aword __pi_join (aword pid, word st) {
    1310:	02e80303 	rsceq	r0, r8, #201326592	; 0xc000000
	for_all_tasks (i) {
    1314:	051e0620 	ldreq	r0, [lr, #-1568]	; 0xfffff9e0
    1318:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
	return 0;
    131c:	06051f1e 			; <UNDEFINED> instruction: 0x06051f1e
		if ((aword)i == pid) {
    1320:	06030521 	streq	r0, [r3], -r1, lsr #10
			__pi_wait (pid, st);
    1324:	0504042f 	streq	r0, [r4, #-1071]	; 0xfffffbd1
}
    1328:	7d940329 	ldcvc	3, cr0, [r4, #164]	; 0xa4
	for_all_tasks (i) {
    132c:	17050501 	strne	r0, [r5, -r1, lsl #10]
    1330:	01063305 	tsteq	r6, r5, lsl #6
void delay (word d, word state) {
    1334:	03050104 	movweq	r0, #20740	; 0x5104
	settstate (__pi_curr, state);
    1338:	2e02e803 	cdpcs	8, 0, cr14, cr2, cr3, {0}
    133c:	04470205 	strbeq	r0, [r7], #-517	; 0xfffffdfb
    1340:	032d0504 			; <UNDEFINED> instruction: 0x032d0504
    1344:	04207d9b 	strteq	r7, [r0], #-3483	; 0xfffff265
	update_n_wake (d, YES);
    1348:	06030501 	streq	r0, [r3], -r1, lsl #10
    134c:	2002e803 	andcs	lr, r2, r3, lsl #16
	__pi_curr->Timer = __pi_old + d;
    1350:	01064105 	tsteq	r6, r5, lsl #2
    1354:	1d061d05 	stcne	13, cr1, [r6, #-20]	; 0xffffffec
	inctimer (__pi_curr);
    1358:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
    135c:	06010602 	streq	r0, [r1], -r2, lsl #12
    1360:	05030426 	streq	r0, [r3, #-1062]	; 0xfffffbda
}
    1364:	78d90303 	ldmvc	r9, {r0, r1, r8, r9}^
    1368:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	if (fun == NULL)
    136c:	a8030601 	stmdage	r3, {r0, r9, sl}
		return (int) __pi_curr;
    1370:	08022007 	stmdaeq	r2, {r0, r1, r2, sp}
    1374:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
	for_all_tasks (i)
    1378:	02050018 	andeq	r0, r5, #24
}
    137c:	00000b48 	andeq	r0, r0, r8, asr #22
		if (i->code == fun)
    1380:	0107c503 	tsteq	r7, r3, lsl #10
	for_all_tasks (i)
    1384:	01050704 	tsteq	r5, r4, lsl #14
    1388:	0178bb03 	cmneq	r8, r3, lsl #22
    138c:	18050104 	stmdane	r5, {r2, r8}
int __pi_strlen (const char *s) {
    1390:	07c50306 	strbeq	r0, [r5, r6, lsl #6]
	for (i = 0; *(s+i) != '\0'; i++);
    1394:	05070401 	streq	r0, [r7, #-1025]	; 0xfffffbff
}
    1398:	78bb0305 	ldmvc	fp!, {r0, r2, r8, r9}
	for (i = 0; *(s+i) != '\0'; i++);
    139c:	2e040520 	cfsh32cs	mvfx0, mvfx4, #16
	while ((Boolean)(*d++ = *s++));
    13a0:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
    13a4:	0101013d 	tsteq	r1, sp, lsr r1
    13a8:	0620063c 			; <UNDEFINED> instruction: 0x0620063c
}
    13ac:	4a582e66 	bmi	160cd4c <__ccfg+0x15ecda4>
	while (n--)
    13b0:	01132e01 	tsteq	r3, r1, lsl #28
    13b4:	05080458 	streq	r0, [r8, #-1112]	; 0xfffffba8
		*dest++ = *src++;
    13b8:	05050f01 	streq	r0, [r5, #-3841]	; 0xfffff0ff
    13bc:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    13c0:	06020520 	streq	r0, [r2], -r0, lsr #10
	while (n--)
    13c4:	0101013d 	tsteq	r1, sp, lsr r1
}
    13c8:	0620063c 			; <UNDEFINED> instruction: 0x0620063c
		*dest++ = c;
    13cc:	4a582e66 	bmi	160cd6c <__ccfg+0x15ecdc4>
void adddevfunc (devreqfun_t rf, int loc) {
    13d0:	2f132e01 	svccs	0x00132e01
		syserror (EREQPAR, "addv");
    13d4:	01045801 	tsteq	r4, r1, lsl #16
		syserror (ERESOURCE, "addv");
    13d8:	03060105 	movweq	r0, #24837	; 0x6105
	if (ioreq [loc] != NULL)
    13dc:	020107d0 	andeq	r0, r1, #208, 14	; 0x3400000
    13e0:	0101000b 	tsteq	r1, fp
		syserror (ERESOURCE, "addv");
    13e4:	05001505 	streq	r1, [r0, #-1285]	; 0xfffffafb
	ioreq [loc] = rf;
    13e8:	000bec02 	andeq	lr, fp, r2, lsl #24
}
    13ec:	08800300 	stmeq	r0, {r8, r9}
    13f0:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
sint io (word retry, word dev, word operation, char *buf, word len) {
    13f4:	10061505 	andne	r1, r6, r5, lsl #10
    13f8:	1e320205 	cdpne	2, 3, cr0, cr2, cr5, {0}
    13fc:	59593e06 	ldmdbpl	r9, {r1, r2, r9, sl, fp, ip, sp}^
    1400:	05090459 	streq	r0, [r9, #-1113]	; 0xfffffba7
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1404:	7ca70305 	stcvc	3, cr0, [r7], #20
    1408:	06310501 	ldrteq	r0, [r1], -r1, lsl #10
    140c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
		syserror (ENODEVICE, "io");
    1410:	7dc5030b 	stclvc	3, cr0, [r5, #44]	; 0x2c
    1414:	05090420 	streq	r0, [r9, #-1056]	; 0xfffffbe0
	if (len == 0)
    1418:	02bb0331 	adcseq	r0, fp, #-1006632960	; 0xc4000000
	ret = (ioreq [dev]) (operation, buf, len);
    141c:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    1420:	7dc80332 	stclvc	3, cr0, [r8, #200]	; 0xc8
	if (ret >= 0)
    1424:	0504042e 	streq	r0, [r4, #-1070]	; 0xfffffbd2
	if (ret == -1) {
    1428:	029b0305 	addseq	r0, fp, #335544320	; 0x14000000
    142c:	032d052e 			; <UNDEFINED> instruction: 0x032d052e
		if (retry == WNONE)
    1430:	032e7ecc 			; <UNDEFINED> instruction: 0x032e7ecc
		iowait (dev, operation, retry);
    1434:	09042e4a 	stmdbeq	r4, {r1, r3, r6, r9, sl, fp, sp}
    1438:	87033105 	strhi	r3, [r3, -r5, lsl #2]
    143c:	01042e02 	tsteq	r4, r2, lsl #28
			release;
    1440:	03060205 	movweq	r0, #25093	; 0x6205
	if (ret == -2) {
    1444:	032003dc 			; <UNDEFINED> instruction: 0x032003dc
		if (retry != WNONE) {
    1448:	140179e7 	strne	r7, [r1], #-2535	; 0xfffff619
    144c:	05010705 	streq	r0, [r1, #-1797]	; 0xfffff8fb
			iowait (dev, operation, retry);
    1450:	03050112 	movweq	r0, #20754	; 0x5112
    1454:	06150514 			; <UNDEFINED> instruction: 0x06150514
			(ioreq [dev]) (NONE, buf, len);
    1458:	2c3d0501 	cfldr32cs	mvfx0, [sp], #-4
    145c:	05220705 	streq	r0, [r2, #-1797]!	; 0xfffff8fb
    1460:	052f0603 	streq	r0, [pc, #-1539]!	; e65 <__pi_release+0x9d>
		(ioreq [dev]) (NONE, buf, len);
    1464:	05580632 	ldrbeq	r0, [r8, #-1586]	; 0xfffff9ce
    1468:	03052e21 	movweq	r2, #24097	; 0x5e21
    146c:	06052f06 	streq	r2, [r5], -r6, lsl #30
}
    1470:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
	if (retry != WNONE) {
    1474:	04042206 	streq	r2, [r4], #-518	; 0xfffffdfa
		delay (-ret - 2, retry);
    1478:	91032905 	tstls	r3, r5, lsl #18
    147c:	3d050102 	stfccs	f0, [r5, #-8]
    1480:	17050514 	smladne	r5, r4, r5, r0
    1484:	3c063805 	stccc	8, cr3, [r6], {5}
		release;
    1488:	03050104 	movweq	r0, #20740	; 0x5104
    148c:	7de90306 	stclvc	3, cr0, [r9, #24]!
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1490:	06060520 	streq	r0, [r6], -r0, lsr #10
    1494:	0604052e 	streq	r0, [r4], -lr, lsr #10
    1498:	05040421 	streq	r0, [r4, #-1057]	; 0xfffffbdf
    149c:	01270329 			; <UNDEFINED> instruction: 0x01270329
    14a0:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
		syserror (ERESOURCE, "mal1");
    14a4:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
    14a8:	06040501 	streq	r0, [r4], -r1, lsl #10
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    14ac:	043c5603 	ldrteq	r5, [ip], #-1539	; 0xfffff9fd
    14b0:	03290504 			; <UNDEFINED> instruction: 0x03290504
	m_magic (mpools [0]) = MALLOC_MAGIC;
    14b4:	050100db 	streq	r0, [r1, #-219]	; 0xffffff25
	m_size (mpools [0]) = mlen - m_hdrlen;
    14b8:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
	m_magic (mpools [0]) = MALLOC_MAGIC;
    14bc:	01040106 	tsteq	r4, r6, lsl #2
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    14c0:	03063c05 	movweq	r3, #27653	; 0x6c05
    14c4:	052e7f96 	streq	r7, [lr, #-3990]!	; 0xfffff06a
}
    14c8:	02050112 	andeq	r0, r5, #-2147483644	; 0x80000004
    14cc:	03060106 	movweq	r0, #24838	; 0x6106
    14d0:	012e069a 			; <UNDEFINED> instruction: 0x012e069a
    14d4:	05040401 	streq	r0, [r4, #-1025]	; 0xfffffbff
    14d8:	7a950329 	bvc	fe542184 <_estack+0xde53d184>
    14dc:	17050501 	strne	r0, [r5, -r1, lsl #10]
void __pi_free (aword *ch) {
    14e0:	01062d05 	tsteq	r6, r5, lsl #26
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    14e4:	02050104 	andeq	r0, r5, #4, 2
    14e8:	3c05e603 	stccc	6, cr14, [r5], {3}
		syserror (EMALLOC, "malg");
    14ec:	2d050404 	cfstrscs	mvf0, [r5, #-16]
    14f0:	207a9a03 	rsbscs	r9, sl, r3, lsl #20
	mcfree [MA_NP] += m_size (ch);
    14f4:	02050104 	andeq	r0, r5, #4, 2
		m_size (ch) ^= MALLOC_UMASK;
    14f8:	05e60306 	strbeq	r0, [r6, #774]!	; 0x306
    14fc:	05040420 	streq	r0, [r4, #-1056]	; 0xfffffbe0
	mcfree [MA_NP] += m_size (ch);
    1500:	7a950329 	bvc	fe5421ac <_estack+0xde53d1ac>
	QFREE;
    1504:	17050501 	strne	r0, [r5, -r1, lsl #10]
	if (mevent [MA_NP] . nwait) {
    1508:	01062d05 	tsteq	r6, r5, lsl #26
    150c:	02050104 	andeq	r0, r5, #4, 2
		trigger ((aword)(&(mevent [MA_NP])));
    1510:	05e60306 	strbeq	r0, [r6, #774]!	; 0x306
		mevent [MA_NP] . nwait --;
    1514:	01010120 	tsteq	r1, r0, lsr #2
}
    1518:	66010101 	strvs	r0, [r1], -r1, lsl #2
    151c:	04012e01 	streq	r2, [r1], #-3585	; 0xfffff1ff
    1520:	03290504 			; <UNDEFINED> instruction: 0x03290504
    1524:	05017acb 	streq	r7, [r1, #-2763]	; 0xfffff535
void kill (aword pid) {
    1528:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
		pid = (aword) __pi_curr;
    152c:	01040106 	tsteq	r4, r6, lsl #2
	j = NULL;
    1530:	b0030205 	andlt	r0, r3, r5, lsl #4
	for_all_tasks (i) {
    1534:	04042005 	streq	r2, [r4], #-5
	syserror (EREQPAR, "kpi");
    1538:	d0032d05 	andle	r2, r3, r5, lsl #26
    153c:	0104207a 	tsteq	r4, sl, ror r0
		if ((aword)i == pid) {
    1540:	03060205 	movweq	r0, #25093	; 0x6205
    1544:	042005b0 	strteq	r0, [r0], #-1456	; 0xfffffa50
				__PCB = i->Next;
    1548:	03290504 			; <UNDEFINED> instruction: 0x03290504
			killev (i);
    154c:	05017acb 	streq	r7, [r1, #-2763]	; 0xfffff535
			ufree (i);
    1550:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
			if (i == __pi_curr)
    1554:	01040106 	tsteq	r4, r6, lsl #2
    1558:	03060205 	movweq	r0, #25093	; 0x6205
				release;
    155c:	012005b0 			; <UNDEFINED> instruction: 0x012005b0
				j->Next = i->Next;
    1560:	01010101 	tsteq	r1, r1, lsl #2
    1564:	06230501 	strteq	r0, [r3], -r1, lsl #10
    1568:	05011003 	streq	r1, [r1, #-3]
}
    156c:	20700302 	rsbscs	r0, r0, r2, lsl #6
    1570:	2e015806 	cdpcs	8, 0, cr5, cr1, cr6, {0}
    1574:	04010d03 	streq	r0, [r1], #-3331	; 0xfffff2fd
	if (size < 8)
    1578:	0305050a 	movweq	r0, #21770	; 0x550a
		_size = 2;
    157c:	05017ecd 	streq	r7, [r1, #-3789]	; 0xfffff133
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1580:	0401062f 	streq	r0, [r1], #-1583	; 0xfffff9d1
		_size = (((aword)size) + 3) >> 2;
    1584:	03270501 			; <UNDEFINED> instruction: 0x03270501
		if (m_magic (chunk) != MALLOC_MAGIC)
    1588:	042001ba 	strteq	r0, [r0], #-442	; 0xfffffe46
		_size = (((aword)size) + 3) >> 2;
    158c:	032f050a 			; <UNDEFINED> instruction: 0x032f050a
		if (mevent [MA_NP] . nfail != 255)
    1590:	04207ec6 	strteq	r7, [r0], #-3782	; 0xfffff13a
    1594:	06020501 	streq	r0, [r2], -r1, lsl #10
			mevent [MA_NP] . nfail ++;
    1598:	2001b503 	andcs	fp, r1, r3, lsl #10
		mnfree [MA_NP] = 0;
    159c:	13062305 	movwne	r2, #25349	; 0x6305
    15a0:	0c030205 	sfmeq	f0, 4, [r3], {5}
		if (m_magic (chunk) != MALLOC_MAGIC)
    15a4:	03230520 			; <UNDEFINED> instruction: 0x03230520
    15a8:	02052074 	andeq	r2, r5, #116	; 0x74
			syserror (EMALLOC, "malc");
    15ac:	27052406 	strcs	r2, [r5, -r6, lsl #8]
    15b0:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
		if (m_size (chunk) >= _size)
    15b4:	03270528 			; <UNDEFINED> instruction: 0x03270528
    15b8:	02052078 	andeq	r2, r5, #120	; 0x78
		chunk = m_nextp (chunk)) {
    15bc:	313f2806 	teqcc	pc, r6, lsl #16
		m_setnextp (cc, m_nextp (chunk));
    15c0:	404a0a03 	submi	r0, sl, r3, lsl #20
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    15c4:	017dc003 	cmneq	sp, r3
    15c8:	04595959 	ldrbeq	r5, [r9], #-2393	; 0xfffff6a7
			m_size (chunk) = _size;
    15cc:	03050509 	movweq	r0, #21769	; 0x5509
			cc = chunk + _size + m_hdrlen;
    15d0:	04017eae 	streq	r7, [r1], #-3758	; 0xfffff152
    15d4:	060d0501 	streq	r0, [sp], -r1, lsl #10
			m_size (cc) = waste - m_hdrlen;
    15d8:	0101d403 	tsteq	r1, r3, lsl #8
			QFREE;
    15dc:	31050904 	tstcc	r5, r4, lsl #18
		mevent [MA_NP] . nfail = 0;
    15e0:	2e7eac03 	cdpcs	12, 7, cr10, cr14, cr3, {0}
		mcfree [MA_NP] -= m_size (chunk);
    15e4:	02050104 	andeq	r0, r5, #4, 2
    15e8:	01d40306 	bicseq	r0, r4, r6, lsl #6
    15ec:	060d0520 	streq	r0, [sp], -r0, lsr #10
    15f0:	06020501 	streq	r0, [r2], -r1, lsl #10
		m_size (chunk) |= MALLOC_UMASK;
    15f4:	02c70322 	sbceq	r0, r7, #-2013265920	; 0x88000000
		if (mnfree [MA_NP] > mcfree [MA_NP])
    15f8:	2e2e012e 	sufcsep	f0, f6, #0.5
		m_size (chunk) |= MALLOC_UMASK;
    15fc:	06060515 			; <UNDEFINED> instruction: 0x06060515
			mnfree [MA_NP] = mcfree [MA_NP];
    1600:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
}
    1604:	30060305 	andcc	r0, r6, r5, lsl #6
    1608:	05050b04 	streq	r0, [r5, #-2820]	; 0xfffff4fc
    160c:	0179c303 	cmneq	r9, r3, lsl #6
    1610:	5e030c04 	cdppl	12, 0, cr0, cr3, cr4, {0}
    1614:	062e0501 	strteq	r0, [lr], -r1, lsl #10
    1618:	050b0401 	streq	r0, [fp, #-1025]	; 0xfffffbff
    161c:	23030605 	movwcs	r0, #13829	; 0x3605
aword __pi_fork (fsmcode func, aword data) {
    1620:	0634052e 	ldrteq	r0, [r4], -lr, lsr #10
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1624:	06050501 	streq	r0, [r5], -r1, lsl #10
    1628:	0501044b 	streq	r0, [r1, #-1099]	; 0xfffffbb5
    162c:	06d50315 			; <UNDEFINED> instruction: 0x06d50315
		if ((j = __PCB) == NULL)
    1630:	1303054a 	movwne	r0, #13642	; 0x354a
	i->Next = NULL;
    1634:	05130405 	ldreq	r0, [r3, #-1029]	; 0xfffffbfb
	i->data = data;
    1638:	02053a15 	andeq	r3, r5, #86016	; 0x15000
		if ((j = __PCB) == NULL)
    163c:	7ecb0319 	mcrvc	3, 6, r0, cr11, cr9, {0}
}
    1640:	05060401 	streq	r0, [r6, #-1025]	; 0xfffffbff
			for (; j->Next != NULL; j = j->Next);
    1644:	7ed40324 	cdpvc	3, 13, cr0, cr4, cr4, {1}
    1648:	17050501 	strne	r0, [r5, -r1, lsl #10]
	return (aword) i;
    164c:	01062305 	tsteq	r6, r5, lsl #6
    1650:	02050104 	andeq	r0, r5, #4, 2
	if (mevent [MA_NP] . nwait != 255)
    1654:	2002dd03 	andcs	sp, r2, r3, lsl #26
    1658:	23050604 	movwcs	r0, #22020	; 0x5604
    165c:	207da303 	rsbscs	sl, sp, r3, lsl #6
		mevent [MA_NP] . nwait ++;
    1660:	02050104 	andeq	r0, r5, #4, 2
	wait ((aword)(&(mevent [MA_NP])), state);
    1664:	02dd0306 	sbcseq	r0, sp, #402653184	; 0x18000000
    1668:	01054e4a 	tsteq	r5, sl, asr #28
void diag (const char *mess, ...) {
    166c:	02051306 	andeq	r1, r5, #402653184	; 0x18000000
    1670:	0603052d 	streq	r0, [r3], -sp, lsr #10
    1674:	412e5f03 			; <UNDEFINED> instruction: 0x412e5f03
	diag_disable_int (a, is);
    1678:	06040541 	streq	r0, [r4], -r1, asr #10
    167c:	1f030513 	svcne	0x00030513
    1680:	01002f02 	tsteq	r0, r2, lsl #30
				d = (bc == 16) ? 10000 : 1000000000;
    1684:	001f0501 	andseq	r0, pc, r1, lsl #10
	diag_disable_int (a, is);
    1688:	0da40205 	sfmeq	f0, 4, [r4, #20]!
	while (*mess != '\0') {
    168c:	fd030000 	stc2	0, cr0, [r3, #-0]
	dgout ('\r');
    1690:	02050108 	andeq	r0, r5, #8, 2
	dgout ('\n');
    1694:	2c051617 	stccs	6, cr1, [r5], {23}
    1698:	15050106 	strne	r0, [r5, #-262]	; 0xfffffefa
    169c:	202c0566 	eorcs	r0, ip, r6, ror #10
	diag_wait (a);
    16a0:	05201505 	streq	r1, [r0, #-1285]!	; 0xfffffafb
	diag_enable_int (a, is);
    16a4:	15052112 	strne	r2, [r5, #-274]	; 0xfffffeee
    16a8:	01054a1f 	tsteq	r5, pc, lsl sl
}
    16ac:	00030223 	andeq	r0, r3, r3, lsr #4
    16b0:	1c050101 	stfnes	f0, [r5], {1}
    16b4:	00020500 	andeq	r0, r2, r0, lsl #10
		if (*mess == '%') {
    16b8:	03000000 	movweq	r0, #0
    16bc:	05010adb 	streq	r0, [r1, #-2779]	; 0xfffff525
			if (*mess == 'l') {
    16c0:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    16c4:	1c05010f 	stfnes	f0, [r5], {15}
				mess++;
    16c8:	06050e06 	streq	r0, [r5], -r6, lsl #28
				val = va_arg (ap, lword);
    16cc:	20070525 	andcs	r0, r7, r5, lsr #10
				bc = 32;
    16d0:	05580605 	ldrbeq	r0, [r8, #-1541]	; 0xfffff9fb
				bc = 16;
    16d4:	052e0603 	streq	r0, [lr, #-1539]!	; 0xfffff9fd
			switch (*mess) {
    16d8:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    16dc:	052d0631 	streq	r0, [sp, #-1585]!	; 0xfffff9cf
    16e0:	0205010f 	andeq	r0, r5, #-1073741821	; 0xc0000003
				dgout ('%');
    16e4:	4d062006 	stcmi	0, cr2, [r6, #-24]	; 0xffffffe8
    16e8:	13060105 	movwne	r0, #24837	; 0x6105
				dgout (*mess);
    16ec:	01000402 	tsteq	r0, r2, lsl #8
    16f0:	00310501 	eorseq	r0, r1, r1, lsl #10
			switch (*mess) {
    16f4:	0dc80205 	sfmeq	f0, 2, [r8, #20]
					v = __pi_hex_enc_table [
    16f8:	e7030000 	str	r0, [r3, -r0]
					i += 4;
    16fc:	0205010a 	andeq	r0, r5, #-2147483646	; 0x80000002
					(val >> (bc - i)) & 0xf];
    1700:	05030414 	streq	r0, [r3, #-1044]	; 0xfffffbec
    1704:	77b20303 	ldrvc	r0, [r2, r3, lsl #6]!
					dgout (v);
    1708:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    170c:	cc030631 	stcgt	6, cr0, [r3], {49}	; 0x31
				while (i < bc) {
    1710:	03040108 	movweq	r0, #16648	; 0x4108
			mess++;
    1714:	b4030305 	strlt	r0, [r3], #-773	; 0xfffffcfb
					d /= 10;
    1718:	01043c77 	tsteq	r4, r7, ror ip
				if ((val >> (bc - 1)) & 1) {
    171c:	cc033105 	stfgts	f3, [r3], {5}
    1720:	03042008 	movweq	r2, #16392	; 0x4008
					dgout ('-');
    1724:	b4030305 	strlt	r0, [r3], #-773	; 0xfffffcfb
    1728:	01042077 	tsteq	r4, r7, ror r0
						val |= 0xffff0000;
    172c:	03060205 	movweq	r0, #25093	; 0x6205
    1730:	012e08d0 	ldrdeq	r0, [lr, -r0]!	; <UNPREDICTABLE>
    1734:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
				d = (bc == 16) ? 10000 : 1000000000;
    1738:	76dd0306 	ldrbvc	r0, [sp], r6, lsl #6
    173c:	05010466 	streq	r0, [r1, #-1126]	; 0xfffffb9a
    1740:	a3030602 	movwge	r0, #13826	; 0x3602
					v = (word) (val / d);
    1744:	0d042009 	stceq	0, cr2, [r4, #-36]	; 0xffffffdc
					if (v || d == 1) break;
    1748:	01759b03 	cmneq	r5, r3, lsl #22
    174c:	5b190101 	blpl	641b58 <__ccfg+0x621bb0>
					d /= 10;
    1750:	0501044a 	streq	r0, [r1, #-1098]	; 0xfffffbb6
				d = (bc == 16) ? 10000 : 1000000000;
    1754:	9d03061a 	stcls	6, cr0, [r3, #-104]	; 0xffffff98
					dgout (v + '0');
    1758:	0d042e09 	stceq	14, cr2, [r4, #-36]	; 0xffffffdc
    175c:	03060205 	movweq	r0, #25093	; 0x6205
    1760:	012076f9 	strdeq	r7, [r0, -r9]!
					d /= 10;
    1764:	01010101 	tsteq	r1, r1, lsl #2
					val = val - (v * d);
    1768:	03050304 	movweq	r0, #21252	; 0x5304
					if (d == 0) break;
    176c:	04013603 	streq	r3, [r1], #-1539	; 0xfffff9fd
					v = (word) (val / d);
    1770:	0302050d 	movweq	r0, #9485	; 0x250d
    1774:	0482204a 	streq	r2, [r2], #74	; 0x4a
				if (bc == 16)
    1778:	08eb0301 	stmiaeq	fp!, {r0, r8, r9}^
				d = (bc == 16) ? 10000 : 1000000000;
    177c:	06150501 	ldreq	r0, [r5], -r1, lsl #10
					val &= 0xffff;
    1780:	06020501 	streq	r0, [r2], -r1, lsl #10
					dgout (*s);
    1784:	0615054c 	ldreq	r0, [r5], -ip, asr #10
					s++;
    1788:	20020501 	andcs	r0, r2, r1, lsl #10
				while (*s != '\0') {
    178c:	05201505 	streq	r1, [r0, #-1285]!	; 0xfffffafb
    1790:	04052002 	streq	r2, [r5], #-2
			dgout (*mess++);
    1794:	04216a06 	strteq	r6, [r1], #-2566	; 0xfffff5fa
    1798:	0302050d 	movweq	r0, #9485	; 0x250d
    179c:	0401778e 	streq	r7, [r1], #-1934	; 0xfffff872
    17a0:	03030503 	movweq	r0, #13571	; 0x3503
    17a4:	0d04012b 	stfeqs	f0, [r4, #-172]	; 0xffffff54
	__pi_seed = __pi_seed * 1103515245 + 12345;
    17a8:	55030205 	strpl	r0, [r3, #-517]	; 0xfffffdfb
    17ac:	04202020 	strteq	r2, [r0], #-32	; 0xffffffe0
    17b0:	0ac50301 	beq	ff1423bc <_estack+0xdf13d3bc>
    17b4:	050d0420 	streq	r0, [sp, #-1056]	; 0xfffffbe0
	^ entropy
    17b8:	75a60303 	strvc	r0, [r6, #771]!	; 0x303
}
    17bc:	0610054a 	ldreq	r0, [r0], -sl, asr #10
    17c0:	20060501 	andcs	r0, r6, r1, lsl #10
    17c4:	05202305 	streq	r2, [r0, #-773]!	; 0xfffffcfb
    17c8:	0405201f 	streq	r2, [r5], #-31	; 0xffffffe1
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    17cc:	0e053006 	cdpeq	0, 0, cr3, cr5, cr6, {0}
	word cs = size + hblenb;
    17d0:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    17d4:	02052f06 	andeq	r2, r5, #6, 30
    17d8:	0501041c 	streq	r0, [r1, #-1052]	; 0xfffffbe4
	p -> length = size;
    17dc:	098f0304 	stmibeq	pc, {r2, r8, r9}	; <UNPREDICTABLE>
}
    17e0:	062a052e 	strteq	r0, [sl], -lr, lsr #10
	if (p->attributes.b.queued) {
    17e4:	27040501 	strcs	r0, [r4, -r1, lsl #10]
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    17e8:	79032a05 	stmdbvc	r3, {r0, r2, r9, fp, sp}
    17ec:	06040520 	streq	r0, [r4], -r0, lsr #10
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    17f0:	0309044e 	movweq	r0, #37966	; 0x944e
		p->attributes.b.queued = 0;
    17f4:	05017fb2 	streq	r7, [r1, #-4018]	; 0xfffff04e
    17f8:	04010629 	streq	r0, [r1], #-1577	; 0xfffff9d7
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    17fc:	06040501 	streq	r0, [r4], -r1, lsl #10
	deq (p);	// Remove from queue
    1800:	6600d103 	strvs	sp, [r0], -r3, lsl #2
}
    1804:	0502044d 	streq	r0, [r2, #-1101]	; 0xfffffbb3
	tfree ((address)p);
    1808:	789f0305 	ldmvc	pc, {r0, r2, r8, r9}	; <UNPREDICTABLE>
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    180c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    1810:	07e50304 	strbeq	r0, [r5, r4, lsl #6]!
    1814:	061a0520 	ldreq	r0, [sl], -r0, lsr #10
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1818:	06040501 	streq	r0, [r4], -r1, lsl #10
    181c:	1a05214b 	bne	149d50 <__ccfg+0x129da8>
	if (q_empty (q))
    1820:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    1824:	02044d06 	andeq	r4, r4, #384	; 0x180
		trigger (q);
    1828:	96030505 	strls	r0, [r3], -r5, lsl #10
	if (p->attributes.b.urgent) {
    182c:	01050178 	tsteq	r5, r8, ror r1
		p->u.bqueue.next = q->next;
    1830:	01042106 	tsteq	r4, r6, lsl #2
		p->u.bqueue.prev = q;
    1834:	03060405 	movweq	r0, #25605	; 0x6405
		q->next->prev = (qitem_t*) p;
    1838:	042007f1 	strteq	r0, [r0], #-2033	; 0xfffff80f
	p->attributes.b.queued = 1;
    183c:	0305050c 	movweq	r0, #21772	; 0x550c
    1840:	040178a0 	streq	r7, [r1], #-2208	; 0xfffff760
}
    1844:	06310509 	ldrteq	r0, [r1], -r9, lsl #10
		p->u.bqueue.prev = q->prev;
    1848:	0102d403 	tsteq	r2, r3, lsl #8
		q->prev->next = (qitem_t*) p;
    184c:	2e050c04 	cdpcs	12, 0, cr0, cr5, cr4, {0}
		q->prev = (qitem_t*) p;
    1850:	2e7dac03 	cdpcs	12, 7, cr10, cr13, cr3, {0}
    1854:	52050e04 	andpl	r0, r5, #4, 28	; 0x40
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    1858:	2e028803 	cdpcs	8, 0, cr8, cr2, cr3, {0}
	deq (p);	// Soft dequeue, timer and hook left intact
    185c:	2e050c04 	cdpcs	12, 0, cr0, cr5, cr4, {0}
	switch (dv) {
    1860:	2e7df803 	cdpcs	8, 7, cr15, cr13, cr3, {0}
    1864:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    1868:	07e50306 	strbeq	r0, [r5, r6, lsl #6]!
    186c:	050e0420 	streq	r0, [lr, #-1056]	; 0xfffffbe0
			p->attributes.b.urgent = 1;
    1870:	7aa00331 	bvc	fe80253c <_estack+0xde7fd53c>
    1874:	15050501 	strne	r0, [r5, #-1281]	; 0xfffffaff
			verify_ses (p, "dispose ses");
    1878:	01065205 	tsteq	r6, r5, lsl #4
    187c:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    1880:	2005e503 	andcs	lr, r5, r3, lsl #10
    1884:	52050e04 	andpl	r0, r5, #4, 28	; 0x40
    1888:	2e7a9b03 	vaddcs.f64	d25, d10, d3
			verify_phy (p, "dispose phy");
    188c:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    1890:	05e00306 	strbeq	r0, [r0, #774]!	; 0x306
}
    1894:	0502042e 	streq	r0, [r2, #-1070]	; 0xfffffbd2
			enq (oqueues [p->attributes.b.phys], p);
    1898:	78860305 	stmvc	r6, {r0, r2, r8, r9}
			p->attributes.b.urgent = 1;
    189c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    18a0:	07fc0304 	ldrbeq	r0, [ip, r4, lsl #6]!
			verify_phy (p, "dispose phy");
    18a4:	05090420 	streq	r0, [r9, #-1056]	; 0xfffffbe0
    18a8:	7aea0305 	bvc	ffa824c4 <_estack+0xdfa7d4c4>
    18ac:	06310501 	ldrteq	r0, [r1], -r1, lsl #10
    18b0:	03290501 			; <UNDEFINED> instruction: 0x03290501
    18b4:	052004b6 	streq	r0, [r0, #-1206]!	; 0xfffffb4a
    18b8:	7bca0331 	blvc	ff282584 <_estack+0xdf27d584>
			enq (oqueues [p->attributes.b.phys], p);
    18bc:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
    18c0:	99030604 	stmdbls	r3, {r2, r9, sl}
}
    18c4:	23052e05 	movwcs	r2, #24069	; 0x5e05
			rlp (p);
    18c8:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
}
    18cc:	046a0620 	strbteq	r0, [sl], #-1568	; 0xfffff9e0
    18d0:	03050509 	movweq	r0, #21769	; 0x5509
    18d4:	0501799f 	streq	r7, [r1, #-2463]	; 0xfffff661
    18d8:	0401063f 	streq	r0, [r1], #-1599	; 0xfffff9c1
    18dc:	03040501 	movweq	r0, #17665	; 0x4501
    18e0:	042006ed 	strteq	r0, [r0], #-1773	; 0xfffff913
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    18e4:	033f0509 	teqeq	pc, #37748736	; 0x2400000
	if (b->attributes.b.outgoing) {
    18e8:	04207993 	strteq	r7, [r0], #-2451	; 0xfffff66d
	b = header (p);
    18ec:	06040501 	streq	r0, [r4], -r1, lsl #10
	if (b->attributes.b.outgoing) {
    18f0:	2e06ea03 	vmlacs.f32	s28, s12, s6
		verify_ses (b, "tcv02");
    18f4:	90030904 	andls	r0, r3, r4, lsl #18
    18f8:	2905017f 	stmdbcs	r5, {r0, r1, r2, r3, r4, r5, r6, r8}
    18fc:	01040106 	tsteq	r4, r6, lsl #2
    1900:	f3030405 	vshl.u8	d0, d5, d3
    1904:	09042e00 	stmdbeq	r4, {r9, sl, fp, sp}
		verify_plg (b, tcv_out, "tcv03");
    1908:	8d032905 	vstrhi.16	s4, [r3, #-10]	; <UNPREDICTABLE>
    190c:	0104207f 	tsteq	r4, pc, ror r0
    1910:	03060405 	movweq	r0, #25605	; 0x6405
    1914:	4d4a00f3 	stclmi	0, cr0, [sl, #-972]	; 0xfffffc34
    1918:	05020440 	streq	r0, [r2, #-1088]	; 0xfffffbc0
    191c:	77ea0305 	strbvc	r0, [sl, r5, lsl #6]!
    1920:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    1924:	08990304 	ldmeq	r9, {r2, r8, r9}
    1928:	061a0520 	ldreq	r0, [sl], -r0, lsr #10
		dispose (b, plugins [b->attributes.b.plugin] ->
    192c:	06040501 	streq	r0, [r4], -r1, lsl #10
}
    1930:	1a05214b 	bne	149e64 <__ccfg+0x129ebc>
		dispose (b, plugins [b->attributes.b.plugin] ->
    1934:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
		rlp (b);
    1938:	1d1a0523 	cfldr32ne	mvfx0, [sl, #-140]	; 0xffffff74
}
    193c:	3f060405 	svccc	0x00060405
		rlp (b);
    1940:	03090459 	movweq	r0, #37977	; 0x9459
    1944:	05017eee 	streq	r7, [r1, #-3822]	; 0xfffff112
    1948:	04010629 	streq	r0, [r1], #-1577	; 0xfffff9d7
    194c:	030d050e 	movweq	r0, #54542	; 0xd50e
    1950:	042e7bdb 	strteq	r7, [lr], #-3035	; 0xfffff425
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    1954:	03290509 			; <UNDEFINED> instruction: 0x03290509
    1958:	042004a5 	strteq	r0, [r0], #-1189	; 0xfffffb5b
    195c:	06040501 	streq	r0, [r4], -r1, lsl #10
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1960:	4a019703 	bmi	67574 <__ccfg+0x475cc>
	va_start (ap, plid);
    1964:	31050e04 	tstcc	r5, r4, lsl #28
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1968:	0179f303 	cmneq	r9, r3, lsl #6	; <UNPREDICTABLE>
    196c:	05150505 	ldreq	r0, [r5, #-1285]	; 0xfffffafb
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    1970:	04010652 	streq	r0, [r1], #-1618	; 0xfffff9ae
    1974:	061a0501 	ldreq	r0, [sl], -r1, lsl #10
    1978:	2e068c03 	cdpcs	12, 0, cr8, cr6, cr3, {0}
    197c:	04110a05 	ldreq	r0, [r1], #-2565	; 0xfffff5fb
			syserror (ENODEVICE, "tcv04");
    1980:	0305050e 	movweq	r0, #21774	; 0x550e
		syserror (EMALLOC, "tcv05");
    1984:	05017ac3 	streq	r7, [r1, #-2755]	; 0xfffff53d
	attp.b.outgoing = 1;
    1988:	0401060d 	streq	r0, [r1], #-1549	; 0xfffff9f3
    198c:	030a0501 	movweq	r0, #42241	; 0xa501
    1990:	052005bd 	streq	r0, [r0, #-1469]!	; 0xfffffa43
    1994:	59320604 	ldmdbpl	r2!, {r2, r9, sl}
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1998:	01060b05 	tsteq	r6, r5, lsl #22
		if (descriptors [fd] == NULL)
    199c:	21061a05 	tstcs	r6, r5, lsl #20
    19a0:	05110a05 	ldreq	r0, [r1, #-2565]	; 0xfffff5fb
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    19a4:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
		return ERROR;
    19a8:	0405580a 	streq	r5, [r5], #-2058	; 0xfffff7f6
}
    19ac:	09043206 	stmdbeq	r4, {r1, r2, r9, ip, sp}
    19b0:	b8030505 	stmdalt	r3, {r0, r2, r8, sl}
    19b4:	3105017a 	tstcc	r5, sl, ror r1
	s->attpattern.b.session = fd;
    19b8:	3f050106 	svccc	0x00050106
    19bc:	207ebc03 	rsbscs	fp, lr, r3, lsl #24
	descriptors [fd] = s;
    19c0:	c4033105 	strgt	r3, [r3], #-261	; 0xfffffefb
	q_init (&(s->rqueue));
    19c4:	01042001 	tsteq	r4, r1
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    19c8:	03060405 	movweq	r0, #25605	; 0x6405
    19cc:	042005cb 	strteq	r0, [r0], #-1483	; 0xfffffa35
    19d0:	03050509 	movweq	r0, #21769	; 0x5509
    19d4:	050178f1 	streq	r7, [r1, #-2289]	; 0xfffff70f
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    19d8:	0401063f 	streq	r0, [r1], #-1599	; 0xfffff9c1
    19dc:	06040501 	streq	r0, [r4], -r1, lsl #10
    19e0:	2e079203 	cdpcs	2, 0, cr9, cr7, cr3, {0}
	descriptors [fd] = s;
    19e4:	05050c04 	streq	r0, [r5, #-3076]	; 0xfffff3fc
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    19e8:	0177f503 	cmneq	r7, r3, lsl #10	; <UNPREDICTABLE>
    19ec:	01062e05 	tsteq	r6, r5, lsl #28
	if (s == NULL)
    19f0:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
		syserror (EMALLOC, "tcv05");
    19f4:	088e0306 	stmeq	lr, {r1, r2, r8, r9}
    19f8:	0502042e 	streq	r0, [r2, #-1070]	; 0xfffffbd2
    19fc:	77c90305 	strbvc	r0, [r9, r5, lsl #6]
    1a00:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    1a04:	08ba0304 	ldmeq	sl!, {r2, r8, r9}
    1a08:	2e090320 	cdpcs	3, 0, cr0, cr9, cr0, {1}
    1a0c:	0302052f 	movweq	r0, #9519	; 0x252f
    1a10:	04017db0 	streq	r7, [r1], #-3504	; 0xfffff250
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    1a14:	03240506 			; <UNDEFINED> instruction: 0x03240506
	    (plugins [ord] != NULL && plugins [ord] != pl))
    1a18:	05017ed4 	streq	r7, [r1, #-3796]	; 0xfffff12c
    1a1c:	23051705 	movwcs	r1, #22277	; 0x5705
    1a20:	01040106 	tsteq	r4, r6, lsl #2
	plugins [ord] = pl;
    1a24:	a8030105 	stmdage	r3, {r0, r2, r8}
	return 0;
    1a28:	04055801 	streq	r5, [r5], #-2049	; 0xfffff7ff
		return ERROR;
    1a2c:	02f00306 	rscseq	r0, r0, #402653184	; 0x18000000
}
    1a30:	2c055b20 			; <UNDEFINED> instruction: 0x2c055b20
    1a34:	32050106 	andcc	r0, r5, #-2147483647	; 0x80000001
	verify_fds (fd, "tcv16");
    1a38:	032c0527 			; <UNDEFINED> instruction: 0x032c0527
								Boolean urg) {
    1a3c:	04052079 	streq	r2, [r5], #-121	; 0xffffff87
    1a40:	2d054c06 	stccs	12, cr4, [r5, #-24]	; 0xffffffe8
	verify_fds (fd, "tcv16");
    1a44:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    1a48:	32055d06 	andcc	r5, r5, #384	; 0x180
    1a4c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
	verify_pld (s, tcv_frm, "tcv17");
    1a50:	32053e06 	andcc	r3, r5, #6, 28	; 0x60
    1a54:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    1a58:	02042406 	andeq	r2, r4, #100663296	; 0x6000000
    1a5c:	8b030505 	blhi	c2e78 <__ccfg+0xa2ed0>
    1a60:	01040177 	tsteq	r4, r7, ror r1
    1a64:	f8030405 			; <UNDEFINED> instruction: 0xf8030405
    1a68:	0e042008 	cdpeq	0, 0, cr2, cr4, cr8, {0}
    1a6c:	88030505 	stmdahi	r3, {r0, r2, r8, sl}
	ptrs.head = (word) fd;
    1a70:	2d05017a 	stfcss	f0, [r5, #-488]	; 0xfffffe18
	ptrs.tail = (word) urg;
    1a74:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    1a78:	4d053106 	stfmis	f3, [r5, #-24]	; 0xffffffe8
    1a7c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
		if (state != WNONE) {
    1a80:	2e053d06 	cdpcs	13, 0, cr3, cr5, cr6, {0}
    1a84:	01040106 	tsteq	r4, r6, lsl #2
}
    1a88:	03060405 	movweq	r0, #25605	; 0x6405
			when (eid, state);
    1a8c:	043c05f7 	ldrteq	r0, [ip], #-1527	; 0xfffffa09
    1a90:	03050502 	movweq	r0, #21762	; 0x5502
			release;
    1a94:	04017785 	streq	r7, [r1], #-1925	; 0xfffff87b
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    1a98:	060d050e 	streq	r0, [sp], -lr, lsl #10
    1a9c:	2002e803 	andcs	lr, r2, r3, lsl #16
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    1aa0:	39050104 	stmdbcc	r5, {r2, r8}
    1aa4:	06960306 	ldreq	r0, [r6], r6, lsl #6
    1aa8:	010a0520 	tsteq	sl, r0, lsr #10
    1aac:	05050e04 	streq	r0, [r5, #-3588]	; 0xfffff1fc
    1ab0:	0179ea03 	cmneq	r9, r3, lsl #20
    1ab4:	01060d05 	tsteq	r6, r5, lsl #26
		if (state != WNONE) {
    1ab8:	0a050104 	beq	141ed0 <__ccfg+0x121f28>
    1abc:	20069603 	andcs	r9, r6, r3, lsl #12
			tmwait (state);
    1ac0:	32060405 	andcc	r0, r6, #83886080	; 0x5000000
    1ac4:	05050904 	streq	r0, [r5, #-2308]	; 0xfffff6fc
	b->attributes = s->attpattern;
    1ac8:	0177ec03 	cmneq	r7, r3, lsl #24
		b->attributes.b.urgent = 1;
    1acc:	01064105 	tsteq	r6, r5, lsl #2
    1ad0:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
	b->u.pointers.head = ptrs.head;
    1ad4:	2e089703 	cdpcs	7, 0, cr9, cr8, cr3, {0}
	b->u.pointers.tail = length;
    1ad8:	41050904 	tstmi	r5, r4, lsl #18
	return (address) (b + 1);
    1adc:	2077e903 	rsbscs	lr, r7, r3, lsl #18
    1ae0:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    1ae4:	08970306 	ldmeq	r7, {r1, r2, r8, r9}
    1ae8:	0d045220 	sfmeq	f5, 4, [r4, #-128]	; 0xffffff80
    1aec:	d1030205 	tstle	r3, r5, lsl #4
    1af0:	014a2075 	hvceq	41477	; 0xa205
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    1af4:	03040101 	movweq	r0, #16641	; 0x4101
    1af8:	2b030305 	blcs	c2714 <__ccfg+0xa276c>
    1afc:	050d0401 	streq	r0, [sp, #-1025]	; 0xfffffbff
	verify_fph (phy, "tcv23");
    1b00:	20550302 	subscs	r0, r5, r2, lsl #6
    1b04:	00370216 	eorseq	r0, r7, r6, lsl r2
    1b08:	12050101 	andne	r0, r5, #1073741824	; 0x40000000
    1b0c:	20020500 	andcs	r0, r2, r0, lsl #10
}
    1b10:	03000010 	movweq	r0, #16
	return (physical [phy]) (opt, arg);
    1b14:	050100e1 	streq	r0, [r1, #-225]	; 0xffffff1f
    1b18:	12051402 	andne	r1, r5, #33554432	; 0x2000000
    1b1c:	02051e06 	andeq	r1, r5, #6, 28	; 0x60
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    1b20:	061f2122 	ldreq	r2, [pc], -r2, lsr #2
	if (opt < 0) {
    1b24:	3f4b2f21 	svccc	0x004b2f21
		if (fd < 0)
    1b28:	01060805 	tsteq	r6, r5, lsl #16
		if (opt == PHYSOPT_PLUGINFO) {
    1b2c:	2f060205 	svccs	0x00060205
			if (fd >= TCV_MAX_PLUGS)
    1b30:	01000802 	tsteq	r0, r2, lsl #16
			if ((p = plugins [fd]) == NULL)
    1b34:	003a0501 	eorseq	r0, sl, r1, lsl #10
    1b38:	00000205 	andeq	r0, r0, r5, lsl #4
}
    1b3c:	f1030000 			; <UNDEFINED> instruction: 0xf1030000
		if (fd >= TCV_MAX_PHYS)
    1b40:	02050100 	andeq	r0, r5, #0, 2
		return physinfo [fd];
    1b44:	3a051414 	bcc	146b9c <__ccfg+0x126bf4>
    1b48:	05200e06 	streq	r0, [r0, #-3590]!	; 0xfffff1fa
	verify_fds (fd, "tcv22");
    1b4c:	3a052406 	bcc	14ab6c <__ccfg+0x12abc4>
    1b50:	2405051c 	strcs	r0, [r5], #-1308	; 0xfffffae4
    1b54:	3f060305 	svccc	0x00060305
    1b58:	01060605 	tsteq	r6, r5, lsl #12
    1b5c:	30060405 	andcc	r0, r6, r5, lsl #8
}
    1b60:	01061205 	tsteq	r6, r5, lsl #4
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    1b64:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
    1b68:	05250603 	streq	r0, [r5, #-1539]!	; 0xfffff9fd
			return 0;
    1b6c:	04010609 	streq	r0, [r1], #-1545	; 0xfffff9f7
    1b70:	032f050f 			; <UNDEFINED> instruction: 0x032f050f
    1b74:	01042015 	tsteq	r4, r5, lsl r0
    1b78:	6b030905 	blvs	c3f94 <__ccfg+0xa3fec>
    1b7c:	06030520 	streq	r0, [r3], -r0, lsr #10
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    1b80:	050f0421 	streq	r0, [pc, #-1057]	; 1767 <diag+0xfb>
    1b84:	01140305 	tsteq	r4, r5, lsl #6
	if (dsp != TCV_DSP_PASS) {
    1b88:	01062f05 	tsteq	r6, r5, lsl #30
		if (ses == NONE)
    1b8c:	01050104 	tsteq	r5, r4, lsl #2
			syserror (EREQPAR, "tcv26");
    1b90:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
		verify_fds (ses, "tcv27");
    1b94:	6f030604 	svcvs	0x00030604
    1b98:	050f0420 	streq	r0, [pc, #-1056]	; 1780 <diag+0x114>
    1b9c:	00c30305 	sbceq	r0, r3, r5, lsl #6
    1ba0:	18051401 	stmdane	r5, {r0, sl, ip}
    1ba4:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
		if ((p = apb (size)) != NULL) {
    1ba8:	01043306 	tsteq	r4, r6, lsl #6
    1bac:	03060b05 	movweq	r0, #27397	; 0x6b05
		return NULL;
    1bb0:	05017fb6 	streq	r7, [r1, #-4022]	; 0xfffff04a
			p->attributes = descriptors [ses] -> attpattern;
    1bb4:	04340603 	ldrteq	r0, [r4], #-1539	; 0xfffff9fd
			dispose (p, dsp);
    1bb8:	0e05050f 	cfsh32eq	mvfx0, mvfx5, #15
			p->attributes = descriptors [ses] -> attpattern;
    1bbc:	01062f05 	tsteq	r6, r5, lsl #30
			p->attributes.b.outgoing = 0;
    1bc0:	03050104 	movweq	r0, #20740	; 0x5104
			dispose (p, dsp);
    1bc4:	06054106 	streq	r4, [r5], -r6, lsl #2
			return (address)(p + 1);
    1bc8:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    1bcc:	2b06053f 	blcs	1830d0 <__ccfg+0x163128>
	if ((p = apb (size)) != NULL)
    1bd0:	23060405 	movwcs	r0, #25605	; 0x6405
    1bd4:	2203052f 	andcs	r0, r3, #197132288	; 0xbc00000
		return (address)(p + 1);
    1bd8:	09051306 	stmdbeq	r5, {r1, r2, r8, r9, ip}
    1bdc:	0603051f 			; <UNDEFINED> instruction: 0x0603051f
    1be0:	09022f21 	stmdbeq	r2, {r0, r5, r8, r9, sl, fp, sp}
    1be4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1be8:	02050011 	andeq	r0, r5, #17
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    1bec:	00001050 	andeq	r1, r0, r0, asr r0
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1bf0:	010af103 	tsteq	sl, r3, lsl #2	; <UNPREDICTABLE>
    1bf4:	13160305 	tstne	r6, #335544320	; 0x14000000
		syserror (EREQPAR, "tcv28");
    1bf8:	05010f05 	streq	r0, [r1, #-3845]	; 0xfffff0fb
		syserror (EMALLOC, "tcv29");
    1bfc:	200d0611 	andcs	r0, sp, r1, lsl r6
	physical [phy] = ps;
    1c00:	05262505 	streq	r2, [r6, #-1285]!	; 0xfffffafb
	physinfo [phy] = info;
    1c04:	04051f03 	streq	r1, [r5], #-3843	; 0xfffff0fd
    1c08:	25052106 	strcs	r2, [r5, #-262]	; 0xfffffefa
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    1c0c:	37050106 	strcc	r0, [r5, -r6, lsl #2]
    1c10:	0f052d06 	svceq	0x00052d06
    1c14:	06030501 	streq	r0, [r3], -r1, lsl #10
		syserror (EMALLOC, "tcv29");
    1c18:	06020501 	streq	r0, [r2], -r1, lsl #10
    1c1c:	03190632 	tsteq	r9, #52428800	; 0x3200000
	q_init (q);
    1c20:	31062079 	tstcc	r6, r9, ror r0
}
    1c24:	055b5b32 	ldrbeq	r5, [fp, #-2866]	; 0xfffff4ce
    1c28:	0501061c 	streq	r0, [r1, #-1564]	; 0xfffff9e4
    1c2c:	02054a0c 	andeq	r4, r5, #12, 20	; 0xc000
    1c30:	1d0c0523 	cfstr32ne	mvfx0, [ip, #-140]	; 0xffffff74
    1c34:	23060205 	movwcs	r0, #25093	; 0x6205
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1c38:	0503043e 	streq	r0, [r3, #-1086]	; 0xfffffbc2
	verify_fph (phy, "tcv30");
    1c3c:	75c50303 	strbvc	r0, [r5, #771]	; 0x303
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1c40:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    1c44:	0abd0302 	beq	fef42854 <_estack+0xdef3d854>
	verify_fph (phy, "tcv30");
    1c48:	000e0220 	andeq	r0, lr, r0, lsr #4
    1c4c:	0ee00101 	cdpeq	1, 14, cr0, cr0, cr1, {0}
    1c50:	00030000 	andeq	r0, r3, r0
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1c54:	00000190 	muleq	r0, r0, r1
    1c58:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1c5c:	0101000d 	tsteq	r1, sp
    1c60:	00000101 	andeq	r0, r0, r1, lsl #2
		if (plugins [plg] == NULL)
    1c64:	00000100 	andeq	r0, r0, r0, lsl #2
    1c68:	6f682f01 	svcvs	0x00682f01
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    1c6c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 1ac0 <tcv_wnps+0x88>
}
    1c70:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    1c74:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1c78:	6f746b73 	svcvs	0x00746b73
    1c7c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    1c80:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1c84:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    1c88:	2f534f43 	svccs	0x00534f43
    1c8c:	4f636950 	svcmi	0x00636950
    1c90:	656b2f53 	strbvs	r2, [fp, #-3923]!	; 0xfffff0ad
    1c94:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    1c98:	6f682f00 	svcvs	0x00682f00
	len -= (ap.head + ap.tail);
    1c9c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 1af0 <tcv_wnps+0xb8>
    1ca0:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    1ca4:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    1ca8:	6f746b73 	svcvs	0x00746b73
    1cac:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    1cb0:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    1cb4:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    1cb8:	2f534f43 	svccs	0x00534f43
    1cbc:	4f636950 	svcmi	0x00636950
	return 1;
    1cc0:	43432f53 	movtmi	r2, #16211	; 0x3f53
    1cc4:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    1cc8:	3143432f 	cmpcc	r3, pc, lsr #6
    1ccc:	57585833 	smmlarpl	r8, r3, r8, r5
    1cd0:	2f455241 	svccs	0x00455241
	verify_fph (phy, "tcv32");
    1cd4:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    1cd8:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    1cdc:	752f0062 	strvc	r0, [pc, #-98]!	; 1c82 <tcvphy_rcv+0x4a>
    1ce0:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 1b1c <tcvp_control+0x28>
    1ce4:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    1ce8:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
	oq = oqueues [phy];
    1cec:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
	b = q_first (oq);
    1cf0:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
	if (q_end (b, oq)) {
    1cf4:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
	*len = b->length;
    1cf8:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
	deq (b);	// Dequeue the packet ...
    1cfc:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
}
    1d00:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
		return NULL;
    1d04:	2f006564 	svccs	0x00006564
    1d08:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    1d0c:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    1d10:	2f6e6974 	svccs	0x006e6974
	verify_fph (phy, "tcv33");
    1d14:	6b736544 	blvs	1cdb22c <__ccfg+0x1cbb284>
    1d18:	2f706f74 	svccs	0x00706f74
    1d1c:	4f534c4f 	svcmi	0x00534c4f
    1d20:	2f54454e 	svccs	0x0054454e
    1d24:	4f434950 	svcmi	0x00434950
    1d28:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
	oq = oqueues [phy];
    1d2c:	2f534f63 	svccs	0x00534f63
	b = q_first (oq);
    1d30:	33314343 	teqcc	r1, #201326593	; 0xc000001
		return NULL;
    1d34:	2f005858 	svccs	0x00005858
	return (address)(b + 1);
    1d38:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
}
    1d3c:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    1d40:	2f6e6974 	svccs	0x006e6974
    1d44:	6b736544 	blvs	1cdb25c <__ccfg+0x1cbb2b4>
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    1d48:	2f706f74 	svccs	0x00706f74
	verify_plg (b, tcv_xmt, "tcv34");
    1d4c:	4f534c4f 	svcmi	0x00534c4f
	hblock_t *b = header (pkt);
    1d50:	2f54454e 	svccs	0x0054454e
	verify_plg (b, tcv_xmt, "tcv34");
    1d54:	4f434950 	svcmi	0x00434950
    1d58:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    1d5c:	00534f63 	subseq	r4, r3, r3, ror #30
    1d60:	72656b00 	rsbvc	r6, r5, #0, 22
    1d64:	2e6c656e 	cdpcs	5, 6, cr6, cr12, cr14, {3}
    1d68:	00010063 	andeq	r0, r1, r3, rrx
    1d6c:	72617500 	rsbvc	r7, r1, #0, 10
	dispose (b, plugins [b->attributes.b.plugin] ->
    1d70:	00682e74 	rsbeq	r2, r8, r4, ror lr
}
    1d74:	73000002 	movwvc	r0, #2
	dispose (b, plugins [b->attributes.b.plugin] ->
    1d78:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    1d7c:	00682e74 	rsbeq	r2, r8, r4, ror lr
    1d80:	73000003 	movwvc	r0, #3
}
    1d84:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
    while(1)
    1d88:	00682e67 	rsbeq	r2, r8, r7, ror #28
{
    1d8c:	61000003 	tstvs	r0, r3
    SetupTrimDevice();
    1d90:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    pui32Src = &_etext;
    1d94:	00040068 	andeq	r0, r4, r8, rrx
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1d98:	63616d00 	cmnvs	r1, #0, 26
    __asm("    ldr     r0, =_bss\n"
    1d9c:	00682e68 	rsbeq	r2, r8, r8, ror #28
    1da0:	70000004 	andvc	r0, r0, r4
    1da4:	5f736e69 	svcpl	0x00736e69
    1da8:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    1dac:	00040068 	andeq	r0, r4, r8, rrx
   main();
    1db0:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    FaultISR();
    1db4:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
        *pui32Dest++ = *pui32Src++;
    1db8:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    1dbc:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    1dc0:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    1dc4:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    1dc8:	00050068 	andeq	r0, r5, r8, rrx
    1dcc:	72656b00 	rsbvc	r6, r5, #0, 22
    1dd0:	2e6c656e 	cdpcs	5, 6, cr6, cr12, cr14, {3}
    1dd4:	00010068 	andeq	r0, r1, r8, rrx
static byte get_byte () {
    1dd8:	75623c00 	strbvc	r3, [r2, #-3072]!	; 0xfffff400
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1ddc:	2d746c69 	ldclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
    1de0:	003e6e69 	eorseq	r6, lr, r9, ror #28
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1de4:	00000000 	andeq	r0, r0, r0
    1de8:	05002605 	streq	r2, [r0, #-1541]	; 0xfffff9fb
		if (ee_inp)
    1dec:	0010b002 	andseq	fp, r0, r2
			b |= 1;
    1df0:	03c30300 	biceq	r0, r3, #0, 6
    1df4:	16020501 	strne	r0, [r2], -r1, lsl #10
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1df8:	05141313 	ldreq	r1, [r4, #-787]	; 0xfffffced
	for (b = 0, i = 0; i < 8; i++) {
    1dfc:	78030626 	stmdavc	r3, {r1, r2, r5, r9, sl}
}
    1e00:	03020501 	movweq	r0, #9473	; 0x2501
    1e04:	07052009 	streq	r2, [r5, -r9]
    1e08:	0602051f 			; <UNDEFINED> instruction: 0x0602051f
static void put_byte (byte b) {
    1e0c:	13052021 	movwne	r2, #20513	; 0x5021
    1e10:	0a052106 	beq	14a230 <__ccfg+0x12a288>
    1e14:	2013053c 	andscs	r0, r3, ip, lsr r5
    1e18:	053e0805 	ldreq	r0, [lr, #-2053]!	; 0xfffff7fb
		if (b & 0x80)
    1e1c:	052c060f 	streq	r0, [ip, #-1551]!	; 0xfffff9f1
    1e20:	05010603 	streq	r0, [r1, #-1539]	; 0xfffff9fd
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1e24:	052f0604 	streq	r0, [pc, #-1540]!	; 1828 <enq+0x1c>
	for (i = 0; i < 8; i++) {
    1e28:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
		b <<= 1;
    1e2c:	05053c07 	streq	r3, [r5, #-3079]	; 0xfffff3f9
	for (i = 0; i < 8; i++) {
    1e30:	054b3106 	strbeq	r3, [fp, #-262]	; 0xfffffefa
}
    1e34:	017a0302 	cmneq	sl, r2, lsl #6
    1e38:	03060105 	movweq	r0, #24837	; 0x6105
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1e3c:	03022e0a 	movweq	r2, #11786	; 0x2e0a
    1e40:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
	put_byte (cmd);
    1e44:	0205001f 	andeq	r0, r5, #31
    1e48:	000010ec 	andeq	r1, r0, ip, ror #1
}
    1e4c:	0106c903 	tsteq	r6, r3, lsl #18
    1e50:	0d030205 	sfmeq	f0, 4, [r3, #-20]	; 0xffffffec
static void wwait (word st, word del) {
    1e54:	05131401 	ldreq	r1, [r3, #-1025]	; 0xfffffbff
    1e58:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    1e5c:	2070031f 	rsbscs	r0, r0, pc, lsl r3
	while (dopen && (rdsr () & 1)) {
    1e60:	10030d05 	andne	r0, r3, r5, lsl #26
    1e64:	061f052e 	ldreq	r0, [pc], -lr, lsr #10
    1e68:	06020520 	streq	r0, [r2], -r0, lsr #10
    1e6c:	11030601 	tstne	r3, r1, lsl #12
	put_byte (CMD_RDSR);
    1e70:	0d051320 	stceq	3, cr1, [r5, #-128]	; 0xffffff80
	r = get_byte ();
    1e74:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    1e78:	061f051f 			; <UNDEFINED> instruction: 0x061f051f
	while (dopen && (rdsr () & 1)) {
    1e7c:	06020521 	streq	r0, [r2], -r1, lsr #10
}
    1e80:	21250601 			; <UNDEFINED> instruction: 0x21250601
		if (st == WNONE)
    1e84:	15060f05 	strne	r0, [r6, #-3845]	; 0xfffff0fb
    1e88:	061d0205 	ldreq	r0, [sp], -r5, lsl #4
			mdelay (1);
    1e8c:	060f0523 	streq	r0, [pc], -r3, lsr #10
    1e90:	24010501 	strcs	r0, [r1], #-1281	; 0xfffffaff
			delay (del, st);
    1e94:	03060305 	movweq	r0, #25349	; 0x6305
    1e98:	1e052062 	cdpne	0, 0, cr2, cr5, cr2, {3}
			release;
    1e9c:	06050106 	streq	r0, [r5], -r6, lsl #2
    1ea0:	06040558 			; <UNDEFINED> instruction: 0x06040558
    1ea4:	13052130 	movwne	r2, #20784	; 0x5130
static void ready () {
    1ea8:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
	if (dopen) {
    1eac:	2e059106 	mvfcss	f1, f6
		wwait (WNONE, 1);
    1eb0:	0636050d 	ldrteq	r0, [r6], -sp, lsl #10
    1eb4:	060a0501 	streq	r0, [sl], -r1, lsl #10
    1eb8:	061f0534 			; <UNDEFINED> instruction: 0x061f0534
	dstat = 0;
    1ebc:	580d0501 	stmdapl	sp, {r0, r8, sl}
}
    1ec0:	22060405 	andcs	r0, r6, #83886080	; 0x5000000
    1ec4:	0610052f 	ldreq	r0, [r0], -pc, lsr #10
    1ec8:	06040501 	streq	r0, [r4], -r1, lsl #10
	udelay (1);
    1ecc:	05ac0b03 	streq	r0, [ip, #2819]!	; 0xb03
    1ed0:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
	udelay (1);
    1ed4:	0564062e 	strbeq	r0, [r4, #-1582]!	; 0xfffff9d2
		dopen = DOPEN_TEMP;
    1ed8:	02130609 	andseq	r0, r3, #9437184	; 0x900000
    1edc:	01010007 	tsteq	r1, r7
    1ee0:	05001c05 	streq	r1, [r0, #-3077]	; 0xfffff3fb
    1ee4:	00116c02 	andseq	r6, r1, r2, lsl #24
static void cclose () {
    1ee8:	08c60300 	stmiaeq	r6, {r8, r9}^
	if (dopen == DOPEN_TEMP) {
    1eec:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    1ef0:	0d050204 	sfmeq	f0, 4, [r5, #-16]
		wwait (WNONE, 1);
    1ef4:	7cdf0306 	ldclvc	3, cr0, [pc], {6}
    1ef8:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	cmd_0 (CMD_DP);
    1efc:	a103060f 	tstge	r3, pc, lsl #12
    1f00:	02052003 	andeq	r2, r5, #3
		dopen = 0;
    1f04:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
}
    1f08:	7cda0324 	ldclvc	3, cr0, [sl], {36}	; 0x24
word ee_open () {
    1f0c:	17050501 	strne	r0, [r5, -r1, lsl #10]
	ready ();
    1f10:	01060d05 	tsteq	r6, r5, lsl #26
	dopen = DOPEN_PERM;
    1f14:	02050104 	andeq	r0, r5, #4, 2
    1f18:	2003a103 	andcs	sl, r3, r3, lsl #2
}
    1f1c:	01052f06 	tsteq	r5, r6, lsl #30
	if (dopen) {
    1f20:	05023d06 	streq	r3, [r2, #-3334]	; 0xfffff2fa
    1f24:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
		dopen = DOPEN_TEMP;
    1f28:	02050027 	andeq	r0, r5, #39	; 0x27
		cclose ();
    1f2c:	00000000 	andeq	r0, r0, r0
}
    1f30:	0100de03 	tsteq	r0, r3, lsl #28
int ser_in (word st, char *buf, int len) {
    1f34:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    1f38:	0e062705 	cdpeq	7, 0, cr2, cr6, cr5, {0}
	if (len == 0)
    1f3c:	05240205 	streq	r0, [r4, #-517]!	; 0xfffffdfb
	if (__inpline == NULL) {
    1f40:	02051c27 	andeq	r1, r5, #9984	; 0x2700
		if ((prcs = running (__inserial)) == 0) {
    1f44:	23200624 			; <UNDEFINED> instruction: 0x23200624
    1f48:	05480305 	strbeq	r0, [r8, #-773]	; 0xfffffcfb
			prcs = runthread (__inserial);
    1f4c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    1f50:	052d0602 	streq	r0, [sp, #-1538]!	; 0xfffff9fe
			if (prcs == 0) {
    1f54:	02320601 	eorseq	r0, r2, #1048576	; 0x100000
				npwait (st);
    1f58:	01010005 	tsteq	r1, r5
		release;
    1f5c:	05001b05 	streq	r1, [r0, #-2821]	; 0xfffff4fb
		join (prcs, st);
    1f60:	00118402 	andseq	r8, r1, r2, lsl #8
    1f64:	00fa0300 	rscseq	r0, sl, r0, lsl #6
	if (*__inpline == NULL) // bin cmd
    1f68:	13020501 	movwne	r0, #9473	; 0x2501
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    1f6c:	1f061b05 	svcne	0x00061b05
	if (prcs >= len)
    1f70:	02210205 	eoreq	r0, r1, #1342177280	; 0x50000000
		prcs = len-1;
    1f74:	01010006 	tsteq	r1, r6
	memcpy (buf, __inpline, prcs);
    1f78:	05001e05 	streq	r1, [r0, #-3589]	; 0xfffff1fb
    1f7c:	00119402 	andseq	r9, r1, r2, lsl #8
    1f80:	00fe0300 	rscseq	r0, lr, r0, lsl #6
	ufree (__inpline);
    1f84:	16020501 	strne	r0, [r2], -r1, lsl #10
	__inpline = NULL;
    1f88:	010e0514 	tsteq	lr, r4, lsl r5
	if (*buf) // if it's NULL, it's a bin cmd
    1f8c:	03061e05 	movweq	r1, #28165	; 0x6e05
		buf [prcs] = '\0';
    1f90:	0905207a 	stmdbeq	r5, {r1, r3, r4, r5, r6, sp}
}
    1f94:	031e0534 	tsteq	lr, #52, 10	; 0xd000000
		prcs = strlen (__inpline);
    1f98:	0305207a 	movweq	r2, #20602	; 0x507a
    1f9c:	12052706 	andne	r2, r5, #1572864	; 0x180000
		return 0;
    1fa0:	06050106 	streq	r0, [r5], -r6, lsl #2
    1fa4:	061f052e 	ldreq	r0, [pc], -lr, lsr #10
    1fa8:	0620051f 			; <UNDEFINED> instruction: 0x0620051f
int ser_outf (word st, const char *m, ...) {
    1fac:	060e0501 	streq	r0, [lr], -r1, lsl #10
    1fb0:	06020520 	streq	r0, [r2], -r0, lsr #10
	if ((prcs = running (__outserial)) != 0) {
    1fb4:	05320601 	ldreq	r0, [r2, #-1537]!	; 0xfffff9ff
    1fb8:	02051303 	andeq	r1, r5, #201326592	; 0xc000000
		join (prcs, st);
    1fbc:	1105153b 	tstne	r5, fp, lsr r5
    1fc0:	01050106 	tsteq	r5, r6, lsl #2
		release;
    1fc4:	0006022f 	andeq	r0, r6, pc, lsr #4
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1fc8:	21050101 	tstcs	r5, r1, lsl #2
    1fcc:	00020500 	andeq	r0, r2, r0, lsl #10
    1fd0:	03000000 	movweq	r0, #0
		umwait (st);
    1fd4:	0501018e 	streq	r0, [r1, #-398]	; 0xfffffe72
    1fd8:	05141602 	ldreq	r1, [r4, #-1538]	; 0xfffff9fe
	if (runstrand (__outserial, buf) == 0) {
    1fdc:	0905010e 	stmdbeq	r5, {r1, r2, r3, r8}
    1fe0:	21052006 	tstcs	r5, r6
    1fe4:	052e7a03 	streq	r7, [lr, #-2563]!	; 0xfffff5fd
		ufree (buf);
    1fe8:	05270603 	streq	r0, [r7, #-1539]!	; 0xfffff9fd
		npwait (st);
    1fec:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
}
    1ff0:	04052e06 	streq	r2, [r5], #-3590	; 0xfffff1fa
    1ff4:	03052106 	movweq	r2, #20742	; 0x5106
    1ff8:	0606054b 	streq	r0, [r6], -fp, asr #10
    1ffc:	061f0501 	ldreq	r0, [pc], -r1, lsl #10
int ser_inf (word st, const char *fmt, ...) {
    2000:	0620052b 	strteq	r0, [r0], -fp, lsr #10
    2004:	060e0501 	streq	r0, [lr], -r1, lsl #10
	if (fmt == NULL)
    2008:	06020520 	streq	r0, [r2], -r0, lsr #10
	if (__inpline == NULL) {
    200c:	05340601 	ldreq	r0, [r4, #-1537]!	; 0xfffff9ff
		if ((prcs = running (__inserial)) == 0) {
    2010:	0205580b 	andeq	r5, r5, #720896	; 0xb0000
    2014:	01080513 	tsteq	r8, r3, lsl r5
			prcs = runthread (__inserial);
    2018:	052f0305 	streq	r0, [pc, #-773]!	; 1d1b <tcvphy_top+0x7>
    201c:	0501061f 	streq	r0, [r1, #-1567]	; 0xfffff9e1
			if (prcs == 0) {
    2020:	12052021 	andne	r2, r5, #33	; 0x21
				npwait (st);
    2024:	06030520 	streq	r0, [r3], -r0, lsr #10
		release;
    2028:	0606052f 	streq	r0, [r6], -pc, lsr #10
		join (prcs, st);
    202c:	06020501 	streq	r0, [r2], -r1, lsl #10
    2030:	2e0b0532 	mcrcs	5, 0, r0, cr11, cr2, {1}
	va_start (ap, fmt);
    2034:	13060105 	movwne	r0, #24837	; 0x6105
	prcs = vscan (__inpline, fmt, ap);
    2038:	01000702 	tsteq	r0, r2, lsl #14
    203c:	002a0501 	eoreq	r0, sl, r1, lsl #10
	ufree (__inpline);
    2040:	11c00205 	bicne	r0, r0, r5, lsl #4
	__inpline = NULL;
    2044:	a6030000 	strge	r0, [r3], -r0
}
    2048:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
    204c:	06050514 			; <UNDEFINED> instruction: 0x06050514
    2050:	06020501 	streq	r0, [r2], -r1, lsl #10
		return 0;
    2054:	00020221 	andeq	r0, r2, r1, lsr #4
    2058:	2e050101 	adfcss	f0, f5, f1
    205c:	c8020500 	stmdagt	r2, {r8, sl}
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    2060:	03000011 	movweq	r0, #17
    2064:	060101ae 	streq	r0, [r1], -lr, lsr #3
    2068:	06020520 	streq	r0, [r2], -r0, lsr #10
	RF_cmdFs.frequency = 
    206c:	13200e03 			; <UNDEFINED> instruction: 0x13200e03
}
    2070:	05011003 	streq	r1, [r1, #-3]
    2074:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    2078:	02053c05 	andeq	r3, r5, #1280	; 0x500
    207c:	2e090306 	cdpcs	3, 0, cr0, cr9, cr6, {0}
static int option (int opt, address val) {
    2080:	01060605 	tsteq	r6, r5, lsl #12
    2084:	05580505 	ldrbeq	r0, [r8, #-1285]	; 0xfffffafb
    2088:	03053c06 	movweq	r3, #23558	; 0x5c06
    208c:	2e270806 	cdpcs	8, 2, cr0, cr7, cr6, {0}
    2090:	29030205 	stmdbcs	r3, {r0, r2, r9}
    2094:	06140520 	ldreq	r0, [r4], -r0, lsr #10
    2098:	2e0d0501 	cfsh32cs	mvfx0, mvfx13, #1
    209c:	03060405 	movweq	r0, #25605	; 0x6405
    20a0:	09052e59 	stmdbeq	r5, {r0, r3, r4, r6, r9, sl, fp, sp}
    20a4:	07050106 	streq	r0, [r5, -r6, lsl #2]
    20a8:	06040520 	streq	r0, [r4], -r0, lsr #10
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    20ac:	06080531 			; <UNDEFINED> instruction: 0x06080531
    20b0:	3c070501 	cfstr32cc	mvfx0, [r7], {1}
			goto RVal;
    20b4:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
			_BIS (dstate, DSTATE_RXON);
    20b8:	3e080605 	cfmadd32cc	mvax0, mvfx0, mvfx8, mvfx5
    20bc:	79030305 	stmdbvc	r3, {r0, r2, r8, r9}
	int ret = 0;
    20c0:	0305053c 	movweq	r0, #21820	; 0x553c
			p_trigger (drvprcs, qevent);
    20c4:	12052e0b 	andne	r2, r5, #11, 28	; 0xb0
    20c8:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    20cc:	07052106 	streq	r2, [r5, -r6, lsl #2]
    20d0:	03051106 	movweq	r1, #20742	; 0x5106
    20d4:	66170306 	ldrvs	r0, [r7], -r6, lsl #6
    20d8:	01060705 	tsteq	r6, r5, lsl #14
    20dc:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    20e0:	16030602 	strne	r0, [r3], -r2, lsl #12
    20e4:	060b053c 			; <UNDEFINED> instruction: 0x060b053c
    20e8:	06020501 	streq	r0, [r2], -r1, lsl #10
}
    20ec:	06010540 	streq	r0, [r1], -r0, asr #10
			_BIC (dstate, DSTATE_RXON);
    20f0:	05010d03 	streq	r0, [r1, #-3331]	; 0xfffff2fd
    20f4:	2e730302 	cdpcs	3, 7, cr0, cr3, cr2, {0}
			statid = (val == NULL) ? 0 : *val;
    20f8:	0d030105 	stfeqs	f0, [r3, #-20]	; 0xffffffec
    20fc:	000a022e 	andeq	r0, sl, lr, lsr #4
	int ret = 0;
    2100:	1b050101 	blne	14250c <__ccfg+0x122564>
			ret = (int) statid;
    2104:	94020500 	strls	r0, [r2], #-1280	; 0xfffffb00
	if (val != NULL)
    2108:	03000012 	movweq	r0, #18
		*val = ret;
    210c:	050102d2 	streq	r0, [r1, #-722]	; 0xfffffd2e
			ret = rbuffl + 2;
    2110:	1b051402 	blne	147120 <__ccfg+0x127178>
    2114:	02051006 	andeq	r1, r5, #6
			if (val != NULL) {
    2118:	024b0622 	subeq	r0, fp, #35651584	; 0x2200000
				memcpy (val, &rxstat,
    211c:	01010005 	tsteq	r1, r5
    2120:	05002a05 	streq	r2, [r0, #-2565]	; 0xfffff5fb
				memset (&rxstat, 0, 
    2124:	0012a802 	andseq	sl, r2, r2, lsl #16
    2128:	02d80300 	sbcseq	r0, r8, #0, 6
			if (val == NULL)
    212c:	16020501 	strne	r0, [r2], -r1, lsl #10
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    2130:	0e062a05 	vmlaeq.f32	s4, s12, s10
    2134:	05240b05 	streq	r0, [r4, #-2821]!	; 0xfffff4fb
				utimer_set (bckf_timer, *val);
    2138:	02053e05 	andeq	r3, r5, #5, 28	; 0x50
    213c:	05054a06 	streq	r4, [r5, #-2566]	; 0xfffff5fa
    2140:	03050106 	movweq	r0, #20742	; 0x5106
			for (ret = 0; ret < 8; ret++)
    2144:	02052106 	andeq	r2, r5, #-2147483647	; 0x80000001
				if (RF_cmdPropRadioDivSetup.txPower
    2148:	3d06014c 	stfccs	f0, [r6, #-304]	; 0xfffffed0
					== patable [ret])
    214c:	2020061f 	eorcs	r0, r0, pc, lsl r6
				if (RF_cmdPropRadioDivSetup.txPower
    2150:	06010513 			; <UNDEFINED> instruction: 0x06010513
			for (ret = 0; ret < 8; ret++)
    2154:	00060221 	andeq	r0, r6, r1, lsr #4
    2158:	21050101 	tstcs	r5, r1, lsl #2
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    215c:	dc020500 	cfstr32le	mvfx0, [r2], {-0}
    2160:	03000012 	movweq	r0, #18
    2164:	050102e5 	streq	r0, [r1, #-741]	; 0xfffffd1b
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    2168:	14131602 	ldrne	r1, [r3], #-1538	; 0xfffff9fe
    216c:	03062105 	movweq	r2, #24837	; 0x6105
			_BIS (dstate, DSTATE_IRST);
    2170:	02050179 	andeq	r0, r5, #1073741854	; 0x4000001e
    2174:	052e0627 	streq	r0, [lr, #-1575]!	; 0xfffff9d9
    2178:	05210613 	streq	r0, [r1, #-1555]!	; 0xfffff9ed
			ret = (int) channel;
    217c:	1305200a 	movwne	r2, #20490	; 0x500a
			goto RVal;
    2180:	060f0520 	streq	r0, [pc], -r0, lsr #10
				(*val > 7) ? 7 : *val;
    2184:	0603054a 	streq	r0, [r3], -sl, asr #10
    2188:	06040501 	streq	r0, [r4], -r1, lsl #10
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    218c:	0607052f 	streq	r0, [r7], -pc, lsr #10
    2190:	06050501 	streq	r0, [r5], -r1, lsl #10
			plugch ();
    2194:	02054b5a 	andeq	r4, r5, #92160	; 0x16800
			_BIS (dstate, DSTATE_IRST);
    2198:	0601050d 	streq	r0, [r1], -sp, lsl #10
    219c:	022e0903 	eoreq	r0, lr, #49152	; 0xc000
			ret = (int) vrate;
    21a0:	01010003 	tsteq	r1, r3
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    21a4:	05002d05 	streq	r2, [r0, #-3333]	; 0xfffff2fb
    21a8:	00000002 	andeq	r0, r0, r2
    21ac:	02f70300 	rscseq	r0, r7, #0, 6
    21b0:	16020501 	strne	r0, [r2], -r1, lsl #10
    21b4:	2d051413 	cfstrscs	mvf1, [r5, #-76]	; 0xffffffb4
    21b8:	01790306 	cmneq	r9, r6, lsl #6
    21bc:	27020520 	strcs	r0, [r2, -r0, lsr #10]
    21c0:	09053006 	stmdbeq	r5, {r1, r2, ip, sp}
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    21c4:	0e050106 	adfeqs	f0, f5, f6
    21c8:	12052e06 	andne	r2, r5, #6, 28	; 0x60
    21cc:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    21d0:	3301053c 	movwcc	r0, #5436	; 0x153c
			syserror (EREQPAR, "cc13 op");
    21d4:	1c060305 	stcne	3, cr0, [r6], {5}
    21d8:	01060605 	tsteq	r6, r5, lsl #12
    21dc:	051f2005 	ldreq	r2, [pc, #-5]	; 21df <option+0x15f>
    21e0:	04052106 	streq	r2, [r5], #-262	; 0xfffffefa
    21e4:	1f052106 	svcne	0x00052106
    21e8:	00010264 	andeq	r0, r1, r4, ror #4
    21ec:	26050101 	strcs	r0, [r5], -r1, lsl #2
    21f0:	10020500 	andne	r0, r2, r0, lsl #10
    21f4:	03000013 	movweq	r0, #19
    21f8:	05010387 	streq	r0, [r1, #-903]	; 0xfffffc79
    21fc:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    2200:	200e0626 	andcs	r0, lr, r6, lsr #12
    2204:	06240205 	strteq	r0, [r4], -r5, lsl #4
    2208:	0609052e 	streq	r0, [r9], -lr, lsr #10
    220c:	06030528 	streq	r0, [r3], -r8, lsr #10
static void issue_cmd (lword cmd) {
    2210:	052e7903 	streq	r7, [lr, #-2307]!	; 0xfffff6fd
    2214:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    2218:	3d300604 	ldccc	6, cr0, [r0, #-16]!
    221c:	17060105 	strne	r0, [r6, -r5, lsl #2]
    2220:	03060205 	movweq	r0, #25093	; 0x6205
		if (res != 0x86)
    2224:	04022e77 	streq	r2, [r2], #-3703	; 0xfffff189
			syserror (EHARDWARE, "hang ic0");
    2228:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    222c:	02050021 	andeq	r0, r5, #33	; 0x21
		if (cnt-- == 0) {
    2230:	00001334 	andeq	r1, r0, r4, lsr r3
			diag ("HUP %lx %lx", cmd, res);
    2234:	01039903 	tsteq	r3, r3, lsl #18
    2238:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
			syserror (EHARDWARE, "hang ic0");
    223c:	200e0621 	andcs	r0, lr, r1, lsr #12
		udelay (1);
    2240:	06240205 	strteq	r0, [r4], -r5, lsl #4
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    2244:	1e053e85 	cdpne	14, 0, cr3, cr5, cr5, {4}
}
    2248:	0b050106 	bleq	142668 <__ccfg+0x1226c0>
    224c:	201e052e 	andscs	r0, lr, lr, lsr #10
    2250:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
    2254:	05220602 	streq	r0, [r2, #-1538]!	; 0xfffff9fe
static void rx_de () {
    2258:	02590601 	subseq	r0, r9, #1048576	; 0x100000
	if ((dstate & DSTATE_RXAC) == 0)
    225c:	01010005 	tsteq	r1, r5
    2260:	05001405 	streq	r1, [r0, #-1029]	; 0xfffffbfb
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    2264:	00000002 	andeq	r0, r0, r2
	_BIC (dstate, DSTATE_RXAC);
    2268:	03a70300 			; <UNDEFINED> instruction: 0x03a70300
    226c:	16020501 	strne	r0, [r2], -r1, lsl #10
}
    2270:	67060105 	strvs	r0, [r6, -r5, lsl #2]
    2274:	01000402 	tsteq	r0, r2, lsl #8
    2278:	00180501 	andseq	r0, r8, r1, lsl #10
static void rf_off () {
    227c:	00000205 	andeq	r0, r0, r5, lsl #4
	if ((dstate & DSTATE_RFON) == 0)
    2280:	b2030000 	andlt	r0, r3, #0
    2284:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
	IntDisable (INT_RFC_CPE_0);
    2288:	18051414 	stmdane	r5, {r2, r4, sl, ip}
    228c:	05200e06 	streq	r0, [r0, #-3590]!	; 0xfffff1fa
    2290:	5a062402 	bpl	18b2a0 <__ccfg+0x16b2f8>
	RFCAdi3VcoLdoVoltageMode (false);
    2294:	01060505 	tsteq	r6, r5, lsl #10
	RFCSynthPowerDown ();
    2298:	21060305 	tstcs	r6, r5, lsl #6
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    229c:	01060505 	tsteq	r6, r5, lsl #10
    22a0:	35060205 	strcc	r0, [r6, #-517]	; 0xfffffdfb
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    22a4:	01061205 	tsteq	r6, r5, lsl #4
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    22a8:	05590105 	ldrbeq	r0, [r9, #-261]	; 0xfffffefb
	OSCHF_SwitchToRcOscTurnOffXosc ();
    22ac:	7a030603 	bvc	c3ac0 <__ccfg+0xa3b18>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    22b0:	06053d20 	streq	r3, [r5], -r0, lsr #26
    22b4:	17050106 	strne	r0, [r5, -r6, lsl #2]
    22b8:	3d0b052e 	cfstr32cc	mvfx0, [fp, #-184]	; 0xffffff48
	_BIC (dstate, DSTATE_RFON);
    22bc:	01000802 	tsteq	r0, r2, lsl #16
    22c0:	001d0501 	andseq	r0, sp, r1, lsl #10
}
    22c4:	00000205 	andeq	r0, r0, r5, lsl #4
    22c8:	92030000 	andls	r0, r3, #0
    22cc:	02050104 	andeq	r0, r5, #4, 2
    22d0:	1d051414 	cfstrsne	mvf1, [r5, #-80]	; 0xffffffb0
    22d4:	05050e06 	streq	r0, [r5, #-3590]	; 0xfffff1fa
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    22d8:	06030524 	streq	r0, [r3], -r4, lsr #10
    22dc:	06050521 	streq	r0, [r5], -r1, lsr #10
    22e0:	06020501 	streq	r0, [r2], -r1, lsl #10
		if (cmd->status == tstat)
    22e4:	06010532 			; <UNDEFINED> instruction: 0x06010532
		if (timeout-- == 0) {
    22e8:	06030513 			; <UNDEFINED> instruction: 0x06030513
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    22ec:	0006022b 	andeq	r0, r6, fp, lsr #4
    22f0:	1d050101 	stfnes	f0, [r5, #-4]
    22f4:	6c020500 	cfstr32vs	mvfx0, [r2], {-0}
			syserror (EHARDWARE, "rt2");
    22f8:	03000013 	movweq	r0, #19
    22fc:	0501049e 	streq	r0, [r1, #-1182]	; 0xfffffb62
		udelay (1);
    2300:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
		if (cmd->status == tstat)
    2304:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
}
    2308:	052f0603 	streq	r0, [pc, #-1539]!	; 1d0d <tcvphy_get+0x39>
    230c:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2310:	2e3e0602 	cfmsuba32cs	mvax0, mvax0, mvfx14, mvfx2
    2314:	25060105 	strcs	r0, [r6, #-261]	; 0xfffffefb
static void rf_on () {
    2318:	1c060305 	stcne	3, cr0, [r6], {5}
    231c:	01060605 	tsteq	r6, r5, lsl #12
	OSCHF_TurnOnXosc();
    2320:	3b060205 	blcc	182b3c <__ccfg+0x162b94>
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    2324:	01000602 	tsteq	r0, r2, lsl #12
    2328:	001d0501 	andseq	r0, sp, r1, lsl #10
    232c:	00000205 	andeq	r0, r0, r5, lsl #4
    2330:	ac030000 	stcge	0, cr0, [r3], {-0}
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2334:	02050104 	andeq	r0, r5, #4, 2
    2338:	13141314 	tstne	r4, #20, 6	; 0x50000000
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    233c:	03061d05 	movweq	r1, #27909	; 0x6d05
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    2340:	0405017a 	streq	r0, [r5], #-378	; 0xfffffe86
	issue_cmd (
    2344:	21020525 	tstcs	r2, r5, lsr #10
    2348:	01052e06 	tsteq	r5, r6, lsl #28
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    234c:	03052406 	movweq	r2, #21510	; 0x5406
    2350:	06051d06 	streq	r1, [r5], -r6, lsl #26
    2354:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
   pPatchTab[80] = 0;
    2358:	2106051f 	tstcs	r6, pc, lsl r5
   } while (--nIterations);
    235c:	21060405 	tstcs	r6, r5, lsl #8
   pPatchTab[53] = 2;
    2360:	01060505 	tsteq	r6, r5, lsl #10
    2364:	3a060205 	bcc	182b80 <__ccfg+0x162bd8>
   pPatchTab[55] = 3;
    2368:	01000402 	tsteq	r0, r2, lsl #8
   pPatchTab[110] = 4;
    236c:	00210501 	eoreq	r0, r1, r1, lsl #10
   pPatchTab[107] = 5;
    2370:	13900205 	orrsne	r0, r0, #1342177280	; 0x50000000
   pPatchTab[65] = 6;
    2374:	b8030000 	stmdalt	r3, {}	; <UNPREDICTABLE>
    2378:	02050104 	andeq	r0, r5, #4, 2
   pPatchTab[57] = 1;
    237c:	21051414 	tstcs	r5, r4, lsl r4
   pIrqPatch[1] = _IRQ_PATCH_0;
    2380:	09050e06 	stmdbeq	r5, {r1, r2, r9, sl, fp}
   const uint32_t *pS = patchGenfskRfe;
    2384:	060e0524 	streq	r0, [lr], -r4, lsr #10
      t2 = *pS++;
    2388:	06020520 	streq	r0, [r2], -r0, lsr #10
      t4 = *pS++;
    238c:	31010501 	tstcc	r1, r1, lsl #10
      t6 = *pS++;
    2390:	1d062205 	sfmne	f2, 4, [r6, #-20]	; 0xffffffec
      t8 = *pS++;
    2394:	05011e05 	streq	r1, [r1, #-3589]	; 0xfffff1fb
      *pD++ = t1;
    2398:	0201061f 	andeq	r0, r1, #32505856	; 0x1f00000
      *pD++ = t2;
    239c:	01010002 	tsteq	r1, r2
      *pD++ = t3;
    23a0:	05002b05 	streq	r2, [r0, #-2821]	; 0xfffff4fb
      *pD++ = t5;
    23a4:	00139e02 	andseq	r9, r3, r2, lsl #28
      *pD++ = t7;
    23a8:	04c10300 	strbeq	r0, [r1], #768	; 0x300
   } while (--nIterations);
    23ac:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    23b0:	05202005 	streq	r2, [r0, #-5]!
      *pD++ = t8;
    23b4:	1a050108 	bne	1427dc <__ccfg+0x122834>
   } while (--nIterations);
    23b8:	18050106 	stmdane	r5, {r1, r2, r8}
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    23bc:	2e08052e 	cfsh32cs	mvfx0, mvfx8, #30
   *pD++ = t2;
    23c0:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
   *pD++ = t3;
    23c4:	01010001 	tsteq	r1, r1
   *pD++ = t4;
    23c8:	05003305 	streq	r3, [r0, #-773]	; 0xfffffcfb
   *pD++ = t5;
    23cc:	00000002 	andeq	r0, r0, r2
    23d0:	04c60300 	strbeq	r0, [r6], #768	; 0x300
	RFCAdi3VcoLdoVoltageMode (true);
    23d4:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    23d8:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
       	RFCRfTrimSet (&rfTrim);
    23dc:	05053002 	streq	r3, [r5, #-2]
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    23e0:	01050106 	tsteq	r5, r6, lsl #2
    23e4:	1d11052f 	cfldr32ne	mvfx0, [r1, #-188]	; 0xffffff44
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    23e8:	052e0d05 	streq	r0, [lr, #-3333]!	; 0xfffff2fb
    23ec:	052f0603 	streq	r0, [pc, #-1539]!	; 1df1 <get_byte+0x19>
	issue_cmd ((lword)&cmd_srt);
    23f0:	02010608 	andeq	r0, r1, #8, 12	; 0x800000
    23f4:	01010003 	tsteq	r1, r3
	issue_cmd ((lword)&RF_cmdFs);
    23f8:	05002b05 	streq	r2, [r0, #-2821]	; 0xfffff4fb
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    23fc:	00000002 	andeq	r0, r0, r2
    2400:	04cd0300 	strbeq	r0, [sp], #768	; 0x300
    2404:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
	IntEnable (INT_RFC_CPE_0);
    2408:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
	_BIC (dstate, DSTATE_IRST);
    240c:	02024b02 	andeq	r4, r2, #2048	; 0x800
    2410:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2414:	02050033 	andeq	r0, r5, #51	; 0x33
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    2418:	00000000 	andeq	r0, r0, r0
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    241c:	0104d303 	tsteq	r4, r3, lsl #6
	IntEnable (INT_RFC_CPE_0);
    2420:	02140205 	andseq	r0, r4, #1342177280	; 0x50000000
    2424:	01010003 	tsteq	r1, r3
}
    2428:	05003705 	streq	r3, [r0, #-1797]	; 0xfffff8fb
	IntEnable (INT_RFC_CPE_0);
    242c:	0013ae02 	andseq	sl, r3, r2, lsl #28
    2430:	04d80300 	ldrbeq	r0, [r8], #768	; 0x300
    2434:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    2438:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
    243c:	05300601 	ldreq	r0, [r0, #-1537]!	; 0xfffff9ff
    2440:	051f0603 	ldreq	r0, [pc, #-1539]	; 1e45 <cmd_0+0x9>
    2444:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    2448:	03022e0b 	movweq	r2, #11787	; 0x2e0b
    244c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2450:	0205002e 	andeq	r0, r5, #46	; 0x2e
    2454:	000013c2 	andeq	r1, r0, r2, asr #7
    2458:	0104de03 	tsteq	r4, r3, lsl #28
    245c:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    2460:	01052008 	tsteq	r5, r8
    2464:	03053006 	movweq	r3, #20486	; 0x5006
    2468:	0b051f06 	bleq	14a088 <__ccfg+0x12a0e0>
    246c:	03020106 	movweq	r0, #8454	; 0x2106
    2470:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2474:	0205002b 	andeq	r0, r5, #43	; 0x2b
    2478:	000013d0 	ldrdeq	r1, [r0], -r0
    247c:	0104e803 	tsteq	r4, r3, lsl #16
    2480:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    2484:	0510062b 	ldreq	r0, [r0, #-1579]	; 0xfffff9d5
    2488:	03052205 	movweq	r2, #20997	; 0x5205
    248c:	31062106 	tstcc	r6, r6, lsl #2
static void rx_int_enable () {
    2490:	2d060205 	sfmcs	f0, 4, [r6, #-20]	; 0xffffffec
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2494:	01060c05 	tsteq	r6, r5, lsl #24
    2498:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    249c:	052f0603 	streq	r0, [pc, #-1539]!	; 1ea1 <wwait+0x4d>
    24a0:	0e053e02 	cdpeq	14, 0, cr3, cr5, cr2, {0}
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    24a4:	01050106 	tsteq	r5, r6, lsl #2
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    24a8:	00050221 	andeq	r0, r5, r1, lsr #4
    24ac:	45050101 	strmi	r0, [r5, #-257]	; 0xfffffeff
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    24b0:	f4020500 	vst3.8	{d0,d2,d4}, [r2], r0
    24b4:	03000013 	movweq	r0, #19
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    24b8:	050104f8 	streq	r0, [r1, #-1272]	; 0xfffffb08
    24bc:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    24c0:	2e0e0645 	cfmadd32cs	mvax2, mvfx0, mvfx14, mvfx5
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    24c4:	055c0505 	ldrbeq	r0, [ip, #-1285]	; 0xfffffafb
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    24c8:	19052022 	stmdbne	r5, {r1, r5, sp}
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    24cc:	0603054a 	streq	r0, [r3], -sl, asr #10
		if (db->status == DATA_ENTRY_FINISHED) {
    24d0:	4c020521 	cfstr32mi	mvfx0, [r2], {33}	; 0x21
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    24d4:	01060505 	tsteq	r6, r5, lsl #10
    24d8:	40060205 	andmi	r0, r6, r5, lsl #4
			nr++;
    24dc:	01060f05 	tsteq	r6, r5, lsl #30
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    24e0:	4c060205 	sfmmi	f0, 4, [r6], {5}
    24e4:	01060505 	tsteq	r6, r5, lsl #10
    24e8:	31060205 	tstcc	r6, r5, lsl #4
    24ec:	01060505 	tsteq	r6, r5, lsl #10
				__dp [pl + 1] = __dp [pl] - 128;
    24f0:	4f060305 	svcmi	0x00060305
				pl = __dp [1] + 2;
    24f4:	01060605 	tsteq	r6, r5, lsl #12
				__dp [pl + 1] = __dp [pl] - 128;
    24f8:	30060305 	andcc	r0, r6, r5, lsl #6
    24fc:	03040559 	movweq	r0, #17753	; 0x4559
				__dp [pl] = 0;
    2500:	0205010d 	andeq	r0, r5, #1073741827	; 0x40000003
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2504:	052e7603 	streq	r7, [lr, #-1539]!	; 0xfffff9fd
    2508:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    250c:	05350603 	ldreq	r0, [r5, #-1539]!	; 0xfffff9fd
			db->status = DATA_ENTRY_PENDING;
    2510:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2514:	594b0604 	stmdbpl	fp, {r2, r9, sl}^
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    2518:	01060b05 	tsteq	r6, r5, lsl #22
				diag ("BAD RX");
    251c:	69060305 	stmdbvs	r6, {r0, r2, r8, r9}
    2520:	01060a05 	tsteq	r6, r5, lsl #20
	if (nr) {
    2524:	59060305 	stmdbpl	r6, {r0, r2, r8, r9}
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2528:	03060a05 	movweq	r0, #27141	; 0x6a05
}
    252c:	01050161 	tsteq	r5, r1, ror #2
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2530:	05202903 	streq	r2, [r0, #-2307]!	; 0xfffff6fd
    2534:	7a030602 	bvc	c3d44 <__ccfg+0xa3d9c>
    2538:	0605052e 	streq	r0, [r5], -lr, lsr #10
}
    253c:	06030501 	streq	r0, [r3], -r1, lsl #10
    2540:	0502752f 	streq	r7, [r2, #-1327]	; 0xfffffad1
    2544:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2548:	0205001a 	andeq	r0, r5, #26
    254c:	00001490 	muleq	r0, r0, r4
    2550:	0105ef03 	tsteq	r5, r3, lsl #30
    2554:	03170205 	tsteq	r7, #1342177280	; 0x50000000
    2558:	15050113 	strne	r0, [r5, #-275]	; 0xfffffeed
    255c:	1a050106 	bne	14297c <__ccfg+0x1229d4>
thread (cc1350_driver)
    2560:	05206803 	streq	r6, [r0, #-2051]!	; 0xfffff7fd
    2564:	20180315 	andscs	r0, r8, r5, lsl r3
    2568:	05580c05 	ldrbeq	r0, [r8, #-3077]	; 0xfffff3fb
    256c:	03052005 	movweq	r2, #20485	; 0x5005
    2570:	02053106 	andeq	r3, r5, #-2147483647	; 0x80000001
		if (dstate & DSTATE_IRST) {
    2574:	060d0552 			; <UNDEFINED> instruction: 0x060d0552
    2578:	06020501 	streq	r0, [r2], -r1, lsl #10
    257c:	0617053e 			; <UNDEFINED> instruction: 0x0617053e
			rf_off ();
    2580:	2b1d0515 	blcs	7439dc <__ccfg+0x723a34>
			_BIC (dstate,
    2584:	05201605 	streq	r1, [r0, #-1541]!	; 0xfffff9fb
    2588:	05210602 	streq	r0, [r1, #-1538]!	; 0xfffff9fe
		if (dstate & DSTATE_RXAC) {
    258c:	05140617 	ldreq	r0, [r4, #-1559]	; 0xfffff9e9
    2590:	05310602 	ldreq	r0, [r1, #-1538]!	; 0xfffff9fe
			if ((dstate & DSTATE_RXON) == 0)
    2594:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
				rx_de ();
    2598:	01052e0d 	tsteq	r5, sp, lsl #28
		if (paylen == 0) {
    259c:	022e2c03 	eoreq	r2, lr, #768	; 0x300
    25a0:	0101000d 	tsteq	r1, sp
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    25a4:	05001c05 	streq	r1, [r0, #-3077]	; 0xfffff3fb
    25a8:	0014e002 	andseq	lr, r4, r2
    25ac:	06fb0300 	ldrbteq	r0, [fp], r0, lsl #6
    25b0:	03020501 	movweq	r0, #9473	; 0x2501
				sysassert (paylen <= rbuffl && paylen > 0 &&
    25b4:	1c05010c 	stfnes	f0, [r5], {12}
    25b8:	01740306 	cmneq	r4, r6, lsl #6
    25bc:	0c030505 	cfstr32eq	mvfx0, [r3], {5}
    25c0:	06020520 	streq	r0, [r2], -r0, lsr #10
    25c4:	06070525 	streq	r0, [r7], -r5, lsr #10
    25c8:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
    25cc:	2f060305 	svccs	0x00060305
    25d0:	0611054c 	ldreq	r0, [r1], -ip, asr #10
		} else if (dstate & DSTATE_RXON) {
    25d4:	1c0f0516 	cfstr32ne	mvfx0, [pc], {22}
	if (dstate & DSTATE_RFON)
    25d8:	05321105 	ldreq	r1, [r2, #-261]!	; 0xfffffefb
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    25dc:	02051c0f 	andeq	r1, r5, #3840	; 0xf00
		re->status = DATA_ENTRY_PENDING;
    25e0:	11053206 	tstne	r5, r6, lsl #4
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    25e4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
	issue_cmd ((lword)&RF_cmdPropRx);
    25e8:	05303006 	ldreq	r3, [r0, #-6]!
	_BIS (dstate, DSTATE_RXAC);
    25ec:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
    25f0:	03052005 	movweq	r2, #20485	; 0x5005
    25f4:	052f2f06 	streq	r2, [pc, #-3846]!	; 16f6 <diag+0x8a>
    25f8:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
	if (dstate & DSTATE_RXAC)
    25fc:	08024201 	stmdaeq	r2, {r0, r9, lr}
    2600:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
				if (statid != 0xffff)
    2604:	02050017 	andeq	r0, r5, #23
    2608:	00001528 	andeq	r1, r0, r8, lsr #10
					((address)(RF_cmdPropTx.pPkt)) [0] =
    260c:	0103d803 	tsteq	r3, r3, lsl #16
				RF_cmdPropTx.pktLen = (byte) paylen;
    2610:	14160205 	ldrne	r0, [r6], #-517	; 0xfffffdfb
		if (paylen == 0) {
    2614:	03061705 	movweq	r1, #26373	; 0x6705
			wait (qevent, DR_LOOP);
    2618:	0505017a 	streq	r0, [r5, #-378]	; 0xfffffe86
    261c:	06030526 	streq	r0, [r3], -r6, lsr #10
			if (dstate & DSTATE_RXAC) {
    2620:	06090521 	streq	r0, [r9], -r1, lsr #10
    2624:	20070501 	andcs	r0, r7, r1, lsl #10
				rx_int_enable ();
    2628:	22060205 	andcs	r0, r6, #1342177280	; 0x50000000
			release;
    262c:	06040513 			; <UNDEFINED> instruction: 0x06040513
			} else if (dstate & DSTATE_RFON) {
    2630:	21020511 	tstcs	r2, r1, lsl r5
				delay (offdelay, DR_GOOF);
    2634:	0f032e06 	svceq	0x00032e06
    2638:	03030520 	movweq	r0, #13600	; 0x3520
    263c:	06054a72 			; <UNDEFINED> instruction: 0x06054a72
		if (bckf_timer) {
    2640:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
			wait (qevent, DR_LOOP);
    2644:	07053e06 	streq	r3, [r5, -r6, lsl #28]
    2648:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    264c:	0b052106 	bleq	14aa6c <__ccfg+0x12aac4>
			delay (bckf_timer, DR_LOOP);
    2650:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    2654:	2f3d2306 	svccs	0x003d2306
			if (dstate & DSTATE_RXAC)
    2658:	01060a05 	tsteq	r6, r5, lsl #20
    265c:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
	if (dstate & DSTATE_RFON)
    2660:	2a3d0605 	bcs	f43e7c <__ccfg+0xf23ed4>
    2664:	01060d05 	tsteq	r6, r5, lsl #26
		rx_de ();
    2668:	0a030105 	beq	c2a84 <__ccfg+0xa2adc>
		RF_cmdPropTx . status = 0;
    266c:	00070258 	andeq	r0, r7, r8, asr r2
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2670:	1c050101 	stfnes	f0, [r5], {1}
    2674:	00020500 	andeq	r0, r2, r0, lsl #10
    2678:	03000000 	movweq	r0, #0
		issue_cmd ((lword)&cmd_cs);
    267c:	050103f4 	streq	r0, [r1, #-1012]	; 0xfffffc0c
		if (dstate & DSTATE_IRST)
    2680:	14131602 	ldrne	r1, [r3], #-1538	; 0xfffff9fe
    2684:	1c051313 	stcne	3, cr1, [r5], {19}
    2688:	01770306 	cmneq	r7, r6, lsl #6
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    268c:	05360405 	ldreq	r0, [r6, #-1029]!	; 0xfffffbfb
    2690:	09051f06 	stmdbeq	r5, {r1, r2, r8, r9, sl, fp, ip}
			delay (1, DR_XMIT);
    2694:	031c0522 	tsteq	ip, #142606336	; 0x8800000
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2698:	0a052077 	beq	14a87c <__ccfg+0x12a8d4>
    269c:	05201003 	streq	r1, [r0, #-3]!
    26a0:	2e790309 	cdpcs	3, 7, cr0, cr9, cr9, {0}
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    26a4:	20061205 	andcs	r1, r6, r5, lsl #4
    26a8:	01060205 	tsteq	r6, r5, lsl #4
				RF_cmdPropTx . status = 0;
    26ac:	20110306 	andscs	r0, r1, r6, lsl #6
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    26b0:	01060505 	tsteq	r6, r5, lsl #10
				issue_cmd ((lword)&RF_cmdPropTx);
    26b4:	21060305 	tstcs	r6, r5, lsl #6
				proceed (DR_XMIT);
    26b8:	052e6f03 	streq	r6, [lr, #-3843]!	; 0xfffff0fd
    26bc:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
			txtries++;
    26c0:	13590604 	cmpne	r9, #4, 12	; 0x400000
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    26c4:	01060705 	tsteq	r6, r5, lsl #14
    26c8:	21060505 	tstcs	r6, r5, lsl #10
    26cc:	01060b05 	tsteq	r6, r5, lsl #22
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    26d0:	31060405 	tstcc	r6, r5, lsl #8
		goto DR_LOOP__;
    26d4:	01060705 	tsteq	r6, r5, lsl #14
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    26d8:	052f0905 	streq	r0, [pc, #-2309]!	; 1ddb <get_byte+0x3>
		paylen = 0;
    26dc:	2f3d0604 	svccs	0x003d0604
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    26e0:	4505052f 	strmi	r0, [r5, #-1327]	; 0xfffffad1
		txtries = 0;
    26e4:	01060d05 	tsteq	r6, r5, lsl #26
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    26e8:	0d030105 	stfeqs	f0, [r3, #-20]	; 0xffffffec
    26ec:	0007023c 	andeq	r0, r7, ip, lsr r2
    26f0:	20050101 	andcs	r0, r5, r1, lsl #2
    26f4:	78020500 	stmdavc	r2, {r8, sl}
    26f8:	03000015 	movweq	r0, #21
		    tcvphy_top (physid) == NULL)
    26fc:	050107a2 	streq	r0, [r1, #-1954]	; 0xfffff85e
    2700:	14161a02 	ldrne	r1, [r6], #-2562	; 0xfffff5fe
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2704:	01060505 	tsteq	r6, r5, lsl #10
    2708:	25060305 	strcs	r0, [r6, #-773]	; 0xfffffcfb
			rf_off ();
    270c:	0f060905 	svceq	0x00060905
endthread
    2710:	70032005 	andvc	r2, r3, r5
    2714:	030d052e 	movweq	r0, #54574	; 0xd52e
    2718:	1a052023 	bne	14a7ac <__ccfg+0x12a804>
    271c:	05207003 	streq	r7, [r0, #-3]!
    2720:	2e10030d 	cdpcs	3, 1, cr0, cr0, cr13, {0}
    2724:	05230605 	streq	r0, [r3, #-1541]!	; 0xfffff9fb
    2728:	206d0309 	rsbcs	r0, sp, r9, lsl #6
    272c:	03060205 	movweq	r0, #25093	; 0x6205
    2730:	05132e0f 	ldreq	r2, [r3, #-3599]	; 0xfffff1f1
    2734:	0205011f 	andeq	r0, r5, #-1073741817	; 0xc0000007
    2738:	03060106 	movweq	r0, #24838	; 0x6106
    273c:	03052009 	movweq	r2, #20489	; 0x5009
    2740:	05011903 	streq	r1, [r1, #-2307]	; 0xfffff6fd
    2744:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
    2748:	04052e06 	streq	r2, [r5], #-3590	; 0xfffff1fa
    274c:	1b052f06 	blne	14e36c <__ccfg+0x12e3c4>
void RFCCPE0IntHandler (void) {
    2750:	03050106 	movweq	r0, #20742	; 0x5106
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2754:	2e0d0306 	cdpcs	3, 0, cr0, cr13, cr6, {0}
		_BIS (dstate, DSTATE_IRST);
    2758:	01061205 	tsteq	r6, r5, lsl #4
    275c:	40060205 	andmi	r0, r6, r5, lsl #4
    2760:	01060905 	tsteq	r6, r5, lsl #18
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    2764:	03060305 	movweq	r0, #25349	; 0x6305
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    2768:	0605204f 	streq	r2, [r5], -pc, asr #32
    276c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
	p_trigger (drvprcs, qevent);
    2770:	03053d06 	movweq	r3, #23814	; 0x5d06
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2774:	0606054c 	streq	r0, [r6], -ip, asr #10
    2778:	062e0501 	strteq	r0, [lr], -r1, lsl #10
    277c:	054a7a03 	strbeq	r7, [sl, #-2563]	; 0xfffff5fd
    2780:	05130609 	ldreq	r0, [r3, #-1545]	; 0xfffff9f7
    2784:	05440602 	strbeq	r0, [r4, #-1538]	; 0xfffff9fe
    2788:	05221403 	streq	r1, [r2, #-1027]!	; 0xfffffbfd
    278c:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    2790:	04053c06 	streq	r3, [r5], #-3078	; 0xfffff3fa
    2794:	13053006 	movwne	r3, #20486	; 0x5006
    2798:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
	RISE_N_SHINE;
    279c:	17052f06 	strne	r2, [r5, -r6, lsl #30]
    27a0:	07050106 	streq	r0, [r5, -r6, lsl #2]
    27a4:	06040520 	streq	r0, [r4], -r0, lsr #10
}
    27a8:	0618052f 	ldreq	r0, [r8], -pc, lsr #10
    27ac:	20100501 	andscs	r0, r0, r1, lsl #10
    27b0:	30060405 	andcc	r0, r6, r5, lsl #8
    27b4:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
    27b8:	1a051503 	bne	147bcc <__ccfg+0x127c24>
    27bc:	12050106 	andne	r0, r5, #-2147483647	; 0x80000001
void phys_cc1350 (int phy, int mbs) {
    27c0:	1e1a0530 	cfmvr64hne	r0, mvdx10
	if (rbuffl != 0)
    27c4:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
    27c8:	01061505 	tsteq	r6, r5, lsl #10
		syserror (ETOOMANY, "cc13");
    27cc:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
		syserror (EREQPAR, "cc13 mb");
    27d0:	053d0603 	ldreq	r0, [sp, #-1539]!	; 0xfffff9fd
	if (mbs == 0)
    27d4:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    27d8:	06052512 			; <UNDEFINED> instruction: 0x06052512
		syserror (EREQPAR, "cc13 mb");
    27dc:	25120529 	ldrcs	r0, [r2, #-1321]	; 0xfffffad7
    27e0:	05290605 	streq	r0, [r9, #-1541]!	; 0xfffff9fb
	i = 0;
    27e4:	05220604 	streq	r0, [r2, #-1540]!	; 0xfffff9fc
	rbuffl = (byte) mbs;
    27e8:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
		db->config.type = 0;	// General (data in structure)
    27ec:	05310603 	ldreq	r0, [r1, #-1539]!	; 0xfffff9fd
	rbuffl = (byte) mbs;
    27f0:	1b030601 	blne	c3ffc <__ccfg+0xa4054>
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    27f4:	000e0201 	andeq	r0, lr, r1, lsl #4
    27f8:	2c050101 	stfcss	f0, [r5], {1}
		if (db == NULL)
    27fc:	20020500 	andcs	r0, r2, r0, lsl #10
			syserror (EMALLOC, "cc13");
    2800:	03000016 	movweq	r0, #22
    2804:	050102ab 	streq	r0, [r1, #-683]	; 0xfffffd55
    2808:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
		db->status = DATA_ENTRY_PENDING;
    280c:	200e062c 	andcs	r0, lr, ip, lsr #12
		if (i)
    2810:	05241905 	streq	r1, [r4, #-2309]!	; 0xfffff6fb
			da->pNextEntry = (byte*) db;
    2814:	19051c2c 	stmdbne	r5, {r2, r3, r5, sl, fp, ip}
		db->length = rbuffl + 2;
    2818:	3c050524 	cfstr32cc	mvfx0, [r5], {36}	; 0x24
    281c:	23060205 	movwcs	r0, #25093	; 0x6205
		db->config.type = 0;	// General (data in structure)
    2820:	03060a05 	movweq	r0, #27141	; 0x6a05
		db->length = rbuffl + 2;
    2824:	0c05010b 	stfeqs	f0, [r5], {11}
	db->pNextEntry = (byte*) re;
    2828:	05207703 	streq	r7, [r0, #-1795]!	; 0xfffff8fd
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    282c:	0323260a 			; <UNDEFINED> instruction: 0x0323260a
    2830:	02052076 	andeq	r2, r5, #118	; 0x76
	if (rbuffs == NULL)
    2834:	05182f06 	ldreq	r2, [r8, #-3846]	; 0xfffff0fa
	rbuffs->pCurrEntry = (byte*) re;
    2838:	05131403 	ldreq	r1, [r3, #-1027]	; 0xfffffbfd
	rbuffs->pLastEntry = NULL;
    283c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    2840:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2844:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    2848:	200f0301 	andcs	r0, pc, r1, lsl #6
    284c:	03060b05 	movweq	r0, #27397	; 0x6b05
    2850:	0c052073 	stceq	0, cr2, [r5], {115}	; 0x73
	rbuffl -= 2;
    2854:	04052006 	streq	r2, [r5], #-6
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2858:	052f0620 	streq	r0, [pc, #-1568]!	; 2240 <issue_cmd+0x30>
	rbuffl -= 2;
    285c:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
	physid = phy;
    2860:	0b030602 	bleq	c4070 <__ccfg+0xa40c8>
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2864:	06090520 	streq	r0, [r9], -r0, lsr #10
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2868:	00040201 	andeq	r0, r4, r1, lsl #4
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    286c:	20050101 	andcs	r0, r5, r1, lsl #2
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2870:	54020500 	strpl	r0, [r2], #-1280	; 0xfffffb00
    2874:	03000016 	movweq	r0, #22
	utimer_add (&bckf_timer);
    2878:	05010881 	streq	r0, [r1, #-2177]	; 0xfffff77f
	drvprcs = runthread (cc1350_driver);
    287c:	01090302 	tsteq	r9, r2, lsl #6
    2880:	01061505 	tsteq	r6, r5, lsl #10
    2884:	77032005 	strvc	r2, [r3, -r5]
	if (drvprcs == 0)
    2888:	03150520 	tsteq	r5, #32, 10	; 0x8000000
		syserror (ERESOURCE, "cc13");
    288c:	02052009 	andeq	r2, r5, #9
    2890:	1d050523 	cfstr32ne	mvfx0, [r5, #-140]	; 0xffffff74
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    2894:	21060305 	tstcs	r6, r5, lsl #6
    2898:	01061a05 	tsteq	r6, r5, lsl #20
    289c:	3e060205 	cdpcc	2, 0, cr0, cr6, cr5, {0}
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    28a0:	01000402 	tsteq	r0, r2, lsl #8
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    28a4:	00210501 	eoreq	r0, r1, r1, lsl #10
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    28a8:	00000205 	andeq	r0, r0, r5, lsl #4
    28ac:	94030000 	strls	r0, [r3], #-0
    28b0:	02050108 	andeq	r0, r5, #8, 2
    28b4:	05010903 	streq	r0, [r1, #-2307]	; 0xfffff6fd
    28b8:	77030621 	strvc	r0, [r3, -r1, lsr #12]
    28bc:	03050501 	movweq	r0, #21761	; 0x5501
    28c0:	03053c09 	movweq	r3, #23561	; 0x5c09
    28c4:	08052106 	stmdaeq	r5, {r1, r2, r8, sp}
    28c8:	0a050106 	beq	142ce8 <__ccfg+0x122d40>
	plugch ();
    28cc:	2008052e 	andcs	r0, r8, lr, lsr #10
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    28d0:	05221205 	streq	r1, [r2, #-517]!	; 0xfffffdfb
    28d4:	03051e08 	movweq	r1, #24072	; 0x5e08
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    28d8:	02054c06 	andeq	r4, r5, #1536	; 0x600
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    28dc:	06090514 			; <UNDEFINED> instruction: 0x06090514
    28e0:	5a010501 	bpl	43cec <__ccfg+0x23d44>
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    28e4:	01000602 	tsteq	r0, r2, lsl #12
}
    28e8:	00200501 	eoreq	r0, r0, r1, lsl #10
    28ec:	00000205 	andeq	r0, r0, r5, lsl #4
    28f0:	a7030000 	strge	r0, [r3, -r0]
    28f4:	02050108 	andeq	r0, r5, #8, 2
    28f8:	13010903 	movwne	r0, #6403	; 0x1903
    28fc:	06200514 			; <UNDEFINED> instruction: 0x06200514
    2900:	05017403 	streq	r7, [r1, #-1027]	; 0xfffffbfd
    2904:	200c031d 	andcs	r0, ip, sp, lsl r3
    2908:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
    290c:	2f05200b 	svccs	0x0005200b
    2910:	02052006 	andeq	r2, r5, #6
    2914:	24060106 	strcs	r0, [r6], #-262	; 0xfffffefa
    2918:	2e060505 	cfsh32cs	mvfx0, mvfx6, #5
    291c:	21060305 	tstcs	r6, r5, lsl #6
    2920:	01060705 	tsteq	r6, r5, lsl #14
    2924:	4c060205 	sfmmi	f0, 4, [r6], {5}
    2928:	01060905 	tsteq	r6, r5, lsl #18
    292c:	053e0105 	ldreq	r0, [lr, #-261]!	; 0xfffffefb
    2930:	79030603 	stmdbvc	r3, {r0, r1, r9, sl}
    2934:	0623052e 	strteq	r0, [r3], -lr, lsr #10
    2938:	0606052d 	streq	r0, [r6], -sp, lsr #10
    293c:	060e054a 	streq	r0, [lr], -sl, asr #10
    2940:	00040201 	andeq	r0, r4, r1, lsl #4
    2944:	23050101 	movwcs	r0, #20737	; 0x5101
    2948:	6c020500 	cfstr32vs	mvfx0, [r2], {-0}
    294c:	03000016 	movweq	r0, #22
    2950:	05010981 	streq	r0, [r1, #-2433]	; 0xfffff67f
    2954:	13134102 	tstne	r3, #-2147483648	; 0x80000000
    2958:	05141313 	ldreq	r1, [r4, #-787]	; 0xfffffced
    295c:	75030623 	strvc	r0, [r3, #-1571]	; 0xfffff9dd
    2960:	03020501 	movweq	r0, #9473	; 0x2501
    2964:	061f3c0c 	ldreq	r3, [pc], -ip, lsl #24
    2968:	05010121 	streq	r0, [r1, #-289]	; 0xfffffedf
    296c:	28030608 	stmdacs	r3, {r3, r9, sl}
    2970:	03020520 	movweq	r0, #9504	; 0x2520
    2974:	1c052058 	stcne	0, cr2, [r5], {88}	; 0x58
    2978:	05202303 	streq	r2, [r0, #-771]!	; 0xfffffcfd
    297c:	2e5d0302 	cdpcs	3, 5, cr0, cr13, cr2, {0}
    2980:	05142e06 	ldreq	r2, [r4, #-3590]	; 0xfffff1fa
    2984:	09050108 	stmdbeq	r5, {r3, r8}
    2988:	08050106 	stmdaeq	r5, {r1, r2, r8}
    298c:	06020520 	streq	r0, [r2], -r0, lsr #10
    2990:	2000c703 	andcs	ip, r0, r3, lsl #14
    2994:	02043d3d 	andeq	r3, r4, #3904	; 0xf40
    2998:	03060d05 	movweq	r0, #27909	; 0x6d05
    299c:	04017bcf 	streq	r7, [r1], #-3023	; 0xfffff431
    29a0:	060f0501 	streq	r0, [pc], -r1, lsl #10
    29a4:	2004b103 	andcs	fp, r4, r3, lsl #2
    29a8:	04010205 	streq	r0, [r1], #-517	; 0xfffffdfb
    29ac:	03240502 			; <UNDEFINED> instruction: 0x03240502
    29b0:	05017bca 	streq	r7, [r1, #-3018]	; 0xfffff436
    29b4:	0d051705 	stceq	7, cr1, [r5, #-20]	; 0xffffffec
    29b8:	01040106 	tsteq	r4, r6, lsl #2
    29bc:	b1030205 	tstlt	r3, r5, lsl #4
    29c0:	2f062004 	svccs	0x00062004
    29c4:	05580101 	ldrbeq	r0, [r8, #-257]	; 0xfffffeff
    29c8:	05130601 	ldreq	r0, [r3, #-1537]	; 0xfffff9ff
    29cc:	b6030603 	strlt	r0, [r3], -r3, lsl #12
    29d0:	0605587f 			; <UNDEFINED> instruction: 0x0605587f
strand (__outserial, const char*)
    29d4:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    29d8:	05134b06 	ldreq	r4, [r3, #-2822]	; 0xfffff4fa
    29dc:	05200607 	streq	r0, [r0, #-1543]!	; 0xfffff9f9
    29e0:	134b0605 	movtne	r0, #46597	; 0xb605
endstrand
    29e4:	06090513 			; <UNDEFINED> instruction: 0x06090513
    29e8:	0c052d01 	stceq	13, cr2, [r5], {1}
	ptr = data;
    29ec:	03080528 	movweq	r0, #34088	; 0x8528
    29f0:	05052077 	streq	r2, [r5, #-119]	; 0xffffff89
	if (*ptr)
    29f4:	05153206 	ldreq	r3, [r5, #-518]	; 0xfffffdfa
		len = strlen (ptr);
    29f8:	050f0608 	streq	r0, [pc, #-1544]	; 23f8 <rf_on.part.0+0xe8>
    29fc:	05250604 	streq	r0, [r5, #-1540]!	; 0xfffff9fc
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    2a00:	74310305 	ldrtvc	r0, [r1], #-773	; 0xfffffcfb
    2a04:	0604053d 			; <UNDEFINED> instruction: 0x0604053d
    2a08:	054a4e03 	strbeq	r4, [sl, #-3587]	; 0xfffff1fd
    2a0c:	0605411d 			; <UNDEFINED> instruction: 0x0605411d
    2a10:	08052d06 	stmdaeq	r5, {r1, r2, r8, sl, fp, sp}
	len -= quant;
    2a14:	06050106 	streq	r0, [r5], -r6, lsl #2
    2a18:	05142106 	ldreq	r2, [r4, #-262]	; 0xfffffefa
    2a1c:	0511060b 	ldreq	r0, [r1, #-1547]	; 0xfffff9f5
	if (len == 0) {
    2a20:	06053c18 			; <UNDEFINED> instruction: 0x06053c18
		ufree (data);
    2a24:	060b052f 	streq	r0, [fp], -pc, lsr #10
		finish;
    2a28:	03040546 	movweq	r0, #17734	; 0x4546
    2a2c:	08052e31 	stmdaeq	r5, {r0, r4, r5, r9, sl, fp, sp}
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    2a30:	6a030106 	bvs	c2e50 <__ccfg+0xa2ea8>
    2a34:	06050520 	streq	r0, [r5], -r0, lsr #10
    2a38:	132e6e03 			; <UNDEFINED> instruction: 0x132e6e03
    2a3c:	01061505 	tsteq	r6, r5, lsl #10
    2a40:	05200e05 	streq	r0, [r0, #-3589]!	; 0xfffff1fb
strand (__inserial, address)
    2a44:	06052e08 	streq	r2, [r5], -r8, lsl #28
    2a48:	053d2f06 	ldreq	r2, [sp, #-3846]!	; 0xfffff0fa
    2a4c:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    2a50:	05210607 	streq	r0, [r1, #-1543]!	; 0xfffff9f9
    2a54:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
	if (__inpline != NULL)
    2a58:	05590606 	ldrbeq	r0, [r9, #-1542]	; 0xfffff9fa
    2a5c:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
		finish;
    2a60:	05230605 	streq	r0, [r3, #-1541]!	; 0xfffff9fb
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    2a64:	0501061c 	streq	r0, [r1, #-1564]	; 0xfffff9e4
    2a68:	05590605 	ldrbeq	r0, [r9, #-1541]	; 0xfffff9fb
    2a6c:	16051406 	strne	r1, [r5], -r6, lsl #8
    2a70:	08050106 	stmdaeq	r5, {r1, r2, r8}
		umwait (IM_INIT);
    2a74:	0606052e 	streq	r0, [r6], -lr, lsr #10
		release;
    2a78:	06090521 	streq	r0, [r9], -r1, lsr #10
	savedata (data);
    2a7c:	200c0501 	andcs	r0, ip, r1, lsl #10
	len = MAX_LINE_LENGTH;
    2a80:	2f060605 	svccs	0x00060605
	io (IM_READ, __cport, READ, ptr, 1);
    2a84:	01060805 	tsteq	r6, r5, lsl #16
    2a88:	2a060b05 	bcs	1856a4 <__ccfg+0x1656fc>
    2a8c:	14060805 	strne	r0, [r6], #-2053	; 0xfffff7fb
    2a90:	051d1c05 	ldreq	r1, [sp, #-3077]	; 0xfffff3fb
	if (ptr == (char*) data) { // new line
    2a94:	05350605 	ldreq	r0, [r5, #-1541]!	; 0xfffff9fb
    2a98:	05591306 	ldrbeq	r1, [r9, #-774]	; 0xfffffcfa
		if (*ptr == '\0') { // bin cmd
    2a9c:	05140609 	ldreq	r0, [r4, #-1545]	; 0xfffff9f7
			proceed (IM_BIN);
    2aa0:	0a051f08 	beq	14a6c8 <__ccfg+0x12a720>
    2aa4:	0606052d 	streq	r0, [r6], -sp, lsr #10
		if (*ptr < 0x20)
    2aa8:	0905132f 	stmdbeq	r5, {r0, r1, r2, r3, r5, r8, r9, ip}
    2aac:	06050106 	streq	r0, [r5], -r6, lsl #2
			proceed (IM_READ);
    2ab0:	16052106 	strne	r2, [r5], -r6, lsl #2
    2ab4:	08050106 	stmdaeq	r5, {r1, r2, r8}
	if (*ptr == '\n' || *ptr == '\r') {
    2ab8:	0b05222c 	bleq	14b370 <__ccfg+0x12b3c8>
    2abc:	06051b06 	streq	r1, [r5], -r6, lsl #22
    2ac0:	05051306 	streq	r1, [r5, #-774]	; 0xfffffcfa
		*ptr = '\0';
    2ac4:	20090306 	andcs	r0, r9, r6, lsl #6
		__inpline = (char*)data;
    2ac8:	01060805 	tsteq	r6, r5, lsl #16
		finish;
    2acc:	2f060605 	svccs	0x00060605
	if (len) {
    2ad0:	03061c05 	movweq	r1, #27653	; 0x6c05
		ptr++;
    2ad4:	0a05016e 	beq	143094 <__ccfg+0x1230ec>
    2ad8:	052e1203 	streq	r1, [lr, #-515]!	; 0xfffffdfd
		len--;
    2adc:	6e030605 	cfmadd32vs	mvax0, mvfx0, mvfx3, mvfx5
	proceed (IM_READ);
    2ae0:	03060520 	movweq	r0, #25888	; 0x6520
	io (IM_BIN, __cport, READ, ptr, 1);
    2ae4:	052f2017 	streq	r2, [pc, #-23]!	; 2ad5 <__inserial+0x91>
    2ae8:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    2aec:	051e060b 	ldreq	r0, [lr, #-1547]	; 0xfffff9f5
    2af0:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    2af4:	0405200b 	streq	r2, [r5], #-11
	len -= 2;
    2af8:	3c0c0306 	stccc	3, cr0, [ip], {6}
	if (len > *ptr + 1) // 1 for 0x04
    2afc:	01000b02 	tsteq	r0, r2, lsl #22
    2b00:	000f0501 	andeq	r0, pc, r1, lsl #10
		len = *ptr + 1;
    2b04:	17a80205 	strne	r0, [r8, r5, lsl #4]!
    2b08:	ae030000 	cdpge	0, 0, cr0, cr3, cr0, {0}
	ptr++;
    2b0c:	0205010a 	andeq	r0, r5, #-2147483646	; 0x80000002
	quant = io (IM_BINL, __cport, READ, ptr, len);
    2b10:	06250513 			; <UNDEFINED> instruction: 0x06250513
    2b14:	2e180501 	cfmul32cs	mvfx0, mvfx8, mvfx1
    2b18:	05202505 	streq	r2, [r0, #-1285]!	; 0xfffffafb
    2b1c:	25052018 	strcs	r2, [r5, #-24]	; 0xffffffe8
    2b20:	2e0c0520 	cfsh32cs	mvfx0, mvfx12, #16
    2b24:	21060205 	tstcs	r6, r5, lsl #4
	len -= quant;
    2b28:	01051406 	tsteq	r5, r6, lsl #8
		__inpline = (char*)data;
    2b2c:	00080231 	andeq	r0, r8, r1, lsr r2
		finish;
    2b30:	0cb70101 	ldfeqs	f0, [r7], #4
	ptr += quant;
    2b34:	00030000 	andeq	r0, r3, r0
    2b38:	000001a1 	andeq	r0, r0, r1, lsr #3
endstrand
    2b3c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    2b40:	0101000d 	tsteq	r1, sp
	proceed (IM_BINL);
    2b44:	00000101 	andeq	r0, r0, r1, lsl #2
endstrand
    2b48:	00000100 	andeq	r0, r0, r0, lsl #2
    2b4c:	6f682f01 	svcvs	0x00682f01
    2b50:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 29a4 <tcv_ope_null+0x18>
    2b54:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    2b58:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    2b5c:	6f746b73 	svcvs	0x00746b73
		if (res && (d < n))
    2b60:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    2b64:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    2b68:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    2b6c:	2f534f43 	svccs	0x00534f43
			res [d] = (char) c;
    2b70:	4f636950 	svcmi	0x00636950
		d++;
    2b74:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    2b78:	2f736269 	svccs	0x00736269
    2b7c:	74654e56 	strbtvc	r4, [r5], #-3670	; 0xfffff1aa
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2b80:	752f0049 	strvc	r0, [pc, #-73]!	; 2b3f <__inserial+0xfb>
    2b84:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 29c0 <tcv_ope_null+0x34>
    2b88:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
				enci (10000);
    2b8c:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2b90:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    2b94:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
	d = 0;
    2b98:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
		c = *fm++;
    2b9c:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
		if (c == '\\') {
    2ba0:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
			if ((c = *fm++) == '\0') {
    2ba4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    2ba8:	2f006564 	svccs	0x00006564
				outc ('\\');
    2bac:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
			if ((c = *fm++) == '\0') {
    2bb0:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
				outc ('\\');
    2bb4:	2f6e6974 	svccs	0x006e6974
    2bb8:	6b736544 	blvs	1cdc0d0 <__ccfg+0x1cbc128>
			outc (c);
    2bbc:	2f706f74 	svccs	0x00706f74
    2bc0:	4f534c4f 	svcmi	0x00534c4f
			if (c == '\0')
    2bc4:	2f54454e 	svccs	0x0054454e
    2bc8:	4f434950 	svcmi	0x00434950
			outc (c);
    2bcc:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
				outc (val);
    2bd0:	2f534f63 	svccs	0x00534f63
				val = (word) va_arg (ap, aword);
    2bd4:	33314343 	teqcc	r1, #201326593	; 0xc000001
		if (c == '%') {
    2bd8:	2f005858 	svccs	0x00005858
    2bdc:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
			c = *fm++;
    2be0:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
			switch (c) {
    2be4:	2f6e6974 	svccs	0x006e6974
    2be8:	6b736544 	blvs	1cdc100 <__ccfg+0x1cbc158>
    2bec:	2f706f74 	svccs	0x00706f74
    2bf0:	4f534c4f 	svcmi	0x00534c4f
    2bf4:	2f54454e 	svccs	0x0054454e
    2bf8:	4f434950 	svcmi	0x00434950
    2bfc:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    2c00:	00534f63 	subseq	r4, r3, r3, ror #30
				outc ('%');
    2c04:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 2b50 <__inserial+0x10c>
    2c08:	616d2f65 	cmnvs	sp, r5, ror #30
				outc (c);
    2c0c:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    2c10:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    2c14:	706f746b 	rsbvc	r7, pc, fp, ror #8
				if (c == '\0')
    2c18:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
				return d;
    2c1c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
}
    2c20:	4349502f 	movtmi	r5, #36911	; 0x902f
    2c24:	502f534f 	eorpl	r5, pc, pc, asr #6
			switch (c) {
    2c28:	534f6369 	movtpl	r6, #62313	; 0xf369
    2c2c:	72656b2f 	rsbvc	r6, r5, #48128	; 0xbc00
    2c30:	006c656e 	rsbeq	r6, ip, lr, ror #10
				for (i = 12; ; i -= 4) {
    2c34:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
				val = (word) va_arg (ap, aword);
    2c38:	0100632e 	tsteq	r0, lr, lsr #6
						[ (val >> i) & 0xf ]);
    2c3c:	74730000 	ldrbtvc	r0, [r3], #-0
    2c40:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    2c44:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
					outc (__pi_hex_enc_table
    2c48:	74730000 	ldrbtvc	r0, [r3], #-0
    2c4c:	67726164 	ldrbvs	r6, [r2, -r4, ror #2]!
					if (i == 0)
    2c50:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    2c54:	72610000 	rsbvc	r0, r1, #0
				for (i = 12; ; i -= 4) {
    2c58:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
				val = (word) va_arg (ap, aword);
    2c5c:	00000300 	andeq	r0, r0, r0, lsl #6
				if (c == 'd' && (val & 0x8000) != 0) {
    2c60:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
				val = (word) va_arg (ap, aword);
    2c64:	0300682e 	movweq	r6, #2094	; 0x82e
				if (c == 'd' && (val & 0x8000) != 0) {
    2c68:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    2c6c:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
					outc ('-');
    2c70:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    2c74:	00000300 	andeq	r0, r0, r0, lsl #6
					val = (~val) + 1;
    2c78:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    2c7c:	5f736e6f 	svcpl	0x00736e6f
				for (i = 12; ; i -= 4) {
    2c80:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
				enci (10000);
    2c84:	00030068 	andeq	r0, r3, r8, rrx
    2c88:	73797300 	cmnvc	r9, #0, 6
    2c8c:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    2c90:	00000400 	andeq	r0, r0, r0, lsl #8
    2c94:	5f766374 	svcpl	0x00766374
    2c98:	73666564 	cmnvc	r6, #100, 10	; 0x19000000
    2c9c:	0100682e 	tsteq	r0, lr, lsr #16
    2ca0:	656b0000 	strbvs	r0, [fp, #-0]!
    2ca4:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    2ca8:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    2cac:	63740000 	cmnvs	r4, #0
    2cb0:	79687076 	stmdbvc	r8!, {r1, r2, r4, r5, r6, ip, sp, lr}^
    2cb4:	00682e73 	rsbeq	r2, r8, r3, ror lr
    2cb8:	74000001 	strvc	r0, [r0], #-1
    2cbc:	6e5f7663 	cdpvs	6, 5, cr7, cr15, cr3, {3}
    2cc0:	5f65646f 	svcpl	0x0065646f
    2cc4:	61746164 	cmnvs	r4, r4, ror #2
    2cc8:	0100682e 	tsteq	r0, lr, lsr #16
				if (c == 'd' || c == 'u') {
    2ccc:	623c0000 	eorsvs	r0, ip, #0
    2cd0:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
					if (c == 'd' &&
    2cd4:	3e6e692d 	vmulcc.f16	s13, s28, s27	; <UNPREDICTABLE>
					val = va_arg (ap, lword);
    2cd8:	00000000 	andeq	r0, r0, r0
					fm++;
    2cdc:	00310500 	eorseq	r0, r1, r0, lsl #10
					if (c == 'd' &&
    2ce0:	17cc0205 	strbne	r0, [ip, r5, lsl #4]
    2ce4:	93030000 	movwls	r0, #12288	; 0x3000
						outc ('-');
    2ce8:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
    2cec:	05141317 	ldreq	r1, [r4, #-791]	; 0xfffffce9
						val = (~val) + 1;
    2cf0:	78030631 	stmdavc	r3, {r0, r4, r5, r9, sl}
				enci (10000);
    2cf4:	07052001 	streq	r2, [r5, -r1]
					enci (1000000000UL);
    2cf8:	22160526 	andscs	r0, r6, #159383552	; 0x9800000
    2cfc:	053c0505 	ldreq	r0, [ip, #-1285]!	; 0xfffffafb
    2d00:	05260602 	streq	r0, [r6, #-1538]!	; 0xfffff9fe
    2d04:	0513061a 	ldreq	r0, [r3, #-1562]	; 0xfffff9e6
    2d08:	02051f0e 	andeq	r1, r5, #14, 30	; 0x38
    2d0c:	1a052106 	bne	14b12c <__ccfg+0x12b184>
    2d10:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2d14:	200c0306 	andcs	r0, ip, r6, lsl #6
    2d18:	16060105 	strne	r0, [r6], -r5, lsl #2
    2d1c:	01000102 	tsteq	r0, r2, lsl #2
    2d20:	002e0501 	eoreq	r0, lr, r1, lsl #10
    2d24:	17e20205 	strbne	r0, [r2, r5, lsl #4]!
    2d28:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
    2d2c:	02050100 	andeq	r0, r5, #0, 2
    2d30:	06060516 			; <UNDEFINED> instruction: 0x06060516
    2d34:	20050501 	andcs	r0, r5, r1, lsl #10
    2d38:	2f060305 	svccs	0x00060305
				} else if (c == 'x') {
    2d3c:	01062905 	tsteq	r6, r5, lsl #18
					for (i = 28; ; i -= 4) {
    2d40:	052e1c05 	streq	r1, [lr, #-3077]!	; 0xfffff3fb
					val = va_arg (ap, lword);
    2d44:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
							[ (val >> i) & 0xf ]);
    2d48:	05010629 	streq	r0, [r1, #-1577]	; 0xfffff9d7
    2d4c:	0305201c 	movweq	r2, #20508	; 0x501c
						outc (__pi_hex_enc_table
    2d50:	1a052106 	bne	14b170 <__ccfg+0x12b1c8>
    2d54:	01050106 	tsteq	r5, r6, lsl #2
    2d58:	0001024c 	andeq	r0, r1, ip, asr #4
						if (i == 0)
    2d5c:	2e050101 	adfcss	f0, f5, f1
    2d60:	fc020500 	stc2	5, cr0, [r2], {-0}
					for (i = 28; ; i -= 4) {
    2d64:	03000017 	movweq	r0, #23
					outc ('%');
    2d68:	05010283 	streq	r0, [r1, #-643]	; 0xfffffd7d
    2d6c:	2e051602 	cfmadd32cs	mvax0, mvfx1, mvfx5, mvfx2
    2d70:	02050e06 	andeq	r0, r5, #6, 28	; 0x60
					outc ('l');
    2d74:	012f0624 			; <UNDEFINED> instruction: 0x012f0624
    2d78:	01011301 	tsteq	r1, r1, lsl #6
				val = (word) va_arg (ap, aword);
    2d7c:	06010514 			; <UNDEFINED> instruction: 0x06010514
				outc (val);
    2d80:	2d020513 	cfstr32cs	mvfx0, [r2, #-76]	; 0xffffffb4
    2d84:	01000202 	tsteq	r0, r2, lsl #4
				while (*st != '\0') {
    2d88:	003a0501 	eorseq	r0, sl, r1, lsl #10
    2d8c:	180c0205 	stmdane	ip, {r0, r2, r9}
    2d90:	a7030000 	strge	r0, [r3, -r0]
    2d94:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
					outc (*st);
    2d98:	3a052406 	bcc	14bdb8 <__ccfg+0x12be10>
    2d9c:	0602051c 			; <UNDEFINED> instruction: 0x0602051c
					st++;
    2da0:	3a050124 	bcc	143238 <__ccfg+0x123290>
		c = *fm++;
    2da4:	02051c06 	andeq	r1, r5, #1536	; 0x600
    2da8:	4a200624 	bmi	804640 <__ccfg+0x7e4698>
    2dac:	06050513 			; <UNDEFINED> instruction: 0x06050513
char *vform (char *res, const char *fm, va_list aq) {
    2db0:	06030501 	streq	r0, [r3], -r1, lsl #10
    2db4:	2f02053d 	svccs	0x0002053d
	if (res != NULL) {
    2db8:	01060605 	tsteq	r6, r5, lsl #12
		__pi_vfparse (res, MAX_WORD, fm, aq);
    2dbc:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    2dc0:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    2dc4:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
}
    2dc8:	03052114 	movweq	r2, #20756	; 0x5114
    2dcc:	04052f06 	streq	r2, [r5], #-3846	; 0xfffff0fa
	fml = strlen (fm) + 17;
    2dd0:	11050106 	tstne	r5, r6, lsl #2
    2dd4:	06030520 	streq	r0, [r3], -r0, lsr #10
    2dd8:	060b0521 	streq	r0, [fp], -r1, lsr #10
	if ((res = (char*) umalloc (fml)) == NULL)
    2ddc:	06020501 	streq	r0, [r2], -r1, lsl #10
    2de0:	06190528 	ldreq	r0, [r9], -r8, lsr #10
    2de4:	4b010501 	blmi	441f0 <__ccfg+0x24248>
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    2de8:	03060305 	movweq	r0, #25349	; 0x6305
    2dec:	1405207a 	strne	r2, [r5], #-122	; 0xffffff86
    2df0:	03050106 	movweq	r0, #20742	; 0x5106
    2df4:	17052106 	strne	r2, [r5, -r6, lsl #2]
		ufree (res);
    2df8:	14050106 	strne	r0, [r5], #-262	; 0xfffffefa
		goto Again;
    2dfc:	06030520 	streq	r0, [r3], -r0, lsr #10
	if (buf == NULL || fmt == NULL)
    2e00:	06110521 	ldreq	r0, [r1], -r1, lsr #10
int vscan (const char *buf, const char *fmt, va_list ap) {
    2e04:	06030501 	streq	r0, [r3], -r1, lsl #10
	if (buf == NULL || fmt == NULL)
    2e08:	060b0521 	streq	r0, [fp], -r1, lsr #10
    2e0c:	00050201 	andeq	r0, r5, r1, lsl #4
    2e10:	3a050101 	bcc	14321c <__ccfg+0x123274>
		    	    case 'u': scanu (lword); break;
    2e14:	58020500 	stmdapl	r2, {r8, sl}
			while (isspace (*buf)) buf++;
    2e18:	03000018 	movweq	r0, #24
    2e1c:	060101df 			; <UNDEFINED> instruction: 0x060101df
	while (*fmt != '\0') {
    2e20:	06020520 	streq	r0, [r2], -r0, lsr #10
		if (*fmt++ != '%')
    2e24:	30200903 	eorcc	r0, r0, r3, lsl #18
		switch (*fmt++) {
    2e28:	05840405 	streq	r0, [r4, #1029]	; 0x405
    2e2c:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
    2e30:	014c0604 	cmpeq	ip, r4, lsl #12
    2e34:	4a065806 	bmi	198e54 <__ccfg+0x178eac>
    2e38:	03062706 	movweq	r2, #26374	; 0x6706
    2e3c:	05133c79 	ldreq	r3, [r3, #-3193]	; 0xfffff387
    2e40:	12030601 	andne	r0, r3, #1048576	; 0x100000
}
    2e44:	03040520 	movweq	r0, #17696	; 0x4520
		switch (*fmt++) {
    2e48:	2b062e75 	blcs	18e824 <__ccfg+0x16e87c>
    2e4c:	01061b05 	tsteq	r6, r5, lsl #22
    2e50:	4c060405 	cfstrsmi	mvf0, [r6], {5}
    2e54:	132e9001 			; <UNDEFINED> instruction: 0x132e9001
			while (isspace (*buf)) buf++;
    2e58:	0601055b 			; <UNDEFINED> instruction: 0x0601055b
    2e5c:	0304051a 	movweq	r0, #17690	; 0x451a
    2e60:	01052e78 	tsteq	r5, r8, ror lr
    2e64:	000c0236 	andeq	r0, ip, r6, lsr r2
    2e68:	31050101 	tstcc	r5, r1, lsl #2
    2e6c:	e4020500 	str	r0, [r2], #-1280	; 0xfffffb00
			if (*buf == '\0')
    2e70:	03000018 	movweq	r0, #24
			if (*buf != ',') {
    2e74:	050102ba 	streq	r0, [r1, #-698]	; 0xfffffd46
			sap = va_arg (ap, char*);
    2e78:	05141802 	ldreq	r1, [r4, #-2050]	; 0xfffff7fe
			nc++;
    2e7c:	78030631 	stmdavc	r3, {r0, r4, r5, r9, sl}
			if (*buf != ',') {
    2e80:	03060501 	movweq	r0, #25857	; 0x6501
				while (!isspace (*buf) && *buf != ',' &&
    2e84:	04052009 	streq	r2, [r5], #-9
    2e88:	0602052d 	streq	r0, [r2], -sp, lsr #10
    2e8c:	0605052f 	streq	r0, [r5], -pc, lsr #10
    2e90:	06030501 	streq	r0, [r3], -r1, lsl #10
    2e94:	6606012f 	strvs	r0, [r6], -pc, lsr #2
    2e98:	21064a06 	tstcs	r6, r6, lsl #20
    2e9c:	01133b06 	tsteq	r3, r6, lsl #22
			while (isspace (*buf)) buf++;
    2ea0:	064a6606 	strbeq	r6, [sl], -r6, lsl #12
    2ea4:	05132e2e 	ldreq	r2, [r3, #-3630]	; 0xfffff1d2
    2ea8:	09030601 	stmdbeq	r3, {r0, r9, sl}
    2eac:	0303053c 	movweq	r0, #13628	; 0x353c
    2eb0:	36062e77 			; <UNDEFINED> instruction: 0x36062e77
			if (*buf == ',') buf++;
    2eb4:	21060105 	tstcs	r6, r5, lsl #2
    2eb8:	022d0305 	eoreq	r0, sp, #335544320	; 0x14000000
			*sap = '\0';
    2ebc:	0101000b 	tsteq	r1, fp
			break;
    2ec0:	05004a05 	streq	r4, [r0, #-2565]	; 0xfffff5fb
		    case 'd': scani (word); break;
    2ec4:	00195402 	andseq	r5, r9, r2, lsl #8
    2ec8:	03f50300 	mvnseq	r0, #0, 6
    2ecc:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    2ed0:	13141313 	tstne	r4, #1275068416	; 0x4c000000
    2ed4:	03064a05 	movweq	r4, #27141	; 0x6a05
    2ed8:	053c0179 	ldreq	r0, [ip, #-377]!	; 0xfffffe87
    2edc:	3c0b0305 	stccc	3, cr0, [fp], {5}
    2ee0:	75034a05 	strvc	r4, [r3, #-2565]	; 0xfffff5fb
    2ee4:	27020520 	strcs	r0, [r2, -r0, lsr #10]
    2ee8:	05052406 	streq	r2, [r5, #-1030]	; 0xfffffbfa
    2eec:	30050106 	andcc	r0, r5, r6, lsl #2
    2ef0:	20250520 	eorcs	r0, r5, r0, lsr #10
    2ef4:	053d0c05 	ldreq	r0, [sp, #-3077]!	; 0xfffff3fb
    2ef8:	25053c30 	strcs	r3, [r5, #-3120]	; 0xfffff3d0
    2efc:	06040520 	streq	r0, [r4], -r0, lsr #10
    2f00:	0603054b 	streq	r0, [r3], -fp, asr #10
    2f04:	052e1503 	streq	r1, [lr, #-1283]!	; 0xfffffafd
    2f08:	6e030602 	cfmadd32vs	mvax0, mvfx0, mvfx3, mvfx2
    2f0c:	1713132e 	ldrne	r1, [r3, -lr, lsr #6]
    2f10:	01061205 	tsteq	r6, r5, lsl #4
    2f14:	76060205 	strvc	r0, [r6], -r5, lsl #4
    2f18:	05010f05 	streq	r0, [r1, #-3845]	; 0xfffff0fb
    2f1c:	0520060a 	streq	r0, [r0, #-1546]!	; 0xfffff9f6
    2f20:	052f0603 	streq	r0, [pc, #-1539]!	; 2925 <phys_cc1350+0x165>
    2f24:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    2f28:	22052e06 	andcs	r2, r5, #6, 28	; 0x60
    2f2c:	24051f06 	strcs	r1, [r5], #-3846	; 0xfffff0fa
    2f30:	0f050106 	svceq	0x00050106
		    case 'u': scanu (word); break;
    2f34:	02052006 	andeq	r2, r5, #6
    2f38:	0a050106 	beq	143358 <__ccfg+0x1233b0>
    2f3c:	03010533 	movweq	r0, #5427	; 0x1533
    2f40:	02052e13 	andeq	r2, r5, #304	; 0x130
    2f44:	66730306 	ldrbtvs	r0, [r3], -r6, lsl #6
    2f48:	15061a05 	strne	r1, [r6, #-2565]	; 0xfffff5fb
    2f4c:	05391305 	ldreq	r1, [r9, #-773]!	; 0xfffffcfb
    2f50:	052f0602 	streq	r0, [pc, #-1538]!	; 2956 <tcv_clo_null+0x22>
    2f54:	0514061a 	ldreq	r0, [r4, #-1562]	; 0xfffff9e6
    2f58:	2f061e02 	svccs	0x00061e02
    2f5c:	4a011413 	bmi	47fb0 <__ccfg+0x28008>
    2f60:	0605143c 			; <UNDEFINED> instruction: 0x0605143c
    2f64:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    2f68:	0602054a 	streq	r0, [r2], -sl, asr #10
    2f6c:	06130532 			; <UNDEFINED> instruction: 0x06130532
    2f70:	06020501 	streq	r0, [r2], -r1, lsl #10
    2f74:	0609052f 	streq	r0, [r9], -pc, lsr #10
    2f78:	06020501 	streq	r0, [r2], -r1, lsl #10
		    case 'x': scanx (word); break;
    2f7c:	15206d03 	strne	r6, [r0, #-3331]!	; 0xfffff2fd
    2f80:	01061305 	tsteq	r6, r5, lsl #6
    2f84:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
    2f88:	01060505 	tsteq	r6, r5, lsl #10
    2f8c:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
    2f90:	01001002 	tsteq	r0, r2
    2f94:	003a0501 	eorseq	r0, sl, r1, lsl #10
    2f98:	00000205 	andeq	r0, r0, r5, lsl #4
    2f9c:	a8030000 	stmdage	r3, {}	; <UNPREDICTABLE>
    2fa0:	02050104 	andeq	r0, r5, #4, 2
    2fa4:	01141314 	tsteq	r4, r4, lsl r3
    2fa8:	1b063a05 	blne	1917c4 <__ccfg+0x17181c>
    2fac:	25020520 	strcs	r0, [r2, #-1312]	; 0xfffffae0
    2fb0:	064a0620 	strbeq	r0, [sl], -r0, lsr #12
    2fb4:	79030627 	stmdbvc	r3, {r0, r1, r2, r5, r9, sl}
    2fb8:	1514143c 	ldrne	r1, [r4, #-1084]	; 0xfffffbc4
    2fbc:	4a580601 	bmi	16047c8 <__ccfg+0x15e4820>
    2fc0:	142e2e06 	strtne	r2, [lr], #-3590	; 0xfffff1fa
    2fc4:	01060605 	tsteq	r6, r5, lsl #12
    2fc8:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    2fcc:	0305300a 	movweq	r3, #20490	; 0x500a
    2fd0:	05134106 	ldreq	r4, [r3, #-262]	; 0xfffffefa
    2fd4:	0a052b08 	beq	14dbfc <__ccfg+0x12dc54>
    2fd8:	08050106 	stmdaeq	r5, {r1, r2, r8}
    2fdc:	06020520 	streq	r0, [r2], -r0, lsr #10
    2fe0:	13053d33 	movwne	r3, #23859	; 0x5d33
    2fe4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2fe8:	01053d06 	tsteq	r5, r6, lsl #26
    2fec:	0b021306 	bleq	87c0c <__ccfg+0x67c64>
    2ff0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
			switch (*fmt++) {
    2ff4:	02050043 	andeq	r0, r5, #67	; 0x43
    2ff8:	00001a14 	andeq	r1, r0, r4, lsl sl
    2ffc:	0104c903 	tsteq	r4, r3, lsl #18
    3000:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
    3004:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    3008:	26052f0f 	strcs	r2, [r5], -pc, lsl #30
		    	    case 'd': scani (lword); break;
    300c:	211d053b 	tstcs	sp, fp, lsr r5
    3010:	31060205 	tstcc	r6, r5, lsl #4
    3014:	01061005 	tsteq	r6, r5
    3018:	2f060205 	svccs	0x00060205
    301c:	01060905 	tsteq	r6, r5, lsl #18
    3020:	052b0a05 	streq	r0, [fp, #-2565]!	; 0xfffff5fb
    3024:	04023201 	streq	r3, [r2], #-513	; 0xfffffdff
    3028:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    302c:	0205003c 	andeq	r0, r5, #60	; 0x3c
    3030:	00000000 	andeq	r0, r0, r0
    3034:	0104d503 	tsteq	r4, r3, lsl #10
    3038:	13190205 	tstne	r9, #1342177280	; 0x50000000
    303c:	05011413 	streq	r1, [r1, #-1043]	; 0xfffffbed
    3040:	7503063c 	strvc	r0, [r3, #-1596]	; 0xfffff9c4
    3044:	02052020 	andeq	r2, r5, #32
    3048:	20200b03 	eorcs	r0, r0, r3, lsl #22
    304c:	03064a06 	movweq	r4, #27142	; 0x6a06
    3050:	03062013 	movweq	r2, #24595	; 0x6013
    3054:	13143c6d 	tstne	r4, #27904	; 0x6d00
    3058:	01060405 	tsteq	r6, r5, lsl #8
    305c:	21060205 	tstcs	r6, r5, lsl #4
    3060:	01060505 	tsteq	r6, r5, lsl #10
    3064:	30060305 	andcc	r0, r6, r5, lsl #6
		    	    case 'x': scanx (lword); break;
    3068:	01060605 	tsteq	r6, r5, lsl #12
    306c:	4b060405 	blmi	184088 <__ccfg+0x1640e0>
    3070:	3302053d 	movwcc	r0, #9533	; 0x253d
    3074:	1501013d 	strne	r0, [r1, #-317]	; 0xfffffec3
    3078:	04051406 	streq	r1, [r5], #-1030	; 0xfffffbfa
    307c:	0602051e 			; <UNDEFINED> instruction: 0x0602051e
    3080:	4a060130 	bmi	183548 <__ccfg+0x1635a0>
    3084:	2e2e064a 	cfmadda32cs	mvax2, mvax0, mvfx14, mvfx10
    3088:	22053e13 	andcs	r3, r5, #304	; 0x130
    308c:	15051306 	strne	r1, [r5, #-774]	; 0xfffffcfa
    3090:	06020557 			; <UNDEFINED> instruction: 0x06020557
    3094:	06010523 	streq	r0, [r1], -r3, lsr #10
    3098:	030a0513 	movweq	r0, #42259	; 0xa513
    309c:	0b022e70 	bleq	8ea64 <__ccfg+0x6eabc>
    30a0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    30a4:	02050038 	andeq	r0, r5, #56	; 0x38
    30a8:	00000000 	andeq	r0, r0, r0
    30ac:	0104fc03 	tsteq	r4, r3, lsl #24	; <UNPREDICTABLE>
    30b0:	13160205 	tstne	r6, #1342177280	; 0x50000000
    30b4:	01141313 	tsteq	r4, r3, lsl r3
    30b8:	03063805 	movweq	r3, #26629	; 0x6805
    30bc:	02052077 	andeq	r2, r5, #119	; 0x77
    30c0:	20200903 	eorcs	r0, r0, r3, lsl #18
    30c4:	03054a06 	movweq	r4, #23046	; 0x5a06
    30c8:	2e090306 	cdpcs	3, 0, cr0, cr9, cr6, {0}
    30cc:	03060205 	movweq	r0, #25093	; 0x6205
    30d0:	14142e77 	ldrne	r2, [r4], #-3703	; 0xfffff189
    30d4:	01061a05 	tsteq	r6, r5, lsl #20
		    	    case 'd': scani (lword); break;
    30d8:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    30dc:	052f0603 	streq	r0, [pc, #-1539]!	; 2ae1 <__inserial+0x9d>
    30e0:	05131902 	ldreq	r1, [r3, #-2306]	; 0xfffff6fe
    30e4:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
    30e8:	03052005 	movweq	r2, #20485	; 0x5005
    30ec:	200a0306 	andcs	r0, sl, r6, lsl #6
    30f0:	03060505 	movweq	r0, #25861	; 0x6505
		    	    case 'u': scanu (lword); break;
    30f4:	0a050175 	beq	1436d0 <__ccfg+0x123728>
    30f8:	05200b03 	streq	r0, [r0, #-2819]!	; 0xfffff4fd
    30fc:	0520061a 	streq	r0, [r0, #-1562]!	; 0xfffff9e6
    3100:	05010603 	streq	r0, [r1, #-1539]	; 0xfffff9fd
    3104:	052f0604 	streq	r0, [pc, #-1540]!	; 2b08 <__inserial+0xc4>
    3108:	0511062c 	ldreq	r0, [r1, #-1580]	; 0xfffff9d4
    310c:	2a052106 	bcs	14b52c <__ccfg+0x12b584>
    3110:	09051f06 	stmdbeq	r5, {r1, r2, r8, r9, sl, fp, ip}
    3114:	05206f03 	streq	r6, [r0, #-3843]!	; 0xfffff0fd
    3118:	05010621 	streq	r0, [r1, #-1569]	; 0xfffff9df
    311c:	0305200c 	movweq	r2, #20492	; 0x500c
    3120:	20052f06 	andcs	r2, r5, r6, lsl #30
    3124:	06050106 	streq	r0, [r5], -r6, lsl #2
    3128:	20200520 	eorcs	r0, r0, r0, lsr #10
    312c:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    3130:	13330602 	teqne	r3, #2097152	; 0x200000
    3134:	01060505 	tsteq	r6, r5, lsl #10
    3138:	2a060305 	bcs	183d54 <__ccfg+0x163dac>
		    	    case 'x': scanx (lword); break;
    313c:	06050542 	streq	r0, [r5], -r2, asr #10
    3140:	230a050f 	movwcs	r0, #42255	; 0xa50f
			if ((c = *buf++) == '\0')
    3144:	20061a05 	andcs	r1, r6, r5, lsl #20
    3148:	01060305 	tsteq	r6, r5, lsl #6
			sap = va_arg (ap, char*);
    314c:	0d030105 	stfeqs	f0, [r3, #-20]	; 0xffffffec
			nc++;
    3150:	0604052e 	streq	r0, [r4], -lr, lsr #10
			break;
    3154:	05207403 	streq	r7, [r0, #-1027]!	; 0xfffffbfd
			while (isspace (*buf)) buf++;
    3158:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    315c:	05052007 	streq	r2, [r5, #-7]
    3160:	2c052f06 	stccs	15, cr2, [r5], {6}
						*sap++ = *buf++;
    3164:	07051006 	streq	r1, [r5, -r6]
    3168:	062a0522 	strteq	r0, [sl], -r2, lsr #10
			while (isspace (*buf)) buf++;
    316c:	000a021e 	andeq	r0, sl, lr, lsl r2
    3170:	38050101 	stmdacc	r5, {r0, r8}
    3174:	00020500 	andeq	r0, r2, r0, lsl #10
		return 0;
    3178:	03000000 	movweq	r0, #0
    317c:	050105a3 	streq	r0, [r1, #-1443]	; 0xfffffa5d
		    case 'x': scanx (word); break;
    3180:	13131602 	tstne	r3, #2097152	; 0x200000
    3184:	05011413 	streq	r1, [r1, #-1043]	; 0xfffffbed
		    	    case 'x': scanx (lword); break;
    3188:	77030638 	smladxvc	r3, r8, r6, r0
    318c:	03020520 	movweq	r0, #9504	; 0x2520
    3190:	06202009 	strteq	r2, [r0], -r9
    3194:	0603054a 	streq	r0, [r3], -sl, asr #10
    3198:	052e0903 	streq	r0, [lr, #-2307]!	; 0xfffff6fd
    319c:	77030602 	strvc	r0, [r3, -r2, lsl #12]
    31a0:	0514142e 	ldreq	r1, [r4, #-1070]	; 0xfffffbd2
    31a4:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    31a8:	03052005 	movweq	r2, #20485	; 0x5005
    31ac:	02052f06 	andeq	r2, r5, #6, 30
    31b0:	06050519 			; <UNDEFINED> instruction: 0x06050519
    31b4:	201b0501 	andscs	r0, fp, r1, lsl #10
    31b8:	6b033805 	blvs	d11d4 <__ccfg+0xb122c>
    31bc:	06030520 	streq	r0, [r3], -r0, lsr #10
    31c0:	207cb303 	rsbscs	fp, ip, r3, lsl #6
    31c4:	01060505 	tsteq	r6, r5, lsl #10
    31c8:	21060305 	tstcs	r6, r5, lsl #6
    31cc:	01060605 	tsteq	r6, r5, lsl #12
    31d0:	31060305 	tstcc	r6, r5, lsl #6
    31d4:	05291105 	streq	r1, [r9, #-261]!	; 0xfffffefb
    31d8:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    31dc:	0520060f 	streq	r0, [r0, #-1551]!	; 0xfffff9f1
    31e0:	05130605 	ldreq	r0, [r3, #-1541]	; 0xfffff9fb
    31e4:	dc030609 	stcle	6, cr0, [r3], {9}
    31e8:	21052003 	tstcs	r5, r3
    31ec:	0c050106 	stfeqs	f0, [r5], {6}
    31f0:	06030520 	streq	r0, [r3], -r0, lsr #10
    31f4:	0620052f 	strteq	r0, [r0], -pc, lsr #10
    31f8:	20060501 	andcs	r0, r6, r1, lsl #10
    31fc:	05202005 	streq	r2, [r0, #-5]!
    3200:	02052006 	andeq	r2, r5, #6
    3204:	1b053306 	blne	14fe24 <__ccfg+0x12fe7c>
    3208:	03050106 	movweq	r0, #20742	; 0x5106
    320c:	01052b06 	tsteq	r5, r6, lsl #22
    3210:	3c0a0306 	stccc	3, cr0, [sl], {6}
    3214:	21060205 	tstcs	r6, r5, lsl #4
    3218:	01060905 	tsteq	r6, r5, lsl #18
    321c:	20061905 	andcs	r1, r6, r5, lsl #18
    3220:	01060205 	tsteq	r6, r5, lsl #4
    3224:	0a030105 	beq	c3640 <__ccfg+0xa3698>
    3228:	0603052e 	streq	r0, [r3], -lr, lsr #10
    322c:	052e7703 	streq	r7, [lr, #-1795]!	; 0xfffff8fd
    3230:	0501061e 	streq	r0, [r1, #-1566]	; 0xfffff9e2
    3234:	04052006 	streq	r2, [r5], #-6
    3238:	052f3006 	streq	r3, [pc, #-6]!	; 323a <NOROM_OSCClockSourceSet+0xa>
    323c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    3240:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    3244:	2b051b29 	blcs	149ef0 <__ccfg+0x129f48>
    3248:	0a020106 	beq	83668 <__ccfg+0x636c0>
    324c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3250:	02050016 	andeq	r0, r5, #22
    3254:	00001a38 	andeq	r1, r0, r8, lsr sl
    3258:	0105cd03 	tsteq	r5, r3, lsl #26
    325c:	13130205 	tstne	r3, #1342177280	; 0x50000000
    3260:	01141313 	tsteq	r4, r3, lsl r3
    3264:	03061605 	movweq	r1, #26117	; 0x6605
    3268:	0520207a 	streq	r2, [r0, #-122]!	; 0xffffff86
    326c:	06204202 	strteq	r4, [r0], -r2, lsl #4
    3270:	0624064a 	strteq	r0, [r4], -sl, asr #12
    3274:	01141438 	tsteq	r4, r8, lsr r4
    3278:	064a5806 	strbeq	r5, [sl], -r6, lsl #16
    327c:	05162e2e 	ldreq	r2, [r6, #-3630]	; 0xfffff1d2
    3280:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    3284:	052f0602 	streq	r0, [pc, #-1538]!	; 2c8a <__pi_vfparse+0x10a>
    3288:	0514060d 	ldreq	r0, [r4, #-1549]	; 0xfffff9f3
    328c:	02051e0e 	andeq	r1, r5, #14, 28	; 0xe0
    3290:	0d053006 	stceq	0, cr3, [r5, #-24]	; 0xffffffe8
    3294:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    3298:	0603052e 	streq	r0, [r3], -lr, lsr #10
    329c:	06060522 	streq	r0, [r6], -r2, lsr #10
    32a0:	4e0a0501 	cfsh32mi	mvfx0, mvfx10, #1
    32a4:	21030105 	tstcs	r3, r5, lsl #2
    32a8:	06040520 	streq	r0, [r4], -r0, lsr #10
    32ac:	3d2e5c03 	stccc	12, cr5, [lr, #-12]!
    32b0:	05011703 	streq	r1, [r1, #-1795]	; 0xfffff8fd
    32b4:	2e6e0302 	cdpcs	3, 6, cr0, cr14, cr2, {0}
    32b8:	032e3c01 			; <UNDEFINED> instruction: 0x032e3c01
    32bc:	0b05010b 	bleq	1436f0 <__ccfg+0x123748>
    32c0:	17050106 	strne	r0, [r5, -r6, lsl #2]
    32c4:	200b054a 	andcs	r0, fp, sl, asr #10
    32c8:	05580505 	ldrbeq	r0, [r8, #-1285]	; 0xfffffafb
    32cc:	05220603 	streq	r0, [r2, #-1539]!	; 0xfffff9fd
    32d0:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    32d4:	054e0604 	strbeq	r0, [lr, #-1540]	; 0xfffff9fc
    32d8:	10055002 	andne	r5, r5, r2
    32dc:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    32e0:	05052f06 	streq	r2, [r5, #-3846]	; 0xfffff0fa
    32e4:	03050106 	movweq	r0, #20742	; 0x5106
    32e8:	1a052106 	bne	14b708 <__ccfg+0x12b760>
    32ec:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    32f0:	1b054b06 	blne	155f10 <__ccfg+0x135f68>
    32f4:	15050106 	strne	r0, [r5, #-262]	; 0xfffffefa
    32f8:	02051f2f 	andeq	r1, r5, #47, 30	; 0xbc
    32fc:	05142106 	ldreq	r2, [r4, #-262]	; 0xfffffefa
    3300:	02010609 	andeq	r0, r1, #9437184	; 0x900000
    3304:	0101000c 	tsteq	r1, ip
    3308:	05004405 	streq	r4, [r0, #-1029]	; 0xfffffbfb
    330c:	00000002 	andeq	r0, r0, r2
    3310:	06870300 	streq	r0, [r7], r0, lsl #6
    3314:	16020501 	strne	r0, [r2], -r1, lsl #10
    3318:	0e064405 	cdpeq	4, 0, cr4, cr6, cr5, {0}
    331c:	06020520 	streq	r0, [r2], -r0, lsr #10
    3320:	061a0526 	ldreq	r0, [sl], -r6, lsr #10
    3324:	03440501 	movteq	r0, #17665	; 0x4501
    3328:	02052e7a 	andeq	r2, r5, #1952	; 0x7a0
    332c:	4a090306 	bmi	243f4c <__ccfg+0x223fa4>
    3330:	01060505 	tsteq	r6, r5, lsl #10
    3334:	2f060305 	svccs	0x00060305
    3338:	06160567 	ldreq	r0, [r6], -r7, ror #10
    333c:	06030501 	streq	r0, [r3], -r1, lsl #10
    3340:	06160567 	ldreq	r0, [r6], -r7, ror #10
    3344:	06020501 	streq	r0, [r2], -r1, lsl #10
    3348:	0601055b 			; <UNDEFINED> instruction: 0x0601055b
    334c:	00020213 	andeq	r0, r2, r3, lsl r2
    3350:	4b050101 	blmi	14375c <__ccfg+0x1237b4>
    3354:	00020500 	andeq	r0, r2, r0, lsl #10
    3358:	03000000 	movweq	r0, #0
    335c:	05010699 	streq	r0, [r1, #-1689]	; 0xfffff967
    3360:	05141602 	ldreq	r1, [r4, #-1538]	; 0xfffff9fe
    3364:	7a03064b 	bvc	c4c98 <__ccfg+0xa4cf0>
    3368:	261a0501 	ldrcs	r0, [sl], -r1, lsl #10
    336c:	7a034b05 	bvc	d5f88 <__ccfg+0xb5fe0>
    3370:	0602052e 	streq	r0, [r2], -lr, lsr #10
    3374:	054a0903 	strbeq	r0, [sl, #-2307]	; 0xfffff6fd
    3378:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    337c:	672f0603 	strvs	r0, [pc, -r3, lsl #12]!
    3380:	01061605 	tsteq	r6, r5, lsl #12
    3384:	67060305 	strvs	r0, [r6, -r5, lsl #6]
    3388:	01061605 	tsteq	r6, r5, lsl #12
    338c:	5a060205 	bpl	183ba8 <__ccfg+0x163c00>
    3390:	13060105 	movwne	r0, #24837	; 0x6105
    3394:	01000202 	tsteq	r0, r2, lsl #4
    3398:	00310501 	eorseq	r0, r1, r1, lsl #10
    339c:	00000205 	andeq	r0, r0, r5, lsl #4
    33a0:	aa030000 	bge	c33a8 <__ccfg+0xa3400>
    33a4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    33a8:	06050516 			; <UNDEFINED> instruction: 0x06050516
    33ac:	06030501 	streq	r0, [r3], -r1, lsl #10
    33b0:	06010521 	streq	r0, [r1], -r1, lsr #10
    33b4:	0001023d 	andeq	r0, r1, sp, lsr r2
    33b8:	48050101 	stmdami	r5, {r0, r8}
    33bc:	f4020500 	vst3.8	{d0,d2,d4}, [r2], r0
    33c0:	0300001a 	movweq	r0, #26
    33c4:	050106d1 	streq	r0, [r1, #-1745]	; 0xfffff92f
    33c8:	05240602 	streq	r0, [r4, #-1538]!	; 0xfffff9fe
    33cc:	02051c48 	andeq	r1, r5, #72, 24	; 0x4800
    33d0:	05012406 	streq	r2, [r1, #-1030]	; 0xfffffbfa
    33d4:	200e0648 	andcs	r0, lr, r8, asr #12
    33d8:	20240205 	eorcs	r0, r4, r5, lsl #4
    33dc:	134a4a06 	movtne	r4, #43526	; 0xaa06
    33e0:	13060105 	movwne	r0, #24837	; 0x6105
    33e4:	022d1305 	eoreq	r1, sp, #335544320	; 0x14000000
    33e8:	01010006 	tsteq	r1, r6
    33ec:	05004605 	streq	r4, [r0, #-1541]	; 0xfffff9fb
    33f0:	001b2002 	andseq	r2, fp, r2
    33f4:	06b20300 	ldrteq	r0, [r2], r0, lsl #6
    33f8:	17020501 	strne	r0, [r2, -r1, lsl #10]
    33fc:	0d064605 	stceq	6, cr4, [r6, #-20]	; 0xffffffec
    3400:	05250505 	streq	r0, [r5, #-1285]!	; 0xfffffafb
    3404:	052f0603 	streq	r0, [pc, #-1539]!	; 2e09 <vscan+0x9>
    3408:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    340c:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    3410:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    3414:	132f0604 			; <UNDEFINED> instruction: 0x132f0604
    3418:	01060705 	tsteq	r6, r5, lsl #14
    341c:	30060405 	andcc	r0, r6, r5, lsl #8
    3420:	01060b05 	tsteq	r6, r5, lsl #22
    3424:	053c0705 	ldreq	r0, [ip, #-1797]!	; 0xfffff8fb
    3428:	05220604 	streq	r0, [r2, #-1540]!	; 0xfffff9fc
    342c:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    3430:	20090301 	andcs	r0, r9, r1, lsl #6
    3434:	03060305 	movweq	r0, #25349	; 0x6305
    3438:	0605207a 			; <UNDEFINED> instruction: 0x0605207a
    343c:	03050106 	movweq	r0, #20742	; 0x5106
    3440:	13053006 	movwne	r3, #20486	; 0x5006
    3444:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3448:	06014c06 	streq	r4, [r1], -r6, lsl #24
    344c:	4a4a062e 	bmi	1284d0c <__ccfg+0x1264d64>
    3450:	06370513 			; <UNDEFINED> instruction: 0x06370513
    3454:	21010501 	tstcs	r1, r1, lsl #10
    3458:	052d0905 	streq	r0, [sp, #-2309]!	; 0xfffff6fb
    345c:	3c71030b 	ldclcc	3, cr0, [r1], #-44	; 0xffffffd4
    3460:	01000b02 	tsteq	r0, r2, lsl #22
    3464:	003d0501 	eorseq	r0, sp, r1, lsl #10
    3468:	00000205 	andeq	r0, r0, r5, lsl #4
    346c:	d9030000 	stmdble	r3, {}	; <UNPREDICTABLE>
    3470:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3474:	3d050116 	stfccs	f0, [r5, #-88]	; 0xffffffa8
    3478:	02051c06 	andeq	r1, r5, #1536	; 0x600
    347c:	4a062024 	bmi	18b514 <__ccfg+0x16b56c>
    3480:	2505134a 	strcs	r1, [r5, #-842]	; 0xfffffcb6
    3484:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3488:	43056706 	movwmi	r6, #22278	; 0x5706
    348c:	22050106 	andcs	r0, r5, #-2147483647	; 0x80000001
    3490:	2e43052e 	cdpcs	5, 4, cr0, cr3, cr14, {1}
    3494:	052e2205 	streq	r2, [lr, #-517]!	; 0xfffffdfb
    3498:	05024b01 	streq	r4, [r2, #-2817]	; 0xfffff4ff
    349c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    34a0:	0205003d 	andeq	r0, r5, #61	; 0x3d
    34a4:	00000000 	andeq	r0, r0, r0
    34a8:	0106e203 	tsteq	r6, r3, lsl #4
    34ac:	01160205 	tsteq	r6, r5, lsl #4
    34b0:	1c063d05 	stcne	13, cr3, [r6], {5}
    34b4:	20240205 	eorcs	r0, r4, r5, lsl #4
    34b8:	134a4a06 	movtne	r4, #43526	; 0xaa06
    34bc:	01062205 	tsteq	r6, r5, lsl #4
    34c0:	02670105 	rsbeq	r0, r7, #1073741825	; 0x40000001
    34c4:	01010005 	tsteq	r1, r5
    34c8:	05004005 	streq	r4, [r0, #-5]
    34cc:	00000002 	andeq	r0, r0, r2
    34d0:	06ea0300 	strbteq	r0, [sl], r0, lsl #6
    34d4:	16020501 	strne	r0, [r2], -r1, lsl #10
    34d8:	06400514 			; <UNDEFINED> instruction: 0x06400514
    34dc:	20017a03 	andcs	r7, r1, r3, lsl #20
    34e0:	05260c05 	streq	r0, [r6, #-3077]!	; 0xfffff3fb
    34e4:	2e7a0340 	cdpcs	3, 7, cr0, cr10, cr0, {2}
    34e8:	05260c05 	streq	r0, [r6, #-3077]!	; 0xfffff3fb
    34ec:	02052e05 	andeq	r2, r5, #5, 28	; 0x50
    34f0:	05843306 	streq	r3, [r4, #774]	; 0x306
    34f4:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    34f8:	11053102 	tstne	r5, r2, lsl #2
    34fc:	0602051d 			; <UNDEFINED> instruction: 0x0602051d
    3500:	1a051321 	bne	14818c <__ccfg+0x1281e4>
    3504:	02051106 	andeq	r1, r5, #-2147483647	; 0x80000001
    3508:	053d3e06 	ldreq	r3, [sp, #-3590]!	; 0xfffff1fa
    350c:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    3510:	02022101 	andeq	r2, r2, #1073741824	; 0x40000000
    3514:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3518:	0205003e 	andeq	r0, r5, #62	; 0x3e
    351c:	00000000 	andeq	r0, r0, r0
    3520:	0106fe03 	tsteq	r6, r3, lsl #28	; <UNPREDICTABLE>
    3524:	02160205 	andseq	r0, r6, #1342177280	; 0x50000000
    3528:	01010003 	tsteq	r1, r3
    352c:	05004505 	streq	r4, [r0, #-1285]	; 0xfffffafb
    3530:	001b8002 	andseq	r8, fp, r2
    3534:	07850300 	streq	r0, [r5, r0, lsl #6]
    3538:	16020501 	strne	r0, [r2], -r1, lsl #10
    353c:	06450514 			; <UNDEFINED> instruction: 0x06450514
    3540:	2e017a03 	vmlacs.f32	s14, s2, s6
    3544:	05260505 	streq	r0, [r6, #-1285]!	; 0xfffffafb
    3548:	05310603 	ldreq	r0, [r1, #-1539]!	; 0xfffff9fd
    354c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    3550:	052f0604 	streq	r0, [pc, #-1540]!	; 2f54 <vscan+0x154>
    3554:	062f0603 	strteq	r0, [pc], -r3, lsl #12
    3558:	2e06012e 	adfcssp	f0, f6, #0.5
    355c:	033c4a06 	teqeq	ip, #24576	; 0x6000
    3560:	0c05011d 	stfeqs	f0, [r5], {29}
    3564:	06050106 	streq	r0, [r5], -r6, lsl #2
    3568:	350a052e 	strcc	r0, [sl, #-1326]	; 0xfffffad2
    356c:	05270105 	streq	r0, [r7, #-261]!	; 0xfffffefb
    3570:	73030604 	movwvc	r0, #13828	; 0x3604
    3574:	06200520 	strteq	r0, [r0], -r0, lsr #10
    3578:	31040501 	tstcc	r4, r1, lsl #10
    357c:	051d1205 	ldreq	r1, [sp, #-517]	; 0xfffffdfb
    3580:	05300604 	ldreq	r0, [r0, #-1540]!	; 0xfffff9fc
    3584:	0501061d 	streq	r0, [r1, #-1565]	; 0xfffff9e3
    3588:	2f3d0604 	svccs	0x003d0604
    358c:	01060b05 	tsteq	r6, r5, lsl #22
    3590:	41060205 	tstmi	r6, r5, lsl #4
    3594:	01060b05 	tsteq	r6, r5, lsl #22
    3598:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    359c:	052f0603 	streq	r0, [pc, #-1539]!	; 2fa1 <vscan+0x1a1>
    35a0:	0201060a 	andeq	r0, r1, #10485760	; 0xa00000
    35a4:	01010009 	tsteq	r1, r9
    35a8:	05004805 	streq	r4, [r0, #-2053]	; 0xfffff7fb
    35ac:	001be802 	andseq	lr, fp, r2, lsl #16
    35b0:	09860300 	stmibeq	r6, {r8, r9}
    35b4:	18020501 	stmdane	r2, {r0, r8, sl}
    35b8:	06050514 			; <UNDEFINED> instruction: 0x06050514
    35bc:	03480501 	movteq	r0, #34049	; 0x8501
    35c0:	05202078 	streq	r2, [r0, #-120]!	; 0xffffff88
    35c4:	31052805 	tstcc	r5, r5, lsl #16
    35c8:	20250520 	eorcs	r0, r5, r0, lsr #10
    35cc:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
    35d0:	02053506 	andeq	r3, r5, #25165824	; 0x1800000
    35d4:	11052906 	tstne	r5, r6, lsl #18
    35d8:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    35dc:	11052f06 	tstne	r5, r6, lsl #30
    35e0:	21050106 	tstcs	r5, r6, lsl #2
    35e4:	1e110522 	cfmul64ne	mvdx0, mvdx1, mvdx2
    35e8:	30060205 	andcc	r0, r6, r5, lsl #4
    35ec:	01062105 	tsteq	r6, r5, lsl #2
    35f0:	052e1005 	streq	r1, [lr, #-5]!
    35f4:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    35f8:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    35fc:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    3600:	05343d02 	ldreq	r3, [r4, #-3330]!	; 0xfffff2fe
    3604:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    3608:	0101000b 	tsteq	r1, fp
    360c:	05004405 	streq	r4, [r0, #-1029]	; 0xfffffbfb
    3610:	001c3802 	andseq	r3, ip, r2, lsl #16
    3614:	09a00300 	stmibeq	r0!, {r8, r9}
    3618:	17020501 	strne	r0, [r2, -r1, lsl #10]
    361c:	01141313 	tsteq	r4, r3, lsl r3
    3620:	03064405 	movweq	r4, #25605	; 0x6405
    3624:	02050177 	andeq	r0, r5, #-1073741795	; 0xc000001d
    3628:	052e0903 	streq	r0, [lr, #-2307]!	; 0xfffff6fd
    362c:	20770344 	rsbscs	r0, r7, r4, asr #6
    3630:	09030205 	stmdbeq	r3, {r0, r2, r9}
    3634:	4a06204a 	bmi	18b764 <__ccfg+0x16b7bc>
    3638:	03060305 	movweq	r0, #25349	; 0x6305
    363c:	0e05200d 	cdpeq	0, 0, cr2, cr5, cr13, {0}
    3640:	0603054b 	streq	r0, [r3], -fp, asr #10
    3644:	060f0547 	streq	r0, [pc], -r7, asr #10
    3648:	3c060501 	cfstr32cc	mvfx0, [r6], {1}
    364c:	03062805 	movweq	r2, #26629	; 0x6805
    3650:	1e052078 	mcrne	0, 0, r2, cr5, cr8, {3}
    3654:	06020501 	streq	r0, [r2], -r1, lsl #10
    3658:	030a0501 	movweq	r0, #42241	; 0xa501
    365c:	01052e16 	tsteq	r5, r6, lsl lr
    3660:	05200d03 	streq	r0, [r0, #-3331]!	; 0xfffff2fd
    3664:	67030603 	strvs	r0, [r3, -r3, lsl #12]
    3668:	2e58013c 	mrccs	1, 2, r0, cr8, cr12, {1}
    366c:	060e0513 			; <UNDEFINED> instruction: 0x060e0513
    3670:	74060501 	strvc	r0, [r6], #-1281	; 0xfffffaff
    3674:	42060205 	andmi	r0, r6, #1342177280	; 0x50000000
    3678:	01060505 	tsteq	r6, r5, lsl #10
    367c:	36060205 	strcc	r0, [r6], -r5, lsl #4
    3680:	01060c05 	tsteq	r6, r5, lsl #24
    3684:	052e1605 	streq	r1, [lr, #-1541]!	; 0xfffff9fb
    3688:	06052e12 			; <UNDEFINED> instruction: 0x06052e12
    368c:	06020520 	streq	r0, [r2], -r0, lsr #10
    3690:	060b0523 	streq	r0, [fp], -r3, lsr #10
    3694:	4a050501 	bmi	144aa0 <__ccfg+0x124af8>
    3698:	32060205 	andcc	r0, r6, #1342177280	; 0x50000000
    369c:	06090568 	streq	r0, [r9], -r8, ror #10
    36a0:	000a0201 	andeq	r0, sl, r1, lsl #4
    36a4:	3e050101 	adfccs	f0, f5, f1
    36a8:	d4020500 	strle	r0, [r2], #-1280	; 0xfffffb00
    36ac:	0300001c 	movweq	r0, #28
    36b0:	050109d1 	streq	r0, [r1, #-2513]	; 0xfffff62f
    36b4:	14131702 	ldrne	r1, [r3], #-1794	; 0xfffff8fe
    36b8:	063e0501 	ldrteq	r0, [lr], -r1, lsl #10
    36bc:	05207803 	streq	r7, [r0, #-2051]!	; 0xfffff7fd
    36c0:	06202802 	strteq	r2, [r0], -r2, lsl #16
    36c4:	05144a4a 	ldreq	r4, [r4, #-2634]	; 0xfffff5b6
    36c8:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    36cc:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    36d0:	05010604 	streq	r0, [r1, #-1540]	; 0xfffff9fc
    36d4:	05210602 	streq	r0, [r1, #-1538]!	; 0xfffff9fe
    36d8:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    36dc:	05330602 	ldreq	r0, [r3, #-1538]!	; 0xfffff9fe
    36e0:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    36e4:	2f2f0602 	svccs	0x002f0602
    36e8:	05130101 	ldreq	r0, [r3, #-257]	; 0xfffffeff
    36ec:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    36f0:	0a052101 	beq	14bafc <__ccfg+0x12bb54>
    36f4:	02207903 	eoreq	r7, r0, #49152	; 0xc000
    36f8:	01010009 	tsteq	r1, r9
    36fc:	05003405 	streq	r3, [r0, #-1029]	; 0xfffffbfb
    3700:	001d1402 	andseq	r1, sp, r2, lsl #8
    3704:	09e80300 	stmibeq	r8!, {r8, r9}^
    3708:	16020501 	strne	r0, [r2], -r1, lsl #10
    370c:	05011413 	streq	r1, [r1, #-1043]	; 0xfffffbed
    3710:	79030634 	stmdbvc	r3, {r2, r4, r5, r9, sl}
    3714:	27020520 	strcs	r0, [r2, -r0, lsr #10]
    3718:	4a4a0620 	bmi	1284fa0 <__ccfg+0x1264ff8>
    371c:	06050514 			; <UNDEFINED> instruction: 0x06050514
    3720:	06020501 	streq	r0, [r2], -r1, lsl #10
    3724:	0604053d 			; <UNDEFINED> instruction: 0x0604053d
    3728:	06020501 	streq	r0, [r2], -r1, lsl #10
    372c:	06050521 	streq	r0, [r5], -r1, lsr #10
    3730:	06020501 	streq	r0, [r2], -r1, lsl #10
    3734:	060a0523 	streq	r0, [sl], -r3, lsr #10
    3738:	30090510 	andcc	r0, r9, r0, lsl r5
    373c:	02210105 	eoreq	r0, r1, #1073741825	; 0x40000001
    3740:	01010007 	tsteq	r1, r7
    3744:	05003505 	streq	r3, [r0, #-1285]	; 0xfffffafb
    3748:	001d4802 	andseq	r4, sp, r2, lsl #16
    374c:	09f90300 	ldmibeq	r9!, {r8, r9}^
    3750:	16020501 	strne	r0, [r2], -r1, lsl #10
    3754:	0e063505 	cfsh32eq	mvfx3, mvfx6, #5
    3758:	05260205 	streq	r0, [r6, #-517]!	; 0xfffffdfb
    375c:	02052c0c 	andeq	r2, r5, #12, 24	; 0xc00
    3760:	06013006 	streq	r3, [r1], -r6
    3764:	2e064a4a 	vmlscs.f32	s8, s12, s20
    3768:	0105134a 	tsteq	r5, sl, asr #6
    376c:	02053e06 	andeq	r3, r5, #6, 28	; 0x60
    3770:	0006022c 	andeq	r0, r6, ip, lsr #4
    3774:	32050101 	andcc	r0, r5, #1073741824	; 0x40000000
    3778:	00020500 	andeq	r0, r2, r0, lsl #10
    377c:	03000000 	movweq	r0, #0
    3780:	05010a84 	streq	r0, [r1, #-2692]	; 0xfffff57c
    3784:	05011602 	streq	r1, [r1, #-1538]	; 0xfffff9fe
    3788:	051c0632 	ldreq	r0, [ip, #-1586]	; 0xfffff9ce
    378c:	06202402 	strteq	r2, [r0], -r2, lsl #8
    3790:	05134a4a 	ldreq	r4, [r3, #-2634]	; 0xfffff5b6
    3794:	cc03060a 	stcgt	6, cr0, [r3], {10}
    3798:	09050177 	stmdbeq	r5, {r0, r1, r2, r4, r5, r6, r8}
    379c:	2008b403 	andcs	fp, r8, r3, lsl #8
    37a0:	03060205 	movweq	r0, #25093	; 0x6205
    37a4:	133c77c9 	teqne	ip, #52690944	; 0x3240000
    37a8:	13030514 	movwne	r0, #13588	; 0x3514
    37ac:	01060505 	tsteq	r6, r5, lsl #10
    37b0:	21060305 	tstcs	r6, r5, lsl #6
    37b4:	01060605 	tsteq	r6, r5, lsl #12
    37b8:	31060305 	tstcc	r6, r5, lsl #6
    37bc:	05291105 	streq	r1, [r9, #-261]!	; 0xfffffefb
    37c0:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    37c4:	0520060f 	streq	r0, [r0, #-1551]!	; 0xfffff9f1
    37c8:	05130605 	ldreq	r0, [r3, #-1541]	; 0xfffff9fb
    37cc:	08b40301 	ldmeq	r4!, {r0, r8, r9}
    37d0:	00080220 	andeq	r0, r8, r0, lsr #4
    37d4:	28050101 	stmdacs	r5, {r0, r8}
    37d8:	84020500 	strhi	r0, [r2], #-1280	; 0xfffffb00
    37dc:	0300001d 	movweq	r0, #29
    37e0:	05010a8c 	streq	r0, [r1, #-2700]	; 0xfffff574
    37e4:	011a0301 	tsteq	sl, r1, lsl #6
    37e8:	01000102 	tsteq	r0, r2, lsl #2
    37ec:	00012301 	andeq	r2, r1, r1, lsl #6
    37f0:	89000300 	stmdbhi	r0, {r8, r9}
    37f4:	02000000 	andeq	r0, r0, #0
    37f8:	0d0efb01 	vstreq	d15, [lr, #-4]
    37fc:	01010100 	mrseq	r0, (UNDEF: 17)
    3800:	00000001 	andeq	r0, r0, r1
    3804:	01000001 	tsteq	r0, r1
    3808:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3754 <NOROM_SetupTrimDevice+0x4>
    380c:	616d2f65 	cmnvs	sp, r5, ror #30
    3810:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    3814:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3818:	706f746b 	rsbvc	r7, pc, fp, ror #8
    381c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    3820:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    3824:	4349502f 	movtmi	r5, #36911	; 0x902f
    3828:	502f534f 	eorpl	r5, pc, pc, asr #6
    382c:	534f6369 	movtpl	r6, #62313	; 0xf369
    3830:	3143432f 	cmpcc	r3, pc, lsr #6
    3834:	00585833 	subseq	r5, r8, r3, lsr r8
    3838:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    383c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    3840:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    3844:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    3848:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    384c:	61652d65 	cmnvs	r5, r5, ror #26
    3850:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    3854:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    3858:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    385c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    3860:	74730000 	ldrbtvc	r0, [r3], #-0
    3864:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
    3868:	63675f70 	cmnvs	r7, #112, 30	; 0x1c0
    386c:	00632e63 	rsbeq	r2, r3, r3, ror #28
    3870:	73000001 	movwvc	r0, #1
    3874:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    3878:	00682e74 	rsbeq	r2, r8, r4, ror lr
    387c:	00000002 	andeq	r0, r0, r2
    3880:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    3884:	001d8602 	andseq	r8, sp, r2, lsl #12
    3888:	02840300 	addeq	r0, r4, #0, 6
    388c:	16050501 	strne	r0, [r5], -r1, lsl #10
    3890:	100a0514 	andne	r0, sl, r4, lsl r5
    3894:	01000102 	tsteq	r0, r2, lsl #2
    3898:	00010501 	andeq	r0, r1, r1, lsl #10
    389c:	1d880205 	sfmne	f0, 4, [r8, #20]
    38a0:	96030000 	strls	r0, [r3], -r0
    38a4:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
    38a8:	0a051416 	beq	148908 <__ccfg+0x128960>
    38ac:	00010210 	andeq	r0, r1, r0, lsl r2
    38b0:	01050101 	tsteq	r5, r1, lsl #2
    38b4:	8a020500 	bhi	84cbc <__ccfg+0x64d14>
    38b8:	0300001d 	movweq	r0, #29
    38bc:	050102a8 	streq	r0, [r1, #-680]	; 0xfffffd58
    38c0:	05141605 	ldreq	r1, [r4, #-1541]	; 0xfffff9fb
    38c4:	0102100a 	tsteq	r2, sl
    38c8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    38cc:	02050001 	andeq	r0, r5, #1
    38d0:	00001d8c 	andeq	r1, r0, ip, lsl #27
    38d4:	0101d203 	tsteq	r1, r3, lsl #4
    38d8:	17130505 	ldrne	r0, [r3, -r5, lsl #10]
    38dc:	03060105 	movweq	r0, #24837	; 0x6105
    38e0:	0505017a 	streq	r0, [r5, #-378]	; 0xfffffe86
    38e4:	13330626 	teqne	r3, #39845888	; 0x2600000
    38e8:	1f060e05 	svcne	0x00060e05
    38ec:	05210505 	streq	r0, [r1, #-1285]!	; 0xfffffafb
    38f0:	0520061d 	streq	r0, [r0, #-1565]!	; 0xfffff9e3
    38f4:	06010605 	streq	r0, [r1], -r5, lsl #12
    38f8:	03040536 	movweq	r0, #17718	; 0x4536
    38fc:	0505900d 	streq	r9, [r5, #-13]
    3900:	06010533 			; <UNDEFINED> instruction: 0x06010533
    3904:	0609052f 	streq	r0, [r9], -pc, lsr #10
    3908:	05206703 	streq	r6, [r0, #-1795]!	; 0xfffff8fd
    390c:	02010616 	andeq	r0, r1, #23068672	; 0x1600000
    3910:	01010010 	tsteq	r1, r0, lsl r0
    3914:	00000185 	andeq	r0, r0, r5, lsl #3
    3918:	017f0003 	cmneq	pc, r3
    391c:	01020000 	mrseq	r0, (UNDEF: 2)
    3920:	000d0efb 	strdeq	r0, [sp], -fp
    3924:	01010101 	tsteq	r1, r1, lsl #2
    3928:	01000000 	mrseq	r0, (UNDEF: 0)
    392c:	2f010000 	svccs	0x00010000
    3930:	2f727375 	svccs	0x00727375
    3934:	2f62696c 	svccs	0x0062696c
    3938:	2f636367 	svccs	0x00636367
    393c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    3940:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    3944:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    3948:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    394c:	2f312e32 	svccs	0x00312e32
    3950:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    3954:	00656475 	rsbeq	r6, r5, r5, ror r4
    3958:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 38a4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x34>
    395c:	616d2f65 	cmnvs	sp, r5, ror #30
    3960:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    3964:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3968:	706f746b 	rsbvc	r7, pc, fp, ror #8
    396c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    3970:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    3974:	4349502f 	movtmi	r5, #36911	; 0x902f
    3978:	502f534f 	eorpl	r5, pc, pc, asr #6
    397c:	534f6369 	movtpl	r6, #62313	; 0xf369
    3980:	3143432f 	cmpcc	r3, pc, lsr #6
    3984:	2f585833 	svccs	0x00585833
    3988:	33314343 	teqcc	r1, #201326593	; 0xc000001
    398c:	41575858 	cmpmi	r7, r8, asr r8
    3990:	692f4552 	stmdbvs	pc!, {r1, r4, r6, r8, sl, lr}	; <UNPREDICTABLE>
    3994:	2f00636e 	svccs	0x0000636e
    3998:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    399c:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    39a0:	2f6e6974 	svccs	0x006e6974
    39a4:	6b736544 	blvs	1cdcebc <__ccfg+0x1cbcf14>
    39a8:	2f706f74 	svccs	0x00706f74
    39ac:	4f534c4f 	svcmi	0x00534c4f
    39b0:	2f54454e 	svccs	0x0054454e
    39b4:	4f434950 	svcmi	0x00434950
    39b8:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    39bc:	2f534f63 	svccs	0x00534f63
    39c0:	33314343 	teqcc	r1, #201326593	; 0xc000001
    39c4:	2f005858 	svccs	0x00005858
    39c8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    39cc:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    39d0:	2f6e6974 	svccs	0x006e6974
    39d4:	6b736544 	blvs	1cdceec <__ccfg+0x1cbcf44>
    39d8:	2f706f74 	svccs	0x00706f74
    39dc:	4f534c4f 	svcmi	0x00534c4f
    39e0:	2f54454e 	svccs	0x0054454e
    39e4:	4f434950 	svcmi	0x00434950
    39e8:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    39ec:	00534f63 	subseq	r4, r3, r3, ror #30
    39f0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 393c <NOROM_SetupGetTrimForAnabypassValue1+0x20>
    39f4:	616d2f65 	cmnvs	sp, r5, ror #30
    39f8:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    39fc:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3a00:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3a04:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    3a08:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    3a0c:	4349502f 	movtmi	r5, #36911	; 0x902f
    3a10:	502f534f 	eorpl	r5, pc, pc, asr #6
    3a14:	534f6369 	movtpl	r6, #62313	; 0xf369
    3a18:	72656b2f 	rsbvc	r6, r5, #48128	; 0xbc00
    3a1c:	006c656e 	rsbeq	r6, ip, lr, ror #10
    3a20:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    3a24:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    3a28:	00010068 	andeq	r0, r1, r8, rrx
    3a2c:	5f776800 	svcpl	0x00776800
    3a30:	67666363 	strbvs	r6, [r6, -r3, ror #6]!
    3a34:	6d69735f 	stclvs	3, cr7, [r9, #-380]!	; 0xfffffe84
    3a38:	5f656c70 	svcpl	0x00656c70
    3a3c:	75727473 	ldrbvc	r7, [r2, #-1139]!	; 0xfffffb8d
    3a40:	682e7463 	stmdavs	lr!, {r0, r1, r5, r6, sl, ip, sp, lr}
    3a44:	00000200 	andeq	r0, r0, r0, lsl #4
    3a48:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    3a4c:	0300682e 	movweq	r6, #2094	; 0x82e
    3a50:	616d0000 	cmnvs	sp, r0
    3a54:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    3a58:	00000300 	andeq	r0, r0, r0, lsl #6
    3a5c:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    3a60:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    3a64:	0300682e 	movweq	r6, #2094	; 0x82e
    3a68:	75620000 	strbvc	r0, [r2, #-0]!
    3a6c:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    3a70:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    3a74:	00682e73 	rsbeq	r2, r8, r3, ror lr
    3a78:	73000003 	movwvc	r0, #3
    3a7c:	6f697379 	svcvs	0x00697379
    3a80:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    3a84:	656b0000 	strbvs	r0, [fp, #-0]!
    3a88:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    3a8c:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    3a90:	63630000 	cmnvs	r3, #0
    3a94:	632e6766 			; <UNDEFINED> instruction: 0x632e6766
    3a98:	00000300 	andeq	r0, r0, r0, lsl #6
    3a9c:	00029900 	andeq	r9, r2, r0, lsl #18
    3aa0:	c0000300 	andgt	r0, r0, r0, lsl #6
    3aa4:	02000001 	andeq	r0, r0, #1
    3aa8:	0d0efb01 	vstreq	d15, [lr, #-4]
    3aac:	01010100 	mrseq	r0, (UNDEF: 17)
    3ab0:	00000001 	andeq	r0, r0, r1
    3ab4:	01000001 	tsteq	r0, r1
    3ab8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3a04 <NOROM_SetupGetTrimForAmpcompCtrl+0x50>
    3abc:	616d2f65 	cmnvs	sp, r5, ror #30
    3ac0:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    3ac4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3ac8:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3acc:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    3ad0:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    3ad4:	4349502f 	movtmi	r5, #36911	; 0x902f
    3ad8:	502f534f 	eorpl	r5, pc, pc, asr #6
    3adc:	534f6369 	movtpl	r6, #62313	; 0xf369
    3ae0:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    3ae4:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    3ae8:	6f736e65 	svcvs	0x00736e65
    3aec:	2f007372 	svccs	0x00007372
    3af0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3af4:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    3af8:	2f6e6974 	svccs	0x006e6974
    3afc:	6b736544 	blvs	1cdd014 <__ccfg+0x1cbd06c>
    3b00:	2f706f74 	svccs	0x00706f74
    3b04:	4f534c4f 	svcmi	0x00534c4f
    3b08:	2f54454e 	svccs	0x0054454e
    3b0c:	4f434950 	svcmi	0x00434950
    3b10:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    3b14:	2f534f63 	svccs	0x00534f63
    3b18:	33314343 	teqcc	r1, #201326593	; 0xc000001
    3b1c:	2f005858 	svccs	0x00005858
    3b20:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3b24:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    3b28:	2f6e6974 	svccs	0x006e6974
    3b2c:	6b736544 	blvs	1cdd044 <__ccfg+0x1cbd09c>
    3b30:	2f706f74 	svccs	0x00706f74
    3b34:	4f534c4f 	svcmi	0x00534c4f
    3b38:	2f54454e 	svccs	0x0054454e
    3b3c:	4f434950 	svcmi	0x00434950
    3b40:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    3b44:	2f534f63 	svccs	0x00534f63
    3b48:	33314343 	teqcc	r1, #201326593	; 0xc000001
    3b4c:	432f5858 			; <UNDEFINED> instruction: 0x432f5858
    3b50:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    3b54:	52415758 	subpl	r5, r1, #88, 14	; 0x1600000
    3b58:	72642f45 	rsbvc	r2, r4, #276	; 0x114
    3b5c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    3b60:	0062696c 	rsbeq	r6, r2, ip, ror #18
    3b64:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    3b68:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    3b6c:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    3b70:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    3b74:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    3b78:	61652d65 	cmnvs	r5, r5, ror #26
    3b7c:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    3b80:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    3b84:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    3b88:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    3b8c:	6f682f00 	svcvs	0x00682f00
    3b90:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 39e4 <NOROM_SetupGetTrimForAmpcompCtrl+0x30>
    3b94:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    3b98:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    3b9c:	6f746b73 	svcvs	0x00746b73
    3ba0:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    3ba4:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    3ba8:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3bac:	2f534f43 	svccs	0x00534f43
    3bb0:	4f636950 	svcmi	0x00636950
    3bb4:	682f0053 	stmdavs	pc!, {r0, r1, r4, r6}	; <UNPREDICTABLE>
    3bb8:	2f656d6f 	svccs	0x00656d6f
    3bbc:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    3bc0:	442f6e69 	strtmi	r6, [pc], #-3689	; 3bc8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xe8>
    3bc4:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    3bc8:	4f2f706f 	svcmi	0x002f706f
    3bcc:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3bd0:	502f5445 	eorpl	r5, pc, r5, asr #8
    3bd4:	534f4349 	movtpl	r4, #62281	; 0xf349
    3bd8:	6369502f 	cmnvs	r9, #47	; 0x2f
    3bdc:	6b2f534f 	blvs	bd8920 <__ccfg+0xbb8978>
    3be0:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    3be4:	7000006c 	andvc	r0, r0, ip, rrx
    3be8:	735f6e69 	cmpvc	pc, #1680	; 0x690
    3bec:	6f736e65 	svcvs	0x00736e65
    3bf0:	00632e72 	rsbeq	r2, r3, r2, ror lr
    3bf4:	63000001 	movwvs	r0, #1
    3bf8:	7369736d 	cmnvc	r9, #-1275068415	; 0xb4000001
    3bfc:	6363675f 	cmnvs	r3, #24903680	; 0x17c0000
    3c00:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    3c04:	70670000 	rsbvc	r0, r7, r0
    3c08:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    3c0c:	00000300 	andeq	r0, r0, r0, lsl #6
    3c10:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    3c14:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    3c18:	00000400 	andeq	r0, r0, r0, lsl #8
    3c1c:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    3c20:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    3c24:	616d0000 	cmnvs	sp, r0
    3c28:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    3c2c:	00000200 	andeq	r0, r0, r0, lsl #4
    3c30:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    3c34:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    3c38:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    3c3c:	75620000 	strbvc	r0, [r2, #-0]!
    3c40:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    3c44:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    3c48:	00682e73 	rsbeq	r2, r8, r3, ror lr
    3c4c:	73000002 	movwvc	r0, #2
    3c50:	6f697379 	svcvs	0x00697379
    3c54:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    3c58:	656b0000 	strbvs	r0, [fp, #-0]!
    3c5c:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    3c60:	0600682e 	streq	r6, [r0], -lr, lsr #16
    3c64:	05000000 	streq	r0, [r0, #-0]
    3c68:	02050019 	andeq	r0, r5, #25
    3c6c:	00000000 	andeq	r0, r0, r0
    3c70:	05010e03 	streq	r0, [r1, #-3587]	; 0xfffff1fd
    3c74:	0101011b 	tsteq	r1, fp, lsl r1
    3c78:	01060105 	tsteq	r6, r5, lsl #2
    3c7c:	01000102 	tsteq	r0, r2, lsl #2
    3c80:	003f0501 	eorseq	r0, pc, r1, lsl #10
    3c84:	00000205 	andeq	r0, r0, r5, lsl #4
    3c88:	10030000 	andne	r0, r3, r0
    3c8c:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    3c90:	05141313 	ldreq	r1, [r4, #-787]	; 0xfffffced
    3c94:	7a03063f 	bvc	c5598 <__ccfg+0xa55f0>
    3c98:	05052001 	streq	r2, [r5, #-1]
    3c9c:	06030526 	streq	r0, [r3], -r6, lsr #10
    3ca0:	06060522 	streq	r0, [r6], -r2, lsr #10
    3ca4:	06030501 	streq	r0, [r3], -r1, lsl #10
    3ca8:	0302044d 	movweq	r0, #9293	; 0x244d
    3cac:	040100c1 	streq	r0, [r1], #-193	; 0xffffff3f
    3cb0:	20400301 	subcs	r0, r0, r1, lsl #6
    3cb4:	02044b3d 	andeq	r4, r4, #62464	; 0xf400
    3cb8:	04013303 	streq	r3, [r1], #-771	; 0xfffffcfd
    3cbc:	204e0301 	subcs	r0, lr, r1, lsl #6
    3cc0:	05310205 	ldreq	r0, [r1, #-517]!	; 0xfffffdfb
    3cc4:	04010607 	streq	r0, [r1], #-1543	; 0xfffff9f9
    3cc8:	030f0503 	movweq	r0, #62723	; 0xf503
    3ccc:	042e018b 	strteq	r0, [lr], #-395	; 0xfffffe75
    3cd0:	03070501 	movweq	r0, #29953	; 0x7501
    3cd4:	05207ef5 	streq	r7, [r0, #-3829]!	; 0xfffff10b
    3cd8:	05210602 	streq	r0, [r1, #-1538]!	; 0xfffff9fe
    3cdc:	0305130b 	movweq	r1, #21259	; 0x530b
    3ce0:	05030413 	streq	r0, [r3, #-1043]	; 0xfffffbed
    3ce4:	01830329 	orreq	r0, r3, r9, lsr #6
    3ce8:	17050501 	strne	r0, [r5, -r1, lsl #10]
    3cec:	0b050104 	bleq	144104 <__ccfg+0x12415c>
    3cf0:	7ef80306 	cdpvc	3, 15, cr0, cr8, cr6, {0}
    3cf4:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
    3cf8:	0188030f 	orreq	r0, r8, pc, lsl #6
    3cfc:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    3d00:	7ef8030b 	cdpvc	3, 15, cr0, cr8, cr11, {0}
    3d04:	05030420 	streq	r0, [r3, #-1056]	; 0xfffffbe0
    3d08:	01880333 	orreq	r0, r8, r3, lsr r3
    3d0c:	2042052e 	subcs	r0, r2, lr, lsr #10
    3d10:	0b050104 	bleq	144128 <__ccfg+0x124180>
    3d14:	2e7ef803 	cdpcs	8, 7, cr15, cr14, cr3, {0}
    3d18:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
    3d1c:	0805201f 	stmdaeq	r5, {r0, r1, r2, r3, r4, sp}
    3d20:	1e02052e 	cfsh32ne	mvfx0, mvfx2, #30
    3d24:	05220805 	streq	r0, [r2, #-2053]!	; 0xfffff7fb
    3d28:	051f063a 	ldreq	r0, [pc, #-1594]	; 36f6 <TrimAfterColdResetWakeupFromShutDown+0x7a>
    3d2c:	0205010b 	andeq	r0, r5, #-1073741822	; 0xc0000002
    3d30:	01051106 	tsteq	r5, r6, lsl #2
    3d34:	00060223 	andeq	r0, r6, r3, lsr #4
    3d38:	033c0101 	teqeq	ip, #1073741824	; 0x40000000
    3d3c:	00030000 	andeq	r0, r3, r0
    3d40:	000001a9 	andeq	r0, r0, r9, lsr #3
    3d44:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    3d48:	0101000d 	tsteq	r1, sp
    3d4c:	00000101 	andeq	r0, r0, r1, lsl #2
    3d50:	00000100 	andeq	r0, r0, r0, lsl #2
    3d54:	6f682f01 	svcvs	0x00682f01
    3d58:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 3bac <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xcc>
    3d5c:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    3d60:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    3d64:	6f746b73 	svcvs	0x00746b73
    3d68:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    3d6c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    3d70:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3d74:	2f534f43 	svccs	0x00534f43
    3d78:	4f636950 	svcmi	0x00636950
    3d7c:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    3d80:	2f736269 	svccs	0x00736269
    3d84:	2f004f49 	svccs	0x00004f49
    3d88:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3d8c:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    3d90:	2f6e6974 	svccs	0x006e6974
    3d94:	6b736544 	blvs	1cdd2ac <__ccfg+0x1cbd304>
    3d98:	2f706f74 	svccs	0x00706f74
    3d9c:	4f534c4f 	svcmi	0x00534c4f
    3da0:	2f54454e 	svccs	0x0054454e
    3da4:	4f434950 	svcmi	0x00434950
    3da8:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    3dac:	2f534f63 	svccs	0x00534f63
    3db0:	33314343 	teqcc	r1, #201326593	; 0xc000001
    3db4:	432f5858 			; <UNDEFINED> instruction: 0x432f5858
    3db8:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    3dbc:	52415758 	subpl	r5, r1, #88, 14	; 0x1600000
    3dc0:	72642f45 	rsbvc	r2, r4, #276	; 0x114
    3dc4:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    3dc8:	0062696c 	rsbeq	r6, r2, ip, ror #18
    3dcc:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    3dd0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    3dd4:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    3dd8:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    3ddc:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    3de0:	61652d65 	cmnvs	r5, r5, ror #26
    3de4:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    3de8:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    3dec:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    3df0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    3df4:	6f682f00 	svcvs	0x00682f00
    3df8:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 3c4c <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x5c>
    3dfc:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    3e00:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    3e04:	6f746b73 	svcvs	0x00746b73
    3e08:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    3e0c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    3e10:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3e14:	2f534f43 	svccs	0x00534f43
    3e18:	4f636950 	svcmi	0x00636950
    3e1c:	43432f53 	movtmi	r2, #16211	; 0x3f53
    3e20:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    3e24:	6f682f00 	svcvs	0x00682f00
    3e28:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 3c7c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3>
    3e2c:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    3e30:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    3e34:	6f746b73 	svcvs	0x00746b73
    3e38:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    3e3c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    3e40:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3e44:	2f534f43 	svccs	0x00534f43
    3e48:	4f636950 	svcmi	0x00636950
    3e4c:	682f0053 	stmdavs	pc!, {r0, r1, r4, r6}	; <UNPREDICTABLE>
    3e50:	2f656d6f 	svccs	0x00656d6f
    3e54:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    3e58:	442f6e69 	strtmi	r6, [pc], #-3689	; 3e60 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x94>
    3e5c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    3e60:	4f2f706f 	svcmi	0x002f706f
    3e64:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3e68:	502f5445 	eorpl	r5, pc, r5, asr #8
    3e6c:	534f4349 	movtpl	r4, #62281	; 0xf349
    3e70:	6369502f 	cmnvs	r9, #47	; 0x2f
    3e74:	6b2f534f 	blvs	bd8bb8 <__ccfg+0xbb8c10>
    3e78:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    3e7c:	6200006c 	andvs	r0, r0, #108	; 0x6c
    3e80:	6f747475 	svcvs	0x00747475
    3e84:	632e736e 			; <UNDEFINED> instruction: 0x632e736e
    3e88:	00000100 	andeq	r0, r0, r0, lsl #2
    3e8c:	6f697067 	svcvs	0x00697067
    3e90:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    3e94:	74730000 	ldrbtvc	r0, [r3], #-0
    3e98:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    3e9c:	0300682e 	movweq	r6, #2094	; 0x82e
    3ea0:	72610000 	rsbvc	r0, r1, #0
    3ea4:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    3ea8:	00000400 	andeq	r0, r0, r0, lsl #8
    3eac:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    3eb0:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    3eb4:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    3eb8:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    3ebc:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    3ec0:	00000400 	andeq	r0, r0, r0, lsl #8
    3ec4:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    3ec8:	5f736e6f 	svcpl	0x00736e6f
    3ecc:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    3ed0:	00040068 	andeq	r0, r4, r8, rrx
    3ed4:	73797300 	cmnvc	r9, #0, 6
    3ed8:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    3edc:	00000500 	andeq	r0, r0, r0, lsl #10
    3ee0:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    3ee4:	682e6c65 	stmdavs	lr!, {r0, r2, r5, r6, sl, fp, sp, lr}
    3ee8:	00000600 	andeq	r0, r0, r0, lsl #12
    3eec:	00010500 	andeq	r0, r1, r0, lsl #10
    3ef0:	00000205 	andeq	r0, r0, r5, lsl #4
    3ef4:	1b030000 	blne	c3efc <__ccfg+0xa3f54>
    3ef8:	2e060101 	adfcss	f0, f6, f1
    3efc:	6a060205 	bvs	184718 <__ccfg+0x164770>
    3f00:	01060e05 	tsteq	r6, r5, lsl #28
    3f04:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    3f08:	05310603 	ldreq	r0, [r1, #-1539]!	; 0xfffff9fd
    3f0c:	0f054002 	svceq	0x00054002
    3f10:	02040106 	andeq	r0, r4, #-2147483647	; 0x80000001
    3f14:	2e018703 	cdpcs	7, 0, cr8, cr1, cr3, {0}
    3f18:	07050104 	streq	r0, [r5, -r4, lsl #2]
    3f1c:	207efd03 	rsbscs	pc, lr, r3, lsl #26
    3f20:	051c0f05 	ldreq	r0, [ip, #-3845]	; 0xfffff0fb
    3f24:	05200614 	streq	r0, [r0, #-1556]!	; 0xfffff9ec
    3f28:	0501061c 	streq	r0, [r1, #-1564]	; 0xfffff9e4
    3f2c:	03062002 	movweq	r2, #24578	; 0x6002
    3f30:	3d4b2e11 	stclcc	14, cr2, [fp, #-68]	; 0xffffffbc
    3f34:	71030305 	tstvc	r3, r5, lsl #6
    3f38:	0502042e 	streq	r0, [r2, #-1070]	; 0xfffffbd2
    3f3c:	00fe0329 	rscseq	r0, lr, r9, lsr #6
    3f40:	17050501 	strne	r0, [r5, -r1, lsl #10]
    3f44:	07050104 	streq	r0, [r5, -r4, lsl #2]
    3f48:	7efd0306 	cdpvc	3, 15, cr0, cr13, cr6, {0}
    3f4c:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    3f50:	0183030f 	orreq	r0, r3, pc, lsl #6
    3f54:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
    3f58:	7efd0307 	cdpvc	3, 15, cr0, cr13, cr7, {0}
    3f5c:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    3f60:	01830333 	orreq	r0, r3, r3, lsr r3
    3f64:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    3f68:	7efd0306 	cdpvc	3, 15, cr0, cr13, cr6, {0}
    3f6c:	06040520 	streq	r0, [r4], -r0, lsr #10
    3f70:	06050530 			; <UNDEFINED> instruction: 0x06050530
    3f74:	06040501 	streq	r0, [r4], -r1, lsl #10
    3f78:	06030540 	streq	r0, [r3], -r0, asr #10
    3f7c:	062e1203 	strteq	r1, [lr], -r3, lsl #4
    3f80:	0306052f 	movweq	r0, #25903	; 0x652f
    3f84:	0d052064 	stceq	0, cr2, [r5, #-400]	; 0xfffffe70
    3f88:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3f8c:	3c160306 	ldccc	3, cr0, [r6], {6}
    3f90:	01060705 	tsteq	r6, r5, lsl #14
    3f94:	29050204 	stmdbcs	r5, {r2, r9}
    3f98:	00eb0306 	rsceq	r0, fp, r6, lsl #6
    3f9c:	17050558 	smlsdne	r5, r8, r5, r0
    3fa0:	01060f05 	tsteq	r6, r5, lsl #30
    3fa4:	07050104 	streq	r0, [r5, -r4, lsl #2]
    3fa8:	207f9003 	rsbscs	r9, pc, r3
    3fac:	0f050204 	svceq	0x00050204
    3fb0:	2000f003 	andcs	pc, r0, r3
    3fb4:	04203305 	strteq	r3, [r0], #-773	; 0xfffffcfb
    3fb8:	03050501 	movweq	r0, #21761	; 0x5501
    3fbc:	05207f90 	streq	r7, [r0, #-3984]!	; 0xfffff070
    3fc0:	05310602 	ldreq	r0, [r1, #-1538]!	; 0xfffff9fe
    3fc4:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    3fc8:	053e0603 	ldreq	r0, [lr, #-1539]!	; 0xfffff9fd
    3fcc:	07055102 	streq	r5, [r5, -r2, lsl #2]
    3fd0:	02040106 	andeq	r0, r4, #-2147483647	; 0x80000001
    3fd4:	03062905 	movweq	r2, #26885	; 0x6905
    3fd8:	053c00df 	ldreq	r0, [ip, #-223]!	; 0xffffff21
    3fdc:	0f051705 	svceq	0x00051705
    3fe0:	01040106 	tsteq	r4, r6, lsl #2
    3fe4:	9c030705 	stcls	7, cr0, [r3], {5}
    3fe8:	0204207f 	andeq	r2, r4, #127	; 0x7f
    3fec:	e4030f05 	str	r0, [r3], #-3845	; 0xfffff0fb
    3ff0:	01042e00 	tsteq	r4, r0, lsl #28
    3ff4:	9c030705 	stcls	7, cr0, [r3], {5}
    3ff8:	0204207f 	andeq	r2, r4, #127	; 0x7f
    3ffc:	e4033305 	str	r3, [r3], #-773	; 0xfffffcfb
    4000:	01042000 	mrseq	r2, (UNDEF: 4)
    4004:	9c030505 	cfstr32ls	mvfx0, [r3], {5}
    4008:	0205207f 	andeq	r2, r5, #127	; 0x7f
    400c:	0e053106 	adfeqs	f3, f5, f6
    4010:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    4014:	0602052e 	streq	r0, [r2], -lr, lsr #10
    4018:	06030531 			; <UNDEFINED> instruction: 0x06030531
    401c:	06020501 	streq	r0, [r2], -r1, lsl #10
    4020:	06010522 	streq	r0, [r1], -r2, lsr #10
    4024:	2c020522 	cfstr32cs	mvfx0, [r2], {34}	; 0x22
    4028:	4c060105 	stfmis	f0, [r6], {5}
    402c:	01000c02 	tsteq	r0, r2, lsl #24
    4030:	00290501 	eoreq	r0, r9, r1, lsl #10
    4034:	00000205 	andeq	r0, r0, r5, lsl #4
    4038:	d7030000 	strle	r0, [r3, -r0]
    403c:	02050100 	andeq	r0, r5, #0, 2
    4040:	060f0516 			; <UNDEFINED> instruction: 0x060f0516
    4044:	1c290501 	cfstr32ne	mvfx0, [r9], #-4
    4048:	05240f05 	streq	r0, [r4, #-3845]!	; 0xfffff0fb
    404c:	03052005 	movweq	r2, #20485	; 0x5005
    4050:	01052106 	tsteq	r5, r6, lsl #2
    4054:	03051a06 	movweq	r1, #23046	; 0x5a06
    4058:	052e7803 	streq	r7, [lr, #-2051]!	; 0xfffff7fd
    405c:	05400602 	strbeq	r0, [r0, #-1538]	; 0xfffff9fe
    4060:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    4064:	03053c05 	movweq	r3, #23557	; 0x5c05
    4068:	052f2f06 	streq	r2, [pc, #-3846]!	; 316a <vscan+0x36a>
    406c:	05220601 	streq	r0, [r2, #-1537]!	; 0xfffff9ff
    4070:	01052c03 	tsteq	r5, r3, lsl #24
    4074:	0006023e 	andeq	r0, r6, lr, lsr r2
    4078:	09310101 	ldmdbeq	r1!, {r0, r8}
    407c:	00030000 	andeq	r0, r3, r0
    4080:	000001cc 	andeq	r0, r0, ip, asr #3
    4084:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    4088:	0101000d 	tsteq	r1, sp
    408c:	00000101 	andeq	r0, r0, r1, lsl #2
    4090:	00000100 	andeq	r0, r0, r0, lsl #2
    4094:	6f682f01 	svcvs	0x00682f01
    4098:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 3eec <NOROM_SysCtrlSetRechargeBeforePowerDown+0x120>
    409c:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    40a0:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    40a4:	6f746b73 	svcvs	0x00746b73
    40a8:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    40ac:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    40b0:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    40b4:	2f534f43 	svccs	0x00534f43
    40b8:	4f636950 	svcmi	0x00636950
    40bc:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    40c0:	2f736269 	svccs	0x00736269
    40c4:	726f7453 	rsbvc	r7, pc, #1392508928	; 0x53000000
    40c8:	00656761 	rsbeq	r6, r5, r1, ror #14
    40cc:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4018 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x2c>
    40d0:	616d2f65 	cmnvs	sp, r5, ror #30
    40d4:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    40d8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    40dc:	706f746b 	rsbvc	r7, pc, fp, ror #8
    40e0:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    40e4:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    40e8:	4349502f 	movtmi	r5, #36911	; 0x902f
    40ec:	502f534f 	eorpl	r5, pc, pc, asr #6
    40f0:	534f6369 	movtpl	r6, #62313	; 0xf369
    40f4:	3143432f 	cmpcc	r3, pc, lsr #6
    40f8:	2f585833 	svccs	0x00585833
    40fc:	33314343 	teqcc	r1, #201326593	; 0xc000001
    4100:	41575858 	cmpmi	r7, r8, asr r8
    4104:	642f4552 	strtvs	r4, [pc], #-1362	; 410c <NOROM_ChipInfo_GetHwRevision+0x5c>
    4108:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    410c:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    4110:	73752f00 	cmnvc	r5, #0, 30
    4114:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    4118:	63672f62 	cmnvs	r7, #392	; 0x188
    411c:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    4120:	6f6e2d6d 	svcvs	0x006e2d6d
    4124:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    4128:	2f696261 	svccs	0x00696261
    412c:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    4130:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    4134:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    4138:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    413c:	2f656d6f 	svccs	0x00656d6f
    4140:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    4144:	442f6e69 	strtmi	r6, [pc], #-3689	; 414c <AuxAdiDdiSafeWrite.constprop.1+0x18>
    4148:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    414c:	4f2f706f 	svcmi	0x002f706f
    4150:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    4154:	502f5445 	eorpl	r5, pc, r5, asr #8
    4158:	534f4349 	movtpl	r4, #62281	; 0xf349
    415c:	6369502f 	cmnvs	r9, #47	; 0x2f
    4160:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    4164:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    4168:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    416c:	2f656d6f 	svccs	0x00656d6f
    4170:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    4174:	442f6e69 	strtmi	r6, [pc], #-3689	; 417c <memcpy+0x18>
    4178:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    417c:	4f2f706f 	svcmi	0x002f706f
    4180:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    4184:	502f5445 	eorpl	r5, pc, r5, asr #8
    4188:	534f4349 	movtpl	r4, #62281	; 0xf349
    418c:	6369502f 	cmnvs	r9, #47	; 0x2f
    4190:	2f00534f 	svccs	0x0000534f
    4194:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4198:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    419c:	2f6e6974 	svccs	0x006e6974
    41a0:	6b736544 	blvs	1cdd6b8 <__ccfg+0x1cbd710>
    41a4:	2f706f74 	svccs	0x00706f74
    41a8:	4f534c4f 	svcmi	0x00534c4f
    41ac:	2f54454e 	svccs	0x0054454e
    41b0:	4f434950 	svcmi	0x00434950
    41b4:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    41b8:	2f534f63 	svccs	0x00534f63
    41bc:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    41c0:	00006c65 	andeq	r6, r0, r5, ror #24
    41c4:	726f7473 	rsbvc	r7, pc, #1929379840	; 0x73000000
    41c8:	5f656761 	svcpl	0x00656761
    41cc:	3532786d 	ldrcc	r7, [r2, #-2157]!	; 0xfffff793
    41d0:	33303872 	teqcc	r0, #7471104	; 0x720000
    41d4:	00632e35 	rsbeq	r2, r3, r5, lsr lr
    41d8:	67000001 	strvs	r0, [r0, -r1]
    41dc:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
    41e0:	00020068 	andeq	r0, r2, r8, rrx
    41e4:	6f747300 	svcvs	0x00747300
    41e8:	65676172 	strbvs	r6, [r7, #-370]!	; 0xfffffe8e
    41ec:	7065655f 	rsbvc	r6, r5, pc, asr r5
    41f0:	2e6d6f72 	mcrcs	15, 3, r6, cr13, cr2, {3}
    41f4:	00010068 	andeq	r0, r1, r8, rrx
    41f8:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    41fc:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    4200:	00030068 	andeq	r0, r3, r8, rrx
    4204:	63726100 	cmnvs	r2, #0, 2
    4208:	00682e68 	rsbeq	r2, r8, r8, ror #28
    420c:	6d000004 	stcvs	0, cr0, [r0, #-16]
    4210:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    4214:	00040068 	andeq	r0, r4, r8, rrx
    4218:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    421c:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    4220:	00682e73 	rsbeq	r2, r8, r3, ror lr
    4224:	62000004 	andvs	r0, r0, #4
    4228:	6f747475 	svcvs	0x00747475
    422c:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    4230:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    4234:	00000400 	andeq	r0, r0, r0, lsl #8
    4238:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    423c:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    4240:	6b000005 	blvs	425c <time>
    4244:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    4248:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    424c:	00000006 	andeq	r0, r0, r6
    4250:	05001905 	streq	r1, [r0, #-2309]	; 0xfffff6fb
    4254:	001dd802 	andseq	sp, sp, r2, lsl #16
    4258:	01180300 	tsteq	r8, r0, lsl #6
    425c:	13140205 	tstne	r4, #1342177280	; 0x50000000
    4260:	01150514 	tsteq	r5, r4, lsl r5
    4264:	0d061905 	vstreq.16	s2, [r6, #-10]	; <UNPREDICTABLE>
    4268:	04250905 	strteq	r0, [r5], #-2309	; 0xfffff6fb
    426c:	032d0502 			; <UNDEFINED> instruction: 0x032d0502
    4270:	0420028a 	strteq	r0, [r0], #-650	; 0xfffffd76
    4274:	03190501 	tsteq	r9, #4194304	; 0x400000
    4278:	042e7df1 	strteq	r7, [lr], #-3569	; 0xfffff20f
    427c:	032d0502 			; <UNDEFINED> instruction: 0x032d0502
    4280:	052002c5 	streq	r0, [r0, #-709]!	; 0xfffffd3b
    4284:	7ed0030f 	cdpvc	3, 13, cr0, cr0, cr15, {0}
    4288:	032d0520 			; <UNDEFINED> instruction: 0x032d0520
    428c:	042000fa 	strteq	r0, [r0], #-250	; 0xffffff06
    4290:	06030501 	streq	r0, [r3], -r1, lsl #10
    4294:	207df703 	rsbscs	pc, sp, r3, lsl #14
    4298:	0f050204 	svceq	0x00050204
    429c:	018f0306 	orreq	r0, pc, r6, lsl #6
    42a0:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    42a4:	7ef10305 	cdpvc	3, 15, cr0, cr1, cr5, {0}
    42a8:	21060520 	tstcs	r6, r0, lsr #10
    42ac:	051f0505 	ldreq	r0, [pc, #-1285]	; 3daf <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x133>
    42b0:	04210603 	strteq	r0, [r1], #-1539	; 0xfffff9fd
    42b4:	03290502 			; <UNDEFINED> instruction: 0x03290502
    42b8:	05010189 	streq	r0, [r1, #-393]	; 0xfffffe77
    42bc:	01041705 	tsteq	r4, r5, lsl #14
    42c0:	f3030405 	vshl.u8	d0, d5, d3
    42c4:	0605017e 			; <UNDEFINED> instruction: 0x0605017e
    42c8:	03050106 	movweq	r0, #20742	; 0x5106
    42cc:	02043d06 	andeq	r3, r4, #384	; 0x180
    42d0:	81032905 	tsthi	r3, r5, lsl #18
    42d4:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
    42d8:	05010417 	streq	r0, [r1, #-1047]	; 0xfffffbe9
    42dc:	f6030602 			; <UNDEFINED> instruction: 0xf6030602
    42e0:	0204017d 	andeq	r0, r4, #1073741855	; 0x4000001f
    42e4:	8a032d05 	bhi	cf700 <__ccfg+0xaf758>
    42e8:	01042002 	tsteq	r4, r2
    42ec:	03060305 	movweq	r0, #25349	; 0x6305
    42f0:	04207dfb 	strteq	r7, [r0], #-3579	; 0xfffff205
    42f4:	03290502 			; <UNDEFINED> instruction: 0x03290502
    42f8:	050102b6 	streq	r0, [r1, #-694]	; 0xfffffd4a
    42fc:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
    4300:	01040106 	tsteq	r4, r6, lsl #2
    4304:	03061c05 	movweq	r1, #27653	; 0x6c05
    4308:	05207dc0 	streq	r7, [r0, #-3520]!	; 0xfffff240
    430c:	02050115 	andeq	r0, r5, #1073741829	; 0x40000005
    4310:	01050106 	tsteq	r5, r6, lsl #2
    4314:	02200903 	eoreq	r0, r0, #49152	; 0xc000
    4318:	01010007 	tsteq	r1, r7
    431c:	05001f05 	streq	r1, [r0, #-3845]	; 0xfffff0fb
    4320:	001e0c02 	andseq	r0, lr, r2, lsl #24
    4324:	01280300 			; <UNDEFINED> instruction: 0x01280300
    4328:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    432c:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
    4330:	200e061f 	andcs	r0, lr, pc, lsl r6
    4334:	2d050204 	sfmcs	f0, 4, [r5, #-16]
    4338:	3c01ff03 	stccc	15, cr15, [r1], {3}
    433c:	03050104 	movweq	r0, #20740	; 0x5104
    4340:	7e860306 	cdpvc	3, 8, cr0, cr6, cr6, {0}
    4344:	0606054a 	streq	r0, [r6], -sl, asr #10
    4348:	06040501 	streq	r0, [r4], -r1, lsl #10
    434c:	0502042f 	streq	r0, [r2, #-1071]	; 0xfffffbd1
    4350:	01f40329 	mvnseq	r0, r9, lsr #6
    4354:	17050501 	strne	r0, [r5, -r1, lsl #10]
    4358:	01062d05 	tsteq	r6, r5, lsl #26
    435c:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    4360:	7e890306 	cdpvc	3, 8, cr0, cr9, cr6, {0}
    4364:	0502042e 	streq	r0, [r2, #-1070]	; 0xfffffbd2
    4368:	02a80329 	adceq	r0, r8, #-1543503872	; 0xa4000000
    436c:	17050501 	strne	r0, [r5, -r1, lsl #10]
    4370:	01062d05 	tsteq	r6, r5, lsl #26
    4374:	03050104 	movweq	r0, #20740	; 0x5104
    4378:	7dd40306 	ldclvc	3, cr0, [r4, #24]
    437c:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    4380:	01f10329 	mvnseq	r0, r9, lsr #6
    4384:	17050501 	strne	r0, [r5, -r1, lsl #10]
    4388:	03060104 	movweq	r0, #24836	; 0x6104
    438c:	05017e8c 	streq	r7, [r1, #-3724]	; 0xfffff174
    4390:	20790302 	rsbscs	r0, r9, r2, lsl #6
    4394:	2d050204 	sfmcs	f0, 4, [r5, #-16]
    4398:	2001fb03 	andcs	pc, r1, r3, lsl #22
    439c:	03050104 	movweq	r0, #20740	; 0x5104
    43a0:	7e8b0306 	cdpvc	3, 8, cr0, cr11, cr6, {0}
    43a4:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    43a8:	02a60329 	adceq	r0, r6, #-1543503872	; 0xa4000000
    43ac:	17050501 	strne	r0, [r5, -r1, lsl #10]
    43b0:	03060104 	movweq	r0, #24836	; 0x6104
    43b4:	04017dd6 	streq	r7, [r1], #-3542	; 0xfffff22a
    43b8:	032d0502 			; <UNDEFINED> instruction: 0x032d0502
    43bc:	042002aa 	strteq	r0, [r0], #-682	; 0xfffffd56
    43c0:	06030501 	streq	r0, [r3], -r1, lsl #10
    43c4:	207dd603 	rsbscs	sp, sp, r3, lsl #12
    43c8:	79031505 	stmdbvc	r3, {r0, r2, r8, sl, ip}
    43cc:	010e0501 	tsteq	lr, r1, lsl #10
    43d0:	01060205 	tsteq	r6, r5, lsl #4
    43d4:	09030105 	stmdbeq	r3, {r0, r2, r8}
    43d8:	00050220 	andeq	r0, r5, r0, lsr #4
    43dc:	1e050101 	adfnes	f0, f5, f1
    43e0:	3c020500 	cfstr32cc	mvfx0, [r2], {-0}
    43e4:	0300001e 	movweq	r0, #30
    43e8:	02050139 	andeq	r0, r5, #1073741838	; 0x4000000e
    43ec:	05020414 	streq	r0, [r2, #-1044]	; 0xfffffbec
    43f0:	03cf0329 	biceq	r0, pc, #-1543503872	; 0xa4000000
    43f4:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    43f8:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    43fc:	04010638 	streq	r0, [r1], #-1592	; 0xfffff9c8
    4400:	031e0501 	tsteq	lr, #4194304	; 0x400000
    4404:	04207ca8 	strteq	r7, [r0], #-3240	; 0xfffff358
    4408:	03380502 	teqeq	r8, #8388608	; 0x800000
    440c:	042003d8 	strteq	r0, [r0], #-984	; 0xfffffc28
    4410:	06020501 	streq	r0, [r2], -r1, lsl #10
    4414:	2e7cab03 	vaddcs.f64	d26, d12, d3
    4418:	0502042f 	streq	r0, [r2, #-1071]	; 0xfffffbd1
    441c:	03cd0329 	biceq	r0, sp, #-1543503872	; 0xa4000000
    4420:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    4424:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    4428:	04010638 	streq	r0, [r1], #-1592	; 0xfffff9c8
    442c:	03010501 	movweq	r0, #5377	; 0x1501
    4430:	022e7cad 	eoreq	r7, lr, #44288	; 0xad00
    4434:	01010004 	tsteq	r1, r4
    4438:	05002705 	streq	r2, [r0, #-1797]	; 0xfffff8fb
    443c:	001e5402 	andseq	r5, lr, r2, lsl #8
    4440:	00d70300 	sbcseq	r0, r7, r0, lsl #6
    4444:	16020501 	strne	r0, [r2], -r1, lsl #10
    4448:	0e062705 	cdpeq	7, 0, cr2, cr6, cr5, {0}
    444c:	0502042e 	streq	r0, [r2, #-1070]	; 0xfffffbd2
    4450:	03ba0338 			; <UNDEFINED> instruction: 0x03ba0338
    4454:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
    4458:	7cca0309 	stclvc	3, cr0, [sl], {9}
    445c:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    4460:	03b60338 			; <UNDEFINED> instruction: 0x03b60338
    4464:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
    4468:	ca030608 	bgt	c5c90 <__ccfg+0xa5ce8>
    446c:	0205207c 	andeq	r2, r5, #124	; 0x7c
    4470:	143c7303 	ldrtne	r7, [ip], #-771	; 0xfffffcfd
    4474:	29050204 	stmdbcs	r5, {r2, r9}
    4478:	0103ba03 	tsteq	r3, r3, lsl #20
    447c:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    4480:	01041705 	tsteq	r4, r5, lsl #14
    4484:	03060205 	movweq	r0, #25093	; 0x6205
    4488:	04017cc0 	streq	r7, [r1], #-3264	; 0xfffff340
    448c:	03380502 	teqeq	r8, #8388608	; 0x800000
    4490:	042003c0 	strteq	r0, [r0], #-960	; 0xfffffc40
    4494:	06020501 	streq	r0, [r2], -r1, lsl #10
    4498:	207cc003 	rsbscs	ip, ip, r3
    449c:	0606052f 	streq	r0, [r6], -pc, lsr #10
    44a0:	06020501 	streq	r0, [r2], -r1, lsl #10
    44a4:	0502042f 	streq	r0, [r2, #-1071]	; 0xfffffbd1
    44a8:	03b70329 			; <UNDEFINED> instruction: 0x03b70329
    44ac:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    44b0:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    44b4:	04010638 	streq	r0, [r1], #-1592	; 0xfffff9c8
    44b8:	06020501 	streq	r0, [r2], -r1, lsl #10
    44bc:	2e7cc303 	cdpcs	3, 7, cr12, cr12, cr3, {0}
    44c0:	19060f05 	stmdbne	r6, {r0, r2, r8, r9, sl, fp}
    44c4:	05360105 	ldreq	r0, [r6, #-261]!	; 0xfffffefb
    44c8:	79030603 	stmdbvc	r3, {r0, r1, r9, sl}
    44cc:	0606052e 	streq	r0, [r6], -lr, lsr #10
    44d0:	06040501 	streq	r0, [r4], -r1, lsl #10
    44d4:	024b4c4b 	subeq	r4, fp, #19200	; 0x4b00
    44d8:	01010007 	tsteq	r1, r7
    44dc:	05001605 	streq	r1, [r0, #-1541]	; 0xfffff9fb
    44e0:	001ea802 	andseq	sl, lr, r2, lsl #16
    44e4:	01810300 	orreq	r0, r1, r0, lsl #6
    44e8:	16020501 	strne	r0, [r2], -r1, lsl #10
    44ec:	0e061605 	cfmadd32eq	mvax0, mvfx1, mvfx6, mvfx5
    44f0:	05240605 	streq	r0, [r4, #-1541]!	; 0xfffff9fb
    44f4:	03052005 	movweq	r2, #20485	; 0x5005
    44f8:	02053006 	andeq	r3, r5, #6
    44fc:	0608055e 			; <UNDEFINED> instruction: 0x0608055e
    4500:	3d010501 	cfstr32cc	mvfx0, [r1, #-4]
    4504:	1b060305 	blne	185120 <__ccfg+0x165178>
    4508:	66030205 	strvs	r0, [r3], -r5, lsl #4
    450c:	14010101 	strne	r0, [r1], #-257	; 0xfffffeff
    4510:	29050204 	stmdbcs	r5, {r2, r9}
    4514:	01039903 	tsteq	r3, r3, lsl #18
    4518:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    451c:	38051705 	stmdacc	r5, {r0, r2, r8, r9, sl, ip}
    4520:	01040106 	tsteq	r4, r6, lsl #2
    4524:	e1030205 	tst	r3, r5, lsl #4
    4528:	02042e7c 	andeq	r2, r4, #124, 28	; 0x7c0
    452c:	9f033805 	svcls	0x00033805
    4530:	01042003 	tsteq	r4, r3
    4534:	03060205 	movweq	r0, #25093	; 0x6205
    4538:	2f207ce1 	svccs	0x00207ce1
    453c:	29050204 	stmdbcs	r5, {r2, r9}
    4540:	01039703 	tsteq	r3, r3, lsl #14
    4544:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    4548:	01041705 	tsteq	r4, r5, lsl #14
    454c:	03060205 	movweq	r0, #25093	; 0x6205
    4550:	04017ce3 	streq	r7, [r1], #-3299	; 0xfffff31d
    4554:	03380502 	teqeq	r8, #8388608	; 0x800000
    4558:	0420039d 	strteq	r0, [r0], #-925	; 0xfffffc63
    455c:	06020501 	streq	r0, [r2], -r1, lsl #10
    4560:	207ce303 	rsbscs	lr, ip, r3, lsl #6
    4564:	16030305 	strne	r0, [r3], -r5, lsl #6
    4568:	0609052e 	streq	r0, [r9], -lr, lsr #10
    456c:	00090201 	andeq	r0, r9, r1, lsl #4
    4570:	17050101 	strne	r0, [r5, -r1, lsl #2]
    4574:	e8020500 	stmda	r2, {r8, sl}
    4578:	0300001e 	movweq	r0, #30
    457c:	050100f7 	streq	r0, [r1, #-247]	; 0xffffff09
    4580:	17051402 	strne	r1, [r5, -r2, lsl #8]
    4584:	0c051006 	stceq	0, cr1, [r5], {6}
    4588:	20050522 	andcs	r0, r5, r2, lsr #10
    458c:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
    4590:	03020559 	movweq	r0, #9561	; 0x2559
    4594:	0305016e 	movweq	r0, #20846	; 0x516e
    4598:	053c1303 	ldreq	r1, [ip, #-771]!	; 0xfffffcfd
    459c:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    45a0:	012f0603 			; <UNDEFINED> instruction: 0x012f0603
    45a4:	06010501 	streq	r0, [r1], -r1, lsl #10
    45a8:	00030214 	andeq	r0, r3, r4, lsl r2
    45ac:	11050101 	tstne	r5, r1, lsl #2
    45b0:	0c020500 	cfstr32eq	mvfx0, [r2], {-0}
    45b4:	0300001f 	movweq	r0, #31
    45b8:	05010192 	streq	r0, [r1, #-402]	; 0xfffffe6e
    45bc:	11051602 	tstne	r5, r2, lsl #12
    45c0:	02050e06 	andeq	r0, r5, #6, 28	; 0x60
    45c4:	052f0624 	streq	r0, [pc, #-1572]!	; 3fa8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1dc>
    45c8:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    45cc:	2e0e0301 	cdpcs	3, 0, cr0, cr14, cr1, {0}
    45d0:	72030805 	andvc	r0, r3, #327680	; 0x50000
    45d4:	06020520 	streq	r0, [r2], -r0, lsr #10
    45d8:	05200d03 	streq	r0, [r0, #-3331]!	; 0xfffff2fd
    45dc:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    45e0:	01010003 	tsteq	r1, r3
    45e4:	05001205 	streq	r1, [r0, #-517]	; 0xfffffdfb
    45e8:	001f2002 	andseq	r2, pc, r2
    45ec:	01a70300 			; <UNDEFINED> instruction: 0x01a70300
    45f0:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    45f4:	01060605 	tsteq	r6, r5, lsl #12
    45f8:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    45fc:	052f0603 	streq	r0, [pc, #-1539]!	; 4001 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x15>
    4600:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    4604:	052f0603 	streq	r0, [pc, #-1539]!	; 4009 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x1d>
    4608:	02300601 	eorseq	r0, r0, #1048576	; 0x100000
    460c:	01010003 	tsteq	r1, r3
    4610:	05002b05 	streq	r2, [r0, #-2821]	; 0xfffff4fb
    4614:	00000002 	andeq	r0, r0, r2
    4618:	01af0300 			; <UNDEFINED> instruction: 0x01af0300
    461c:	05200601 	streq	r0, [r0, #-1537]!	; 0xfffff9ff
    4620:	05300602 	ldreq	r0, [r0, #-1538]!	; 0xfffff9fe
    4624:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    4628:	05310602 	ldreq	r0, [r1, #-1538]!	; 0xfffff9fe
    462c:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    4630:	12053c18 	andne	r3, r5, #24, 24	; 0x1800
    4634:	06020520 	streq	r0, [r2], -r0, lsr #10
    4638:	0204303f 	andeq	r3, r4, #63	; 0x3f
    463c:	d1032905 	tstle	r3, r5, lsl #18
    4640:	3d050102 	stfccs	f0, [r5, #-8]
    4644:	17050514 	smladne	r5, r4, r5, r0
    4648:	01063805 	tsteq	r6, r5, lsl #16
    464c:	02050104 	andeq	r0, r5, #4, 2
    4650:	2e7daa03 	vaddcs.f32	s21, s26, s6
    4654:	38050204 	stmdacc	r5, {r2, r9}
    4658:	2002d603 	andcs	sp, r2, r3, lsl #12
    465c:	02050104 	andeq	r0, r5, #4, 2
    4660:	7daa0306 	stcvc	3, cr0, [sl, #24]!
    4664:	4b4b2f20 	blmi	12d02ec <__ccfg+0x12b0344>
    4668:	2008053e 	andcs	r0, r8, lr, lsr r5
    466c:	04310205 	ldrteq	r0, [r1], #-517	; 0xfffffdfb
    4670:	03290502 			; <UNDEFINED> instruction: 0x03290502
    4674:	050102c7 	streq	r0, [r1, #-711]	; 0xfffffd39
    4678:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    467c:	06380517 			; <UNDEFINED> instruction: 0x06380517
    4680:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    4684:	b4030602 	strlt	r0, [r3], #-1538	; 0xfffff9fe
    4688:	05302e7d 	ldreq	r2, [r0, #-3709]!	; 0xfffff183
    468c:	05130601 	ldreq	r0, [r3, #-1537]	; 0xfffff9ff
    4690:	79030603 	stmdbvc	r3, {r0, r1, r9, sl}
    4694:	060a052e 	streq	r0, [sl], -lr, lsr #10
    4698:	2e080501 	cfsh32cs	mvfx0, mvfx8, #1
    469c:	74030a05 	strvc	r0, [r3], #-2565	; 0xfffff5fb
    46a0:	0005023c 	andeq	r0, r5, ip, lsr r2
    46a4:	31050101 	tstcc	r5, r1, lsl #2
    46a8:	00020500 	andeq	r0, r2, r0, lsl #10
    46ac:	03000000 	movweq	r0, #0
    46b0:	050101ca 	streq	r0, [r1, #-458]	; 0xfffffe36
    46b4:	31051402 	tstcc	r5, r2, lsl #8
    46b8:	0c051006 	stceq	0, cr1, [r5], {6}
    46bc:	1e310522 	cdpne	5, 3, cr0, cr1, cr2, {1}
    46c0:	05220505 	streq	r0, [r2, #-1285]!	; 0xfffffafb
    46c4:	05051e31 	streq	r1, [r5, #-3633]	; 0xfffff1cf
    46c8:	06030530 			; <UNDEFINED> instruction: 0x06030530
    46cc:	06060532 			; <UNDEFINED> instruction: 0x06060532
    46d0:	20170501 	andscs	r0, r7, r1, lsl #10
    46d4:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    46d8:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    46dc:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    46e0:	03053c17 	movweq	r3, #23575	; 0x5c17
    46e4:	05303206 	ldreq	r3, [r0, #-518]!	; 0xfffffdfa
    46e8:	010a0304 	tsteq	sl, r4, lsl #6
    46ec:	01061005 	tsteq	r6, r5
    46f0:	05200905 	streq	r0, [r0, #-2309]!	; 0xfffff6fb
    46f4:	09052010 	stmdbeq	r5, {r4, sp}
    46f8:	06040520 	streq	r0, [r4], -r0, lsr #10
    46fc:	06110522 	ldreq	r0, [r1], -r2, lsr #10
    4700:	20090501 	andcs	r0, r9, r1, lsl #10
    4704:	05201f05 	streq	r1, [r0, #-3845]!	; 0xfffff0fb
    4708:	04052e09 	streq	r2, [r5], #-3593	; 0xfffff1f7
    470c:	0d052406 	cfstrseq	mvf2, [r5, #-24]	; 0xffffffe8
    4710:	07050106 	streq	r0, [r5, -r6, lsl #2]
    4714:	0605054a 	streq	r0, [r5], -sl, asr #10
    4718:	060b0531 			; <UNDEFINED> instruction: 0x060b0531
    471c:	06050501 	streq	r0, [r5], -r1, lsl #10
    4720:	0c052f2f 	stceq	15, cr2, [r5], {47}	; 0x2f
    4724:	01050106 	tsteq	r5, r6, lsl #2
    4728:	05203103 	streq	r3, [r0, #-259]!	; 0xfffffefd
    472c:	52030604 	andpl	r0, r3, #4, 12	; 0x400000
    4730:	060e0520 	streq	r0, [lr], -r0, lsr #10
    4734:	20070501 	andcs	r0, r7, r1, lsl #10
    4738:	05202505 	streq	r2, [r0, #-1285]!	; 0xfffffafb
    473c:	0505201d 	streq	r2, [r5, #-29]	; 0xffffffe3
    4740:	0b053e06 	bleq	153f60 <__ccfg+0x133fb8>
    4744:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    4748:	1e0b0528 	cfsh32ne	mvfx0, mvfx11, #24
    474c:	22060405 	andcs	r0, r6, #83886080	; 0x5000000
    4750:	0502042f 	streq	r0, [r2, #-1071]	; 0xfffffbd1
    4754:	96030638 			; <UNDEFINED> instruction: 0x96030638
    4758:	01040102 	tsteq	r4, r2, lsl #2
    475c:	ea030405 	b	c5778 <__ccfg+0xa57d0>
    4760:	02052e7d 	andeq	r2, r5, #2000	; 0x7d0
    4764:	7ec70306 	cdpvc	3, 12, cr0, cr7, cr6, {0}
    4768:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    476c:	03c80329 	biceq	r0, r8, #-1543503872	; 0xa4000000
    4770:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    4774:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    4778:	04010638 	streq	r0, [r1], #-1592	; 0xfffff9c8
    477c:	06020501 	streq	r0, [r2], -r1, lsl #10
    4780:	207cb203 	rsbscs	fp, ip, r3, lsl #4
    4784:	3d4b4b2f 	vstrcc	d20, [fp, #-188]	; 0xffffff44
    4788:	29050204 	stmdbcs	r5, {r2, r9}
    478c:	0103c303 	tsteq	r3, r3, lsl #6
    4790:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    4794:	38051705 	stmdacc	r5, {r0, r2, r8, r9, sl, ip}
    4798:	01040106 	tsteq	r4, r6, lsl #2
    479c:	03060205 	movweq	r0, #25093	; 0x6205
    47a0:	052e7dee 	streq	r7, [lr, #-3566]!	; 0xfffff212
    47a4:	5503060b 	strpl	r0, [r3, #-1547]	; 0xfffff9f5
    47a8:	06090582 	streq	r0, [r9], -r2, lsl #11
    47ac:	052e1f03 	streq	r1, [lr, #-3843]!	; 0xfffff0fd
    47b0:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    47b4:	2a052e0c 	bcs	14ffec <__ccfg+0x130044>
    47b8:	20220520 	eorcs	r0, r2, r0, lsr #10
    47bc:	3e060505 	cfsh32cc	mvfx0, mvfx6, #5
    47c0:	01060b05 	tsteq	r6, r5, lsl #22
    47c4:	31060505 	tstcc	r6, r5, lsl #10
    47c8:	01060b05 	tsteq	r6, r5, lsl #22
    47cc:	05350205 	ldreq	r0, [r5, #-517]!	; 0xfffffdfb
    47d0:	0a030604 	beq	c5fe8 <__ccfg+0xa6040>
    47d4:	0905592e 	stmdbeq	r5, {r1, r2, r3, r5, r8, fp, ip, lr}
    47d8:	0e030106 	adfeqs	f0, f3, f6
    47dc:	0604054a 	streq	r0, [r4], -sl, asr #10
    47e0:	206b0321 	rsbcs	r0, fp, r1, lsr #6
    47e4:	200b0359 	andcs	r0, fp, r9, asr r3
    47e8:	0609054b 	streq	r0, [r9], -fp, asr #10
    47ec:	06040501 	streq	r0, [r4], -r1, lsl #10
    47f0:	09054b5e 	stmdbeq	r5, {r1, r2, r3, r4, r6, r8, r9, fp, lr}
    47f4:	03050106 	movweq	r0, #20742	; 0x5106
    47f8:	7fba0306 	svcvc	0x00ba0306
    47fc:	06060558 			; <UNDEFINED> instruction: 0x06060558
    4800:	3b090501 	blcc	245c0c <__ccfg+0x225c64>
    4804:	01010008 	tsteq	r1, r8
    4808:	05003b05 	streq	r3, [r0, #-2821]	; 0xfffff4fb
    480c:	00000002 	andeq	r0, r0, r2
    4810:	02a00300 	adceq	r0, r0, #0, 6
    4814:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    4818:	063b0514 			; <UNDEFINED> instruction: 0x063b0514
    481c:	320c050e 	andcc	r0, ip, #58720256	; 0x3800000
    4820:	051c3b05 	ldreq	r3, [ip, #-2821]	; 0xfffff4fb
    4824:	3b052405 	blcc	14d840 <__ccfg+0x12d898>
    4828:	3205051c 	andcc	r0, r5, #28, 10	; 0x7000000
    482c:	32060305 	andcc	r0, r6, #335544320	; 0x14000000
    4830:	01060605 	tsteq	r6, r5, lsl #12
    4834:	053c1a05 	ldreq	r1, [ip, #-2565]!	; 0xfffff5fb
    4838:	03052e14 	movweq	r2, #24084	; 0x5e14
    483c:	08053f06 	stmdaeq	r5, {r1, r2, r8, r9, sl, fp, ip, sp}
    4840:	03050106 	movweq	r0, #20742	; 0x5106
    4844:	08052f06 	stmdaeq	r5, {r1, r2, r8, r9, sl, fp, sp}
    4848:	03050106 	movweq	r0, #20742	; 0x5106
    484c:	08053d06 	stmdaeq	r5, {r1, r2, r8, sl, fp, ip, sp}
    4850:	03050106 	movweq	r0, #20742	; 0x5106
    4854:	052f3006 	streq	r3, [pc, #-6]!	; 4856 <patchGenfskRfe+0x132>
    4858:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    485c:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    4860:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    4864:	04053c06 	streq	r3, [r5], #-3078	; 0xfffff3fa
    4868:	0a052206 	beq	14d088 <__ccfg+0x12d0e0>
    486c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    4870:	052f2106 	streq	r2, [pc, #-262]!	; 4772 <patchGenfskRfe+0x4e>
    4874:	22030601 	andcs	r0, r3, #1048576	; 0x100000
    4878:	06030501 	streq	r0, [r3], -r1, lsl #10
    487c:	053c6203 	ldreq	r6, [ip, #-515]!	; 0xfffffdfd
    4880:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    4884:	03052006 	movweq	r2, #20486	; 0x5006
    4888:	24063e06 	strcs	r3, [r6], #-3590	; 0xfffff1fa
    488c:	04304a06 	ldrteq	r4, [r0], #-2566	; 0xfffff5fa
    4890:	03290502 			; <UNDEFINED> instruction: 0x03290502
    4894:	050101c8 	streq	r0, [r1, #-456]	; 0xfffffe38
    4898:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    489c:	06380517 			; <UNDEFINED> instruction: 0x06380517
    48a0:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    48a4:	7eb30303 	cdpvc	3, 11, cr0, cr3, cr3, {0}
    48a8:	0502043c 	streq	r0, [r2, #-1084]	; 0xfffffbc4
    48ac:	01cd0338 	biceq	r0, sp, r8, lsr r3
    48b0:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    48b4:	b3030603 	movwlt	r0, #13827	; 0x3603
    48b8:	052f2e7e 	streq	r2, [pc, #-3710]!	; 3a42 <NOROM_SetupGetTrimForAdcShVbufEn+0x2>
    48bc:	05010619 	streq	r0, [r1, #-1561]	; 0xfffff9e7
    48c0:	4b062e03 	blmi	1900d4 <__ccfg+0x17012c>
    48c4:	08053e4b 	stmdaeq	r5, {r0, r1, r3, r6, r9, sl, fp, ip, sp}
    48c8:	0c053106 	stfeqs	f3, [r5], {6}
    48cc:	2e09052b 	cfsh32cs	mvfx0, mvfx9, #27
    48d0:	05230805 	streq	r0, [r3, #-2053]!	; 0xfffff7fb
    48d4:	051d0609 	ldreq	r0, [sp, #-1545]	; 0xfffff9f7
    48d8:	02042603 	andeq	r2, r4, #3145728	; 0x300000
    48dc:	bb032905 	bllt	cecf8 <__ccfg+0xaed50>
    48e0:	3d050101 	stfccs	f0, [r5, #-4]
    48e4:	17050514 	smladne	r5, r4, r5, r0
    48e8:	01063805 	tsteq	r6, r5, lsl #16
    48ec:	02050104 	andeq	r0, r5, #4, 2
    48f0:	7ec10306 	cdpvc	3, 12, cr0, cr1, cr6, {0}
    48f4:	0605053c 			; <UNDEFINED> instruction: 0x0605053c
    48f8:	06020501 	streq	r0, [r2], -r1, lsl #10
    48fc:	04054b40 	streq	r4, [r5], #-2880	; 0xfffff4c0
    4900:	05207303 	streq	r7, [r0, #-771]!	; 0xfffffcfd
    4904:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    4908:	3d063c04 	stccc	12, cr3, [r6, #-16]
    490c:	01060805 	tsteq	r6, r5, lsl #16
    4910:	59060405 	stmdbpl	r6, {r0, r2, sl}
    4914:	01060805 	tsteq	r6, r5, lsl #16
    4918:	5d030b05 	vstrpl	d0, [r3, #-20]	; 0xffffffec
    491c:	000d024a 	andeq	r0, sp, sl, asr #4
    4920:	12050101 	andne	r0, r5, #1073741824	; 0x40000000
    4924:	00020500 	andeq	r0, r2, r0, lsl #10
    4928:	03000000 	movweq	r0, #0
    492c:	050102da 	streq	r0, [r1, #-730]	; 0xfffffd26
    4930:	01021501 	tsteq	r2, r1, lsl #10
    4934:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    4938:	02050018 	andeq	r0, r5, #24
    493c:	00000000 	andeq	r0, r0, r0
    4940:	0102df03 	tsteq	r2, r3, lsl #30
    4944:	05150205 	ldreq	r0, [r5, #-517]	; 0xfffffdfb
    4948:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    494c:	01010002 	tsteq	r1, r2
    4950:	29050304 	stmdbcs	r5, {r2, r8, r9}
    4954:	00020500 	andeq	r0, r2, r0, lsl #10
    4958:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    495c:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    4960:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    4964:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    4968:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    496c:	05300602 	ldreq	r0, [r0, #-1538]!	; 0xfffff9fe
    4970:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    4974:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    4978:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    497c:	053e0602 	ldreq	r0, [lr, #-1538]!	; 0xfffff9fe
    4980:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    4984:	01010003 	tsteq	r1, r3
    4988:	17050304 	strne	r0, [r5, -r4, lsl #6]
    498c:	00020500 	andeq	r0, r2, r0, lsl #10
    4990:	03000000 	movweq	r0, #0
    4994:	02050112 	andeq	r0, r5, #-2147483644	; 0x80000004
    4998:	06170514 			; <UNDEFINED> instruction: 0x06170514
    499c:	22020510 	andcs	r0, r2, #16, 10	; 0x4000000
    49a0:	05672f06 	strbeq	r2, [r7, #-3846]!	; 0xfffff0fa
    49a4:	05130601 	ldreq	r0, [r3, #-1537]	; 0xfffff9ff
    49a8:	02022d02 	andeq	r2, r2, #2, 26	; 0x80
    49ac:	c1010100 	mrsgt	r0, (UNDEF: 17)
    49b0:	03000001 	movweq	r0, #1
    49b4:	00012100 	andeq	r2, r1, r0, lsl #2
    49b8:	fb010200 	blx	451c2 <__ccfg+0x2521a>
    49bc:	01000d0e 	tsteq	r0, lr, lsl #26
    49c0:	00010101 	andeq	r0, r1, r1, lsl #2
    49c4:	00010000 	andeq	r0, r1, r0
    49c8:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    49cc:	2f656d6f 	svccs	0x00656d6f
    49d0:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    49d4:	442f6e69 	strtmi	r6, [pc], #-3689	; 49dc <patchGenfskRfe+0x2b8>
    49d8:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    49dc:	4f2f706f 	svcmi	0x002f706f
    49e0:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    49e4:	502f5445 	eorpl	r5, pc, r5, asr #8
    49e8:	534f4349 	movtpl	r4, #62281	; 0xf349
    49ec:	6369502f 	cmnvs	r9, #47	; 0x2f
    49f0:	502f534f 	eorpl	r5, pc, pc, asr #6
    49f4:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    49f8:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
    49fc:	006c6169 	rsbeq	r6, ip, r9, ror #2
    4a00:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    4a04:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    4a08:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    4a0c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    4a10:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    4a14:	61652d65 	cmnvs	r5, r5, ror #26
    4a18:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    4a1c:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    4a20:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    4a24:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    4a28:	6f682f00 	svcvs	0x00682f00
    4a2c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 4880 <patchGenfskRfe+0x15c>
    4a30:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    4a34:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4a38:	6f746b73 	svcvs	0x00746b73
    4a3c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    4a40:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    4a44:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4a48:	2f534f43 	svccs	0x00534f43
    4a4c:	4f636950 	svcmi	0x00636950
    4a50:	43432f53 	movtmi	r2, #16211	; 0x3f53
    4a54:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    4a58:	6f682f00 	svcvs	0x00682f00
    4a5c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 48b0 <patchGenfskRfe+0x18c>
    4a60:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    4a64:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4a68:	6f746b73 	svcvs	0x00746b73
    4a6c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    4a70:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    4a74:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4a78:	2f534f43 	svccs	0x00534f43
    4a7c:	4f636950 	svcmi	0x00636950
    4a80:	73000053 	movwvc	r0, #83	; 0x53
    4a84:	695f7265 	ldmdbvs	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    4a88:	00632e6e 	rsbeq	r2, r3, lr, ror #28
    4a8c:	73000001 	movwvc	r0, #1
    4a90:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    4a94:	00682e74 	rsbeq	r2, r8, r4, ror lr
    4a98:	61000002 	tstvs	r0, r2
    4a9c:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    4aa0:	00030068 	andeq	r0, r3, r8, rrx
    4aa4:	63616d00 	cmnvs	r1, #0, 26
    4aa8:	00682e68 	rsbeq	r2, r8, r8, ror #28
    4aac:	70000003 	andvc	r0, r0, r3
    4ab0:	5f736e69 	svcpl	0x00736e69
    4ab4:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    4ab8:	00030068 	andeq	r0, r3, r8, rrx
    4abc:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    4ac0:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    4ac4:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    4ac8:	0300682e 	movweq	r6, #2094	; 0x82e
    4acc:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    4ad0:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    4ad4:	00040068 	andeq	r0, r4, r8, rrx
    4ad8:	2a050000 	bcs	144ae0 <__ccfg+0x124b38>
    4adc:	34020500 	strcc	r0, [r2], #-1280	; 0xfffffb00
    4ae0:	0300001f 	movweq	r0, #31
    4ae4:	0205010c 	andeq	r0, r5, #12, 2
    4ae8:	2a051416 	bcs	149b48 <__ccfg+0x129ba0>
    4aec:	017a0306 	cmneq	sl, r6, lsl #6
    4af0:	34050520 	strcc	r0, [r5], #-1312	; 0xfffffae0
    4af4:	32060205 	andcc	r0, r6, #1342177280	; 0x50000000
    4af8:	01061005 	tsteq	r6, r5
    4afc:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    4b00:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    4b04:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
    4b08:	04053c06 	streq	r3, [r5], #-3078	; 0xfffff3fa
    4b0c:	0b052106 	bleq	14cf2c <__ccfg+0x12cf84>
    4b10:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    4b14:	07054b06 	streq	r4, [r5, -r6, lsl #22]
    4b18:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    4b1c:	053d2106 	ldreq	r2, [sp, #-262]!	; 0xfffffefa
    4b20:	052d1603 	streq	r1, [sp, #-1539]!	; 0xfffff9fd
    4b24:	05054f02 	streq	r4, [r5, #-3842]	; 0xfffff0fe
    4b28:	03050106 	movweq	r0, #20742	; 0x5106
    4b2c:	13052f06 	movwne	r2, #24326	; 0x5f06
    4b30:	08050106 	stmdaeq	r5, {r1, r2, r8}
    4b34:	06020520 	streq	r0, [r2], -r0, lsr #10
    4b38:	06050524 	streq	r0, [r5], -r4, lsr #10
    4b3c:	06030501 	streq	r0, [r3], -r1, lsl #10
    4b40:	06080521 	streq	r0, [r8], -r1, lsr #10
    4b44:	06020501 	streq	r0, [r2], -r1, lsl #10
    4b48:	053d593e 	ldreq	r5, [sp, #-2366]!	; 0xfffff6c2
    4b4c:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    4b50:	052f0602 	streq	r0, [pc, #-1538]!	; 4556 <CSWTCH.47+0x4f>
    4b54:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    4b58:	052f0603 	streq	r0, [pc, #-1539]!	; 455d <CSWTCH.47+0x56>
    4b5c:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    4b60:	03052201 	movweq	r2, #20993	; 0x5201
    4b64:	2e750306 	cdpcs	3, 7, cr0, cr5, cr6, {0}
    4b68:	01060a05 	tsteq	r6, r5, lsl #20
    4b6c:	024a6e03 	subeq	r6, sl, #3, 28	; 0x30
    4b70:	01010007 	tsteq	r1, r7
    4b74:	0000019e 	muleq	r0, lr, r1
    4b78:	013d0003 	teqeq	sp, r3
    4b7c:	01020000 	mrseq	r0, (UNDEF: 2)
    4b80:	000d0efb 	strdeq	r0, [sp], -fp
    4b84:	01010101 	tsteq	r1, r1, lsl #2
    4b88:	01000000 	mrseq	r0, (UNDEF: 0)
    4b8c:	2f010000 	svccs	0x00010000
    4b90:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4b94:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    4b98:	2f6e6974 	svccs	0x006e6974
    4b9c:	6b736544 	blvs	1cde0b4 <__ccfg+0x1cbe10c>
    4ba0:	2f706f74 	svccs	0x00706f74
    4ba4:	4f534c4f 	svcmi	0x00534c4f
    4ba8:	2f54454e 	svccs	0x0054454e
    4bac:	4f434950 	svcmi	0x00434950
    4bb0:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    4bb4:	2f534f63 	svccs	0x00534f63
    4bb8:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    4bbc:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    4bc0:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    4bc4:	73752f00 	cmnvc	r5, #0, 30
    4bc8:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    4bcc:	63672f62 	cmnvs	r7, #392	; 0x188
    4bd0:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    4bd4:	6f6e2d6d 	svcvs	0x006e2d6d
    4bd8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    4bdc:	2f696261 	svccs	0x00696261
    4be0:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    4be4:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    4be8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    4bec:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    4bf0:	2f656d6f 	svccs	0x00656d6f
    4bf4:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    4bf8:	442f6e69 	strtmi	r6, [pc], #-3689	; 4c00 <patchGenfskRfe+0x4dc>
    4bfc:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4c00:	4f2f706f 	svcmi	0x002f706f
    4c04:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    4c08:	502f5445 	eorpl	r5, pc, r5, asr #8
    4c0c:	534f4349 	movtpl	r4, #62281	; 0xf349
    4c10:	6369502f 	cmnvs	r9, #47	; 0x2f
    4c14:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    4c18:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    4c1c:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    4c20:	2f656d6f 	svccs	0x00656d6f
    4c24:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    4c28:	442f6e69 	strtmi	r6, [pc], #-3689	; 4c30 <patchGenfskRfe+0x50c>
    4c2c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4c30:	4f2f706f 	svcmi	0x002f706f
    4c34:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    4c38:	502f5445 	eorpl	r5, pc, r5, asr #8
    4c3c:	534f4349 	movtpl	r4, #62281	; 0xf349
    4c40:	6369502f 	cmnvs	r9, #47	; 0x2f
    4c44:	0000534f 	andeq	r5, r0, pc, asr #6
    4c48:	5f726573 	svcpl	0x00726573
    4c4c:	6674756f 	ldrbtvs	r7, [r4], -pc, ror #10
    4c50:	0100632e 	tsteq	r0, lr, lsr #6
    4c54:	74730000 	ldrbtvc	r0, [r3], #-0
    4c58:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    4c5c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    4c60:	74730000 	ldrbtvc	r0, [r3], #-0
    4c64:	67726164 	ldrbvs	r6, [r2, -r4, ror #2]!
    4c68:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    4c6c:	72610000 	rsbvc	r0, r1, #0
    4c70:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    4c74:	00000300 	andeq	r0, r0, r0, lsl #6
    4c78:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    4c7c:	0300682e 	movweq	r6, #2094	; 0x82e
    4c80:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    4c84:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    4c88:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    4c8c:	00000300 	andeq	r0, r0, r0, lsl #6
    4c90:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    4c94:	5f736e6f 	svcpl	0x00736e6f
    4c98:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    4c9c:	00030068 	andeq	r0, r3, r8, rrx
    4ca0:	73797300 	cmnvc	r9, #0, 6
    4ca4:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    4ca8:	00000400 	andeq	r0, r0, r0, lsl #8
    4cac:	6975623c 	ldmdbvs	r5!, {r2, r3, r4, r5, r9, sp, lr}^
    4cb0:	692d746c 	pushvs	{r2, r3, r5, r6, sl, ip, sp, lr}
    4cb4:	00003e6e 	andeq	r3, r0, lr, ror #28
    4cb8:	05000000 	streq	r0, [r0, #-0]
    4cbc:	0205002c 	andeq	r0, r5, #44	; 0x2c
    4cc0:	00001fac 	andeq	r1, r0, ip, lsr #31
    4cc4:	05010b03 	streq	r0, [r1, #-2819]	; 0xfffff4fd
    4cc8:	13131402 	tstne	r3, #33554432	; 0x2000000
    4ccc:	062c0514 			; <UNDEFINED> instruction: 0x062c0514
    4cd0:	2e017a03 	vmlacs.f32	s14, s2, s6
    4cd4:	05260e05 	streq	r0, [r6, #-3589]!	; 0xfffff1fb
    4cd8:	03053c05 	movweq	r3, #23557	; 0x5c05
    4cdc:	033d3006 	teqeq	sp, #6
    4ce0:	0205010a 	andeq	r0, r5, #-2147483646	; 0x80000002
    4ce4:	052e7903 	streq	r7, [lr, #-2307]!	; 0xfffff6fd
    4ce8:	0522060d 	streq	r0, [r2, #-1549]!	; 0xfffff9f3
    4cec:	22061e02 	andcs	r1, r6, #2, 28
    4cf0:	01060d05 	tsteq	r6, r5, lsl #26
    4cf4:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    4cf8:	05320603 	ldreq	r0, [r2, #-1539]!	; 0xfffff9fd
    4cfc:	06054e02 	streq	r4, [r5], -r2, lsl #28
    4d00:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    4d04:	0603054a 	streq	r0, [r3], -sl, asr #10
    4d08:	02053d21 	andeq	r3, r5, #2112	; 0x840
    4d0c:	06010524 	streq	r0, [r1], -r4, lsr #10
    4d10:	00090213 	andeq	r0, r9, r3, lsl r2
    4d14:	01af0101 			; <UNDEFINED> instruction: 0x01af0101
    4d18:	00030000 	andeq	r0, r3, r0
    4d1c:	0000013c 	andeq	r0, r0, ip, lsr r1
    4d20:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    4d24:	0101000d 	tsteq	r1, sp
    4d28:	00000101 	andeq	r0, r0, r1, lsl #2
    4d2c:	00000100 	andeq	r0, r0, r0, lsl #2
    4d30:	6f682f01 	svcvs	0x00682f01
    4d34:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 4b88 <patchGenfskRfe+0x464>
    4d38:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    4d3c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4d40:	6f746b73 	svcvs	0x00746b73
    4d44:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    4d48:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    4d4c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4d50:	2f534f43 	svccs	0x00534f43
    4d54:	4f636950 	svcmi	0x00636950
    4d58:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    4d5c:	2f736269 	svccs	0x00736269
    4d60:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    4d64:	2f006c61 	svccs	0x00006c61
    4d68:	2f727375 	svccs	0x00727375
    4d6c:	2f62696c 	svccs	0x0062696c
    4d70:	2f636367 	svccs	0x00636367
    4d74:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    4d78:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    4d7c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    4d80:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    4d84:	2f312e32 	svccs	0x00312e32
    4d88:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    4d8c:	00656475 	rsbeq	r6, r5, r5, ror r4
    4d90:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4cdc <patchGenfskRfe+0x5b8>
    4d94:	616d2f65 	cmnvs	sp, r5, ror #30
    4d98:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    4d9c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4da0:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4da4:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4da8:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    4dac:	4349502f 	movtmi	r5, #36911	; 0x902f
    4db0:	502f534f 	eorpl	r5, pc, pc, asr #6
    4db4:	534f6369 	movtpl	r6, #62313	; 0xf369
    4db8:	3143432f 	cmpcc	r3, pc, lsr #6
    4dbc:	00585833 	subseq	r5, r8, r3, lsr r8
    4dc0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4d0c <patchGenfskRfe+0x5e8>
    4dc4:	616d2f65 	cmnvs	sp, r5, ror #30
    4dc8:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    4dcc:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4dd0:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4dd4:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4dd8:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    4ddc:	4349502f 	movtmi	r5, #36911	; 0x902f
    4de0:	502f534f 	eorpl	r5, pc, pc, asr #6
    4de4:	534f6369 	movtpl	r6, #62313	; 0xf369
    4de8:	65730000 	ldrbvs	r0, [r3, #-0]!
    4dec:	6e695f72 	mcrvs	15, 3, r5, cr9, cr2, {3}
    4df0:	00632e66 	rsbeq	r2, r3, r6, ror #28
    4df4:	73000001 	movwvc	r0, #1
    4df8:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    4dfc:	00682e74 	rsbeq	r2, r8, r4, ror lr
    4e00:	73000002 	movwvc	r0, #2
    4e04:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
    4e08:	00682e67 	rsbeq	r2, r8, r7, ror #28
    4e0c:	61000002 	tstvs	r0, r2
    4e10:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    4e14:	00030068 	andeq	r0, r3, r8, rrx
    4e18:	63616d00 	cmnvs	r1, #0, 26
    4e1c:	00682e68 	rsbeq	r2, r8, r8, ror #28
    4e20:	70000003 	andvc	r0, r0, r3
    4e24:	5f736e69 	svcpl	0x00736e69
    4e28:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    4e2c:	00030068 	andeq	r0, r3, r8, rrx
    4e30:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    4e34:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    4e38:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    4e3c:	0300682e 	movweq	r6, #2094	; 0x82e
    4e40:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    4e44:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    4e48:	00040068 	andeq	r0, r4, r8, rrx
    4e4c:	75623c00 	strbvc	r3, [r2, #-3072]!	; 0xfffff400
    4e50:	2d746c69 	ldclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
    4e54:	003e6e69 	eorseq	r6, lr, r9, ror #28
    4e58:	00000000 	andeq	r0, r0, r0
    4e5c:	05002d05 	streq	r2, [r0, #-3333]	; 0xfffff2fb
    4e60:	00200002 	eoreq	r0, r0, r2
    4e64:	010d0300 	mrseq	r0, SP_mon
    4e68:	13170205 	tstne	r7, #1342177280	; 0x50000000
    4e6c:	062d0514 			; <UNDEFINED> instruction: 0x062d0514
    4e70:	2e017803 	cdpcs	8, 0, cr7, cr1, cr3, {0}
    4e74:	05360505 	ldreq	r0, [r6, #-1285]!	; 0xfffffafb
    4e78:	05230602 	streq	r0, [r3, #-1538]!	; 0xfffff9fe
    4e7c:	05010610 	streq	r0, [r1, #-1552]	; 0xfffff9f0
    4e80:	03052005 	movweq	r2, #20485	; 0x5005
    4e84:	0f052f06 	svceq	0x00052f06
    4e88:	06050106 	streq	r0, [r5], -r6, lsl #2
    4e8c:	0604053c 			; <UNDEFINED> instruction: 0x0604053c
    4e90:	060b0521 	streq	r0, [fp], -r1, lsr #10
    4e94:	06040501 	streq	r0, [r4], -r1, lsl #10
    4e98:	0607054b 	streq	r0, [r7], -fp, asr #10
    4e9c:	06050501 	streq	r0, [r5], -r1, lsl #10
    4ea0:	03053d21 	movweq	r3, #23841	; 0x5d21
    4ea4:	02052d16 	andeq	r2, r5, #1408	; 0x580
    4ea8:	0905304f 	stmdbeq	r5, {r0, r1, r2, r3, r6, ip, sp}
    4eac:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    4eb0:	053d3e06 	ldreq	r3, [sp, #-3590]!	; 0xfffff1fa
    4eb4:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    4eb8:	05300602 	ldreq	r0, [r0, #-1538]!	; 0xfffff9fe
    4ebc:	05130601 	ldreq	r0, [r3, #-1537]	; 0xfffff9ff
    4ec0:	6669030a 	strbtvs	r0, [r9], -sl, lsl #6
    4ec4:	01000602 	tsteq	r0, r2, lsl #12
    4ec8:	000ca901 	andeq	sl, ip, r1, lsl #18
    4ecc:	99000300 	stmdbls	r0, {r8, r9}
    4ed0:	02000002 	andeq	r0, r0, #2
    4ed4:	0d0efb01 	vstreq	d15, [lr, #-4]
    4ed8:	01010100 	mrseq	r0, (UNDEF: 17)
    4edc:	00000001 	andeq	r0, r0, r1
    4ee0:	01000001 	tsteq	r0, r1
    4ee4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4e30 <patchImageGenfsk+0x58>
    4ee8:	616d2f65 	cmnvs	sp, r5, ror #30
    4eec:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    4ef0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4ef4:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4ef8:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4efc:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    4f00:	4349502f 	movtmi	r5, #36911	; 0x902f
    4f04:	502f534f 	eorpl	r5, pc, pc, asr #6
    4f08:	534f6369 	movtpl	r6, #62313	; 0xf369
    4f0c:	3143432f 	cmpcc	r3, pc, lsr #6
    4f10:	00585833 	subseq	r5, r8, r3, lsr r8
    4f14:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4e60 <patchImageGenfsk+0x88>
    4f18:	616d2f65 	cmnvs	sp, r5, ror #30
    4f1c:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    4f20:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4f24:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4f28:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4f2c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    4f30:	4349502f 	movtmi	r5, #36911	; 0x902f
    4f34:	502f534f 	eorpl	r5, pc, pc, asr #6
    4f38:	534f6369 	movtpl	r6, #62313	; 0xf369
    4f3c:	3143432f 	cmpcc	r3, pc, lsr #6
    4f40:	2f585833 	svccs	0x00585833
    4f44:	33314343 	teqcc	r1, #201326593	; 0xc000001
    4f48:	41575858 	cmpmi	r7, r8, asr r8
    4f4c:	642f4552 	strtvs	r4, [pc], #-1362	; 4f54 <patchImageGenfsk+0x17c>
    4f50:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    4f54:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    4f58:	6f682f00 	svcvs	0x00682f00
    4f5c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 4db0 <patchGenfskRfe+0x68c>
    4f60:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    4f64:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4f68:	6f746b73 	svcvs	0x00746b73
    4f6c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    4f70:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    4f74:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4f78:	2f534f43 	svccs	0x00534f43
    4f7c:	4f636950 	svcmi	0x00636950
    4f80:	43432f53 	movtmi	r2, #16211	; 0x3f53
    4f84:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    4f88:	3143432f 	cmpcc	r3, pc, lsr #6
    4f8c:	57585833 	smmlarpl	r8, r3, r8, r5
    4f90:	2f455241 	svccs	0x00455241
    4f94:	705f6672 	subsvc	r6, pc, r2, ror r6	; <UNPREDICTABLE>
    4f98:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
    4f9c:	2f007365 	svccs	0x00007365
    4fa0:	2f727375 	svccs	0x00727375
    4fa4:	2f62696c 	svccs	0x0062696c
    4fa8:	2f636367 	svccs	0x00636367
    4fac:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    4fb0:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    4fb4:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    4fb8:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    4fbc:	2f312e32 	svccs	0x00312e32
    4fc0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    4fc4:	00656475 	rsbeq	r6, r5, r5, ror r4
    4fc8:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    4fcc:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    4fd0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    4fd4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    4fd8:	2f62696c 	svccs	0x0062696c
    4fdc:	00737973 	rsbseq	r7, r3, r3, ror r9
    4fe0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4f2c <patchImageGenfsk+0x154>
    4fe4:	616d2f65 	cmnvs	sp, r5, ror #30
    4fe8:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    4fec:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4ff0:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4ff4:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4ff8:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    4ffc:	4349502f 	movtmi	r5, #36911	; 0x902f
    5000:	502f534f 	eorpl	r5, pc, pc, asr #6
    5004:	534f6369 	movtpl	r6, #62313	; 0xf369
    5008:	6f682f00 	svcvs	0x00682f00
    500c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 4e60 <patchImageGenfsk+0x88>
    5010:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    5014:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    5018:	6f746b73 	svcvs	0x00746b73
    501c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    5020:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    5024:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    5028:	2f534f43 	svccs	0x00534f43
    502c:	4f636950 	svcmi	0x00636950
    5030:	656b2f53 	strbvs	r2, [fp, #-3923]!	; 0xfffff0ad
    5034:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    5038:	66720000 	ldrbtvs	r0, [r2], -r0
    503c:	706f7270 	rsbvc	r7, pc, r0, ror r2	; <UNPREDICTABLE>
    5040:	0100632e 	tsteq	r0, lr, lsr #6
    5044:	66720000 	ldrbtvs	r0, [r2], -r0
    5048:	00682e63 	rsbeq	r2, r8, r3, ror #28
    504c:	67000002 	strvs	r0, [r0, -r2]
    5050:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
    5054:	00020068 	andeq	r0, r2, r8, rrx
    5058:	5f667200 	svcpl	0x00667200
    505c:	63746170 	cmnvs	r4, #112, 2
    5060:	70635f68 	rsbvc	r5, r3, r8, ror #30
    5064:	65675f65 	strbvs	r5, [r7, #-3941]!	; 0xfffff09b
    5068:	6b73666e 	blvs	1cdea28 <__ccfg+0x1cbea80>
    506c:	0300682e 	movweq	r6, #2094	; 0x82e
    5070:	66720000 	ldrbtvs	r0, [r2], -r0
    5074:	7461705f 	strbtvc	r7, [r1], #-95	; 0xffffffa1
    5078:	725f6863 	subsvc	r6, pc, #6488064	; 0x630000
    507c:	675f6566 	ldrbvs	r6, [pc, -r6, ror #10]
    5080:	73666e65 	cmnvc	r6, #1616	; 0x650
    5084:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    5088:	73000003 	movwvc	r0, #3
    508c:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    5090:	00682e74 	rsbeq	r2, r8, r4, ror lr
    5094:	73000004 	movwvc	r0, #4
    5098:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
    509c:	00682e66 	rsbeq	r2, r8, r6, ror #28
    50a0:	5f000004 	svcpl	0x00000004
    50a4:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    50a8:	00682e73 	rsbeq	r2, r8, r3, ror lr
    50ac:	72000005 	andvc	r0, r0, #5
    50b0:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    50b4:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    50b8:	6f6c0000 	svcvs	0x006c0000
    50bc:	682e6b63 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    50c0:	00000500 	andeq	r0, r0, r0, lsl #10
    50c4:	6d5f6672 	ldclvs	6, cr6, [pc, #-456]	; 4f04 <patchImageGenfsk+0x12c>
    50c8:	626c6961 	rsbvs	r6, ip, #1589248	; 0x184000
    50cc:	682e786f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, fp, ip, sp, lr}
    50d0:	00000200 	andeq	r0, r0, r0, lsl #4
    50d4:	635f6672 	cmpvs	pc, #119537664	; 0x7200000
    50d8:	6f6d6d6f 	svcvs	0x006d6d6f
    50dc:	6d635f6e 	stclvs	15, cr5, [r3, #-440]!	; 0xfffffe48
    50e0:	00682e64 	rsbeq	r2, r8, r4, ror #28
    50e4:	72000002 	andvc	r0, r0, #2
    50e8:	72705f66 	rsbsvc	r5, r0, #408	; 0x198
    50ec:	635f706f 	cmpvs	pc, #111	; 0x6f
    50f0:	682e646d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, sp, lr}
    50f4:	00000200 	andeq	r0, r0, r0, lsl #4
    50f8:	645f6672 	ldrbvs	r6, [pc], #-1650	; 5100 <__exidx_end+0x58>
    50fc:	5f617461 	svcpl	0x00617461
    5100:	72746e65 	rsbsvc	r6, r4, #1616	; 0x650
    5104:	00682e79 	rsbeq	r2, r8, r9, ror lr
    5108:	61000002 	tstvs	r0, r2
    510c:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    5110:	00010068 	andeq	r0, r1, r8, rrx
    5114:	63616d00 	cmnvs	r1, #0, 26
    5118:	00682e68 	rsbeq	r2, r8, r8, ror #28
    511c:	70000001 	andvc	r0, r0, r1
    5120:	5f736e69 	svcpl	0x00736e69
    5124:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    5128:	00010068 	andeq	r0, r1, r8, rrx
    512c:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    5130:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    5134:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    5138:	0100682e 	tsteq	r0, lr, lsr #16
    513c:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    5140:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    5144:	00060068 	andeq	r0, r6, r8, rrx
    5148:	72656b00 	rsbvc	r6, r5, #0, 22
    514c:	2e6c656e 	cdpcs	5, 6, cr6, cr12, cr14, {3}
    5150:	00070068 	andeq	r0, r7, r8, rrx
    5154:	616d7300 	cmnvs	sp, r0, lsl #6
    5158:	66727472 			; <UNDEFINED> instruction: 0x66727472
    515c:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
    5160:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
    5164:	00682e73 	rsbeq	r2, r8, r3, ror lr
    5168:	00000001 	andeq	r0, r0, r1
    516c:	05001705 	streq	r1, [r0, #-1797]	; 0xfffff8fb
    5170:	00206002 	eoreq	r6, r0, r2
    5174:	039f0300 	orrseq	r0, pc, #0, 6
    5178:	16020501 	strne	r0, [r2], -r1, lsl #10
    517c:	14063805 	strne	r3, [r6], #-2053	; 0xfffff7fb
    5180:	05202605 	streq	r2, [r0, #-1541]!	; 0xfffff9fb
    5184:	26052038 			; <UNDEFINED> instruction: 0x26052038
    5188:	1e15053c 	mrcne	5, 0, r0, cr5, cr12, {1}
    518c:	02310105 	eorseq	r0, r1, #1073741825	; 0x40000001
    5190:	01010008 	tsteq	r1, r8
    5194:	05002a05 	streq	r2, [r0, #-2565]	; 0xfffff5fb
    5198:	00208002 	eoreq	r8, r0, r2
    519c:	06c90300 	strbeq	r0, [r9], r0, lsl #6
    51a0:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    51a4:	062a0514 			; <UNDEFINED> instruction: 0x062a0514
    51a8:	0405200e 	streq	r2, [r5], #-14
    51ac:	05440806 	strbeq	r0, [r4, #-2054]	; 0xfffff7fa
    51b0:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
    51b4:	0805200c 	stmdaeq	r5, {r2, r3, sp}
    51b8:	053c2003 	ldreq	r2, [ip, #-3]!
    51bc:	03210604 			; <UNDEFINED> instruction: 0x03210604
    51c0:	06052064 	streq	r2, [r5], -r4, rrx
    51c4:	58750306 	ldmdapl	r5!, {r1, r2, r8, r9}^
    51c8:	03060405 	movweq	r0, #25605	; 0x6405
    51cc:	0101200d 	tsteq	r1, sp
    51d0:	4a582e9e 	bmi	1610c50 <__ccfg+0x15f0ca8>
    51d4:	03060105 	movweq	r0, #24837	; 0x6105
    51d8:	050100fa 	streq	r0, [r1, #-250]	; 0xffffff06
    51dc:	90030604 	andls	r0, r3, r4, lsl #12
    51e0:	055d207f 	ldrbeq	r2, [sp, #-127]	; 0xffffff81
    51e4:	2001060b 	andcs	r0, r1, fp, lsl #12
    51e8:	06040520 	streq	r0, [r4], -r0, lsr #10
    51ec:	0606052f 	streq	r0, [r6], -pc, lsr #10
    51f0:	05016303 	streq	r6, [r1, #-771]	; 0xfffffcfd
    51f4:	21030604 	tstcs	r3, r4, lsl #12
    51f8:	060a052e 	streq	r0, [sl], -lr, lsr #10
    51fc:	20080501 	andcs	r0, r8, r1, lsl #10
    5200:	21060405 	tstcs	r6, r5, lsl #8
    5204:	e2030205 	and	r0, r3, #1342177280	; 0x50000000
    5208:	05050100 	streq	r0, [r5, #-256]	; 0xffffff00
    520c:	03050106 	movweq	r0, #20742	; 0x5106
    5210:	02052f06 	andeq	r2, r5, #6, 30
    5214:	0608050f 	streq	r0, [r8], -pc, lsl #10
    5218:	1d090515 	cfstr32ne	mvfx0, [r9, #-84]	; 0xffffffac
    521c:	03060405 	movweq	r0, #25605	; 0x6405
    5220:	05207fa4 	streq	r7, [r0, #-4004]!	; 0xfffff05c
    5224:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    5228:	05410604 	strbeq	r0, [r1, #-1540]	; 0xfffff9fc
    522c:	05130605 	ldreq	r0, [r3, #-1541]	; 0xfffff9fb
    5230:	05051f07 	streq	r1, [r5, #-3847]	; 0xfffff0f9
    5234:	055b2106 	ldrbeq	r2, [fp, #-262]	; 0xfffffefa
    5238:	07055204 	streq	r5, [r5, -r4, lsl #4]
    523c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    5240:	01012206 	tsteq	r1, r6, lsl #4
    5244:	4a065a06 	bmi	19ba64 <__ccfg+0x17babc>
    5248:	35060d05 	strcc	r0, [r6, #-3333]	; 0xfffff2fb
    524c:	05212005 	streq	r2, [r1, #-5]!
    5250:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
    5254:	05130611 	ldreq	r0, [r3, #-1553]	; 0xfffff9ef
    5258:	1b052d08 	blne	150680 <__ccfg+0x1306d8>
    525c:	1e052d06 	cdpne	13, 0, cr2, cr5, cr6, {0}
    5260:	12050106 	andne	r0, r5, #-2147483647	; 0x80000001
    5264:	04052006 	streq	r2, [r5], #-6
    5268:	03060106 	movweq	r0, #24838	; 0x6106
    526c:	2e053c10 	mcrcs	12, 0, r3, cr5, cr0, {0}
    5270:	14050106 	strne	r0, [r5], #-262	; 0xfffffefa
    5274:	1f2e0521 	svcne	0x002e0521
    5278:	3e060405 	cdpcc	4, 0, cr0, cr6, cr5, {0}
    527c:	01062e05 	tsteq	r6, r5, lsl #28
    5280:	05202405 	streq	r2, [r0, #-1029]!	; 0xfffffbfb
    5284:	594b0604 	stmdbpl	fp, {r2, r9, sl}^
    5288:	060a0524 	streq	r0, [sl], -r4, lsr #10
    528c:	03080501 	movweq	r0, #34049	; 0x8501
    5290:	0405200e 	streq	r2, [r5], #-14
    5294:	75032206 	strvc	r2, [r3, #-518]	; 0xfffffdfa
    5298:	060c0520 	streq	r0, [ip], -r0, lsr #10
    529c:	21140501 	tstcs	r4, r1, lsl #10
    52a0:	20490c05 	subcs	r0, r9, r5, lsl #24
    52a4:	30060405 	andcc	r0, r6, r5, lsl #8
    52a8:	2f011103 	svccs	0x00011103
    52ac:	05587503 	ldrbeq	r7, [r8, #-1283]	; 0xfffffafd
    52b0:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    52b4:	05360604 	ldreq	r0, [r6, #-1540]!	; 0xfffff9fc
    52b8:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    52bc:	0a052106 	beq	14d6dc <__ccfg+0x12d734>
    52c0:	20202e1f 	eorcs	r2, r0, pc, lsl lr
    52c4:	0604053c 			; <UNDEFINED> instruction: 0x0604053c
    52c8:	05660903 	strbeq	r0, [r6, #-2307]!	; 0xfffff6fd
    52cc:	2001060d 	andcs	r0, r1, sp, lsl #12
    52d0:	06040520 	streq	r0, [r4], -r0, lsr #10
    52d4:	060d0530 			; <UNDEFINED> instruction: 0x060d0530
    52d8:	0604051e 			; <UNDEFINED> instruction: 0x0604051e
    52dc:	001f0242 	andseq	r0, pc, r2, asr #4
    52e0:	23050101 	movwcs	r0, #20737	; 0x5101
    52e4:	10020500 	andne	r0, r2, r0, lsl #10
    52e8:	03000022 	movweq	r0, #34	; 0x22
    52ec:	050101c4 	streq	r0, [r1, #-452]	; 0xfffffe3c
    52f0:	05151702 	ldreq	r1, [r5, #-1794]	; 0xfffff8fe
    52f4:	78030623 	stmdavc	r3, {r0, r1, r5, r9, sl}
    52f8:	02052001 	andeq	r2, r5, #1
    52fc:	2e0a0306 	cdpcs	3, 0, cr0, cr10, cr6, {0}
    5300:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
    5304:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    5308:	06053c0c 	streq	r3, [r5], -ip, lsl #24
    530c:	06030520 	streq	r0, [r3], -r0, lsr #10
    5310:	06060531 			; <UNDEFINED> instruction: 0x06060531
    5314:	06040501 	streq	r0, [r4], -r1, lsl #10
    5318:	05260630 	streq	r0, [r6, #-1584]!	; 0xfffff9d0
    531c:	053a0603 	ldreq	r0, [sl, #-1539]!	; 0xfffff9fd
    5320:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    5324:	4b2f0604 	blmi	bc6b3c <__ccfg+0xba6b94>
    5328:	05310305 	ldreq	r0, [r1, #-773]!	; 0xfffffcfb
    532c:	3c710308 	ldclcc	3, cr0, [r1], #-32	; 0xffffffe0
    5330:	13060605 	movwne	r0, #26117	; 0x6605
    5334:	10030105 	andne	r0, r3, r5, lsl #2
    5338:	00090220 	andeq	r0, r9, r0, lsr #4
    533c:	16050101 	strne	r0, [r5], -r1, lsl #2
    5340:	58020500 	stmdapl	r2, {r8, sl}
    5344:	03000022 	movweq	r0, #34	; 0x22
    5348:	05010394 	streq	r0, [r1, #-916]	; 0xfffffc6c
    534c:	16051602 	strne	r1, [r5], -r2, lsl #12
    5350:	0e050e06 	cdpeq	14, 0, cr0, cr5, cr6, {0}
    5354:	20050524 	andcs	r0, r5, r4, lsr #10
    5358:	3f060205 	svccc	0x00060205
    535c:	0601053d 			; <UNDEFINED> instruction: 0x0601053d
    5360:	0006024b 	andeq	r0, r6, fp, asr #4
    5364:	17050101 	strne	r0, [r5, -r1, lsl #2]
    5368:	7c020500 	cfstr32vc	mvfx0, [r2], {-0}
    536c:	03000022 	movweq	r0, #34	; 0x22
    5370:	050102e0 	streq	r0, [r1, #-736]	; 0xfffffd20
    5374:	17051602 	strne	r1, [r5, -r2, lsl #12]
    5378:	0e050e06 	cdpeq	14, 0, cr0, cr5, cr6, {0}
    537c:	20050524 	andcs	r0, r5, r4, lsr #10
    5380:	3f060205 	svccc	0x00060205
    5384:	35050204 	strcc	r0, [r5, #-516]	; 0xfffffdfc
    5388:	7eb90306 	cdpvc	3, 11, cr0, cr9, cr6, {0}
    538c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    5390:	01c70302 	biceq	r0, r7, r2, lsl #6
    5394:	3f5a0620 	svccc	0x005a0620
    5398:	05020430 	streq	r0, [r2, #-1072]	; 0xfffffbd0
    539c:	7eb20305 	cdpvc	3, 11, cr0, cr2, cr5, {0}
    53a0:	06350501 	ldrteq	r0, [r5], -r1, lsl #10
    53a4:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    53a8:	01d00302 	bicseq	r0, r0, r2, lsl #6
    53ac:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    53b0:	7eb00335 	mrcvc	3, 5, r0, cr0, cr5, {1}
    53b4:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    53b8:	d0030602 	andle	r0, r3, r2, lsl #12
    53bc:	05312001 	ldreq	r2, [r1, #-1]!
    53c0:	05010648 	streq	r0, [r1, #-1608]	; 0xfffff9b8
    53c4:	31310602 	teqcc	r1, r2, lsl #12
    53c8:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
    53cc:	015f0329 	cmpeq	pc, r9, lsr #6
    53d0:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    53d4:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
    53d8:	06020501 	streq	r0, [r2], -r1, lsl #10
    53dc:	044a1c03 	strbeq	r1, [sl], #-3075	; 0xfffff3fd
    53e0:	03290503 			; <UNDEFINED> instruction: 0x03290503
    53e4:	0505015f 	streq	r0, [r5, #-351]	; 0xfffffea1
    53e8:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    53ec:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    53f0:	1c030602 	stcne	6, cr0, [r3], {2}
    53f4:	014b142e 	cmpeq	fp, lr, lsr #8
    53f8:	01010101 	tsteq	r1, r1, lsl #2
    53fc:	13060105 	movwne	r0, #24837	; 0x6105
    5400:	01000b02 	tsteq	r0, r2, lsl #22
    5404:	000d0501 	andeq	r0, sp, r1, lsl #10
    5408:	22d80205 	sbcscs	r0, r8, #1342177280	; 0x50000000
    540c:	e1030000 	mrs	r0, (UNDEF: 3)
    5410:	20060101 	andcs	r0, r6, r1, lsl #2
    5414:	4f060205 	svcmi	0x00060205
    5418:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
    541c:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    5420:	03052006 	movweq	r2, #20486	; 0x5006
    5424:	06053106 	streq	r3, [r5], -r6, lsl #2
    5428:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    542c:	055b3006 	ldrbeq	r3, [fp, #-6]
    5430:	08054c03 	stmdaeq	r5, {r0, r1, sl, fp, lr}
    5434:	053c7503 	ldreq	r7, [ip, #-1283]!	; 0xfffffafd
    5438:	05130606 	ldreq	r0, [r3, #-1542]	; 0xfffff9fa
    543c:	200c0301 	andcs	r0, ip, r1, lsl #6
    5440:	01000502 	tsteq	r0, r2, lsl #10
    5444:	000d0501 	andeq	r0, sp, r1, lsl #10
    5448:	23100205 	tstcs	r0, #1342177280	; 0x50000000
    544c:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
    5450:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
    5454:	01010903 	tsteq	r1, r3, lsl #18
    5458:	29050304 	stmdbcs	r5, {r2, r8, r9}
    545c:	05011b03 	streq	r1, [r1, #-2819]	; 0xfffff4fd
    5460:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
    5464:	01040106 	tsteq	r4, r6, lsl #2
    5468:	57030d05 	strpl	r0, [r3, -r5, lsl #26]
    546c:	0503043c 	streq	r0, [r3, #-1084]	; 0xfffffbc4
    5470:	2e29032d 	cdpcs	3, 2, cr0, cr9, cr13, {1}
    5474:	02050104 	andeq	r0, r5, #4, 2
    5478:	20600306 	rsbcs	r0, r0, r6, lsl #6
    547c:	29050304 	stmdbcs	r5, {r2, r8, r9}
    5480:	05011b03 	streq	r1, [r1, #-2819]	; 0xfffff4fd
    5484:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
    5488:	01040106 	tsteq	r4, r6, lsl #2
    548c:	03060205 	movweq	r0, #25093	; 0x6205
    5490:	2f192e60 	svccs	0x00192e60
    5494:	05010705 	streq	r0, [r1, #-1797]	; 0xfffff8fb
    5498:	1e053c1c 	mcrne	12, 0, r3, cr5, cr12, {0}
    549c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    54a0:	0531062e 	ldreq	r0, [r1, #-1582]!	; 0xfffff9d2
    54a4:	05010648 	streq	r0, [r1, #-1608]	; 0xfffff9b8
    54a8:	48053202 	stmdami	r5, {r1, r9, ip, sp}
    54ac:	0602051c 			; <UNDEFINED> instruction: 0x0602051c
    54b0:	02043124 	andeq	r3, r4, #36, 2
    54b4:	e4030505 	str	r0, [r3], #-1285	; 0xfffffafb
    54b8:	3505017e 	strcc	r0, [r5, #-382]	; 0xfffffe82
    54bc:	01040106 	tsteq	r4, r6, lsl #2
    54c0:	9f030205 	svcls	0x00030205
    54c4:	02043c01 	andeq	r3, r4, #256	; 0x100
    54c8:	e1033505 	tst	r3, r5, lsl #10
    54cc:	0104207e 	tsteq	r4, lr, ror r0
    54d0:	03060205 	movweq	r0, #25093	; 0x6205
    54d4:	3220019f 	eorcc	r0, r0, #-1073741785	; 0xc0000027
    54d8:	04050404 	streq	r0, [r5], #-1028	; 0xfffffbfc
    54dc:	03011003 	movweq	r1, #4099	; 0x1003
    54e0:	01050173 	tsteq	r5, r3, ror r1
    54e4:	05016b03 	streq	r6, [r1, #-2819]	; 0xfffff4fd
    54e8:	01160304 	tsteq	r6, r4, lsl #6
    54ec:	15016103 	strne	r6, [r1, #-259]	; 0xfffffefd
    54f0:	03661d03 	cmneq	r6, #3, 26	; 0xc0
    54f4:	1513016d 	ldrne	r0, [r3, #-365]	; 0xfffffe93
    54f8:	01061205 	tsteq	r6, r5, lsl #4
    54fc:	04050504 	streq	r0, [r5], #-1284	; 0xfffffafc
    5500:	2e01f103 	mvfcss	f7, f3
    5504:	12050404 	andne	r0, r5, #4, 8	; 0x4000000
    5508:	207e8f03 	rsbscs	r8, lr, r3, lsl #30
    550c:	21060405 	tstcs	r6, r5, lsl #8
    5510:	13061205 	movwne	r1, #25093	; 0x6205
    5514:	3d13053d 	cfldr32cc	mvfx0, [r3, #-244]	; 0xffffff0c
    5518:	2f12052f 	svccs	0x0012052f
    551c:	053e1105 	ldreq	r1, [lr, #-261]!	; 0xfffffefb
    5520:	20790312 	rsbscs	r0, r9, r2, lsl r3
    5524:	2f060405 	svccs	0x00060405
    5528:	13131313 	tstne	r3, #1275068416	; 0x4c000000
    552c:	06110514 			; <UNDEFINED> instruction: 0x06110514
    5530:	05050401 	streq	r0, [r5, #-1025]	; 0xfffffbff
    5534:	01d4031c 	bicseq	r0, r4, ip, lsl r3
    5538:	1f140520 	svcne	0x00140520
    553c:	25060405 	strcs	r0, [r6, #-1029]	; 0xfffffbfb
    5540:	05130705 	ldreq	r0, [r3, #-1797]	; 0xfffff8fb
    5544:	1b18060a 	blne	606d74 <__ccfg+0x5e6dcc>
    5548:	2f060705 	svccs	0x00060705
    554c:	13060a05 	movwne	r0, #27141	; 0x6a05
    5550:	2f060705 	svccs	0x00060705
    5554:	13060a05 	movwne	r0, #27141	; 0x6a05
    5558:	2f060705 	svccs	0x00060705
    555c:	060a0513 			; <UNDEFINED> instruction: 0x060a0513
    5560:	210d0501 	tstcs	sp, r1, lsl #10
    5564:	212f2f2f 			; <UNDEFINED> instruction: 0x212f2f2f
    5568:	04052121 	streq	r2, [r5], #-289	; 0xfffffedf
    556c:	06070530 			; <UNDEFINED> instruction: 0x06070530
    5570:	133c7803 	teqne	ip, #196608	; 0x30000
    5574:	13131313 	tstne	r3, #1275068416	; 0x4c000000
    5578:	0d051313 	stceq	3, cr1, [r5, #-76]	; 0xffffffb4
    557c:	0c052e06 	stceq	14, cr2, [r5], {6}
    5580:	04052106 	streq	r2, [r5], #-262	; 0xfffffefa
    5584:	22060106 	andcs	r0, r6, #-2147483647	; 0x80000001
    5588:	13131313 	tstne	r3, #1275068416	; 0x4c000000
    558c:	060a0513 			; <UNDEFINED> instruction: 0x060a0513
    5590:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    5594:	7e950309 	cdpvc	3, 9, cr0, cr5, cr9, {0}
    5598:	05050420 	streq	r0, [r5, #-1056]	; 0xfffffbe0
    559c:	01eb030a 	mvneq	r0, sl, lsl #6
    55a0:	06040520 	streq	r0, [r4], -r0, lsr #10
    55a4:	060a0521 	streq	r0, [sl], -r1, lsr #10
    55a8:	06040501 	streq	r0, [r4], -r1, lsl #10
    55ac:	060a052f 	streq	r0, [sl], -pc, lsr #10
    55b0:	06040501 	streq	r0, [r4], -r1, lsl #10
    55b4:	060a052f 	streq	r0, [sl], -pc, lsr #10
    55b8:	06040501 	streq	r0, [r4], -r1, lsl #10
    55bc:	060a052f 	streq	r0, [sl], -pc, lsr #10
    55c0:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    55c4:	91030609 	tstls	r3, r9, lsl #12
    55c8:	02052e7e 	andeq	r2, r5, #2016	; 0x7e0
    55cc:	3f090536 	svccc	0x00090536
    55d0:	12030205 	andne	r0, r3, #1342177280	; 0x50000000
    55d4:	435c3e3c 	cmpmi	ip, #60, 28	; 0x3c0
    55d8:	06135a3d 			; <UNDEFINED> instruction: 0x06135a3d
    55dc:	69061b25 	stmdbvs	r6, {r0, r2, r5, r8, r9, fp, ip}
    55e0:	01063005 	tsteq	r6, r5
    55e4:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
    55e8:	01062d05 	tsteq	r6, r5, lsl #26
    55ec:	2f060205 	svccs	0x00060205
    55f0:	1f062d05 	svcne	0x00062d05
    55f4:	05210205 	streq	r0, [r1, #-517]!	; 0xfffffdfb
    55f8:	02052801 	andeq	r2, r5, #65536	; 0x10000
    55fc:	022e7803 	eoreq	r7, lr, #196608	; 0x30000
    5600:	01010033 	tsteq	r1, r3, lsr r0
    5604:	05001e05 	streq	r1, [r0, #-3589]	; 0xfffff1fb
    5608:	00249002 	eoreq	r9, r4, r2
    560c:	03b40300 			; <UNDEFINED> instruction: 0x03b40300
    5610:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    5614:	01090313 	tsteq	r9, r3, lsl r3
    5618:	03050204 	movweq	r0, #20996	; 0x5204
    561c:	017dee03 	cmneq	sp, r3, lsl #28
    5620:	1e050104 	adfnes	f0, f5, f4
    5624:	02860306 	addeq	r0, r6, #402653184	; 0x18000000
    5628:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    562c:	7dfa0330 	ldclvc	3, cr0, [sl, #192]!	; 0xc0
    5630:	7b32052e 	blvc	c86af0 <__ccfg+0xc66b48>
    5634:	29060305 	stmdbcs	r6, {r0, r2, r8, r9}
    5638:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    563c:	05010632 	streq	r0, [r1, #-1586]	; 0xfffff9ce
    5640:	05210609 	streq	r0, [r1, #-1545]!	; 0xfffff9f7
    5644:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    5648:	33062003 	movwcc	r2, #24579	; 0x6003
    564c:	0a050104 	beq	145a64 <__ccfg+0x125abc>
    5650:	028b0306 	addeq	r0, fp, #402653184	; 0x18000000
    5654:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    5658:	7df50330 	ldclvc	3, cr0, [r5, #192]!	; 0xc0
    565c:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    5660:	029e0305 	addseq	r0, lr, #335544320	; 0x14000000
    5664:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    5668:	7de20330 	stclvc	3, cr0, [r2, #192]!	; 0xc0
    566c:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    5670:	0291032d 	addseq	r0, r1, #-1275068416	; 0xb4000000
    5674:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    5678:	7def0330 	stclvc	3, cr0, [pc, #192]!	; 5740 <__exidx_end+0x698>
    567c:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
    5680:	8b030602 	blhi	c6e90 <__ccfg+0xa6ee8>
    5684:	27055802 	strcs	r5, [r5, -r2, lsl #16]
    5688:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    568c:	05200f03 	streq	r0, [r0, #-3843]!	; 0xfffff0fd
    5690:	2e71030a 	cdpcs	3, 7, cr0, cr1, cr10, {0}
    5694:	2f060605 	svccs	0x00060605
    5698:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
    569c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    56a0:	013d0604 	teqeq	sp, r4, lsl #12
    56a4:	19051301 	stmdbne	r5, {r0, r8, r9, ip}
    56a8:	0d051406 	cfstrseq	mvf1, [r5, #-24]	; 0xffffffe8
    56ac:	201d0520 	andscs	r0, sp, r0, lsr #10
    56b0:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
    56b4:	04051e06 	streq	r1, [r5], #-3590	; 0xfffff1fa
    56b8:	07053006 	streq	r3, [r5, -r6]
    56bc:	21050106 	tstcs	r5, r6, lsl #2
    56c0:	4a370520 	bmi	dc6b48 <__ccfg+0xda6ba0>
    56c4:	3f060505 	svccc	0x00060505
    56c8:	16061505 	strne	r1, [r6], -r5, lsl #10
    56cc:	052a0805 	streq	r0, [sl, #-2053]!	; 0xfffff7fb
    56d0:	05240605 	streq	r0, [r4, #-1541]!	; 0xfffff9fb
    56d4:	0501061f 	streq	r0, [r1, #-1567]	; 0xfffff9e1
    56d8:	1f052013 	svcne	0x00052013
    56dc:	20130520 	andscs	r0, r3, r0, lsr #10
    56e0:	21060505 	tstcs	r6, r5, lsl #10
    56e4:	01060f05 	tsteq	r6, r5, lsl #30
    56e8:	2f060505 	svccs	0x00060505
    56ec:	056e0405 	strbeq	r0, [lr, #-1029]!	; 0xfffffbfb
    56f0:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
    56f4:	6a030613 	bvs	c6f48 <__ccfg+0xa6fa0>
    56f8:	0106052e 	tsteq	r6, lr, lsr #10
    56fc:	11060205 	tstne	r6, r5, lsl #4
    5700:	052f1b05 	streq	r1, [pc, #-2821]!	; 4c03 <patchGenfskRfe+0x4df>
    5704:	12030605 	andne	r0, r3, #5242880	; 0x500000
    5708:	0302053c 	movweq	r0, #9532	; 0x253c
    570c:	05054a0a 	streq	r4, [r5, #-2570]	; 0xfffff5f6
    5710:	03050106 	movweq	r0, #20742	; 0x5106
    5714:	01012106 	tsteq	r1, r6, lsl #2
    5718:	05010114 	streq	r0, [r1, #-276]	; 0xfffffeec
    571c:	05310601 	ldreq	r0, [r1, #-1537]!	; 0xfffff9ff
    5720:	01052b03 	tsteq	r5, r3, lsl #22
    5724:	00130269 	andseq	r0, r3, r9, ror #4
    5728:	01050101 	tsteq	r5, r1, lsl #2
    572c:	60020500 	andvs	r0, r2, r0, lsl #10
    5730:	03000025 	movweq	r0, #37	; 0x25
    5734:	0101048c 	smlabbeq	r1, ip, r4, r0
    5738:	03052e06 	movweq	r2, #24070	; 0x5e06
    573c:	820a0306 	andhi	r0, sl, #402653184	; 0x18000000
    5740:	01060705 	tsteq	r6, r5, lsl #14
    5744:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    5748:	304c0604 	subcc	r0, ip, r4, lsl #12
    574c:	054f0305 	strbeq	r0, [pc, #-773]	; 544f <__exidx_end+0x3a7>
    5750:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    5754:	04052006 	streq	r2, [r5], #-6
    5758:	07054b06 	streq	r4, [r5, -r6, lsl #22]
    575c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    5760:	03052106 	movweq	r2, #20742	; 0x5106
    5764:	060e0536 			; <UNDEFINED> instruction: 0x060e0536
    5768:	2e060501 	cfsh32cs	mvfx0, mvfx6, #1
    576c:	3d060405 	cfstrscc	mvf0, [r6, #-20]	; 0xffffffec
    5770:	01062405 	tsteq	r6, r5, lsl #8
    5774:	05581b05 	ldrbeq	r1, [r8, #-2821]	; 0xfffff4fb
    5778:	05052007 	streq	r2, [r5, #-7]
    577c:	13063306 	movwne	r3, #25350	; 0x6306
    5780:	051f0c05 	ldreq	r0, [pc, #-3077]	; 4b83 <patchGenfskRfe+0x45f>
    5784:	0c052105 	stfeqs	f2, [r5], {5}
    5788:	2105051f 	tstcs	r5, pc, lsl r5
    578c:	051f0c05 	ldreq	r0, [pc, #-3077]	; 4b8f <patchGenfskRfe+0x46b>
    5790:	01210605 			; <UNDEFINED> instruction: 0x01210605
    5794:	062e2006 	strteq	r2, [lr], -r6
    5798:	030a052e 	movweq	r0, #42286	; 0xa52e
    579c:	0d054a72 	vstreq	s8, [r5, #-456]	; 0xfffffe38
    57a0:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    57a4:	02053006 	andeq	r3, r5, #6
    57a8:	017dde03 	cmneq	sp, r3, lsl #28
    57ac:	01060505 	tsteq	r6, r5, lsl #10
    57b0:	03060205 	movweq	r0, #25093	; 0x6205
    57b4:	052e0188 	streq	r0, [lr, #-392]!	; 0xfffffe78
    57b8:	05010627 	streq	r0, [r1, #-1575]	; 0xfffff9d9
    57bc:	0605200a 	streq	r2, [r5], -sl
    57c0:	03052f06 	movweq	r2, #24326	; 0x5f06
    57c4:	060e0513 			; <UNDEFINED> instruction: 0x060e0513
    57c8:	06130501 	ldreq	r0, [r3], -r1, lsl #10
    57cc:	061b052d 	ldreq	r0, [fp], -sp, lsr #10
    57d0:	06060501 	streq	r0, [r6], -r1, lsl #10
    57d4:	13030520 	movwne	r0, #13600	; 0x3520
    57d8:	01060e05 	tsteq	r6, r5, lsl #28
    57dc:	1f061305 	svcne	0x00061305
    57e0:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    57e4:	03301602 	teqeq	r0, #2097152	; 0x200000
    57e8:	01017447 	tsteq	r1, r7, asr #8
    57ec:	cd030405 	cfstrsgt	mvf0, [r3, #-20]	; 0xffffffec
    57f0:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
    57f4:	017ede03 	cmneq	lr, r3, lsl #28
    57f8:	05051413 	streq	r1, [r5, #-1043]	; 0xfffffbed
    57fc:	03060106 	movweq	r0, #24838	; 0x6106
    5800:	154a01aa 	strbne	r0, [sl, #-426]	; 0xfffffe56
    5804:	05140101 	ldreq	r0, [r4, #-257]	; 0xfffffeff
    5808:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    580c:	08052e10 	stmdaeq	r5, {r4, r9, sl, fp, sp}
    5810:	0606052e 	streq	r0, [r6], -lr, lsr #10
    5814:	06290522 	strteq	r0, [r9], -r2, lsr #10
    5818:	06050501 	streq	r0, [r5], -r1, lsl #10
    581c:	061b0531 			; <UNDEFINED> instruction: 0x061b0531
    5820:	06030501 	streq	r0, [r3], -r1, lsl #10
    5824:	06060532 			; <UNDEFINED> instruction: 0x06060532
    5828:	06040501 	streq	r0, [r4], -r1, lsl #10
    582c:	0f054b30 	svceq	0x00054b30
    5830:	07050106 	streq	r0, [r5, -r6, lsl #2]
    5834:	06050520 	streq	r0, [r5], -r0, lsr #10
    5838:	35040530 	strcc	r0, [r4, #-1328]	; 0xfffffad0
    583c:	052a0b05 	streq	r0, [sl, #-2821]!	; 0xfffff4fb
    5840:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    5844:	05300605 	ldreq	r0, [r0, #-1541]!	; 0xfffff9fb
    5848:	07056b03 	streq	r6, [r5, -r3, lsl #22]
    584c:	06050106 	streq	r0, [r5], -r6, lsl #2
    5850:	06040520 	streq	r0, [r4], -r0, lsr #10
    5854:	054b5933 	strbeq	r5, [fp, #-2355]	; 0xfffff6cd
    5858:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    585c:	10030603 	andne	r0, r3, r3, lsl #12
    5860:	0302054a 	movweq	r0, #9546	; 0x254a
    5864:	05017d9e 	streq	r7, [r1, #-3486]	; 0xfffff262
    5868:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    586c:	d6030602 	strle	r0, [r3], -r2, lsl #12
    5870:	01015800 	tsteq	r1, r0, lsl #16
    5874:	8d030305 	stchi	3, cr0, [r3, #-20]	; 0xffffffec
    5878:	1e030102 	adfnes	f0, f3, f2
    587c:	0619052e 	ldreq	r0, [r9], -lr, lsr #10
    5880:	21310501 	teqcs	r1, r1, lsl #10
    5884:	052d1905 	streq	r1, [sp, #-2309]!	; 0xfffff6fb
    5888:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    588c:	05010631 	streq	r0, [r1, #-1585]	; 0xfffff9cf
    5890:	31052203 	tstcc	r5, r3, lsl #4
    5894:	0603051e 			; <UNDEFINED> instruction: 0x0603051e
    5898:	07053222 	streq	r3, [r5, -r2, lsr #4]
    589c:	06050106 	streq	r0, [r5], -r6, lsl #2
    58a0:	06030520 	streq	r0, [r3], -r0, lsr #10
    58a4:	0608055b 			; <UNDEFINED> instruction: 0x0608055b
    58a8:	2e060501 	cfsh32cs	mvfx0, mvfx6, #1
    58ac:	31060405 	tstcc	r6, r5, lsl #8
    58b0:	05410305 	strbeq	r0, [r1, #-773]	; 0xfffffcfb
    58b4:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    58b8:	04052e06 	streq	r2, [r5], #-3590	; 0xfffff1fa
    58bc:	07054b06 	streq	r4, [r5, -r6, lsl #22]
    58c0:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    58c4:	1b054106 	blne	155ce4 <__ccfg+0x135d3c>
    58c8:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    58cc:	33052f06 	movwcc	r2, #24326	; 0x5f06
    58d0:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    58d4:	052f3e06 	streq	r3, [pc, #-3590]!	; 4ad6 <patchGenfskRfe+0x3b2>
    58d8:	0b053f04 	bleq	1554f0 <__ccfg+0x135548>
    58dc:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    58e0:	3c090306 	stccc	3, cr0, [r9], {6}
    58e4:	03050101 	movweq	r0, #20737	; 0x5101
    58e8:	00c30306 	sbceq	r0, r3, r6, lsl #6
    58ec:	03420658 	movteq	r0, #9816	; 0x2658
    58f0:	053d206d 	ldreq	r2, [sp, #-109]!	; 0xffffff93
    58f4:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    58f8:	2e0c0303 	cdpcs	3, 0, cr0, cr12, cr3, {0}
    58fc:	74030a05 	strvc	r0, [r3], #-2565	; 0xfffff5fb
    5900:	06030520 	streq	r0, [r3], -r0, lsr #10
    5904:	060b0527 	streq	r0, [fp], -r7, lsr #10
    5908:	06030501 	streq	r0, [r3], -r1, lsl #10
    590c:	15010122 	strne	r0, [r1, #-290]	; 0xfffffede
    5910:	05200b03 	streq	r0, [r0, #-2819]!	; 0xfffff4fd
    5914:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    5918:	1f052e06 	svcne	0x00052e06
    591c:	3d070558 	cfstr32cc	mvfx0, [r7, #-352]	; 0xfffffea0
    5920:	05493e05 	strbeq	r3, [r9, #-3589]	; 0xfffff1fb
    5924:	053e0604 	ldreq	r0, [lr, #-1540]!	; 0xfffff9fc
    5928:	02013f01 	andeq	r3, r1, #1, 30
    592c:	01010020 	tsteq	r1, r0, lsr #32
    5930:	05001f05 	streq	r1, [r0, #-3845]	; 0xfffff0fb
    5934:	00275002 	eoreq	r5, r7, r2
    5938:	03eb0300 	mvneq	r0, #0, 6
    593c:	17020501 	strne	r0, [r2, -r1, lsl #10]
    5940:	0d061f05 	stceq	15, cr1, [r6, #-20]	; 0xffffffec
    5944:	05250605 	streq	r0, [r5, #-1541]!	; 0xfffff9fb
    5948:	03052e05 	movweq	r2, #24069	; 0x5e05
    594c:	02042306 	andeq	r2, r4, #402653184	; 0x18000000
    5950:	03063005 	movweq	r3, #24581	; 0x6005
    5954:	05667eb0 	strbeq	r7, [r6, #-3760]!	; 0xfffff150
    5958:	051b0603 	ldreq	r0, [fp, #-1539]	; 0xfffff9fd
    595c:	30051705 	andcc	r1, r5, r5, lsl #14
    5960:	0a050106 	beq	145d80 <__ccfg+0x125dd8>
    5964:	0b052106 	bleq	14dd84 <__ccfg+0x12dddc>
    5968:	03050106 	movweq	r0, #20742	; 0x5106
    596c:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    5970:	d6030602 	strle	r0, [r3], -r2, lsl #12
    5974:	02042e01 	andeq	r2, r4, #1, 28
    5978:	81030305 	tsthi	r3, r5, lsl #6
    597c:	3205017e 	andcc	r0, r5, #-2147483617	; 0x8000001f
    5980:	01040106 	tsteq	r4, r6, lsl #2
    5984:	82030205 	andhi	r0, r3, #1342177280	; 0x50000000
    5988:	02042002 	andeq	r2, r4, #2
    598c:	fe033205 	cdp2	2, 0, cr3, cr3, cr5, {0}
    5990:	0104207d 	tsteq	r4, sp, ror r0
    5994:	82030205 	andhi	r0, r3, #1342177280	; 0x50000000
    5998:	82062e02 	andhi	r2, r6, #2, 28
    599c:	014a582e 	cmpeq	sl, lr, lsr #16
    59a0:	05580114 	ldrbeq	r0, [r8, #-276]	; 0xfffffeec
    59a4:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    59a8:	0101000d 	tsteq	r1, sp
    59ac:	05002505 	streq	r2, [r0, #-1285]	; 0xfffffafb
    59b0:	0027c002 	eoreq	ip, r7, r2
    59b4:	07d60300 	ldrbeq	r0, [r6, r0, lsl #6]
    59b8:	03020501 	movweq	r0, #9473	; 0x2501
    59bc:	25050109 	strcs	r0, [r5, #-265]	; 0xfffffef7
    59c0:	01770306 	cmneq	r7, r6, lsl #6
    59c4:	09030d05 	stmdbeq	r3, {r0, r2, r8, sl, fp}
    59c8:	0325052e 			; <UNDEFINED> instruction: 0x0325052e
    59cc:	05052077 	streq	r2, [r5, #-119]	; 0xffffff89
    59d0:	05200903 	streq	r0, [r0, #-2307]!	; 0xfffff6fd
    59d4:	06300603 	ldrteq	r0, [r0], -r3, lsl #12
    59d8:	06020536 			; <UNDEFINED> instruction: 0x06020536
    59dc:	052e7a03 	streq	r7, [lr, #-2563]!	; 0xfffff5fd
    59e0:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    59e4:	05240602 	streq	r0, [r4, #-1538]!	; 0xfffff9fe
    59e8:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    59ec:	03052005 	movweq	r2, #20485	; 0x5005
    59f0:	07053006 	streq	r3, [r5, -r6]
    59f4:	02053706 	andeq	r3, r5, #1572864	; 0x180000
    59f8:	04052806 	streq	r2, [r5], #-2054	; 0xfffff7fa
    59fc:	7ea10306 	cdpvc	3, 10, cr0, cr1, cr6, {0}
    5a00:	03090501 	movweq	r0, #38145	; 0x9501
    5a04:	052001df 	streq	r0, [r0, #-479]!	; 0xfffffe21
    5a08:	7eac030e 	cdpvc	3, 10, cr0, cr12, cr14, {0}
    5a0c:	2813052e 	ldmdacs	r3, {r1, r2, r3, r5, r8, sl}
    5a10:	cc030b05 			; <UNDEFINED> instruction: 0xcc030b05
    5a14:	02052e01 	andeq	r2, r5, #1, 28
    5a18:	9b032306 	blls	ce638 <__ccfg+0xae690>
    5a1c:	1413017e 	ldrne	r0, [r3], #-382	; 0xfffffe82
    5a20:	13030513 	movwne	r0, #13587	; 0x3513
    5a24:	13060405 	movwne	r0, #25605	; 0x6405
    5a28:	5d060305 	stcpl	3, cr0, [r6, #-20]	; 0xffffffec
    5a2c:	01060605 	tsteq	r6, r5, lsl #12
    5a30:	2f060405 	svccs	0x00060405
    5a34:	055a0305 	ldrbeq	r0, [sl, #-773]	; 0xfffffcfb
    5a38:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    5a3c:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    5a40:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    5a44:	05300604 	ldreq	r0, [r0, #-1540]!	; 0xfffff9fc
    5a48:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    5a4c:	13320603 	teqne	r2, #3145728	; 0x300000
    5a50:	06060513 			; <UNDEFINED> instruction: 0x06060513
    5a54:	1f170514 	svcne	0x00170514
    5a58:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    5a5c:	13051f17 	movwne	r1, #24343	; 0x5f17
    5a60:	0603052b 	streq	r0, [r3], -fp, lsr #10
    5a64:	060e0531 			; <UNDEFINED> instruction: 0x060e0531
    5a68:	06030501 	streq	r0, [r3], -r1, lsl #10
    5a6c:	06060521 	streq	r0, [r6], -r1, lsr #10
    5a70:	06020501 	streq	r0, [r2], -r1, lsl #10
    5a74:	06110526 	ldreq	r0, [r1], -r6, lsr #10
    5a78:	06020501 	streq	r0, [r2], -r1, lsl #10
    5a7c:	061a0523 	ldreq	r0, [sl], -r3, lsr #10
    5a80:	3c090501 	cfstr32cc	mvfx0, [r9], {1}
    5a84:	31060205 	tstcc	r6, r5, lsl #4
    5a88:	01060505 	tsteq	r6, r5, lsl #10
    5a8c:	31060205 	tstcc	r6, r5, lsl #4
    5a90:	01061505 	tsteq	r6, r5, lsl #10
    5a94:	21060205 	tstcs	r6, r5, lsl #4
    5a98:	01061505 	tsteq	r6, r5, lsl #10
    5a9c:	05200205 	streq	r0, [r0, #-517]!	; 0xfffffdfb
    5aa0:	01c0030b 	biceq	r0, r0, fp, lsl #6
    5aa4:	03150520 	tsteq	r5, #32, 10	; 0x8000000
    5aa8:	05207ec0 	streq	r7, [r0, #-3776]!	; 0xfffff140
    5aac:	05230602 	streq	r0, [r3, #-1538]!	; 0xfffff9fe
    5ab0:	05010619 	streq	r0, [r1, #-1561]	; 0xfffff9e7
    5ab4:	01bd030b 			; <UNDEFINED> instruction: 0x01bd030b
    5ab8:	03190520 	tsteq	r9, #32, 10	; 0x8000000
    5abc:	05207ec3 	streq	r7, [r0, #-3779]!	; 0xfffff13d
    5ac0:	13230602 			; <UNDEFINED> instruction: 0x13230602
    5ac4:	05161315 	ldreq	r1, [r6, #-789]	; 0xfffffceb
    5ac8:	77030625 	strvc	r0, [r3, -r5, lsr #12]
    5acc:	06020501 	streq	r0, [r2], -r1, lsl #10
    5ad0:	05660c03 	strbeq	r0, [r6, #-3075]!	; 0xfffff3fd
    5ad4:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    5ad8:	01ae030b 			; <UNDEFINED> instruction: 0x01ae030b
    5adc:	03090520 	movweq	r0, #38176	; 0x9520
    5ae0:	052e7ed2 	streq	r7, [lr, #-3794]!	; 0xfffff12e
    5ae4:	ab030602 	blge	c72f4 <__ccfg+0xa734c>
    5ae8:	09052e01 	stmdbeq	r5, {r0, r9, sl, fp, sp}
    5aec:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    5af0:	0b053106 	bleq	151f10 <__ccfg+0x131f68>
    5af4:	09050106 	stmdbeq	r5, {r1, r2, r8}
    5af8:	2702052e 	strcs	r0, [r2, -lr, lsr #10]
    5afc:	79030905 	stmdbvc	r3, {r0, r2, r8, fp}
    5b00:	0602052e 	streq	r0, [r2], -lr, lsr #10
    5b04:	13010122 	movwne	r0, #4386	; 0x1122
    5b08:	01130101 	tsteq	r3, r1, lsl #2
    5b0c:	3f4f1501 	svccc	0x004f1501
    5b10:	01060c05 	tsteq	r6, r5, lsl #24
    5b14:	054a0a05 	strbeq	r0, [sl, #-2565]	; 0xfffff5fb
    5b18:	05310602 	ldreq	r0, [r1, #-1538]!	; 0xfffff9fe
    5b1c:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    5b20:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    5b24:	22056002 	andcs	r6, r5, #2
    5b28:	44050106 	strmi	r0, [r5], #-262	; 0xfffffefa
    5b2c:	3c7ba003 	ldclcc	0, cr10, [fp], #-12
    5b30:	e0032205 	and	r2, r3, r5, lsl #4
    5b34:	02052004 	andeq	r2, r5, #4
    5b38:	9b032406 	blls	ceb58 <__ccfg+0xaebb0>
    5b3c:	3f05017b 	svccc	0x0005017b
    5b40:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    5b44:	44053d06 	strmi	r3, [r5], #-3334	; 0xfffff2fa
    5b48:	2e050106 	adfcss	f0, f5, f6
    5b4c:	0602052d 	streq	r0, [r2], -sp, lsr #10
    5b50:	0804e703 	stmdaeq	r4, {r0, r1, r8, r9, sl, sp, lr, pc}
    5b54:	28053220 	stmdacs	r5, {r5, r9, ip, sp}
    5b58:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    5b5c:	1d280523 	cfstr32ne	mvfx0, [r8, #-140]!	; 0xffffff74
    5b60:	23060205 	movwcs	r0, #25093	; 0x6205
    5b64:	052f0905 	streq	r0, [pc, #-2309]!	; 5267 <__exidx_end+0x1bf>
    5b68:	30054e02 	andcc	r4, r5, r2, lsl #28
    5b6c:	01050106 	tsteq	r5, r6, lsl #2
    5b70:	0027022f 	eoreq	r0, r7, pc, lsr #4
    5b74:	02a80101 	adceq	r0, r8, #1073741824	; 0x40000000
    5b78:	00030000 	andeq	r0, r3, r0
    5b7c:	0000014c 	andeq	r0, r0, ip, asr #2
    5b80:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    5b84:	0101000d 	tsteq	r1, sp
    5b88:	00000101 	andeq	r0, r0, r1, lsl #2
    5b8c:	00000100 	andeq	r0, r0, r0, lsl #2
    5b90:	73752f01 	cmnvc	r5, #1, 30
    5b94:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    5b98:	63672f62 	cmnvs	r7, #392	; 0x188
    5b9c:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    5ba0:	6f6e2d6d 	svcvs	0x006e2d6d
    5ba4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    5ba8:	2f696261 	svccs	0x00696261
    5bac:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    5bb0:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    5bb4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    5bb8:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    5bbc:	2f656d6f 	svccs	0x00656d6f
    5bc0:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    5bc4:	442f6e69 	strtmi	r6, [pc], #-3689	; 5bcc <__exidx_end+0xb24>
    5bc8:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    5bcc:	4f2f706f 	svcmi	0x002f706f
    5bd0:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    5bd4:	502f5445 	eorpl	r5, pc, r5, asr #8
    5bd8:	534f4349 	movtpl	r4, #62281	; 0xf349
    5bdc:	6369502f 	cmnvs	r9, #47	; 0x2f
    5be0:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    5be4:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    5be8:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    5bec:	2f656d6f 	svccs	0x00656d6f
    5bf0:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    5bf4:	442f6e69 	strtmi	r6, [pc], #-3689	; 5bfc <__exidx_end+0xb54>
    5bf8:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    5bfc:	4f2f706f 	svcmi	0x002f706f
    5c00:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    5c04:	502f5445 	eorpl	r5, pc, r5, asr #8
    5c08:	534f4349 	movtpl	r4, #62281	; 0xf349
    5c0c:	6369502f 	cmnvs	r9, #47	; 0x2f
    5c10:	2f00534f 	svccs	0x0000534f
    5c14:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    5c18:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    5c1c:	2f6e6974 	svccs	0x006e6974
    5c20:	6b736544 	blvs	1cdf138 <__ccfg+0x1cbf190>
    5c24:	2f706f74 	svccs	0x00706f74
    5c28:	4f534c4f 	svcmi	0x00534c4f
    5c2c:	2f54454e 	svccs	0x0054454e
    5c30:	4f434950 	svcmi	0x00434950
    5c34:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    5c38:	2f534f63 	svccs	0x00534f63
    5c3c:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    5c40:	4e562f73 	mrcmi	15, 2, r2, cr6, cr3, {3}
    5c44:	00497465 	subeq	r7, r9, r5, ror #8
    5c48:	756c7000 	strbvc	r7, [ip, #-0]!
    5c4c:	756e5f67 	strbvc	r5, [lr, #-3943]!	; 0xfffff099
    5c50:	632e6c6c 			; <UNDEFINED> instruction: 0x632e6c6c
    5c54:	00000063 	andeq	r0, r0, r3, rrx
    5c58:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    5c5c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    5c60:	00010068 	andeq	r0, r1, r8, rrx
    5c64:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    5c68:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
    5c6c:	00010068 	andeq	r0, r1, r8, rrx
    5c70:	63726100 	cmnvs	r2, #0, 2
    5c74:	00682e68 	rsbeq	r2, r8, r8, ror #28
    5c78:	6d000002 	stcvs	0, cr0, [r0, #-8]
    5c7c:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    5c80:	00020068 	andeq	r0, r2, r8, rrx
    5c84:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    5c88:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    5c8c:	00682e73 	rsbeq	r2, r8, r3, ror lr
    5c90:	62000002 	andvs	r0, r0, #2
    5c94:	6f747475 	svcvs	0x00747475
    5c98:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    5c9c:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    5ca0:	00000200 	andeq	r0, r0, r0, lsl #4
    5ca4:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    5ca8:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    5cac:	74000003 	strvc	r0, [r0], #-3
    5cb0:	645f7663 	ldrbvs	r7, [pc], #-1635	; 5cb8 <__exidx_end+0xc10>
    5cb4:	2e736665 	cdpcs	6, 7, cr6, cr3, cr5, {3}
    5cb8:	00040068 	andeq	r0, r4, r8, rrx
    5cbc:	75623c00 	strbvc	r3, [r2, #-3072]!	; 0xfffff400
    5cc0:	2d746c69 	ldclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
    5cc4:	003e6e69 	eorseq	r6, lr, r9, ror #28
    5cc8:	00000000 	andeq	r0, r0, r0
    5ccc:	05002b05 	streq	r2, [r0, #-2821]	; 0xfffff4fb
    5cd0:	00293402 	eoreq	r3, r9, r2, lsl #8
    5cd4:	01360300 	teqeq	r6, r0, lsl #6
    5cd8:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
    5cdc:	050e062b 	streq	r0, [lr, #-1579]	; 0xfffff9d5
    5ce0:	2b052410 	blcs	14ed28 <__ccfg+0x12ed80>
    5ce4:	2410051c 	ldrcs	r0, [r0], #-1308	; 0xfffffae4
    5ce8:	053c0505 	ldreq	r0, [ip, #-1285]!	; 0xfffffafb
    5cec:	02052015 	andeq	r2, r5, #21
    5cf0:	12053f06 	andne	r3, r5, #6, 30
    5cf4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    5cf8:	09053d06 	stmdbeq	r5, {r1, r2, r8, sl, fp, ip, sp}
    5cfc:	01050106 	tsteq	r5, r6, lsl #2
    5d00:	00040221 	andeq	r0, r4, r1, lsr #4
    5d04:	1f050101 	svcne	0x00050101
    5d08:	58020500 	stmdapl	r2, {r8, sl}
    5d0c:	03000029 	movweq	r0, #41	; 0x29
    5d10:	050100c2 	streq	r0, [r1, #-194]	; 0xffffff3e
    5d14:	10051402 	andne	r1, r5, r2, lsl #8
    5d18:	1f050106 	svcne	0x00050106
    5d1c:	2210051e 	andscs	r0, r0, #125829120	; 0x7800000
    5d20:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    5d24:	2a05210a 	bcs	14e154 <__ccfg+0x12e1ac>
    5d28:	2e1e052d 	cfmul64cs	mvdx0, mvdx14, mvdx13
    5d2c:	05201505 	streq	r1, [r0, #-1285]!	; 0xfffffafb
    5d30:	05310602 	ldreq	r0, [r1, #-1538]!	; 0xfffff9fe
    5d34:	0501061e 	streq	r0, [r1, #-1566]	; 0xfffff9e2
    5d38:	1e052209 	cdpne	2, 0, cr2, cr5, cr9, {0}
    5d3c:	200f051e 	andcs	r0, pc, lr, lsl r5	; <UNPREDICTABLE>
    5d40:	22060205 	andcs	r0, r6, #1342177280	; 0x50000000
    5d44:	13060105 	movwne	r0, #24837	; 0x6105
    5d48:	01000302 	tsteq	r0, r2, lsl #6
    5d4c:	00370501 	eorseq	r0, r7, r1, lsl #10
    5d50:	297c0205 	ldmdbcs	ip!, {r0, r2, r9}^
    5d54:	cc030000 	stcgt	0, cr0, [r3], {-0}
    5d58:	02050100 	andeq	r0, r5, #0, 2
    5d5c:	06250514 			; <UNDEFINED> instruction: 0x06250514
    5d60:	2e160501 	cfmul32cs	mvfx0, mvfx6, mvfx1
    5d64:	02210105 	eoreq	r0, r1, #1073741825	; 0x40000001
    5d68:	01010001 	tsteq	r1, r1
    5d6c:	05002505 	streq	r2, [r0, #-1285]	; 0xfffffafb
    5d70:	00298402 	eoreq	r8, r9, r2, lsl #8
    5d74:	00d10300 	sbcseq	r0, r1, r0, lsl #6
    5d78:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    5d7c:	14060105 	strne	r0, [r6], #-261	; 0xfffffefb
    5d80:	01000202 	tsteq	r0, r2, lsl #4
    5d84:	00250501 	eoreq	r0, r5, r1, lsl #10
    5d88:	29880205 	stmibcs	r8, {r0, r2, r9}
    5d8c:	d7030000 	strle	r0, [r3, -r0]
    5d90:	02050100 	andeq	r0, r5, #0, 2
    5d94:	06010514 			; <UNDEFINED> instruction: 0x06010514
    5d98:	00020213 	andeq	r0, r2, r3, lsl r2
    5d9c:	39050101 	stmdbcc	r5, {r0, r8}
    5da0:	8c020500 	cfstr32hi	mvfx0, [r2], {-0}
    5da4:	03000029 	movweq	r0, #41	; 0x29
    5da8:	10050120 	andne	r0, r5, r0, lsr #2
    5dac:	39052606 	stmdbcc	r5, {r1, r2, r9, sl, sp}
    5db0:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
    5db4:	14240602 	strtne	r0, [r4], #-1538	; 0xfffff9fe
    5db8:	01060505 	tsteq	r6, r5, lsl #10
    5dbc:	7a033905 	bvc	d41d8 <__ccfg+0xb4230>
    5dc0:	26050520 	strcs	r0, [r5], -r0, lsr #10
    5dc4:	21060305 	tstcs	r6, r5, lsl #6
    5dc8:	01062005 	tsteq	r6, r5
    5dcc:	053c0d05 	ldreq	r0, [ip, #-3333]!	; 0xfffff2fb
    5dd0:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    5dd4:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    5dd8:	0522060f 	streq	r0, [r2, #-1551]!	; 0xfffff9f1
    5ddc:	12051304 	andne	r1, r5, #4, 6	; 0x10000000
    5de0:	16050106 	strne	r0, [r5], -r6, lsl #2
    5de4:	0f054906 	svceq	0x00054906
    5de8:	13040501 	movwne	r0, #17665	; 0x4501
    5dec:	01061205 	tsteq	r6, r5, lsl #4
    5df0:	1f061605 	svcne	0x00061605
    5df4:	05010f05 	streq	r0, [r1, #-3845]	; 0xfffff0fb
    5df8:	10051702 	andne	r1, r5, r2, lsl #14
    5dfc:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    5e00:	06020520 	streq	r0, [r2], -r0, lsr #10
    5e04:	0612053f 			; <UNDEFINED> instruction: 0x0612053f
    5e08:	06020501 	streq	r0, [r2], -r1, lsl #10
    5e0c:	0609053d 			; <UNDEFINED> instruction: 0x0609053d
    5e10:	1d0a0501 	cfstr32ne	mvfx0, [sl, #-4]
    5e14:	05320105 	ldreq	r0, [r2, #-261]!	; 0xfffffefb
    5e18:	75030604 	strvc	r0, [r3, #-1540]	; 0xfffff9fc
    5e1c:	00090220 	andeq	r0, r9, r0, lsr #4
    5e20:	01a10101 			; <UNDEFINED> instruction: 0x01a10101
    5e24:	00030000 	andeq	r0, r3, r0
    5e28:	00000126 	andeq	r0, r0, r6, lsr #2
    5e2c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    5e30:	0101000d 	tsteq	r1, sp
    5e34:	00000101 	andeq	r0, r0, r1, lsl #2
    5e38:	00000100 	andeq	r0, r0, r0, lsl #2
    5e3c:	6f682f01 	svcvs	0x00682f01
    5e40:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 5c94 <__exidx_end+0xbec>
    5e44:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    5e48:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    5e4c:	6f746b73 	svcvs	0x00746b73
    5e50:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    5e54:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    5e58:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    5e5c:	2f534f43 	svccs	0x00534f43
    5e60:	4f636950 	svcmi	0x00636950
    5e64:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    5e68:	2f736269 	svccs	0x00736269
    5e6c:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    5e70:	2f006c61 	svccs	0x00006c61
    5e74:	2f727375 	svccs	0x00727375
    5e78:	2f62696c 	svccs	0x0062696c
    5e7c:	2f636367 	svccs	0x00636367
    5e80:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5e84:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5e88:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5e8c:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    5e90:	2f312e32 	svccs	0x00312e32
    5e94:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    5e98:	00656475 	rsbeq	r6, r5, r5, ror r4
    5e9c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 5de8 <__exidx_end+0xd40>
    5ea0:	616d2f65 	cmnvs	sp, r5, ror #30
    5ea4:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    5ea8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    5eac:	706f746b 	rsbvc	r7, pc, fp, ror #8
    5eb0:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    5eb4:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    5eb8:	4349502f 	movtmi	r5, #36911	; 0x902f
    5ebc:	502f534f 	eorpl	r5, pc, pc, asr #6
    5ec0:	534f6369 	movtpl	r6, #62313	; 0xf369
    5ec4:	3143432f 	cmpcc	r3, pc, lsr #6
    5ec8:	00585833 	subseq	r5, r8, r3, lsr r8
    5ecc:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 5e18 <__exidx_end+0xd70>
    5ed0:	616d2f65 	cmnvs	sp, r5, ror #30
    5ed4:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    5ed8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    5edc:	706f746b 	rsbvc	r7, pc, fp, ror #8
    5ee0:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    5ee4:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    5ee8:	4349502f 	movtmi	r5, #36911	; 0x902f
    5eec:	502f534f 	eorpl	r5, pc, pc, asr #6
    5ef0:	534f6369 	movtpl	r6, #62313	; 0xf369
    5ef4:	5f5f0000 	svcpl	0x005f0000
    5ef8:	7374756f 	cmnvc	r4, #465567744	; 0x1bc00000
    5efc:	61697265 	cmnvs	r9, r5, ror #4
    5f00:	00632e6c 	rsbeq	r2, r3, ip, ror #28
    5f04:	73000001 	movwvc	r0, #1
    5f08:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    5f0c:	00682e74 	rsbeq	r2, r8, r4, ror lr
    5f10:	61000002 	tstvs	r0, r2
    5f14:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    5f18:	00030068 	andeq	r0, r3, r8, rrx
    5f1c:	63616d00 	cmnvs	r1, #0, 26
    5f20:	00682e68 	rsbeq	r2, r8, r8, ror #28
    5f24:	70000003 	andvc	r0, r0, r3
    5f28:	5f736e69 	svcpl	0x00736e69
    5f2c:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    5f30:	00030068 	andeq	r0, r3, r8, rrx
    5f34:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    5f38:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    5f3c:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    5f40:	0300682e 	movweq	r6, #2094	; 0x82e
    5f44:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    5f48:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    5f4c:	00040068 	andeq	r0, r4, r8, rrx
    5f50:	01050000 	mrseq	r0, (UNDEF: 5)
    5f54:	d4020500 	strle	r0, [r2], #-1280	; 0xfffffb00
    5f58:	03000029 	movweq	r0, #41	; 0x29
    5f5c:	0601011c 			; <UNDEFINED> instruction: 0x0601011c
    5f60:	033c0620 	teqeq	ip, #32, 12	; 0x2000000
    5f64:	05013c26 	streq	r3, [r1, #-3110]	; 0xfffff3da
    5f68:	585f0302 	ldmdapl	pc, {r1, r8, r9}^	; <UNPREDICTABLE>
    5f6c:	01151313 	tsteq	r5, r3, lsl r3
    5f70:	06051301 	streq	r1, [r5], -r1, lsl #6
    5f74:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    5f78:	05053d06 	streq	r3, [r5, #-3334]	; 0xfffff2fa
    5f7c:	03050106 	movweq	r0, #20742	; 0x5106
    5f80:	09052f06 	stmdbeq	r5, {r1, r2, r8, r9, sl, fp, sp}
    5f84:	07050106 	streq	r0, [r5, -r6, lsl #2]
    5f88:	280a053c 	stmdacs	sl, {r2, r3, r4, r5, r8, sl}
    5f8c:	2e060205 	cdpcs	2, 0, cr0, cr6, cr5, {0}
    5f90:	01060a05 	tsteq	r6, r5, lsl #20
    5f94:	83060205 	movwhi	r0, #25093	; 0x6205
    5f98:	01060605 	tsteq	r6, r5, lsl #12
    5f9c:	1f211f21 	svcne	0x00211f21
    5fa0:	21060205 	tstcs	r6, r5, lsl #4
    5fa4:	01060605 	tsteq	r6, r5, lsl #12
    5fa8:	21060205 	tstcs	r6, r5, lsl #4
    5fac:	01060505 	tsteq	r6, r5, lsl #10
    5fb0:	30060305 	andcc	r0, r6, r5, lsl #6
    5fb4:	4a74033d 	bmi	1d06cb0 <__ccfg+0x1ce6d08>
    5fb8:	01060d05 	tsteq	r6, r5, lsl #26
    5fbc:	05201105 	streq	r1, [r0, #-261]!	; 0xfffffefb
    5fc0:	08022007 	stmdaeq	r2, {r0, r1, r2, sp}
    5fc4:	4b010100 	blmi	463cc <__ccfg+0x26424>
    5fc8:	03000002 	movweq	r0, #2
    5fcc:	00012500 	andeq	r2, r1, r0, lsl #10
    5fd0:	fb010200 	blx	467da <__ccfg+0x26832>
    5fd4:	01000d0e 	tsteq	r0, lr, lsl #26
    5fd8:	00010101 	andeq	r0, r1, r1, lsl #2
    5fdc:	00010000 	andeq	r0, r1, r0
    5fe0:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    5fe4:	2f656d6f 	svccs	0x00656d6f
    5fe8:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    5fec:	442f6e69 	strtmi	r6, [pc], #-3689	; 5ff4 <__exidx_end+0xf4c>
    5ff0:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    5ff4:	4f2f706f 	svcmi	0x002f706f
    5ff8:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    5ffc:	502f5445 	eorpl	r5, pc, r5, asr #8
    6000:	534f4349 	movtpl	r4, #62281	; 0xf349
    6004:	6369502f 	cmnvs	r9, #47	; 0x2f
    6008:	502f534f 	eorpl	r5, pc, pc, asr #6
    600c:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    6010:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
    6014:	006c6169 	rsbeq	r6, ip, r9, ror #2
    6018:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    601c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    6020:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    6024:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    6028:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    602c:	61652d65 	cmnvs	r5, r5, ror #26
    6030:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    6034:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    6038:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    603c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    6040:	6f682f00 	svcvs	0x00682f00
    6044:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 5e98 <__exidx_end+0xdf0>
    6048:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    604c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    6050:	6f746b73 	svcvs	0x00746b73
    6054:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    6058:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    605c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    6060:	2f534f43 	svccs	0x00534f43
    6064:	4f636950 	svcmi	0x00636950
    6068:	43432f53 	movtmi	r2, #16211	; 0x3f53
    606c:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    6070:	6f682f00 	svcvs	0x00682f00
    6074:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 5ec8 <__exidx_end+0xe20>
    6078:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    607c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    6080:	6f746b73 	svcvs	0x00746b73
    6084:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    6088:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    608c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    6090:	2f534f43 	svccs	0x00534f43
    6094:	4f636950 	svcmi	0x00636950
    6098:	5f000053 	svcpl	0x00000053
    609c:	736e695f 	cmnvc	lr, #1556480	; 0x17c000
    60a0:	61697265 	cmnvs	r9, r5, ror #4
    60a4:	00632e6c 	rsbeq	r2, r3, ip, ror #28
    60a8:	73000001 	movwvc	r0, #1
    60ac:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    60b0:	00682e74 	rsbeq	r2, r8, r4, ror lr
    60b4:	61000002 	tstvs	r0, r2
    60b8:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    60bc:	00030068 	andeq	r0, r3, r8, rrx
    60c0:	63616d00 	cmnvs	r1, #0, 26
    60c4:	00682e68 	rsbeq	r2, r8, r8, ror #28
    60c8:	70000003 	andvc	r0, r0, r3
    60cc:	5f736e69 	svcpl	0x00736e69
    60d0:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    60d4:	00030068 	andeq	r0, r3, r8, rrx
    60d8:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    60dc:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    60e0:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    60e4:	0300682e 	movweq	r6, #2094	; 0x82e
    60e8:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    60ec:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    60f0:	00040068 	andeq	r0, r4, r8, rrx
    60f4:	01050000 	mrseq	r0, (UNDEF: 5)
    60f8:	44020500 	strmi	r0, [r2], #-1280	; 0xfffffb00
    60fc:	0300002a 	movweq	r0, #42	; 0x2a
    6100:	06010122 	streq	r0, [r1], -r2, lsr #2
    6104:	053c0620 	ldreq	r0, [ip, #-1568]!	; 0xfffff9e0
    6108:	13136b02 	tstne	r3, #2048	; 0x800
    610c:	06100516 			; <UNDEFINED> instruction: 0x06100516
    6110:	20050501 	andcs	r0, r5, r1, lsl #10
    6114:	30060305 	andcc	r0, r6, r5, lsl #6
    6118:	053f0205 	ldreq	r0, [pc, #-517]!	; 5f1b <__exidx_end+0xe73>
    611c:	0501061d 	streq	r0, [r1, #-1565]	; 0xfffff9e3
    6120:	1d053c0b 	stcne	12, cr3, [r5, #-44]	; 0xffffffd4
    6124:	200b0520 	andcs	r0, fp, r0, lsr #10
    6128:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    612c:	2f240603 	svccs	0x00240603
    6130:	05300205 	ldreq	r0, [r0, #-517]!	; 0xfffffdfb
    6134:	05130606 	ldreq	r0, [r3, #-1542]	; 0xfffff9fa
    6138:	2f061f02 	svccs	0x00061f02
    613c:	01060605 	tsteq	r6, r5, lsl #12
    6140:	30060205 	andcc	r0, r6, r5, lsl #4
    6144:	83160101 	tsthi	r6, #1073741824	; 0x40000000
    6148:	01060505 	tsteq	r6, r5, lsl #10
    614c:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
    6150:	01060605 	tsteq	r6, r5, lsl #12
    6154:	2f060405 	svccs	0x00060405
    6158:	01060705 	tsteq	r6, r5, lsl #14
    615c:	05210405 	streq	r0, [r1, #-1029]!	; 0xfffffbfb
    6160:	04051f07 	streq	r1, [r5], #-3847	; 0xfffff0f9
    6164:	03052106 	movweq	r2, #20742	; 0x5106
    6168:	06070531 			; <UNDEFINED> instruction: 0x06070531
    616c:	20060501 	andcs	r0, r6, r1, lsl #10
    6170:	3e060405 	cdpcc	4, 0, cr0, cr6, cr5, {0}
    6174:	053e0205 	ldreq	r0, [lr, #-517]!	; 0xfffffdfb
    6178:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    617c:	13052e05 	movwne	r2, #24069	; 0x5e05
    6180:	0603052e 	streq	r0, [r3], -lr, lsr #10
    6184:	0608052f 	streq	r0, [r8], -pc, lsr #10
    6188:	06030501 	streq	r0, [r3], -r1, lsl #10
    618c:	060d052f 	streq	r0, [sp], -pc, lsr #10
    6190:	06030501 	streq	r0, [r3], -r1, lsl #10
    6194:	3102052f 	tstcc	r2, pc, lsr #10
    6198:	01060605 	tsteq	r6, r5, lsl #12
    619c:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    61a0:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    61a4:	21010606 	tstcs	r1, r6, lsl #12
    61a8:	0603051f 			; <UNDEFINED> instruction: 0x0603051f
    61ac:	0606052f 	streq	r0, [r6], -pc, lsr #10
    61b0:	06020501 	streq	r0, [r2], -r1, lsl #10
    61b4:	05914023 	ldreq	r4, [r1, #35]	; 0x23
    61b8:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    61bc:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    61c0:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    61c4:	07053c11 	smladeq	r5, r1, ip, r3
    61c8:	06020521 	streq	r0, [r2], -r1, lsr #10
    61cc:	0605054b 	streq	r0, [r5], -fp, asr #10
    61d0:	06020501 	streq	r0, [r2], -r1, lsl #10
    61d4:	060a0524 	streq	r0, [sl], -r4, lsr #10
    61d8:	9f060501 	svcls	0x00060501
    61dc:	051f0a05 	ldreq	r0, [pc, #-2565]	; 57df <__exidx_end+0x737>
    61e0:	05210602 	streq	r0, [r1, #-1538]!	; 0xfffff9fe
    61e4:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    61e8:	052f0602 	streq	r0, [pc, #-1538]!	; 5bee <__exidx_end+0xb46>
    61ec:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    61f0:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    61f4:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    61f8:	052f0603 	streq	r0, [pc, #-1539]!	; 5bfd <__exidx_end+0xb55>
    61fc:	06053002 	streq	r3, [r5], -r2
    6200:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    6204:	01053d06 	tsteq	r5, r6, lsl #26
    6208:	02052206 	andeq	r2, r5, #1610612736	; 0x60000000
    620c:	0601053a 			; <UNDEFINED> instruction: 0x0601053a
    6210:	000d0230 	andeq	r0, sp, r0, lsr r2
    6214:	03bd0101 			; <UNDEFINED> instruction: 0x03bd0101
    6218:	00030000 	andeq	r0, r3, r0
    621c:	0000013a 	andeq	r0, r0, sl, lsr r1
    6220:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    6224:	0101000d 	tsteq	r1, sp
    6228:	00000101 	andeq	r0, r0, r1, lsl #2
    622c:	00000100 	andeq	r0, r0, r0, lsl #2
    6230:	6f682f01 	svcvs	0x00682f01
    6234:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 6088 <__exidx_end+0xfe0>
    6238:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    623c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    6240:	6f746b73 	svcvs	0x00746b73
    6244:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    6248:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    624c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    6250:	2f534f43 	svccs	0x00534f43
    6254:	4f636950 	svcmi	0x00636950
    6258:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    625c:	2f736269 	svccs	0x00736269
    6260:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    6264:	2f006c61 	svccs	0x00006c61
    6268:	2f727375 	svccs	0x00727375
    626c:	2f62696c 	svccs	0x0062696c
    6270:	2f636367 	svccs	0x00636367
    6274:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    6278:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    627c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6280:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    6284:	2f312e32 	svccs	0x00312e32
    6288:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    628c:	00656475 	rsbeq	r6, r5, r5, ror r4
    6290:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 61dc <__exidx_end+0x1134>
    6294:	616d2f65 	cmnvs	sp, r5, ror #30
    6298:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    629c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    62a0:	706f746b 	rsbvc	r7, pc, fp, ror #8
    62a4:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    62a8:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    62ac:	4349502f 	movtmi	r5, #36911	; 0x902f
    62b0:	502f534f 	eorpl	r5, pc, pc, asr #6
    62b4:	534f6369 	movtpl	r6, #62313	; 0xf369
    62b8:	3143432f 	cmpcc	r3, pc, lsr #6
    62bc:	00585833 	subseq	r5, r8, r3, lsr r8
    62c0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 620c <__exidx_end+0x1164>
    62c4:	616d2f65 	cmnvs	sp, r5, ror #30
    62c8:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    62cc:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    62d0:	706f746b 	rsbvc	r7, pc, fp, ror #8
    62d4:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    62d8:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    62dc:	4349502f 	movtmi	r5, #36911	; 0x902f
    62e0:	502f534f 	eorpl	r5, pc, pc, asr #6
    62e4:	534f6369 	movtpl	r6, #62313	; 0xf369
    62e8:	66760000 	ldrbtvs	r0, [r6], -r0
    62ec:	2e6d726f 	cdpcs	2, 6, cr7, cr13, cr15, {3}
    62f0:	00010063 	andeq	r0, r1, r3, rrx
    62f4:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    62f8:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    62fc:	00020068 	andeq	r0, r2, r8, rrx
    6300:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    6304:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
    6308:	00020068 	andeq	r0, r2, r8, rrx
    630c:	63726100 	cmnvs	r2, #0, 2
    6310:	00682e68 	rsbeq	r2, r8, r8, ror #28
    6314:	6d000003 	stcvs	0, cr0, [r0, #-12]
    6318:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    631c:	00030068 	andeq	r0, r3, r8, rrx
    6320:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    6324:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    6328:	00682e73 	rsbeq	r2, r8, r3, ror lr
    632c:	62000003 	andvs	r0, r0, #3
    6330:	6f747475 	svcvs	0x00747475
    6334:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    6338:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    633c:	00000300 	andeq	r0, r0, r0, lsl #6
    6340:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    6344:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    6348:	3c000004 	stccc	0, cr0, [r0], {4}
    634c:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    6350:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
    6354:	0000003e 	andeq	r0, r0, lr, lsr r0
    6358:	15050000 	strne	r0, [r5, #-0]
    635c:	60020500 	andvs	r0, r2, r0, lsl #10
    6360:	0300002b 	movweq	r0, #43	; 0x2b
    6364:	0305010c 	movweq	r0, #20748	; 0x510c
    6368:	06060513 			; <UNDEFINED> instruction: 0x06060513
    636c:	580b0501 	stmdapl	fp, {r0, r8, sl}
    6370:	3e060405 	cdpcc	4, 0, cr0, cr6, cr5, {0}
    6374:	01060e05 	tsteq	r6, r5, lsl #28
    6378:	30060305 	andcc	r0, r6, r5, lsl #6
    637c:	01060405 	tsteq	r6, r5, lsl #8
    6380:	02590205 	subseq	r0, r9, #1342177280	; 0x50000000
    6384:	01010001 	tsteq	r1, r1
    6388:	05004305 	streq	r4, [r0, #-773]	; 0xfffffcfb
    638c:	002b8002 	eoreq	r8, fp, r2
    6390:	2e061900 	vmlacs.f16	s2, s12, s0	; <UNPREDICTABLE>
    6394:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    6398:	2e1d0304 	cdpcs	3, 1, cr0, cr13, cr4, {0}
    639c:	28030505 	stmdacs	r3, {r0, r2, r8, sl}
    63a0:	03070520 	movweq	r0, #29984	; 0x7520
    63a4:	06052071 			; <UNDEFINED> instruction: 0x06052071
    63a8:	05204a03 	streq	r4, [r0, #-2563]!	; 0xfffff5fd
    63ac:	133e0602 	teqne	lr, #2097152	; 0x200000
    63b0:	18030514 	stmdane	r3, {r2, r4, r8, sl}
    63b4:	12030205 	andne	r0, r3, #1342177280	; 0x50000000
    63b8:	06040501 	streq	r0, [r4], -r1, lsl #10
    63bc:	06020501 	streq	r0, [r2], -r1, lsl #10
    63c0:	14030530 	strne	r0, [r3], #-1328	; 0xfffffad0
    63c4:	01060505 	tsteq	r6, r5, lsl #10
    63c8:	30060305 	andcc	r0, r6, r5, lsl #6
    63cc:	01060605 	tsteq	r6, r5, lsl #12
    63d0:	3e060405 	cdpcc	4, 0, cr0, cr6, cr5, {0}
    63d4:	01060b05 	tsteq	r6, r5, lsl #22
    63d8:	052e1005 	streq	r1, [lr, #-5]!
    63dc:	07052105 	streq	r2, [r5, -r5, lsl #2]
    63e0:	0605052d 	streq	r0, [r5], -sp, lsr #10
    63e4:	04053d3d 	streq	r3, [r5], #-3389	; 0xfffff2c3
    63e8:	0100da03 	tsteq	r0, r3, lsl #20
    63ec:	06070559 			; <UNDEFINED> instruction: 0x06070559
    63f0:	06040501 	streq	r0, [r4], -r1, lsl #10
    63f4:	4a7fa703 	bmi	1ff0008 <__ccfg+0x1fd0060>
    63f8:	03060505 	movweq	r0, #25861	; 0x6505
    63fc:	062000c2 	strteq	r0, [r0], -r2, asr #1
    6400:	0612052f 	ldreq	r0, [r2], -pc, lsr #10
    6404:	06030510 			; <UNDEFINED> instruction: 0x06030510
    6408:	052e4303 	streq	r4, [lr, #-771]!	; 0xfffffcfd
    640c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    6410:	054c0604 	strbeq	r0, [ip, #-1540]	; 0xfffff9fc
    6414:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    6418:	04052e0b 	streq	r2, [r5], #-3595	; 0xfffff1f5
    641c:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
    6420:	e400c903 	str	ip, [r0], #-2307	; 0xfffff6fd
    6424:	08055959 	stmdaeq	r5, {r0, r3, r4, r6, r8, fp, ip, lr}
    6428:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    642c:	3c090306 	stccc	3, cr0, [r9], {6}
    6430:	01060c05 	tsteq	r6, r5, lsl #24
    6434:	05310105 	ldreq	r0, [r1, #-261]!	; 0xfffffefb
    6438:	7fa90304 	svcvc	0x00a90304
    643c:	0605053c 			; <UNDEFINED> instruction: 0x0605053c
    6440:	010f0568 	tsteq	pc, r8, ror #10
    6444:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
    6448:	0513060c 	ldreq	r0, [r3, #-1548]	; 0xfffff9f4
    644c:	05052d12 	streq	r2, [r5, #-3346]	; 0xfffff2ee
    6450:	0e052f06 	cdpeq	15, 0, cr2, cr5, cr6, {0}
    6454:	06051406 	streq	r1, [r5], -r6, lsl #8
    6458:	0e052d06 	cdpeq	13, 0, cr2, cr5, cr6, {0}
    645c:	14051306 	strne	r1, [r5], #-774	; 0xfffffcfa
    6460:	2d06052e 	cfstr32cs	mvfx0, [r6, #-184]	; 0xffffff48
    6464:	09055a06 	stmdbeq	r5, {r1, r2, r9, fp, ip, lr}
    6468:	14050106 	strne	r0, [r5], #-262	; 0xfffffefa
    646c:	16053906 	strne	r3, [r5], -r6, lsl #18
    6470:	12050106 	andne	r0, r5, #-2147483647	; 0x80000001
    6474:	06052e06 	streq	r2, [r5], -r6, lsl #28
    6478:	05051306 	streq	r1, [r5, #-774]	; 0xfffffcfa
    647c:	20090306 	andcs	r0, r9, r6, lsl #6
    6480:	06120513 			; <UNDEFINED> instruction: 0x06120513
    6484:	2f080501 	svccs	0x00080501
    6488:	052d0905 	streq	r0, [sp, #-2309]!	; 0xfffff6fb
    648c:	052f0605 	streq	r0, [pc, #-1541]!	; 5e8f <__exidx_end+0xde7>
    6490:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    6494:	06052012 			; <UNDEFINED> instruction: 0x06052012
    6498:	05593006 	ldrbeq	r3, [r9, #-6]
    649c:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    64a0:	054c0605 	strbeq	r0, [ip, #-1541]	; 0xfffff9fb
    64a4:	6f03060c 	svcvs	0x0003060c
    64a8:	03050501 	movweq	r0, #21761	; 0x5501
    64ac:	2e062011 	mcrcs	0, 0, r2, cr6, cr1, {0}
    64b0:	3c062e01 	stccc	14, cr2, [r6], {1}
    64b4:	74014a06 	strvc	r4, [r1], #-2566	; 0xfffff5fa
    64b8:	4a202082 	bmi	80e6c8 <__ccfg+0x7ee720>
    64bc:	05252e20 	streq	r2, [r5, #-3616]!	; 0xfffff1e0
    64c0:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    64c4:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    64c8:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    64cc:	06052e12 			; <UNDEFINED> instruction: 0x06052e12
    64d0:	05133006 	ldreq	r3, [r3, #-6]
    64d4:	05140609 	ldreq	r0, [r4, #-1545]	; 0xfffff9f7
    64d8:	08051f0a 	stmdaeq	r5, {r1, r3, r8, r9, sl, fp, ip}
    64dc:	0606052d 	streq	r0, [r6], -sp, lsr #10
    64e0:	0905132f 	stmdbeq	r5, {r0, r1, r2, r3, r5, r8, r9, ip}
    64e4:	13050106 	movwne	r0, #20742	; 0x5106
    64e8:	06070520 	streq	r0, [r7], -r0, lsr #10
    64ec:	0b05593f 	bleq	15c9f0 <__ccfg+0x13ca48>
    64f0:	06050106 	streq	r0, [r5], -r6, lsl #2
    64f4:	05053006 	streq	r3, [r5, #-6]
    64f8:	016f0306 	cmneq	pc, r6, lsl #6
    64fc:	11030605 	tstne	r3, r5, lsl #12
    6500:	012e0620 			; <UNDEFINED> instruction: 0x012e0620
    6504:	063c062e 	ldrteq	r0, [ip], -lr, lsr #12
    6508:	6666014a 	strbtvs	r0, [r6], -sl, asr #2
    650c:	20582e01 	subscs	r2, r8, r1, lsl #28
    6510:	210c052e 	tstcs	ip, lr, lsr #10
    6514:	01060f05 	tsteq	r6, r5, lsl #30
    6518:	2f060605 	svccs	0x00060605
    651c:	0d051313 	stceq	3, cr1, [r5, #-76]	; 0xffffffb4
    6520:	0a051406 	beq	14b540 <__ccfg+0x12b598>
    6524:	2d08052d 	cfstr32cs	mvfx0, [r8, #-180]	; 0xffffff4c
    6528:	21060605 	tstcs	r6, r5, lsl #12
    652c:	05140705 	ldreq	r0, [r4, #-1797]	; 0xfffff8fb
    6530:	0513060f 	ldreq	r0, [r3, #-1551]	; 0xfffff9f1
    6534:	07052e15 	smladeq	r5, r5, lr, r2
    6538:	055a062d 	ldrbeq	r0, [sl, #-1581]	; 0xfffff9d3
    653c:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    6540:	05470615 	strbeq	r0, [r7, #-1557]	; 0xfffff9eb
    6544:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
    6548:	052e0613 	streq	r0, [lr, #-1555]!	; 0xfffff9ed
    654c:	05130607 	ldreq	r0, [r3, #-1543]	; 0xfffff9f9
    6550:	59260606 	stmdbpl	r6!, {r1, r2, r9, sl}
    6554:	134f0505 	movtne	r0, #62725	; 0xf505
    6558:	06090513 			; <UNDEFINED> instruction: 0x06090513
    655c:	2f050511 	svccs	0x00050511
    6560:	13134f06 	tstne	r3, #6, 30
    6564:	054a0b05 	strbeq	r0, [sl, #-2821]	; 0xfffff4fb
    6568:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    656c:	06052e0b 	streq	r2, [r5], -fp, lsl #28
    6570:	054b3d06 	strbeq	r3, [fp, #-3334]	; 0xfffff2fa
    6574:	ad03060a 	stcge	6, cr0, [r3, #-40]	; 0xffffffd8
    6578:	0702207f 	smlsdxeq	r2, pc, r0, r2	; <UNPREDICTABLE>
    657c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    6580:	02050035 	andeq	r0, r5, #53	; 0x35
    6584:	00002db0 			; <UNDEFINED> instruction: 0x00002db0
    6588:	01019003 	tsteq	r1, r3
    658c:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    6590:	0e063505 	cfsh32eq	mvfx3, mvfx6, #5
    6594:	3205052e 	andcc	r0, r5, #192937984	; 0xb800000
    6598:	30060305 	andcc	r0, r6, r5, lsl #6
    659c:	06010567 	streq	r0, [r1], -r7, ror #10
    65a0:	05011203 	streq	r1, [r1, #-515]	; 0xfffffdfd
    65a4:	72030602 	andvc	r0, r3, #2097152	; 0x200000
    65a8:	0608053c 			; <UNDEFINED> instruction: 0x0608053c
    65ac:	3c060501 	cfstr32cc	mvfx0, [r6], {1}
    65b0:	3f060205 	svccc	0x00060205
    65b4:	01061505 	tsteq	r6, r5, lsl #10
    65b8:	053c0505 	ldreq	r0, [ip, #-1285]!	; 0xfffffafb
    65bc:	05400602 	strbeq	r0, [r0, #-1538]	; 0xfffff9fe
    65c0:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    65c4:	0b055805 	bleq	15c5e0 <__ccfg+0x13c638>
    65c8:	20050520 	andcs	r0, r5, r0, lsr #10
    65cc:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
    65d0:	0202133d 	andeq	r1, r2, #-201326592	; 0xf4000000
    65d4:	c6010100 	strgt	r0, [r1], -r0, lsl #2
    65d8:	03000002 	movweq	r0, #2
    65dc:	00013a00 	andeq	r3, r1, r0, lsl #20
    65e0:	fb010200 	blx	46dea <__ccfg+0x26e42>
    65e4:	01000d0e 	tsteq	r0, lr, lsl #26
    65e8:	00010101 	andeq	r0, r1, r1, lsl #2
    65ec:	00010000 	andeq	r0, r1, r0
    65f0:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    65f4:	2f656d6f 	svccs	0x00656d6f
    65f8:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    65fc:	442f6e69 	strtmi	r6, [pc], #-3689	; 6604 <__exidx_end+0x155c>
    6600:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    6604:	4f2f706f 	svcmi	0x002f706f
    6608:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    660c:	502f5445 	eorpl	r5, pc, r5, asr #8
    6610:	534f4349 	movtpl	r4, #62281	; 0xf349
    6614:	6369502f 	cmnvs	r9, #47	; 0x2f
    6618:	502f534f 	eorpl	r5, pc, pc, asr #6
    661c:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    6620:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
    6624:	006c6169 	rsbeq	r6, ip, r9, ror #2
    6628:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    662c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    6630:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    6634:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    6638:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    663c:	61652d65 	cmnvs	r5, r5, ror #26
    6640:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    6644:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    6648:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    664c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    6650:	6f682f00 	svcvs	0x00682f00
    6654:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 64a8 <__exidx_end+0x1400>
    6658:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    665c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    6660:	6f746b73 	svcvs	0x00746b73
    6664:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    6668:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    666c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    6670:	2f534f43 	svccs	0x00534f43
    6674:	4f636950 	svcmi	0x00636950
    6678:	43432f53 	movtmi	r2, #16211	; 0x3f53
    667c:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    6680:	6f682f00 	svcvs	0x00682f00
    6684:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 64d8 <__exidx_end+0x1430>
    6688:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    668c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    6690:	6f746b73 	svcvs	0x00746b73
    6694:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    6698:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    669c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    66a0:	2f534f43 	svccs	0x00534f43
    66a4:	4f636950 	svcmi	0x00636950
    66a8:	76000053 			; <UNDEFINED> instruction: 0x76000053
    66ac:	6e616373 	mcrvs	3, 3, r6, cr1, cr3, {3}
    66b0:	0100632e 	tsteq	r0, lr, lsr #6
    66b4:	74730000 	ldrbtvc	r0, [r3], #-0
    66b8:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    66bc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    66c0:	74730000 	ldrbtvc	r0, [r3], #-0
    66c4:	67726164 	ldrbvs	r6, [r2, -r4, ror #2]!
    66c8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    66cc:	72610000 	rsbvc	r0, r1, #0
    66d0:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    66d4:	00000300 	andeq	r0, r0, r0, lsl #6
    66d8:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    66dc:	0300682e 	movweq	r6, #2094	; 0x82e
    66e0:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    66e4:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    66e8:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    66ec:	00000300 	andeq	r0, r0, r0, lsl #6
    66f0:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    66f4:	5f736e6f 	svcpl	0x00736e6f
    66f8:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    66fc:	00030068 	andeq	r0, r3, r8, rrx
    6700:	73797300 	cmnvc	r9, #0, 6
    6704:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    6708:	00000400 	andeq	r0, r0, r0, lsl #8
    670c:	6975623c 	ldmdbvs	r5!, {r2, r3, r4, r5, r9, sp, lr}^
    6710:	692d746c 	pushvs	{r2, r3, r5, r6, sl, ip, sp, lr}
    6714:	00003e6e 	andeq	r3, r0, lr, ror #28
    6718:	05000000 	streq	r0, [r0, #-0]
    671c:	0205003a 	andeq	r0, r5, #58	; 0x3a
    6720:	00002e00 	andeq	r2, r0, r0, lsl #28
    6724:	14020519 	strne	r0, [r2], #-1305	; 0xfffffae7
    6728:	05013a03 	streq	r3, [r1, #-2563]	; 0xfffff5fd
    672c:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    6730:	2044033a 	subcs	r0, r4, sl, lsr r3
    6734:	3c030505 	cfstr32cc	mvfx0, [r3], {5}
    6738:	3c12052e 	cfldr32cc	mvfx0, [r2], {46}	; 0x2e
    673c:	05400505 	strbeq	r0, [r0, #-1285]	; 0xfffffafb
    6740:	200e0316 	andcs	r0, lr, r6, lsl r3
    6744:	11030b05 	tstne	r3, r5, lsl #22
    6748:	0608052e 	streq	r0, [r8], -lr, lsr #10
    674c:	053c6203 	ldreq	r6, [ip, #-515]!	; 0xfffffdfd
    6750:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    6754:	03052e08 	movweq	r2, #24072	; 0x5e08
    6758:	06052106 	streq	r2, [r5], -r6, lsl #2
    675c:	03050106 	movweq	r0, #20742	; 0x5106
    6760:	0b053006 	bleq	152780 <__ccfg+0x1327d8>
    6764:	0f050106 	svceq	0x00050106
    6768:	20030520 	andcs	r0, r3, r0, lsr #10
    676c:	2e030105 	adfcss	f0, f3, f5
    6770:	030305ac 	movweq	r0, #13740	; 0x35ac
    6774:	0b053c52 	bleq	1558c4 <__ccfg+0x13591c>
    6778:	05741b03 	ldrbeq	r1, [r4, #-2819]!	; 0xfffff4fd
    677c:	052e060a 	streq	r0, [lr, #-1546]!	; 0xfffff9f6
    6780:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    6784:	05ad0604 	streq	r0, [sp, #1540]!	; 0x604
    6788:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    678c:	05300604 	ldreq	r0, [r0, #-1540]!	; 0xfffff9fc
    6790:	05150607 	ldreq	r0, [r5, #-1543]	; 0xfffff9f9
    6794:	06051e08 	streq	r1, [r5], -r8, lsl #28
    6798:	0604052d 	streq	r0, [r4], -sp, lsr #10
    679c:	0705142f 	streq	r1, [r5, -pc, lsr #8]
    67a0:	0b050106 	bleq	146bc0 <__ccfg+0x126c18>
    67a4:	0d052f06 	stceq	15, cr2, [r5, #-24]	; 0xffffffe8
    67a8:	0c050106 	stfeqs	f0, [r5], {6}
    67ac:	2e1c0566 	cfmsc32cs	mvfx0, mvfx12, mvfx6
    67b0:	052e2b05 	streq	r2, [lr, #-2821]!	; 0xfffff4fb
    67b4:	0a054e0b 	beq	159fe8 <__ccfg+0x13a040>
    67b8:	0b053c06 	bleq	1557d8 <__ccfg+0x135830>
    67bc:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    67c0:	18058306 	stmdane	r5, {r1, r2, r8, r9, pc}
    67c4:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    67c8:	09054b06 	stmdbeq	r5, {r1, r2, r8, r9, fp, lr}
    67cc:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    67d0:	11052f06 	tstne	r5, r6, lsl #30
    67d4:	3c205903 			; <UNDEFINED> instruction: 0x3c205903
    67d8:	062e6606 	strteq	r6, [lr], -r6, lsl #12
    67dc:	3c062e2e 	stccc	14, cr2, [r6], {46}	; 0x2e
    67e0:	013c6606 	teqeq	ip, r6, lsl #12
    67e4:	06010620 	streq	r0, [r1], -r0, lsr #12
    67e8:	063c743c 			; <UNDEFINED> instruction: 0x063c743c
    67ec:	743c064a 	ldrtvc	r0, [ip], #-1610	; 0xfffff9b6
    67f0:	3c902e21 	ldccc	14, cr2, [r0], {33}	; 0x21
    67f4:	01062e01 	tsteq	r6, r1, lsl #28
    67f8:	90822e06 	addls	r2, r2, r6, lsl #28
    67fc:	90064a21 	andls	r4, r6, r1, lsr #20
    6800:	013c5806 	teqeq	ip, r6, lsl #16
    6804:	2e06012e 	adfcssp	f0, f6, #0.5
    6808:	82063c06 	andhi	r3, r6, #1536	; 0x600
    680c:	3c3c0666 	ldccc	6, cr0, [ip], #-408	; 0xfffffe68
    6810:	04053c3c 	streq	r3, [r5], #-3132	; 0xfffff3c4
    6814:	060c0577 			; <UNDEFINED> instruction: 0x060c0577
    6818:	20100501 	andscs	r0, r0, r1, lsl #10
    681c:	ae061605 	cfmadd32ge	mvax0, mvfx1, mvfx6, mvfx5
    6820:	062e6606 	strteq	r6, [lr], -r6, lsl #12
    6824:	3c062e2e 	stccc	14, cr2, [r6], {46}	; 0x2e
    6828:	013c3c06 	teqeq	ip, r6, lsl #24
    682c:	0601062e 	streq	r0, [r1], -lr, lsr #12
    6830:	923c823c 	eorsls	r8, ip, #60, 4	; 0xc0000003
    6834:	58069006 	stmdapl	r6, {r1, r2, ip, pc}
    6838:	012e013c 			; <UNDEFINED> instruction: 0x012e013c
    683c:	3c062e06 	stccc	14, cr2, [r6], {6}
    6840:	06667406 	strbteq	r7, [r6], -r6, lsl #8
    6844:	3c3c3c3c 	ldccc	12, cr3, [ip], #-240	; 0xffffff10
    6848:	063c0672 			; <UNDEFINED> instruction: 0x063c0672
    684c:	3c21742e 	cfstrscc	mvf7, [r1], #-184	; 0xffffff48
    6850:	2e013c90 	mcrcs	12, 0, r3, cr1, cr0, {4}
    6854:	2e060106 	adfcss	f0, f6, f6
    6858:	05217490 	streq	r7, [r1, #-1168]!	; 0xfffffb70
    685c:	05144f04 	ldreq	r4, [r4, #-3844]	; 0xfffff0fc
    6860:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    6864:	04052e07 	streq	r2, [r5], #-3591	; 0xfffff1f9
    6868:	08053e06 	stmdaeq	r5, {r1, r2, r9, sl, fp, ip, sp}
    686c:	06051306 	streq	r1, [r5], -r6, lsl #6
    6870:	0604052d 	streq	r0, [r4], -sp, lsr #10
    6874:	09051321 	stmdbeq	r5, {r0, r5, r8, r9, ip}
    6878:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    687c:	0b052106 	bleq	14ec9c <__ccfg+0x12ecf4>
    6880:	07052406 	streq	r2, [r5, -r6, lsl #8]
    6884:	74090306 	strvc	r0, [r9], #-774	; 0xfffffcfa
    6888:	01060e05 	tsteq	r6, r5, lsl #28
    688c:	053e0b05 	ldreq	r0, [lr, #-2821]!	; 0xfffff4fb
    6890:	6654030a 	ldrbvs	r0, [r4], -sl, lsl #6
    6894:	0a031105 	beq	cacb0 <__ccfg+0xaad08>
    6898:	5116054a 	tstpl	r6, sl, asr #10
    689c:	01000502 	tsteq	r0, r2, lsl #10
    68a0:	00028901 	andeq	r8, r2, r1, lsl #18
    68a4:	83000300 	movwhi	r0, #768	; 0x300
    68a8:	02000002 	andeq	r0, r0, #2
    68ac:	0d0efb01 	vstreq	d15, [lr, #-4]
    68b0:	01010100 	mrseq	r0, (UNDEF: 17)
    68b4:	00000001 	andeq	r0, r0, r1
    68b8:	01000001 	tsteq	r0, r1
    68bc:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    68c0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    68c4:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    68c8:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    68cc:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    68d0:	61652d65 	cmnvs	r5, r5, ror #26
    68d4:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    68d8:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    68dc:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    68e0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    68e4:	73752f00 	cmnvc	r5, #0, 30
    68e8:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    68ec:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    68f0:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
    68f4:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    68f8:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    68fc:	6f682f00 	svcvs	0x00682f00
    6900:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 6754 <__exidx_end+0x16ac>
    6904:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    6908:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    690c:	6f746b73 	svcvs	0x00746b73
    6910:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    6914:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    6918:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    691c:	2f534f43 	svccs	0x00534f43
    6920:	4f636950 	svcmi	0x00636950
    6924:	43432f53 	movtmi	r2, #16211	; 0x3f53
    6928:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    692c:	3143432f 	cmpcc	r3, pc, lsr #6
    6930:	57585833 	smmlarpl	r8, r3, r8, r5
    6934:	2f455241 	svccs	0x00455241
    6938:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    693c:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    6940:	682f0062 	stmdavs	pc!, {r1, r5, r6}	; <UNPREDICTABLE>
    6944:	2f656d6f 	svccs	0x00656d6f
    6948:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    694c:	442f6e69 	strtmi	r6, [pc], #-3689	; 6954 <__exidx_end+0x18ac>
    6950:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    6954:	4f2f706f 	svcmi	0x002f706f
    6958:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    695c:	502f5445 	eorpl	r5, pc, r5, asr #8
    6960:	534f4349 	movtpl	r4, #62281	; 0xf349
    6964:	6369502f 	cmnvs	r9, #47	; 0x2f
    6968:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    696c:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    6970:	43432f58 	movtmi	r2, #16216	; 0x3f58
    6974:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    6978:	45524157 	ldrbmi	r4, [r2, #-343]	; 0xfffffea9
    697c:	5f66722f 	svcpl	0x0066722f
    6980:	63746170 	cmnvs	r4, #112, 2
    6984:	00736568 	rsbseq	r6, r3, r8, ror #10
    6988:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 68d4 <__exidx_end+0x182c>
    698c:	616d2f65 	cmnvs	sp, r5, ror #30
    6990:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    6994:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    6998:	706f746b 	rsbvc	r7, pc, fp, ror #8
    699c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    69a0:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    69a4:	4349502f 	movtmi	r5, #36911	; 0x902f
    69a8:	502f534f 	eorpl	r5, pc, pc, asr #6
    69ac:	534f6369 	movtpl	r6, #62313	; 0xf369
    69b0:	3143432f 	cmpcc	r3, pc, lsr #6
    69b4:	00585833 	subseq	r5, r8, r3, lsr r8
    69b8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 6904 <__exidx_end+0x185c>
    69bc:	616d2f65 	cmnvs	sp, r5, ror #30
    69c0:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    69c4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    69c8:	706f746b 	rsbvc	r7, pc, fp, ror #8
    69cc:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    69d0:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    69d4:	4349502f 	movtmi	r5, #36911	; 0x902f
    69d8:	502f534f 	eorpl	r5, pc, pc, asr #6
    69dc:	534f6369 	movtpl	r6, #62313	; 0xf369
    69e0:	6f682f00 	svcvs	0x00682f00
    69e4:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 6838 <__exidx_end+0x1790>
    69e8:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    69ec:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    69f0:	6f746b73 	svcvs	0x00746b73
    69f4:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    69f8:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    69fc:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    6a00:	2f534f43 	svccs	0x00534f43
    6a04:	4f636950 	svcmi	0x00636950
    6a08:	656b2f53 	strbvs	r2, [fp, #-3923]!	; 0xfffff0ad
    6a0c:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    6a10:	74730000 	ldrbtvc	r0, [r3], #-0
    6a14:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    6a18:	0100682e 	tsteq	r0, lr, lsr #16
    6a1c:	74730000 	ldrbtvc	r0, [r3], #-0
    6a20:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    6a24:	0100682e 	tsteq	r0, lr, lsr #16
    6a28:	745f0000 	ldrbvc	r0, [pc], #-0	; 6a30 <__exidx_end+0x1988>
    6a2c:	73657079 	cmnvc	r5, #121	; 0x79
    6a30:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    6a34:	65720000 	ldrbvs	r0, [r2, #-0]!
    6a38:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    6a3c:	00020068 	andeq	r0, r2, r8, rrx
    6a40:	636f6c00 	cmnvs	pc, #0, 24
    6a44:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    6a48:	72000002 	andvc	r0, r0, #2
    6a4c:	616d5f66 	cmnvs	sp, r6, ror #30
    6a50:	6f626c69 	svcvs	0x00626c69
    6a54:	00682e78 	rsbeq	r2, r8, r8, ror lr
    6a58:	72000003 	andvc	r0, r0, #3
    6a5c:	6f635f66 	svcvs	0x00635f66
    6a60:	6e6f6d6d 	cdpvs	13, 6, cr6, cr15, cr13, {3}
    6a64:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
    6a68:	0300682e 	movweq	r6, #2094	; 0x82e
    6a6c:	66720000 	ldrbtvs	r0, [r2], -r0
    6a70:	6f72705f 	svcvs	0x0072705f
    6a74:	6d635f70 	stclvs	15, cr5, [r3, #-448]!	; 0xfffffe40
    6a78:	00682e64 	rsbeq	r2, r8, r4, ror #28
    6a7c:	72000003 	andvc	r0, r0, #3
    6a80:	61705f66 	cmnvs	r0, r6, ror #30
    6a84:	5f686374 	svcpl	0x00686374
    6a88:	5f657063 	svcpl	0x00657063
    6a8c:	666e6567 	strbtvs	r6, [lr], -r7, ror #10
    6a90:	682e6b73 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}
    6a94:	00000400 	andeq	r0, r0, r0, lsl #8
    6a98:	705f6672 	subsvc	r6, pc, r2, ror r6	; <UNPREDICTABLE>
    6a9c:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
    6aa0:	6566725f 	strbvs	r7, [r6, #-607]!	; 0xfffffda1
    6aa4:	6e65675f 	mcrvs	7, 3, r6, cr5, cr15, {2}
    6aa8:	2e6b7366 	cdpcs	3, 6, cr7, cr11, cr6, {3}
    6aac:	00040068 	andeq	r0, r4, r8, rrx
    6ab0:	63726100 	cmnvs	r2, #0, 2
    6ab4:	00682e68 	rsbeq	r2, r8, r8, ror #28
    6ab8:	6d000005 	stcvs	0, cr0, [r0, #-20]	; 0xffffffec
    6abc:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    6ac0:	00050068 	andeq	r0, r5, r8, rrx
    6ac4:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    6ac8:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    6acc:	00682e73 	rsbeq	r2, r8, r3, ror lr
    6ad0:	62000005 	andvs	r0, r0, #5
    6ad4:	6f747475 	svcvs	0x00747475
    6ad8:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    6adc:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    6ae0:	00000500 	andeq	r0, r0, r0, lsl #10
    6ae4:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    6ae8:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    6aec:	6b000006 	blvs	6b0c <__exidx_end+0x1a64>
    6af0:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    6af4:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    6af8:	73000007 	movwvc	r0, #7
    6afc:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    6b00:	735f6672 	cmpvc	pc, #119537664	; 0x7200000
    6b04:	69747465 	ldmdbvs	r4!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    6b08:	2e73676e 	cdpcs	7, 7, cr6, cr3, cr14, {3}
    6b0c:	00050068 	andeq	r0, r5, r8, rrx
    6b10:	616d7300 	cmnvs	sp, r0, lsl #6
    6b14:	66727472 			; <UNDEFINED> instruction: 0x66727472
    6b18:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
    6b1c:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
    6b20:	706c5f73 	rsbvc	r5, ip, r3, ror pc
    6b24:	2e72685f 	mrccs	8, 3, r6, cr2, cr15, {2}
    6b28:	00050063 	andeq	r0, r5, r3, rrx
    6b2c:	019c0000 	orrseq	r0, ip, r0
    6b30:	00020000 	andeq	r0, r2, r0
    6b34:	0000015f 	andeq	r0, r0, pc, asr r1
    6b38:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    6b3c:	0101000d 	tsteq	r1, sp
    6b40:	00000101 	andeq	r0, r0, r1, lsl #2
    6b44:	00000100 	andeq	r0, r0, r0, lsl #2
    6b48:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    6b4c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6b50:	2f2e2e2f 	svccs	0x002e2e2f
    6b54:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    6b58:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    6b5c:	3a630062 	bcc	18c6cec <__ccfg+0x18a6d44>
    6b60:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    6b64:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    6b68:	302e322e 	eorcc	r3, lr, lr, lsr #4
    6b6c:	3030302e 	eorscc	r3, r0, lr, lsr #32
    6b70:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    6b74:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    6b78:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    6b7c:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    6b80:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    6b84:	6f6f745c 	svcvs	0x006f745c
    6b88:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    6b8c:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    6b90:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    6b94:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    6b98:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    6b9c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    6ba0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6ba4:	5f342d69 	svcpl	0x00342d69
    6ba8:	30322d39 	eorscc	r2, r2, r9, lsr sp
    6bac:	33713531 	cmncc	r1, #205520896	; 0xc400000
    6bb0:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    6bb4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6bb8:	61652d65 	cmnvs	r5, r5, ror #26
    6bbc:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    6bc0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    6bc4:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    6bc8:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    6bcc:	6300656e 	movwvs	r6, #1390	; 0x56e
    6bd0:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    6bd4:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    6bd8:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    6bdc:	30302e30 	eorscc	r2, r0, r0, lsr lr
    6be0:	5f393130 	svcpl	0x00393130
    6be4:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    6be8:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    6bec:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    6bf0:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    6bf4:	6f745c36 	svcvs	0x00745c36
    6bf8:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    6bfc:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    6c00:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    6c04:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    6c08:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    6c0c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6c10:	61652d65 	cmnvs	r5, r5, ror #26
    6c14:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    6c18:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    6c1c:	71353130 	teqvc	r5, r0, lsr r1
    6c20:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    6c24:	6f6e2d6d 	svcvs	0x006e2d6d
    6c28:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    6c2c:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    6c30:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    6c34:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    6c38:	00737973 	rsbseq	r7, r3, r3, ror r9
    6c3c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6c40:	2f2e2e2f 	svccs	0x002e2e2f
    6c44:	692f2e2e 	stmdbvs	pc!, {r1, r2, r3, r5, r9, sl, fp, sp}	; <UNPREDICTABLE>
    6c48:	0000636e 	andeq	r6, r0, lr, ror #6
    6c4c:	2e696461 	cdpcs	4, 6, cr6, cr9, cr1, {3}
    6c50:	00010063 	andeq	r0, r1, r3, rrx
    6c54:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    6c58:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    6c5c:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    6c60:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    6c64:	00020068 	andeq	r0, r2, r8, rrx
    6c68:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    6c6c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    6c70:	0300682e 	movweq	r6, #2094	; 0x82e
    6c74:	77680000 	strbvc	r0, [r8, -r0]!
    6c78:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    6c7c:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    6c80:	00000400 	andeq	r0, r0, r0, lsl #8
    6c84:	2e6d6f72 	mcrcs	15, 3, r6, cr13, cr2, {3}
    6c88:	00010068 	andeq	r0, r1, r8, rrx
    6c8c:	75706300 	ldrbvc	r6, [r0, #-768]!	; 0xfffffd00
    6c90:	0100682e 	tsteq	r0, lr, lsr #16
    6c94:	00000000 	andeq	r0, r0, r0
    6c98:	31900205 	orrscc	r0, r0, r5, lsl #4
    6c9c:	35030000 	strcc	r0, [r3, #-0]
    6ca0:	00212001 	eoreq	r2, r1, r1
    6ca4:	3d010402 	cfstrscc	mvf0, [r1, #-8]
    6ca8:	232f214b 			; <UNDEFINED> instruction: 0x232f214b
    6cac:	0005022c 	andeq	r0, r5, ip, lsr #4
    6cb0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    6cb4:	00000002 	andeq	r0, r0, r2
    6cb8:	00c00300 	sbceq	r0, r0, r0, lsl #6
    6cbc:	002f2001 	eoreq	r2, pc, r1
    6cc0:	3d010402 	cfstrscc	mvf0, [r1, #-8]
    6cc4:	232f2f4b 			; <UNDEFINED> instruction: 0x232f2f4b
    6cc8:	0005022c 	andeq	r0, r5, ip, lsr #4
    6ccc:	01670101 	cmneq	r7, r1, lsl #2
    6cd0:	00020000 	andeq	r0, r2, r0
    6cd4:	00000147 	andeq	r0, r0, r7, asr #2
    6cd8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    6cdc:	0101000d 	tsteq	r1, sp
    6ce0:	00000101 	andeq	r0, r0, r1, lsl #2
    6ce4:	00000100 	andeq	r0, r0, r0, lsl #2
    6ce8:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    6cec:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6cf0:	2f2e2e2f 	svccs	0x002e2e2f
    6cf4:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    6cf8:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    6cfc:	3a630062 	bcc	18c6e8c <__ccfg+0x18a6ee4>
    6d00:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    6d04:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    6d08:	302e322e 	eorcc	r3, lr, lr, lsr #4
    6d0c:	3030302e 	eorscc	r3, r0, lr, lsr #32
    6d10:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    6d14:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    6d18:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    6d1c:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    6d20:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    6d24:	6f6f745c 	svcvs	0x006f745c
    6d28:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    6d2c:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    6d30:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    6d34:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    6d38:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    6d3c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    6d40:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6d44:	5f342d69 	svcpl	0x00342d69
    6d48:	30322d39 	eorscc	r2, r2, r9, lsr sp
    6d4c:	33713531 	cmncc	r1, #205520896	; 0xc400000
    6d50:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    6d54:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6d58:	61652d65 	cmnvs	r5, r5, ror #26
    6d5c:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    6d60:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    6d64:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    6d68:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    6d6c:	6300656e 	movwvs	r6, #1390	; 0x56e
    6d70:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    6d74:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    6d78:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    6d7c:	30302e30 	eorscc	r2, r0, r0, lsr lr
    6d80:	5f393130 	svcpl	0x00393130
    6d84:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    6d88:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    6d8c:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    6d90:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    6d94:	6f745c36 	svcvs	0x00745c36
    6d98:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    6d9c:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    6da0:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    6da4:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    6da8:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    6dac:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6db0:	61652d65 	cmnvs	r5, r5, ror #26
    6db4:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    6db8:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    6dbc:	71353130 	teqvc	r5, r0, lsr r1
    6dc0:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    6dc4:	6f6e2d6d 	svcvs	0x006e2d6d
    6dc8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    6dcc:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    6dd0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    6dd4:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    6dd8:	00737973 	rsbseq	r7, r3, r3, ror r9
    6ddc:	6e6f6100 	powvse	f6, f7, f0
    6de0:	7461625f 	strbtvc	r6, [r1], #-607	; 0xfffffda1
    6de4:	2e6e6f6d 	cdpcs	15, 6, cr6, cr14, cr13, {3}
    6de8:	00010063 	andeq	r0, r1, r3, rrx
    6dec:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    6df0:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    6df4:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    6df8:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    6dfc:	00020068 	andeq	r0, r2, r8, rrx
    6e00:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    6e04:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    6e08:	0300682e 	movweq	r6, #2094	; 0x82e
    6e0c:	6f610000 	svcvs	0x00610000
    6e10:	61625f6e 	cmnvs	r2, lr, ror #30
    6e14:	6e6f6d74 	mcrvs	13, 3, r6, cr15, cr4, {3}
    6e18:	0100682e 	tsteq	r0, lr, lsr #16
    6e1c:	00000000 	andeq	r0, r0, r0
    6e20:	31b80205 			; <UNDEFINED> instruction: 0x31b80205
    6e24:	3c030000 	stccc	0, cr0, [r3], {-0}
    6e28:	2f361a01 	svccs	0x00361a01
    6e2c:	032e7703 			; <UNDEFINED> instruction: 0x032e7703
    6e30:	3d4c2e09 	stclcc	14, cr2, [ip, #-36]	; 0xffffffdc
    6e34:	01000902 	tsteq	r0, r2, lsl #18
    6e38:	0001a901 	andeq	sl, r1, r1, lsl #18
    6e3c:	41000200 	mrsmi	r0, R8_usr
    6e40:	02000001 	andeq	r0, r0, #1
    6e44:	0d0efb01 	vstreq	d15, [lr, #-4]
    6e48:	01010100 	mrseq	r0, (UNDEF: 17)
    6e4c:	00000001 	andeq	r0, r0, r1
    6e50:	01000001 	tsteq	r0, r1
    6e54:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6e58:	2f2e2e2f 	svccs	0x002e2e2f
    6e5c:	642f2e2e 	strtvs	r2, [pc], #-3630	; 6e64 <__exidx_end+0x1dbc>
    6e60:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    6e64:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    6e68:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    6e6c:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    6e70:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    6e74:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    6e78:	31303030 	teqcc	r0, r0, lsr r0
    6e7c:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    6e80:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    6e84:	61746562 	cmnvs	r4, r2, ror #10
    6e88:	63635c32 	cmnvs	r3, #12800	; 0x3200
    6e8c:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    6e90:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 6cc8 <__exidx_end+0x1c20>
    6e94:	6f635c73 	svcvs	0x00635c73
    6e98:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    6e9c:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    6ea0:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    6ea4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    6ea8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    6eac:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    6eb0:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    6eb4:	3130322d 	teqcc	r0, sp, lsr #4
    6eb8:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    6ebc:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    6ec0:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    6ec4:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6ec8:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    6ecc:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    6ed0:	616d5c65 	cmnvs	sp, r5, ror #24
    6ed4:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    6ed8:	3a630065 	bcc	18c7074 <__ccfg+0x18a70cc>
    6edc:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    6ee0:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    6ee4:	302e322e 	eorcc	r3, lr, lr, lsr #4
    6ee8:	3030302e 	eorscc	r3, r0, lr, lsr #32
    6eec:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    6ef0:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    6ef4:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    6ef8:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    6efc:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    6f00:	6f6f745c 	svcvs	0x006f745c
    6f04:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    6f08:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    6f0c:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    6f10:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    6f14:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    6f18:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    6f1c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6f20:	5f342d69 	svcpl	0x00342d69
    6f24:	30322d39 	eorscc	r2, r2, r9, lsr sp
    6f28:	33713531 	cmncc	r1, #205520896	; 0xc400000
    6f2c:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    6f30:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6f34:	61652d65 	cmnvs	r5, r5, ror #26
    6f38:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    6f3c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    6f40:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    6f44:	00007379 	andeq	r7, r0, r9, ror r3
    6f48:	5f6e6f61 	svcpl	0x006e6f61
    6f4c:	2e637472 	mcrcs	4, 3, r7, cr3, cr2, {3}
    6f50:	00010063 	andeq	r0, r1, r3, rrx
    6f54:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    6f58:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    6f5c:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    6f60:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    6f64:	00020068 	andeq	r0, r2, r8, rrx
    6f68:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    6f6c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    6f70:	0300682e 	movweq	r6, #2094	; 0x82e
    6f74:	6f610000 	svcvs	0x00610000
    6f78:	74725f6e 	ldrbtvc	r5, [r2], #-3950	; 0xfffff092
    6f7c:	00682e63 	rsbeq	r2, r8, r3, ror #28
    6f80:	00000001 	andeq	r0, r0, r1
    6f84:	e8020500 	stmda	r2, {r8, sl}
    6f88:	03000031 	movweq	r0, #49	; 0x31
    6f8c:	0200013e 	andeq	r0, r0, #-2147483633	; 0x8000000f
    6f90:	0a030104 	beq	c73a8 <__ccfg+0xa7400>
    6f94:	04020001 	streq	r0, [r2], #-1
    6f98:	02002101 	andeq	r2, r0, #1073741824	; 0x40000000
    6f9c:	001f0104 	andseq	r0, pc, r4, lsl #2
    6fa0:	21010402 	tstcs	r1, r2, lsl #8
    6fa4:	01040200 	mrseq	r0, R12_usr
    6fa8:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    6fac:	21302101 	teqcs	r0, r1, lsl #2
    6fb0:	01000802 	tsteq	r0, r2, lsl #16
    6fb4:	02050001 	andeq	r0, r5, #1
    6fb8:	00003208 	andeq	r3, r0, r8, lsl #4
    6fbc:	0100d703 	tsteq	r0, r3, lsl #14
    6fc0:	01040200 	mrseq	r0, R12_usr
    6fc4:	00010c03 	andeq	r0, r1, r3, lsl #24
    6fc8:	21010402 	tstcs	r1, r2, lsl #8
    6fcc:	01040200 	mrseq	r0, R12_usr
    6fd0:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
    6fd4:	02002101 	andeq	r2, r0, #1073741824	; 0x40000000
    6fd8:	00210104 	eoreq	r0, r1, r4, lsl #2
    6fdc:	21010402 	tstcs	r1, r2, lsl #8
    6fe0:	00050231 	andeq	r0, r5, r1, lsr r2
    6fe4:	019c0101 	orrseq	r0, ip, r1, lsl #2
    6fe8:	00020000 	andeq	r0, r2, r0
    6fec:	00000139 	andeq	r0, r0, r9, lsr r1
    6ff0:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    6ff4:	0101000d 	tsteq	r1, sp
    6ff8:	00000101 	andeq	r0, r0, r1, lsl #2
    6ffc:	00000100 	andeq	r0, r0, r0, lsl #2
    7000:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    7004:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    7008:	2f2e2e2f 	svccs	0x002e2e2f
    700c:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    7010:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    7014:	3a630062 	bcc	18c71a4 <__ccfg+0x18a71fc>
    7018:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    701c:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    7020:	302e322e 	eorcc	r3, lr, lr, lsr #4
    7024:	3030302e 	eorscc	r3, r0, lr, lsr #32
    7028:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    702c:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    7030:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    7034:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    7038:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    703c:	6f6f745c 	svcvs	0x006f745c
    7040:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    7044:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    7048:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    704c:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    7050:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    7054:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7058:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    705c:	5f342d69 	svcpl	0x00342d69
    7060:	30322d39 	eorscc	r2, r2, r9, lsr sp
    7064:	33713531 	cmncc	r1, #205520896	; 0xc400000
    7068:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    706c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    7070:	61652d65 	cmnvs	r5, r5, ror #26
    7074:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    7078:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    707c:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    7080:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    7084:	6300656e 	movwvs	r6, #1390	; 0x56e
    7088:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    708c:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    7090:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    7094:	30302e30 	eorscc	r2, r0, r0, lsr lr
    7098:	5f393130 	svcpl	0x00393130
    709c:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    70a0:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    70a4:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    70a8:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    70ac:	6f745c36 	svcvs	0x00745c36
    70b0:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    70b4:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    70b8:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    70bc:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    70c0:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    70c4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    70c8:	61652d65 	cmnvs	r5, r5, ror #26
    70cc:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    70d0:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    70d4:	71353130 	teqvc	r5, r0, lsr r1
    70d8:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    70dc:	6f6e2d6d 	svcvs	0x006e2d6d
    70e0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    70e4:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    70e8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    70ec:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    70f0:	00737973 	rsbseq	r7, r3, r3, ror r9
    70f4:	75706300 	ldrbvc	r6, [r0, #-768]!	; 0xfffffd00
    70f8:	0100632e 	tsteq	r0, lr, lsr #6
    70fc:	645f0000 	ldrbvs	r0, [pc], #-0	; 7104 <__exidx_end+0x205c>
    7100:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    7104:	745f746c 	ldrbvc	r7, [pc], #-1132	; 710c <__exidx_end+0x2064>
    7108:	73657079 	cmnvc	r5, #121	; 0x79
    710c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    7110:	735f0000 	cmpvc	pc, #0
    7114:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    7118:	00682e74 	rsbeq	r2, r8, r4, ror lr
    711c:	63000003 	movwvs	r0, #3
    7120:	682e7570 	stmdavs	lr!, {r4, r5, r6, r8, sl, ip, sp, lr}
    7124:	00000100 	andeq	r0, r0, r0, lsl #2
    7128:	02050000 	andeq	r0, r5, #0
    712c:	00003220 	andeq	r3, r0, r0, lsr #4
    7130:	0100f503 	tsteq	r0, r3, lsl #10	; <UNPREDICTABLE>
    7134:	02011203 	andeq	r1, r1, #805306368	; 0x30000000
    7138:	01010004 	tsteq	r1, r4
    713c:	00020500 	andeq	r0, r2, r0, lsl #10
    7140:	03000000 	movweq	r0, #0
    7144:	030101c0 	movweq	r0, #4544	; 0x11c0
    7148:	03020111 	movweq	r0, #8465	; 0x2111
    714c:	00010100 	andeq	r0, r1, r0, lsl #2
    7150:	32280205 	eorcc	r0, r8, #1342177280	; 0x50000000
    7154:	8d030000 	stchi	0, cr0, [r3, #-0]
    7158:	12030102 	andne	r0, r3, #-2147483648	; 0x80000000
    715c:	00040201 	andeq	r0, r4, r1, lsl #4
    7160:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7164:	00000002 	andeq	r0, r0, r2
    7168:	02d80300 	sbcseq	r0, r8, #0, 6
    716c:	01110301 	tsteq	r1, r1, lsl #6
    7170:	01000302 	tsteq	r0, r2, lsl #6
    7174:	02050001 	andeq	r0, r5, #1
    7178:	00000000 	andeq	r0, r0, r0
    717c:	01039e03 	tsteq	r3, r3, lsl #28
    7180:	00040216 	andeq	r0, r4, r6, lsl r2
    7184:	02d60101 	sbcseq	r0, r6, #1073741824	; 0x40000000
    7188:	00020000 	andeq	r0, r2, r0
    718c:	0000017c 	andeq	r0, r0, ip, ror r1
    7190:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    7194:	0101000d 	tsteq	r1, sp
    7198:	00000101 	andeq	r0, r0, r1, lsl #2
    719c:	00000100 	andeq	r0, r0, r0, lsl #2
    71a0:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    71a4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    71a8:	2f2e2e2f 	svccs	0x002e2e2f
    71ac:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    71b0:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    71b4:	3a630062 	bcc	18c7344 <__ccfg+0x18a739c>
    71b8:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    71bc:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    71c0:	302e322e 	eorcc	r3, lr, lr, lsr #4
    71c4:	3030302e 	eorscc	r3, r0, lr, lsr #32
    71c8:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    71cc:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    71d0:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    71d4:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    71d8:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    71dc:	6f6f745c 	svcvs	0x006f745c
    71e0:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    71e4:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    71e8:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    71ec:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    71f0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    71f4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    71f8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    71fc:	5f342d69 	svcpl	0x00342d69
    7200:	30322d39 	eorscc	r2, r2, r9, lsr sp
    7204:	33713531 	cmncc	r1, #205520896	; 0xc400000
    7208:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    720c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    7210:	61652d65 	cmnvs	r5, r5, ror #26
    7214:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    7218:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    721c:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    7220:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    7224:	6300656e 	movwvs	r6, #1390	; 0x56e
    7228:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    722c:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    7230:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    7234:	30302e30 	eorscc	r2, r0, r0, lsr lr
    7238:	5f393130 	svcpl	0x00393130
    723c:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    7240:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    7244:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    7248:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    724c:	6f745c36 	svcvs	0x00745c36
    7250:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    7254:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    7258:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    725c:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    7260:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    7264:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    7268:	61652d65 	cmnvs	r5, r5, ror #26
    726c:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    7270:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    7274:	71353130 	teqvc	r5, r0, lsr r1
    7278:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    727c:	6f6e2d6d 	svcvs	0x006e2d6d
    7280:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    7284:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    7288:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    728c:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    7290:	00737973 	rsbseq	r7, r3, r3, ror r9
    7294:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    7298:	2f2e2e2f 	svccs	0x002e2e2f
    729c:	692f2e2e 	stmdbvs	pc!, {r1, r2, r3, r5, r9, sl, fp, sp}	; <UNPREDICTABLE>
    72a0:	0000636e 	andeq	r6, r0, lr, ror #6
    72a4:	2e63736f 	cdpcs	3, 6, cr7, cr3, cr15, {3}
    72a8:	00010063 	andeq	r0, r1, r3, rrx
    72ac:	63736f00 	cmnvs	r3, #0, 30
    72b0:	0100682e 	tsteq	r0, lr, lsr #16
    72b4:	645f0000 	ldrbvs	r0, [pc], #-0	; 72bc <__exidx_end+0x2214>
    72b8:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    72bc:	745f746c 	ldrbvc	r7, [pc], #-1132	; 72c4 <__exidx_end+0x221c>
    72c0:	73657079 	cmnvc	r5, #121	; 0x79
    72c4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    72c8:	735f0000 	cmpvc	pc, #0
    72cc:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    72d0:	00682e74 	rsbeq	r2, r8, r4, ror lr
    72d4:	68000003 	stmdavs	r0, {r0, r1}
    72d8:	79745f77 	ldmdbvc	r4!, {r0, r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    72dc:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    72e0:	00040068 	andeq	r0, r4, r8, rrx
    72e4:	6d6f7200 	sfmvs	f7, 2, [pc, #-0]	; 72ec <__exidx_end+0x2244>
    72e8:	0100682e 	tsteq	r0, lr, lsr #16
    72ec:	6f610000 	svcvs	0x00610000
    72f0:	74725f6e 	ldrbtvc	r5, [r2], #-3950	; 0xfffff092
    72f4:	00682e63 	rsbeq	r2, r8, r3, ror #28
    72f8:	61000001 	tstvs	r0, r1
    72fc:	625f6e6f 	subsvs	r6, pc, #1776	; 0x6f0
    7300:	6f6d7461 	svcvs	0x006d7461
    7304:	00682e6e 	rsbeq	r2, r8, lr, ror #28
    7308:	00000001 	andeq	r0, r0, r1
    730c:	30020500 	andcc	r0, r2, r0, lsl #10
    7310:	03000032 	movweq	r0, #50	; 0x32
    7314:	200100e5 	andcs	r0, r1, r5, ror #1
    7318:	03200f03 			; <UNDEFINED> instruction: 0x03200f03
    731c:	0f032071 	svceq	0x00032071
    7320:	09032520 	stmdbeq	r3, {r5, r8, sl, sp}
    7324:	0903309e 	stmdbeq	r3, {r1, r2, r3, r4, r7, ip, sp}
    7328:	02a3339e 	adceq	r3, r3, #2013265922	; 0x78000002
    732c:	01010007 	tsteq	r1, r7
    7330:	8c020500 	cfstr32hi	mvfx0, [r2], {-0}
    7334:	03000032 	movweq	r0, #50	; 0x32
    7338:	030101a0 	movweq	r0, #4512	; 0x11a0
    733c:	88222e0c 	stmdahi	r2!, {r2, r3, r9, sl, fp, sp}
    7340:	263c7a03 	ldrtcs	r7, [ip], -r3, lsl #20
    7344:	00060225 	andeq	r0, r6, r5, lsr #4
    7348:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    734c:	00000002 	andeq	r0, r0, r2
    7350:	01c20300 	biceq	r0, r2, r0, lsl #6
    7354:	91252001 			; <UNDEFINED> instruction: 0x91252001
    7358:	2e790334 	mrccs	3, 3, r0, cr9, cr4, {1}
    735c:	2e7a0327 	cdpcs	3, 7, cr0, cr10, cr7, {1}
    7360:	04020026 	streq	r0, [r2], #-38	; 0xffffffda
    7364:	207a0301 	rsbscs	r0, sl, r1, lsl #6
    7368:	01040200 	mrseq	r0, R12_usr
    736c:	302d3050 	eorcc	r3, sp, r0, asr r0
    7370:	3d4b241f 	cfstrdcc	mvd2, [fp, #-124]	; 0xffffff84
    7374:	6c3d341f 	cfldrsvs	mvf3, [sp], #-124	; 0xffffff84
    7378:	666d0332 			; <UNDEFINED> instruction: 0x666d0332
    737c:	263c1003 	ldrtcs	r1, [ip], -r3
    7380:	01000902 	tsteq	r0, r2, lsl #18
    7384:	02050001 	andeq	r0, r5, #1
    7388:	000032b8 			; <UNDEFINED> instruction: 0x000032b8
    738c:	0101f303 	tsteq	r1, r3, lsl #6	; <UNPREDICTABLE>
    7390:	07024b21 	streq	r4, [r2, -r1, lsr #22]
    7394:	00010100 	andeq	r0, r1, r0, lsl #2
    7398:	32d00205 	sbcscc	r0, r0, #1342177280	; 0x50000000
    739c:	80030000 	andhi	r0, r3, r0
    73a0:	04240102 	strteq	r0, [r4], #-258	; 0xfffffefe
    73a4:	58220302 	stmdapl	r2!, {r1, r8, r9}
    73a8:	62030104 	andvs	r0, r3, #4, 2
    73ac:	03020482 	movweq	r0, #9346	; 0x2482
    73b0:	0104203c 	tsteq	r4, ip, lsr r0
    73b4:	3d4a4a03 	vstrcc	s9, [sl, #-12]
    73b8:	1f3d211f 	svcne	0x003d211f
    73bc:	301f3022 	andscc	r3, pc, r2, lsr #32
    73c0:	0c022322 	stceq	3, cr2, [r2], {34}	; 0x22
    73c4:	00010100 	andeq	r0, r1, r0, lsl #2
    73c8:	33300205 	teqcc	r0, #1342177280	; 0x50000000
    73cc:	a3030000 	movwge	r0, #12288	; 0x3000
    73d0:	4f250102 	svcmi	0x00250102
    73d4:	17030204 	strne	r0, [r3, -r4, lsl #4]
    73d8:	0301044a 	movweq	r0, #5194	; 0x144a
    73dc:	024b4a6d 	subeq	r4, fp, #446464	; 0x6d000
    73e0:	01010009 	tsteq	r1, r9
    73e4:	00020500 	andeq	r0, r2, r0, lsl #10
    73e8:	03000000 	movweq	r0, #0
    73ec:	220102bc 	andcs	r0, r1, #188, 4	; 0xc000000b
    73f0:	03201703 			; <UNDEFINED> instruction: 0x03201703
    73f4:	03282069 			; <UNDEFINED> instruction: 0x03282069
    73f8:	6c033c10 	stcvs	12, cr3, [r3], {16}
    73fc:	2e15032e 	cdpcs	3, 1, cr0, cr5, cr14, {1}
    7400:	03586d03 	cmpeq	r8, #3, 26	; 0xc0
    7404:	6f032013 	svcvs	0x00032013
    7408:	20110320 	andscs	r0, r1, r0, lsr #6
    740c:	0006023f 	andeq	r0, r6, pc, lsr r2
    7410:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7414:	00000002 	andeq	r0, r0, r2
    7418:	02e30300 	rsceq	r0, r3, #0, 6
    741c:	01210301 			; <UNDEFINED> instruction: 0x01210301
    7420:	0002024d 	andeq	r0, r2, sp, asr #4
    7424:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7428:	00000002 	andeq	r0, r0, r2
    742c:	03900300 	orrseq	r0, r0, #0, 6
    7430:	20100301 	andscs	r0, r0, r1, lsl #6
    7434:	21211f21 			; <UNDEFINED> instruction: 0x21211f21
    7438:	01040200 	mrseq	r0, R12_usr
    743c:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
    7440:	313d3d01 	teqcc	sp, r1, lsl #26
    7444:	0702341d 	smladeq	r2, sp, r4, r3
    7448:	00010100 	andeq	r0, r1, r0, lsl #2
    744c:	00000205 	andeq	r0, r0, r5, lsl #4
    7450:	b5030000 	strlt	r0, [r3, #-0]
    7454:	31170103 	tstcc	r7, r3, lsl #2
    7458:	023d332c 	eorseq	r3, sp, #44, 6	; 0xb0000000
    745c:	01010005 	tsteq	r1, r5
    7460:	000003a7 	andeq	r0, r0, r7, lsr #7
    7464:	02650002 	rsbeq	r0, r5, #2
    7468:	01020000 	mrseq	r0, (UNDEF: 2)
    746c:	000d0efb 	strdeq	r0, [sp], -fp
    7470:	01010101 	tsteq	r1, r1, lsl #2
    7474:	01000000 	mrseq	r0, (UNDEF: 0)
    7478:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    747c:	2f2e2e2f 	svccs	0x002e2e2f
    7480:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    7484:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    7488:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    748c:	0062696c 	rsbeq	r6, r2, ip, ror #18
    7490:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    7494:	63635c69 	cmnvs	r3, #26880	; 0x6900
    7498:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    749c:	302e302e 	eorcc	r3, lr, lr, lsr #32
    74a0:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    74a4:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    74a8:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    74ac:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    74b0:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    74b4:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    74b8:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    74bc:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 7354 <__exidx_end+0x22ac>
    74c0:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    74c4:	63675c72 	cmnvs	r7, #29184	; 0x7200
    74c8:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    74cc:	6f6e2d6d 	svcvs	0x006e2d6d
    74d0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    74d4:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    74d8:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    74dc:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    74e0:	615c3371 	cmpvs	ip, r1, ror r3
    74e4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    74e8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    74ec:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    74f0:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    74f4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    74f8:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    74fc:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    7500:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    7504:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    7508:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    750c:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    7510:	31303030 	teqcc	r0, r0, lsr r0
    7514:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    7518:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    751c:	61746562 	cmnvs	r4, r2, ror #10
    7520:	63635c32 	cmnvs	r3, #12800	; 0x3200
    7524:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    7528:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 7360 <__exidx_end+0x22b8>
    752c:	6f635c73 	svcvs	0x00635c73
    7530:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    7534:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    7538:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    753c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7540:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7544:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7548:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    754c:	3130322d 	teqcc	r0, sp, lsr #4
    7550:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    7554:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    7558:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    755c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    7560:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    7564:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    7568:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
    756c:	3a630073 	bcc	18c7740 <__ccfg+0x18a7798>
    7570:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    7574:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    7578:	302e322e 	eorcc	r3, lr, lr, lsr #4
    757c:	3030302e 	eorscc	r3, r0, lr, lsr #32
    7580:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    7584:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    7588:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    758c:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    7590:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    7594:	6f6f745c 	svcvs	0x006f745c
    7598:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    759c:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    75a0:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    75a4:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    75a8:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    75ac:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    75b0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    75b4:	5f342d69 	svcpl	0x00342d69
    75b8:	30322d39 	eorscc	r2, r2, r9, lsr sp
    75bc:	33713531 	cmncc	r1, #205520896	; 0xc400000
    75c0:	62696c5c 	rsbvs	r6, r9, #92, 24	; 0x5c00
    75c4:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    75c8:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    75cc:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    75d0:	61652d65 	cmnvs	r5, r5, ror #26
    75d4:	345c6962 	ldrbcc	r6, [ip], #-2402	; 0xfffff69e
    75d8:	332e392e 			; <UNDEFINED> instruction: 0x332e392e
    75dc:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    75e0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    75e4:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    75e8:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    75ec:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    75f0:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    75f4:	31303030 	teqcc	r0, r0, lsr r0
    75f8:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    75fc:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    7600:	61746562 	cmnvs	r4, r2, ror #10
    7604:	63635c32 	cmnvs	r3, #12800	; 0x3200
    7608:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    760c:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 7444 <__exidx_end+0x239c>
    7610:	6f635c73 	svcvs	0x00635c73
    7614:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    7618:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    761c:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    7620:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7624:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7628:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    762c:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    7630:	3130322d 	teqcc	r0, sp, lsr #4
    7634:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    7638:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    763c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7640:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    7644:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    7648:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    764c:	72000065 	andvc	r0, r0, #101	; 0x65
    7650:	632e6366 			; <UNDEFINED> instruction: 0x632e6366
    7654:	00000100 	andeq	r0, r0, r0, lsl #2
    7658:	2e636672 	mcrcs	6, 3, r6, cr3, cr2, {3}
    765c:	00010068 	andeq	r0, r1, r8, rrx
    7660:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    7664:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    7668:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    766c:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    7670:	00020068 	andeq	r0, r2, r8, rrx
    7674:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    7678:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    767c:	0300682e 	movweq	r6, #2094	; 0x82e
    7680:	74730000 	ldrbtvc	r0, [r3], #-0
    7684:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    7688:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    768c:	66720000 	ldrbtvs	r0, [r2], -r0
    7690:	69616d5f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
    7694:	786f626c 	stmdavc	pc!, {r2, r3, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
    7698:	0100682e 	tsteq	r0, lr, lsr #16
    769c:	66720000 	ldrbtvs	r0, [r2], -r0
    76a0:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 752c <__exidx_end+0x2484>
    76a4:	5f6e6f6d 	svcpl	0x006e6f6d
    76a8:	2e646d63 	cdpcs	13, 6, cr6, cr4, cr3, {3}
    76ac:	00010068 	andeq	r0, r1, r8, rrx
    76b0:	5f667200 	svcpl	0x00667200
    76b4:	706f7270 	rsbvc	r7, pc, r0, ror r2	; <UNPREDICTABLE>
    76b8:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
    76bc:	0100682e 	tsteq	r0, lr, lsr #16
    76c0:	74730000 	ldrbtvc	r0, [r3], #-0
    76c4:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    76c8:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    76cc:	00000000 	andeq	r0, r0, r0
    76d0:	00000205 	andeq	r0, r0, r5, lsl #4
    76d4:	e8030000 	stmda	r3, {}	; <UNPREDICTABLE>
    76d8:	00130100 	andseq	r0, r3, r0, lsl #2
    76dc:	31010402 	tstcc	r1, r2, lsl #8
    76e0:	01040200 	mrseq	r0, R12_usr
    76e4:	03023f2f 	movweq	r3, #12079	; 0x2f2f
    76e8:	00010100 	andeq	r0, r1, r0, lsl #2
    76ec:	33640205 	cmncc	r4, #1342177280	; 0x50000000
    76f0:	fa030000 	blx	c76f8 <__ccfg+0xa7750>
    76f4:	02000100 	andeq	r0, r0, #0, 2
    76f8:	04130104 	ldreq	r0, [r3], #-260	; 0xfffffefc
    76fc:	01c70302 	biceq	r0, r7, r2, lsl #6
    7700:	0301044a 	movweq	r0, #5194	; 0x144a
    7704:	002e7ebd 	strhteq	r7, [lr], -sp
    7708:	22010402 	andcs	r0, r1, #33554432	; 0x2000000
    770c:	c1030204 	tstgt	r3, r4, lsl #4
    7710:	01043c01 	tsteq	r4, r1, lsl #24
    7714:	3c7ec203 	lfmcc	f4, 3, [lr], #-12
    7718:	0005022f 	andeq	r0, r5, pc, lsr #4
    771c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7720:	00338c02 	eorseq	r8, r3, r2, lsl #24
    7724:	018f0300 	orreq	r0, pc, r0, lsl #6
    7728:	1d231401 	cfstrsne	mvf1, [r3, #-4]!
    772c:	3d761b25 	fldmdbxcc	r6!, {d17-d34}	;@ Deprecated
    7730:	2f211f2f 	svccs	0x00211f2f
    7734:	21212d22 			; <UNDEFINED> instruction: 0x21212d22
    7738:	000c0221 	andeq	r0, ip, r1, lsr #4
    773c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7740:	0033d802 	eorseq	sp, r3, r2, lsl #16
    7744:	01a40300 			; <UNDEFINED> instruction: 0x01a40300
    7748:	2f961501 	svccs	0x00961501
    774c:	2525211c 	strcs	r2, [r5, #-284]!	; 0xfffffee4
    7750:	032f1f21 			; <UNDEFINED> instruction: 0x032f1f21
    7754:	3d3d660a 	ldccc	6, cr6, [sp, #-40]!	; 0xffffffd8
    7758:	5873032f 	ldmdapl	r3!, {r0, r1, r2, r3, r5, r8, r9}^
    775c:	3d661803 	stclcc	8, cr1, [r6, #-12]!
    7760:	68032f3d 	stmdavs	r3, {r0, r2, r3, r4, r5, r8, r9, sl, fp, sp}
    7764:	2f3d3d58 	svccs	0x003d3d58
    7768:	3d580b03 	vldrcc	d16, [r8, #-12]
    776c:	0b032f3d 	bleq	d3468 <__ccfg+0xb34c0>
    7770:	2f3d3d58 	svccs	0x003d3d58
    7774:	2f3d3d5c 	svccs	0x003d3d5c
    7778:	2f3e3d5c 	svccs	0x003e3d5c
    777c:	002f0249 	eoreq	r0, pc, r9, asr #4
    7780:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7784:	00352802 	eorseq	r2, r5, r2, lsl #16
    7788:	01f30300 	mvnseq	r0, r0, lsl #6
    778c:	01090301 	tsteq	r9, r1, lsl #6
    7790:	032e7703 			; <UNDEFINED> instruction: 0x032e7703
    7794:	21af2009 			; <UNDEFINED> instruction: 0x21af2009
    7798:	221f2321 	andscs	r2, pc, #-2080374784	; 0x84000000
    779c:	03262f22 			; <UNDEFINED> instruction: 0x03262f22
    77a0:	2f2d4a0b 	svccs	0x002d4a0b
    77a4:	0200335a 	andeq	r3, r0, #1744830465	; 0x68000001
    77a8:	76030204 	strvc	r0, [r3], -r4, lsl #4
    77ac:	3c11032e 	ldccc	3, cr0, [r1], {46}	; 0x2e
    77b0:	03f21403 	mvnseq	r1, #50331648	; 0x3000000
    77b4:	23032e6f 	movwcs	r2, #15983	; 0x3e6f
    77b8:	3c62034a 	stclcc	3, cr0, [r2], #-296	; 0xfffffed8
    77bc:	3632224c 	ldrtcc	r2, [r2], -ip, asr #4
    77c0:	50224c32 	eorpl	r4, r2, r2, lsr ip
    77c4:	5eac0903 	vfmapl.f16	s0, s24, s6	; <UNPREDICTABLE>
    77c8:	03362659 	teqeq	r6, #93323264	; 0x5900000
    77cc:	16026662 	strne	r6, [r2], -r2, ror #12
    77d0:	00010100 	andeq	r0, r1, r0, lsl #2
    77d4:	36400205 	strbcc	r0, [r0], -r5, lsl #4
    77d8:	f7030000 			; <UNDEFINED> instruction: 0xf7030000
    77dc:	ad2f0102 	stfges	f0, [pc, #-8]!	; 77dc <__exidx_end+0x2734>
    77e0:	01000302 	tsteq	r0, r2, lsl #6
    77e4:	02050001 	andeq	r0, r5, #1
    77e8:	00000000 	andeq	r0, r0, r0
    77ec:	01038203 	tsteq	r3, r3, lsl #4
    77f0:	2a025d24 	bcs	9ec88 <__ccfg+0x7ece0>
    77f4:	00010100 	andeq	r0, r1, r0, lsl #2
    77f8:	36600205 	strbtcc	r0, [r0], -r5, lsl #4
    77fc:	96030000 	strls	r0, [r3], -r0
    7800:	23210103 			; <UNDEFINED> instruction: 0x23210103
    7804:	0602413e 			; <UNDEFINED> instruction: 0x0602413e
    7808:	e9010100 	stmdb	r1, {r8}
    780c:	02000001 	andeq	r0, r0, #1
    7810:	00016700 	andeq	r6, r1, r0, lsl #14
    7814:	fb010200 	blx	4801e <__ccfg+0x28076>
    7818:	01000d0e 	tsteq	r0, lr, lsl #26
    781c:	00010101 	andeq	r0, r1, r1, lsl #2
    7820:	00010000 	andeq	r0, r1, r0
    7824:	2f2e0100 	svccs	0x002e0100
    7828:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    782c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    7830:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    7834:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    7838:	63006269 	movwvs	r6, #617	; 0x269
    783c:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    7840:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    7844:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    7848:	30302e30 	eorscc	r2, r0, r0, lsr lr
    784c:	5f393130 	svcpl	0x00393130
    7850:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    7854:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    7858:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    785c:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    7860:	6f745c36 	svcvs	0x00745c36
    7864:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    7868:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    786c:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    7870:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    7874:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    7878:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    787c:	61652d65 	cmnvs	r5, r5, ror #26
    7880:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    7884:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    7888:	71353130 	teqvc	r5, r0, lsr r1
    788c:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    7890:	6f6e2d6d 	svcvs	0x006e2d6d
    7894:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    7898:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    789c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    78a0:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    78a4:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    78a8:	00656e69 	rsbeq	r6, r5, r9, ror #28
    78ac:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    78b0:	63635c69 	cmnvs	r3, #26880	; 0x6900
    78b4:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    78b8:	302e302e 	eorcc	r3, lr, lr, lsr #32
    78bc:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    78c0:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    78c4:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    78c8:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    78cc:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    78d0:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    78d4:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    78d8:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 7770 <__exidx_end+0x26c8>
    78dc:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    78e0:	63675c72 	cmnvs	r7, #29184	; 0x7200
    78e4:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    78e8:	6f6e2d6d 	svcvs	0x006e2d6d
    78ec:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    78f0:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    78f4:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    78f8:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    78fc:	615c3371 	cmpvs	ip, r1, ror r3
    7900:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7904:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7908:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    790c:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    7910:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    7914:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
    7918:	65730000 	ldrbvs	r0, [r3, #-0]!
    791c:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
    7920:	00010063 	andeq	r0, r1, r3, rrx
    7924:	6e6f6100 	powvse	f6, f7, f0
    7928:	6375775f 	cmnvs	r5, #24903680	; 0x17c0000
    792c:	0100682e 	tsteq	r0, lr, lsr #16
    7930:	645f0000 	ldrbvs	r0, [pc], #-0	; 7938 <__exidx_end+0x2890>
    7934:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    7938:	745f746c 	ldrbvc	r7, [pc], #-1132	; 7940 <__exidx_end+0x2898>
    793c:	73657079 	cmnvc	r5, #121	; 0x79
    7940:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    7944:	735f0000 	cmpvc	pc, #0
    7948:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    794c:	00682e74 	rsbeq	r2, r8, r4, ror lr
    7950:	73000003 	movwvc	r0, #3
    7954:	70757465 	rsbsvc	r7, r5, r5, ror #8
    7958:	6d6f725f 	sfmvs	f7, 2, [pc, #-380]!	; 77e4 <__exidx_end+0x273c>
    795c:	0100682e 	tsteq	r0, lr, lsr #16
    7960:	68630000 	stmdavs	r3!, {}^	; <UNPREDICTABLE>
    7964:	6e697069 	cdpvs	0, 6, cr7, cr9, cr9, {3}
    7968:	682e6f66 	stmdavs	lr!, {r1, r2, r5, r6, r8, r9, sl, fp, sp, lr}
    796c:	00000100 	andeq	r0, r0, r0, lsl #2
    7970:	75746573 	ldrbvc	r6, [r4, #-1395]!	; 0xfffffa8d
    7974:	00682e70 	rsbeq	r2, r8, r0, ror lr
    7978:	00000001 	andeq	r0, r0, r1
    797c:	7c020500 	cfstr32vc	mvfx0, [r2], {-0}
    7980:	03000036 	movweq	r0, #54	; 0x36
    7984:	2001028d 	andcs	r0, r1, sp, lsl #5
    7988:	00200a03 	eoreq	r0, r0, r3, lsl #20
    798c:	41010402 	tstmi	r1, r2, lsl #8
    7990:	2d43424f 	sfmcs	f4, 2, [r3, #-316]	; 0xfffffec4
    7994:	02041f21 	andeq	r1, r4, #33, 30	; 0x84
    7998:	66048703 	strvs	r8, [r4], -r3, lsl #14
    799c:	86030104 	strhi	r0, [r3], -r4, lsl #2
    79a0:	42363c7c 	eorsmi	r3, r6, #124, 24	; 0x7c00
    79a4:	2d4a0903 	vstrcs.16	s1, [sl, #-6]	; <UNPREDICTABLE>
    79a8:	1f2f2f3d 	svcne	0x002f2f3d
    79ac:	23212f2f 			; <UNDEFINED> instruction: 0x23212f2f
    79b0:	03254831 			; <UNDEFINED> instruction: 0x03254831
    79b4:	5d41580a 	stclpl	8, cr5, [r1, #-40]	; 0xffffffd8
    79b8:	001e023f 	andseq	r0, lr, pc, lsr r2
    79bc:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    79c0:	00375002 	eorseq	r5, r7, r2
    79c4:	00f00300 	rscseq	r0, r0, r0, lsl #6
    79c8:	43302801 	teqmi	r0, #65536	; 0x10000
    79cc:	09034133 	stmdbeq	r3, {r0, r1, r4, r5, r8, lr}
    79d0:	0b03333c 	bleq	d46c8 <__ccfg+0xb4720>
    79d4:	3c0e032e 	stccc	3, cr0, [lr], {46}	; 0x2e
    79d8:	20790327 	rsbscs	r0, r9, r7, lsr #6
    79dc:	03201503 			; <UNDEFINED> instruction: 0x03201503
    79e0:	67422e09 	strbvs	r2, [r2, -r9, lsl #28]
    79e4:	20090349 	andcs	r0, r9, r9, asr #6
    79e8:	69242d59 	stmdbvs	r4!, {r0, r3, r4, r6, r8, sl, fp, sp}
    79ec:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
    79f0:	024d2701 	subeq	r2, sp, #262144	; 0x40000
    79f4:	01010013 	tsteq	r1, r3, lsl r0
    79f8:	00000457 	andeq	r0, r0, r7, asr r4
    79fc:	01650002 	cmneq	r5, r2
    7a00:	01020000 	mrseq	r0, (UNDEF: 2)
    7a04:	000d0efb 	strdeq	r0, [sp], -fp
    7a08:	01010101 	tsteq	r1, r1, lsl #2
    7a0c:	01000000 	mrseq	r0, (UNDEF: 0)
    7a10:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    7a14:	2f2e2e2f 	svccs	0x002e2e2f
    7a18:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    7a1c:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    7a20:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    7a24:	0062696c 	rsbeq	r6, r2, ip, ror #18
    7a28:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    7a2c:	63635c69 	cmnvs	r3, #26880	; 0x6900
    7a30:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    7a34:	302e302e 	eorcc	r3, lr, lr, lsr #32
    7a38:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    7a3c:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    7a40:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    7a44:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    7a48:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    7a4c:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    7a50:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    7a54:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 78ec <__exidx_end+0x2844>
    7a58:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    7a5c:	63675c72 	cmnvs	r7, #29184	; 0x7200
    7a60:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    7a64:	6f6e2d6d 	svcvs	0x006e2d6d
    7a68:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    7a6c:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    7a70:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    7a74:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    7a78:	615c3371 	cmpvs	ip, r1, ror r3
    7a7c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7a80:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7a84:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7a88:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    7a8c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    7a90:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    7a94:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    7a98:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    7a9c:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    7aa0:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    7aa4:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    7aa8:	31303030 	teqcc	r0, r0, lsr r0
    7aac:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    7ab0:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    7ab4:	61746562 	cmnvs	r4, r2, ror #10
    7ab8:	63635c32 	cmnvs	r3, #12800	; 0x3200
    7abc:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    7ac0:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 78f8 <__exidx_end+0x2850>
    7ac4:	6f635c73 	svcvs	0x00635c73
    7ac8:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    7acc:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    7ad0:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    7ad4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7ad8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7adc:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7ae0:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    7ae4:	3130322d 	teqcc	r0, sp, lsr #4
    7ae8:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    7aec:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    7af0:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7af4:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    7af8:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    7afc:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    7b00:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
    7b04:	73000073 	movwvc	r0, #115	; 0x73
    7b08:	70757465 	rsbsvc	r7, r5, r5, ror #8
    7b0c:	6d6f725f 	sfmvs	f7, 2, [pc, #-380]!	; 7998 <__exidx_end+0x28f0>
    7b10:	0100632e 	tsteq	r0, lr, lsr #6
    7b14:	65730000 	ldrbvs	r0, [r3, #-0]!
    7b18:	5f707574 	svcpl	0x00707574
    7b1c:	2e6d6f72 	mcrcs	15, 3, r6, cr13, cr2, {3}
    7b20:	00010068 	andeq	r0, r1, r8, rrx
    7b24:	73797300 	cmnvc	r9, #0, 6
    7b28:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
    7b2c:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    7b30:	5f000001 	svcpl	0x00000001
    7b34:	61666564 	cmnvs	r6, r4, ror #10
    7b38:	5f746c75 	svcpl	0x00746c75
    7b3c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    7b40:	00682e73 	rsbeq	r2, r8, r3, ror lr
    7b44:	5f000002 	svcpl	0x00000002
    7b48:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    7b4c:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    7b50:	00000300 	andeq	r0, r0, r0, lsl #6
    7b54:	2e696464 	cdpcs	4, 6, cr6, cr9, cr4, {3}
    7b58:	00010068 	andeq	r0, r1, r8, rrx
    7b5c:	63736f00 	cmnvs	r3, #0, 30
    7b60:	0100682e 	tsteq	r0, lr, lsr #16
    7b64:	00000000 	andeq	r0, r0, r0
    7b68:	37f40205 	ldrbcc	r0, [r4, r5, lsl #4]!
    7b6c:	ff030000 			; <UNDEFINED> instruction: 0xff030000
    7b70:	0b030100 	bleq	c7f78 <__ccfg+0xa7fd0>
    7b74:	2e0e0320 	cdpcs	3, 0, cr0, cr14, cr0, {1}
    7b78:	03207203 			; <UNDEFINED> instruction: 0x03207203
    7b7c:	02042e0e 	andeq	r2, r4, #14, 28	; 0xe0
    7b80:	2000d703 	andcs	sp, r0, r3, lsl #14
    7b84:	a8030104 	stmdage	r3, {r2, r8}
    7b88:	0204207f 	andeq	r2, r4, #127	; 0x7f
    7b8c:	2e00d903 	vmlacs.f16	s26, s0, s6	; <UNPREDICTABLE>
    7b90:	0104212d 	tsteq	r4, sp, lsr #2
    7b94:	2e7fac03 	cdpcs	12, 7, cr10, cr15, cr3, {0}
    7b98:	2f214d30 	svccs	0x00214d30
    7b9c:	22222265 	eorcs	r2, r2, #1342177286	; 0x50000006
    7ba0:	7803221e 	stmdavc	r3, {r1, r2, r3, r4, r9, sp}
    7ba4:	200d0358 	andcs	r0, sp, r8, asr r3
    7ba8:	033c7303 	teqeq	ip, #201326592	; 0xc000000
    7bac:	21212010 			; <UNDEFINED> instruction: 0x21212010
    7bb0:	0d022121 	stfeqs	f2, [r2, #-132]	; 0xffffff7c
    7bb4:	00010100 	andeq	r0, r1, r0, lsl #2
    7bb8:	38700205 	ldmdacc	r0!, {r0, r2, r9}^
    7bbc:	bf030000 	svclt	0x00030000
    7bc0:	031a0101 	tsteq	sl, #1073741824	; 0x40000000
    7bc4:	28204a78 	stmdacs	r0!, {r3, r4, r5, r6, r9, fp, lr}
    7bc8:	03200e03 			; <UNDEFINED> instruction: 0x03200e03
    7bcc:	03422e7a 	movteq	r2, #11898	; 0x2e7a
    7bd0:	31302e0e 	teqcc	r0, lr, lsl #28
    7bd4:	042d432d 	strteq	r4, [sp], #-813	; 0xfffffcd3
    7bd8:	04213002 	strteq	r3, [r1], #-2
    7bdc:	2e0b0301 	cdpcs	3, 0, cr0, cr11, cr1, {0}
    7be0:	23652f3d 	cmncs	r5, #61, 30	; 0xf4
    7be4:	4d660c03 	stclmi	12, cr0, [r6, #-12]!
    7be8:	2d28302c 	stccs	0, cr3, [r8, #-176]!	; 0xffffff50
    7bec:	15022d52 	strne	r2, [r2, #-3410]	; 0xfffff2ae
    7bf0:	00010100 	andeq	r0, r1, r0, lsl #2
    7bf4:	391c0205 	ldmdbcc	ip, {r0, r2, r9}
    7bf8:	9f030000 	svcls	0x00030000
    7bfc:	0c030104 	stfeqs	f0, [r3], {4}
    7c00:	20090301 	andcs	r0, r9, r1, lsl #6
    7c04:	21207703 			; <UNDEFINED> instruction: 0x21207703
    7c08:	30273331 	eorcc	r3, r7, r1, lsr r3
    7c0c:	2d223130 	stfcss	f3, [r2, #-192]!	; 0xffffff40
    7c10:	3d31351d 	cfldr32cc	mvfx3, [r1, #-116]!	; 0xffffff8c
    7c14:	3b223d3e 	blcc	897114 <__ccfg+0x87716c>
    7c18:	7603271d 			; <UNDEFINED> instruction: 0x7603271d
    7c1c:	2e120320 	cdpcs	3, 1, cr0, cr2, cr0, {1}
    7c20:	01000602 	tsteq	r0, r2, lsl #12
    7c24:	02050001 	andeq	r0, r5, #1
    7c28:	00003978 	andeq	r3, r0, r8, ror r9
    7c2c:	0104e503 	tsteq	r4, r3, lsl #10
    7c30:	79033418 	stmdbvc	r3, {r3, r4, sl, ip, sp}
    7c34:	02333620 	eorseq	r3, r3, #32, 12	; 0x2000000
    7c38:	01010005 	tsteq	r1, r5
    7c3c:	00020500 	andeq	r0, r2, r0, lsl #10
    7c40:	03000000 	movweq	r0, #0
    7c44:	18010581 	stmdane	r1, {r0, r7, r8, sl}
    7c48:	00060233 	andeq	r0, r6, r3, lsr r2
    7c4c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7c50:	00399002 	eorseq	r9, r9, r2
    7c54:	05950300 	ldreq	r0, [r5, #768]	; 0x300
    7c58:	13031901 	movwne	r1, #14593	; 0x3901
    7c5c:	0006022e 	andeq	r0, r6, lr, lsr #4
    7c60:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7c64:	0039a002 	eorseq	sl, r9, r2
    7c68:	05b80300 	ldreq	r0, [r8, #768]!	; 0x300
    7c6c:	13031901 	movwne	r1, #14593	; 0x3901
    7c70:	0008022e 	andeq	r0, r8, lr, lsr #4
    7c74:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7c78:	0039b402 	eorseq	fp, r9, r2, lsl #8
    7c7c:	05db0300 	ldrbeq	r0, [fp, #768]	; 0x300
    7c80:	200b0301 	andcs	r0, fp, r1, lsl #6
    7c84:	03200903 			; <UNDEFINED> instruction: 0x03200903
    7c88:	09032077 	stmdbeq	r3, {r0, r1, r2, r4, r5, r6, sp}
    7c8c:	20790320 	rsbscs	r0, r9, r0, lsr #6
    7c90:	22322a35 	eorscs	r2, r2, #217088	; 0x35000
    7c94:	47323031 			; <UNDEFINED> instruction: 0x47323031
    7c98:	47323027 	ldrmi	r3, [r2, -r7, lsr #32]!
    7c9c:	372e1703 	strcc	r1, [lr, -r3, lsl #14]!
    7ca0:	02273a36 	eoreq	r3, r7, #221184	; 0x36000
    7ca4:	01010008 	tsteq	r1, r8
    7ca8:	18020500 	stmdane	r2, {r8, sl}
    7cac:	0300003a 	movweq	r0, #58	; 0x3a
    7cb0:	150106a9 	strne	r0, [r1, #-1705]	; 0xfffff957
    7cb4:	09035521 	stmdbeq	r3, {r0, r5, r8, sl, ip, lr}
    7cb8:	00030220 	andeq	r0, r3, r0, lsr #4
    7cbc:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7cc0:	003a2c02 	eorseq	r2, sl, r2, lsl #24
    7cc4:	06bc0300 	ldrteq	r0, [ip], r0, lsl #6
    7cc8:	55211501 	strpl	r1, [r1, #-1281]!	; 0xfffffaff
    7ccc:	02200903 	eoreq	r0, r0, #49152	; 0xc000
    7cd0:	01010003 	tsteq	r1, r3
    7cd4:	40020500 	andmi	r0, r2, r0, lsl #10
    7cd8:	0300003a 	movweq	r0, #58	; 0x3a
    7cdc:	150106cf 	strne	r0, [r1, #-1743]	; 0xfffff931
    7ce0:	09035521 	stmdbeq	r3, {r0, r5, r8, sl, ip, lr}
    7ce4:	00030220 	andeq	r0, r3, r0, lsr #4
    7ce8:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7cec:	003a5402 	eorseq	r5, sl, r2, lsl #8
    7cf0:	06e20300 	strbteq	r0, [r2], r0, lsl #6
    7cf4:	43211601 			; <UNDEFINED> instruction: 0x43211601
    7cf8:	207a032f 	rsbscs	r0, sl, pc, lsr #6
    7cfc:	032c3540 			; <UNDEFINED> instruction: 0x032c3540
    7d00:	16032071 			; <UNDEFINED> instruction: 0x16032071
    7d04:	0003022e 	andeq	r0, r3, lr, lsr #4
    7d08:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7d0c:	003a7c02 	eorseq	r7, sl, r2, lsl #24
    7d10:	07820300 	streq	r0, [r2, r0, lsl #6]
    7d14:	02331601 	eorseq	r1, r3, #1048576	; 0x100000
    7d18:	01010006 	tsteq	r1, r6
    7d1c:	8c020500 	cfstr32hi	mvfx0, [r2], {-0}
    7d20:	0300003a 	movweq	r0, #58	; 0x3a
    7d24:	16010794 			; <UNDEFINED> instruction: 0x16010794
    7d28:	34294321 	strtcc	r4, [r9], #-801	; 0xfffffcdf
    7d2c:	20790333 	rsbscs	r0, r9, r3, lsr r3
    7d30:	71031e35 	tstvc	r3, r5, lsr lr
    7d34:	2016032e 	andscs	r0, r6, lr, lsr #6
    7d38:	01000502 	tsteq	r0, r2, lsl #10
    7d3c:	02050001 	andeq	r0, r5, #1
    7d40:	00003ab8 			; <UNDEFINED> instruction: 0x00003ab8
    7d44:	0107b403 	tsteq	r7, r3, lsl #8
    7d48:	03552115 	cmpeq	r5, #1073741829	; 0x40000005
    7d4c:	03022009 	movweq	r2, #8201	; 0x2009
    7d50:	00010100 	andeq	r0, r1, r0, lsl #2
    7d54:	3acc0205 	bcc	ff308570 <_estack+0xdf303570>
    7d58:	c8030000 	stmdagt	r3, {}	; <UNPREDICTABLE>
    7d5c:	21150107 	tstcs	r5, r7, lsl #2
    7d60:	200a0355 	andcs	r0, sl, r5, asr r3
    7d64:	01000302 	tsteq	r0, r2, lsl #6
    7d68:	02050001 	andeq	r0, r5, #1
    7d6c:	00003ae0 	andeq	r3, r0, r0, ror #21
    7d70:	0102a703 	tsteq	r2, r3, lsl #14
    7d74:	20090320 	andcs	r0, r9, r0, lsr #6
    7d78:	4e211f3d 	mcrmi	15, 1, r1, cr1, cr13, {1}
    7d7c:	02d1032f 	sbcseq	r0, r1, #-1140850688	; 0xbc000000
    7d80:	7db903ac 	ldcvc	3, cr0, [r9, #688]!	; 0x2b0
    7d84:	02c70320 	sbceq	r0, r7, #32, 6	; 0x80000000
    7d88:	7db90320 	ldcvc	3, cr0, [r9, #128]!	; 0x80
    7d8c:	1f2f5c20 	svcne	0x002f5c20
    7d90:	1f2f3d21 	svcne	0x002f3d21
    7d94:	1f3d3d21 	svcne	0x003d3d21
    7d98:	6e3d4321 	cdpvs	3, 3, cr4, cr13, cr1, {1}
    7d9c:	1f3d523d 	svcne	0x003d523d
    7da0:	3c090321 	stccc	3, cr0, [r9], {33}	; 0x21
    7da4:	660a033d 			; <UNDEFINED> instruction: 0x660a033d
    7da8:	660b033d 			; <UNDEFINED> instruction: 0x660b033d
    7dac:	1f3d7c3d 	svcne	0x003d7c3d
    7db0:	024b4021 	subeq	r4, fp, #33	; 0x21
    7db4:	01010012 	tsteq	r1, r2, lsl r0
    7db8:	f0020500 			; <UNDEFINED> instruction: 0xf0020500
    7dbc:	0300003b 	movweq	r0, #59	; 0x3b
    7dc0:	000107de 	ldrdeq	r0, [r1], -lr
    7dc4:	03010402 	movweq	r0, #5122	; 0x1402
    7dc8:	2352200e 	cmpcs	r2, #14
    7dcc:	4d1d231d 	ldcmi	3, cr2, [sp, #-116]	; 0xffffff8c
    7dd0:	7a034b68 	bvc	dab78 <__ccfg+0xbabd0>
    7dd4:	00413420 	subeq	r3, r1, r0, lsr #8
    7dd8:	3d010402 	cfstrscc	mvf0, [r1, #-8]
    7ddc:	0b02315b 	bleq	94350 <__ccfg+0x743a8>
    7de0:	00010100 	andeq	r0, r1, r0, lsl #2
    7de4:	3c540205 	lfmcc	f0, 2, [r4], {5}
    7de8:	93030000 	movwls	r0, #12288	; 0x3000
    7dec:	09030108 	stmdbeq	r3, {r3, r8}
    7df0:	212d2f01 			; <UNDEFINED> instruction: 0x212d2f01
    7df4:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
    7df8:	024b3d01 	subeq	r3, fp, #1, 26	; 0x40
    7dfc:	01010007 	tsteq	r1, r7
    7e00:	7c020500 	cfstr32vc	mvfx0, [r2], {-0}
    7e04:	0300003c 	movweq	r0, #60	; 0x3c
    7e08:	0301039b 	movweq	r0, #5019	; 0x139b
    7e0c:	77030109 	strvc	r0, [r3, -r9, lsl #2]
    7e10:	0903203c 	stmdbeq	r3, {r2, r3, r4, r5, sp}
    7e14:	31305220 	teqcc	r0, r0, lsr #4
    7e18:	234a0a03 	movtcs	r0, #43523	; 0xaa03
    7e1c:	24484c2b 	strbcs	r4, [r8], #-3115	; 0xfffff3d5
    7e20:	33762d2f 	cmncc	r6, #3008	; 0xbc0
    7e24:	501c3229 	andspl	r3, ip, r9, lsr #4
    7e28:	4f3d5226 	svcmi	0x003d5226
    7e2c:	845d2f4d 	ldrbhi	r2, [sp], #-3917	; 0xfffff0b3
    7e30:	3d243d4b 	stccc	13, cr3, [r4, #-300]!	; 0xfffffed4
    7e34:	01040200 	mrseq	r0, R12_usr
    7e38:	4b2f5b4b 	blmi	bdeb6c <__ccfg+0xbbebc4>
    7e3c:	033f4d86 	teqeq	pc, #8576	; 0x2180
    7e40:	221e4a09 	andscs	r4, lr, #36864	; 0x9000
    7e44:	3c0b031e 	stccc	3, cr0, [fp], {30}
    7e48:	b9030304 	stmdblt	r3, {r2, r8, r9}
    7e4c:	1f024a7d 	svcne	0x00024a7d
    7e50:	65010100 	strvs	r0, [r1, #-256]	; 0xffffff00
    7e54:	02000003 	andeq	r0, r0, #3
    7e58:	0001a800 	andeq	sl, r1, r0, lsl #16
    7e5c:	fb010200 	blx	48666 <__ccfg+0x286be>
    7e60:	01000d0e 	tsteq	r0, lr, lsl #26
    7e64:	00010101 	andeq	r0, r1, r1, lsl #2
    7e68:	00010000 	andeq	r0, r1, r0
    7e6c:	2f2e0100 	svccs	0x002e0100
    7e70:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    7e74:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    7e78:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    7e7c:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    7e80:	63006269 	movwvs	r6, #617	; 0x269
    7e84:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    7e88:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    7e8c:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    7e90:	30302e30 	eorscc	r2, r0, r0, lsr lr
    7e94:	5f393130 	svcpl	0x00393130
    7e98:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    7e9c:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    7ea0:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    7ea4:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    7ea8:	6f745c36 	svcvs	0x00745c36
    7eac:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    7eb0:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    7eb4:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    7eb8:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    7ebc:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    7ec0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    7ec4:	61652d65 	cmnvs	r5, r5, ror #26
    7ec8:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    7ecc:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    7ed0:	71353130 	teqvc	r5, r0, lsr r1
    7ed4:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    7ed8:	6f6e2d6d 	svcvs	0x006e2d6d
    7edc:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    7ee0:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    7ee4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    7ee8:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    7eec:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    7ef0:	00656e69 	rsbeq	r6, r5, r9, ror #28
    7ef4:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    7ef8:	63635c69 	cmnvs	r3, #26880	; 0x6900
    7efc:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    7f00:	302e302e 	eorcc	r3, lr, lr, lsr #32
    7f04:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    7f08:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    7f0c:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    7f10:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    7f14:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    7f18:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    7f1c:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    7f20:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 7db8 <__exidx_end+0x2d10>
    7f24:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    7f28:	63675c72 	cmnvs	r7, #29184	; 0x7200
    7f2c:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    7f30:	6f6e2d6d 	svcvs	0x006e2d6d
    7f34:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    7f38:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    7f3c:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    7f40:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    7f44:	615c3371 	cmpvs	ip, r1, ror r3
    7f48:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7f4c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7f50:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7f54:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    7f58:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    7f5c:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
    7f60:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    7f64:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    7f68:	2f2e2e2f 	svccs	0x002e2e2f
    7f6c:	00636e69 	rsbeq	r6, r3, r9, ror #28
    7f70:	73797300 	cmnvc	r9, #0, 6
    7f74:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
    7f78:	00632e6c 	rsbeq	r2, r3, ip, ror #28
    7f7c:	61000001 	tstvs	r0, r1
    7f80:	775f6e6f 	ldrbvc	r6, [pc, -pc, ror #28]
    7f84:	682e6375 	stmdavs	lr!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}
    7f88:	00000100 	andeq	r0, r0, r0, lsl #2
    7f8c:	2e63736f 	cdpcs	3, 6, cr7, cr3, cr15, {3}
    7f90:	00010068 	andeq	r0, r1, r8, rrx
    7f94:	63727000 	cmnvs	r2, #0
    7f98:	00682e6d 	rsbeq	r2, r8, sp, ror #28
    7f9c:	73000001 	movwvc	r0, #1
    7fa0:	70757465 	rsbsvc	r7, r5, r5, ror #8
    7fa4:	6d6f725f 	sfmvs	f7, 2, [pc, #-380]!	; 7e30 <__exidx_end+0x2d88>
    7fa8:	0100682e 	tsteq	r0, lr, lsr #16
    7fac:	645f0000 	ldrbvs	r0, [pc], #-0	; 7fb4 <__exidx_end+0x2f0c>
    7fb0:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    7fb4:	745f746c 	ldrbvc	r7, [pc], #-1132	; 7fbc <__exidx_end+0x2f14>
    7fb8:	73657079 	cmnvc	r5, #121	; 0x79
    7fbc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    7fc0:	735f0000 	cmpvc	pc, #0
    7fc4:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    7fc8:	00682e74 	rsbeq	r2, r8, r4, ror lr
    7fcc:	68000003 	stmdavs	r0, {r0, r1}
    7fd0:	79745f77 	ldmdbvc	r4!, {r0, r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    7fd4:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    7fd8:	00040068 	andeq	r0, r4, r8, rrx
    7fdc:	6d6f7200 	sfmvs	f7, 2, [pc, #-0]	; 7fe4 <__exidx_end+0x2f3c>
    7fe0:	0100682e 	tsteq	r0, lr, lsr #16
    7fe4:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    7fe8:	74635f73 	strbtvc	r5, [r3], #-3955	; 0xfffff08d
    7fec:	682e6c72 	stmdavs	lr!, {r1, r4, r5, r6, sl, fp, sp, lr}
    7ff0:	00000100 	andeq	r0, r0, r0, lsl #2
    7ff4:	5f6e6f61 	svcpl	0x006e6f61
    7ff8:	6d746162 	ldfvse	f6, [r4, #-392]!	; 0xfffffe78
    7ffc:	682e6e6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
    8000:	00000100 	andeq	r0, r0, r0, lsl #2
    8004:	02050000 	andeq	r0, r5, #0
    8008:	00000000 	andeq	r0, r0, r0
    800c:	0100f903 	tsteq	r0, r3, lsl #18	; <UNPREDICTABLE>
    8010:	e9030204 	stmdb	r3, {r2, r9}
    8014:	01040102 	tsteq	r4, r2, lsl #2
    8018:	2e7d9703 	cdpcs	7, 7, cr9, cr13, cr3, {0}
    801c:	e9030204 	stmdb	r3, {r2, r9}
    8020:	02002e02 	andeq	r2, r0, #2, 28
    8024:	ce030104 	adfgts	f0, f3, f4
    8028:	01042000 	mrseq	r2, (UNDEF: 4)
    802c:	01040200 	mrseq	r0, R12_usr
    8030:	2e7cd103 	expcse	f5, f3
    8034:	002e0c03 	eoreq	r0, lr, r3, lsl #24
    8038:	67010402 	strvs	r0, [r1, -r2, lsl #8]
    803c:	09034b89 	stmdbeq	r3, {r0, r3, r7, r8, r9, fp, lr}
    8040:	0303044a 	movweq	r0, #13386	; 0x344a
    8044:	045801a5 	ldrbeq	r0, [r8], #-421	; 0xfffffe5b
    8048:	7ee40301 	cdpvc	3, 14, cr0, cr4, cr1, {0}
    804c:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
    8050:	04045d01 	streq	r5, [r4], #-3329	; 0xfffff2ff
    8054:	74038103 	strvc	r8, [r3], #-259	; 0xfffffefd
    8058:	01040200 	mrseq	r0, R12_usr
    805c:	043c1403 	ldrteq	r1, [ip], #-1027	; 0xfffffbfd
    8060:	04020001 	streq	r0, [r2], #-1
    8064:	7cef0301 	stclvc	3, cr0, [pc], #4	; 8070 <__exidx_end+0x2fc8>
    8068:	0304042e 	movweq	r0, #17454	; 0x442e
    806c:	322e03b7 	eorcc	r0, lr, #-603979774	; 0xdc000002
    8070:	4203241c 	andmi	r2, r3, #28, 8	; 0x1c000000
    8074:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
    8078:	2e140301 	cdpcs	3, 1, cr0, cr4, cr1, {0}
    807c:	02000104 	andeq	r0, r0, #4, 2
    8080:	f7030104 			; <UNDEFINED> instruction: 0xf7030104
    8084:	0903207c 	stmdbeq	r3, {r2, r3, r4, r5, r6, sp}
    8088:	281b412e 	ldmdacs	fp, {r1, r2, r3, r5, r8, lr}
    808c:	24384b83 	ldrtcs	r4, [r8], #-2947	; 0xfffff47d
    8090:	0304041b 	movweq	r0, #17435	; 0x441b
    8094:	002e02e7 	eoreq	r0, lr, r7, ror #5
    8098:	03010402 	movweq	r0, #5122	; 0x1402
    809c:	01043c14 	tsteq	r4, r4, lsl ip
    80a0:	01040200 	mrseq	r0, R12_usr
    80a4:	207d8d03 	rsbscs	r8, sp, r3, lsl #26
    80a8:	00170230 	andseq	r0, r7, r0, lsr r2
    80ac:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    80b0:	003dcc02 	eorseq	ip, sp, r2, lsl #24
    80b4:	01da0300 	bicseq	r0, sl, r0, lsl #6
    80b8:	2e1d0301 	cdpcs	3, 1, cr0, cr13, cr1, {0}
    80bc:	03206303 			; <UNDEFINED> instruction: 0x03206303
    80c0:	2f59201d 	svccs	0x0059201d
    80c4:	22323241 	eorscs	r3, r2, #268435460	; 0x10000004
    80c8:	9421321c 	strtls	r3, [r1], #-540	; 0xfffffde4
    80cc:	041b325c 	ldreq	r3, [fp], #-604	; 0xfffffda4
    80d0:	2e5f0305 	cdpcs	3, 5, cr0, cr15, cr5, {0}
    80d4:	03010421 	movweq	r0, #5153	; 0x1421
    80d8:	32432e24 	subcc	r2, r3, #36, 28	; 0x240
    80dc:	0504331b 	streq	r3, [r4, #-795]	; 0xfffffce5
    80e0:	21205003 			; <UNDEFINED> instruction: 0x21205003
    80e4:	2e030104 	adfcss	f0, f3, f4
    80e8:	0305042e 	movweq	r0, #21550	; 0x542e
    80ec:	01042e51 	tsteq	r4, r1, asr lr
    80f0:	04203403 	strteq	r3, [r0], #-1027	; 0xfffffbfd
    80f4:	204d0305 	subcs	r0, sp, r5, lsl #6
    80f8:	34030104 	strcc	r0, [r3], #-260	; 0xfffffefc
    80fc:	23652f2e 	cmncs	r5, #46, 30	; 0xb8
    8100:	214d2f69 	cmpcs	sp, r9, ror #30
    8104:	0032213e 	eorseq	r2, r2, lr, lsr r1
    8108:	06010402 	streq	r0, [r1], -r2, lsl #8
    810c:	0f030658 	svceq	0x00030658
    8110:	2f3fca4a 	svccs	0x003fca4a
    8114:	2b24242a 	blcs	9111c4 <__ccfg+0x8f121c>
    8118:	31934032 	orrscc	r4, r3, r2, lsr r0
    811c:	3e3d3e3d 	mrccc	14, 1, r3, cr13, cr13, {1}
    8120:	3c630321 	stclcc	3, cr0, [r3], #-132	; 0xffffff7c
    8124:	2026032d 	eorcs	r0, r6, sp, lsr #6
    8128:	3e3d3131 	mrccc	1, 1, r3, cr13, cr1, {1}
    812c:	03213e3d 			; <UNDEFINED> instruction: 0x03213e3d
    8130:	03212e0b 			; <UNDEFINED> instruction: 0x03212e0b
    8134:	09033c78 	stmdbeq	r3, {r3, r4, r5, r6, sl, fp, ip, sp}
    8138:	2e770320 	cdpcs	3, 7, cr0, cr7, cr0, {1}
    813c:	213c0e03 	teqcs	ip, r3, lsl #28
    8140:	03207103 			; <UNDEFINED> instruction: 0x03207103
    8144:	1d7b3c0f 	ldclne	12, cr3, [fp, #-60]!	; 0xffffffc4
    8148:	22652123 	rsbcs	r2, r5, #-1073741816	; 0xc0000008
    814c:	03282321 			; <UNDEFINED> instruction: 0x03282321
    8150:	21342078 	teqcs	r4, r8, ror r0
    8154:	213d4c22 	teqcs	sp, r2, lsr #24
    8158:	322c403e 	eorcc	r4, ip, #62	; 0x3e
    815c:	0021023d 	eoreq	r0, r1, sp, lsr r2
    8160:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    8164:	003fec02 	eorseq	lr, pc, r2, lsl #24
    8168:	03b60300 			; <UNDEFINED> instruction: 0x03b60300
    816c:	22402701 	subcs	r2, r0, #262144	; 0x40000
    8170:	4e24a22f 	cdpmi	2, 2, cr10, cr4, cr15, {1}
    8174:	864e2a40 	strbhi	r2, [lr], -r0, asr #20
    8178:	01000902 	tsteq	r0, r2, lsl #18
    817c:	02050001 	andeq	r0, r5, #1
    8180:	00000000 	andeq	r0, r0, r0
    8184:	0103e503 	tsteq	r3, r3, lsl #10
    8188:	2f200c03 	svccs	0x00200c03
    818c:	2d5a3028 	ldclcs	0, cr3, [sl, #-160]	; 0xffffff60
    8190:	1f322d30 	svcne	0x00322d30
    8194:	2f2b2421 	svccs	0x002b2421
    8198:	2f24322c 	svccs	0x0024322c
    819c:	4b2f3430 	blmi	bd5264 <__ccfg+0xbb52bc>
    81a0:	023e1e22 	eorseq	r1, lr, #544	; 0x220
    81a4:	0101000c 	tsteq	r1, ip
    81a8:	4c020500 	cfstr32mi	mvfx0, [r2], {-0}
    81ac:	03000040 	movweq	r0, #64	; 0x40
    81b0:	130104a6 	movwne	r0, #5286	; 0x14a6
    81b4:	0226483f 	eoreq	r4, r6, #4128768	; 0x3f0000
    81b8:	01010004 	tsteq	r1, r4
    81bc:	0000022b 	andeq	r0, r0, fp, lsr #4
    81c0:	01430002 	cmpeq	r3, r2
    81c4:	01020000 	mrseq	r0, (UNDEF: 2)
    81c8:	000d0efb 	strdeq	r0, [sp], -fp
    81cc:	01010101 	tsteq	r1, r1, lsl #2
    81d0:	01000000 	mrseq	r0, (UNDEF: 0)
    81d4:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    81d8:	2f2e2e2f 	svccs	0x002e2e2f
    81dc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    81e0:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    81e4:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    81e8:	0062696c 	rsbeq	r6, r2, ip, ror #18
    81ec:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    81f0:	63635c69 	cmnvs	r3, #26880	; 0x6900
    81f4:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    81f8:	302e302e 	eorcc	r3, lr, lr, lsr #32
    81fc:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    8200:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    8204:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    8208:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    820c:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    8210:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    8214:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    8218:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 80b0 <__exidx_end+0x3008>
    821c:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    8220:	63675c72 	cmnvs	r7, #29184	; 0x7200
    8224:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    8228:	6f6e2d6d 	svcvs	0x006e2d6d
    822c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    8230:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    8234:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    8238:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    823c:	615c3371 	cmpvs	ip, r1, ror r3
    8240:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    8244:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    8248:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    824c:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    8250:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    8254:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    8258:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    825c:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    8260:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    8264:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    8268:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    826c:	31303030 	teqcc	r0, r0, lsr r0
    8270:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    8274:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    8278:	61746562 	cmnvs	r4, r2, ror #10
    827c:	63635c32 	cmnvs	r3, #12800	; 0x3200
    8280:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    8284:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 80bc <__exidx_end+0x3014>
    8288:	6f635c73 	svcvs	0x00635c73
    828c:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    8290:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    8294:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    8298:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    829c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    82a0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    82a4:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    82a8:	3130322d 	teqcc	r0, sp, lsr #4
    82ac:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    82b0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    82b4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    82b8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    82bc:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    82c0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    82c4:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
    82c8:	63000073 	movwvs	r0, #115	; 0x73
    82cc:	69706968 	ldmdbvs	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    82d0:	2e6f666e 	cdpcs	6, 6, cr6, cr15, cr14, {3}
    82d4:	00010063 	andeq	r0, r1, r3, rrx
    82d8:	69686300 	stmdbvs	r8!, {r8, r9, sp, lr}^
    82dc:	666e6970 			; <UNDEFINED> instruction: 0x666e6970
    82e0:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    82e4:	5f000001 	svcpl	0x00000001
    82e8:	61666564 	cmnvs	r6, r4, ror #10
    82ec:	5f746c75 	svcpl	0x00746c75
    82f0:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    82f4:	00682e73 	rsbeq	r2, r8, r3, ror lr
    82f8:	5f000002 	svcpl	0x00000002
    82fc:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    8300:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    8304:	00000300 	andeq	r0, r0, r0, lsl #6
    8308:	02050000 	andeq	r0, r5, #0
    830c:	00000000 	andeq	r0, r0, r0
    8310:	0100c403 	tsteq	r0, r3, lsl #8
    8314:	06022f13 			; <UNDEFINED> instruction: 0x06022f13
    8318:	00010100 	andeq	r0, r1, r0, lsl #2
    831c:	00000205 	andeq	r0, r0, r5, lsl #4
    8320:	d0030000 	andle	r0, r3, r0
    8324:	2f140100 	svccs	0x00140100
    8328:	022e0a03 	eoreq	r0, lr, #12288	; 0x3000
    832c:	01010008 	tsteq	r1, r8
    8330:	64020500 	strvs	r0, [r2], #-1280	; 0xfffffb00
    8334:	03000040 	movweq	r0, #64	; 0x40
    8338:	1a0100e6 	bne	486d8 <__ccfg+0x28730>
    833c:	02044e2a 	andeq	r4, r4, #672	; 0x2a0
    8340:	2e019b03 	vmlacs.f64	d9, d1, d3
    8344:	e6030104 	str	r0, [r3], -r4, lsl #2
    8348:	4c232e7e 	stcmi	14, cr2, [r3], #-504	; 0xfffffe08
    834c:	2f724b4b 	svccs	0x00724b4b
    8350:	00050224 	andeq	r0, r5, r4, lsr #4
    8354:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    8358:	00000002 	andeq	r0, r0, r2
    835c:	01830300 	orreq	r0, r3, r0, lsl #6
    8360:	03020401 	movweq	r0, #9217	; 0x2401
    8364:	042001b0 	strteq	r0, [r0], #-432	; 0xfffffe50
    8368:	7ed60301 	cdpvc	3, 13, cr0, cr6, cr1, {0}
    836c:	2331392e 	teqcs	r1, #753664	; 0xb8000
    8370:	033c7803 	teqeq	ip, #196608	; 0x30000
    8374:	09034a0a 	stmdbeq	r3, {r1, r3, r9, fp, lr}
    8378:	0502252e 	streq	r2, [r2, #-1326]	; 0xfffffad2
    837c:	00010100 	andeq	r0, r1, r0, lsl #2
    8380:	40b00205 	adcsmi	r0, r0, r5, lsl #4
    8384:	a6030000 	strge	r0, [r3], -r0
    8388:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
    838c:	2000e303 	andcs	lr, r0, r3, lsl #6
    8390:	032e1103 			; <UNDEFINED> instruction: 0x032e1103
    8394:	11033c6f 	tstne	r3, pc, ror #24
    8398:	01042520 	tsteq	r4, r0, lsr #10
    839c:	3c7f8c03 	ldclcc	12, cr8, [pc], #-12	; 8398 <__exidx_end+0x32f0>
    83a0:	22219592 	eorcs	r9, r1, #612368384	; 0x24800000
    83a4:	41412221 	cmpmi	r1, r1, lsr #4
    83a8:	2e090339 	mcrcs	3, 0, r0, cr9, cr9, {1}
    83ac:	2e730327 	cdpcs	3, 7, cr0, cr3, cr7, {1}
    83b0:	20640321 	rsbcs	r0, r4, r1, lsr #6
    83b4:	02203003 	eoreq	r3, r0, #3
    83b8:	01010004 	tsteq	r1, r4
    83bc:	1c020500 	cfstr32ne	mvfx0, [r2], {-0}
    83c0:	03000041 	movweq	r0, #65	; 0x41
    83c4:	040101e0 	streq	r0, [r1], #-480	; 0xfffffe20
    83c8:	01a40302 			; <UNDEFINED> instruction: 0x01a40302
    83cc:	03010420 	movweq	r0, #5152	; 0x1420
    83d0:	042e7edd 	strteq	r7, [lr], #-3805	; 0xfffff123
    83d4:	02900302 	addseq	r0, r0, #134217728	; 0x8000000
    83d8:	0301042e 	movweq	r0, #5166	; 0x142e
    83dc:	002e7df0 	strdeq	r7, [lr], -r0	; <UNPREDICTABLE>
    83e0:	03010402 	movweq	r0, #5122	; 0x1402
    83e4:	02022e09 	andeq	r2, r2, #9, 28	; 0x90
    83e8:	1e010100 	adfnes	f0, f1, f0
    83ec:	02000002 	andeq	r0, r0, #2
    83f0:	00014200 	andeq	r4, r1, r0, lsl #4
    83f4:	fb010200 	blx	48bfe <__ccfg+0x28c56>
    83f8:	01000d0e 	tsteq	r0, lr, lsl #26
    83fc:	00010101 	andeq	r0, r1, r1, lsl #2
    8400:	00010000 	andeq	r0, r1, r0
    8404:	2f2e0100 	svccs	0x002e0100
    8408:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    840c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8410:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    8414:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    8418:	63006269 	movwvs	r6, #617	; 0x269
    841c:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    8420:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    8424:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    8428:	30302e30 	eorscc	r2, r0, r0, lsr lr
    842c:	5f393130 	svcpl	0x00393130
    8430:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    8434:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    8438:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    843c:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    8440:	6f745c36 	svcvs	0x00745c36
    8444:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    8448:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    844c:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    8450:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    8454:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    8458:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    845c:	61652d65 	cmnvs	r5, r5, ror #26
    8460:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    8464:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    8468:	71353130 	teqvc	r5, r0, lsr r1
    846c:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    8470:	6f6e2d6d 	svcvs	0x006e2d6d
    8474:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    8478:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    847c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    8480:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    8484:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    8488:	00656e69 	rsbeq	r6, r5, r9, ror #28
    848c:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    8490:	63635c69 	cmnvs	r3, #26880	; 0x6900
    8494:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    8498:	302e302e 	eorcc	r3, lr, lr, lsr #32
    849c:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    84a0:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    84a4:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    84a8:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    84ac:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    84b0:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    84b4:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    84b8:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 8350 <__exidx_end+0x32a8>
    84bc:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    84c0:	63675c72 	cmnvs	r7, #29184	; 0x7200
    84c4:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    84c8:	6f6e2d6d 	svcvs	0x006e2d6d
    84cc:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    84d0:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    84d4:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    84d8:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    84dc:	615c3371 	cmpvs	ip, r1, ror r3
    84e0:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    84e4:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    84e8:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    84ec:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    84f0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    84f4:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
    84f8:	64640000 	strbtvs	r0, [r4], #-0
    84fc:	00682e69 	rsbeq	r2, r8, r9, ror #28
    8500:	64000001 	strvs	r0, [r0], #-1
    8504:	632e6964 			; <UNDEFINED> instruction: 0x632e6964
    8508:	00000100 	andeq	r0, r0, r0, lsl #2
    850c:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    8510:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    8514:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    8518:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    851c:	00000200 	andeq	r0, r0, r0, lsl #4
    8520:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    8524:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    8528:	00030068 	andeq	r0, r3, r8, rrx
    852c:	75706300 	ldrbvc	r6, [r0, #-768]!	; 0xfffffd00
    8530:	0100682e 	tsteq	r0, lr, lsr #16
    8534:	00000000 	andeq	r0, r0, r0
    8538:	41340205 	teqmi	r4, r5, lsl #4
    853c:	88030000 	stmdahi	r3, {}	; <UNPREDICTABLE>
    8540:	31200101 			; <UNDEFINED> instruction: 0x31200101
    8544:	221e5030 	andscs	r5, lr, #48	; 0x30
    8548:	022c2322 	eoreq	r2, ip, #-2013265920	; 0x88000000
    854c:	01010005 	tsteq	r1, r5
    8550:	05000204 	streq	r0, [r0, #-516]	; 0xfffffdfc
    8554:	00415c02 	subeq	r5, r1, r2, lsl #24
    8558:	00c30300 	sbceq	r0, r3, r0, lsl #6
    855c:	010a0301 	tsteq	sl, r1, lsl #6
    8560:	01000402 	tsteq	r0, r2, lsl #8
    8564:	00020401 	andeq	r0, r2, r1, lsl #8
    8568:	00000205 	andeq	r0, r0, r5, lsl #4
    856c:	d8030000 	stmdale	r3, {}	; <UNPREDICTABLE>
    8570:	0e030100 	adfeqs	f0, f3, f0
    8574:	03233301 			; <UNDEFINED> instruction: 0x03233301
    8578:	35352e78 	ldrcc	r2, [r5, #-3704]!	; 0xfffff188
    857c:	0004024f 	andeq	r0, r4, pc, asr #4
    8580:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
    8584:	00020500 	andeq	r0, r2, r0, lsl #10
    8588:	03000000 	movweq	r0, #0
    858c:	03010185 	movweq	r0, #4485	; 0x1185
    8590:	6f032011 	svcvs	0x00032011
    8594:	2e130320 	cdpcs	3, 1, cr0, cr3, cr0, {1}
    8598:	032e7903 			; <UNDEFINED> instruction: 0x032e7903
    859c:	03342e09 	teqeq	r4, #9, 28	; 0x90
    85a0:	03442e71 	movteq	r2, #20081	; 0x4e71
    85a4:	2d2f2e0c 	stccs	14, cr2, [pc, #-48]!	; 857c <__exidx_end+0x34d4>
    85a8:	01000202 	tsteq	r0, r2, lsl #4
    85ac:	00020401 	andeq	r0, r2, r1, lsl #8
    85b0:	00000205 	andeq	r0, r0, r5, lsl #4
    85b4:	af030000 	svcge	0x00030000
    85b8:	11030101 	tstne	r3, r1, lsl #2
    85bc:	74031b20 	strvc	r1, [r3], #-2848	; 0xfffff4e0
    85c0:	2013032e 	andscs	r0, r3, lr, lsr #6
    85c4:	0301042f 	movweq	r0, #5167	; 0x142f
    85c8:	4d302069 	ldcmi	0, cr2, [r0, #-420]!	; 0xfffffe5c
    85cc:	22231d23 	eorcs	r1, r3, #2240	; 0x8c0
    85d0:	03020421 	movweq	r0, #9249	; 0x2421
    85d4:	05022e1d 	streq	r2, [r2, #-3613]	; 0xfffff1e3
    85d8:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    85dc:	02050002 	andeq	r0, r5, #2
    85e0:	00000000 	andeq	r0, r0, r0
    85e4:	0101de03 	tsteq	r1, r3, lsl #28
    85e8:	1b201103 	blne	80c9fc <__ccfg+0x7eca54>
    85ec:	032e7403 			; <UNDEFINED> instruction: 0x032e7403
    85f0:	302d2e14 	eorcc	r2, sp, r4, lsl lr
    85f4:	b9030104 	stmdblt	r3, {r2, r8}
    85f8:	4d30207f 	ldcmi	0, cr2, [r0, #-508]!	; 0xfffffe04
    85fc:	22231d23 	eorcs	r1, r3, #2240	; 0x8c0
    8600:	03020421 	movweq	r0, #9249	; 0x2421
    8604:	422e00c8 	eormi	r0, lr, #200	; 0xc8
    8608:	01000502 	tsteq	r0, r2, lsl #10
    860c:	00024301 	andeq	r4, r2, r1, lsl #6
    8610:	95000300 	strls	r0, [r0, #-768]	; 0xfffffd00
    8614:	02000001 	andeq	r0, r0, #1
    8618:	0d0efb01 	vstreq	d15, [lr, #-4]
    861c:	01010100 	mrseq	r0, (UNDEF: 17)
    8620:	00000001 	andeq	r0, r0, r1
    8624:	01000001 	tsteq	r0, r1
    8628:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    862c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8630:	2f2e2e2f 	svccs	0x002e2e2f
    8634:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    8638:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    863c:	2f2e2e2f 	svccs	0x002e2e2f
    8640:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    8644:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 84a8 <__exidx_end+0x3400>
    8648:	2f636269 	svccs	0x00636269
    864c:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    8650:	2f656e69 	svccs	0x00656e69
    8654:	2f6d7261 	svccs	0x006d7261
    8658:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    865c:	74732f2e 	ldrbtvc	r2, [r3], #-3886	; 0xfffff0d2
    8660:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    8664:	73752f00 	cmnvc	r5, #0, 30
    8668:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    866c:	63672f62 	cmnvs	r7, #392	; 0x188
    8670:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    8674:	6f6e2d6d 	svcvs	0x006e2d6d
    8678:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    867c:	2f696261 	svccs	0x00696261
    8680:	2e332e38 	mrccs	14, 1, r2, cr3, cr8, {1}
    8684:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    8688:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    868c:	622f0065 	eorvs	r0, pc, #101	; 0x65
    8690:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    8694:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    8698:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    869c:	45565643 	ldrbmi	r5, [r6, #-1603]	; 0xfffff9bd
    86a0:	6e2f7879 	mcrvs	8, 1, r7, cr15, cr9, {3}
    86a4:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    86a8:	2e332d62 	cdpcs	13, 3, cr2, cr3, cr2, {3}
    86ac:	2f302e33 	svccs	0x00302e33
    86b0:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    86b4:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 8518 <__exidx_end+0x3470>
    86b8:	2f636269 	svccs	0x00636269
    86bc:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    86c0:	2f656475 	svccs	0x00656475
    86c4:	00737973 	rsbseq	r7, r3, r3, ror r9
    86c8:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    86cc:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    86d0:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    86d4:	56432d62 	strbpl	r2, [r3], -r2, ror #26
    86d8:	78794556 	ldmdavc	r9!, {r1, r2, r4, r6, r8, sl, lr}^
    86dc:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    86e0:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    86e4:	2e332e33 	mrccs	14, 1, r2, cr3, cr3, {1}
    86e8:	656e2f30 	strbvs	r2, [lr, #-3888]!	; 0xfffff0d0
    86ec:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    86f0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    86f4:	6f6c2f63 	svcvs	0x006c2f63
    86f8:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    86fc:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    8700:	2f646c69 	svccs	0x00646c69
    8704:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    8708:	432d6269 			; <UNDEFINED> instruction: 0x432d6269
    870c:	79455656 	stmdbvc	r5, {r1, r2, r4, r6, r9, sl, ip, lr}^
    8710:	656e2f78 	strbvs	r2, [lr, #-3960]!	; 0xfffff088
    8714:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    8718:	332e332d 			; <UNDEFINED> instruction: 0x332e332d
    871c:	6e2f302e 	cdpvs	0, 2, cr3, cr15, cr14, {1}
    8720:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    8724:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    8728:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    872c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    8730:	00006564 	andeq	r6, r0, r4, ror #10
    8734:	636d656d 	cmnvs	sp, #457179136	; 0x1b400000
    8738:	632e7970 			; <UNDEFINED> instruction: 0x632e7970
    873c:	00000100 	andeq	r0, r0, r0, lsl #2
    8740:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
    8744:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    8748:	00000200 	andeq	r0, r0, r0, lsl #4
    874c:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    8750:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    8754:	00000300 	andeq	r0, r0, r0, lsl #6
    8758:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    875c:	00682e74 	rsbeq	r2, r8, r4, ror lr
    8760:	6c000003 	stcvs	0, cr0, [r0], {3}
    8764:	2e6b636f 	cdpcs	3, 6, cr6, cr11, cr15, {3}
    8768:	00030068 	andeq	r0, r3, r8, rrx
    876c:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    8770:	61636f6c 	cmnvs	r3, ip, ror #30
    8774:	682e656c 	stmdavs	lr!, {r2, r3, r5, r6, r8, sl, sp, lr}
    8778:	00000400 	andeq	r0, r0, r0, lsl #8
    877c:	6c647473 	cfstrdvs	mvd7, [r4], #-460	; 0xfffffe34
    8780:	682e6269 	stmdavs	lr!, {r0, r3, r5, r6, r9, sp, lr}
    8784:	00000500 	andeq	r0, r0, r0, lsl #10
    8788:	61686377 	smcvs	34359	; 0x8637
    878c:	00682e72 	rsbeq	r2, r8, r2, ror lr
    8790:	6c000005 	stcvs	0, cr0, [r0], {5}
    8794:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
    8798:	00682e65 	rsbeq	r2, r8, r5, ror #28
    879c:	73000005 	movwvc	r0, #5
    87a0:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    87a4:	00682e67 	rsbeq	r2, r8, r7, ror #28
    87a8:	00000005 	andeq	r0, r0, r5
    87ac:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    87b0:	00416402 	subeq	r6, r1, r2, lsl #8
    87b4:	01330300 	teqeq	r3, r0, lsl #6
    87b8:	0e030305 	cdpeq	3, 0, cr0, cr3, cr5, {0}
    87bc:	13131301 	tstne	r3, #67108864	; 0x4000000
    87c0:	06010516 			; <UNDEFINED> instruction: 0x06010516
    87c4:	05016b03 	streq	r6, [r1, #-2819]	; 0xfffff4fd
    87c8:	3c150306 	ldccc	3, cr0, [r5], {6}
    87cc:	02001c05 	andeq	r1, r0, #1280	; 0x500
    87d0:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
    87d4:	04020018 	streq	r0, [r2], #-24	; 0xffffffe8
    87d8:	02006601 	andeq	r6, r0, #1048576	; 0x100000
    87dc:	059e0104 	ldreq	r0, [lr, #260]	; 0x104
    87e0:	0528060b 	streq	r0, [r8, #-1547]!	; 0xfffff9f5
    87e4:	3013061a 	andscc	r0, r3, sl, lsl r6
    87e8:	060b0539 			; <UNDEFINED> instruction: 0x060b0539
    87ec:	1a05132f 	bne	14d4b0 <__ccfg+0x12d508>
    87f0:	0b050106 	bleq	148c10 <__ccfg+0x128c68>
    87f4:	06133d06 	ldreq	r3, [r3], -r6, lsl #26
    87f8:	030d0501 	movweq	r0, #54529	; 0xd501
    87fc:	0a03207a 	beq	d09ec <__ccfg+0xb0a44>
    8800:	203c204a 	eorscs	r2, ip, sl, asr #32
    8804:	060b0520 	streq	r0, [fp], -r0, lsr #10
    8808:	061a0530 			; <UNDEFINED> instruction: 0x061a0530
    880c:	060b0501 	streq	r0, [fp], -r1, lsl #10
    8810:	0501062f 	streq	r0, [r1, #-1583]	; 0xfffff9d1
    8814:	4a581d0d 	bmi	160fc50 <__ccfg+0x15efca8>
    8818:	030e0520 	movweq	r0, #58656	; 0xe520
    881c:	0905200b 	stmdbeq	r5, {r0, r1, r3, sp}
    8820:	2e5e0320 	cdpcs	3, 5, cr0, cr14, cr0, {1}
    8824:	0605052e 	streq	r0, [r5], -lr, lsr #10
    8828:	05202303 	streq	r2, [r0, #-771]!	; 0xfffffcfd
    882c:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    8830:	01053b09 	tsteq	r5, r9, lsl #22
    8834:	03090533 	movweq	r0, #38195	; 0x9533
    8838:	0e055859 	mcreq	8, 0, r5, cr5, cr9, {2}
    883c:	05202203 	streq	r2, [r0, #-515]!	; 0xfffffdfd
    8840:	0e052009 	cdpeq	0, 0, cr2, cr5, cr9, {0}
    8844:	0309053c 	movweq	r0, #38204	; 0x953c
    8848:	0d05205e 	stceq	0, cr2, [r5, #-376]	; 0xfffffe88
    884c:	022e1703 	eoreq	r1, lr, #786432	; 0xc0000
    8850:	01010002 	tsteq	r1, r2
    8854:	00000171 	andeq	r0, r0, r1, ror r1
    8858:	01170003 	tsteq	r7, r3
    885c:	01020000 	mrseq	r0, (UNDEF: 2)
    8860:	000d0efb 	strdeq	r0, [sp], -fp
    8864:	01010101 	tsteq	r1, r1, lsl #2
    8868:	01000000 	mrseq	r0, (UNDEF: 0)
    886c:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    8870:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8874:	2f2e2e2f 	svccs	0x002e2e2f
    8878:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    887c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8880:	2f2e2e2f 	svccs	0x002e2e2f
    8884:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    8888:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 86ec <__exidx_end+0x3644>
    888c:	2f636269 	svccs	0x00636269
    8890:	6c647473 	cfstrdvs	mvd7, [r4], #-460	; 0xfffffe34
    8894:	2f006269 	svccs	0x00006269
    8898:	2f727375 	svccs	0x00727375
    889c:	2f62696c 	svccs	0x0062696c
    88a0:	2f636367 	svccs	0x00636367
    88a4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    88a8:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    88ac:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    88b0:	2e382f69 	cdpcs	15, 3, cr2, cr8, cr9, {3}
    88b4:	2f312e33 	svccs	0x00312e33
    88b8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    88bc:	00656475 	rsbeq	r6, r5, r5, ror r4
    88c0:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    88c4:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    88c8:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    88cc:	56432d62 	strbpl	r2, [r3], -r2, ror #26
    88d0:	78794556 	ldmdavc	r9!, {r1, r2, r4, r6, r8, sl, lr}^
    88d4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    88d8:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    88dc:	2e332e33 	mrccs	14, 1, r2, cr3, cr3, {1}
    88e0:	656e2f30 	strbvs	r2, [lr, #-3888]!	; 0xfffff0d0
    88e4:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    88e8:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    88ec:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    88f0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    88f4:	79732f65 	ldmdbvc	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    88f8:	622f0073 	eorvs	r0, pc, #115	; 0x73
    88fc:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    8900:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    8904:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    8908:	45565643 	ldrbmi	r5, [r6, #-1603]	; 0xfffff9bd
    890c:	6e2f7879 	mcrvs	8, 1, r7, cr15, cr9, {3}
    8910:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    8914:	2e332d62 	cdpcs	13, 3, cr2, cr3, cr2, {3}
    8918:	2f302e33 	svccs	0x00302e33
    891c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    8920:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 8784 <__exidx_end+0x36dc>
    8924:	2f636269 	svccs	0x00636269
    8928:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    892c:	00656475 	rsbeq	r6, r5, r5, ror r4
    8930:	6e617200 	cdpvs	2, 6, cr7, cr1, cr0, {0}
    8934:	00632e64 	rsbeq	r2, r3, r4, ror #28
    8938:	73000001 	movwvc	r0, #1
    893c:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
    8940:	00682e66 	rsbeq	r2, r8, r6, ror #28
    8944:	5f000002 	svcpl	0x00000002
    8948:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    894c:	00682e73 	rsbeq	r2, r8, r3, ror lr
    8950:	72000003 	andvc	r0, r0, #3
    8954:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    8958:	0300682e 	movweq	r6, #2094	; 0x82e
    895c:	6f6c0000 	svcvs	0x006c0000
    8960:	682e6b63 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    8964:	00000300 	andeq	r0, r0, r0, lsl #6
    8968:	6c647473 	cfstrdvs	mvd7, [r4], #-460	; 0xfffffe34
    896c:	682e6269 	stmdavs	lr!, {r0, r3, r5, r6, r9, sp, lr}
    8970:	00000400 	andeq	r0, r0, r0, lsl #8
    8974:	00010500 	andeq	r0, r1, r0, lsl #10
    8978:	42100205 	andsmi	r0, r0, #1342177280	; 0x50000000
    897c:	3e030000 	cdpcc	0, 0, cr0, cr3, cr0, {0}
    8980:	13030501 	movwne	r0, #13569	; 0x3501
    8984:	05141d05 	ldreq	r1, [r4, #-3333]	; 0xfffff2fb
    8988:	1b051303 	blne	14d59c <__ccfg+0x12d5f4>
    898c:	202e0106 	eorcs	r0, lr, r6, lsl #2
    8990:	2f010520 	svccs	0x00010520
    8994:	03054e06 	movweq	r4, #24070	; 0x5e06
    8998:	06120513 			; <UNDEFINED> instruction: 0x06120513
    899c:	1f010501 	svcne	0x00010501
    89a0:	05211205 	streq	r1, [r1, #-517]!	; 0xfffffdfb
    89a4:	0525061d 	streq	r0, [r5, #-1565]!	; 0xfffff9e3
    89a8:	06051303 	streq	r1, [r5], -r3, lsl #6
    89ac:	1e051306 	cdpne	3, 0, cr1, cr5, cr6, {0}
    89b0:	44054a20 	strmi	r4, [r5], #-2592	; 0xfffff5e0
    89b4:	491b052e 	ldmdbmi	fp, {r1, r2, r3, r5, r8, sl}
    89b8:	30060305 	andcc	r0, r6, r5, lsl #6
    89bc:	01060a05 	tsteq	r6, r5, lsl #20
    89c0:	012f0105 			; <UNDEFINED> instruction: 0x012f0105
    89c4:	01000a02 	tsteq	r0, r2, lsl #20
    89c8:	0001c501 	andeq	ip, r1, r1, lsl #10
    89cc:	7e000300 	cdpvc	3, 0, cr0, cr0, cr0, {0}
    89d0:	02000001 	andeq	r0, r0, #1
    89d4:	0d0efb01 	vstreq	d15, [lr, #-4]
    89d8:	01010100 	mrseq	r0, (UNDEF: 17)
    89dc:	00000001 	andeq	r0, r0, r1
    89e0:	01000001 	tsteq	r0, r1
    89e4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    89e8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    89ec:	2f2e2e2f 	svccs	0x002e2e2f
    89f0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    89f4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    89f8:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    89fc:	2f62696c 	svccs	0x0062696c
    8a00:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    8a04:	6d69742f 	cfstrdvs	mvd7, [r9, #-188]!	; 0xffffff44
    8a08:	752f0065 	strvc	r0, [pc, #-101]!	; 89ab <__exidx_end+0x3903>
    8a0c:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 8848 <__exidx_end+0x37a0>
    8a10:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    8a14:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    8a18:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    8a1c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    8a20:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    8a24:	332e382f 			; <UNDEFINED> instruction: 0x332e382f
    8a28:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    8a2c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    8a30:	2f006564 	svccs	0x00006564
    8a34:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    8a38:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    8a3c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    8a40:	5656432d 	ldrbpl	r4, [r6], -sp, lsr #6
    8a44:	2f787945 	svccs	0x00787945
    8a48:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    8a4c:	332d6269 			; <UNDEFINED> instruction: 0x332d6269
    8a50:	302e332e 	eorcc	r3, lr, lr, lsr #6
    8a54:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    8a58:	2f62696c 	svccs	0x0062696c
    8a5c:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    8a60:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    8a64:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    8a68:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    8a6c:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    8a70:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    8a74:	2f646c69 	svccs	0x00646c69
    8a78:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    8a7c:	432d6269 			; <UNDEFINED> instruction: 0x432d6269
    8a80:	79455656 	stmdbvc	r5, {r1, r2, r4, r6, r9, sl, ip, lr}^
    8a84:	656e2f78 	strbvs	r2, [lr, #-3960]!	; 0xfffff088
    8a88:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    8a8c:	332e332d 			; <UNDEFINED> instruction: 0x332e332d
    8a90:	6e2f302e 	cdpvs	0, 2, cr3, cr15, cr14, {1}
    8a94:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    8a98:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    8a9c:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    8aa0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    8aa4:	732f6564 			; <UNDEFINED> instruction: 0x732f6564
    8aa8:	2f007379 	svccs	0x00007379
    8aac:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    8ab0:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    8ab4:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    8ab8:	5656432d 	ldrbpl	r4, [r6], -sp, lsr #6
    8abc:	2f787945 	svccs	0x00787945
    8ac0:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    8ac4:	332d6269 			; <UNDEFINED> instruction: 0x332d6269
    8ac8:	302e332e 	eorcc	r3, lr, lr, lsr #6
    8acc:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    8ad0:	2f62696c 	svccs	0x0062696c
    8ad4:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    8ad8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    8adc:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    8ae0:	69740000 	ldmdbvs	r4!, {}^	; <UNPREDICTABLE>
    8ae4:	632e656d 			; <UNDEFINED> instruction: 0x632e656d
    8ae8:	00000100 	andeq	r0, r0, r0, lsl #2
    8aec:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
    8af0:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    8af4:	00000200 	andeq	r0, r0, r0, lsl #4
    8af8:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    8afc:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    8b00:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    8b04:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    8b08:	00000300 	andeq	r0, r0, r0, lsl #6
    8b0c:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    8b10:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    8b14:	00000400 	andeq	r0, r0, r0, lsl #8
    8b18:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    8b1c:	00682e74 	rsbeq	r2, r8, r4, ror lr
    8b20:	6c000004 	stcvs	0, cr0, [r0], {4}
    8b24:	2e6b636f 	cdpcs	3, 6, cr6, cr11, cr15, {3}
    8b28:	00040068 	andeq	r0, r4, r8, rrx
    8b2c:	69745f00 	ldmdbvs	r4!, {r8, r9, sl, fp, ip, lr}^
    8b30:	6176656d 	cmnvs	r6, sp, ror #10
    8b34:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    8b38:	74000004 	strvc	r0, [r0], #-4
    8b3c:	2e656d69 	cdpcs	13, 6, cr6, cr5, cr9, {3}
    8b40:	00050068 	andeq	r0, r5, r8, rrx
    8b44:	65657200 	strbvs	r7, [r5, #-512]!	; 0xfffffe00
    8b48:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    8b4c:	00000500 	andeq	r0, r0, r0, lsl #10
    8b50:	00010500 	andeq	r0, r1, r0, lsl #10
    8b54:	425c0205 	subsmi	r0, ip, #1342177280	; 0x50000000
    8b58:	24030000 	strcs	r0, [r3], #-0
    8b5c:	13030501 	movwne	r0, #13569	; 0x3501
    8b60:	06010514 			; <UNDEFINED> instruction: 0x06010514
    8b64:	2307050f 	movwcs	r0, #29967	; 0x750f
    8b68:	201d0105 	andscs	r0, sp, r5, lsl #2
    8b6c:	2e230705 	cdpcs	7, 2, cr0, cr3, cr5, {0}
    8b70:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
    8b74:	054d0603 	strbeq	r0, [sp, #-1539]	; 0xfffff9fd
    8b78:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    8b7c:	052f0605 	streq	r0, [pc, #-1541]!	; 857f <__exidx_end+0x34d7>
    8b80:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    8b84:	052f0603 	streq	r0, [pc, #-1539]!	; 8589 <__exidx_end+0x34e1>
    8b88:	20130601 	andscs	r0, r3, r1, lsl #12
    8b8c:	0007023c 	andeq	r0, r7, ip, lsr r2
    8b90:	01ed0101 	mvneq	r0, r1, lsl #2
    8b94:	00030000 	andeq	r0, r3, r0
    8b98:	00000192 	muleq	r0, r2, r1
    8b9c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    8ba0:	0101000d 	tsteq	r1, sp
    8ba4:	00000101 	andeq	r0, r0, r1, lsl #2
    8ba8:	00000100 	andeq	r0, r0, r0, lsl #2
    8bac:	2f2e2e01 	svccs	0x002e2e01
    8bb0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    8bb4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8bb8:	2f2e2e2f 	svccs	0x002e2e2f
    8bbc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    8bc0:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    8bc4:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    8bc8:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    8bcc:	65722f63 	ldrbvs	r2, [r2, #-3939]!	; 0xfffff09d
    8bd0:	00746e65 	rsbseq	r6, r4, r5, ror #28
    8bd4:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    8bd8:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    8bdc:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    8be0:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    8be4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    8be8:	61652d65 	cmnvs	r5, r5, ror #26
    8bec:	382f6962 	stmdacc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    8bf0:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
    8bf4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    8bf8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    8bfc:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    8c00:	2f646c69 	svccs	0x00646c69
    8c04:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    8c08:	432d6269 			; <UNDEFINED> instruction: 0x432d6269
    8c0c:	79455656 	stmdbvc	r5, {r1, r2, r4, r6, r9, sl, ip, lr}^
    8c10:	656e2f78 	strbvs	r2, [lr, #-3960]!	; 0xfffff088
    8c14:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    8c18:	332e332d 			; <UNDEFINED> instruction: 0x332e332d
    8c1c:	6e2f302e 	cdpvs	0, 2, cr3, cr15, cr14, {1}
    8c20:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    8c24:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    8c28:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    8c2c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    8c30:	6d2f6564 	cfstr32vs	mvfx6, [pc, #-400]!	; 8aa8 <__exidx_end+0x3a00>
    8c34:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    8c38:	2f00656e 	svccs	0x0000656e
    8c3c:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    8c40:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    8c44:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    8c48:	5656432d 	ldrbpl	r4, [r6], -sp, lsr #6
    8c4c:	2f787945 	svccs	0x00787945
    8c50:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    8c54:	332d6269 			; <UNDEFINED> instruction: 0x332d6269
    8c58:	302e332e 	eorcc	r3, lr, lr, lsr #6
    8c5c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    8c60:	2f62696c 	svccs	0x0062696c
    8c64:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    8c68:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    8c6c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    8c70:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    8c74:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    8c78:	2f646c69 	svccs	0x00646c69
    8c7c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    8c80:	432d6269 			; <UNDEFINED> instruction: 0x432d6269
    8c84:	79455656 	stmdbvc	r5, {r1, r2, r4, r6, r9, sl, ip, lr}^
    8c88:	656e2f78 	strbvs	r2, [lr, #-3960]!	; 0xfffff088
    8c8c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    8c90:	332e332d 			; <UNDEFINED> instruction: 0x332e332d
    8c94:	6e2f302e 	cdpvs	0, 2, cr3, cr15, cr14, {1}
    8c98:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    8c9c:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    8ca0:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    8ca4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    8ca8:	00006564 	andeq	r6, r0, r4, ror #10
    8cac:	74746567 	ldrbtvc	r6, [r4], #-1383	; 0xfffffa99
    8cb0:	6f656d69 	svcvs	0x00656d69
    8cb4:	79616466 	stmdbvc	r1!, {r1, r2, r5, r6, sl, sp, lr}^
    8cb8:	00632e72 	rsbeq	r2, r3, r2, ror lr
    8cbc:	73000001 	movwvc	r0, #1
    8cc0:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
    8cc4:	00682e66 	rsbeq	r2, r8, r6, ror #28
    8cc8:	5f000002 	svcpl	0x00000002
    8ccc:	61666564 	cmnvs	r6, r4, ror #10
    8cd0:	5f746c75 	svcpl	0x00746c75
    8cd4:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    8cd8:	00682e73 	rsbeq	r2, r8, r3, ror lr
    8cdc:	5f000003 	svcpl	0x00000003
    8ce0:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    8ce4:	00682e73 	rsbeq	r2, r8, r3, ror lr
    8ce8:	72000004 	andvc	r0, r0, #4
    8cec:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    8cf0:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    8cf4:	6f6c0000 	svcvs	0x006c0000
    8cf8:	682e6b63 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    8cfc:	00000400 	andeq	r0, r0, r0, lsl #8
    8d00:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
    8d04:	6c617665 	stclvs	6, cr7, [r1], #-404	; 0xfffffe6c
    8d08:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    8d0c:	69740000 	ldmdbvs	r4!, {}^	; <UNPREDICTABLE>
    8d10:	682e656d 	stmdavs	lr!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}
    8d14:	00000500 	andeq	r0, r0, r0, lsl #10
    8d18:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    8d1c:	00682e74 	rsbeq	r2, r8, r4, ror lr
    8d20:	74000005 	strvc	r0, [r0], #-5
    8d24:	2e656d69 	cdpcs	13, 6, cr6, cr5, cr9, {3}
    8d28:	00040068 	andeq	r0, r4, r8, rrx
    8d2c:	01050000 	mrseq	r0, (UNDEF: 5)
    8d30:	94020500 	strls	r0, [r2], #-1280	; 0xfffffb00
    8d34:	03000042 	movweq	r0, #66	; 0x42
    8d38:	03050139 	movweq	r0, #20793	; 0x5139
    8d3c:	09051413 	stmdbeq	r5, {r0, r1, r4, sl, ip}
    8d40:	01050106 	tsteq	r5, r6, lsl #2
    8d44:	2309051d 	movwcs	r0, #38173	; 0x951d
    8d48:	051d0105 	ldreq	r0, [sp, #-261]	; 0xfffffefb
    8d4c:	0905320e 	stmdbeq	r5, {r1, r2, r3, r9, ip, sp}
    8d50:	0603051f 			; <UNDEFINED> instruction: 0x0603051f
    8d54:	060e0521 	streq	r0, [lr], -r1, lsr #10
    8d58:	2e060501 	cfsh32cs	mvfx0, mvfx6, #1
    8d5c:	01310105 	teqeq	r1, r5, lsl #2
    8d60:	02004205 	andeq	r4, r0, #1342177280	; 0x50000000
    8d64:	05390104 	ldreq	r0, [r9, #-260]!	; 0xfffffefc
    8d68:	04020039 	streq	r0, [r2], #-57	; 0xffffffc7
    8d6c:	05052001 	streq	r2, [r5, #-1]
    8d70:	11052f06 	tstne	r5, r6, lsl #30
    8d74:	03050106 	movweq	r0, #20742	; 0x5106
    8d78:	0a052106 	beq	151198 <__ccfg+0x1311f0>
    8d7c:	04020106 	streq	r0, [r2], #-262	; 0xfffffefa
    8d80:	dc010100 	stfles	f0, [r1], {-0}
    8d84:	03000000 	movweq	r0, #0
    8d88:	0000d600 	andeq	sp, r0, r0, lsl #12
    8d8c:	fb010200 	blx	49596 <__ccfg+0x295ee>
    8d90:	01000d0e 	tsteq	r0, lr, lsl #26
    8d94:	00010101 	andeq	r0, r1, r1, lsl #2
    8d98:	00010000 	andeq	r0, r1, r0
    8d9c:	752f0100 	strvc	r0, [pc, #-256]!	; 8ca4 <__exidx_end+0x3bfc>
    8da0:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 8bdc <__exidx_end+0x3b34>
    8da4:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    8da8:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    8dac:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    8db0:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    8db4:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    8db8:	332e382f 			; <UNDEFINED> instruction: 0x332e382f
    8dbc:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    8dc0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    8dc4:	2f006564 	svccs	0x00006564
    8dc8:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    8dcc:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    8dd0:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    8dd4:	5656432d 	ldrbpl	r4, [r6], -sp, lsr #6
    8dd8:	2f787945 	svccs	0x00787945
    8ddc:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    8de0:	332d6269 			; <UNDEFINED> instruction: 0x332d6269
    8de4:	302e332e 	eorcc	r3, lr, lr, lsr #6
    8de8:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    8dec:	2f62696c 	svccs	0x0062696c
    8df0:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    8df4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    8df8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    8dfc:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    8e00:	2f2e2e00 	svccs	0x002e2e00
    8e04:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    8e08:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8e0c:	2f2e2e2f 	svccs	0x002e2e2f
    8e10:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    8e14:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    8e18:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    8e1c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    8e20:	65722f63 	ldrbvs	r2, [r2, #-3939]!	; 0xfffff09d
    8e24:	00746e65 	rsbseq	r6, r4, r5, ror #28
    8e28:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    8e2c:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    8e30:	00010068 	andeq	r0, r1, r8, rrx
    8e34:	79745f00 	ldmdbvc	r4!, {r8, r9, sl, fp, ip, lr}^
    8e38:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    8e3c:	00020068 	andeq	r0, r2, r8, rrx
    8e40:	65657200 	strbvs	r7, [r5, #-512]!	; 0xfffffe00
    8e44:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    8e48:	00000200 	andeq	r0, r0, r0, lsl #4
    8e4c:	6b636f6c 	blvs	18e4c04 <__ccfg+0x18c4c5c>
    8e50:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    8e54:	6d690000 	stclvs	0, cr0, [r9, #-0]
    8e58:	65727570 	ldrbvs	r7, [r2, #-1392]!	; 0xfffffa90
    8e5c:	0300632e 	movweq	r6, #814	; 0x32e
    8e60:	04000000 	streq	r0, [r0], #-0
    8e64:	03000002 	movweq	r0, #2
    8e68:	00011700 	andeq	r1, r1, r0, lsl #14
    8e6c:	fb010200 	blx	49676 <__ccfg+0x296ce>
    8e70:	01000d0e 	tsteq	r0, lr, lsl #26
    8e74:	00010101 	andeq	r0, r1, r1, lsl #2
    8e78:	00010000 	andeq	r0, r1, r0
    8e7c:	2e2e0100 	sufcse	f0, f6, f0
    8e80:	2f2e2e2f 	svccs	0x002e2e2f
    8e84:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    8e88:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8e8c:	2f2e2e2f 	svccs	0x002e2e2f
    8e90:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    8e94:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    8e98:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    8e9c:	722f6362 	eorvc	r6, pc, #-2013265919	; 0x88000001
    8ea0:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    8ea4:	73752f00 	cmnvc	r5, #0, 30
    8ea8:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    8eac:	63672f62 	cmnvs	r7, #392	; 0x188
    8eb0:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    8eb4:	6f6e2d6d 	svcvs	0x006e2d6d
    8eb8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    8ebc:	2f696261 	svccs	0x00696261
    8ec0:	2e332e38 	mrccs	14, 1, r2, cr3, cr8, {1}
    8ec4:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    8ec8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    8ecc:	622f0065 	eorvs	r0, pc, #101	; 0x65
    8ed0:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    8ed4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    8ed8:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    8edc:	45565643 	ldrbmi	r5, [r6, #-1603]	; 0xfffff9bd
    8ee0:	6e2f7879 	mcrvs	8, 1, r7, cr15, cr9, {3}
    8ee4:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    8ee8:	2e332d62 	cdpcs	13, 3, cr2, cr3, cr2, {3}
    8eec:	2f302e33 	svccs	0x00302e33
    8ef0:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    8ef4:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 8d58 <__exidx_end+0x3cb0>
    8ef8:	2f636269 	svccs	0x00636269
    8efc:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    8f00:	2f656475 	svccs	0x00656475
    8f04:	00737973 	rsbseq	r7, r3, r3, ror r9
    8f08:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    8f0c:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    8f10:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    8f14:	56432d62 	strbpl	r2, [r3], -r2, ror #26
    8f18:	78794556 	ldmdavc	r9!, {r1, r2, r4, r6, r8, sl, lr}^
    8f1c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    8f20:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    8f24:	2e332e33 	mrccs	14, 1, r2, cr3, cr3, {1}
    8f28:	656e2f30 	strbvs	r2, [lr, #-3888]!	; 0xfffff0d0
    8f2c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    8f30:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    8f34:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    8f38:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    8f3c:	72000065 	andvc	r0, r0, #101	; 0x65
    8f40:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    8f44:	0100632e 	tsteq	r0, lr, lsr #6
    8f48:	74730000 	ldrbtvc	r0, [r3], #-0
    8f4c:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    8f50:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    8f54:	745f0000 	ldrbvc	r0, [pc], #-0	; 8f5c <__exidx_end+0x3eb4>
    8f58:	73657079 	cmnvc	r5, #121	; 0x79
    8f5c:	0300682e 	movweq	r6, #2094	; 0x82e
    8f60:	65720000 	ldrbvs	r0, [r2, #-0]!
    8f64:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    8f68:	00030068 	andeq	r0, r3, r8, rrx
    8f6c:	636f6c00 	cmnvs	pc, #0, 24
    8f70:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    8f74:	73000003 	movwvc	r0, #3
    8f78:	696c6474 	stmdbvs	ip!, {r2, r4, r5, r6, sl, sp, lr}^
    8f7c:	00682e62 	rsbeq	r2, r8, r2, ror #28
    8f80:	00000004 	andeq	r0, r0, r4
    8f84:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    8f88:	00000002 	andeq	r0, r0, r2
    8f8c:	01220300 			; <UNDEFINED> instruction: 0x01220300
    8f90:	05140305 	ldreq	r0, [r4, #-773]	; 0xfffffcfb
    8f94:	20100601 	andscs	r0, r0, r1, lsl #12
    8f98:	05220b05 	streq	r0, [r2, #-2821]!	; 0xfffff4fb
    8f9c:	06051e01 	streq	r1, [r5], -r1, lsl #28
    8fa0:	06050522 	streq	r0, [r5], -r2, lsr #10
    8fa4:	3003052f 	andcc	r0, r3, pc, lsr #10
    8fa8:	4b060105 	blmi	1893c4 <__ccfg+0x16941c>
    8fac:	054e0601 	strbeq	r0, [lr, #-1537]	; 0xfffff9ff
    8fb0:	0b051303 	bleq	14dbc4 <__ccfg+0x12dc1c>
    8fb4:	06050106 	streq	r0, [r5], -r6, lsl #2
    8fb8:	1f010520 	svcne	0x00010520
    8fbc:	21060520 	tstcs	r6, r0, lsr #10
    8fc0:	35060705 	strcc	r0, [r6, #-1797]	; 0xfffff8fb
    8fc4:	01060b05 	tsteq	r6, r5, lsl #22
    8fc8:	05200a05 	streq	r0, [r0, #-2565]!	; 0xfffff5fb
    8fcc:	14410608 	strbne	r0, [r1], #-1544	; 0xfffff9f8
    8fd0:	01061005 	tsteq	r6, r5
    8fd4:	21060805 	tstcs	r6, r5, lsl #16
    8fd8:	01060e05 	tsteq	r6, r5, lsl #28
    8fdc:	30060505 	andcc	r0, r6, r5, lsl #10
    8fe0:	060d0513 			; <UNDEFINED> instruction: 0x060d0513
    8fe4:	06050501 	streq	r0, [r5], -r1, lsl #10
    8fe8:	053c0621 	ldreq	r0, [ip, #-1569]!	; 0xfffff9df
    8fec:	052e1c0e 	streq	r1, [lr, #-3086]!	; 0xfffff3f2
    8ff0:	04020004 	streq	r0, [r2], #-4
    8ff4:	03061b02 	movweq	r1, #27394	; 0x6b02
    8ff8:	20062e0d 	andcs	r2, r6, sp, lsl #28
    8ffc:	0607053c 			; <UNDEFINED> instruction: 0x0607053c
    9000:	060b0514 			; <UNDEFINED> instruction: 0x060b0514
    9004:	200a0501 	andcs	r0, sl, r1, lsl #10
    9008:	2f060205 	svccs	0x00060205
    900c:	1c030705 	stcne	7, cr0, [r3], {5}
    9010:	060f053c 			; <UNDEFINED> instruction: 0x060f053c
    9014:	3c0a0501 	cfstr32cc	mvfx0, [sl], {1}
    9018:	02002e05 	andeq	r2, r0, #5, 28	; 0x50
    901c:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
    9020:	0402001a 	streq	r0, [r2], #-26	; 0xffffffe6
    9024:	08053c01 	stmdaeq	r5, {r0, sl, fp, ip, sp}
    9028:	05133306 	ldreq	r3, [r3, #-774]	; 0xfffffcfa
    902c:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    9030:	06210608 	strteq	r0, [r1], -r8, lsl #12
    9034:	1c04053c 	cfstr32ne	mvfx0, [r4], {60}	; 0x3c
    9038:	0607052e 	streq	r0, [r7], -lr, lsr #10
    903c:	05010a03 	streq	r0, [r1, #-2563]	; 0xfffff5fd
    9040:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    9044:	0205200a 	andeq	r2, r5, #10
    9048:	07052f06 	streq	r2, [r5, -r6, lsl #30]
    904c:	060a0543 	streq	r0, [sl], -r3, asr #10
    9050:	06040501 	streq	r0, [r4], -r1, lsl #10
    9054:	14054c40 	strne	r4, [r5], #-3136	; 0xfffff3c0
    9058:	07050106 	streq	r0, [r5, -r6, lsl #2]
    905c:	0606053c 			; <UNDEFINED> instruction: 0x0606053c
    9060:	0601052f 	streq	r0, [r1], -pc, lsr #10
    9064:	06020142 	streq	r0, [r2], -r2, asr #2
    9068:	9b010100 	blls	49470 <__ccfg+0x294c8>
    906c:	03000001 	movweq	r0, #1
    9070:	0000e200 	andeq	lr, r0, r0, lsl #4
    9074:	fb010200 	blx	4987e <__ccfg+0x298d6>
    9078:	01000d0e 	tsteq	r0, lr, lsl #26
    907c:	00010101 	andeq	r0, r1, r1, lsl #2
    9080:	00010000 	andeq	r0, r1, r0
    9084:	2e2e0100 	sufcse	f0, f6, f0
    9088:	2f2e2e2f 	svccs	0x002e2e2f
    908c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    9090:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    9094:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    9098:	00636367 	rsbeq	r6, r3, r7, ror #6
    909c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    90a0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    90a4:	2f2e2e2f 	svccs	0x002e2e2f
    90a8:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 8ff8 <__exidx_end+0x3f50>
    90ac:	63676269 	cmnvs	r7, #-1879048186	; 0x90000006
    90b0:	2e2e2f63 	cdpcs	15, 2, cr2, cr14, cr3, {3}
    90b4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    90b8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    90bc:	2f2e2e00 	svccs	0x002e2e00
    90c0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    90c4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    90c8:	672f2e2f 	strvs	r2, [pc, -pc, lsr #28]!
    90cc:	2e006363 	cdpcs	3, 0, cr6, cr0, cr3, {3}
    90d0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    90d4:	2f2e2e2f 	svccs	0x002e2e2f
    90d8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    90dc:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
    90e0:	63636762 	cmnvs	r3, #25690112	; 0x1880000
    90e4:	2f2e2e2f 	svccs	0x002e2e2f
    90e8:	2f636367 	svccs	0x00636367
    90ec:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    90f0:	612f6769 			; <UNDEFINED> instruction: 0x612f6769
    90f4:	00006d72 	andeq	r6, r0, r2, ror sp
    90f8:	6762696c 	strbvs	r6, [r2, -ip, ror #18]!
    90fc:	2e326363 	cdpcs	3, 3, cr6, cr2, cr3, {3}
    9100:	00010063 	andeq	r0, r1, r3, rrx
    9104:	73616800 	cmnvc	r1, #0, 16
    9108:	62617468 	rsbvs	r7, r1, #104, 8	; 0x68000000
    910c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    9110:	72610000 	rsbvc	r0, r1, #0
    9114:	73692d6d 	cmnvc	r9, #6976	; 0x1b40
    9118:	00682e61 	rsbeq	r2, r8, r1, ror #28
    911c:	61000003 	tstvs	r0, r3
    9120:	632d6d72 			; <UNDEFINED> instruction: 0x632d6d72
    9124:	682e7570 	stmdavs	lr!, {r4, r5, r6, r8, sl, ip, sp, lr}
    9128:	00000300 	andeq	r0, r0, r0, lsl #6
    912c:	6e736e69 	cdpvs	14, 7, cr6, cr3, cr9, {3}
    9130:	6e6f632d 	cdpvs	3, 6, cr6, cr15, cr13, {1}
    9134:	6e617473 	mcrvs	4, 3, r7, cr1, cr3, {3}
    9138:	682e7374 	stmdavs	lr!, {r2, r4, r5, r6, r8, r9, ip, sp, lr}
    913c:	00000300 	andeq	r0, r0, r0, lsl #6
    9140:	2e6d7261 	cdpcs	2, 6, cr7, cr13, cr1, {3}
    9144:	00040068 	andeq	r0, r4, r8, rrx
    9148:	62696c00 	rsbvs	r6, r9, #0, 24
    914c:	32636367 	rsbcc	r6, r3, #-1677721599	; 0x9c000001
    9150:	0100682e 	tsteq	r0, lr, lsr #16
    9154:	05000000 	streq	r0, [r0, #-0]
    9158:	02050001 	andeq	r0, r5, #1
    915c:	000042c0 	andeq	r4, r0, r0, asr #5
    9160:	0104a403 	tsteq	r4, r3, lsl #8
    9164:	13130305 	tstne	r3, #335544320	; 0x14000000
    9168:	01160513 	tsteq	r6, r3, lsl r5
    916c:	01010101 	tsteq	r1, r1, lsl #2
    9170:	0f060105 	svceq	0x00060105
    9174:	05311605 	ldreq	r1, [r1, #-1541]!	; 0xfffff9fb
    9178:	16051d01 	strne	r1, [r5], -r1, lsl #26
    917c:	2e062e31 	mcrcs	14, 0, r2, cr6, cr1, {1}
    9180:	2e012020 	cdpcs	0, 0, cr2, cr1, cr0, {1}
    9184:	20062001 	andcs	r2, r6, r1
    9188:	06202006 	strteq	r2, [r0], -r6
    918c:	05200620 	streq	r0, [r0, #-1568]!	; 0xfffff9e0
    9190:	050f0601 	streq	r0, [pc, #-1537]	; 8b97 <__exidx_end+0x3aef>
    9194:	02002316 	andeq	r2, r0, #1476395008	; 0x58000000
    9198:	2e060104 	adfcss	f0, f6, f4
    919c:	03040200 	movweq	r0, #16896	; 0x4200
    91a0:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
    91a4:	00200603 	eoreq	r0, r0, r3, lsl #12
    91a8:	06030402 	streq	r0, [r3], -r2, lsl #8
    91ac:	00220520 	eoreq	r0, r2, r0, lsr #10
    91b0:	06030402 	streq	r0, [r3], -r2, lsl #8
    91b4:	001e0514 	andseq	r0, lr, r4, lsl r5
    91b8:	2f030402 	svccs	0x00030402
    91bc:	02001605 	andeq	r1, r0, #5242880	; 0x500000
    91c0:	051d0304 	ldreq	r0, [sp, #-772]	; 0xfffffcfc
    91c4:	0402000c 	streq	r0, [r2], #-12
    91c8:	16052203 	strne	r2, [r5], -r3, lsl #4
    91cc:	03040200 	movweq	r0, #16896	; 0x4200
    91d0:	0402001e 	streq	r0, [r2], #-30	; 0xffffffe2
    91d4:	02002003 	andeq	r2, r0, #3
    91d8:	2e060304 	cdpcs	3, 0, cr0, cr6, cr4, {0}
    91dc:	03040200 	movweq	r0, #16896	; 0x4200
    91e0:	00030501 	andeq	r0, r3, r1, lsl #10
    91e4:	14030402 	strne	r0, [r3], #-1026	; 0xfffffbfe
    91e8:	02000c05 	andeq	r0, r0, #1280	; 0x500
    91ec:	01060304 	tsteq	r6, r4, lsl #6
    91f0:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
    91f4:	23060304 	movwcs	r0, #25348	; 0x6304
    91f8:	02000105 	andeq	r0, r0, #1073741825	; 0x40000001
    91fc:	13060304 	movwne	r0, #25348	; 0x6304
    9200:	03040200 	movweq	r0, #16896	; 0x4200
    9204:	00050201 	andeq	r0, r5, r1, lsl #4
    9208:	01b00101 	lslseq	r0, r1, #2
    920c:	00030000 	andeq	r0, r3, r0
    9210:	0000017e 	andeq	r0, r0, lr, ror r1
    9214:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    9218:	0101000d 	tsteq	r1, sp
    921c:	00000101 	andeq	r0, r0, r1, lsl #2
    9220:	00000100 	andeq	r0, r0, r0, lsl #2
    9224:	2f2e2e01 	svccs	0x002e2e01
    9228:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    922c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    9230:	2f2e2e2f 	svccs	0x002e2e2f
    9234:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 9184 <__exidx_end+0x40dc>
    9238:	6c676269 	sfmvs	f6, 2, [r7], #-420	; 0xfffffe5c
    923c:	2f73736f 	svccs	0x0073736f
    9240:	6e62696c 	vnmulvs.f16	s13, s4, s25	; <UNPREDICTABLE>
    9244:	7379736f 	cmnvc	r9, #-1140850687	; 0xbc000001
    9248:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    924c:	2f646c69 	svccs	0x00646c69
    9250:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    9254:	432d6269 			; <UNDEFINED> instruction: 0x432d6269
    9258:	79455656 	stmdbvc	r5, {r1, r2, r4, r6, r9, sl, ip, lr}^
    925c:	656e2f78 	strbvs	r2, [lr, #-3960]!	; 0xfffff088
    9260:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    9264:	332e332d 			; <UNDEFINED> instruction: 0x332e332d
    9268:	6e2f302e 	cdpvs	0, 2, cr3, cr15, cr14, {1}
    926c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    9270:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    9274:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    9278:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    927c:	6d2f6564 	cfstr32vs	mvfx6, [pc, #-400]!	; 90f4 <__exidx_end+0x404c>
    9280:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    9284:	2f00656e 	svccs	0x0000656e
    9288:	2f727375 	svccs	0x00727375
    928c:	2f62696c 	svccs	0x0062696c
    9290:	2f636367 	svccs	0x00636367
    9294:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    9298:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    929c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    92a0:	2e382f69 	cdpcs	15, 3, cr2, cr8, cr9, {3}
    92a4:	2f312e33 	svccs	0x00312e33
    92a8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    92ac:	00656475 	rsbeq	r6, r5, r5, ror r4
    92b0:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    92b4:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    92b8:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    92bc:	56432d62 	strbpl	r2, [r3], -r2, ror #26
    92c0:	78794556 	ldmdavc	r9!, {r1, r2, r4, r6, r8, sl, lr}^
    92c4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    92c8:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    92cc:	2e332e33 	mrccs	14, 1, r2, cr3, cr3, {1}
    92d0:	656e2f30 	strbvs	r2, [lr, #-3888]!	; 0xfffff0d0
    92d4:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    92d8:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    92dc:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    92e0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    92e4:	79732f65 	ldmdbvc	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    92e8:	622f0073 	eorvs	r0, pc, #115	; 0x73
    92ec:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    92f0:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    92f4:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    92f8:	45565643 	ldrbmi	r5, [r6, #-1603]	; 0xfffff9bd
    92fc:	6e2f7879 	mcrvs	8, 1, r7, cr15, cr9, {3}
    9300:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    9304:	2e332d62 	cdpcs	13, 3, cr2, cr3, cr2, {3}
    9308:	2f302e33 	svccs	0x00302e33
    930c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    9310:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 9174 <__exidx_end+0x40cc>
    9314:	2f636269 	svccs	0x00636269
    9318:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    931c:	00656475 	rsbeq	r6, r5, r5, ror r4
    9320:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
    9324:	2e646f74 	mcrcs	15, 3, r6, cr4, cr4, {3}
    9328:	00010063 	andeq	r0, r1, r3, rrx
    932c:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    9330:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    9334:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    9338:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    933c:	00020068 	andeq	r0, r2, r8, rrx
    9340:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    9344:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    9348:	00030068 	andeq	r0, r3, r8, rrx
    934c:	79745f00 	ldmdbvc	r4!, {r8, r9, sl, fp, ip, lr}^
    9350:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    9354:	00040068 	andeq	r0, r4, r8, rrx
    9358:	69745f00 	ldmdbvs	r4!, {r8, r9, sl, fp, ip, lr}^
    935c:	6176656d 	cmnvs	r6, sp, ror #10
    9360:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    9364:	72000004 	andvc	r0, r0, #4
    9368:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    936c:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    9370:	6f6c0000 	svcvs	0x006c0000
    9374:	682e6b63 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    9378:	00000400 	andeq	r0, r0, r0, lsl #8
    937c:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    9380:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    9384:	72650000 	rsbvc	r0, r5, #0
    9388:	2e6f6e72 	mcrcs	14, 3, r6, cr15, cr2, {3}
    938c:	00040068 	andeq	r0, r4, r8, rrx
    9390:	01050000 	mrseq	r0, (UNDEF: 5)
    9394:	14020500 	strne	r0, [r2], #-1280	; 0xfffffb00
    9398:	03000043 	movweq	r0, #67	; 0x43
    939c:	03050113 	movweq	r0, #20755	; 0x5113
    93a0:	06090513 			; <UNDEFINED> instruction: 0x06090513
    93a4:	210a0501 	tstcs	sl, r1, lsl #10
    93a8:	051f0905 	ldreq	r0, [pc, #-2309]	; 8aab <__exidx_end+0x3a03>
    93ac:	09052201 	stmdbeq	r5, {r0, r9, sp}
    93b0:	0603051e 			; <UNDEFINED> instruction: 0x0603051e
    93b4:	06010521 	streq	r0, [r1], -r1, lsr #10
    93b8:	00030213 	andeq	r0, r3, r3, lsl r2
    93bc:	Address 0x00000000000093bc is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	6f636572 	svcvs	0x00636572
       4:	45006472 	strmi	r6, [r0, #-1138]	; 0xfffffb8e
       8:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
       c:	6c700073 	ldclvs	0, cr0, [r0], #-460	; 0xfffffe34
}
      10:	6e5f6775 	mrcvs	7, 2, r6, cr15, cr5, {3}
      14:	006c6c75 	rsbeq	r6, ip, r5, ror ip
      18:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
      1c:	5f62616c 	svcpl	0x0062616c
      20:	5f746547 	svcpl	0x00746547
      24:	65636552 	strbvs	r6, [r3, #-1362]!	; 0xfffffaae
      28:	6e697669 	cdpvs	6, 6, cr7, cr9, cr9, {3}
      2c:	6f4e5f67 	svcvs	0x004e5f67
      30:	5f006564 	svcpl	0x00006564
      34:	5f69705f 	svcpl	0x0069705f
      38:	5f626370 	svcpl	0x00626370
      3c:	64700073 	ldrbtvs	r0, [r0], #-115	; 0xffffff8d
			i = k;
      40:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
				j->Next = k;
      44:	735f5f00 	cmpvc	pc, #0, 30
      48:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
}
      4c:	6f72505f 	svcvs	0x0072505f
      50:	5f74706d 	svcpl	0x0074706d
      54:	6f636552 	svcvs	0x00636552
		release;
      58:	495f6472 	ldmdbmi	pc, {r1, r4, r5, r6, sl, sp, lr}^	; <UNPREDICTABLE>
      5c:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
		b->length - b->u.pointers.head - b->u.pointers.tail;
      60:	6e6f5f00 	cdpvs	15, 6, cr5, cr15, cr0, {0}
	b->u.pointers.tail =
      64:	6978655f 	ldmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, sl, sp, lr}^
}
      68:	72615f74 	rsbvc	r5, r1, #116, 30	; 0x1d0
		return NULL;
      6c:	5f007367 	svcpl	0x00007367
      70:	6f746377 	svcvs	0x00746377
      74:	735f626d 	cmpvc	pc, #-805306362	; 0xd0000006
      78:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
      7c:	73656d00 	cmnvc	r5, #0, 26
      80:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
      84:	34725f00 	ldrbtcc	r5, [r2], #-3840	; 0xfffff100
      88:	5f5f0038 	svcpl	0x005f0038
      8c:	616c7473 	smcvs	51011	; 0xc743
      90:	69465f62 	stmdbvs	r6, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
      94:	4e5f646e 	cdpmi	4, 5, cr6, cr15, cr14, {3}
      98:	68676965 	stmdavs	r7!, {r0, r2, r5, r6, r8, fp, sp, lr}^
      9c:	72756f62 	rsbsvc	r6, r5, #392	; 0x188
      a0:	6f6e0073 	svcvs	0x006e0073
      a4:	64496564 	strbvs	r6, [r9], #-1380	; 0xfffffa9c
      a8:	735f5f00 	cmpvc	pc, #0, 30
      ac:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
      b0:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
      b4:	646f4e5f 	strbtvs	r4, [pc], #-3679	; bc <g_pfnVectors+0xbc>
      b8:	44495f65 	strbmi	r5, [r9], #-3941	; 0xfffff09b
      bc:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
      c0:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
      c4:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
char * assembleMessage(message * messagePtr) {
      c8:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
      cc:	31393130 	teqcc	r9, r0, lsr r1
      d0:	20353230 	eorscs	r3, r5, r0, lsr r2
      d4:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
      d8:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
        p = (char*)umalloc(6);
      dc:	415b2029 	cmpmi	fp, r9, lsr #32
      e0:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
    p[0] = messagePtr->senderGroupId;
      e4:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
      e8:	6172622d 	cmnvs	r2, sp, lsr #4
    p[2] = messagePtr->messageType;
      ec:	2068636e 	rsbcs	r6, r8, lr, ror #6
    p[3] = messagePtr->requestNumber;
      f0:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    p[4] = messagePtr->senderId;
      f4:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
    p[5] = messagePtr->destinationId;
      f8:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
        p = (char*)umalloc(8);
      fc:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
     100:	636d2d20 	cmnvs	sp, #32, 26	; 0x800
     104:	633d7570 	teqvs	sp, #112, 10	; 0x1c000000
        p[7] = 0x00;
     108:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
        break;
     10c:	336d2d78 	cmncc	sp, #120, 26	; 0x1e00
        p = (char*)umalloc(26);
     110:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
        strcpy(p + 6, messagePtr->messageRecord);
     114:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
     118:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
        strcpy(p + 8, messagePtr->messageRecord);
     11c:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
        p = (char*)umalloc(28);
     120:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
     124:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
     128:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
        p[7] = 0x00;
     12c:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
     130:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
        strcpy(p + 8, messagePtr->messageRecord);
     134:	6d2d3776 	stcvs	7, cr3, [sp, #-472]!	; 0xfffffe28
    switch(messageType) 
     138:	20672d20 	rsbcs	r2, r7, r0, lsr #26
int getPacketSize(char messageType) {
     13c:	7764672d 	strbvc	r6, [r4, -sp, lsr #14]!
     140:	2d667261 	sfmcs	f7, 2, [r6, #-388]!	; 0xfffffe7c
}
     144:	672d2033 			; <UNDEFINED> instruction: 0x672d2033
     148:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
fsm transmitter (message * messagePtr) {
     14c:	642d7463 	strtvs	r7, [sp], #-1123	; 0xfffffb9d
     150:	66726177 			; <UNDEFINED> instruction: 0x66726177
     154:	734f2d20 	movtvc	r2, #64800	; 0xfd20
}
     158:	74732d20 	ldrbtvc	r2, [r3], #-3360	; 0xfffff2e0
     15c:	39633d64 	stmdbcc	r3!, {r2, r5, r6, r8, sl, fp, ip, sp}^
fsm transmitter (message * messagePtr) {
     160:	662d2039 			; <UNDEFINED> instruction: 0x662d2039
        char * assembledMessage = assembleMessage(messagePtr);
     164:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
     168:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     16c:	6365732d 	cmnvs	r5, #-1275068416	; 0xb4000000
        spkt = tcv_wnp (Transmit_Message, sfd,  getPacketSize(messagePtr->messageType));
     170:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     174:	662d2073 			; <UNDEFINED> instruction: 0x662d2073
     178:	61746164 	cmnvs	r4, r4, ror #2
     17c:	6365732d 	cmnvs	r5, #-1275068416	; 0xb4000000
     180:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
        spkt [0] = 0;
     184:	662d2073 			; <UNDEFINED> instruction: 0x662d2073
        strcpy(p, assembledMessage);
     188:	732d6f6e 			; <UNDEFINED> instruction: 0x732d6f6e
        tcv_endp (spkt);
     18c:	63697274 	cmnvs	r9, #116, 4	; 0x40000007
     190:	6c612d74 	stclvs	13, cr2, [r1], #-464	; 0xfffffe30
}
     194:	69736169 	ldmdbvs	r3!, {r0, r3, r5, r6, r8, sp, lr}^
        finish;
     198:	2d20676e 	stccs	7, cr6, [r0, #-440]!	; 0xfffffe48
     19c:	6d736166 	ldfvse	f6, [r3, #-408]!	; 0xfffffe68
     1a0:	6d662d20 	stclvs	13, cr2, [r6, #-128]!	; 0xffffff80
char randomNumber() {
     1a4:	652d7861 	strvs	r7, [sp, #-2145]!	; 0xfffff79f
   srand((unsigned) time(&t));
     1a8:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
     1ac:	30313d73 	eorscc	r3, r1, r3, ror sp
   return (char)rand();
     1b0:	625f5f00 	subsvs	r5, pc, #0, 30
}
     1b4:	735f7373 	cmpvc	pc, #-872415231	; 0xcc000001
     1b8:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
fsm find {
     1bc:	5f005f5f 	svcpl	0x00005f5f
     1c0:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     1c4:	475f6261 	ldrbmi	r6, [pc, -r1, ror #4]
     1c8:	4e5f7465 	cdpmi	4, 5, cr7, cr15, cr5, {3}
        i = 0;
     1cc:	5f65646f 	svcpl	0x0065646f
     1d0:	73004449 	movwvc	r4, #1097	; 0x449
        sendCount = 0;
     1d4:	43646e65 	cmnmi	r4, #1616	; 0x650
        currentRequestNumber = randomNumber();
     1d8:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
        messagePtr -> senderGroupId = groupId;
     1dc:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
     1e0:	746d745f 	strbtvc	r7, [sp], #-1119	; 0xfffffba1
     1e4:	6f6f7200 	svcvs	0x006f7200
     1e8:	6c5f0074 	mrrcvs	0, 7, r0, pc, cr4	; <UNPREDICTABLE>
        messagePtr -> requestNumber = currentRequestNumber;
     1ec:	69736662 	ldmdbvs	r3!, {r1, r5, r6, r9, sl, sp, lr}^
     1f0:	5f00657a 	svcpl	0x0000657a
        messagePtr -> senderId = nodeId;
     1f4:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
     1f8:	65680073 	strbvs	r0, [r8, #-115]!	; 0xffffff8d
     1fc:	67006461 	strvs	r6, [r0, -r1, ror #8]
        if(sendCount == 2) {
     200:	61507465 	cmpvs	r0, r5, ror #8
     204:	74656b63 	strbtvc	r6, [r5], #-2915	; 0xfffff49d
            proceed Display_Neighbours;
     208:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0xfffff6ad
        call transmitter(messagePtr, Wait);
     20c:	6f727000 	svcvs	0x00727000
     210:	6f636f74 	svcvs	0x00636f74
     214:	4c5f006c 	mrrcmi	0, 6, r0, pc, cr12	; <UNPREDICTABLE>
     218:	5f4b434f 	svcpl	0x004b434f
     21c:	55434552 	strbpl	r4, [r3, #-1362]	; 0xfffffaae
     220:	56495352 			; <UNDEFINED> instruction: 0x56495352
        sendCount++;
     224:	00545f45 	subseq	r5, r4, r5, asr #30
        delay(3*1024, Send_Discovery_Request);
     228:	65737361 	ldrbvs	r7, [r3, #-865]!	; 0xfffffc9f
     22c:	656c626d 	strbvs	r6, [ip, #-621]!	; 0xfffffd93
     230:	73654d64 	cmnvc	r5, #100, 26	; 0x1900
        ser_outf(Display_Neighbours, "Neighbours:");
     234:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
     238:	69656e00 	stmdbvs	r5!, {r9, sl, fp, sp, lr}^
        if (neighbours[i] == 1) {
     23c:	6f626867 	svcvs	0x00626867
     240:	6f437275 	svcvs	0x00437275
     244:	00746e75 	rsbseq	r6, r4, r5, ror lr
            ser_outf(Display_Neighbour, " %d", i);
     248:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
     24c:	5f62616c 	svcpl	0x0062616c
        i++;
     250:	5f746547 	svcpl	0x00746547
     254:	6f636552 	svcvs	0x00636552
            proceed Display_Neighbour;
     258:	495f6472 	ldmdbmi	pc, {r1, r4, r5, r6, sl, sp, lr}^	; <UNPREDICTABLE>
     25c:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
}
     260:	626d5f00 	rsbvs	r5, sp, #0, 30
        finish;
     264:	6e656c72 	mcrvs	12, 3, r6, cr5, cr2, {3}
}
     268:	6174735f 	cmnvs	r4, pc, asr r3
     26c:	66006574 			; <UNDEFINED> instruction: 0x66006574
     270:	6c627473 	cfstrdvs	mvd7, [r2], #-460	; 0xfffffe34
     274:	5f5f006b 	svcpl	0x005f006b
     278:	6f5f6970 	svcvs	0x005f6970
     27c:	6900646c 	stmdbvs	r0, {r2, r3, r5, r6, sl, sp, lr}
     280:	6c615673 	stclvs	6, cr5, [r1], #-460	; 0xfffffe34
     284:	6f4e6469 	svcvs	0x004e6469
     288:	64496564 	strbvs	r6, [r9], #-1380	; 0xfffffa9c
     28c:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
     290:	74756f64 	ldrbtvc	r6, [r5], #-3940	; 0xfffff09c
     294:	73656400 	cmnvc	r5, #0, 8
fsm root {
     298:	616e6974 	smcvs	59028	; 0xe694
     29c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     2a0:	5f006449 	svcpl	0x00006449
     2a4:	736f7066 	cmnvc	pc, #102	; 0x66
     2a8:	5f00745f 	svcpl	0x0000745f
     2ac:	00736e66 	rsbseq	r6, r3, r6, ror #28
     2b0:	6f6f635f 	svcvs	0x006f635f
     2b4:	0065696b 	rsbeq	r6, r5, fp, ror #18
     2b8:	5f766374 	svcpl	0x00766374
     2bc:	6f666e69 	svcvs	0x00666e69
     2c0:	73797300 	cmnvc	r9, #0, 6
     2c4:	5f746174 	svcpl	0x00746174
     2c8:	5f5f0074 	svcpl	0x005f0074
        recordCount = 0;
     2cc:	5f737362 	svcpl	0x00737362
        nodeId = 1;
     2d0:	5f646e65 	svcpl	0x00646e65
     2d4:	6172005f 	cmnvs	r2, pc, asr r0
        groupId = 1;
     2d8:	6d6f646e 	cfstrdvs	mvd6, [pc, #-440]!	; 128 <_Min_Stack_Size+0x28>
     2dc:	626d754e 	rsbvs	r7, sp, #327155712	; 0x13800000
        messagePtr = (message *) umalloc(sizeof(message));
     2e0:	5f007265 	svcpl	0x00007265
        phys_cc1350(0, MAX_PACKET_LENGTH);
     2e4:	69676942 	stmdbvs	r7!, {r1, r6, r8, fp, sp, lr}^
     2e8:	5f00746e 	svcpl	0x0000746e
     2ec:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
        tcv_plug(0, &plug_null);
     2f0:	495f6261 	ldmdbmi	pc, {r0, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
     2f4:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
        sfd = tcv_open(WNONE, 0, 0);
     2f8:	7a696c61 	bvc	1a5b484 <__ccfg+0x1a3b4dc>
     2fc:	5f5f0065 	svcpl	0x005f0065
     300:	775f6d74 			; <UNDEFINED> instruction: 0x775f6d74
		tcv_control(sfd, PHYSOPT_ON, NULL);
     304:	00796164 	rsbseq	r6, r9, r4, ror #2
        sfd = tcv_open(WNONE, 0, 0);
     308:	7365725f 	cmnvc	r5, #-268435451	; 0xf0000005
		tcv_control(sfd, PHYSOPT_ON, NULL);
     30c:	00746c75 	rsbseq	r6, r4, r5, ror ip
		if (sfd < 0) {
     310:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
			diag("Cannot open tcv interface");
     314:	5f62616c 	svcpl	0x0062616c
     318:	5f746547 	svcpl	0x00746547
			halt();
     31c:	7373654d 	cmnvc	r3, #322961408	; 0x13400000
        currentProtocol = IDLE;
     320:	00656761 	rsbeq	r6, r5, r1, ror #14
     324:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
        ser_outf(Menu_Header, "\r\nGroup %d Device #%d (%d/%d records)\r\n", groupId, nodeId, recordCount, MAX_RECORDS);
     328:	5f62616c 	svcpl	0x0062616c
     32c:	5f746553 	svcpl	0x00746553
     330:	756f7247 	strbvc	r7, [pc, #-583]!	; f1 <assembleMessage+0x29>
     334:	44495f70 	strbmi	r5, [r9], #-3952	; 0xfffff090
     338:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 340 <root+0xa8>
     33c:	6f685f6d 	svcvs	0x00685f6d
        ser_outf(Options, menu);
     340:	65007275 	strvs	r7, [r0, #-629]	; 0xfffffd8b
     344:	6f72746e 	svcvs	0x0072746e
        ser_inf(Get_Choice, "%c", &choice);
     348:	5f007970 	svcpl	0x00007970
     34c:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     350:	475f6261 	ldrbmi	r6, [pc, -r1, ror #4]
        switch (choice)
     354:	435f7465 	cmpmi	pc, #1694498816	; 0x65000000
     358:	63696f68 	cmnvs	r9, #104, 30	; 0x1a0
     35c:	5f5f0065 	svcpl	0x005f0065
     360:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
     364:	6f680074 	svcvs	0x00680074
     368:	695f7473 	ldmdbvs	pc, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     36c:	5f5f0064 	svcpl	0x005f0064
     370:	616c7473 	smcvs	51011	; 0xc743
     374:	65475f62 	strbvs	r5, [r7, #-3938]	; 0xfffff09e
     378:	72475f74 	subvc	r5, r7, #116, 30	; 0x1d0
     37c:	5f70756f 	svcpl	0x0070756f
     380:	5f004449 	svcpl	0x00004449
        proceed Menu_Header;
     384:	706e695f 	rsbvc	r6, lr, pc, asr r9
     388:	705f7475 	subsvc	r7, pc, r5, ror r4	; <UNPREDICTABLE>
        ser_outf(Set_Group_ID, "New Group ID: ");
     38c:	00736e69 	rsbseq	r6, r3, r9, ror #28
     390:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
        ser_inf(Get_Group_ID, "%d", &groupId);
     394:	6e696d5f 	mcrvs	13, 3, r6, cr9, cr15, {2}
     398:	656e5f00 	strbvs	r5, [lr, #-3840]!	; 0xfffff100
        proceed Menu_Header;
     39c:	00667478 	rsbeq	r7, r6, r8, ror r4
     3a0:	6e61725f 	mcrvs	2, 3, r7, cr1, cr15, {2}
        ser_outf(Set_Node_ID, "New node ID (1-25):");
     3a4:	00383464 	eorseq	r3, r8, r4, ror #8
     3a8:	7373656d 	cmnvc	r3, #457179136	; 0x1b400000
        ser_inf(Get_Node_ID, "%d", &nodeId);
     3ac:	54656761 	strbtpl	r6, [r5], #-1889	; 0xfffff89f
     3b0:	00657079 	rsbeq	r7, r5, r9, ror r0
     3b4:	7365725f 	cmnvc	r5, #-268435451	; 0xf0000005
    if (node < 1 || node > 25) {
     3b8:	5f746c75 	svcpl	0x00746c75
     3bc:	735f006b 	cmpvc	pc, #107	; 0x6b
            proceed Set_Node_ID;
     3c0:	616e6769 	cmnvs	lr, r9, ror #14
        proceed Menu_Header;
     3c4:	75625f6c 	strbvc	r5, [r2, #-3948]!	; 0xfffff094
     3c8:	6f6c0066 	svcvs	0x006c0066
        call find(Menu_Header);
     3cc:	6c20676e 	stcvs	7, cr6, [r0], #-440	; 0xfffffe48
     3d0:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     3d4:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     3d8:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
     3dc:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
            proceed Set_Node_ID;
     3e0:	73615f00 	cmnvc	r1, #0, 30
            break;
     3e4:	6d697463 	cfstrdvs	mvd7, [r9, #-396]!	; 0xfffffe74
            proceed Set_Node_ID;
     3e8:	75625f65 	strbvc	r5, [r2, #-3941]!	; 0xfffff09b
            proceed Find_Neighbours;
     3ec:	5f5f0066 	svcpl	0x005f0066
            proceed Create_Record;
     3f0:	4c494673 	mcrrmi	6, 7, r4, r9, cr3
            proceed Delete_Record;
     3f4:	775f0045 	ldrbvc	r0, [pc, -r5, asr #32]
            proceed Retrieve_Record;
     3f8:	5f007364 	svcpl	0x00007364
            diag("Reset Local Storage");
     3fc:	5f69705f 	svcpl	0x0069705f
            break;
     400:	6e657665 	cdpvs	6, 6, cr7, cr5, cr5, {3}
            diag("Reset Local Storage");
     404:	00745f74 	rsbseq	r5, r4, r4, ror pc
        currentProtocol = CREATE_RECORD;
     408:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
        ser_outf(Create_Record, "Receiver node ID (1-25):");
     40c:	3631746e 	ldrtcc	r7, [r1], -lr, ror #8
     410:	5f00745f 	svcpl	0x0000745f
        ser_inf(Get_Receiver_Node, "%d", &receiverId);
     414:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     418:	435f6261 	cmpmi	pc, #268435462	; 0x10000006
     41c:	74616572 	strbtvc	r6, [r1], #-1394	; 0xfffffa8e
    if (node < 1 || node > 25) {
     420:	65525f65 	ldrbvs	r5, [r2, #-3941]	; 0xfffff09b
     424:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
            proceed Create_Record;
     428:	465f5f00 	ldrbmi	r5, [pc], -r0, lsl #30
     42c:	00454c49 	subeq	r4, r5, r9, asr #24
        ser_in(Get_Message, messagePtr->messageRecord, RECORD_LENGTH);
     430:	65636572 	strbvs	r6, [r3, #-1394]!	; 0xfffffa8e
     434:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     438:	5f006449 	svcpl	0x00006449
        if(strlen(messagePtr->messageRecord) >= RECORD_LENGTH) {
     43c:	7366666f 	cmnvc	r6, #116391936	; 0x6f00000
     440:	74007465 	strvc	r7, [r0], #-1125	; 0xfffffb9b
     444:	6f5f7663 	svcvs	0x005f7663
            messagePtr->messageRecord[RECORD_LENGTH - 1] = '/0';
     448:	5f006570 	svcpl	0x00006570
        proceed Transmit_Message;
     44c:	72656d65 	rsbvc	r6, r5, #6464	; 0x1940
            messagePtr->messageRecord[RECORD_LENGTH - 1] = '/0';
     450:	636e6567 	cmnvs	lr, #432013312	; 0x19c00000
        proceed Transmit_Message;
     454:	5f5f0079 	svcpl	0x005f0079
        currentProtocol = DELETE_RECORD;
     458:	63756e67 	cmnvs	r5, #1648	; 0x670
        ser_outf(Retrieve_Record, "Delete Record from Neighbour:\n\r");
     45c:	5f61765f 	svcpl	0x0061765f
        currentProtocol = DELETE_RECORD;
     460:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
        ser_outf(Retrieve_Record, "Delete Record from Neighbour:\n\r");
     464:	6f686300 	svcvs	0x00686300
        proceed Get_Receiving_Node;
     468:	00656369 	rsbeq	r6, r5, r9, ror #6
        currentProtocol = RETRIEVE_RECORD;
     46c:	646e6573 	strbtvs	r6, [lr], #-1395	; 0xfffffa8d
        ser_outf(Retrieve_Record, "Retrieve Record from Neighbour:\n\r");
     470:	72477265 	subvc	r7, r7, #1342177286	; 0x50000006
        currentProtocol = RETRIEVE_RECORD;
     474:	4970756f 	ldmdbmi	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
        ser_outf(Retrieve_Record, "Retrieve Record from Neighbour:\n\r");
     478:	65720064 	ldrbvs	r0, [r2, #-100]!	; 0xffffff9c
        ser_outf(Prompt_Recieving_Node, "Neighbour node ID (1-25):");
     47c:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
     480:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
        ser_inf(Get_Receiving_Node, "%d", &receiverId);
     484:	5f5f0074 	svcpl	0x005f0074
     488:	735f6d74 	cmpvc	pc, #116, 26	; 0x1d00
     48c:	5f006365 	svcpl	0x00006365
    if (node < 1 || node > 25) {
     490:	5f6d745f 	svcpl	0x006d745f
     494:	79616479 	stmdbvc	r1!, {r0, r3, r4, r5, r6, sl, sp, lr}^
            proceed Prompt_Recieving_Node;
     498:	6e695f00 	cdpvs	15, 6, cr5, cr9, cr0, {0}
        ser_outf(Prompt_Record_Index, "Record index:");
     49c:	695f0063 	ldmdbvs	pc, {r0, r1, r5, r6}^	; <UNPREDICTABLE>
     4a0:	5f00646e 	svcpl	0x0000646e
        char desiredRecordIndex = -1;
     4a4:	7273626d 	rsbsvc	r6, r3, #-805306362	; 0xd0000006
        ser_inf(Get_Record_Index, "%d", &desiredRecordIndex);
     4a8:	63776f74 	cmnvs	r7, #116, 30	; 0x1d0
     4ac:	74735f73 	ldrbtvc	r5, [r3], #-3955	; 0xfffff08d
        char desiredRecordIndex = -1;
     4b0:	00657461 	rsbeq	r7, r5, r1, ror #8
        ser_inf(Get_Record_Index, "%d", &desiredRecordIndex);
     4b4:	65676465 	strbvs	r6, [r7, #-1125]!	; 0xfffffb9b
        messagePtr->recordIndex = desiredRecordIndex;
     4b8:	72756300 	rsbsvc	r6, r5, #0, 6
     4bc:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
     4c0:	746f7250 	strbtvc	r7, [pc], #-592	; 4c8 <root+0x230>
        proceed Transmit_Message;
     4c4:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 310 <root+0x78>
        messagePtr -> senderGroupId = groupId;
     4c8:	6b707300 	blvs	1c1d0d0 <__ccfg+0x1bfd128>
     4cc:	5f5f0074 	svcpl	0x005f0074
     4d0:	616c7473 	smcvs	51011	; 0xc743
        messagePtr -> messageType = currentProtocol;
     4d4:	65525f62 	ldrbvs	r5, [r2, #-3938]	; 0xfffff09e
     4d8:	65697274 	strbvs	r7, [r9, #-628]!	; 0xfffffd8c
        messagePtr -> requestNumber = randomNumber();
     4dc:	525f6576 	subspl	r6, pc, #494927872	; 0x1d800000
        messagePtr -> senderId = nodeId;
     4e0:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
     4e4:	69660064 	stmdbvs	r6!, {r2, r5, r6}^
        call transmitter(messagePtr, Menu_Header);
     4e8:	5f00646e 	svcpl	0x0000646e
        messagePtr -> destinationId = receiverId;
     4ec:	6c61765f 	stclvs	6, cr7, [r1], #-380	; 0xfffffe84
     4f0:	5f006575 	svcpl	0x00006575
        call transmitter(messagePtr, Menu_Header);
     4f4:	00733570 	rsbseq	r3, r3, r0, ror r5
     4f8:	75625f5f 	strbvc	r5, [r2, #-3935]!	; 0xfffff0a1
     4fc:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
     500:	73696c5f 	cmnvc	r9, #24320	; 0x5f00
     504:	5f5f0074 	svcpl	0x005f0074
     508:	616c7473 	smcvs	51011	; 0xc743
     50c:	654d5f62 	strbvs	r5, [sp, #-3938]	; 0xfffff09e
     510:	485f756e 	ldmdami	pc, {r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     514:	65646165 	strbvs	r6, [r4, #-357]!	; 0xfffffe9b
     518:	775f0072 			; <UNDEFINED> instruction: 0x775f0072
     51c:	74727363 	ldrbtvc	r7, [r2], #-867	; 0xfffffc9d
     520:	73626d6f 	cmnvc	r2, #7104	; 0x1bc0
     524:	6174735f 	cmnvs	r4, pc, asr r3
     528:	5f006574 	svcpl	0x00006574
     52c:	656c626d 	strbvs	r6, [ip, #-621]!	; 0xfffffd93
     530:	74735f6e 	ldrbtvc	r5, [r3], #-3950	; 0xfffff092
     534:	00657461 	rsbeq	r7, r5, r1, ror #8
     538:	726f7761 	rsbvc	r7, pc, #25427968	; 0x1840000
     53c:	76650064 	strbtvc	r0, [r5], -r4, rrx
     540:	6e70746e 	cdpvs	4, 7, cr7, cr0, cr14, {3}
     544:	64656c00 	strbtvs	r6, [r5], #-3072	; 0xfffff400
     548:	00636c62 	rsbeq	r6, r3, r2, ror #24
     54c:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
     550:	61646d5f 	cmnvs	r4, pc, asr sp
     554:	735f0079 	cmpvc	pc, #121	; 0x79
     558:	665f6769 	ldrbvs	r6, [pc], -r9, ror #14
     55c:	00636e75 	rsbeq	r6, r3, r5, ror lr
     560:	72626d5f 	rsbvc	r6, r2, #6080	; 0x17c0
     564:	63776f74 	cmnvs	r7, #116, 30	; 0x1d0
     568:	6174735f 	cmnvs	r4, pc, asr r3
static void devinit_uart (int devnum) {
     56c:	5f006574 	svcpl	0x00006574
	adddevfunc (ioreq_uart_a, devnum);
     570:	78657461 	stmdavc	r5!, {r0, r5, r6, sl, ip, sp, lr}^
     574:	00307469 	eorseq	r7, r0, r9, ror #8
void udelay (volatile word n) {
     578:	6264656c 	rsbvs	r6, r4, #108, 10	; 0x1b000000
     57c:	5f006b6c 	svcpl	0x00006b6c
	while (n) {
     580:	5f69705f 	svcpl	0x0069705f
     584:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
}
     588:	5f007461 	svcpl	0x00007461
	while (n--);
     58c:	5f69705f 	svcpl	0x0069705f
     590:	746e696d 	strbtvc	r6, [lr], #-2413	; 0xfffff693
     594:	665f006b 	ldrbvs	r0, [pc], -fp, rrx
		n--;
     598:	6b636f6c 	blvs	18dc350 <__ccfg+0x18bc3a8>
     59c:	5f00745f 	svcpl	0x0000745f
     5a0:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
void mdelay (volatile word n) {
     5a4:	4f5f6261 	svcmi	0x005f6261
     5a8:	6f697470 	svcvs	0x00697470
	while (n) {
     5ac:	5f00736e 	svcpl	0x0000736e
     5b0:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
}
     5b4:	545f6261 	ldrbpl	r6, [pc], #-609	; 5bc <mdelay+0x18>
		udelay (999);
     5b8:	736e6172 	cmnvc	lr, #-2147483620	; 0x8000001c
     5bc:	5f74696d 	svcpl	0x0074696d
		n--;
     5c0:	7373654d 	cmnvc	r3, #322961408	; 0x13400000
     5c4:	00656761 	rsbeq	r6, r5, r1, ror #14
     5c8:	63775f5f 	cmnvs	r7, #380	; 0x17c
     5cc:	695f0068 	ldmdbvs	pc, {r3, r5, r6}^	; <UNPREDICTABLE>
void __pi_ondomain (lword d) {
     5d0:	0073626f 	rsbseq	r6, r3, pc, ror #4
     5d4:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
		if (__pi_systat.effpdm > 1)
     5d8:	74007375 	strvc	r7, [r0], #-885	; 0xfffffc8b
     5dc:	5f656d69 	svcpl	0x00656d69
			__pi_systat.effpdm = 1;
     5e0:	5f5f0074 	svcpl	0x005f0074
	PRCMPowerDomainOn (d);
     5e4:	64696473 	strbtvs	r6, [r9], #-1139	; 0xfffffb8d
     5e8:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     5ec:	6e776f00 	cdpvs	15, 7, cr6, cr7, cr0, {0}
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     5f0:	64497265 	strbvs	r7, [r9], #-613	; 0xfffffd9b
     5f4:	735f5f00 	cmpvc	pc, #0, 30
     5f8:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
	__pi_systat.ondmns |= d;
     5fc:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
     600:	6365525f 	cmnvs	r5, #-268435451	; 0xf0000005
}
     604:	65766965 	ldrbvs	r6, [r6, #-2405]!	; 0xfffff69b
     608:	6f4e5f72 	svcvs	0x004e5f72
void __pi_offdomain (lword d) {
     60c:	5f006564 	svcpl	0x00006564
     610:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
	PRCMPowerDomainOff (d);
     614:	575f6261 	ldrbpl	r6, [pc, -r1, ror #4]
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     618:	00746961 	rsbseq	r6, r4, r1, ror #18
     61c:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
     620:	5f006e69 	svcpl	0x00006e69
	if (d & PRCM_DOMAIN_RFCORE) {
     624:	6d6d6167 	stfvse	f6, [sp, #-412]!	; 0xfffffe64
     628:	69735f61 	ldmdbvs	r3!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     62c:	61676e67 	cmnvs	r7, r7, ror #28
     630:	6f6c006d 	svcvs	0x006c006d
			__pi_systat.effpdm = __pi_systat.reqpdm;
     634:	6c20676e 	stcvs	7, cr6, [r0], #-440	; 0xfffffe48
     638:	20676e6f 	rsbcs	r6, r7, pc, ror #28
	__pi_systat.ondmns &= ~d;
     63c:	00746e69 	rsbseq	r6, r4, r9, ror #28
     640:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
}
     644:	4e747365 	cdpmi	3, 7, cr7, cr4, cr5, {3}
     648:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xfffff28b
void __pi_syserror (word ec, const char *m) {
     64c:	625f0072 	subsvs	r0, pc, #114	; 0x72
	diag ("SYSERR: %x, %s", ec, m);
     650:	00657361 	rsbeq	r7, r5, r1, ror #6
     654:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0xfffff9a1
  __ASM volatile ("cpsid i" : : : "memory");
     658:	73696c65 	cmnvc	r9, #25856	; 0x6500
     65c:	5f5f0074 	svcpl	0x005f0074
     660:	616c7473 	smcvs	51011	; 0xc743
     664:	69445f62 	stmdbvs	r4, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
		all_leds_blink;
     668:	616c7073 	smcvs	50947	; 0xc703
     66c:	654e5f79 	strbvs	r5, [lr, #-3961]	; 0xfffff087
     670:	62686769 	rsbvs	r6, r8, #27525120	; 0x1a40000
     674:	7372756f 	cmnvc	r2, #465567744	; 0x1bc00000
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     678:	756d5f00 	strbvc	r5, [sp, #-3840]!	; 0xfffff100
     67c:	4b00746c 	blmi	1d834 <__exidx_end+0x1878c>
     680:	2f504d54 	svccs	0x00504d54
     684:	2e707061 	cdpcs	0, 7, cr7, cr0, cr1, {3}
     688:	5f5f0063 	svcpl	0x005f0063
     68c:	6e6f4c55 	mcrvs	12, 3, r4, cr15, cr5, {2}
	while (1) {
     690:	5f5f0067 	svcpl	0x005f0067
     694:	616c7473 	smcvs	51011	; 0xc743
     698:	72505f62 	subsvc	r5, r0, #392	; 0x188
     69c:	74706d6f 	ldrbtvc	r6, [r0], #-3439	; 0xfffff291
void tci_run_delay_timer () {
     6a0:	6365525f 	cmnvs	r5, #-268435451	; 0xf0000005
	setdel = __pi_mintk - __pi_old;
     6a4:	69766569 	ldmdbvs	r6!, {r0, r3, r5, r6, r8, sl, sp, lr}^
     6a8:	4e5f676e 	cdpmi	7, 5, cr6, cr15, cr14, {3}
     6ac:	0065646f 	rsbeq	r6, r5, pc, ror #8
     6b0:	7263775f 	rsbvc	r7, r3, #24903680	; 0x17c0000
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     6b4:	626d6f74 	rsbvs	r6, sp, #116, 30	; 0x1d0
     6b8:	6174735f 	cmnvs	r4, pc, asr r3
     6bc:	5f006574 	svcpl	0x00006574
     6c0:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     6c4:	735f5f00 	cmpvc	pc, #0, 30
	sti_tim;
     6c8:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
}
     6cc:	6e65535f 	mcrvs	3, 3, r5, cr5, cr15, {2}
     6d0:	69445f64 	stmdbvs	r4, {r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     6d4:	766f6373 			; <UNDEFINED> instruction: 0x766f6373
     6d8:	5f797265 	svcpl	0x00797265
     6dc:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0xfffffaae
	cli_aux;
     6e0:	00747365 	rsbseq	r7, r4, r5, ror #6
     6e4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 630 <__pi_offdomain+0x24>
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     6e8:	616d2f65 	cmnvs	sp, r5, ror #30
     6ec:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
     6f0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     6f4:	706f746b 	rsbvc	r7, pc, fp, ror #8
	sti_aux;
     6f8:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
}
     6fc:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
     700:	4349502f 	movtmi	r5, #36911	; 0x902f
     704:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
void AONRTCIntHandler () {
     708:	3454504d 	ldrbcc	r5, [r4], #-77	; 0xffffffb3
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     70c:	415f3436 	cmpmi	pc, r6, lsr r4	; <UNPREDICTABLE>
     710:	67697373 			; <UNDEFINED> instruction: 0x67697373
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     714:	6e656d6e 	cdpvs	13, 6, cr6, cr5, cr14, {3}
		if (__pi_utims [0] == 0)
     718:	72003274 	andvc	r3, r0, #116, 4	; 0x40000007
     71c:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
		if (*(__pi_utims [0])) {
     720:	6769654e 	strbvs	r6, [r9, -lr, asr #10]!
     724:	756f6268 	strbvc	r6, [pc, #-616]!	; 4c4 <root+0x22c>
			(*(__pi_utims [0]))--;
     728:	5f007372 	svcpl	0x00007372
		if (__pi_utims [1] == 0)
     72c:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
		if (*(__pi_utims [1])) {
     730:	70756e61 	rsbsvc	r6, r5, r1, ror #28
			aux_timer_inactive = 0;
     734:	626d5f00 	rsbvs	r5, sp, #0, 30
			(*(__pi_utims [1]))--;
     738:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
		if (__pi_utims [2] == 0)
     73c:	00745f65 	rsbseq	r5, r4, r5, ror #30
		if (*(__pi_utims [2])) {
     740:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
			(*(__pi_utims [2]))--;
     744:	655f6d65 	ldrbvs	r6, [pc, #-3429]	; fffff9e7 <_estack+0xdfffa9e7>
		if (__pi_utims [3] != 0) {
     748:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
			if (*(__pi_utims [3])) {
     74c:	756f635f 	strbvc	r6, [pc, #-863]!	; 3f5 <root+0x15d>
				aux_timer_inactive = 0;
     750:	5f00746e 	svcpl	0x0000746e
				(*(__pi_utims [3]))--;
     754:	5f6d745f 	svcpl	0x006d745f
	if (__pi_systat.ledsts) {
     758:	73647369 	cmnvc	r4, #-1543503871	; 0xa4000001
     75c:	65720074 	ldrbvs	r0, [r2, #-116]!	; 0xffffff8c
		if (__pi_systat.ledblc++ == 0) {
     760:	6d647071 	stclvs	0, cr7, [r4, #-452]!	; 0xfffffe3c
     764:	735f5f00 	cmpvc	pc, #0, 30
			if (__pi_systat.ledblk) {
     768:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     76c:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
     770:	6d726966 			; <UNDEFINED> instruction: 0x6d726966
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     774:	6172545f 	cmnvs	r2, pc, asr r4
     778:	696d736e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
				if (__pi_systat.ledsts & 0x2)
     77c:	6f697373 	svcvs	0x00697373
     780:	685f006e 	ldmdavs	pc, {r1, r2, r3, r5, r6}^	; <UNPREDICTABLE>
     784:	7272655f 	rsbsvc	r6, r2, #398458880	; 0x17c00000
				if (__pi_systat.ledsts & 0x4)
     788:	74006f6e 	strvc	r6, [r0], #-3950	; 0xfffff092
				__pi_systat.ledblk = 0;
     78c:	635f7663 	cmpvs	pc, #103809024	; 0x6300000
     790:	6f006f6c 	svcvs	0x00006f6c
			if (__pi_systat.fstblk)
     794:	6e6d646e 	cdpvs	4, 6, cr6, cr13, cr14, {3}
     798:	6e700073 	mrcvs	0, 3, r0, cr0, cr3, {3}
				__pi_systat.ledblc = 200;
     79c:	63006d75 	movwvs	r6, #3445	; 0xd75
	if (events & AON_RTC_EVFLAGS_CH0) {
     7a0:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
		cli_tim;
     7a4:	6552746e 	ldrbvs	r7, [r2, #-1134]	; 0xfffffb92
		__pi_new += setdel;
     7a8:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
     7ac:	6d754e74 	ldclvs	14, cr4, [r5, #-464]!	; 0xfffffe30
		setdel = 0;
     7b0:	00726562 	rsbseq	r6, r2, r2, ror #10
		RISE_N_SHINE;
     7b4:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
		__pi_new += setdel;
     7b8:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
		RISE_N_SHINE;
     7bc:	5f5f0074 	svcpl	0x005f0074
     7c0:	6d5f6d74 	ldclvs	13, cr6, [pc, #-464]	; 5f8 <__pi_ondomain+0x28>
		aux_timer_inactive = 1;
     7c4:	4e006e6f 	cdpmi	14, 0, cr6, cr0, cr15, {3}
     7c8:	00747865 	rsbseq	r7, r4, r5, ror #16
				if (__pi_systat.ledsts & 0x1)
     7cc:	5f766374 	svcpl	0x00766374
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     7d0:	0074756f 	rsbseq	r7, r4, pc, ror #10
     7d4:	6c6f6f42 	stclvs	15, cr6, [pc], #-264	; 6d4 <tci_run_delay_timer+0x34>
				if (__pi_systat.ledsts & 0x2)
     7d8:	006e6165 	rsbeq	r6, lr, r5, ror #2
     7dc:	52544552 	subspl	r4, r4, #343932928	; 0x14800000
     7e0:	45564549 	ldrbmi	r4, [r6, #-1353]	; 0xfffffab7
				if (__pi_systat.ledsts & 0x8)
     7e4:	4345525f 	movtmi	r5, #21087	; 0x525f
				__pi_systat.ledblk = 1;
     7e8:	0044524f 	subeq	r5, r4, pc, asr #4
     7ec:	43534944 	cmpmi	r3, #68, 18	; 0x110000
		if (aux_timer_inactive) {
     7f0:	5245564f 	subpl	r5, r5, #82837504	; 0x4f00000
			cli_aux;
     7f4:	45525f59 	ldrbmi	r5, [r2, #-3929]	; 0xfffff0a7
     7f8:	4e4f5053 	mcrmi	0, 2, r5, cr15, cr3, {2}
     7fc:	73004553 	movwvc	r4, #1363	; 0x553
     800:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
     804:	00644972 	rsbeq	r4, r4, r2, ror r9
     808:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     80c:	7865685f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, fp, sp, lr}^
     810:	636e655f 	cmnvs	lr, #398458880	; 0x17c00000
     814:	6261745f 	rsbvs	r7, r1, #1593835520	; 0x5f000000
     818:	5f00656c 	svcpl	0x0000656c
word tci_update_delay_ticks (Boolean force) {
     81c:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
	cli_tim;
     820:	61656c5f 	cmnvs	r5, pc, asr ip
     824:	34367473 	ldrtcc	r7, [r6], #-1139	; 0xfffffb8d
	if (setdel) {
     828:	5f00745f 	svcpl	0x0000745f
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     82c:	78657461 	stmdavc	r5!, {r0, r5, r6, sl, ip, sp, lr}^
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     830:	5f007469 	svcpl	0x00007469
     834:	7473626d 	ldrbtvc	r6, [r3], #-621	; 0xfffffd93
     838:	00657461 	rsbeq	r7, r5, r1, ror #8
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     83c:	5f766374 	svcpl	0x00766374
				AON_RTC_O_CH0CMP)) - gettav ());
     840:	00746d78 	rsbseq	r6, r4, r8, ror sp
	return NO;
     844:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
			setdel = 0;
     848:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     84c:	656d0074 	strbvs	r0, [sp, #-116]!	; 0xffffff8c
     850:	67617373 			; <UNDEFINED> instruction: 0x67617373
}
     854:	72745065 	rsbsvc	r5, r4, #101	; 0x65
		sti_tim;
     858:	61727400 	cmnvs	r2, r0, lsl #8
		return YES;
     85c:	696d736e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
     860:	72657474 	rsbvc	r7, r5, #116, 8	; 0x74000000
     864:	64656c00 	strbtvs	r6, [r5], #-3072	; 0xfffff400
     868:	00737473 	rsbseq	r7, r3, r3, ror r4
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     86c:	66735f5f 	uhsaxvs	r5, r3, pc	; <UNPREDICTABLE>
	UARTDisable (UART0_BASE);
     870:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     874:	5f646f69 	svcpl	0x00646f69
	UARTDisable (UART0_BASE);
     878:	44490074 	strbmi	r0, [r9], #-116	; 0xffffff8c
	UARTConfigSetExpClk (UART0_BASE,
     87c:	7200454c 	andvc	r4, r0, #76, 10	; 0x13000000
     880:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
     884:	646e4964 	strbtvs	r4, [lr], #-2404	; 0xfffff69c
     888:	5f007865 	svcpl	0x00007865
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     88c:	6863775f 	stmdavs	r3!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
     890:	675f0062 	ldrbvs	r0, [pc, -r2, rrx]
     894:	61626f6c 	cmnvs	r2, ip, ror #30
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     898:	6d695f6c 	stclvs	15, cr5, [r9, #-432]!	; 0xfffffe50
     89c:	65727570 	ldrbvs	r7, [r2, #-1392]!	; 0xfffffa90
     8a0:	7274705f 	rsbsvc	r7, r4, #95	; 0x5f
	urates [0] = rate;
     8a4:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 8ac <__pi_uart_setrate+0x40>
}
     8a8:	65795f6d 	ldrbvs	r5, [r9, #-3949]!	; 0xfffff093
     8ac:	44007261 	strmi	r7, [r0], #-609	; 0xfffffd9f
     8b0:	54454c45 	strbpl	r4, [r5], #-3141	; 0xfffff3bb
     8b4:	45525f45 	ldrbmi	r5, [r2, #-3909]	; 0xfffff0bb
     8b8:	44524f43 	ldrbmi	r4, [r2], #-3907	; 0xfffff0bd
     8bc:	6f6c5f00 	svcvs	0x006c5f00
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     8c0:	746c6163 	strbtvc	r6, [ip], #-355	; 0xfffffe9d
     8c4:	5f656d69 	svcpl	0x00656d69
     8c8:	00667562 	rsbeq	r7, r6, r2, ror #10
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     8cc:	6769656e 	strbvs	r6, [r9, -lr, ror #10]!
     8d0:	756f6268 	strbvc	r6, [pc, #-616]!	; 670 <__pi_syserror+0x24>
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     8d4:	5f007372 	svcpl	0x00007372
     8d8:	73756e75 	cmnvc	r5, #1872	; 0x750
	__pi_uart_setrate (urates [0], __pi_uart);
     8dc:	5f006465 	svcpl	0x00006465
     8e0:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
     8e4:	745f3874 	ldrbvc	r3, [pc], #-2164	; 8ec <reinit_uart+0x2c>
     8e8:	76635f00 	strbtvc	r5, [r3], -r0, lsl #30
     8ec:	6e656c74 	mcrvs	12, 3, r6, cr5, cr4, {3}
     8f0:	616d5f00 	cmnvs	sp, r0, lsl #30
     8f4:	73647778 	cmnvc	r4, #120, 14	; 0x1e00000
	switch (operation) {
     8f8:	366c5f00 	strbtcc	r5, [ip], -r0, lsl #30
static int ioreq_uart_a (int operation, char *buf, int len) {
     8fc:	625f6134 	subsvs	r6, pc, #52, 2
     900:	5f006675 	svcpl	0x00006675
     904:	736b6c62 	cmnvc	fp, #25088	; 0x6200
     908:	00657a69 	rsbeq	r7, r5, r9, ror #20
     90c:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
				*buf++ = uart_a_read;
     910:	765f5f00 	ldrbvc	r5, [pc], -r0, lsl #30
     914:	696c5f61 	stmdbvs	ip!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
			while (len && uart_a_char_available) {
     918:	5f007473 	svcpl	0x00007473
     91c:	6b636f6c 	blvs	18dc6d4 <__ccfg+0x18bc72c>
     920:	64646100 	strbtvs	r6, [r4], #-256	; 0xffffff00
			if (len != operation) {
     924:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
}
     928:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     92c:	75635f69 	strbvc	r5, [r3, #-3945]!	; 0xfffff097
			uart_a_disable_int;
     930:	74007272 	strvc	r7, [r0], #-626	; 0xfffffd8e
			if (uart_a_char_available) {
     934:	725f7663 	subsvc	r7, pc, #103809024	; 0x6300000
				*buf++ = uart_a_read;
     938:	5f007663 	svcpl	0x00007663
			uart_a_disable_int;
     93c:	626f696e 	rsbvs	r6, pc, #1802240	; 0x1b8000
     940:	69770073 	ldmdbvs	r7!, {r0, r1, r4, r5, r6}^
			if (uart_a_char_available) {
     944:	745f746e 	ldrbvc	r7, [pc], #-1134	; 94c <ioreq_uart_a+0x54>
     948:	705f5f00 	subsvc	r5, pc, r0, lsl #30
				uart_a_enable_int;
     94c:	63705f69 	cmnvs	r0, #420	; 0x1a4
     950:	00745f62 	rsbseq	r5, r4, r2, ror #30
				goto Redo_rx;
     954:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     958:	49440072 	stmdbmi	r4, {r1, r4, r5, r6}^
     95c:	564f4353 			; <UNDEFINED> instruction: 0x564f4353
			return -2;
     960:	5f595245 	svcpl	0x00595245
     964:	55514552 	ldrbpl	r4, [r1, #-1362]	; 0xfffffaae
				uart_a_write (*buf);
     968:	00545345 	subseq	r5, r4, r5, asr #6
     96c:	6f73645f 	svcvs	0x0073645f
			while (len && uart_a_room_in_tx) {
     970:	6e61685f 	mcrvs	8, 3, r6, cr1, cr15, {2}
     974:	00656c64 	rsbeq	r6, r5, r4, ror #24
     978:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
			if (len != operation) {
     97c:	0074735f 	rsbseq	r7, r4, pc, asr r3
			uart_a_disable_int;
     980:	7476635f 	ldrbtvc	r6, [r6], #-863	; 0xfffffca1
     984:	00667562 	rsbeq	r7, r6, r2, ror #10
			if (uart_a_room_in_tx) {
     988:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     98c:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
				uart_a_enable_int;
     990:	61686320 	cmnvs	r8, r0, lsr #6
     994:	5f5f0072 	svcpl	0x005f0072
				*buf++ = uart_a_read;
     998:	6e5f6970 			; <UNDEFINED> instruction: 0x6e5f6970
			if (uart_a_room_in_tx) {
     99c:	5f007765 	svcpl	0x00007765
				uart_a_write (*buf);
     9a0:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
     9a4:	5f323374 	svcpl	0x00323374
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     9a8:	73660074 	cmnvc	r6, #116	; 0x74
     9ac:	646f636d 	strbtvs	r6, [pc], #-877	; 9b4 <ioreq_uart_a+0xbc>
			uart_a_enable_int;
     9b0:	5f5f0065 	svcpl	0x005f0065
     9b4:	00424350 	subeq	r4, r2, r0, asr r3
     9b8:	756e656d 	strbvc	r6, [lr, #-1389]!	; 0xfffffa93
			return 0;
     9bc:	65675f00 	strbvs	r5, [r7, #-3840]!	; 0xfffff100
			if (len == UART_CNTRL_SETRATE) {
     9c0:	74616474 	strbtvc	r6, [r1], #-1140	; 0xfffffb8c
				if (__pi_uart_setrate (*((word*)buf),
     9c4:	72655f65 	rsbvc	r5, r5, #404	; 0x194
     9c8:	65640072 	strbvs	r0, [r4, #-114]!	; 0xffffff8e
     9cc:	65726973 	ldrbvs	r6, [r2, #-2419]!	; 0xfffff68d
				syserror (EREQPAR, "uar");
     9d0:	63655264 	cmnvs	r5, #100, 4	; 0x40000006
			syserror (ENOOPER, "uai");
     9d4:	4964726f 	stmdbmi	r4!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
			if (len == UART_CNTRL_GETRATE) {
     9d8:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
				return 1;
     9dc:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     9e0:	6d72665f 	ldclvs	6, cr6, [r2, #-380]!	; 0xfffffe84
			syserror (ENOOPER, "uai");
     9e4:	69617400 	stmdbvs	r1!, {sl, ip, sp, lr}^
     9e8:	5f5f006c 	svcpl	0x005f006c
     9ec:	616c7473 	smcvs	51011	; 0xc743
     9f0:	69445f62 	stmdbvs	r4, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
     9f4:	616c7073 	smcvs	50947	; 0xc703
     9f8:	654e5f79 	strbvs	r5, [lr, #-3961]	; 0xfffff087
     9fc:	62686769 	rsbvs	r6, r8, #27525120	; 0x1a40000
     a00:	0072756f 	rsbseq	r7, r2, pc, ror #10
     a04:	62735f5f 	rsbsvs	r5, r3, #380	; 0x17c
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     a08:	75006675 	strvc	r6, [r0, #-1653]	; 0xfffff98b
void UART0IntHandler () {
     a0c:	5f747261 	svcpl	0x00747261
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     a10:	5f5f0074 	svcpl	0x005f0074
     a14:	61007061 	tstvs	r0, r1, rrx
     a18:	6d657373 	stclvs	3, cr7, [r5, #-460]!	; 0xfffffe34
     a1c:	4d656c62 	stclmi	12, cr6, [r5, #-392]!	; 0xfffffe78
     a20:	61737365 	cmnvs	r3, r5, ror #6
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     a24:	5f006567 	svcpl	0x00006567
     a28:	6c67735f 	stclvs	3, cr7, [r7], #-380	; 0xfffffe84
		RISE_N_SHINE;
     a2c:	5f006575 	svcpl	0x00006575
     a30:	74727473 	ldrbtvc	r7, [r2], #-1139	; 0xfffffb8d
		i_trigger (devevent (UART_A, READ));
     a34:	6c5f6b6f 	mrrcvs	11, 6, r6, pc, cr15	; <UNPREDICTABLE>
     a38:	00747361 	rsbseq	r7, r4, r1, ror #6
     a3c:	74626d5f 	strbtvc	r6, [r2], #-3423	; 0xfffff2a1
     a40:	5f63776f 	svcpl	0x0063776f
     a44:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     a48:	665f0065 	ldrbvs	r0, [pc], -r5, rrx
     a4c:	6772616e 	ldrbvs	r6, [r2, -lr, ror #2]!
     a50:	63740073 	cmnvs	r4, #115	; 0x73
     a54:	756c7076 	strbvc	r7, [ip, #-118]!	; 0xffffff8a
     a58:	00745f67 	rsbseq	r5, r4, r7, ror #30
     a5c:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
     a60:	5f62616c 	svcpl	0x0062616c
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     a64:	656c6544 	strbvs	r6, [ip, #-1348]!	; 0xfffffabc
     a68:	525f6574 	subspl	r6, pc, #116, 10	; 0x1d000000
     a6c:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
		i_trigger (devevent (UART_A, WRITE));
     a70:	656d0064 	strbvs	r0, [sp, #-100]!	; 0xffffff9c
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     a74:	67617373 			; <UNDEFINED> instruction: 0x67617373
     a78:	63655265 	cmnvs	r5, #1342177286	; 0x50000006
		RISE_N_SHINE;
     a7c:	0064726f 	rsbeq	r7, r4, pc, ror #4
     a80:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
     a84:	6e752074 	mrcvs	0, 3, r2, cr5, cr4, {3}
		i_trigger (devevent (UART_A, WRITE));
     a88:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
     a8c:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
     a90:	6400746e 	strvs	r7, [r0], #-1134	; 0xfffffb92
     a94:	62617461 	rsbvs	r7, r1, #1627389952	; 0x61000000
     a98:	00657361 	rsbeq	r7, r5, r1, ror #6
     a9c:	61766374 	cmnvs	r6, r4, ror r3
     aa0:	745f7064 	ldrbvc	r7, [pc], #-100	; aa8 <UART0IntHandler+0xa0>
     aa4:	63657200 	cmnvs	r5, #0, 4
     aa8:	4d64726f 	sfmmi	f7, 2, [r4, #-444]!	; 0xfffffe44
     aac:	61737365 	cmnvs	r3, r5, ror #6
     ab0:	5f006567 	svcpl	0x00006567
}
     ab4:	79746e66 	ldmdbvc	r4!, {r1, r2, r5, r6, r9, sl, fp, sp, lr}^
     ab8:	00736570 	rsbseq	r6, r3, r0, ror r5
     abc:	66666f5f 	uqsaxvs	r6, r6, pc	; <UNPREDICTABLE>
     ac0:	7400745f 	strvc	r7, [r0], #-1119	; 0xfffffba1
     ac4:	53656d69 	cmnpl	r5, #6720	; 0x1a40
void __buttons_setirq (int val) {
     ac8:	706d6174 	rsbvc	r6, sp, r4, ror r1
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     acc:	626e5f00 	rsbvs	r5, lr, #0, 30
     ad0:	5f006675 	svcpl	0x00006675
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     ad4:	73756e75 	cmnvc	r5, #1872	; 0x750
     ad8:	725f6465 	subsvc	r6, pc, #1694498816	; 0x65000000
     adc:	00646e61 	rsbeq	r6, r4, r1, ror #28
		bn = BUTTON_GPIO (__button_list [i]);
     ae0:	736e755f 	cmnvc	lr, #398458880	; 0x17c00000
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     ae4:	69636570 	stmdbvs	r3!, {r4, r5, r6, r8, sl, sp, lr}^
     ae8:	64656966 	strbtvs	r6, [r5], #-2406	; 0xfffff69a
     aec:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
     af0:	5f656c61 	svcpl	0x00656c61
     af4:	6f666e69 	svcvs	0x00666e69
     af8:	6c665f00 	stclvs	15, cr5, [r6], #-0
}
     afc:	32736761 	rsbscc	r6, r3, #25427968	; 0x1840000
     b00:	73695f00 	cmnvc	r9, #0, 30
     b04:	6178635f 	cmnvs	r8, pc, asr r3
     b08:	6f726700 	svcvs	0x00726700
void __pinlist_setirq (int val) {
     b0c:	64497075 	strbvs	r7, [r9], #-117	; 0xffffff8b
	for (i = 0; i < N_PINLIST; i++) {
     b10:	61725f00 	cmnvs	r2, r0, lsl #30
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     b14:	6e5f646e 	cdpvs	4, 5, cr6, cr15, cr14, {3}
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     b18:	00747865 	rsbseq	r7, r4, r5, ror #16
	for (i = 0; i < N_PINLIST; i++) {
     b1c:	6f6c5f5f 	svcvs	0x006c5f5f
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     b20:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
     b24:	5f00745f 	svcpl	0x0000745f
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     b28:	6b656573 	blvs	195a0fc <__ccfg+0x193a154>
     b2c:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
     b30:	72726564 	rsbsvc	r6, r2, #100, 10	; 0x19000000
	for (i = 0; i < N_PINLIST; i++) {
     b34:	6d6e5f00 	stclvs	15, cr5, [lr, #-0]
}
     b38:	6f6c6c61 	svcvs	0x006c6c61
     b3c:	755f0063 	ldrbvc	r0, [pc, #-99]	; ae1 <__buttons_setirq+0x19>
     b40:	00667562 	rsbeq	r7, r6, r2, ror #10
     b44:	41455243 	cmpmi	r5, r3, asr #4
void GPIOIntHandler () {
     b48:	525f4554 	subspl	r4, pc, #84, 10	; 0x15000000
if (buttons_int) {
     b4c:	524f4345 	subpl	r4, pc, #335544321	; 0x14000001
     b50:	66650044 	strbtvs	r0, [r5], -r4, asr #32
	buttons_disable ();
     b54:	6d647066 	stclvs	0, cr7, [r4, #-408]!	; 0xfffffe68
     b58:	73657200 	cmnvc	r5, #0, 4
	i_trigger ((aword)&__button_list);
     b5c:	47007465 	strmi	r7, [r0, -r5, ror #8]
     b60:	5f4f4950 	svcpl	0x004f4950
     b64:	4f746573 	svcmi	0x00746573
     b68:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
     b6c:	616e4574 	smcvs	58452	; 0xe454
     b70:	44656c62 	strbtmi	r6, [r5], #-3170	; 0xfffff39e
     b74:	41006f69 	tstmi	r0, r9, ror #30
     b78:	61424e4f 	cmpvs	r2, pc, asr #28
     b7c:	6e6f4d74 	mcrvs	13, 3, r4, cr15, cr4, {3}
     b80:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
     b84:	7500656c 	strvc	r6, [r0, #-1388]	; 0xfffffa94
	RISE_N_SHINE;
     b88:	4d323369 	ldcmi	3, cr3, [r2, #-420]!	; 0xfffffe5c
     b8c:	0065646f 	rsbeq	r6, r5, pc, ror #8
     b90:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
if (pin_sensor_int) {
     b94:	66666f5f 	uqsaxvs	r6, r6, pc	; <UNPREDICTABLE>
     b98:	616d6f64 	cmnvs	sp, r4, ror #30
	i_trigger ((aword)(&__input_pins));
     b9c:	67006e69 	strvs	r6, [r0, -r9, ror #28]
     ba0:	61747465 	cmnvs	r4, r5, ror #8
     ba4:	72750076 	rsbsvc	r0, r5, #118	; 0x76
     ba8:	73657461 	cmnvc	r5, #1627389952	; 0x61000000
     bac:	655f5f00 	ldrbvs	r5, [pc, #-3840]	; fffffcb4 <_estack+0xdfffacb4>
     bb0:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
     bb4:	72695f65 	rsbvc	r5, r9, #404	; 0x194
     bb8:	68770071 	ldmdavs	r7!, {r0, r4, r5, r6}^
     bbc:	00657265 	rsbeq	r7, r5, r5, ror #4
     bc0:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
     bc4:	6674696e 	ldrbtvs	r6, [r4], -lr, ror #18
	__pinsen_disable_and_clear;
     bc8:	745f6e75 	ldrbvc	r6, [pc], #-3701	; bd0 <GPIOIntHandler+0x88>
	RISE_N_SHINE;
     bcc:	4e4f4100 	dvfmie	f4, f7, f0
     bd0:	41435557 	cmpmi	r3, r7, asr r5
     bd4:	61577875 	cmpvs	r7, r5, ror r8
}
     bd8:	7075656b 	rsbsvc	r6, r5, fp, ror #10
     bdc:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
     be0:	4f410074 	svcmi	0x00410074
     be4:	4355574e 	cmpmi	r5, #20447232	; 0x1380000
     be8:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
void system_init () {
     bec:	61745372 	cmnvs	r4, r2, ror r3
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     bf0:	47737574 			; <UNDEFINED> instruction: 0x47737574
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     bf4:	55007465 	strpl	r7, [r0, #-1125]	; 0xfffffb9b
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     bf8:	49545241 	ldmdbmi	r4, {r0, r6, r9, ip, lr}^
     bfc:	6c43746e 	cfstrdvs	mvd7, [r3], {110}	; 0x6e
     c00:	00726165 	rsbseq	r6, r2, r5, ror #2
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     c04:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
     c08:	695f6d65 	ldmdbvs	pc, {r0, r2, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     c0c:	0074696e 	rsbseq	r6, r4, lr, ror #18
     c10:	574e4f41 	strbpl	r4, [lr, -r1, asr #30]
     c14:	68534355 	ldmdavs	r3, {r0, r2, r4, r6, r8, r9, lr}^
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     c18:	6f447475 	svcvs	0x00447475
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     c1c:	6e456e77 	mcrvs	14, 2, r6, cr5, cr7, {3}
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     c20:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     c24:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     c28:	006c6564 	rsbeq	r6, ip, r4, ror #10
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     c2c:	4d435250 	sfmmi	f5, 2, [r3, #-320]	; 0xfffffec0
		pin = (port_confs [i] >> 19) & 0x1f;
     c30:	5075634d 	rsbspl	r6, r5, sp, asr #6
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     c34:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
		pin = (port_confs [i] >> 19) & 0x1f;
     c38:	0066664f 	rsbeq	r6, r6, pc, asr #12
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     c3c:	65735f5f 	ldrbvs	r5, [r3, #-3935]!	; 0xfffff0a1
     c40:	534d5f74 	movtpl	r5, #57204	; 0xdf74
     c44:	65640050 	strbvs	r0, [r4, #-80]!	; 0xffffffb0
     c48:	696e6976 	stmdbvs	lr!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
		if (port_confs [i] & 0x80)
     c4c:	00745f74 	rsbseq	r5, r4, r4, ror pc
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     c50:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     c54:	646e6f5f 	strbtvs	r6, [lr], #-3935	; 0xfffff0a1
		if (port_confs [i] & 0x40)
     c58:	69616d6f 	stmdbvs	r1!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     c5c:	4155006e 	cmpmi	r5, lr, rrx
     c60:	77485452 	smlsldvc	r5, r8, r2, r4
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     c64:	776f6c46 	strbvc	r6, [pc, -r6, asr #24]!
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     c68:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     c6c:	446c6f72 	strbtmi	r6, [ip], #-3954	; 0xfffff08e
	all_leds_blink;
     c70:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
     c74:	5f00656c 	svcpl	0x0000656c
     c78:	5f69705f 	svcpl	0x0069705f
     c7c:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
     c80:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
     c84:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0xfffffe8e
     c88:	4e4f4100 	dvfmie	f4, f7, f0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     c8c:	46434f49 	strbmi	r4, [r3], -r9, asr #30
     c90:	7a656572 	bvc	195a260 <__ccfg+0x193a2b8>
     c94:	73694465 	cmnvc	r9, #1694498816	; 0x65000000
     c98:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     c9c:	33697500 	cmncc	r9, #0, 10
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     ca0:	4c785232 	lfmmi	f5, 2, [r8], #-200	; 0xffffff38
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     ca4:	6c657665 	stclvs	6, cr7, [r5], #-404	; 0xfffffe6c
     ca8:	64655200 	strbtvs	r5, [r5], #-512	; 0xfffffe00
	IntEnable (INT_AON_RTC_COMB);
     cac:	78725f6f 	ldmdavc	r2!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     cb0:	33697500 	cmncc	r9, #0, 10
     cb4:	4c785432 	cfldrdmi	mvd5, [r8], #-200	; 0xffffff38
	__pi_malloc_init ();
     cb8:	6c657665 	stclvs	6, cr7, [r5], #-404	; 0xfffffe6c
	IntEnable (INT_AON_GPIO_EDGE);
     cbc:	73795300 	cmnvc	r9, #0, 6
     cc0:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     cc4:	636f6c43 	cmnvs	pc, #17152	; 0x4300
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     cc8:	7465476b 	strbtvc	r4, [r5], #-1899	; 0xfffff895
     ccc:	43525000 	cmpmi	r2, #0
     cd0:	6361434d 	cmnvs	r1, #872415233	; 0x34000001
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     cd4:	65526568 	ldrbvs	r6, [r2, #-1384]	; 0xfffffa98
     cd8:	746e6574 	strbtvc	r6, [lr], #-1396	; 0xfffffa8c
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     cdc:	456e6f69 	strbmi	r6, [lr, #-3945]!	; 0xfffff097
     ce0:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
     ce4:	52500065 	subspl	r0, r0, #101	; 0x65
	urates [0] = UART_RATE / 100;
     ce8:	6f4c4d43 	svcvs	0x004c4d43
     cec:	65536461 	ldrbvs	r6, [r3, #-1121]	; 0xfffffb9f
	reinit_uart ();
     cf0:	69750074 	ldmdbvs	r5!, {r2, r4, r5, r6}^
	EXTRA_INITIALIZERS;
     cf4:	6e453233 	mcrvs	2, 2, r3, cr5, cr3, {1}
     cf8:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     cfc:	616e6500 	cmnvs	lr, r0, lsl #10
     d00:	5f656c62 	svcpl	0x00656c62
     d04:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     d08:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
     d0c:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0xfffffd9b
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     d10:	00737470 	rsbseq	r7, r3, r0, ror r4
     d14:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
			devinit [i] . init (devinit [i] . param);
     d18:	4f464946 	svcmi	0x00464946
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     d1c:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
     d20:	7500656c 	strvc	r6, [r0, #-1388]	; 0xfffffa94
     d24:	49323369 	ldmdbmi	r2!, {r0, r3, r5, r6, r8, r9, ip, sp}
	IntEnable (INT_UART0_COMB);
     d28:	6c46746e 	cfstrdvs	mvd7, [r6], {110}	; 0x6e
     d2c:	00736761 	rsbseq	r6, r3, r1, ror #14
}
     d30:	4e6f6964 	vnmulmi.f16	s13, s30, s9	; <UNPREDICTABLE>
	tci_run_auxiliary_timer ();
     d34:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xfffff28b
		diag ("");
     d38:	5f5f0072 	svcpl	0x005f0072
     d3c:	755f6970 	ldrbvc	r6, [pc, #-2416]	; 3d4 <root+0x13c>
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     d40:	5f747261 	svcpl	0x00747261
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     d44:	72746573 	rsbsvc	r6, r4, #482344960	; 0x1cc00000
		diag ("Leftover RAM: %d bytes",
     d48:	00657461 	rsbeq	r7, r5, r1, ror #8
     d4c:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
     d50:	72744372 	rsbsvc	r4, r4, #-939524095	; 0xc8000001
     d54:	464f496c 	strbmi	r4, [pc], -ip, ror #18
     d58:	7a656572 	bvc	195a328 <__ccfg+0x193a380>
     d5c:	73694465 	cmnvc	r9, #1694498816	; 0x65000000
     d60:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     d64:	43525000 	cmpmi	r2, #0
     d68:	6361434d 	cmnvs	r1, #872415233	; 0x34000001
     d6c:	65526568 	ldrbvs	r6, [r2, #-1384]	; 0xfffffa98
     d70:	746e6574 	strbtvc	r6, [lr], #-1396	; 0xfffffa8c
     d74:	446e6f69 	strbtmi	r6, [lr], #-3945	; 0xfffff097
     d78:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
     d7c:	7300656c 	movwvc	r6, #1388	; 0x56c
     d80:	6f707465 	svcvs	0x00707465
     d84:	6d726577 	cfldr64vs	mvdx6, [r2, #-476]!	; 0xfffffe24
     d88:	0065646f 	rsbeq	r6, r5, pc, ror #8
     d8c:	7265706f 	rsbvc	r7, r5, #111	; 0x6f
     d90:	6f697461 	svcvs	0x00697461
     d94:	7561006e 	strbvc	r0, [r1, #-110]!	; 0xffffff92
     d98:	69745f78 	ldmdbvs	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     d9c:	5f72656d 	svcpl	0x0072656d
     da0:	63616e69 	cmnvs	r1, #1680	; 0x690
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
     da4:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
     da8:	726f7000 	rsbvc	r7, pc, #0
     dac:	6f635f74 	svcvs	0x00635f74
     db0:	0073666e 	rsbseq	r6, r3, lr, ror #12
     db4:	6f646552 	svcvs	0x00646552
     db8:	0078745f 	rsbseq	r7, r8, pc, asr r4
     dbc:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
     dc0:	56636e49 	strbtpl	r6, [r3], -r9, asr #28
}
     dc4:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
__attribute__ ((noreturn)) void __pi_release () {
     dc8:	33697500 	cmncc	r9, #0, 10
     dcc:	73614232 	cmnvc	r1, #536870915	; 0x20000003
     dd0:	5f5f0065 	svcpl	0x005f0065
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     dd4:	775f6f64 	ldrbvc	r6, [pc, -r4, ror #30]
	check_stack_overflow;
     dd8:	615f6966 	cmpvs	pc, r6, ror #18
     ddc:	656e5f73 	strbvs	r5, [lr, #-3955]!	; 0xfffff08d
     de0:	64656465 	strbtvs	r6, [r5], #-1125	; 0xfffffb9b
	update_n_wake (MAX_WORD, NO);
     de4:	4e4f4100 	dvfmie	f4, f7, f0
     de8:	49435452 	stmdbmi	r3, {r1, r4, r6, sl, ip, lr}^
     dec:	6156636e 	cmpvs	r6, lr, ror #6
	for_all_tasks (__pi_curr) {
     df0:	4365756c 	cmnmi	r5, #108, 10	; 0x1b000000
     df4:	65533268 	ldrbvs	r3, [r3, #-616]	; 0xfffffd98
     df8:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
  __ASM volatile ("cpsid i" : : : "memory");
     dfc:	696e6976 	stmdbvs	lr!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
	__SLEEP;
     e00:	61755f74 	cmnvs	r5, r4, ror pc
     e04:	41007472 	tstmi	r0, r2, ror r4
     e08:	54524e4f 	ldrbpl	r4, [r2], #-3663	; 0xfffff1b1
     e0c:	746e4943 	strbtvc	r4, [lr], #-2371	; 0xfffff6bd
	system_event_count ++;
     e10:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
     e14:	0072656c 	rsbseq	r6, r2, ip, ror #10
	switch (__pi_systat.effpdm) {
     e18:	61726170 	cmnvs	r2, r0, ror r1
     e1c:	6374006d 	cmnvs	r4, #109	; 0x6d
     e20:	75725f69 	ldrbvc	r5, [r2, #-3945]!	; 0xfffff097
     e24:	65645f6e 	strbvs	r5, [r4, #-3950]!	; 0xfffff092
			__WFI ();
     e28:	5f79616c 	svcpl	0x0079616c
     e2c:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
     e30:	5f5f0072 	svcpl	0x005f0072
	check_stack_overflow;
     e34:	725f6970 	subsvc	r6, pc, #112, 18	; 0x1c0000
     e38:	61656c65 	cmnvs	r5, r5, ror #24
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     e3c:	52006573 	andpl	r6, r0, #482344960	; 0x1cc00000
     e40:	006f6465 	rsbeq	r6, pc, r5, ror #8
			(__pi_curr->code) (tstate (__pi_curr));
     e44:	69657270 	stmdbvs	r5!, {r4, r5, r6, r9, ip, sp, lr}^
			goto Redo;
     e48:	5f74696e 	svcpl	0x0074696e
	for_all_tasks (__pi_curr) {
     e4c:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     e50:	726f6600 	rsbvc	r6, pc, #0, 12
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     e54:	55006563 	strpl	r6, [r0, #-1379]	; 0xfffffa9d
     e58:	45545241 	ldrbmi	r5, [r4, #-577]	; 0xfffffdbf
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     e5c:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
     e60:	50470065 	subpl	r0, r7, r5, rrx
     e64:	635f4f49 	cmpvs	pc, #292	; 0x124
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     e68:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
     e6c:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     e70:	6f694474 	svcvs	0x00694474
     e74:	625f5f00 	subsvs	r5, pc, #0, 30
			__WFI ();
     e78:	6f747475 	svcvs	0x00747475
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     e7c:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
     e80:	72697465 	rsbvc	r7, r9, #1694498816	; 0x65000000
}
     e84:	646d0071 	strbtvs	r0, [sp], #-113	; 0xffffff8f
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     e88:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     e8c:	645f5f00 	ldrbvs	r5, [pc], #-3840	; e94 <__pi_release+0xcc>
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     e90:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
     e94:	695f656c 	ldmdbvs	pc, {r2, r3, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
			PRCMPowerDomainOff (__pi_systat.ondmns |
     e98:	47007172 	smlsdxmi	r0, r2, r1, r7
     e9c:	5f4f4950 	svcpl	0x004f4950
     ea0:	61656c63 	cmnvs	r5, r3, ror #24
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     ea4:	6f694472 	svcvs	0x00694472
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ea8:	73795300 	cmnvc	r9, #0, 6
     eac:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
     eb0:	536e6f41 	cmnpl	lr, #260	; 0x104
     eb4:	00636e79 	rsbeq	r6, r3, r9, ror lr
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     eb8:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     ebc:	6174735f 	cmnvs	r4, pc, asr r3
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     ec0:	72666b63 	rsbvc	r6, r6, #101376	; 0x18c00
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     ec4:	74006565 	strvc	r6, [r0], #-1381	; 0xfffffa9b
     ec8:	725f6963 	subsvc	r6, pc, #1622016	; 0x18c000
     ecc:	615f6e75 	cmpvs	pc, r5, ror lr	; <UNPREDICTABLE>
     ed0:	6c697875 	stclvs	8, cr7, [r9], #-468	; 0xfffffe2c
     ed4:	79726169 	ldmdbvc	r2!, {r0, r3, r5, r6, r8, sp, lr}^
			SysCtrlSetRechargeBeforePowerDown
     ed8:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     edc:	5f007265 	svcpl	0x00007265
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     ee0:	6e69705f 	mcrvs	0, 3, r7, cr9, cr15, {2}
     ee4:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     ee8:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
     eec:	00717269 	rsbseq	r7, r1, r9, ror #4
     ef0:	4f495047 	svcmi	0x00495047
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     ef4:	48746e49 	ldmdami	r4!, {r0, r3, r6, r9, sl, fp, sp, lr}^
     ef8:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     efc:	55007265 	strpl	r7, [r0, #-613]	; 0xfffffd9b
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     f00:	46545241 	ldrbmi	r5, [r4], -r1, asr #4
     f04:	4c4f4649 	mcrrmi	6, 4, r4, pc, cr9
     f08:	6c657665 	stclvs	6, cr7, [r5], #-404	; 0xfffffe6c
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     f0c:	00746553 	rsbseq	r6, r4, r3, asr r5
			while (!(AONWUCPowerStatusGet () &
     f10:	43737953 	cmnmi	r3, #1359872	; 0x14c000
			PRCMPowerDomainOn (__pi_systat.ondmns);
     f14:	536c7274 	cmnpl	ip, #116, 4	; 0x40000007
     f18:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     f1c:	7365526d 	cmnvc	r5, #-805306362	; 0xd0000006
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     f20:	73007465 	movwvc	r7, #1125	; 0x465
     f24:	61747465 	cmnvs	r4, r5, ror #8
     f28:	76650076 			; <UNDEFINED> instruction: 0x76650076
     f2c:	73746e65 	cmnvc	r4, #1616	; 0x650
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     f30:	65647500 	strbvs	r7, [r4, #-1280]!	; 0xfffffb00
     f34:	0079616c 	rsbseq	r6, r9, ip, ror #2
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     f38:	424e4f41 	submi	r4, lr, #260	; 0x104
     f3c:	6f4d7461 	svcvs	0x004d7461
			SysCtrlAdjustRechargeAfterPowerDown ();
     f40:	7369446e 	cmnvc	r9, #1845493760	; 0x6e000000
			reinit_uart ();
     f44:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     f48:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     f4c:	61625f69 	cmnvs	r2, r9, ror #30
}
     f50:	6e6f6d74 	mcrvs	13, 3, r6, cr15, cr4, {3}
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     f54:	4e4f4100 	dvfmie	f4, f7, f0
     f58:	46434f49 	strbmi	r4, [r3], -r9, asr #30
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     f5c:	7a656572 	bvc	195a52c <__ccfg+0x193a584>
     f60:	616e4565 	cmnvs	lr, r5, ror #10
     f64:	00656c62 	rsbeq	r6, r5, r2, ror #24
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     f68:	424e4f41 	submi	r4, lr, #260	; 0x104
     f6c:	6f4d7461 	svcvs	0x004d7461
     f70:	7461426e 	strbtvc	r4, [r1], #-622	; 0xfffffd92
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     f74:	79726574 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, sl, sp, lr}^
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     f78:	746c6f56 	strbtvc	r6, [ip], #-3926	; 0xfffff0aa
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     f7c:	47656761 	strbmi	r6, [r5, -r1, ror #14]!
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     f80:	69007465 	stmdbvs	r0, {r0, r2, r5, r6, sl, ip, sp, lr}
     f84:	7165726f 	cmnvc	r5, pc, ror #4
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     f88:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
     f8c:	00615f74 	rsbeq	r5, r1, r4, ror pc
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     f90:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     f94:	6974755f 	ldmdbvs	r4!, {r0, r1, r2, r3, r4, r6, r8, sl, ip, sp, lr}^
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     f98:	7300736d 	movwvc	r7, #877	; 0x36d
     f9c:	00746e69 	rsbseq	r6, r4, r9, ror #28
			PRCMPowerDomainOff (
     fa0:	4f495047 	svcmi	0x00495047
     fa4:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
	__SLEEP;
     fa8:	006f6944 	rsbeq	r6, pc, r4, asr #18
     fac:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
  __ASM volatile ("cpsie i" : : : "memory");
     fb0:	0074696e 	rsbseq	r6, r4, lr, ror #18
	goto Redo;
     fb4:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     fb8:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
     fbc:	6f727265 	svcvs	0x00727265
     fc0:	65640072 	strbvs	r0, [r4, #-114]!	; 0xffffff8e
     fc4:	6d756e76 	ldclvs	14, cr6, [r5, #-472]!	; 0xfffffe28
     fc8:	6f682f00 	svcvs	0x00682f00
     fcc:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; e20 <__pi_release+0x58>
     fd0:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
     fd4:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
     fd8:	6f746b73 	svcvs	0x00746b73
     fdc:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
     fe0:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
     fe4:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
     fe8:	2f534f43 	svccs	0x00534f43
     fec:	4f636950 	svcmi	0x00636950
     ff0:	43432f53 	movtmi	r2, #16211	; 0x3f53
     ff4:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
     ff8:	69616d2f 	stmdbvs	r1!, {r0, r1, r2, r3, r5, r8, sl, fp, sp, lr}^
     ffc:	00632e6e 	rsbeq	r2, r3, lr, ror #28
    1000:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    1004:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
    1008:	42746e65 	rsbsmi	r6, r4, #1616	; 0x650
    100c:	65747461 	ldrbvs	r7, [r4, #-1121]!	; 0xfffffb9f
    1010:	55007972 	strpl	r7, [r0, #-2418]	; 0xfffff68e
    1014:	49545241 	ldmdbmi	r4, {r0, r6, r9, ip, lr}^
    1018:	6e45746e 	cdpvs	4, 4, cr7, cr5, cr14, {3}
    101c:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
	cli_tim;
    1020:	43525000 	cmpmi	r2, #0
    1024:	75634d4d 	strbvc	r4, [r3, #-3405]!	; 0xfffff2b3
    1028:	6f646c55 	svcvs	0x00646c55
	diag ("PicOS halted");
    102c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
	mdelay (500);
    1030:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
    1034:	756f0065 	strbvc	r0, [pc, #-101]!	; fd7 <__pi_release+0x20f>
	setpowermode (2);
    1038:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
	__PCB = NULL;
    103c:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
	release;
    1040:	6156656c 	cmpvs	r6, ip, ror #10
    1044:	0065756c 	rsbeq	r7, r5, ip, ror #10
    1048:	746c6168 	strbtvc	r6, [ip], #-360	; 0xfffffe98
    104c:	706f7400 	rsbvc	r7, pc, r0, lsl #8
int main (void) {
    1050:	614d664f 	cmpvs	sp, pc, asr #12
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    1054:	74536e69 	ldrbvc	r6, [r3], #-3689	; 0xfffff197
    1058:	006b6361 	rsbeq	r6, fp, r1, ror #6
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    105c:	6564675f 	strbvs	r6, [r4, #-1887]!	; 0xfffff8a1
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    1060:	0079616c 	rsbseq	r6, r9, ip, ror #2
	system_init ();
    1064:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
	tcv_init ();
    1068:	746e4930 	strbtvc	r4, [lr], #-2352	; 0xfffff6d0
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    106c:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    1070:	0072656c 	rsbseq	r6, r2, ip, ror #10
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
    1074:	70656544 	rsbvc	r6, r5, r4, asr #10
    1078:	65656c53 	strbvs	r6, [r5, #-3155]!	; 0xfffff3ad
    107c:	6f700070 	svcvs	0x00700070
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    1080:	635f7472 	cmpvs	pc, #1912602624	; 0x72000000
    1084:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
	delay (16, 0);
    1088:	63740067 	cmnvs	r4, #103	; 0x67
    108c:	70755f69 	rsbsvc	r5, r5, r9, ror #30
    1090:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
	__pi_release ();
    1094:	6c65645f 	cfstrdvs	mvd6, [r5], #-380	; 0xfffffe84
    1098:	745f7961 	ldrbvc	r7, [pc], #-2401	; 10a0 <main+0x50>
    109c:	736b6369 	cmnvc	fp, #-1543503871	; 0xa4000001
    10a0:	61654d00 	cmnvs	r5, r0, lsl #26
    10a4:	65727573 	ldrbvs	r7, [r2, #-1395]!	; 0xfffffa8d
    10a8:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
    10ac:	66716572 			; <UNDEFINED> instruction: 0x66716572
static void killev (__pi_pcb_t *pid) {
    10b0:	745f6e75 	ldrbvc	r6, [pc], #-3701	; 10b8 <killev+0x8>
	wfun = (aword)(pid->code);
    10b4:	6c696b00 			; <UNDEFINED> instruction: 0x6c696b00
	for_all_tasks (i) {
    10b8:	0076656c 	rsbseq	r6, r6, ip, ror #10
		for (j = 0; j < nevents (i); j++) {
    10bc:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    10c0:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
    10c4:	00797063 	rsbseq	r7, r9, r3, rrx
			    || i->Events [j] . Event == wfun
    10c8:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
		for (j = 0; j < nevents (i); j++) {
    10cc:	6c616d5f 	stclvs	13, cr6, [r1], #-380	; 0xfffffe84
			if (i->Events [j] . Event == (aword)pid
    10d0:	00636f6c 	rsbeq	r6, r3, ip, ror #30
    10d4:	61776e75 	cmnvs	r7, r5, ror lr
    10d8:	71007469 	tstvc	r0, r9, ror #8
				wakeupev (i, j);
    10dc:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
    10e0:	726f6900 	rsbvc	r6, pc, #0, 18
	for_all_tasks (i) {
    10e4:	5f007165 	svcpl	0x00007165
}
    10e8:	5f69705f 	svcpl	0x0069705f
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    10ec:	6b726f66 	blvs	1c9ce8c <__ccfg+0x1c7cee4>
static void qfree (aword *ch) {
    10f0:	6c696b00 			; <UNDEFINED> instruction: 0x6c696b00
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    10f4:	706d006c 	rsbvc	r0, sp, ip, rrx
	cc = (aword*)(mpools + MA_NP);
    10f8:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
	m_setnextp (ch, chunk);
    10fc:	69747500 	ldmdbvs	r4!, {r8, sl, ip, sp, lr}^
	m_setnextp (cc, ch);
    1100:	5f72656d 	svcpl	0x0072656d
}
    1104:	00646461 	rsbeq	r6, r4, r1, ror #8
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    1108:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
    110c:	79737542 	ldmdbvc	r3!, {r1, r6, r8, sl, ip, sp, lr}^
    1110:	705f5f00 	subsvc	r5, pc, r0, lsl #30
			m_setnextp (cc, m_nextp (chunk));
    1114:	616d5f69 	cmnvs	sp, r9, ror #30
			m_size (chunk) += m_hdrlen + m_size (ch);
    1118:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
    111c:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    1120:	682f0074 	stmdavs	pc!, {r2, r4, r5, r6}	; <UNPREDICTABLE>
    1124:	2f656d6f 	svccs	0x00656d6f
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    1128:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    112c:	442f6e69 	strtmi	r6, [pc], #-3689	; 1134 <qfree+0x48>
    1130:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    1134:	4f2f706f 	svcmi	0x002f706f
			m_setnextp (cc, m_nextp (chunk));
    1138:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
			m_size (ch) += m_hdrlen + m_size (chunk);
    113c:	502f5445 	eorpl	r5, pc, r5, asr #8
    1140:	534f4349 	movtpl	r4, #62281	; 0xf349
    1144:	6369502f 	cmnvs	r9, #47	; 0x2f
    1148:	6b2f534f 	blvs	bd5e8c <__ccfg+0xbb5ee4>
    114c:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    1150:	656b2f6c 	strbvs	r2, [fp, #-3948]!	; 0xfffff094
			if (m_size (chunk) >= m_size (ch))
    1154:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    1158:	5f00632e 	svcpl	0x0000632e
    115c:	5f69705f 	svcpl	0x0069705f
		chunk = m_nextp (chunk))
    1160:	67697274 			; <UNDEFINED> instruction: 0x67697274
    1164:	00726567 	rsbseq	r6, r2, r7, ror #10
    1168:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    116c:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
	diag_wait (a);
    1170:	006e656c 	rsbeq	r6, lr, ip, ror #10
	diag_wchar (c, a);
    1174:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    1178:	78616d5f 	stmdavc	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
}
    117c:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
    1180:	75726300 	ldrbvc	r6, [r2, #-768]!	; 0xfffffd00
	syserror (ESTATE, "state");
    1184:	6e696e6e 	cdpvs	14, 6, cr6, cr9, cr14, {3}
    1188:	636e0067 	cmnvs	lr, #103	; 0x67
    118c:	6d006b68 	vstrvs	d6, [r0, #-416]	; 0xfffffe60
    1190:	6572666e 	ldrbvs	r6, [r2, #-1646]!	; 0xfffff992
	for (i = 0; i < MAX_UTIMERS; i++)
    1194:	72700065 	rsbsvc	r0, r0, #101	; 0x65
void utimer_add (address ut) {
    1198:	6565636f 	strbvs	r6, [r5, #-879]!	; 0xfffffc91
    119c:	6c6d0064 	stclvs	0, cr0, [sp], #-400	; 0xfffffe70
		if (__pi_utims [i] == NULL)
    11a0:	5f006e65 	svcpl	0x00006e65
	for (i = 0; i < MAX_UTIMERS; i++)
    11a4:	5f69705f 	svcpl	0x0069705f
    11a8:	69727470 	ldmdbvs	r2!, {r4, r5, r6, sl, ip, sp, lr}^
		syserror (ERESOURCE, "ut a");
    11ac:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
	__pi_utims [i] = ut;
    11b0:	64646100 	strbtvs	r6, [r4], #-256	; 0xffffff00
}
    11b4:	66766564 	ldrbtvs	r6, [r6], -r4, ror #10
    11b8:	00636e75 	rsbeq	r6, r3, r5, ror lr
    11bc:	76646970 			; <UNDEFINED> instruction: 0x76646970
	*t = v;
    11c0:	64007265 	strvs	r7, [r0], #-613	; 0xfffffd9b
	TCI_RUN_AUXILIARY_TIMER;
    11c4:	00676169 	rsbeq	r6, r7, r9, ror #2
void update_n_wake (word min, Boolean force) {
    11c8:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
	if (TCI_UPDATE_DELAY_TICKS (force))
    11cc:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
    11d0:	00746163 	rsbseq	r6, r4, r3, ror #2
    11d4:	6576656d 	ldrbvs	r6, [r6, #-1389]!	; 0xfffffa93
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    11d8:	745f746e 	ldrbvc	r7, [pc], #-1134	; 11e0 <update_n_wake+0x18>
    11dc:	66636d00 	strbtvs	r6, [r3], -r0, lsl #26
    11e0:	00656572 	rsbeq	r6, r5, r2, ror r5
    11e4:	74736177 	ldrbtvc	r6, [r3], #-375	; 0xfffffe89
    11e8:	65720065 	ldrbvs	r0, [r2, #-101]!	; 0xffffff9b
    11ec:	00797274 	rsbseq	r7, r9, r4, ror r2
    11f0:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
    11f4:	73656d00 	cmnvc	r5, #0, 26
    11f8:	656d0073 	strbvs	r0, [sp, #-115]!	; 0xffffff8d
    11fc:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
    1200:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    1204:	61625f69 	cmnvs	r2, r9, ror #30
    1208:	61747364 	cmnvs	r4, r4, ror #6
		for_all_tasks (i) {
    120c:	5f006574 	svcpl	0x00006574
	__pi_mintk = znew + min;
    1210:	5f69705f 	svcpl	0x0069705f
    1214:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
			if (!twaiting (i))
    1218:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    121c:	61775f69 	cmnvs	r7, r9, ror #30
			if (twakecnd (__pi_old, znew, i->Timer)) {
    1220:	656d7469 	strbvs	r7, [sp, #-1129]!	; 0xfffffb97
    1224:	726c006d 	rsbvc	r0, ip, #109	; 0x6d
    1228:	6b00646e 	blvs	1a3e8 <__exidx_end+0x15340>
    122c:	616c6c69 	cmnvs	ip, r9, ror #24
    1230:	5f006c6c 	svcpl	0x00006c6c
    1234:	5f69705f 	svcpl	0x0069705f
    1238:	666d656d 	strbtvs	r6, [sp], -sp, ror #10
    123c:	00656572 	rsbeq	r6, r5, r2, ror r5
    1240:	6f6f425f 	svcvs	0x006f425f
    1244:	6863006c 	stmdavs	r3!, {r2, r3, r5, r6}^
    1248:	006b6e75 	rsbeq	r6, fp, r5, ror lr
    124c:	61647075 	smcvs	18181	; 0x4705
				wakeuptm (i);
    1250:	6e5f6574 	mrcvs	5, 2, r6, cr15, cr4, {3}
    1254:	6b61775f 	blvs	185efd8 <__ccfg+0x183f030>
		for_all_tasks (i) {
    1258:	5f5f0065 	svcpl	0x005f0065
				d = i->Timer - znew;
    125c:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
    1260:	00646565 	rsbeq	r6, r4, r5, ror #10
    1264:	63746567 	cmnvs	r4, #432013312	; 0x19c00000
		if ((word)(__pi_mintk - znew) < min) 
    1268:	0065646f 	rsbeq	r6, r5, pc, ror #8
    126c:	66656c64 	strbtvs	r6, [r5], -r4, ror #24
    1270:	5f5f0074 	svcpl	0x005f0074
	__pi_old = znew;
    1274:	6d5f6970 	vldrvs.16	s13, [pc, #-224]	; 119c <utimer_add+0x8>	; <UNPREDICTABLE>
}
    1278:	70636d65 	rsbvc	r6, r3, r5, ror #26
	TCI_RUN_DELAY_TIMER;
    127c:	67640079 			; <UNDEFINED> instruction: 0x67640079
}
    1280:	0074756f 	rsbseq	r7, r4, pc, ror #10
    1284:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    1288:	6974755f 	ldmdbvs	r4!, {r0, r1, r2, r3, r4, r6, r8, sl, ip, sp, lr}^
    128c:	5f72656d 	svcpl	0x0072656d
    1290:	00746573 	rsbseq	r6, r4, r3, ror r5
void proceed (word state) {
    1294:	6e756677 	mrcvs	6, 3, r6, cr5, cr7, {3}
	prcdstate (__pi_curr, state);
    1298:	61666e00 	cmnvs	r6, r0, lsl #28
    129c:	5f006c69 	svcpl	0x00006c69
	release;
    12a0:	5f69705f 	svcpl	0x0069705f
    12a4:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
void __pi_wait (aword event, word state) {
    12a8:	5f494400 	svcpl	0x00494400
	sint j = nevents (__pi_curr);
    12ac:	00474953 	subeq	r4, r7, r3, asr r9
	if (j >= MAX_EVENTS_PER_TASK)
    12b0:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    12b4:	6d656d5f 	stclvs	13, cr6, [r5, #-380]!	; 0xfffffe84
    12b8:	00746573 	rsbseq	r6, r4, r3, ror r5
		syserror (ENEVENTS, "sw");
    12bc:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    12c0:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
	setestate (__pi_curr->Events [j], state, event);
    12c4:	7970636e 	ldmdbvc	r0!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
	incwait (__pi_curr);
    12c8:	705f5f00 	subsvc	r5, pc, r0, lsl #30
	setestate (__pi_curr->Events [j], state, event);
    12cc:	6f6a5f69 	svcvs	0x006a5f69
}
    12d0:	75006e69 	strvc	r6, [r0, #-3689]	; 0xfffff197
    12d4:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    12d8:	65645f72 	strbvs	r5, [r4, #-3954]!	; 0xfffff08e
void __pi_trigger (aword event) {
    12dc:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
	for_all_tasks (i) {
    12e0:	705f5f00 	subsvc	r5, pc, r0, lsl #30
		for (j = 0; j < nevents (i); j++) {
    12e4:	74735f69 	ldrbtvc	r5, [r3], #-3945	; 0xfffff097
    12e8:	61636e72 	smcvs	14050	; 0x36e2
    12ec:	63740074 	cmnvs	r4, #116	; 0x74
    12f0:	73715f76 	cmnvc	r1, #472	; 0x1d8
			if (i->Events [j] . Event == event) {
    12f4:	00657a69 	rsbeq	r7, r5, r9, ror #20
    12f8:	76657270 			; <UNDEFINED> instruction: 0x76657270
    12fc:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 1304 <__pi_trigger+0x28>
				wakeupev (i, j);
    1300:	625f7663 	subsvs	r7, pc, #103809024	; 0x6300000
    1304:	72747461 	rsbsvc	r7, r4, #1627389952	; 0x61000000
	for_all_tasks (i) {
    1308:	7400745f 	strvc	r7, [r0], #-1119	; 0xfffffba1
}
    130c:	68707663 	ldmdavs	r0!, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^
aword __pi_join (aword pid, word st) {
    1310:	6f745f79 	svcvs	0x00745f79
	for_all_tasks (i) {
    1314:	63740070 	cmnvs	r4, #112	; 0x70
    1318:	6f635f76 	svcvs	0x00635f76
	return 0;
    131c:	6f72746e 	svcvs	0x0072746e
		if ((aword)i == pid) {
    1320:	682f006c 	stmdavs	pc!, {r2, r3, r5, r6}	; <UNPREDICTABLE>
			__pi_wait (pid, st);
    1324:	2f656d6f 	svccs	0x00656d6f
}
    1328:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
	for_all_tasks (i) {
    132c:	442f6e69 	strtmi	r6, [pc], #-3689	; 1334 <delay>
    1330:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
void delay (word d, word state) {
    1334:	4f2f706f 	svcmi	0x002f706f
	settstate (__pi_curr, state);
    1338:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    133c:	502f5445 	eorpl	r5, pc, r5, asr #8
    1340:	534f4349 	movtpl	r4, #62281	; 0xf349
    1344:	6369502f 	cmnvs	r9, #47	; 0x2f
	update_n_wake (d, YES);
    1348:	502f534f 	eorpl	r5, pc, pc, asr #6
    134c:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
	__pi_curr->Timer = __pi_old + d;
    1350:	654e562f 	strbvs	r5, [lr, #-1583]	; 0xfffff9d1
    1354:	742f4974 	strtvc	r4, [pc], #-2420	; 135c <delay+0x28>
	inctimer (__pi_curr);
    1358:	632e7663 			; <UNDEFINED> instruction: 0x632e7663
    135c:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    1360:	69645f70 	stmdbvs	r4!, {r4, r5, r6, r8, r9, sl, fp, ip, lr}^
}
    1364:	736f7073 	cmnvc	pc, #115	; 0x73
    1368:	63740065 	cmnvs	r4, #101	; 0x65
	if (fun == NULL)
    136c:	79687076 	stmdbvc	r8!, {r1, r2, r4, r5, r6, ip, sp, lr}^
		return (int) __pi_curr;
    1370:	6765725f 			; <UNDEFINED> instruction: 0x6765725f
    1374:	72746300 	rsbsvc	r6, r4, #0, 6
	for_all_tasks (i)
    1378:	6e75666c 	cdpvs	6, 7, cr6, cr5, cr12, {3}
}
    137c:	7400745f 	strvc	r7, [r0], #-1119	; 0xfffffba1
		if (i->code == fun)
    1380:	68707663 	ldmdavs	r0!, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^
	for_all_tasks (i)
    1384:	65675f79 	strbvs	r5, [r7, #-3961]!	; 0xfffff087
    1388:	63740074 	cmnvs	r4, #116	; 0x74
    138c:	706f5f76 	rsbvc	r5, pc, r6, ror pc	; <UNPREDICTABLE>
int __pi_strlen (const char *s) {
    1390:	74006e65 	strvc	r6, [r0], #-3685	; 0xfffff19b
	for (i = 0; *(s+i) != '\0'; i++);
    1394:	645f7663 	ldrbvs	r7, [pc], #-1635	; 139c <__pi_strlen+0xc>
}
    1398:	00706f72 	rsbseq	r6, r0, r2, ror pc
	for (i = 0; *(s+i) != '\0'; i++);
    139c:	73796870 	cmnvc	r9, #112, 16	; 0x700000
	while ((Boolean)(*d++ = *s++));
    13a0:	6f666e69 	svcvs	0x00666e69
    13a4:	706d6500 	rsbvc	r6, sp, r0, lsl #10
    13a8:	74007974 	strvc	r7, [r0], #-2420	; 0xfffff68c
}
    13ac:	68707663 	ldmdavs	r0!, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^
	while (n--)
    13b0:	72655f79 	rsbvc	r5, r5, #484	; 0x1e4
    13b4:	00657361 	rsbeq	r7, r5, r1, ror #6
		*dest++ = *src++;
    13b8:	70766374 	rsbsvc	r6, r6, r4, ror r3
    13bc:	7474615f 	ldrbtvc	r6, [r4], #-351	; 0xfffffea1
    13c0:	00686361 	rsbeq	r6, r8, r1, ror #6
	while (n--)
    13c4:	6575716f 	ldrbvs	r7, [r5, #-367]!	; 0xfffffe91
}
    13c8:	00736575 	rsbseq	r6, r3, r5, ror r5
		*dest++ = c;
    13cc:	63745f5f 	cmnvs	r4, #380	; 0x17c
void adddevfunc (devreqfun_t rf, int loc) {
    13d0:	69715f76 	ldmdbvs	r1!, {r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
		syserror (EREQPAR, "addv");
    13d4:	5f6d6574 	svcpl	0x006d6574
		syserror (ERESOURCE, "addv");
    13d8:	5f5f0073 	svcpl	0x005f0073
	if (ioreq [loc] != NULL)
    13dc:	5f766374 	svcpl	0x00766374
    13e0:	65746971 	ldrbvs	r6, [r4, #-2417]!	; 0xfffff68f
		syserror (ERESOURCE, "addv");
    13e4:	00745f6d 	rsbseq	r5, r4, sp, ror #30
	ioreq [loc] = rf;
    13e8:	63745f5f 	cmnvs	r4, #380	; 0x17c
}
    13ec:	62685f76 	rsbvs	r5, r8, #472	; 0x1d8
    13f0:	6b636f6c 	blvs	18dd1a8 <__ccfg+0x18bd200>
sint io (word retry, word dev, word operation, char *buf, word len) {
    13f4:	6100745f 	tstvs	r0, pc, asr r4
    13f8:	00707474 	rsbseq	r7, r0, r4, ror r4
    13fc:	65677275 	strbvs	r7, [r7, #-629]!	; 0xfffffd8b
    1400:	4500746e 	strmi	r7, [r0, #-1134]	; 0xfffffb92
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1404:	74725f72 	ldrbtvc	r5, [r2], #-3954	; 0xfffff08e
    1408:	73656400 	cmnvc	r5, #0, 8
    140c:	70697263 	rsbvc	r7, r9, r3, ror #4
		syserror (ENODEVICE, "io");
    1410:	73726f74 	cmnvc	r2, #116, 30	; 0x1d0
    1414:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
	if (len == 0)
    1418:	6172655f 	cmnvs	r2, pc, asr r5
	ret = (ioreq [dev]) (operation, buf, len);
    141c:	74006573 	strvc	r6, [r0], #-1395	; 0xfffffa8d
    1420:	655f7663 	ldrbvs	r7, [pc, #-1635]	; dc5 <setpowermode+0x21>
	if (ret >= 0)
    1424:	0070646e 	rsbseq	r6, r0, lr, ror #8
	if (ret == -1) {
    1428:	70766374 	rsbsvc	r6, r6, r4, ror r3
    142c:	77656e5f 			; <UNDEFINED> instruction: 0x77656e5f
		if (retry == WNONE)
    1430:	75717200 	ldrbvc	r7, [r1, #-512]!	; 0xfffffe00
		iowait (dev, operation, retry);
    1434:	00657565 	rsbeq	r7, r5, r5, ror #10
    1438:	73727470 	cmnvc	r2, #112, 8	; 0x70000000
    143c:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
			release;
    1440:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
	if (ret == -2) {
    1444:	63740073 	cmnvs	r4, #115	; 0x73
		if (retry != WNONE) {
    1448:	6e775f76 	mrcvs	15, 3, r5, cr7, cr6, {3}
    144c:	74007370 	strvc	r7, [r0], #-880	; 0xfffffc90
			iowait (dev, operation, retry);
    1450:	775f7663 	ldrbvc	r7, [pc, -r3, ror #12]
    1454:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
			(ioreq [dev]) (NONE, buf, len);
    1458:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    145c:	6f6c635f 	svcvs	0x006c635f
    1460:	5f006573 	svcpl	0x00006573
		(ioreq [dev]) (NONE, buf, len);
    1464:	7663745f 			; <UNDEFINED> instruction: 0x7663745f
    1468:	7365735f 	cmnvc	r5, #2080374785	; 0x7c000001
    146c:	63736564 	cmnvs	r3, #100, 10	; 0x19000000
}
    1470:	7000745f 	andvc	r7, r0, pc, asr r4
	if (retry != WNONE) {
    1474:	00737968 	rsbseq	r7, r3, r8, ror #18
		delay (-ret - 2, retry);
    1478:	73796870 	cmnvc	r9, #112, 16	; 0x700000
    147c:	6c616369 	stclvs	3, cr6, [r1], #-420	; 0xfffffe5c
    1480:	65757100 	ldrbvs	r7, [r5, #-256]!	; 0xffffff00
    1484:	00646575 	rsbeq	r6, r4, r5, ror r5
		release;
    1488:	5f766374 	svcpl	0x00766374
    148c:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1490:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    1494:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    1498:	65730074 	ldrbvs	r0, [r3, #-116]!	; 0xffffff8c
    149c:	6f697373 	svcvs	0x00697373
    14a0:	6374006e 	cmnvs	r4, #110	; 0x6e
		syserror (ERESOURCE, "mal1");
    14a4:	635f7076 	cmpvs	pc, #118	; 0x76
    14a8:	656e6f6c 	strbvs	r6, [lr, #-3948]!	; 0xfffff094
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    14ac:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    14b0:	73615f70 	cmnvc	r1, #112, 30	; 0x1c0
	m_magic (mpools [0]) = MALLOC_MAGIC;
    14b4:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
	m_size (mpools [0]) = mlen - m_hdrlen;
    14b8:	696c7000 	stmdbvs	ip!, {ip, sp, lr}^
	m_magic (mpools [0]) = MALLOC_MAGIC;
    14bc:	63740064 	cmnvs	r4, #100	; 0x64
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    14c0:	79687076 	stmdbvc	r8!, {r1, r2, r4, r5, r6, ip, sp, lr}^
    14c4:	646e655f 	strbtvs	r6, [lr], #-1375	; 0xfffffaa1
}
    14c8:	74746100 	ldrbtvc	r6, [r4], #-256	; 0xffffff00
    14cc:	74746170 	ldrbtvc	r6, [r4], #-368	; 0xfffffe90
    14d0:	006e7265 	rsbeq	r7, lr, r5, ror #4
    14d4:	5f766374 	svcpl	0x00766374
    14d8:	67756c70 			; <UNDEFINED> instruction: 0x67756c70
    14dc:	74746100 	ldrbtvc	r6, [r4], #-256	; 0xffffff00
void __pi_free (aword *ch) {
    14e0:	75626972 	strbvc	r6, [r2, #-2418]!	; 0xfffff68e
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    14e4:	00736574 	rsbseq	r6, r3, r4, ror r5
    14e8:	63745f5f 	cmnvs	r4, #380	; 0x17c
		syserror (EMALLOC, "malg");
    14ec:	68715f76 	ldmdavs	r1!, {r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    14f0:	5f646165 	svcpl	0x00646165
	mcfree [MA_NP] += m_size (ch);
    14f4:	6c700074 	ldclvs	0, cr0, [r0], #-464	; 0xfffffe30
		m_size (ch) ^= MALLOC_UMASK;
    14f8:	6e696775 	mcrvs	7, 3, r6, cr9, cr5, {3}
    14fc:	6e656c00 	cdpvs	12, 6, cr6, cr5, cr0, {0}
	mcfree [MA_NP] += m_size (ch);
    1500:	00687467 	rsbeq	r7, r8, r7, ror #8
	QFREE;
    1504:	70736964 	rsbsvc	r6, r3, r4, ror #18
	if (mevent [MA_NP] . nwait) {
    1508:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    150c:	706e725f 	rsbvc	r7, lr, pc, asr r2
		trigger ((aword)(&(mevent [MA_NP])));
    1510:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
		mevent [MA_NP] . nwait --;
    1514:	5f796870 	svcpl	0x00796870
}
    1518:	00766372 	rsbseq	r6, r6, r2, ror r3
    151c:	65757162 	ldrbvs	r7, [r5, #-354]!	; 0xfffffe9e
    1520:	70006575 	andvc	r6, r0, r5, ror r5
    1524:	6967756c 	stmdbvs	r7!, {r2, r3, r5, r6, r8, sl, ip, sp, lr}^
void kill (aword pid) {
    1528:	5f00736e 	svcpl	0x0000736e
		pid = (aword) __pi_curr;
    152c:	7663745f 			; <UNDEFINED> instruction: 0x7663745f
	j = NULL;
    1530:	6c62685f 	stclvs	8, cr6, [r2], #-380	; 0xfffffe84
	for_all_tasks (i) {
    1534:	5f6b636f 	svcpl	0x006b636f
	syserror (EREQPAR, "kpi");
    1538:	756f0073 	strbvc	r0, [pc, #-115]!	; 14cd <__pi_malloc_init+0x3d>
    153c:	696f6774 	stmdbvs	pc!, {r2, r4, r5, r6, r8, r9, sl, sp, lr}^	; <UNPREDICTABLE>
		if ((aword)i == pid) {
    1540:	7400676e 	strvc	r6, [r0], #-1902	; 0xfffff892
    1544:	5f707663 	svcpl	0x00707663
				__PCB = i->Next;
    1548:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
			killev (i);
    154c:	006c6f72 	rsbeq	r6, ip, r2, ror pc
			ufree (i);
    1550:	7473655f 	ldrbtvc	r6, [r3], #-1375	; 0xfffffaa1
			if (i == __pi_curr)
    1554:	006b6361 	rsbeq	r6, fp, r1, ror #6
    1558:	33697570 	cmncc	r9, #112, 10	; 0x1c000000
				release;
    155c:	63725332 	cmnvs	r2, #-939524096	; 0xc8000000
				j->Next = i->Next;
    1560:	75614600 	strbvc	r4, [r1, #-1536]!	; 0xfffffa00
    1564:	5349746c 	movtpl	r7, #37996	; 0x946c
    1568:	6e614852 	mcrvs	8, 3, r4, cr1, cr2, {2}
}
    156c:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    1570:	696d4e00 	stmdbvs	sp!, {r9, sl, fp, lr}^
    1574:	61485253 	cmpvs	r8, r3, asr r2
	if (size < 8)
    1578:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
		_size = 2;
    157c:	655f0072 	ldrbvs	r0, [pc, #-114]	; 1512 <__pi_free+0x32>
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1580:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
		_size = (((aword)size) + 3) >> 2;
    1584:	62655f00 	rsbvs	r5, r5, #0, 30
		if (m_magic (chunk) != MALLOC_MAGIC)
    1588:	2f007373 	svccs	0x00007373
		_size = (((aword)size) + 3) >> 2;
    158c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
		if (mevent [MA_NP] . nfail != 255)
    1590:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    1594:	2f6e6974 	svccs	0x006e6974
			mevent [MA_NP] . nfail ++;
    1598:	6b736544 	blvs	1cdaab0 <__ccfg+0x1cbab08>
		mnfree [MA_NP] = 0;
    159c:	2f706f74 	svccs	0x00706f74
    15a0:	4f534c4f 	svcmi	0x00534c4f
		if (m_magic (chunk) != MALLOC_MAGIC)
    15a4:	2f54454e 	svccs	0x0054454e
    15a8:	4f434950 	svcmi	0x00434950
			syserror (EMALLOC, "malc");
    15ac:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    15b0:	2f534f63 	svccs	0x00534f63
		if (m_size (chunk) >= _size)
    15b4:	33314343 	teqcc	r1, #201326593	; 0xc000001
    15b8:	732f5858 			; <UNDEFINED> instruction: 0x732f5858
		chunk = m_nextp (chunk)) {
    15bc:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
		m_setnextp (cc, m_nextp (chunk));
    15c0:	675f7075 			; <UNDEFINED> instruction: 0x675f7075
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    15c4:	632e6363 			; <UNDEFINED> instruction: 0x632e6363
    15c8:	73625f00 	cmnvc	r2, #0, 30
			m_size (chunk) = _size;
    15cc:	655f0073 	ldrbvs	r0, [pc, #-115]	; 1561 <kill+0x39>
			cc = chunk + _size + m_hdrlen;
    15d0:	61746164 	cmnvs	r4, r4, ror #2
    15d4:	746e4900 	strbtvc	r4, [lr], #-2304	; 0xfffff700
			m_size (cc) = waste - m_hdrlen;
    15d8:	61666544 	cmnvs	r6, r4, asr #10
			QFREE;
    15dc:	48746c75 	ldmdami	r4!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
		mevent [MA_NP] . nfail = 0;
    15e0:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
		mcfree [MA_NP] -= m_size (chunk);
    15e4:	67007265 	strvs	r7, [r0, -r5, ror #4]
    15e8:	6e66705f 	mcrvs	0, 3, r7, cr6, cr15, {2}
    15ec:	74636556 	strbtvc	r6, [r3], #-1366	; 0xfffffaaa
    15f0:	0073726f 	rsbseq	r7, r3, pc, ror #4
		m_size (chunk) |= MALLOC_UMASK;
    15f4:	33697570 	cmncc	r9, #112, 10	; 0x1c000000
		if (mnfree [MA_NP] > mcfree [MA_NP])
    15f8:	73654432 	cmnvc	r5, #838860800	; 0x32000000
		m_size (chunk) |= MALLOC_UMASK;
    15fc:	65520074 	ldrbvs	r0, [r2, #-116]	; 0xffffff8c
			mnfree [MA_NP] = mcfree [MA_NP];
    1600:	49746573 	ldmdbmi	r4!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
}
    1604:	43005253 	movwmi	r5, #595	; 0x253
    1608:	5f474643 	svcpl	0x00474643
    160c:	544c4f56 	strbpl	r4, [ip], #-3926	; 0xfffff0aa
    1610:	414f4c5f 	cmpmi	pc, pc, asr ip	; <UNPREDICTABLE>
    1614:	00305f44 	eorseq	r5, r0, r4, asr #30
    1618:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    161c:	4c4f565f 	mcrrmi	6, 5, r5, pc, cr15
aword __pi_fork (fsmcode func, aword data) {
    1620:	4f4c5f54 	svcmi	0x004c5f54
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1624:	315f4441 	cmpcc	pc, r1, asr #8
    1628:	46434300 	strbmi	r4, [r3], -r0, lsl #6
    162c:	4c425f47 	mcrrmi	15, 4, r5, r2, cr7
		if ((j = __PCB) == NULL)
    1630:	4e4f435f 	mcrmi	3, 2, r4, cr15, cr15, {2}
	i->Next = NULL;
    1634:	00474946 	subeq	r4, r7, r6, asr #18
	i->data = data;
    1638:	47464343 	strbmi	r4, [r6, -r3, asr #6]
		if ((j = __PCB) == NULL)
    163c:	4354525f 	cmpmi	r4, #-268435451	; 0xf0000005
}
    1640:	46464f5f 			; <UNDEFINED> instruction: 0x46464f5f
			for (; j->Next != NULL; j = j->Next);
    1644:	00544553 	subseq	r4, r4, r3, asr r5
    1648:	47464343 	strbmi	r4, [r6, -r3, asr #6]
	return (aword) i;
    164c:	444f4d5f 	strbmi	r4, [pc], #-3423	; 1654 <__pi_waitmem>
    1650:	4f435f45 	svcmi	0x00435f45
	if (mevent [MA_NP] . nwait != 255)
    1654:	5f00464e 	svcpl	0x0000464e
    1658:	6663635f 			; <UNDEFINED> instruction: 0x6663635f
    165c:	682f0067 	stmdavs	pc!, {r0, r1, r2, r5, r6}	; <UNPREDICTABLE>
		mevent [MA_NP] . nwait ++;
    1660:	2f656d6f 	svccs	0x00656d6f
	wait ((aword)(&(mevent [MA_NP])), state);
    1664:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    1668:	442f6e69 	strtmi	r6, [pc], #-3689	; 1670 <diag+0x4>
void diag (const char *mess, ...) {
    166c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    1670:	4f2f706f 	svcmi	0x002f706f
    1674:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
	diag_disable_int (a, is);
    1678:	502f5445 	eorpl	r5, pc, r5, asr #8
    167c:	534f4349 	movtpl	r4, #62281	; 0xf349
    1680:	6369502f 	cmnvs	r9, #47	; 0x2f
				d = (bc == 16) ? 10000 : 1000000000;
    1684:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
	diag_disable_int (a, is);
    1688:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
	while (*mess != '\0') {
    168c:	63632f58 	cmnvs	r3, #88, 30	; 0x160
	dgout ('\r');
    1690:	632e6766 			; <UNDEFINED> instruction: 0x632e6766
	dgout ('\n');
    1694:	46434300 	strbmi	r4, [r3], -r0, lsl #6
    1698:	49535f47 	ldmdbmi	r3, {r0, r1, r2, r6, r8, r9, sl, fp, ip, lr}^
    169c:	415f455a 	cmpmi	pc, sl, asr r5	; <UNPREDICTABLE>
	diag_wait (a);
    16a0:	445f444e 	ldrbmi	r4, [pc], #-1102	; 16a8 <diag+0x3c>
	diag_enable_int (a, is);
    16a4:	465f5349 	ldrbmi	r5, [pc], -r9, asr #6
    16a8:	5347414c 	movtpl	r4, #29004	; 0x714c
}
    16ac:	46434300 	strbmi	r4, [r3], -r0, lsl #6
    16b0:	45495f47 	strbmi	r5, [r9, #-3911]	; 0xfffff0b9
    16b4:	4d5f4545 	cfldr64mi	mvdx4, [pc, #-276]	; 15a8 <__pi_malloc+0x30>
		if (*mess == '%') {
    16b8:	305f4341 	subscc	r4, pc, r1, asr #6
    16bc:	46434300 	strbmi	r4, [r3], -r0, lsl #6
			if (*mess == 'l') {
    16c0:	45495f47 	strbmi	r5, [r9, #-3911]	; 0xfffff0b9
    16c4:	4d5f4545 	cfldr64mi	mvdx4, [pc, #-276]	; 15b8 <__pi_malloc+0x40>
				mess++;
    16c8:	315f4341 	cmpcc	pc, r1, asr #6
				val = va_arg (ap, lword);
    16cc:	46434300 	strbmi	r4, [r3], -r0, lsl #6
				bc = 32;
    16d0:	4f4d5f47 	svcmi	0x004d5f47
				bc = 16;
    16d4:	435f4544 	cmpmi	pc, #68, 10	; 0x11000000
			switch (*mess) {
    16d8:	5f464e4f 	svcpl	0x00464e4f
    16dc:	43430031 	movtmi	r0, #12337	; 0x3031
    16e0:	435f4746 	cmpmi	pc, #18350080	; 0x1180000
				dgout ('%');
    16e4:	5f474643 	svcpl	0x00474643
    16e8:	5f504154 	svcpl	0x00504154
				dgout (*mess);
    16ec:	5f504144 	svcpl	0x00504144
    16f0:	43430030 	movtmi	r0, #12336	; 0x3030
			switch (*mess) {
    16f4:	435f4746 	cmpmi	pc, #18350080	; 0x1180000
					v = __pi_hex_enc_table [
    16f8:	5f474643 	svcpl	0x00474643
					i += 4;
    16fc:	5f504154 	svcpl	0x00504154
					(val >> (bc - i)) & 0xf];
    1700:	5f504144 	svcpl	0x00504144
    1704:	63630031 	cmnvs	r3, #49	; 0x31
					dgout (v);
    1708:	745f6766 	ldrbvc	r6, [pc], #-1894	; 1710 <diag+0xa4>
    170c:	46434300 	strbmi	r4, [r3], -r0, lsl #6
				while (i < bc) {
    1710:	43435f47 	movtmi	r5, #16199	; 0x3f47
			mess++;
    1714:	505f4746 	subspl	r4, pc, r6, asr #14
					d /= 10;
    1718:	5f544f52 	svcpl	0x00544f52
				if ((val >> (bc - 1)) & 1) {
    171c:	5f373231 	svcpl	0x00373231
    1720:	43003639 	movwmi	r3, #1593	; 0x639
					dgout ('-');
    1724:	5f474643 	svcpl	0x00474643
    1728:	53415245 	movtpl	r5, #4677	; 0x1245
						val |= 0xffff0000;
    172c:	4f435f45 	svcmi	0x00435f45
    1730:	4300464e 	movwmi	r4, #1614	; 0x64e
    1734:	5f474643 	svcpl	0x00474643
				d = (bc == 16) ? 10000 : 1000000000;
    1738:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    173c:	4f52505f 	svcmi	0x0052505f
    1740:	31335f54 	teqcc	r3, r4, asr pc
					v = (word) (val / d);
    1744:	4300305f 	movwmi	r3, #95	; 0x5f
					if (v || d == 1) break;
    1748:	5f474643 	svcpl	0x00474643
    174c:	47414d49 	strbmi	r4, [r1, -r9, asr #26]
					d /= 10;
    1750:	41565f45 	cmpmi	r6, r5, asr #30
				d = (bc == 16) ? 10000 : 1000000000;
    1754:	5f44494c 	svcpl	0x0044494c
					dgout (v + '0');
    1758:	464e4f43 	strbmi	r4, [lr], -r3, asr #30
    175c:	46434300 	strbmi	r4, [r3], -r0, lsl #6
    1760:	52465f47 	subpl	r5, r6, #284	; 0x11c
					d /= 10;
    1764:	4f5f5145 	svcmi	0x005f5145
					val = val - (v * d);
    1768:	45534646 	ldrbmi	r4, [r3, #-1606]	; 0xfffff9ba
					if (d == 0) break;
    176c:	43430054 	movtmi	r0, #12372	; 0x3054
					v = (word) (val / d);
    1770:	435f4746 	cmpmi	pc, #18350080	; 0x1180000
    1774:	5f474643 	svcpl	0x00474643
				if (bc == 16)
    1778:	544f5250 	strbpl	r5, [pc], #-592	; 1780 <diag+0x114>
				d = (bc == 16) ? 10000 : 1000000000;
    177c:	5f33365f 	svcpl	0x0033365f
					val &= 0xffff;
    1780:	43003233 	movwmi	r3, #563	; 0x233
					dgout (*s);
    1784:	5f474643 	svcpl	0x00474643
					s++;
    1788:	45454549 	strbmi	r4, [r5, #-1353]	; 0xfffffab7
				while (*s != '\0') {
    178c:	454c425f 	strbmi	r4, [ip, #-607]	; 0xfffffda1
    1790:	4300305f 	movwmi	r3, #95	; 0x5f
			dgout (*mess++);
    1794:	5f474643 	svcpl	0x00474643
    1798:	45454549 	strbmi	r4, [r5, #-1353]	; 0xfffffab7
    179c:	454c425f 	strbmi	r4, [ip, #-607]	; 0xfffffda1
    17a0:	4300315f 	movwmi	r3, #351	; 0x15f
    17a4:	5f474643 	svcpl	0x00474643
	__pi_seed = __pi_seed * 1103515245 + 12345;
    17a8:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    17ac:	4f52505f 	svcmi	0x0052505f
    17b0:	35395f54 	ldrcc	r5, [r9, #-3924]!	; 0xfffff0ac
    17b4:	0034365f 	eorseq	r3, r4, pc, asr r6
	^ entropy
    17b8:	47464343 	strbmi	r4, [r6, -r3, asr #6]
}
    17bc:	5458455f 	ldrbpl	r4, [r8], #-1375	; 0xfffffaa1
    17c0:	5f464c5f 	svcpl	0x00464c5f
    17c4:	004b4c43 	subeq	r4, fp, r3, asr #24
    17c8:	47464343 	strbmi	r4, [r6, -r3, asr #6]
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    17cc:	4643435f 			; <UNDEFINED> instruction: 0x4643435f
	word cs = size + hblenb;
    17d0:	49545f47 	ldmdbmi	r4, {r0, r1, r2, r6, r8, r9, sl, fp, ip, lr}^
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    17d4:	54504f5f 	ldrbpl	r4, [r0], #-3935	; 0xfffff0a1
    17d8:	534e4f49 	movtpl	r4, #61257	; 0xef49
	p -> length = size;
    17dc:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
}
    17e0:	65725f4f 	ldrbvs	r5, [r2, #-3919]!	; 0xfffff0b1
	if (p->attributes.b.queued) {
    17e4:	69446461 	stmdbvs	r4, {r0, r5, r6, sl, sp, lr}^
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    17e8:	756a006f 	strbvc	r0, [sl, #-111]!	; 0xffffff91
    17ec:	70006b6e 	andvc	r6, r0, lr, ror #22
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    17f0:	735f6e69 	cmpvc	pc, #1680	; 0x690
		p->attributes.b.queued = 0;
    17f4:	6f736e65 	svcvs	0x00736e65
    17f8:	65725f72 	ldrbvs	r5, [r2, #-3954]!	; 0xfffff08e
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    17fc:	70006461 	andvc	r6, r0, r1, ror #8
	deq (p);	// Remove from queue
    1800:	735f6e69 	cmpvc	pc, #1680	; 0x690
}
    1804:	6f736e65 	svcvs	0x00736e65
	tfree ((address)p);
    1808:	6e695f72 	mcrvs	15, 3, r5, cr9, cr2, {3}
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    180c:	2f007469 	svccs	0x00007469
    1810:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    1814:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1818:	2f6e6974 	svccs	0x006e6974
    181c:	6b736544 	blvs	1cdad34 <__ccfg+0x1cbad8c>
	if (q_empty (q))
    1820:	2f706f74 	svccs	0x00706f74
    1824:	4f534c4f 	svcmi	0x00534c4f
		trigger (q);
    1828:	2f54454e 	svccs	0x0054454e
	if (p->attributes.b.urgent) {
    182c:	4f434950 	svcmi	0x00434950
		p->u.bqueue.next = q->next;
    1830:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
		p->u.bqueue.prev = q;
    1834:	2f534f63 	svccs	0x00534f63
		q->next->prev = (qitem_t*) p;
    1838:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
	p->attributes.b.queued = 1;
    183c:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    1840:	726f736e 	rsbvc	r7, pc, #-1207959551	; 0xb8000001
}
    1844:	69702f73 	ldmdbvs	r0!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp}^
		p->u.bqueue.prev = q->prev;
    1848:	65735f6e 	ldrbvs	r5, [r3, #-3950]!	; 0xfffff092
		q->prev->next = (qitem_t*) p;
    184c:	726f736e 	rsbvc	r7, pc, #-1207959551	; 0xb8000001
		q->prev = (qitem_t*) p;
    1850:	5400632e 	strpl	r6, [r0], #-814	; 0xfffffcd2
    1854:	006d7265 	rsbeq	r7, sp, r5, ror #4
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    1858:	74636162 	strbtvc	r6, [r3], #-354	; 0xfffffe9e
	deq (p);	// Soft dequeue, timer and hook left intact
    185c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
	switch (dv) {
    1860:	6f626544 	svcvs	0x00626544
    1864:	65636e75 	strbvs	r6, [r3, #-3701]!	; 0xfffff18b
    1868:	6f682f00 	svcvs	0x00682f00
    186c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 16c0 <diag+0x54>
			p->attributes.b.urgent = 1;
    1870:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    1874:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
			verify_ses (p, "dispose ses");
    1878:	6f746b73 	svcvs	0x00746b73
    187c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    1880:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    1884:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    1888:	2f534f43 	svccs	0x00534f43
			verify_phy (p, "dispose phy");
    188c:	4f636950 	svcmi	0x00636950
    1890:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
}
    1894:	2f736269 	svccs	0x00736269
			enq (oqueues [p->attributes.b.phys], p);
    1898:	622f4f49 	eorvs	r4, pc, #292	; 0x124
			p->attributes.b.urgent = 1;
    189c:	6f747475 	svcvs	0x00747475
    18a0:	632e736e 			; <UNDEFINED> instruction: 0x632e736e
			verify_phy (p, "dispose phy");
    18a4:	75627000 	strbvc	r7, [r2, #-0]!
    18a8:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    18ac:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    18b0:	75625f69 	strbvc	r5, [r2, #-3945]!	; 0xfffff097
    18b4:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    18b8:	75620073 	strbvc	r0, [r2, #-115]!	; 0xffffff8d
			enq (oqueues [p->attributes.b.phys], p);
    18bc:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    18c0:	63615f73 	cmnvs	r1, #460	; 0x1cc
}
    18c4:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
			rlp (p);
    18c8:	6f434500 	svcvs	0x00434500
}
    18cc:	6500746e 	strvs	r7, [r0, #-1134]	; 0xfffffb92
    18d0:	6e695f65 	cdpvs	15, 6, cr5, cr9, cr5, {3}
    18d4:	655f7469 	ldrbvs	r7, [pc, #-1129]	; 1473 <io+0x7f>
    18d8:	65736172 	ldrbvs	r6, [r3, #-370]!	; 0xfffffe8e
    18dc:	74707500 	ldrbtvc	r7, [r0], #-1280	; 0xfffffb00
    18e0:	6d63006f 	stclvs	0, cr0, [r3, #-444]!	; 0xfffffe44
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    18e4:	00305f64 	eorseq	r5, r0, r4, ror #30
	if (b->attributes.b.outgoing) {
    18e8:	635f6565 	cmpvs	pc, #423624704	; 0x19400000
	b = header (p);
    18ec:	65736f6c 	ldrbvs	r6, [r3, #-3948]!	; 0xfffff094
	if (b->attributes.b.outgoing) {
    18f0:	5f656500 	svcpl	0x00656500
		verify_ses (b, "tcv02");
    18f4:	73617265 	cmnvc	r1, #1342177286	; 0x50000006
    18f8:	65650065 	strbvs	r0, [r5, #-101]!	; 0xffffff9b
    18fc:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    1900:	64006574 	strvs	r6, [r0], #-1396	; 0xfffffa8c
    1904:	6e65706f 	cdpvs	0, 6, cr7, cr5, cr15, {3}
		verify_plg (b, tcv_out, "tcv03");
    1908:	5f656500 	svcpl	0x00656500
    190c:	6e65706f 	cdpvs	0, 6, cr7, cr5, cr15, {3}
    1910:	6f435700 	svcvs	0x00435700
    1914:	6300746e 	movwvs	r7, #1134	; 0x46e
    1918:	335f646d 	cmpcc	pc, #1828716544	; 0x6d000000
    191c:	5f656500 	svcpl	0x00656500
    1920:	696e6170 	stmdbvs	lr!, {r4, r5, r6, r8, sp, lr}^
    1924:	65650063 	strbvs	r0, [r5, #-99]!	; 0xffffff9d
    1928:	6e79735f 	mrcvs	3, 3, r7, cr9, cr15, {2}
		dispose (b, plugins [b->attributes.b.plugin] ->
    192c:	72660063 	rsbvc	r0, r6, #99	; 0x63
}
    1930:	65006d6f 	strvs	r6, [r0, #-3439]	; 0xfffff291
		dispose (b, plugins [b->attributes.b.plugin] ->
    1934:	65725f65 	ldrbvs	r5, [r2, #-3941]!	; 0xfffff09b
		rlp (b);
    1938:	72006461 	andvc	r6, r0, #1627389952	; 0x61000000
}
    193c:	00727364 	rsbseq	r7, r2, r4, ror #6
		rlp (b);
    1940:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 188c <dispose+0x34>
    1944:	616d2f65 	cmnvs	sp, r5, ror #30
    1948:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    194c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    1950:	706f746b 	rsbvc	r7, pc, fp, ror #8
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    1954:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    1958:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    195c:	4349502f 	movtmi	r5, #36911	; 0x902f
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1960:	502f534f 	eorpl	r5, pc, pc, asr #6
	va_start (ap, plid);
    1964:	534f6369 	movtpl	r6, #62313	; 0xf369
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1968:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    196c:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    1970:	61726f74 	cmnvs	r2, r4, ror pc
    1974:	732f6567 			; <UNDEFINED> instruction: 0x732f6567
    1978:	61726f74 	cmnvs	r2, r4, ror pc
    197c:	6d5f6567 	cfldr64vs	mvdx6, [pc, #-412]	; 17e8 <deq+0x6>
			syserror (ENODEVICE, "tcv04");
    1980:	72353278 	eorsvc	r3, r5, #120, 4	; 0x80000007
		syserror (EMALLOC, "tcv05");
    1984:	35333038 	ldrcc	r3, [r3, #-56]!	; 0xffffffc8
	attp.b.outgoing = 1;
    1988:	6300632e 	movwvs	r6, #814	; 0x32e
    198c:	736f6c63 	cmnvc	pc, #25344	; 0x6300
    1990:	73640065 	cmnvc	r4, #101	; 0x65
    1994:	00746174 	rsbseq	r6, r4, r4, ror r1
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1998:	65706f63 	ldrbvs	r6, [r0, #-3939]!	; 0xfffff09d
		if (descriptors [fd] == NULL)
    199c:	7063006e 	rsbvc	r0, r3, lr, rrx
    19a0:	65007274 	strvs	r7, [r0, #-628]	; 0xfffffd8c
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    19a4:	69735f65 	ldmdbvs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
		return ERROR;
    19a8:	7200657a 	andvc	r6, r0, #511705088	; 0x1e800000
}
    19ac:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
    19b0:	6f444500 	svcvs	0x00444500
    19b4:	7000656e 	andvc	r6, r0, lr, ror #10
	s->attpattern.b.session = fd;
    19b8:	6e776f64 	cdpvs	15, 7, cr6, cr7, cr4, {3}
    19bc:	61777700 	cmnvs	r7, r0, lsl #14
	descriptors [fd] = s;
    19c0:	67007469 	strvs	r7, [r0, -r9, ror #8]
	q_init (&(s->rqueue));
    19c4:	625f7465 	subsvs	r7, pc, #1694498816	; 0x65000000
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    19c8:	00657479 	rsbeq	r7, r5, r9, ror r4
    19cc:	5f747570 	svcpl	0x00747570
    19d0:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
    19d4:	695f5f00 	ldmdbvs	pc, {r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    19d8:	696c706e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, ip, sp, lr}^
    19dc:	2f00656e 	svccs	0x0000656e
    19e0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
	descriptors [fd] = s;
    19e4:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    19e8:	2f6e6974 	svccs	0x006e6974
    19ec:	6b736544 	blvs	1cdaf04 <__ccfg+0x1cbaf5c>
	if (s == NULL)
    19f0:	2f706f74 	svccs	0x00706f74
		syserror (EMALLOC, "tcv05");
    19f4:	4f534c4f 	svcmi	0x00534c4f
    19f8:	2f54454e 	svccs	0x0054454e
    19fc:	4f434950 	svcmi	0x00434950
    1a00:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    1a04:	2f534f63 	svccs	0x00534f63
    1a08:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    1a0c:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    1a10:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    1a14:	7265732f 	rsbvc	r7, r5, #-1140850688	; 0xbc000000
	    (plugins [ord] != NULL && plugins [ord] != pl))
    1a18:	2e6e695f 			; <UNDEFINED> instruction: 0x2e6e695f
    1a1c:	65730063 	ldrbvs	r0, [r3, #-99]!	; 0xffffff9d
    1a20:	6e695f72 	mcrvs	15, 3, r5, cr9, cr2, {3}
	plugins [ord] = pl;
    1a24:	72657300 	rsbvc	r7, r5, #0, 6
	return 0;
    1a28:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xfffff0a1
		return ERROR;
    1a2c:	682f0066 	stmdavs	pc!, {r1, r2, r5, r6}	; <UNPREDICTABLE>
}
    1a30:	2f656d6f 	svccs	0x00656d6f
    1a34:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
	verify_fds (fd, "tcv16");
    1a38:	442f6e69 	strtmi	r6, [pc], #-3689	; 1a40 <tcv_wnps+0x8>
								Boolean urg) {
    1a3c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    1a40:	4f2f706f 	svcmi	0x002f706f
	verify_fds (fd, "tcv16");
    1a44:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    1a48:	502f5445 	eorpl	r5, pc, r5, asr #8
    1a4c:	534f4349 	movtpl	r4, #62281	; 0xf349
	verify_pld (s, tcv_frm, "tcv17");
    1a50:	6369502f 	cmnvs	r9, #47	; 0x2f
    1a54:	502f534f 	eorpl	r5, pc, pc, asr #6
    1a58:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    1a5c:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
    1a60:	2f6c6169 	svccs	0x006c6169
    1a64:	5f726573 	svcpl	0x00726573
    1a68:	6674756f 	ldrbtvs	r7, [r4], -pc, ror #10
    1a6c:	2f00632e 	svccs	0x0000632e
	ptrs.head = (word) fd;
    1a70:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
	ptrs.tail = (word) urg;
    1a74:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    1a78:	2f6e6974 	svccs	0x006e6974
    1a7c:	6b736544 	blvs	1cdaf94 <__ccfg+0x1cbafec>
		if (state != WNONE) {
    1a80:	2f706f74 	svccs	0x00706f74
    1a84:	4f534c4f 	svcmi	0x00534c4f
}
    1a88:	2f54454e 	svccs	0x0054454e
			when (eid, state);
    1a8c:	4f434950 	svcmi	0x00434950
    1a90:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
			release;
    1a94:	2f534f63 	svccs	0x00534f63
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    1a98:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    1a9c:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    1aa0:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    1aa4:	7265732f 	rsbvc	r7, r5, #-1140850688	; 0xbc000000
    1aa8:	666e695f 			; <UNDEFINED> instruction: 0x666e695f
    1aac:	7300632e 	movwvc	r6, #814	; 0x32e
    1ab0:	695f7265 	ldmdbvs	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    1ab4:	6900666e 	stmdbvs	r0, {r1, r2, r3, r5, r6, r9, sl, sp, lr}
		if (state != WNONE) {
    1ab8:	65757373 	ldrbvs	r7, [r5, #-883]!	; 0xfffffc8d
    1abc:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
			tmwait (state);
    1ac0:	646f6d00 	strbtvs	r6, [pc], #-3328	; 1ac8 <tcv_wnps+0x90>
    1ac4:	74616c75 	strbtvc	r6, [r1], #-3189	; 0xfffff38b
	b->attributes = s->attpattern;
    1ac8:	006e6f69 	rsbeq	r6, lr, r9, ror #30
		b->attributes.b.urgent = 1;
    1acc:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
    1ad0:	4e646e61 	cdpmi	14, 6, cr6, cr4, cr1, {3}
	b->u.pointers.head = ptrs.head;
    1ad4:	4162006f 	cmnmi	r2, pc, rrx
	b->u.pointers.tail = length;
    1ad8:	6e657070 	mcrvs	0, 3, r7, cr5, cr0, {3}
	return (address) (b + 1);
    1adc:	61745364 	cmnvs	r4, r4, ror #6
    1ae0:	00737574 	rsbseq	r7, r3, r4, ror r5
    1ae4:	6f5f6672 	svcvs	0x005f6672
    1ae8:	6672006e 	ldrbtvs	r0, [r2], -lr, rrx
    1aec:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1af0:	61566200 	cmpvs	r6, r0, lsl #4
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    1af4:	6e654c72 	mcrvs	12, 3, r4, cr5, cr2, {3}
    1af8:	6b507000 	blvs	141db00 <__ccfg+0x13fdb58>
    1afc:	65630074 	strbvs	r0, [r3, #-116]!	; 0xffffff8c
	verify_fph (phy, "tcv23");
    1b00:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    1b04:	71657246 	cmnvc	r5, r6, asr #4
    1b08:	6e6f6300 	cdpvs	3, 6, cr6, cr15, cr0, {0}
    1b0c:	75676966 	strbvc	r6, [r7, #-2406]!	; 0xfffff69a
}
    1b10:	65476572 	strbvs	r6, [r7, #-1394]	; 0xfffffa8e
	return (physical [phy]) (opt, arg);
    1b14:	6b73666e 	blvs	1cdb4d4 <__ccfg+0x1cbb52c>
    1b18:	63746150 	cmnvs	r4, #80, 2
    1b1c:	68770068 	ldmdavs	r7!, {r3, r5, r6}^
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    1b20:	6e657469 	cdpvs	4, 6, cr7, cr5, cr9, {3}
	if (opt < 0) {
    1b24:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
		if (fd < 0)
    1b28:	63667200 	cmnvs	r6, #0, 4
		if (opt == PHYSOPT_PLUGINFO) {
    1b2c:	444d435f 	strbmi	r4, [sp], #-863	; 0xfffffca1
			if (fd >= TCV_MAX_PLUGS)
    1b30:	4f52505f 	svcmi	0x0052505f
			if ((p = plugins [fd]) == NULL)
    1b34:	53435f50 	movtpl	r5, #16208	; 0x3f50
    1b38:	7000735f 	andvc	r7, r0, pc, asr r3
}
    1b3c:	54747361 	ldrbtpl	r7, [r4], #-865	; 0xfffffc9f
		if (fd >= TCV_MAX_PHYS)
    1b40:	00676972 	rsbeq	r6, r7, r2, ror r9
		return physinfo [fd];
    1b44:	72546672 	subsvc	r6, r4, #119537664	; 0x7200000
    1b48:	745f6d69 	ldrbvc	r6, [pc], #-3433	; 1b50 <tcv_control+0x30>
	verify_fds (fd, "tcv22");
    1b4c:	75627200 	strbvc	r7, [r2, #-512]!	; 0xfffffe00
    1b50:	006c6666 	rsbeq	r6, ip, r6, ror #12
    1b54:	4c5f5244 	lfmmi	f5, 2, [pc], {68}	; 0x44
    1b58:	5f504f4f 	svcpl	0x00504f4f
    1b5c:	4f70005f 	svcmi	0x0070005f
}
    1b60:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    1b64:	52620074 	rsbpl	r0, r2, #116	; 0x74
    1b68:	61657065 	cmnvs	r5, r5, rrx
			return 0;
    1b6c:	006b4f74 	rsbeq	r4, fp, r4, ror pc
    1b70:	4978526e 	ldmdbmi	r8!, {r1, r2, r3, r5, r6, r9, ip, lr}^
    1b74:	726f6e67 	rsbvc	r6, pc, #1648	; 0x670
    1b78:	66006465 	strvs	r6, [r0], -r5, ror #8
    1b7c:	6f4d6365 	svcvs	0x004d6365
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    1b80:	6e006564 	cfsh32vs	mvfx6, mvfx0, #52
    1b84:	6f4e7852 	svcvs	0x004e7852
	if (dsp != TCV_DSP_PASS) {
    1b88:	666f006b 	strbtvs	r0, [pc], -fp, rrx
		if (ses == NONE)
    1b8c:	6c656466 	cfstrdvs	mvd6, [r5], #-408	; 0xfffffe68
			syserror (EREQPAR, "tcv26");
    1b90:	70007961 	andvc	r7, r0, r1, ror #18
		verify_fds (ses, "tcv27");
    1b94:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
    1b98:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    1b9c:	75437000 	strbvc	r7, [r3, #-0]
    1ba0:	6e457272 	mcrvs	2, 2, r7, cr5, cr2, {3}
    1ba4:	00797274 	rsbseq	r7, r9, r4, ror r2
		if ((p = apb (size)) != NULL) {
    1ba8:	49717269 	ldmdbmi	r1!, {r0, r3, r5, r6, r9, ip, sp, lr}^
    1bac:	0076746e 	rsbseq	r7, r6, lr, ror #8
		return NULL;
    1bb0:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
			p->attributes = descriptors [ses] -> attpattern;
    1bb4:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
			dispose (p, dsp);
    1bb8:	726f6600 	rsbvc	r6, pc, #0, 12
			p->attributes = descriptors [ses] -> attpattern;
    1bbc:	4374616d 	cmnmi	r4, #1073741851	; 0x4000001b
			p->attributes.b.outgoing = 0;
    1bc0:	00666e6f 	rsbeq	r6, r6, pc, ror #28
			dispose (p, dsp);
    1bc4:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
			return (address)(p + 1);
    1bc8:	6d695474 	cfstrdvs	mvd5, [r9, #-464]!	; 0xfffffe30
    1bcc:	41620065 	cmnmi	r2, r5, rrx
	if ((p = apb (size)) != NULL)
    1bd0:	6e657070 	mcrvs	0, 3, r7, cr5, cr0, {3}
    1bd4:	6d695464 	cfstrdvs	mvd5, [r9, #-400]!	; 0xfffffe70
		return (address)(p + 1);
    1bd8:	61747365 	cmnvs	r4, r5, ror #6
    1bdc:	7000706d 	andvc	r7, r0, sp, rrx
    1be0:	7478654e 	ldrbtvc	r6, [r8], #-1358	; 0xfffffab2
    1be4:	72746e45 	rsbsvc	r6, r4, #1104	; 0x450
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1be8:	46520079 			; <UNDEFINED> instruction: 0x46520079
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    1bec:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1bf0:	706f7250 	rsbvc	r7, pc, r0, asr r2	; <UNPREDICTABLE>
    1bf4:	69646152 	stmdbvs	r4!, {r1, r4, r6, r8, sp, lr}^
		syserror (EREQPAR, "tcv28");
    1bf8:	7669446f 	strbtvc	r4, [r9], -pc, ror #8
		syserror (EMALLOC, "tcv29");
    1bfc:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
	physical [phy] = ps;
    1c00:	65710070 	ldrbvs	r0, [r1, #-112]!	; 0xffffff90
	physinfo [phy] = info;
    1c04:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
    1c08:	746b7000 	strbtvc	r7, [fp], #-0
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    1c0c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1c10:	79687000 	stmdbvc	r8!, {ip, sp, lr}^
    1c14:	63635f73 	cmnvs	r3, #460	; 0x1cc
		syserror (EMALLOC, "tcv29");
    1c18:	30353331 	eorscc	r3, r5, r1, lsr r3
    1c1c:	31636300 	cmncc	r3, r0, lsl #6
	q_init (q);
    1c20:	5f303533 	svcpl	0x00303533
}
    1c24:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    1c28:	72007265 	andvc	r7, r0, #1342177286	; 0x50000006
    1c2c:	435f6366 	cmpmi	pc, #-1744830463	; 0x98000001
    1c30:	465f444d 	ldrbmi	r4, [pc], -sp, asr #8
    1c34:	00735f53 	rsbseq	r5, r3, r3, asr pc
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1c38:	5f636672 	svcpl	0x00636672
	verify_fph (phy, "tcv30");
    1c3c:	5f444d43 	svcpl	0x00444d43
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1c40:	745f5346 	ldrbvc	r5, [pc], #-838	; 1c48 <tcvphy_rcv+0x10>
    1c44:	50787400 	rsbspl	r7, r8, r0, lsl #8
	verify_fph (phy, "tcv30");
    1c48:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    1c4c:	42787200 	rsbsmi	r7, r8, #0, 4
    1c50:	70610077 	rsbvc	r0, r1, r7, ror r0
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1c54:	47796c70 			; <UNDEFINED> instruction: 0x47796c70
    1c58:	73666e65 	cmnvc	r6, #1616	; 0x650
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1c5c:	7461506b 	strbtvc	r5, [r1], #-107	; 0xffffff95
    1c60:	63006863 	movwvs	r6, #2147	; 0x863
		if (plugins [plg] == NULL)
    1c64:	6e6e6168 	powvsez	f6, f6, #0.0
    1c68:	73006c65 	movwvc	r6, #3173	; 0xc65
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    1c6c:	68746e79 	ldmdavs	r4!, {r0, r3, r4, r5, r6, r9, sl, fp, sp, lr}^
}
    1c70:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1c74:	75416200 	strbvc	r6, [r1, #-512]	; 0xfffffe00
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1c78:	6c466f74 	mcrrvs	15, 7, r6, r6, cr4
    1c7c:	43687375 	cmnmi	r8, #-738197503	; 0xd4000001
    1c80:	72456372 	subvc	r6, r5, #-939524095	; 0xc8000001
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1c84:	6f630072 	svcvs	0x00630072
    1c88:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1c8c:	72466652 	subvc	r6, r6, #85983232	; 0x5200000
    1c90:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
    1c94:	6200646e 	andvs	r6, r0, #1845493760	; 0x6e000000
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    1c98:	6f4d7854 	svcvs	0x004d7854
	len -= (ap.head + ap.tail);
    1c9c:	61006564 	tstvs	r0, r4, ror #10
    1ca0:	6f6c616e 	svcvs	0x006c616e
    1ca4:	67664367 	strbvs	r4, [r6, -r7, ror #6]!
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    1ca8:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    1cac:	6e456200 	cdpvs	2, 4, cr6, cr5, cr0, {0}
    1cb0:	646d4361 	strbtvs	r4, [sp], #-865	; 0xfffffc9f
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    1cb4:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
    1cb8:	72726f43 	rsbsvc	r6, r2, #268	; 0x10c
    1cbc:	00766e49 	rsbseq	r6, r6, r9, asr #28
	return 1;
    1cc0:	71724970 	cmnvc	r2, r0, ror r9
    1cc4:	63746150 	cmnvs	r4, #80, 2
    1cc8:	50700068 	rsbspl	r0, r0, r8, rrx
    1ccc:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
    1cd0:	00636556 	rsbeq	r6, r3, r6, asr r5
	verify_fph (phy, "tcv32");
    1cd4:	43434652 	movtmi	r4, #13906	; 0x3652
    1cd8:	6e496570 	mcrvs	5, 2, r6, cr9, cr0, {3}
    1cdc:	73694474 	cmnvc	r9, #116, 8	; 0x74000000
    1ce0:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    1ce4:	78616d00 	stmdavc	r1!, {r8, sl, fp, sp, lr}^
    1ce8:	4c746b50 			; <UNDEFINED> instruction: 0x4c746b50
	oq = oqueues [phy];
    1cec:	63006e65 	movwvs	r6, #3685	; 0xe65
	b = q_first (oq);
    1cf0:	4372726f 	cmnmi	r2, #-268435450	; 0xf0000006
	if (q_end (b, oq)) {
    1cf4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
	*len = b->length;
    1cf8:	61720067 	cmnvs	r2, r7, rrx
	deq (b);	// Dequeue the packet ...
    1cfc:	62003074 	andvs	r3, r0, #116	; 0x74
}
    1d00:	4d736169 	ldfmie	f6, [r3, #-420]!	; 0xfffffe5c
		return NULL;
    1d04:	0065646f 	rsbeq	r6, r5, pc, ror #8
    1d08:	43434652 	movtmi	r4, #13906	; 0x3652
    1d0c:	49306570 	ldmdbmi	r0!, {r4, r5, r6, r8, sl, sp, lr}
    1d10:	6e45746e 	cdpvs	4, 4, cr7, cr5, cr14, {3}
	verify_fph (phy, "tcv33");
    1d14:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    1d18:	6e496200 	cdpvs	2, 4, cr6, cr9, cr0, {0}
    1d1c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    1d20:	63724365 	cmnvs	r2, #-1811939327	; 0x94000001
    1d24:	6e6f6300 	cdpvs	3, 6, cr6, cr15, cr0, {0}
    1d28:	49676966 	stmdbmi	r7!, {r1, r2, r5, r6, r8, fp, sp, lr}^
	oq = oqueues [phy];
    1d2c:	63644166 	cmnvs	r4, #-2147483623	; 0x80000019
	b = q_first (oq);
    1d30:	63667200 	cmnvs	r6, #0, 4
		return NULL;
    1d34:	444d435f 	strbmi	r4, [sp], #-863	; 0xfffffca1
	return (address)(b + 1);
    1d38:	4f52505f 	svcmi	0x0052505f
}
    1d3c:	58525f50 	ldmdapl	r2, {r4, r6, r8, r9, sl, fp, ip, lr}^
    1d40:	6500735f 	strvs	r7, [r0, #-863]	; 0xfffffca1
    1d44:	7254646e 	subsvc	r6, r4, #1845493760	; 0x6e000000
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    1d48:	65676769 	strbvs	r6, [r7, #-1897]!	; 0xfffff897
	verify_plg (b, tcv_xmt, "tcv34");
    1d4c:	66720072 			; <UNDEFINED> instruction: 0x66720072
	hblock_t *b = header (pkt);
    1d50:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
	verify_plg (b, tcv_xmt, "tcv34");
    1d54:	52505f44 	subspl	r5, r0, #68, 30	; 0x110
    1d58:	435f504f 	cmpmi	pc, #79	; 0x4f
    1d5c:	00745f53 	rsbseq	r5, r4, r3, asr pc
    1d60:	6e6f7266 	cdpvs	2, 6, cr7, cr15, cr6, {3}
    1d64:	646e4574 	strbtvs	r4, [lr], #-1396	; 0xfffffa8c
    1d68:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    1d6c:	69727400 	ldmdbvs	r2!, {sl, ip, sp, lr}^
	dispose (b, plugins [b->attributes.b.plugin] ->
    1d70:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
}
    1d74:	70006f4e 	andvc	r6, r0, lr, asr #30
	dispose (b, plugins [b->attributes.b.plugin] ->
    1d78:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
    1d7c:	6e650065 	cdpvs	0, 6, cr0, cr5, cr5, {3}
    1d80:	70795464 	rsbsvc	r5, r9, r4, ror #8
}
    1d84:	6d630065 	stclvs	0, cr0, [r3, #-404]!	; 0xfffffe6c
    while(1)
    1d88:	73635f64 	cmnvc	r3, #100, 30	; 0x190
{
    1d8c:	73737200 	cmnvc	r3, #0, 4
    SetupTrimDevice();
    1d90:	72685469 	rsbvc	r5, r8, #1761607680	; 0x69000000
    pui32Src = &_etext;
    1d94:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1d98:	72726f43 	rsbsvc	r6, r2, #268	; 0x10c
    __asm("    ldr     r0, =_bss\n"
    1d9c:	79737542 	ldmdbvc	r3!, {r1, r6, r8, sl, ip, sp, lr}^
    1da0:	61565200 	cmpvs	r6, r0, lsl #4
    1da4:	6f63006c 	svcvs	0x0063006c
    1da8:	7469646e 	strbtvc	r6, [r9], #-1134	; 0xfffffb92
    1dac:	006e6f69 	rsbeq	r6, lr, r9, ror #30
   main();
    1db0:	636e4962 	cmnvs	lr, #1605632	; 0x188000
    FaultISR();
    1db4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
        *pui32Dest++ = *pui32Src++;
    1db8:	00726448 	rsbseq	r6, r2, r8, asr #8
    1dbc:	7473616c 	ldrbtvc	r6, [r3], #-364	; 0xfffffe94
    1dc0:	69737352 	ldmdbvs	r3!, {r1, r4, r6, r8, r9, ip, sp, lr}^
    1dc4:	646f6d00 	strbtvs	r6, [pc], #-3328	; 1dcc <zero_loop+0x28>
    1dc8:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    1dcc:	614c7000 	mrsvs	r7, (UNDEF: 76)
    1dd0:	6e457473 	mcrvs	4, 2, r7, cr5, cr3, {3}
    1dd4:	00797274 	rsbseq	r7, r9, r4, ror r2
static byte get_byte () {
    1dd8:	4278526e 	rsbsmi	r5, r8, #-536870906	; 0xe0000006
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1ddc:	75466675 	strbvc	r6, [r6, #-1653]	; 0xfffff98b
    1de0:	72006c6c 	andvc	r6, r0, #108, 24	; 0x6c00
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1de4:	63615f78 	cmnvs	r1, #120, 30	; 0x1e0
    1de8:	33697500 	cmncc	r9, #0, 10
		if (ee_inp)
    1dec:	73614d32 	cmnvc	r1, #3200	; 0xc80
			b |= 1;
    1df0:	7363006b 	cmnvc	r3, #107	; 0x6b
    1df4:	54646e45 	strbtpl	r6, [r4], #-3653	; 0xfffff1bb
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1df8:	67676972 			; <UNDEFINED> instruction: 0x67676972
	for (b = 0, i = 0; i < 8; i++) {
    1dfc:	62007265 	andvs	r7, r0, #1342177286	; 0x50000006
}
    1e00:	52746942 	rsbspl	r6, r4, #1081344	; 0x108000
    1e04:	72657665 	rsbvc	r7, r5, #105906176	; 0x6500000
    1e08:	006c6173 	rsbeq	r6, ip, r3, ror r1
static void put_byte (byte b) {
    1e0c:	75645f5f 	strbvc	r5, [r4, #-3935]!	; 0xfffff0a1
    1e10:	30796d6d 	rsbscc	r6, r9, sp, ror #26
    1e14:	6d797300 	ldclvs	3, cr7, [r9, #-0]
    1e18:	526c6f62 	rsbpl	r6, ip, #392	; 0x188
		if (b & 0x80)
    1e1c:	00657461 	rsbeq	r7, r5, r1, ror #8
    1e20:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1e24:	7562725f 	strbvc	r7, [r2, #-607]!	; 0xfffffda1
	for (i = 0; i < 8; i++) {
    1e28:	00736666 	rsbseq	r6, r3, r6, ror #12
		b <<= 1;
    1e2c:	78654e70 	stmdavc	r5!, {r4, r5, r6, r9, sl, fp, lr}^
	for (i = 0; i < 8; i++) {
    1e30:	00704f74 	rsbseq	r4, r0, r4, ror pc
}
    1e34:	46746e69 	ldrbtmi	r6, [r4], -r9, ror #28
    1e38:	00716572 	rsbseq	r6, r1, r2, ror r5
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1e3c:	74754162 	ldrbtvc	r4, [r5], #-354	; 0xfffffe9e
    1e40:	756c466f 	strbvc	r4, [ip, #-1647]!	; 0xfffff991
	put_byte (cmd);
    1e44:	67496873 	smlsldxvs	r6, r9, r3, r8
    1e48:	65726f6e 	ldrbvs	r6, [r2, #-3950]!	; 0xfffff092
}
    1e4c:	66720064 	ldrbtvs	r0, [r2], -r4, rrx
    1e50:	61725f63 	cmnvs	r2, r3, ror #30
static void wwait (word st, word del) {
    1e54:	4f6f6964 	svcmi	0x006f6964
    1e58:	00745f70 	rsbseq	r5, r4, r0, ror pc
    1e5c:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
	while (dopen && (rdsr () & 1)) {
    1e60:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    1e64:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
    1e68:	74617000 	strbtvc	r7, [r1], #-0
    1e6c:	6d496863 	stclvs	8, cr6, [r9, #-396]	; 0xfffffe74
	put_byte (CMD_RDSR);
    1e70:	47656761 	strbmi	r6, [r5, -r1, ror #14]!
	r = get_byte ();
    1e74:	73666e65 	cmnvc	r6, #1616	; 0x650
    1e78:	6672006b 	ldrbtvs	r0, [r2], -fp, rrx
	while (dopen && (rdsr () & 1)) {
    1e7c:	66666f5f 	uqsaxvs	r6, r6, pc	; <UNPREDICTABLE>
}
    1e80:	6e456200 	cdpvs	2, 4, cr6, cr5, cr0, {0}
		if (st == WNONE)
    1e84:	726f4361 	rsbvc	r4, pc, #-2080374783	; 0x84000001
    1e88:	46620072 			; <UNDEFINED> instruction: 0x46620072
			mdelay (1);
    1e8c:	66664f73 	uqsub16vs	r4, r6, r3
    1e90:	656c6449 	strbvs	r6, [ip, #-1097]!	; 0xfffffbb7
			delay (del, st);
    1e94:	5f465200 	svcpl	0x00465200
    1e98:	46646d63 	strbtmi	r6, [r4], -r3, ror #26
			release;
    1e9c:	72700073 	rsbsvc	r0, r0, #115	; 0x73
    1ea0:	436d6165 	cmnmi	sp, #1073741849	; 0x40000019
    1ea4:	00666e6f 	rsbeq	r6, r6, pc, ror #28
static void ready () {
    1ea8:	636e7973 	cmnvs	lr, #1884160	; 0x1cc000
	if (dopen) {
    1eac:	64726f57 	ldrbtvs	r6, [r2], #-3927	; 0xfffff0a9
		wwait (WNONE, 1);
    1eb0:	74706f00 	ldrbtvc	r6, [r0], #-3840	; 0xfffff100
    1eb4:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    1eb8:	63746170 	cmnvs	r4, #112, 2
	dstat = 0;
    1ebc:	6e654768 	cdpvs	7, 6, cr4, cr5, cr8, {3}
}
    1ec0:	526b7366 	rsbpl	r7, fp, #-1744830463	; 0x98000001
    1ec4:	2f006566 	svccs	0x00006566
    1ec8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
	udelay (1);
    1ecc:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    1ed0:	2f6e6974 	svccs	0x006e6974
	udelay (1);
    1ed4:	6b736544 	blvs	1cdb3ec <__ccfg+0x1cbb444>
		dopen = DOPEN_TEMP;
    1ed8:	2f706f74 	svccs	0x00706f74
    1edc:	4f534c4f 	svcmi	0x00534c4f
    1ee0:	2f54454e 	svccs	0x0054454e
    1ee4:	4f434950 	svcmi	0x00434950
static void cclose () {
    1ee8:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
	if (dopen == DOPEN_TEMP) {
    1eec:	2f534f63 	svccs	0x00534f63
    1ef0:	33314343 	teqcc	r1, #201326593	; 0xc000001
		wwait (WNONE, 1);
    1ef4:	722f5858 	eorvc	r5, pc, #88, 16	; 0x580000
    1ef8:	6f727066 	svcvs	0x00727066
	cmd_0 (CMD_DP);
    1efc:	00632e70 	rsbeq	r2, r3, r0, ror lr
    1f00:	6e457363 	cdpvs	3, 4, cr7, cr5, cr3, {3}
		dopen = 0;
    1f04:	6d695464 	cfstrdvs	mvd5, [r9, #-400]!	; 0xfffffe70
}
    1f08:	61720065 	cmnvs	r2, r5, rrx
word ee_open () {
    1f0c:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
	ready ();
    1f10:	00745f65 	rsbseq	r5, r4, r5, ror #30
	dopen = DOPEN_PERM;
    1f14:	72726f63 	rsbsvc	r6, r2, #396	; 0x18c
    1f18:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
}
    1f1c:	7000646f 	andvc	r6, r0, pc, ror #8
	if (dopen) {
    1f20:	7267756c 	rsbvc	r7, r7, #108, 10	; 0x1b000000
    1f24:	46520074 			; <UNDEFINED> instruction: 0x46520074
		dopen = DOPEN_TEMP;
    1f28:	65704343 	ldrbvs	r4, [r0, #-835]!	; 0xfffffcbd
		cclose ();
    1f2c:	43746e49 	cmnmi	r4, #1168	; 0x490
}
    1f30:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
int ser_in (word st, char *buf, int len) {
    1f34:	756c7000 	strbvc	r7, [ip, #-0]!
    1f38:	00686367 	rsbeq	r6, r8, r7, ror #6
	if (len == 0)
    1f3c:	61746172 	cmnvs	r4, r2, ror r1
	if (__inpline == NULL) {
    1f40:	00656c62 	rsbeq	r6, r5, r2, ror #24
		if ((prcs = running (__inserial)) == 0) {
    1f44:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    1f48:	5274756f 	rsbspl	r7, r4, #465567744	; 0x1bc00000
			prcs = runthread (__inserial);
    1f4c:	66007365 	strvs	r7, [r0], -r5, ror #6
    1f50:	74636172 	strbtvc	r6, [r3], #-370	; 0xfffffe8e
			if (prcs == 0) {
    1f54:	71657246 	cmnvc	r5, r6, asr #4
				npwait (st);
    1f58:	65727000 	ldrbvs	r7, [r2, #-0]!
		release;
    1f5c:	6c616353 	stclvs	3, cr6, [r1], #-332	; 0xfffffeb4
		join (prcs, st);
    1f60:	536e0065 	cmnpl	lr, #101	; 0x65
    1f64:	74694277 	strbtvc	r4, [r9], #-631	; 0xfffffd89
	if (*__inpline == NULL) // bin cmd
    1f68:	75620073 	strbvc	r0, [r2, #-115]!	; 0xffffff8d
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    1f6c:	704f7973 	subvc	r7, pc, r3, ror r9	; <UNPREDICTABLE>
	if (prcs >= len)
    1f70:	446f6c00 	strbtmi	r6, [pc], #-3072	; 1f78 <ser_in+0x44>
		prcs = len-1;
    1f74:	64697669 	strbtvs	r7, [r9], #-1641	; 0xfffff997
	memcpy (buf, __inpline, prcs);
    1f78:	73007265 	movwvc	r7, #613	; 0x265
    1f7c:	69746174 	ldmdbvs	r4!, {r2, r4, r5, r6, r8, sp, lr}^
    1f80:	66720064 	ldrbtvs	r0, [r2], -r4, rrx
	ufree (__inpline);
    1f84:	7461705f 	strbtvc	r7, [r1], #-95	; 0xffffffa1
	__inpline = NULL;
    1f88:	635f6863 	cmpvs	pc, #6488064	; 0x630000
	if (*buf) // if it's NULL, it's a bin cmd
    1f8c:	675f6570 			; <UNDEFINED> instruction: 0x675f6570
		buf [prcs] = '\0';
    1f90:	73666e65 	cmnvc	r6, #1616	; 0x650
}
    1f94:	7872006b 	ldmdavc	r2!, {r0, r1, r3, r5, r6}^
		prcs = strlen (__inpline);
    1f98:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1f9c:	6f4e6200 	svcvs	0x004e6200
		return 0;
    1fa0:	6f507346 	svcvs	0x00507346
    1fa4:	55726577 	ldrbpl	r6, [r2, #-1399]!	; 0xfffffa89
    1fa8:	524f0070 	subpl	r0, pc, #112	; 0x70
int ser_outf (word st, const char *m, ...) {
    1fac:	746e7645 	strbtvc	r7, [lr], #-1605	; 0xfffff9bb
    1fb0:	73466200 	movtvc	r6, #25088	; 0x6200
	if ((prcs = running (__outserial)) != 0) {
    1fb4:	4266664f 	rsbmi	r6, r6, #82837504	; 0x4f00000
    1fb8:	00797375 	rsbseq	r7, r9, r5, ror r3
		join (prcs, st);
    1fbc:	74617276 	strbtvc	r7, [r1], #-630	; 0xfffffd8a
    1fc0:	78740065 	ldmdavc	r4!, {r0, r2, r5, r6}^
		release;
    1fc4:	65697274 	strbvs	r7, [r9, #-628]!	; 0xfffffd8c
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1fc8:	4d620073 	stclmi	0, cr0, [r2, #-460]!	; 0xfffffe34
    1fcc:	69466273 	stmdbvs	r6, {r0, r1, r4, r5, r6, r9, sp, lr}^
    1fd0:	00747372 	rsbseq	r7, r4, r2, ror r3
		umwait (st);
    1fd4:	645f7872 	ldrbvs	r7, [pc], #-2162	; 1fdc <ser_outf+0x30>
    1fd8:	78720065 	ldmdavc	r2!, {r0, r2, r5, r6}^
	if (runstrand (__outserial, buf) == 0) {
    1fdc:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
    1fe0:	616e655f 	cmnvs	lr, pc, asr r5
    1fe4:	00656c62 	rsbeq	r6, r5, r2, ror #24
		ufree (buf);
    1fe8:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
		npwait (st);
    1fec:	30737365 	rsbscc	r7, r3, r5, ror #6
}
    1ff0:	64646100 	strbtvs	r6, [r4], #-256	; 0xffffff00
    1ff4:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    1ff8:	66720031 			; <UNDEFINED> instruction: 0x66720031
    1ffc:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
int ser_inf (word st, const char *fmt, ...) {
    2000:	52505f44 	subspl	r5, r0, #68, 30	; 0x110
    2004:	525f504f 	subspl	r5, pc, #79	; 0x4f
	if (fmt == NULL)
    2008:	4f494441 	svcmi	0x00494441
	if (__inpline == NULL) {
    200c:	5649445f 			; <UNDEFINED> instruction: 0x5649445f
		if ((prcs = running (__inserial)) == 0) {
    2010:	5445535f 	strbpl	r5, [r5], #-863	; 0xfffffca1
    2014:	735f5055 	cmpvc	pc, #85	; 0x55
			prcs = runthread (__inserial);
    2018:	63667200 	cmnvs	r6, #0, 4
    201c:	444d435f 	strbmi	r4, [sp], #-863	; 0xfffffca1
			if (prcs == 0) {
    2020:	4f52505f 	svcmi	0x0052505f
				npwait (st);
    2024:	41525f50 	cmpmi	r2, r0, asr pc
		release;
    2028:	5f4f4944 	svcpl	0x004f4944
		join (prcs, st);
    202c:	5f564944 	svcpl	0x00564944
    2030:	55544553 	ldrbpl	r4, [r4, #-1363]	; 0xfffffaad
	va_start (ap, fmt);
    2034:	00745f50 	rsbseq	r5, r4, r0, asr pc
	prcs = vscan (__inpline, fmt, ap);
    2038:	5f636672 	svcpl	0x00636672
    203c:	5f444d43 	svcpl	0x00444d43
	ufree (__inpline);
    2040:	504f5250 	subpl	r5, pc, r0, asr r2	; <UNPREDICTABLE>
	__inpline = NULL;
    2044:	5f58525f 	svcpl	0x0058525f
}
    2048:	61700074 	cmnvs	r0, r4, ror r0
    204c:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
    2050:	526e0065 	rsbpl	r0, lr, #101	; 0x65
		return 0;
    2054:	6f745378 	svcvs	0x00745378
    2058:	64657070 	strbtvs	r7, [r5], #-112	; 0xffffff90
    205c:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    2060:	69737352 	ldmdbvs	r3!, {r1, r4, r6, r8, r9, ip, sp, lr}^
    2064:	656c6449 	strbvs	r6, [ip, #-1097]!	; 0xfffffbb7
    2068:	74617200 	strbtvc	r7, [r1], #-512	; 0xfffffe00
	RF_cmdFs.frequency = 
    206c:	726f5765 	rsbvc	r5, pc, #26476544	; 0x1940000
}
    2070:	78720064 	ldmdavc	r2!, {r2, r5, r6}^
    2074:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    2078:	65527000 	ldrbvs	r7, [r2, #-0]
    207c:	65764f67 	ldrbvs	r4, [r6, #-3943]!	; 0xfffff099
static int option (int opt, address val) {
    2080:	64697272 	strbtvs	r7, [r9], #-626	; 0xfffffd8e
    2084:	61720065 	cmnvs	r2, r5, rrx
    2088:	5f726d74 	svcpl	0x00726d74
    208c:	41620074 	smcmi	8196	; 0x2004
    2090:	6e657070 	mcrvs	0, 3, r7, cr5, cr0, {3}
    2094:	73735264 	cmnvc	r3, #100, 4	; 0x40000006
    2098:	66720069 	ldrbtvs	r0, [r2], -r9, rrx
    209c:	72705f63 	rsbsvc	r5, r0, #396	; 0x18c
    20a0:	7852706f 	ldmdavc	r2, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
    20a4:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    20a8:	735f7475 	cmpvc	pc, #1962934272	; 0x75000000
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    20ac:	63667200 	cmnvs	r6, #0, 4
    20b0:	6f72705f 	svcvs	0x0072705f
			goto RVal;
    20b4:	4f785270 	svcmi	0x00785270
			_BIS (dstate, DSTATE_RXON);
    20b8:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
    20bc:	00745f74 	rsbseq	r5, r4, r4, ror pc
	int ret = 0;
    20c0:	43434652 	movtmi	r4, #13906	; 0x3652
			p_trigger (drvprcs, qevent);
    20c4:	6b636f6c 	blvs	18dde7c <__ccfg+0x18bded4>
    20c8:	61736944 	cmnvs	r3, r4, asr #18
    20cc:	00656c62 	rsbeq	r6, r5, r2, ror #24
    20d0:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    20d4:	79536769 	ldmdbvc	r3, {r0, r3, r5, r6, r8, r9, sl, sp, lr}^
    20d8:	0068746e 	rsbeq	r7, r8, lr, ror #8
    20dc:	6f637874 	svcvs	0x00637874
    20e0:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xfffff18b
    20e4:	656c0072 	strbvs	r0, [ip, #-114]!	; 0xffffff8e
    20e8:	007a536e 	rsbseq	r5, sl, lr, ror #6
}
    20ec:	5f636672 	svcpl	0x00636672
			_BIC (dstate, DSTATE_RXON);
    20f0:	69646172 	stmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    20f4:	5f704f6f 	svcpl	0x00704f6f
			statid = (val == NULL) ? 0 : *val;
    20f8:	52620073 	rsbpl	r0, r2, #115	; 0x73
    20fc:	61657065 	cmnvs	r5, r5, rrx
	int ret = 0;
    2100:	6b6f4e74 	blvs	1bd5ad8 <__ccfg+0x1bb5b30>
			ret = (int) statid;
    2104:	6c696600 	stclvs	6, cr6, [r9], #-0
	if (val != NULL)
    2108:	4f726574 	svcmi	0x00726574
		*val = ret;
    210c:	66720070 			; <UNDEFINED> instruction: 0x66720070
			ret = rbuffl + 2;
    2110:	61645f63 	cmnvs	r4, r3, ror #30
    2114:	6e456174 	mcrvs	1, 2, r6, cr5, cr4, {3}
			if (val != NULL) {
    2118:	47797274 			; <UNDEFINED> instruction: 0x47797274
				memcpy (val, &rxstat,
    211c:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
    2120:	735f6c61 	cmpvc	pc, #24832	; 0x6100
				memset (&rxstat, 0, 
    2124:	63667200 	cmnvs	r6, #0, 4
    2128:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
			if (val == NULL)
    212c:	746e4561 	strbtvc	r4, [lr], #-1377	; 0xfffffa9f
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    2130:	65477972 	strbvs	r7, [r7, #-2418]	; 0xfffff68e
    2134:	6172656e 	cmnvs	r2, lr, ror #10
				utimer_set (bckf_timer, *val);
    2138:	00745f6c 	rsbseq	r5, r4, ip, ror #30
    213c:	705f6672 	subsvc	r6, pc, r2, ror r6	; <UNPREDICTABLE>
    2140:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
			for (ret = 0; ret < 8; ret++)
    2144:	6566725f 	strbvs	r7, [r6, #-607]!	; 0xfffffda1
				if (RF_cmdPropRadioDivSetup.txPower
    2148:	6e65675f 	mcrvs	7, 3, r6, cr5, cr15, {2}
					== patable [ret])
    214c:	006b7366 	rsbeq	r7, fp, r6, ror #6
				if (RF_cmdPropRadioDivSetup.txPower
    2150:	4f78526e 	svcmi	0x0078526e
			for (ret = 0; ret < 8; ret++)
    2154:	5252006b 	subspl	r0, r2, #107	; 0x6b
    2158:	5f007465 	svcpl	0x00007465
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    215c:	6d75645f 	cfldrdvs	mvd6, [r5, #-380]!	; 0xfffffe84
    2160:	0031796d 	eorseq	r7, r1, sp, ror #18
    2164:	75645f5f 	strbvc	r5, [r4, #-3935]!	; 0xfffff0a1
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    2168:	32796d6d 	rsbscc	r6, r9, #6976	; 0x1b40
    216c:	645f5f00 	ldrbvs	r5, [pc], #-3840	; 2174 <option+0xf4>
			_BIS (dstate, DSTATE_IRST);
    2170:	796d6d75 	stmdbvc	sp!, {r0, r2, r4, r5, r6, r8, sl, fp, sp, lr}^
    2174:	496e0033 	stmdbmi	lr!, {r0, r1, r4, r5}^
    2178:	61726574 	cmnvs	r2, r4, ror r5
			ret = (int) channel;
    217c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
			goto RVal;
    2180:	6b700073 	blvs	1c02354 <__ccfg+0x1be23ac>
				(*val > 7) ? 7 : *val;
    2184:	6e654c74 	mcrvs	12, 3, r4, cr5, cr4, {3}
    2188:	6c757200 	lfmvs	f7, 2, [r5], #-0
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    218c:	46520065 	ldrbmi	r0, [r2], -r5, rrx
    2190:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
			plugch ();
    2194:	706f7250 	rsbvc	r7, pc, r0, asr r2	; <UNPREDICTABLE>
			_BIS (dstate, DSTATE_IRST);
    2198:	52007852 	andpl	r7, r0, #5373952	; 0x520000
    219c:	50434346 	subpl	r4, r3, r6, asr #6
			ret = (int) vrate;
    21a0:	6e493045 	cdpvs	0, 4, cr3, cr9, cr5, {2}
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    21a4:	6e614874 	mcrvs	8, 3, r4, cr1, cr4, {3}
    21a8:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    21ac:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
    21b0:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xfffff09b
    21b4:	76726400 	ldrbtvc	r6, [r2], -r0, lsl #8
    21b8:	73637270 	cmnvc	r3, #112, 4
    21bc:	72506e00 	subsvc	r6, r0, #0, 28
    21c0:	426d6165 	rsbmi	r6, sp, #1073741849	; 0x40000019
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    21c4:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
    21c8:	6b636200 	blvs	18da9d0 <__ccfg+0x18baa28>
    21cc:	69745f66 	ldmdbvs	r4!, {r1, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    21d0:	0072656d 	rsbseq	r6, r2, sp, ror #10
			syserror (EREQPAR, "cc13 op");
    21d4:	5f636672 	svcpl	0x00636672
    21d8:	5f444d43 	svcpl	0x00444d43
    21dc:	504f5250 	subpl	r5, pc, r0, asr r2	; <UNPREDICTABLE>
    21e0:	5f58545f 	svcpl	0x0058545f
    21e4:	66720074 			; <UNDEFINED> instruction: 0x66720074
    21e8:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
    21ec:	52505f44 	subspl	r5, r0, #68, 30	; 0x110
    21f0:	545f504f 	ldrbpl	r5, [pc], #-79	; 21f8 <option+0x178>
    21f4:	00735f58 	rsbseq	r5, r3, r8, asr pc
    21f8:	656c6469 	strbvs	r6, [ip, #-1129]!	; 0xfffffb97
    21fc:	6600704f 	strvs	r7, [r0], -pc, asr #32
    2200:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
    2204:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    2208:	61507000 	cmpvs	r0, r0
    220c:	54686374 	strbtpl	r6, [r8], #-884	; 0xfffffc8c
static void issue_cmd (lword cmd) {
    2210:	63006261 	movwvs	r6, #609	; 0x261
    2214:	43734673 	cmnmi	r3, #120586240	; 0x7300000
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    2218:	00666e6f 	rsbeq	r6, r6, pc, ror #28
    221c:	5f646d63 	svcpl	0x00646d63
    2220:	00747273 	rsbseq	r7, r4, r3, ror r2
		if (res != 0x86)
    2224:	4f734662 	svcmi	0x00734662
			syserror (EHARDWARE, "hang ic0");
    2228:	63006666 	movwvs	r6, #1638	; 0x666
    222c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
		if (cnt-- == 0) {
    2230:	73694d67 	cmnvc	r9, #6592	; 0x19c0
			diag ("HUP %lx %lx", cmd, res);
    2234:	63644163 	cmnvs	r4, #-1073741800	; 0xc0000018
    2238:	646e6500 	strbtvs	r6, [lr], #-1280	; 0xfffffb00
			syserror (EHARDWARE, "hang ic0");
    223c:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
		udelay (1);
    2240:	68436200 	stmdavs	r3, {r9, sp, lr}^
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    2244:	6464416b 	strbtvs	r4, [r4], #-363	; 0xfffffe95
}
    2248:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    224c:	746e6500 	strbtvc	r6, [lr], #-1280	; 0xfffffb00
    2250:	65477265 	strbvs	r7, [r7, #-613]	; 0xfffffd9b
    2254:	6b73666e 	blvs	1cdbc14 <__ccfg+0x1cbbc6c>
static void rx_de () {
    2258:	50657043 	rsbpl	r7, r5, r3, asr #32
	if ((dstate & DSTATE_RXAC) == 0)
    225c:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
    2260:	63667200 	cmnvs	r6, #0, 4
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    2264:	444d435f 	strbmi	r4, [sp], #-863	; 0xfffffca1
	_BIC (dstate, DSTATE_RXAC);
    2268:	4e59535f 	mrcmi	3, 2, r5, cr9, cr15, {2}
    226c:	54535f43 	ldrbpl	r5, [r3], #-3907	; 0xfffff0bd
}
    2270:	5f545241 	svcpl	0x00545241
    2274:	5f544152 	svcpl	0x00544152
    2278:	66720073 			; <UNDEFINED> instruction: 0x66720073
static void rf_off () {
    227c:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
	if ((dstate & DSTATE_RFON) == 0)
    2280:	59535f44 	ldmdbpl	r3, {r2, r6, r8, r9, sl, fp, ip, lr}^
    2284:	535f434e 	cmppl	pc, #939524097	; 0x38000001
	IntDisable (INT_RFC_CPE_0);
    2288:	54524154 	ldrbpl	r4, [r2], #-340	; 0xfffffeac
    228c:	5441525f 	strbpl	r5, [r1], #-607	; 0xfffffda1
    2290:	7000745f 	andvc	r7, r0, pc, asr r4
	RFCAdi3VcoLdoVoltageMode (false);
    2294:	656c7961 	strbvs	r7, [ip, #-2401]!	; 0xfffff69f
	RFCSynthPowerDown ();
    2298:	756e006e 	strbvc	r0, [lr, #-110]!	; 0xffffff92
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    229c:	7373526d 	cmnvc	r3, #-805306362	; 0xd0000006
    22a0:	73754269 	cmnvc	r5, #-1879048186	; 0x90000006
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    22a4:	73740079 	cmnvc	r4, #121	; 0x79
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    22a8:	00746174 	rsbseq	r6, r4, r4, ror r1
	OSCHF_SwitchToRcOscTurnOffXosc ();
    22ac:	65735562 	ldrbvs	r5, [r3, #-1378]!	; 0xfffffa9e
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    22b0:	00637243 	rsbeq	r7, r3, r3, asr #4
    22b4:	65746e65 	ldrbvs	r6, [r4, #-3685]!	; 0xfffff19b
    22b8:	6e654772 	mcrvs	7, 3, r4, cr5, cr2, {3}
	_BIC (dstate, DSTATE_RFON);
    22bc:	536b7366 	cmnpl	fp, #-1744830463	; 0x98000001
    22c0:	61507379 	cmpvs	r0, r9, ror r3
}
    22c4:	00686374 	rsbeq	r6, r8, r4, ror r3
    22c8:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
    22cc:	6f697461 	svcvs	0x00697461
    22d0:	7363006e 	cmnvc	r3, #110	; 0x6e
    22d4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    22d8:	74616400 	strbtvc	r6, [r1], #-1024	; 0xfffffc00
    22dc:	65755161 	ldrbvs	r5, [r5, #-353]!	; 0xfffffe9f
    22e0:	745f6575 	ldrbvc	r6, [pc], #-1397	; 22e8 <wait_cmd.constprop.0+0x10>
		if (cmd->status == tstat)
    22e4:	6b536e00 	blvs	14ddaec <__ccfg+0x14bdb44>
		if (timeout-- == 0) {
    22e8:	62007069 	andvs	r7, r0, #105	; 0x69
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    22ec:	52616e45 	rsbpl	r6, r1, #1104	; 0x450
    22f0:	00697373 	rsbeq	r7, r9, r3, ror r3
    22f4:	73796870 	cmnvc	r9, #112, 16	; 0x700000
			syserror (EHARDWARE, "rt2");
    22f8:	52006469 	andpl	r6, r0, #1761607680	; 0x69000000
    22fc:	6d635f46 	stclvs	15, cr5, [r3, #-280]!	; 0xfffffee8
		udelay (1);
    2300:	6f725064 	svcvs	0x00725064
		if (cmd->status == tstat)
    2304:	00785470 	rsbseq	r5, r8, r0, ror r4
}
    2308:	46666572 			; <UNDEFINED> instruction: 0x46666572
    230c:	00716572 	rsbseq	r6, r1, r2, ror r5
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2310:	43434652 	movtmi	r4, #13906	; 0x3652
    2314:	6b636f6c 	blvs	18de0cc <__ccfg+0x18be124>
static void rf_on () {
    2318:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    231c:	7400656c 	strvc	r6, [r0], #-1388	; 0xfffffa94
	OSCHF_TurnOnXosc();
    2320:	67676972 			; <UNDEFINED> instruction: 0x67676972
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    2324:	79547265 	ldmdbvc	r4, {r0, r2, r5, r6, r9, ip, sp, lr}^
    2328:	4b006570 	blmi	1b8f0 <__exidx_end+0x16848>
    232c:	2f504d54 	svccs	0x00504d54
    2330:	67756c70 			; <UNDEFINED> instruction: 0x67756c70
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2334:	6c756e5f 	ldclvs	14, cr6, [r5], #-380	; 0xfffffe84
    2338:	00632e6c 	rsbeq	r2, r3, ip, ror #28
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    233c:	5f766374 	svcpl	0x00766374
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    2340:	5f74756f 	svcpl	0x0074756f
	issue_cmd (
    2344:	6c6c756e 	cfstr64vs	mvdx7, [ip], #-440	; 0xfffffe48
    2348:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    234c:	7663725f 			; <UNDEFINED> instruction: 0x7663725f
    2350:	6c756e5f 	ldclvs	14, cr6, [r5], #-380	; 0xfffffe84
    2354:	6374006c 	cmnvs	r4, #108	; 0x6c
   pPatchTab[80] = 0;
    2358:	706f5f76 	rsbvc	r5, pc, r6, ror pc	; <UNPREDICTABLE>
   } while (--nIterations);
    235c:	756e5f65 	strbvc	r5, [lr, #-3941]!	; 0xfffff09b
   pPatchTab[53] = 2;
    2360:	74006c6c 	strvc	r6, [r0], #-3180	; 0xfffff394
    2364:	665f7663 	ldrbvs	r7, [pc], -r3, ror #12
   pPatchTab[55] = 3;
    2368:	6e5f6d72 	mrcvs	13, 2, r6, cr15, cr2, {3}
   pPatchTab[110] = 4;
    236c:	006c6c75 	rsbeq	r6, ip, r5, ror ip
   pPatchTab[107] = 5;
    2370:	5f766374 	svcpl	0x00766374
   pPatchTab[65] = 6;
    2374:	5f6f6c63 	svcpl	0x006f6c63
    2378:	6c6c756e 	cfstr64vs	mvdx7, [ip], #-440	; 0xfffffe48
   pPatchTab[57] = 1;
    237c:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
   pIrqPatch[1] = _IRQ_PATCH_0;
    2380:	746d785f 	strbtvc	r7, [sp], #-2143	; 0xfffff7a1
   const uint32_t *pS = patchGenfskRfe;
    2384:	6c756e5f 	ldclvs	14, cr6, [r5], #-380	; 0xfffffe84
      t2 = *pS++;
    2388:	6f62006c 	svcvs	0x0062006c
      t4 = *pS++;
    238c:	73646e75 	cmnvc	r4, #1872	; 0x750
      t6 = *pS++;
    2390:	73646e00 	cmnvc	r4, #0, 28
      t8 = *pS++;
    2394:	756e5f63 	strbvc	r5, [lr, #-3939]!	; 0xfffff09d
      *pD++ = t1;
    2398:	2f006c6c 	svccs	0x00006c6c
      *pD++ = t2;
    239c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
      *pD++ = t3;
    23a0:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
      *pD++ = t5;
    23a4:	2f6e6974 	svccs	0x006e6974
      *pD++ = t7;
    23a8:	6b736544 	blvs	1cdb8c0 <__ccfg+0x1cbb918>
   } while (--nIterations);
    23ac:	2f706f74 	svccs	0x00706f74
    23b0:	4f534c4f 	svcmi	0x00534c4f
      *pD++ = t8;
    23b4:	2f54454e 	svccs	0x0054454e
   } while (--nIterations);
    23b8:	4f434950 	svcmi	0x00434950
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    23bc:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
   *pD++ = t2;
    23c0:	2f534f63 	svccs	0x00534f63
   *pD++ = t3;
    23c4:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
   *pD++ = t4;
    23c8:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
   *pD++ = t5;
    23cc:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    23d0:	6f5f5f2f 	svcvs	0x005f5f2f
	RFCAdi3VcoLdoVoltageMode (true);
    23d4:	65737475 	ldrbvs	r7, [r3, #-1141]!	; 0xfffffb8b
    23d8:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
       	RFCRfTrimSet (&rfTrim);
    23dc:	7100632e 	tstvc	r0, lr, lsr #6
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    23e0:	746e6175 	strbtvc	r6, [lr], #-373	; 0xfffffe8b
    23e4:	6f5f5f00 	svcvs	0x005f5f00
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    23e8:	65737475 	ldrbvs	r7, [r3, #-1141]!	; 0xfffffb8b
    23ec:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
	issue_cmd ((lword)&cmd_srt);
    23f0:	4f5f5f00 	svcmi	0x005f5f00
    23f4:	52575f4d 	subspl	r5, r7, #308	; 0x134
	issue_cmd ((lword)&RF_cmdFs);
    23f8:	00455449 	subeq	r5, r5, r9, asr #8
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    23fc:	6e695f5f 	mcrvs	15, 3, r5, cr9, cr15, {2}
    2400:	69726573 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    2404:	2f006c61 	svccs	0x00006c61
	IntEnable (INT_RFC_CPE_0);
    2408:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
	_BIC (dstate, DSTATE_IRST);
    240c:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    2410:	2f6e6974 	svccs	0x006e6974
    2414:	6b736544 	blvs	1cdb92c <__ccfg+0x1cbb984>
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    2418:	2f706f74 	svccs	0x00706f74
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    241c:	4f534c4f 	svcmi	0x00534c4f
	IntEnable (INT_RFC_CPE_0);
    2420:	2f54454e 	svccs	0x0054454e
    2424:	4f434950 	svcmi	0x00434950
}
    2428:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
	IntEnable (INT_RFC_CPE_0);
    242c:	2f534f63 	svccs	0x00534f63
    2430:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    2434:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    2438:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    243c:	695f5f2f 	ldmdbvs	pc, {r0, r1, r2, r3, r5, r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
    2440:	7265736e 	rsbvc	r7, r5, #-1207959551	; 0xb8000001
    2444:	2e6c6169 	powcsez	f6, f4, #1.0
    2448:	682f0063 	stmdavs	pc!, {r0, r1, r5, r6}	; <UNPREDICTABLE>
    244c:	2f656d6f 	svccs	0x00656d6f
    2450:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    2454:	442f6e69 	strtmi	r6, [pc], #-3689	; 245c <rf_on.part.0+0x14c>
    2458:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    245c:	4f2f706f 	svcmi	0x002f706f
    2460:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    2464:	502f5445 	eorpl	r5, pc, r5, asr #8
    2468:	534f4349 	movtpl	r4, #62281	; 0xf349
    246c:	6369502f 	cmnvs	r9, #47	; 0x2f
    2470:	502f534f 	eorpl	r5, pc, pc, asr #6
    2474:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    2478:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
    247c:	2f6c6169 	svccs	0x006c6169
    2480:	726f6676 	rsbvc	r6, pc, #123731968	; 0x7600000
    2484:	00632e6d 	rsbeq	r2, r3, sp, ror #28
    2488:	69616741 	stmdbvs	r1!, {r0, r6, r8, r9, sl, sp, lr}^
    248c:	756f006e 	strbvc	r0, [pc, #-110]!	; 2426 <rf_on.part.0+0x116>
static void rx_int_enable () {
    2490:	5f006374 	svcpl	0x00006374
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2494:	5f69705f 	svcpl	0x0069705f
    2498:	61706676 	cmnvs	r0, r6, ror r6
    249c:	00657372 	rsbeq	r7, r5, r2, ror r3
    24a0:	726f6676 	rsbvc	r6, pc, #123731968	; 0x7600000
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    24a4:	6552006d 	ldrbvs	r0, [r2, #-109]	; 0xffffff93
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    24a8:	5f797274 	svcpl	0x00797274
    24ac:	6f775f64 	svcvs	0x00775f64
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    24b0:	2f006472 	svccs	0x00006472
    24b4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    24b8:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    24bc:	2f6e6974 	svccs	0x006e6974
    24c0:	6b736544 	blvs	1cdb9d8 <__ccfg+0x1cbba30>
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    24c4:	2f706f74 	svccs	0x00706f74
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    24c8:	4f534c4f 	svcmi	0x00534c4f
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    24cc:	2f54454e 	svccs	0x0054454e
		if (db->status == DATA_ENTRY_FINISHED) {
    24d0:	4f434950 	svcmi	0x00434950
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    24d4:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    24d8:	2f534f63 	svccs	0x00534f63
			nr++;
    24dc:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    24e0:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    24e4:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    24e8:	6373762f 	cmnvs	r3, #49283072	; 0x2f00000
    24ec:	632e6e61 			; <UNDEFINED> instruction: 0x632e6e61
				__dp [pl + 1] = __dp [pl] - 128;
    24f0:	63737600 	cmnvs	r3, #0, 12
				pl = __dp [1] + 2;
    24f4:	52006e61 	andpl	r6, r0, #1552	; 0x610
				__dp [pl + 1] = __dp [pl] - 128;
    24f8:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    24fc:	6c5f645f 	cfldrdvs	mvd6, [pc], {95}	; 0x5f
				__dp [pl] = 0;
    2500:	64726f77 	ldrbtvs	r6, [r2], #-3959	; 0xfffff089
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2504:	6f682f00 	svcvs	0x00682f00
    2508:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 235c <rf_on.part.0+0x4c>
    250c:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
			db->status = DATA_ENTRY_PENDING;
    2510:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2514:	6f746b73 	svcvs	0x00746b73
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    2518:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
				diag ("BAD RX");
    251c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    2520:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
	if (nr) {
    2524:	2f534f43 	svccs	0x00534f43
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2528:	4f636950 	svcmi	0x00636950
}
    252c:	43432f53 	movtmi	r2, #16211	; 0x3f53
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2530:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    2534:	616d732f 	cmnvs	sp, pc, lsr #6
    2538:	66727472 			; <UNDEFINED> instruction: 0x66727472
}
    253c:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
    2540:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
    2544:	706c5f73 	rsbvc	r5, ip, r3, ror pc
    2548:	2e72685f 	mrccs	8, 3, r6, cr2, cr15, {2}
    254c:	69750063 	ldmdbvs	r5!, {r0, r1, r5, r6}^
    2550:	7470746e 	ldrbtvc	r7, [r0], #-1134	; 0xfffffb92
    2554:	00745f72 	rsbseq	r5, r4, r2, ror pc
    2558:	65764f70 	ldrbvs	r4, [r6, #-3952]!	; 0xfffff090
    255c:	64697272 	strbtvs	r7, [r9], #-626	; 0xfffffd8e
thread (cc1350_driver)
    2560:	62007365 	andvs	r7, r0, #-1811939327	; 0x94000001
    2564:	45717249 	ldrbmi	r7, [r1, #-585]!	; 0xfffffdb7
    2568:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
    256c:	53006465 	movwpl	r6, #1125	; 0x465
    2570:	48656661 	stmdami	r5!, {r0, r5, r6, r9, sl, sp, lr}^
		if (dstate & DSTATE_IRST) {
    2574:	41697061 	cmnmi	r9, r1, rrx
    2578:	64417875 	strbvs	r7, [r1], #-2165	; 0xfffff78b
    257c:	6c655369 	stclvs	3, cr5, [r5], #-420	; 0xfffffe5c
			rf_off ();
    2580:	00746365 	rsbseq	r6, r4, r5, ror #6
			_BIC (dstate,
    2584:	52545046 	subspl	r5, r4, #70	; 0x46
    2588:	494f565f 	stmdbmi	pc, {r0, r1, r2, r3, r4, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
		if (dstate & DSTATE_RXAC) {
    258c:	4f565f44 	svcmi	0x00565f44
    2590:	545f4449 	ldrbpl	r4, [pc], #-1097	; 2598 <cc1350_driver+0x38>
			if ((dstate & DSTATE_RXON) == 0)
    2594:	524f4e00 	subpl	r4, pc, #0, 28
				rx_de ();
    2598:	435f4d4f 	cmpmi	pc, #5056	; 0x13c0
		if (paylen == 0) {
    259c:	70635550 	rsbvc	r5, r3, r0, asr r5
    25a0:	00646973 	rsbeq	r6, r4, r3, ror r9
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    25a4:	4f524f4e 	svcmi	0x00524f4e
    25a8:	50435f4d 	subpl	r5, r3, sp, asr #30
    25ac:	73706355 	cmnvc	r0, #1409286145	; 0x54000001
    25b0:	53006569 	movwpl	r6, #1385	; 0x569
				sysassert (paylen <= rbuffl && paylen > 0 &&
    25b4:	48656661 	stmdami	r5!, {r0, r5, r6, r9, sl, sp, lr}^
    25b8:	56697061 	strbtpl	r7, [r9], -r1, rrx
    25bc:	0064696f 	rsbeq	r6, r4, pc, ror #18
    25c0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    25c4:	2f2e2e2f 	svccs	0x002e2e2f
    25c8:	642f2e2e 	strtvs	r2, [pc], #-3630	; 25d0 <cc1350_driver+0x70>
    25cc:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    25d0:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
		} else if (dstate & DSTATE_RXON) {
    25d4:	6964612f 	stmdbvs	r4!, {r0, r1, r2, r3, r5, r8, sp, lr}^
	if (dstate & DSTATE_RFON)
    25d8:	4700632e 	strmi	r6, [r0, -lr, lsr #6]
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    25dc:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
		re->status = DATA_ENTRY_PENDING;
    25e0:	392e3420 	stmdbcc	lr!, {r5, sl, ip, sp}
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    25e4:	3220332e 	eorcc	r3, r0, #-1207959552	; 0xb8000000
	issue_cmd ((lword)&RF_cmdPropRx);
    25e8:	30353130 	eorscc	r3, r5, r0, lsr r1
	_BIS (dstate, DSTATE_RXAC);
    25ec:	20393235 	eorscs	r3, r9, r5, lsr r2
    25f0:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
    25f4:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
    25f8:	415b2029 	cmpmi	fp, r9, lsr #32
	if (dstate & DSTATE_RXAC)
    25fc:	652f4d52 	strvs	r4, [pc, #-3410]!	; 18b2 <dispose+0x5a>
    2600:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
				if (statid != 0xffff)
    2604:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
    2608:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
					((address)(RF_cmdPropTx.pPkt)) [0] =
    260c:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
				RF_cmdPropTx.pktLen = (byte) paylen;
    2610:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
		if (paylen == 0) {
    2614:	73697665 	cmnvc	r9, #105906176	; 0x6500000
			wait (qevent, DR_LOOP);
    2618:	206e6f69 	rsbcs	r6, lr, r9, ror #30
    261c:	39373232 	ldmdbcc	r7!, {r1, r4, r5, r9, ip, sp}
			if (dstate & DSTATE_RXAC) {
    2620:	205d3737 	subscs	r3, sp, r7, lsr r7
    2624:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
				rx_int_enable ();
    2628:	20626d75 	rsbcs	r6, r2, r5, ror sp
			release;
    262c:	70636d2d 	rsbvc	r6, r3, sp, lsr #26
			} else if (dstate & DSTATE_RFON) {
    2630:	6f633d75 	svcvs	0x00633d75
				delay (offdelay, DR_GOOF);
    2634:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    2638:	20336d2d 	eorscs	r6, r3, sp, lsr #26
    263c:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
		if (bckf_timer) {
    2640:	2d20734f 	stccs	3, cr7, [r0, #-316]!	; 0xfffffec4
			wait (qevent, DR_LOOP);
    2644:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
    2648:	20393963 	eorscs	r3, r9, r3, ror #18
    264c:	6f6e662d 	svcvs	0x006e662d
			delay (bckf_timer, DR_LOOP);
    2650:	7274732d 	rsbsvc	r7, r4, #-1275068416	; 0xb4000000
    2654:	2d746369 	ldclcs	3, cr6, [r4, #-420]!	; 0xfffffe5c
			if (dstate & DSTATE_RXAC)
    2658:	61696c61 	cmnvs	r9, r1, ror #24
    265c:	676e6973 			; <UNDEFINED> instruction: 0x676e6973
	if (dstate & DSTATE_RFON)
    2660:	66662d20 	strbtvs	r2, [r6], -r0, lsr #26
    2664:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
		rx_de ();
    2668:	2d6e6f69 	stclcs	15, cr6, [lr, #-420]!	; 0xfffffe5c
		RF_cmdPropTx . status = 0;
    266c:	74636573 	strbtvc	r6, [r3], #-1395	; 0xfffffa8d
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2670:	736e6f69 	cmnvc	lr, #420	; 0x1a4
    2674:	64662d20 	strbtvs	r2, [r6], #-3360	; 0xfffff2e0
    2678:	2d617461 	cfstrdcs	mvd7, [r1, #-388]!	; 0xfffffe7c
		issue_cmd ((lword)&cmd_cs);
    267c:	74636573 	strbtvc	r6, [r3], #-1395	; 0xfffffa8d
		if (dstate & DSTATE_IRST)
    2680:	736e6f69 	cmnvc	lr, #420	; 0x1a4
    2684:	61662d20 	cmnvs	r6, r0, lsr #26
    2688:	66006d73 			; <UNDEFINED> instruction: 0x66006d73
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    268c:	00727450 	rsbseq	r7, r2, r0, asr r4
    2690:	52545046 	subspl	r5, r4, #70	; 0x46
			delay (1, DR_XMIT);
    2694:	494f565f 	stmdbmi	pc, {r0, r1, r2, r3, r4, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2698:	49555f44 	ldmdbmi	r5, {r2, r6, r8, r9, sl, fp, ip, lr}^
    269c:	5f38544e 	svcpl	0x0038544e
    26a0:	3a430054 	bcc	10c27f8 <__ccfg+0x10a2850>
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    26a4:	6e654a5c 			; <UNDEFINED> instruction: 0x6e654a5c
    26a8:	736e696b 	cmnvc	lr, #1753088	; 0x1ac000
				RF_cmdPropTx . status = 0;
    26ac:	626f6a5c 	rsbvs	r6, pc, #92, 20	; 0x5c000
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    26b0:	57465c73 	smlsldxpl	r5, r6, r3, ip
				issue_cmd ((lword)&RF_cmdPropTx);
    26b4:	756f7247 	strbvc	r7, [pc, #-583]!	; 2475 <rf_on.part.0+0x165>
				proceed (DR_XMIT);
    26b8:	72442d70 	subvc	r2, r4, #112, 26	; 0x1c00
    26bc:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
			txtries++;
    26c0:	5c62694c 			; <UNDEFINED> instruction: 0x5c62694c
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    26c4:	6b726f77 	blvs	1c9e4a8 <__ccfg+0x1c7e500>
    26c8:	63617073 	cmnvs	r1, #115	; 0x73
    26cc:	6f6d5c65 	svcvs	0x006d5c65
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    26d0:	656c7564 	strbvs	r7, [ip, #-1380]!	; 0xfffffa9c
		goto DR_LOOP__;
    26d4:	756f5c73 	strbvc	r5, [pc, #-3187]!	; 1a69 <tcv_wnps+0x31>
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    26d8:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
		paylen = 0;
    26dc:	3163635c 	cmncc	r3, ip, asr r3
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    26e0:	5f787833 	svcpl	0x00787833
		txtries = 0;
    26e4:	5f616863 	svcpl	0x00616863
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    26e8:	5f305f32 	svcpl	0x00305f32
    26ec:	5c747865 	ldclpl	8, cr7, [r4], #-404	; 0xfffffe6c
    26f0:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    26f4:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    26f8:	69625c62 	stmdbvs	r2!, {r1, r5, r6, sl, fp, ip, lr}^
		    tcvphy_top (physid) == NULL)
    26fc:	63675c6e 	cmnvs	r7, #28160	; 0x6e00
    2700:	74750063 	ldrbtvc	r0, [r5], #-99	; 0xffffff9d
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2704:	67695338 			; <UNDEFINED> instruction: 0x67695338
    2708:	006c616e 	rsbeq	r6, ip, lr, ror #2
			rf_off ();
    270c:	4f524f4e 	svcmi	0x00524f4e
endthread
    2710:	4f415f4d 	svcmi	0x00415f4d
    2714:	7461424e 	strbtvc	r4, [r1], #-590	; 0xfffffdb2
    2718:	546e6f4d 	strbtpl	r6, [lr], #-3917	; 0xfffff0b3
    271c:	65706d65 	ldrbvs	r6, [r0, #-3429]!	; 0xfffff29b
    2720:	75746172 	ldrbvc	r6, [r4, #-370]!	; 0xfffffe8e
    2724:	65476572 	strbvs	r6, [r7, #-1394]	; 0xfffffa8e
    2728:	67654474 			; <UNDEFINED> instruction: 0x67654474
    272c:	6f760043 	svcvs	0x00760043
    2730:	6761746c 	strbvs	r7, [r1, -ip, ror #8]!
    2734:	6f6c5365 	svcvs	0x006c5365
    2738:	5f006570 	svcpl	0x00006570
    273c:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
    2740:	745f3233 	ldrbvc	r3, [pc], #-563	; 2748 <cc1350_driver+0x1e8>
    2744:	695f5f00 	ldmdbvs	pc, {r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
    2748:	5f38746e 	svcpl	0x0038746e
    274c:	2f2e0074 	svccs	0x002e0074
void RFCCPE0IntHandler (void) {
    2750:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2754:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
		_BIS (dstate, DSTATE_IRST);
    2758:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    275c:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    2760:	612f6269 			; <UNDEFINED> instruction: 0x612f6269
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    2764:	625f6e6f 	subsvs	r6, pc, #1776	; 0x6f0
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    2768:	6f6d7461 	svcvs	0x006d7461
    276c:	00632e6e 	rsbeq	r2, r3, lr, ror #28
	p_trigger (drvprcs, qevent);
    2770:	706d6574 	rsbvc	r6, sp, r4, ror r5
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2774:	72726f43 	rsbsvc	r6, r2, #268	; 0x10c
    2778:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    277c:	73006e6f 	movwvc	r6, #3695	; 0xe6f
    2780:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
    2784:	6d655464 	cfstrdvs	mvd5, [r5, #-400]!	; 0xfffffe70
    2788:	65720070 	ldrbvs	r0, [r2, #-112]!	; 0xffffff90
    278c:	6e727574 	mrcvs	5, 3, r7, cr2, cr4, {3}
    2790:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    2794:	69750065 	ldmdbvs	r5!, {r0, r2, r5, r6}^
    2798:	75433233 	strbvc	r3, [r3, #-563]	; 0xfffffdcd
	RISE_N_SHINE;
    279c:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    27a0:	63655374 	cmnvs	r5, #116, 6	; 0xd0000001
    27a4:	524f4e00 	subpl	r4, pc, #0, 28
}
    27a8:	415f4d4f 	cmpmi	pc, pc, asr #26
    27ac:	54524e4f 	ldrbpl	r4, [r2], #-3663	; 0xfffff1b1
    27b0:	72754343 	rsbsvc	r4, r5, #201326593	; 0xc000001
    27b4:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
    27b8:	706d6f43 	rsbvc	r6, sp, r3, asr #30
    27bc:	56657261 	strbtpl	r7, [r5], -r1, ror #4
void phys_cc1350 (int phy, int mbs) {
    27c0:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
	if (rbuffl != 0)
    27c4:	00746547 	rsbseq	r6, r4, r7, asr #10
    27c8:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
		syserror (ETOOMANY, "cc13");
    27cc:	6f636553 	svcvs	0x00636553
		syserror (EREQPAR, "cc13 mb");
    27d0:	6553646e 	ldrbvs	r6, [r3, #-1134]	; 0xfffffb92
	if (mbs == 0)
    27d4:	61655263 	cmnvs	r5, r3, ror #4
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    27d8:	5f5f0064 	svcpl	0x005f0064
		syserror (EREQPAR, "cc13 mb");
    27dc:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
    27e0:	745f3436 	ldrbvc	r3, [pc], #-1078	; 27e8 <phys_cc1350+0x28>
	i = 0;
    27e4:	33697500 	cmncc	r9, #0, 10
	rbuffl = (byte) mbs;
    27e8:	72754332 	rsbsvc	r4, r5, #-939524096	; 0xc8000000
		db->config.type = 0;	// General (data in structure)
    27ec:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
	rbuffl = (byte) mbs;
    27f0:	53627553 	cmnpl	r2, #348127232	; 0x14c00000
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    27f4:	4e006365 	cdpmi	3, 0, cr6, cr0, cr5, {3}
    27f8:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 26c4 <cc1350_driver+0x164>
		if (db == NULL)
    27fc:	4e4f415f 	mcrmi	1, 2, r4, cr15, cr15, {2}
			syserror (EMALLOC, "cc13");
    2800:	43435452 	movtmi	r5, #13394	; 0x3452
    2804:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
    2808:	3436746e 	ldrtcc	r7, [r6], #-1134	; 0xfffffb92
		db->status = DATA_ENTRY_PENDING;
    280c:	56746942 	ldrbtpl	r6, [r4], -r2, asr #18
		if (i)
    2810:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
			da->pNextEntry = (byte*) db;
    2814:	00746547 	rsbseq	r6, r4, r7, asr #10
		db->length = rbuffl + 2;
    2818:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
    281c:	52746e65 	rsbspl	r6, r4, #1616	; 0x650
		db->config.type = 0;	// General (data in structure)
    2820:	73006374 	movwvc	r6, #884	; 0x374
		db->length = rbuffl + 2;
    2824:	6e416365 	cdpvs	3, 4, cr6, cr1, cr5, {3}
	db->pNextEntry = (byte*) re;
    2828:	62755364 	rsbsvs	r5, r5, #100, 6	; 0x90000001
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    282c:	00636553 	rsbeq	r6, r3, r3, asr r5
    2830:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
	if (rbuffs == NULL)
    2834:	2f2e2e2f 	svccs	0x002e2e2f
	rbuffs->pCurrEntry = (byte*) re;
    2838:	642f2e2e 	strtvs	r2, [pc], #-3630	; 2840 <phys_cc1350+0x80>
	rbuffs->pLastEntry = NULL;
    283c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    2840:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2844:	6e6f612f 	powvsep	f6, f7, #10.0
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    2848:	6374725f 	cmnvs	r4, #-268435451	; 0xf0000005
    284c:	7300632e 	movwvc	r6, #814	; 0x32e
    2850:	74657a69 	strbtvc	r7, [r5], #-2665	; 0xfffff597
	rbuffl -= 2;
    2854:	00657079 	rsbeq	r7, r5, r9, ror r0
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2858:	4f524f4e 	svcmi	0x00524f4e
	rbuffl -= 2;
    285c:	50435f4d 	subpl	r5, r3, sp, asr #30
	physid = phy;
    2860:	73616255 	cmnvc	r1, #1342177285	; 0x50000005
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2864:	69727065 	ldmdbvs	r2!, {r0, r2, r5, r6, ip, sp, lr}^
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2868:	00746547 	rsbseq	r6, r4, r7, asr #10
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    286c:	4f524f4e 	svcmi	0x00524f4e
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2870:	50435f4d 	subpl	r5, r3, sp, asr #30
    2874:	6c656455 	cfstrdvs	mvd6, [r5], #-340	; 0xfffffeac
	utimer_add (&bckf_timer);
    2878:	75007961 	strvc	r7, [r0, #-2401]	; 0xfffff69f
	drvprcs = runthread (cc1350_driver);
    287c:	52323369 	eorspl	r3, r2, #-1543503871	; 0xa4000001
    2880:	75007465 	strvc	r7, [r0, #-1125]	; 0xfffffb9b
    2884:	43323369 	teqmi	r2, #-1543503871	; 0xa4000001
	if (drvprcs == 0)
    2888:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
		syserror (ERESOURCE, "cc13");
    288c:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    2890:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    2894:	2f2e2e2f 	svccs	0x002e2e2f
    2898:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    289c:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    28a0:	70632f62 	rsbvc	r2, r3, r2, ror #30
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    28a4:	00632e75 	rsbeq	r2, r3, r5, ror lr
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    28a8:	4f524f4e 	svcmi	0x00524f4e
    28ac:	50435f4d 	subpl	r5, r3, sp, asr #30
    28b0:	69727055 	ldmdbvs	r2!, {r0, r2, r4, r6, ip, sp, lr}^
    28b4:	6b73616d 	blvs	1cdae70 <__ccfg+0x1cbaec8>
    28b8:	524f4e00 	subpl	r4, pc, #0, 28
    28bc:	4f5f4d4f 	svcmi	0x005f4d4f
    28c0:	6c434353 	mcrrvs	3, 5, r4, r3, cr3
    28c4:	536b636f 	cmnpl	fp, #-1140850687	; 0xbc000001
    28c8:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
	plugch ();
    28cc:	74655365 	strbtvc	r5, [r5], #-869	; 0xfffffc9b
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    28d0:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    28d4:	4c465f52 	mcrrmi	15, 5, r5, r6, cr2
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    28d8:	48435445 	stmdami	r3, {r0, r2, r6, sl, ip, lr}^
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    28dc:	32335245 	eorscc	r5, r3, #1342177284	; 0x50000004
    28e0:	4600545f 			; <UNDEFINED> instruction: 0x4600545f
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    28e4:	5f525450 	svcpl	0x00525450
}
    28e8:	44445453 	strbmi	r5, [r4], #-1107	; 0xfffffbad
    28ec:	5f4c4156 	svcpl	0x004c4156
    28f0:	4f4e0054 	svcmi	0x004e0054
    28f4:	5f4d4f52 	svcpl	0x004d4f52
    28f8:	4343534f 	movtmi	r5, #13135	; 0x334f
    28fc:	6b636f6c 	blvs	18de6b4 <__ccfg+0x18be70c>
    2900:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    2904:	65476563 	strbvs	r6, [r7, #-1379]	; 0xfffffa9d
    2908:	69750074 	ldmdbvs	r5!, {r2, r4, r5, r6}^
    290c:	734f3233 	movtvc	r3, #62003	; 0xf233
    2910:	65530063 	ldrbvs	r0, [r3, #-99]	; 0xffffff9d
    2914:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    2918:	706d6f43 	rsbvc	r6, sp, r3, asr #30
    291c:	66655242 	strbtvs	r5, [r5], -r2, asr #4
    2920:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    2924:	45525f52 	ldrbmi	r5, [r2, #-3922]	; 0xfffff0ae
    2928:	56524553 			; <UNDEFINED> instruction: 0x56524553
    292c:	5f344445 	svcpl	0x00344445
    2930:	69740054 	ldmdbvs	r4!, {r2, r4, r6}^
    2934:	6f58656d 	svcvs	0x0058656d
    2938:	6e4f6373 	mcrvs	3, 2, r6, cr15, cr3, {3}
    293c:	0056435f 	subseq	r4, r6, pc, asr r3
    2940:	4f524f4e 	svcmi	0x00524f4e
    2944:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
    2948:	5f464843 	svcpl	0x00464843
    294c:	65747441 	ldrbvs	r7, [r4, #-1089]!	; 0xfffffbbf
    2950:	5474706d 	ldrbtpl	r7, [r4], #-109	; 0xffffff93
    2954:	6977536f 	ldmdbvs	r7!, {r0, r1, r2, r3, r5, r6, r8, r9, ip, lr}^
    2958:	54686374 	strbtpl	r6, [r8], #-884	; 0xfffffc8c
    295c:	736f586f 	cmnvc	pc, #7274496	; 0x6f0000
    2960:	46480063 	strbmi	r0, [r8], -r3, rrx
    2964:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    2968:	61536563 	cmpvs	r3, r3, ror #10
    296c:	77536566 	ldrbvc	r6, [r3, -r6, ror #10]
    2970:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    2974:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    2978:	736f5870 	cmnvc	pc, #112, 16	; 0x700000
    297c:	66664f63 	strbtvs	r4, [r6], -r3, ror #30
    2980:	77656e00 	strbvc	r6, [r5, -r0, lsl #28]!
    2984:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    2988:	54707574 	ldrbtpl	r7, [r0], #-1396	; 0xfffffa8c
    298c:	49656d69 	stmdbmi	r5!, {r0, r3, r5, r6, r8, sl, fp, sp, lr}^
    2990:	0073556e 	rsbseq	r5, r3, lr, ror #10
    2994:	61726170 	cmnvs	r2, r0, ror r1
    2998:	0031506d 	eorseq	r5, r1, sp, rrx
    299c:	61726170 	cmnvs	r2, r0, ror r1
    29a0:	0032506d 	eorseq	r5, r2, sp, rrx
    29a4:	61726170 	cmnvs	r2, r0, ror r1
    29a8:	0033506d 	eorseq	r5, r3, sp, rrx
    29ac:	52545046 	subspl	r5, r4, #70	; 0x46
    29b0:	5345525f 	movtpl	r5, #21087	; 0x525f
    29b4:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
    29b8:	545f3344 	ldrbpl	r3, [pc], #-836	; 29c0 <tcv_ope_null+0x34>
    29bc:	65727000 	ldrbvs	r7, [r2, #-0]!
    29c0:	756f6976 	strbvc	r6, [pc, #-2422]!	; 2052 <ser_inf+0x52>
    29c4:	61745373 	cmnvs	r4, r3, ror r3
    29c8:	70757472 	rsbsvc	r7, r5, r2, ror r4
    29cc:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    29d0:	73556e49 	cmpvc	r5, #1168	; 0x490
strand (__outserial, const char*)
    29d4:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    29d8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    29dc:	2f2e2e2f 	svccs	0x002e2e2f
    29e0:	76697264 	strbtvc	r7, [r9], -r4, ror #4
endstrand
    29e4:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    29e8:	736f2f62 	cmnvc	pc, #392	; 0x188
	ptr = data;
    29ec:	00632e63 	rsbeq	r2, r3, r3, ror #28
    29f0:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
	if (*ptr)
    29f4:	63736f58 	cmnvs	r3, #88, 30	; 0x160
		len = strlen (ptr);
    29f8:	62617453 	rsbvs	r7, r1, #1392508928	; 0x53000000
    29fc:	435f656c 	cmpmi	pc, #108, 10	; 0x1b000000
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    2a00:	65740056 	ldrbvs	r0, [r4, #-86]!	; 0xffffffaa
    2a04:	6544706d 	strbvs	r7, [r4, #-109]	; 0xffffff93
    2a08:	0061746c 	rsbeq	r7, r1, ip, ror #8
    2a0c:	54776f6c 	ldrbtpl	r6, [r7], #-3948	; 0xfffff094
    2a10:	73657268 	cmnvc	r5, #104, 4	; 0x80000006
	len -= quant;
    2a14:	646c6f68 	strbtvs	r6, [ip], #-3944	; 0xfffff098
    2a18:	73655200 	cmnvc	r5, #0, 4
    2a1c:	65447465 	strbvs	r7, [r4, #-1125]	; 0xfffffb9b
	if (len == 0) {
    2a20:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
		ufree (data);
    2a24:	524f4e00 	subpl	r4, pc, #0, 28
		finish;
    2a28:	4f5f4d4f 	svcmi	0x005f4d4f
    2a2c:	46484353 			; <UNDEFINED> instruction: 0x46484353
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    2a30:	7275545f 	rsbsvc	r5, r5, #1593835520	; 0x5f000000
    2a34:	586e4f6e 	stmdapl	lr!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, lr}^
    2a38:	0063736f 	rsbeq	r7, r3, pc, ror #6
    2a3c:	52545046 	subspl	r5, r4, #70	; 0x46
    2a40:	5345525f 	movtpl	r5, #21087	; 0x525f
strand (__inserial, address)
    2a44:	45445445 	strbmi	r5, [r4, #-1093]	; 0xfffffbbb
    2a48:	00545f56 	subseq	r5, r4, r6, asr pc
    2a4c:	52545046 	subspl	r5, r4, #70	; 0x46
    2a50:	5345525f 	movtpl	r5, #21087	; 0x525f
    2a54:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
	if (__inpline != NULL)
    2a58:	545f3244 	ldrbpl	r3, [pc], #-580	; 2a60 <__inserial+0x1c>
    2a5c:	73655200 	cmnvc	r5, #0, 4
		finish;
    2a60:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    2a64:	636f4c64 	cmnvs	pc, #100, 24	; 0x6400
    2a68:	6f697461 	svcvs	0x00697461
    2a6c:	6100336e 	tstvs	r0, lr, ror #6
    2a70:	6156706d 	cmpvs	r6, sp, rrx
		umwait (IM_INIT);
    2a74:	0065756c 	rsbeq	r7, r5, ip, ror #10
		release;
    2a78:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
	savedata (data);
    2a7c:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
	len = MAX_LINE_LENGTH;
    2a80:	61636f4c 	cmnvs	r3, ip, asr #30
	io (IM_READ, __cport, READ, ptr, 1);
    2a84:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    2a88:	4f4e0034 	svcmi	0x004e0034
    2a8c:	5f4d4f52 	svcpl	0x004d4f52
    2a90:	4843534f 	stmdami	r3, {r0, r1, r2, r3, r6, r8, r9, ip, lr}^
	if (ptr == (char*) data) { // new line
    2a94:	77535f46 	ldrbvc	r5, [r3, -r6, asr #30]
    2a98:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
		if (*ptr == '\0') { // bin cmd
    2a9c:	63526f54 	cmpvs	r2, #84, 30	; 0x150
			proceed (IM_BIN);
    2aa0:	5463734f 	strbtpl	r7, [r3], #-847	; 0xfffffcb1
    2aa4:	4f6e7275 	svcmi	0x006e7275
		if (*ptr < 0x20)
    2aa8:	6f586666 	svcvs	0x00586666
    2aac:	46006373 			; <UNDEFINED> instruction: 0x46006373
			proceed (IM_READ);
    2ab0:	5f525450 	svcpl	0x00525450
    2ab4:	5658414d 	ldrbpl	r4, [r8], -sp, asr #2
	if (*ptr == '\n' || *ptr == '\r') {
    2ab8:	545f4c41 	ldrbpl	r4, [pc], #-3137	; 2ac0 <__inserial+0x7c>
    2abc:	6c655300 	stclvs	3, cr5, [r5], #-0
    2ac0:	41746365 	cmnmi	r4, r5, ror #6
		*ptr = '\0';
    2ac4:	6f434344 	svcvs	0x00434344
		__inpline = (char*)data;
    2ac8:	4942706d 	stmdbmi	r2, {r0, r2, r3, r5, r6, ip, sp, lr}^
		finish;
    2acc:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0xffffff92
	if (len) {
    2ad0:	6c656400 	cfstrdvs	mvd6, [r5], #-0
		ptr++;
    2ad4:	69546174 	ldmdbvs	r4, {r2, r4, r5, r6, r8, sp, lr}^
    2ad8:	4d00656d 	cfstr32mi	mvfx6, [r0, #-436]	; 0xfffffe4c
		len--;
    2adc:	61567861 	cmpvs	r6, r1, ror #16
	proceed (IM_READ);
    2ae0:	0065756c 	rsbeq	r7, r5, ip, ror #10
	io (IM_BIN, __cport, READ, ptr, 1);
    2ae4:	4f524f4e 	svcmi	0x00524f4e
    2ae8:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
    2aec:	50485f43 	subpl	r5, r8, r3, asr #30
    2af0:	5243534f 	subpl	r5, r3, #1006632961	; 0x3c000001
    2af4:	74616c65 	strbtvc	r6, [r1], #-3173	; 0xfffff39b
	len -= 2;
    2af8:	46657669 	strbtmi	r7, [r5], -r9, ror #12
	if (len > *ptr + 1) // 1 for 0x04
    2afc:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
    2b00:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
		len = *ptr + 1;
    2b04:	7366664f 	cmnvc	r6, #82837504	; 0x4f00000
    2b08:	65477465 	strbvs	r7, [r7, #-1125]	; 0xfffffb9b
	ptr++;
    2b0c:	4f4e0074 	svcmi	0x004e0074
	quant = io (IM_BINL, __cport, READ, ptr, len);
    2b10:	5f4d4f52 	svcpl	0x004d4f52
    2b14:	4843534f 	stmdami	r3, {r0, r1, r2, r3, r6, r8, r9, ip, lr}^
    2b18:	65445f46 	strbvs	r5, [r4, #-3910]	; 0xfffff0ba
    2b1c:	47677562 	strbmi	r7, [r7, -r2, ror #10]!
    2b20:	72437465 	subvc	r7, r3, #1694498816	; 0x65000000
    2b24:	61747379 	cmnvs	r4, r9, ror r3
	len -= quant;
    2b28:	706d416c 	rsbvc	r4, sp, ip, ror #2
		__inpline = (char*)data;
    2b2c:	7574696c 	ldrbvc	r6, [r4, #-2412]!	; 0xfffff694
		finish;
    2b30:	4d006564 	cfstr32mi	mvfx6, [r0, #-400]	; 0xfffffe70
	ptr += quant;
    2b34:	566e6165 	strbtpl	r6, [lr], -r5, ror #2
    2b38:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
endstrand
    2b3c:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    2b40:	45525f52 	ldrbmi	r5, [r2, #-3922]	; 0xfffff0ae
	proceed (IM_BINL);
    2b44:	56524553 			; <UNDEFINED> instruction: 0x56524553
endstrand
    2b48:	5f314445 	svcpl	0x00314445
    2b4c:	72430054 	subvc	r0, r3, #84	; 0x54
    2b50:	00323363 	eorseq	r3, r2, r3, ror #6
    2b54:	74656c46 	strbtvc	r6, [r5], #-3142	; 0xfffff3ba
    2b58:	72656863 	rsbvc	r6, r5, #6488064	; 0x630000
    2b5c:	47003233 	smladxmi	r0, r3, r2, r3
		if (res && (d < n))
    2b60:	68437465 	stmdavs	r3, {r0, r2, r5, r6, sl, ip, sp, lr}^
    2b64:	64497069 	strbvs	r7, [r9], #-105	; 0xffffff97
    2b68:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    2b6c:	454d5f52 	strbmi	r5, [sp, #-3922]	; 0xfffff0ae
			res [d] = (char) c;
    2b70:	41564e41 	cmpmi	r6, r1, asr #28
		d++;
    2b74:	00545f4c 	subseq	r5, r4, ip, asr #30
    2b78:	52545046 	subspl	r5, r4, #70	; 0x46
    2b7c:	4344415f 	movtmi	r4, #16735	; 0x415f
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2b80:	504d4f43 	subpl	r4, sp, r3, asr #30
    2b84:	5f4e4942 	svcpl	0x004e4942
    2b88:	50460054 	subpl	r0, r6, r4, asr r0
				enci (10000);
    2b8c:	435f5254 	cmpmi	pc, #84, 4	; 0x40000005
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2b90:	42504d4f 	subsmi	r4, r0, #5056	; 0x13c0
    2b94:	5f464552 	svcpl	0x00464552
	d = 0;
    2b98:	65530054 	ldrbvs	r0, [r3, #-84]	; 0xffffffac
		c = *fm++;
    2b9c:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
		if (c == '\\') {
    2ba0:	706d6f43 	rsbvc	r6, sp, r3, asr #30
			if ((c = *fm++) == '\0') {
    2ba4:	706e4941 	rsbvc	r4, lr, r1, asr #18
    2ba8:	46007475 			; <UNDEFINED> instruction: 0x46007475
				outc ('\\');
    2bac:	5f525450 	svcpl	0x00525450
			if ((c = *fm++) == '\0') {
    2bb0:	504d4f43 	subpl	r4, sp, r3, asr #30
				outc ('\\');
    2bb4:	5f4e4941 	svcpl	0x004e4941
    2bb8:	65740054 	ldrbvs	r0, [r4, #-84]!	; 0xffffffac
			outc (c);
    2bbc:	6544706d 	strbvs	r7, [r4, #-109]	; 0xffffff93
    2bc0:	5861746c 	stmdapl	r1!, {r2, r3, r5, r6, sl, ip, sp, lr}^
			if (c == '\0')
    2bc4:	736f0032 	cmnvc	pc, #50	; 0x32
    2bc8:	47664863 	strbmi	r4, [r6, -r3, ror #16]!
			outc (c);
    2bcc:	61626f6c 	cmnvs	r2, ip, ror #30
				outc (val);
    2bd0:	4800736c 	stmdami	r0, {r2, r3, r5, r6, r8, r9, ip, sp, lr}
				val = (word) va_arg (ap, aword);
    2bd4:	43534f50 	cmpmi	r3, #80, 30	; 0x140
		if (c == '%') {
    2bd8:	6c65525f 	sfmvs	f5, 2, [r5], #-380	; 0xfffffe84
    2bdc:	71657246 	cmnvc	r5, r6, asr #4
			c = *fm++;
    2be0:	7366664f 	cmnvc	r6, #82837504	; 0x4f00000
			switch (c) {
    2be4:	64007465 	strvs	r7, [r0], #-1125	; 0xfffffb9b
    2be8:	61746c65 	cmnvs	r4, r5, ror #24
    2bec:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    2bf0:	636e6953 	cmnvs	lr, #1359872	; 0x14c000
    2bf4:	736f5865 	cmnvc	pc, #6619136	; 0x650000
    2bf8:	496e4f63 	stmdbmi	lr!, {r0, r1, r5, r6, r8, r9, sl, fp, lr}^
    2bfc:	00734d6e 	rsbseq	r4, r3, lr, ror #26
    2c00:	746c6564 	strbtvc	r6, [ip], #-1380	; 0xfffffa9c
				outc ('%');
    2c04:	6d655461 	cfstrdvs	mvd5, [r5, #-388]!	; 0xfffffe7c
    2c08:	6e695370 	mcrvs	3, 3, r5, cr9, cr0, {3}
				outc (c);
    2c0c:	6f586563 	svcvs	0x00586563
    2c10:	6e4f6373 	mcrvs	3, 2, r6, cr15, cr3, {3}
    2c14:	74696600 	strbtvc	r6, [r9], #-1536	; 0xfffffa00
				if (c == '\0')
    2c18:	61726150 	cmnvs	r2, r0, asr r1
				return d;
    2c1c:	7300736d 	movwvc	r7, #877	; 0x36d
}
    2c20:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    2c24:	69547075 	ldmdbvs	r4, {r0, r2, r4, r5, r6, ip, sp, lr}^
			switch (c) {
    2c28:	6e49656d 	cdpvs	5, 4, cr6, cr9, cr13, {3}
    2c2c:	74007355 	strvc	r7, [r0], #-853	; 0xfffffcab
    2c30:	58656d69 	stmdapl	r5!, {r0, r3, r5, r6, r8, sl, fp, sp, lr}^
				for (i = 12; ; i -= 4) {
    2c34:	4f63736f 	svcmi	0x0063736f
				val = (word) va_arg (ap, aword);
    2c38:	435f6666 	cmpmi	pc, #106954752	; 0x6600000
						[ (val >> i) & 0xf ]);
    2c3c:	534f0056 	movtpl	r0, #61526	; 0xf056
    2c40:	53664843 	cmnpl	r6, #4390912	; 0x430000
    2c44:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
					outc (__pi_hex_enc_table
    2c48:	61655265 	cmnvs	r5, r5, ror #4
    2c4c:	61007964 	tstvs	r0, r4, ror #18
					if (i == 0)
    2c50:	6f43706d 	svcvs	0x0043706d
    2c54:	6854706d 	ldmdavs	r4, {r0, r2, r3, r5, r6, ip, sp, lr}^
				for (i = 12; ; i -= 4) {
    2c58:	734f0031 	movtvc	r0, #61489	; 0xf031
				val = (word) va_arg (ap, aword);
    2c5c:	47664863 	strbmi	r4, [r6, -r3, ror #16]!
				if (c == 'd' && (val & 0x8000) != 0) {
    2c60:	61626f6c 	cmnvs	r2, ip, ror #30
				val = (word) va_arg (ap, aword);
    2c64:	745f736c 	ldrbvc	r7, [pc], #-876	; 2c6c <__pi_vfparse+0xec>
				if (c == 'd' && (val & 0x8000) != 0) {
    2c68:	52414800 	subpl	r4, r1, #0, 16
    2c6c:	50415f44 	subpl	r5, r1, r4, asr #30
					outc ('-');
    2c70:	00545f49 	subseq	r5, r4, r9, asr #30
    2c74:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
					val = (~val) + 1;
    2c78:	69746e55 	ldmdbvs	r4!, {r0, r2, r4, r6, r9, sl, fp, sp, lr}^
    2c7c:	6b61576c 	blvs	1858a34 <__ccfg+0x1838a8c>
				for (i = 12; ; i -= 4) {
    2c80:	49707565 	ldmdbmi	r0!, {r0, r2, r5, r6, r8, sl, ip, sp, lr}^
				enci (10000);
    2c84:	00734d6e 	rsbseq	r4, r3, lr, ror #26
    2c88:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    2c8c:	43637253 	cmnmi	r3, #805306373	; 0x30000005
    2c90:	4f006b6c 	svcmi	0x00006b6c
    2c94:	66484353 			; <UNDEFINED> instruction: 0x66484353
    2c98:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    2c9c:	77536563 	ldrbvc	r6, [r3, -r3, ror #10]
    2ca0:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    2ca4:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    2ca8:	52435f52 	subpl	r5, r3, #328	; 0x148
    2cac:	5f323343 	svcpl	0x00323343
    2cb0:	65740054 	ldrbvs	r0, [r4, #-84]!	; 0xffffffac
    2cb4:	6544706d 	strbvs	r7, [r4, #-109]	; 0xffffff93
    2cb8:	46004367 	strmi	r4, [r0], -r7, ror #6
    2cbc:	5f525450 	svcpl	0x00525450
    2cc0:	564e494d 	strbpl	r4, [lr], -sp, asr #18
    2cc4:	545f4c41 	ldrbpl	r4, [pc], #-3137	; 2ccc <__pi_vfparse+0x14c>
    2cc8:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
				if (c == 'd' || c == 'u') {
    2ccc:	46485f52 			; <UNDEFINED> instruction: 0x46485f52
    2cd0:	52554f53 	subspl	r4, r5, #332	; 0x14c
					if (c == 'd' &&
    2cd4:	41534543 	cmpmi	r3, r3, asr #10
					val = va_arg (ap, lword);
    2cd8:	57534546 	ldrbpl	r4, [r3, -r6, asr #10]
					fm++;
    2cdc:	48435449 	stmdami	r3, {r0, r3, r6, sl, ip, lr}^
					if (c == 'd' &&
    2ce0:	4d00545f 	cfstrsmi	mvf5, [r0, #-380]	; 0xfffffe84
    2ce4:	61566e69 	cmpvs	r6, r9, ror #28
						outc ('-');
    2ce8:	0065756c 	rsbeq	r7, r5, ip, ror #10
    2cec:	76657270 			; <UNDEFINED> instruction: 0x76657270
						val = (~val) + 1;
    2cf0:	6d6d694c 			; <UNDEFINED> instruction: 0x6d6d694c
				enci (10000);
    2cf4:	35327469 	ldrcc	r7, [r2, #-1129]!	; 0xfffffb97
					enci (1000000000UL);
    2cf8:	73556e49 	cmpvc	r5, #1168	; 0x490
    2cfc:	524f4e00 	subpl	r4, pc, #0, 28
    2d00:	4f5f4d4f 	svcmi	0x005f4d4f
    2d04:	485f4353 	ldmdami	pc, {r0, r1, r4, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    2d08:	43534f50 	cmpmi	r3, #80, 30	; 0x140
    2d0c:	616c6552 	cmnvs	ip, r2, asr r5
    2d10:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
    2d14:	71657246 	cmnvc	r5, r6, asr #4
    2d18:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
    2d1c:	66664f79 	uqsub16vs	r4, r6, r9
    2d20:	54746573 	ldrbtpl	r6, [r4], #-1395	; 0xfffffa8d
    2d24:	4346526f 	movtmi	r5, #25199	; 0x626f
    2d28:	4665726f 	strbtmi	r7, [r5], -pc, ror #4
    2d2c:	616d726f 	cmnvs	sp, pc, ror #4
    2d30:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    2d34:	74726576 	ldrbtvc	r6, [r2], #-1398	; 0xfffffa8a
    2d38:	6c655300 	stclvs	3, cr5, [r5], #-0
				} else if (c == 'x') {
    2d3c:	43746365 	cmnmi	r4, #-1811939327	; 0x94000001
					for (i = 28; ; i -= 4) {
    2d40:	41706d6f 	cmnmi	r0, pc, ror #26
					val = va_arg (ap, lword);
    2d44:	00666552 	rsbeq	r6, r6, r2, asr r5
							[ (val >> i) & 0xf ]);
    2d48:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    2d4c:	636f6c43 	cmnvs	pc, #17152	; 0x4300
						outc (__pi_hex_enc_table
    2d50:	756f536b 	strbvc	r5, [pc, #-875]!	; 29ed <__outserial+0x19>
    2d54:	00656372 	rsbeq	r6, r5, r2, ror r3
    2d58:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
						if (i == 0)
    2d5c:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
    2d60:	61636f4c 	cmnvs	r3, ip, asr #30
					for (i = 28; ; i -= 4) {
    2d64:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
					outc ('%');
    2d68:	65520031 	ldrbvs	r0, [r2, #-49]	; 0xffffffcf
    2d6c:	76726573 			; <UNDEFINED> instruction: 0x76726573
    2d70:	6f4c6465 	svcvs	0x004c6465
					outc ('l');
    2d74:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
    2d78:	00326e6f 	eorseq	r6, r2, pc, ror #28
				val = (word) va_arg (ap, aword);
    2d7c:	6e695f5f 	mcrvs	15, 3, r5, cr9, cr15, {2}
				outc (val);
    2d80:	5f363174 	svcpl	0x00363174
    2d84:	65520074 	ldrbvs	r0, [r2, #-116]	; 0xffffff8c
				while (*st != '\0') {
    2d88:	76726573 			; <UNDEFINED> instruction: 0x76726573
    2d8c:	6f4c6465 	svcvs	0x004c6465
    2d90:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
    2d94:	00356e6f 	eorseq	r6, r5, pc, ror #28
					outc (*st);
    2d98:	6e617453 	mcrvs	4, 3, r7, cr1, cr3, {2}
    2d9c:	76654464 	strbtvc	r4, [r5], -r4, ror #8
					st++;
    2da0:	69746169 	ldmdbvs	r4!, {r0, r3, r5, r6, r8, sp, lr}^
		c = *fm++;
    2da4:	61566e6f 	cmpvs	r6, pc, ror #28
    2da8:	0065756c 	rsbeq	r7, r5, ip, ror #10
    2dac:	6f436672 	svcvs	0x00436672
char *vform (char *res, const char *fm, va_list aq) {
    2db0:	72466572 	subvc	r6, r6, #478150656	; 0x1c800000
    2db4:	664f7165 	strbvs	r7, [pc], -r5, ror #2
	if (res != NULL) {
    2db8:	74657366 	strbtvc	r7, [r5], #-870	; 0xfffffc9a
		__pi_vfparse (res, MAX_WORD, fm, aq);
    2dbc:	67696800 	strbvs	r6, [r9, -r0, lsl #16]!
    2dc0:	72685468 	rsbvc	r5, r8, #104, 8	; 0x68000000
    2dc4:	6f687365 	svcvs	0x00687365
}
    2dc8:	4e00646c 	cdpmi	4, 0, cr6, cr0, cr12, {3}
    2dcc:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2c98 <__pi_vfparse+0x118>
	fml = strlen (fm) + 17;
    2dd0:	43534f5f 	cmpmi	r3, #380	; 0x17c
    2dd4:	445f4648 	ldrbmi	r4, [pc], #-1608	; 2ddc <vform+0x2c>
    2dd8:	67756265 	ldrbvs	r6, [r5, -r5, ror #4]!
	if ((res = (char*) umalloc (fml)) == NULL)
    2ddc:	45746547 	ldrbmi	r6, [r4, #-1351]!	; 0xfffffab9
    2de0:	63657078 	cmnvs	r5, #120	; 0x78
    2de4:	41646574 	smcmi	18004	; 0x4654
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    2de8:	61726576 	cmnvs	r2, r6, ror r5
    2dec:	72436567 	subvc	r6, r3, #432013312	; 0x19c00000
    2df0:	61747379 	cmnvs	r4, r9, ror r3
    2df4:	706d416c 	rsbvc	r4, sp, ip, ror #2
		ufree (res);
    2df8:	7574696c 	ldrbvc	r6, [r4, #-2412]!	; 0xfffff694
		goto Again;
    2dfc:	6f006564 	svcvs	0x00006564
	if (buf == NULL || fmt == NULL)
    2e00:	66436373 			; <UNDEFINED> instruction: 0x66436373
int vscan (const char *buf, const char *fmt, va_list ap) {
    2e04:	67655267 	strbvs	r5, [r5, -r7, ror #4]!
	if (buf == NULL || fmt == NULL)
    2e08:	79706f43 	ldmdbvc	r0!, {r0, r1, r6, r8, r9, sl, fp, sp, lr}^
    2e0c:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    2e10:	45475f52 	strbmi	r5, [r7, #-3922]	; 0xfffff0ae
		    	    case 'u': scanu (lword); break;
    2e14:	534c4654 	movtpl	r4, #50772	; 0xc654
			while (isspace (*buf)) buf++;
    2e18:	5f455a49 	svcpl	0x00455a49
    2e1c:	4f4e0054 	svcmi	0x004e0054
	while (*fmt != '\0') {
    2e20:	5f4d4f52 	svcpl	0x004d4f52
		if (*fmt++ != '%')
    2e24:	4843534f 	stmdami	r3, {r0, r1, r2, r3, r6, r8, r9, ip, lr}^
		switch (*fmt++) {
    2e28:	65475f46 	strbvs	r5, [r7, #-3910]	; 0xfffff0ba
    2e2c:	61745374 	cmnvs	r4, r4, ror r3
    2e30:	70757472 	rsbsvc	r7, r5, r2, ror r4
    2e34:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    2e38:	616c4600 	cmnvs	ip, r0, lsl #12
    2e3c:	65476873 	strbvs	r6, [r7, #-2163]	; 0xfffff78d
    2e40:	7a695374 	bvc	1a57c18 <__ccfg+0x1a37c70>
}
    2e44:	50460065 	subpl	r0, r6, r5, rrx
		switch (*fmt++) {
    2e48:	435f5254 	cmpmi	pc, #84, 4	; 0x40000005
    2e4c:	41504d4f 	cmpmi	r0, pc, asr #26
    2e50:	5f464552 	svcpl	0x00464552
    2e54:	50460054 	subpl	r0, r6, r4, asr r0
			while (isspace (*buf)) buf++;
    2e58:	475f5254 			; <UNDEFINED> instruction: 0x475f5254
    2e5c:	48435445 	stmdami	r3, {r0, r2, r6, sl, ip, lr}^
    2e60:	44495049 	strbmi	r5, [r9], #-73	; 0xffffffb7
    2e64:	4600545f 			; <UNDEFINED> instruction: 0x4600545f
    2e68:	5f525450 	svcpl	0x00525450
    2e6c:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
			if (*buf == '\0')
    2e70:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
			if (*buf != ',') {
    2e74:	00545f35 	subseq	r5, r4, r5, lsr pc
			sap = va_arg (ap, char*);
    2e78:	61726170 	cmnvs	r2, r0, ror r1
			nc++;
    2e7c:	0030506d 	eorseq	r5, r0, sp, rrx
			if (*buf != ',') {
    2e80:	4f524f4e 	svcmi	0x00524f4e
				while (!isspace (*buf) && *buf != ',' &&
    2e84:	46525f4d 	ldrbmi	r5, [r2], -sp, asr #30
    2e88:	65704343 	ldrbvs	r4, [r0, #-835]!	; 0xfffffcbd
    2e8c:	47746e49 	ldrbmi	r6, [r4, -r9, asr #28]!
    2e90:	6e417465 	cdpvs	4, 4, cr7, cr1, cr5, {3}
    2e94:	656c4364 	strbvs	r4, [ip, #-868]!	; 0xfffffc9c
    2e98:	70007261 	andvc	r7, r0, r1, ror #4
    2e9c:	7265764f 	rsbvc	r7, r5, #82837504	; 0x4f00000
			while (isspace (*buf)) buf++;
    2ea0:	65646972 	strbvs	r6, [r4, #-2418]!	; 0xfffff68e
    2ea4:	7a697300 	bvc	1a5faac <__ccfg+0x1a3fb04>
    2ea8:	00745f65 	rsbseq	r5, r4, r5, ror #30
    2eac:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
    2eb0:	65646972 	strbvs	r6, [r4, #-2418]!	; 0xfffff68e
			if (*buf == ',') buf++;
    2eb4:	646e695f 	strbtvs	r6, [lr], #-2399	; 0xfffff6a1
    2eb8:	4e007865 	cdpmi	8, 0, cr7, cr0, cr5, {3}
			*sap = '\0';
    2ebc:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2d88 <__pi_vfparse+0x208>
			break;
    2ec0:	4346525f 	movtmi	r5, #25183	; 0x625f
		    case 'd': scani (word); break;
    2ec4:	33696441 	cmncc	r9, #1090519040	; 0x41000000
    2ec8:	4c6f6356 	stclmi	3, cr6, [pc], #-344	; 2d78 <__pi_vfparse+0x1f8>
    2ecc:	6f566f64 	svcvs	0x00566f64
    2ed0:	6761746c 	strbvs	r7, [r1, -ip, ror #8]!
    2ed4:	646f4d65 	strbtvs	r4, [pc], #-3429	; 2edc <vscan+0xdc>
    2ed8:	66720065 	ldrbtvs	r0, [r2], -r5, rrx
    2edc:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
    2ee0:	52505f44 	subspl	r5, r0, #68, 30	; 0x110
    2ee4:	525f504f 	subspl	r5, pc, #79	; 0x4f
    2ee8:	4f494441 	svcmi	0x00494441
    2eec:	5445535f 	strbpl	r5, [r5], #-863	; 0xfffffca1
    2ef0:	745f5055 	ldrbvc	r5, [pc], #-85	; 2ef8 <vscan+0xf8>
    2ef4:	524f4e00 	subpl	r4, pc, #0, 28
    2ef8:	525f4d4f 	subspl	r4, pc, #5056	; 0x13c0
    2efc:	66524346 	ldrbvs	r4, [r2], -r6, asr #6
    2f00:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    2f04:	00746553 	rsbseq	r6, r4, r3, asr r5
    2f08:	4f524f4e 	svcmi	0x00524f4e
    2f0c:	46525f4d 	ldrbmi	r5, [r2], -sp, asr #30
    2f10:	6e795343 	cdpvs	3, 7, cr5, cr9, cr3, {2}
    2f14:	6f506874 	svcvs	0x00506874
    2f18:	44726577 	ldrbtmi	r6, [r2], #-1399	; 0xfffffa89
    2f1c:	006e776f 	rsbeq	r7, lr, pc, ror #14
    2f20:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
    2f24:	65646972 	strbvs	r6, [r4, #-2418]!	; 0xfffff68e
    2f28:	7274725f 	rsbsvc	r7, r4, #-268435451	; 0xf0000005
    2f2c:	70006d69 	andvc	r6, r0, r9, ror #26
    2f30:	6553704f 	ldrbvs	r7, [r3, #-79]	; 0xffffffb1
		    case 'u': scanu (word); break;
    2f34:	00707574 	rsbseq	r7, r0, r4, ror r5
    2f38:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    2f3c:	00676649 	rsbeq	r6, r7, r9, asr #12
    2f40:	5f636672 	svcpl	0x00636672
    2f44:	61666564 	cmnvs	r6, r4, ror #10
    2f48:	49746c75 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
    2f4c:	64417172 	strbvs	r7, [r1], #-370	; 0xfffffe8e
    2f50:	4e007264 	cdpmi	2, 0, cr7, cr0, cr4, {3}
    2f54:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2e20 <vscan+0x20>
    2f58:	4346525f 	movtmi	r5, #25183	; 0x625f
    2f5c:	50455043 	subpl	r5, r5, r3, asr #32
    2f60:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
    2f64:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    2f68:	66720074 			; <UNDEFINED> instruction: 0x66720074
    2f6c:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
    2f70:	52505f44 	subspl	r5, r0, #68, 30	; 0x110
    2f74:	525f504f 	subspl	r5, pc, #79	; 0x4f
    2f78:	4f494441 	svcmi	0x00494441
		    case 'x': scanx (word); break;
    2f7c:	5445535f 	strbpl	r5, [r5], #-863	; 0xfffffca1
    2f80:	735f5055 	cmpvc	pc, #85	; 0x55
    2f84:	66527000 	ldrbvs	r7, [r2], -r0
    2f88:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    2f8c:	65766f00 	ldrbvs	r6, [r6, #-3840]!	; 0xfffff100
    2f90:	64697272 	strbtvs	r7, [r9], #-626	; 0xfffffd8e
    2f94:	61765f65 	cmnvs	r6, r5, ror #30
    2f98:	0065756c 	rsbeq	r7, r5, ip, ror #10
    2f9c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    2fa0:	2f2e2e2f 	svccs	0x002e2e2f
    2fa4:	642f2e2e 	strtvs	r2, [pc], #-3630	; 2fac <vscan+0x1ac>
    2fa8:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    2fac:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    2fb0:	6366722f 	cmnvs	r6, #-268435454	; 0xf0000002
    2fb4:	7200632e 	andvc	r6, r0, #-1207959552	; 0xb8000000
    2fb8:	435f6366 	cmpmi	pc, #-1744830463	; 0x98000001
    2fbc:	525f444d 	subspl	r4, pc, #1291845632	; 0x4d000000
    2fc0:	4f494441 	svcmi	0x00494441
    2fc4:	5445535f 	strbpl	r5, [r5], #-863	; 0xfffffca1
    2fc8:	735f5055 	cmpvc	pc, #85	; 0x55
    2fcc:	63667200 	cmnvs	r6, #0, 4
    2fd0:	444d435f 	strbmi	r4, [sp], #-863	; 0xfffffca1
    2fd4:	4441525f 	strbmi	r5, [r1], #-607	; 0xfffffda1
    2fd8:	535f4f49 	cmppl	pc, #292	; 0x124
    2fdc:	50555445 	subspl	r5, r5, r5, asr #8
    2fe0:	6200745f 	andvs	r7, r0, #1593835520	; 0x5f000000
    2fe4:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    2fe8:	6600656c 	strvs	r6, [r0], -ip, ror #10
    2fec:	31676663 	cmncc	r7, r3, ror #12
    2ff0:	7274725f 	rsbsvc	r7, r4, #-268435451	; 0xf0000005
			switch (*fmt++) {
    2ff4:	4e006d69 	cdpmi	13, 0, cr6, cr0, cr9, {3}
    2ff8:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2ec4 <vscan+0xc4>
    2ffc:	4346525f 	movtmi	r5, #25183	; 0x625f
    3000:	69725452 	ldmdbvs	r2!, {r1, r4, r6, sl, ip, lr}^
    3004:	4f4e006d 	svcmi	0x004e006d
    3008:	5f4d4f52 	svcpl	0x004d4f52
		    	    case 'd': scani (lword); break;
    300c:	44434652 	strbmi	r4, [r3], #-1618	; 0xfffff9ae
    3010:	62726f6f 	rsbsvs	r6, r2, #444	; 0x1bc
    3014:	536c6c65 	cmnpl	ip, #25856	; 0x6500
    3018:	54646e65 	strbtpl	r6, [r4], #-3685	; 0xfffff19b
    301c:	4652006f 	ldrbmi	r0, [r2], -pc, rrx
    3020:	6b634143 	blvs	18d3534 <__ccfg+0x18b358c>
    3024:	43746e49 	cmnmi	r4, #1168	; 0x490
    3028:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    302c:	76696400 	strbtvc	r6, [r9], -r0, lsl #8
    3030:	72656469 	rsbvc	r6, r5, #1761607680	; 0x69000000
    3034:	524f4e00 	subpl	r4, pc, #0, 28
    3038:	525f4d4f 	subspl	r4, pc, #5056	; 0x13c0
    303c:	66524346 	ldrbvs	r4, [r2], -r6, asr #6
    3040:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    3044:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    3048:	31706d00 	cmncc	r0, r0, lsl #26
    304c:	00766572 	rsbseq	r6, r6, r2, ror r5
    3050:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    3054:	65746641 	ldrbvs	r6, [r4, #-1601]!	; 0xfffff9bf
    3058:	6c6f4372 	stclvs	3, cr4, [pc], #-456	; 2e98 <vscan+0x98>
    305c:	73655264 	cmnvc	r5, #100, 4	; 0x40000006
    3060:	61577465 	cmpvs	r7, r5, ror #8
    3064:	7075656b 	rsbsvc	r6, r5, fp, ror #10
		    	    case 'x': scanx (lword); break;
    3068:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 2f58 <vscan+0x158>
    306c:	74756853 	ldrbtvc	r6, [r5], #-2131	; 0xfffff7ad
    3070:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
    3074:	524f4e00 	subpl	r4, pc, #0, 28
    3078:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    307c:	70757465 	rsbsvc	r7, r5, r5, ror #8
    3080:	65746641 	ldrbvs	r6, [r4, #-1601]!	; 0xfffff9bf
    3084:	6c6f4372 	stclvs	3, cr4, [pc], #-456	; 2ec4 <vscan+0xc4>
    3088:	73655264 	cmnvc	r5, #100, 4	; 0x40000006
    308c:	61577465 	cmpvs	r7, r5, ror #8
    3090:	7075656b 	rsbsvc	r6, r5, fp, ror #10
    3094:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 2f84 <vscan+0x184>
    3098:	74756853 	ldrbtvc	r6, [r5], #-2131	; 0xfffff7ad
    309c:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
    30a0:	31676643 	cmncc	r7, r3, asr #12
    30a4:	524f4e00 	subpl	r4, pc, #0, 28
    30a8:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    30ac:	70757465 	rsbsvc	r7, r5, r5, ror #8
    30b0:	65746641 	ldrbvs	r6, [r4, #-1601]!	; 0xfffff9bf
    30b4:	6c6f4372 	stclvs	3, cr4, [pc], #-456	; 2ef4 <vscan+0xf4>
    30b8:	73655264 	cmnvc	r5, #100, 4	; 0x40000006
    30bc:	61577465 	cmpvs	r7, r5, ror #8
    30c0:	7075656b 	rsbsvc	r6, r5, fp, ror #10
    30c4:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 2fb4 <vscan+0x1b4>
    30c8:	74756853 	ldrbtvc	r6, [r5], #-2131	; 0xfffff7ad
    30cc:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
    30d0:	32676643 	rsbcc	r6, r7, #70254592	; 0x4300000
    30d4:	524f4e00 	subpl	r4, pc, #0, 28
		    	    case 'd': scani (lword); break;
    30d8:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    30dc:	70757465 	rsbsvc	r7, r5, r5, ror #8
    30e0:	65746641 	ldrbvs	r6, [r4, #-1601]!	; 0xfffff9bf
    30e4:	6c6f4372 	stclvs	3, cr4, [pc], #-456	; 2f24 <vscan+0x124>
    30e8:	73655264 	cmnvc	r5, #100, 4	; 0x40000006
    30ec:	61577465 	cmpvs	r7, r5, ror #8
    30f0:	7075656b 	rsbsvc	r6, r5, fp, ror #10
		    	    case 'u': scanu (lword); break;
    30f4:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 2fe4 <vscan+0x1e4>
    30f8:	74756853 	ldrbtvc	r6, [r5], #-2131	; 0xfffff7ad
    30fc:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
    3100:	33676643 	cmncc	r7, #70254592	; 0x4300000
    3104:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    3108:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    310c:	2f2e2e2f 	svccs	0x002e2e2f
    3110:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    3114:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    3118:	65732f62 	ldrbvs	r2, [r3, #-3938]!	; 0xfffff09e
    311c:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
    3120:	4f4e0063 	svcmi	0x004e0063
    3124:	5f4d4f52 	svcpl	0x004d4f52
    3128:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    312c:	74655370 	strbtvc	r5, [r5], #-880	; 0xfffffc90
    3130:	68636143 	stmdavs	r3!, {r0, r1, r6, r8, sp, lr}^
    3134:	646f4d65 	strbtvs	r4, [pc], #-3429	; 313c <vscan+0x33c>
    3138:	63634165 	cmnvs	r3, #1073741849	; 0x40000019
		    	    case 'x': scanx (lword); break;
    313c:	6964726f 	stmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
    3140:	6f54676e 	svcvs	0x0054676e
			if ((c = *buf++) == '\0')
    3144:	67666343 	strbvs	r6, [r6, -r3, asr #6]!
    3148:	74746553 	ldrbtvc	r6, [r4], #-1363	; 0xfffffaad
			sap = va_arg (ap, char*);
    314c:	00676e69 	rsbeq	r6, r7, r9, ror #28
			nc++;
    3150:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
			break;
    3154:	67666346 	strbvs	r6, [r6, -r6, asr #6]!
			while (isspace (*buf)) buf++;
    3158:	76655231 			; <UNDEFINED> instruction: 0x76655231
    315c:	6f697369 	svcvs	0x00697369
    3160:	4f41006e 	svcmi	0x0041006e
						*sap++ = *buf++;
    3164:	4355574e 	cmpmi	r5, #20447232	; 0x1380000
    3168:	6761744a 	strbvs	r7, [r1, -sl, asr #8]!
			while (isspace (*buf)) buf++;
    316c:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
    3170:	66664f72 	uqsub16vs	r4, r6, r2
    3174:	69725400 	ldmdbvs	r2!, {sl, ip, lr}^
		return 0;
    3178:	7466416d 	strbtvc	r4, [r6], #-365	; 0xfffffe93
    317c:	6f437265 	svcvs	0x00437265
		    case 'x': scanx (word); break;
    3180:	6552646c 	ldrbvs	r6, [r2, #-1132]	; 0xfffffb94
    3184:	00746573 	rsbseq	r6, r4, r3, ror r5
		    	    case 'x': scanx (lword); break;
    3188:	4f524f4e 	svcmi	0x00524f4e
    318c:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    3190:	54707574 	ldrbtpl	r7, [r0], #-1396	; 0xfffffa8c
    3194:	446d6972 	strbtmi	r6, [sp], #-2418	; 0xfffff68e
    3198:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    319c:	74760065 	ldrbtvc	r0, [r6], #-101	; 0xffffff9b
    31a0:	5f6d6972 	svcpl	0x006d6972
    31a4:	67696475 			; <UNDEFINED> instruction: 0x67696475
    31a8:	33697500 	cmncc	r9, #0, 10
    31ac:	6e6f4132 	mcrvs	1, 3, r4, cr15, cr2, {1}
    31b0:	52737953 	rsbspl	r7, r3, #1359872	; 0x14c000
    31b4:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    31b8:	006c7463 	rsbeq	r7, ip, r3, ror #8
    31bc:	67666363 	strbvs	r6, [r6, -r3, ror #6]!
    31c0:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 31c8 <NOROM_AONBatMonTemperatureGetDegC+0x10>
    31c4:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    31c8:	67655266 	strbvs	r5, [r5, -r6, ror #4]!
    31cc:	69725400 	ldmdbvs	r2!, {sl, ip, lr}^
    31d0:	7466416d 	strbtvc	r4, [r6], #-365	; 0xfffffe93
    31d4:	6f437265 	svcvs	0x00437265
    31d8:	6552646c 	ldrbvs	r6, [r2, #-1132]	; 0xfffffb94
    31dc:	57746573 			; <UNDEFINED> instruction: 0x57746573
    31e0:	75656b61 	strbvc	r6, [r5, #-2913]!	; 0xfffff49f
    31e4:	6f724670 	svcvs	0x00724670
    31e8:	7568536d 	strbvc	r5, [r8, #-877]!	; 0xfffffc93
    31ec:	776f4474 			; <UNDEFINED> instruction: 0x776f4474
    31f0:	6b61576e 	blvs	1858fb0 <__ccfg+0x1839008>
    31f4:	46707565 	ldrbtmi	r7, [r0], -r5, ror #10
    31f8:	506d6f72 	rsbpl	r6, sp, r2, ror pc
    31fc:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    3200:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
    3204:	524f4e00 	subpl	r4, pc, #0, 28
    3208:	545f4d4f 	ldrbpl	r4, [pc], #-3407	; 3210 <NOROM_AONRTCCurrent64BitValueGet+0x8>
    320c:	43736968 	cmnmi	r3, #104, 18	; 0x1a0000
    3210:	4965646f 	stmdbmi	r5!, {r0, r1, r2, r3, r5, r6, sl, sp, lr}^
    3214:	69754273 	ldmdbvs	r5!, {r0, r1, r4, r5, r6, r9, lr}^
    3218:	6f46746c 	svcvs	0x0046746c
    321c:	31434372 	hvccc	13362	; 0x3432
    3220:	48787833 	ldmdami	r8!, {r0, r1, r4, r5, fp, ip, sp, lr}^
    3224:	76655277 			; <UNDEFINED> instruction: 0x76655277
    3228:	6e413032 	mcrvs	0, 2, r3, cr1, cr2, {1}
    322c:	74614c64 	strbtvc	r4, [r1], #-3172	; 0xfffff39c
    3230:	485f7265 	ldmdami	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    3234:	49746c61 	ldmdbmi	r4!, {r0, r5, r6, sl, fp, sp, lr}^
    3238:	6f695666 	svcvs	0x00695666
    323c:	6574616c 	ldrbvs	r6, [r4, #-364]!	; 0xfffffe94
    3240:	74760064 	ldrbtvc	r0, [r6], #-100	; 0xffffff9c
    3244:	5f6d6972 	svcpl	0x006d6972
    3248:	00646f62 	rsbeq	r6, r4, r2, ror #30
    324c:	67666363 	strbvs	r6, [r6, -r3, ror #6]!
    3250:	4c747845 	ldclmi	8, cr7, [r4], #-276	; 0xfffffeec
    3254:	6b6c4366 	blvs	1b13ff4 <__ccfg+0x1af404c>
    3258:	72756300 	rsbsvc	r6, r5, #0, 6
    325c:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
    3260:	6c436648 	mcrrvs	6, 4, r6, r3, cr8
    3264:	006b636f 	rsbeq	r6, fp, pc, ror #6
    3268:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    326c:	72646456 	rsbvc	r6, r4, #1442840576	; 0x56000000
    3270:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    3274:	006c6156 	rsbeq	r6, ip, r6, asr r1
    3278:	4f524f4e 	svcmi	0x00524f4e
    327c:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    3280:	47707574 			; <UNDEFINED> instruction: 0x47707574
    3284:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    3288:	6f466d69 	svcvs	0x00466d69
    328c:	616e4172 	smcvs	58386	; 0xe412
    3290:	61707962 	cmnvs	r0, r2, ror #18
    3294:	61567373 	cmpvs	r6, r3, ror r3
    3298:	3165756c 	cmncc	r5, ip, ror #10
    329c:	524f4e00 	subpl	r4, pc, #0, 28
    32a0:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    32a4:	70757465 	rsbsvc	r7, r5, r5, ror #8
    32a8:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    32ac:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    32b0:	6244726f 	subvs	r7, r4, #-268435450	; 0xf0000006
    32b4:	6f4c726c 	svcvs	0x004c726c
    32b8:	6946706f 	stmdbvs	r6, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
    32bc:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
    32c0:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    32c4:	6c6f5674 	stclvs	6, cr5, [pc], #-464	; 30fc <vscan+0x2fc>
    32c8:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
    32cc:	72756300 	rsbsvc	r6, r5, #0, 6
    32d0:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
    32d4:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    32d8:	6d697600 	stclvs	6, cr7, [r9, #-0]
    32dc:	6c744373 	ldclvs	3, cr4, [r4], #-460	; 0xfffffe34
    32e0:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    32e4:	62690030 	rsbvs	r0, r9, #48	; 0x30
    32e8:	4f736169 	svcmi	0x00736169
    32ec:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0xfffff99a
    32f0:	65670074 	strbvs	r0, [r7, #-116]!	; 0xffffff8c
    32f4:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    32f8:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    32fc:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    3300:	74436668 	strbvc	r6, [r3], #-1640	; 0xfffff998
    3304:	6c61566c 	stclvs	6, cr5, [r1], #-432	; 0xfffffe50
    3308:	4e006575 	cfrshl64mi	mvdx0, mvdx5, r6
    330c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 31d8 <NOROM_AONBatMonTemperatureGetDegC+0x20>
    3310:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    3314:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    3318:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    331c:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    3320:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    3324:	61466648 	cmpvs	r6, r8, asr #12
    3328:	74537473 	ldrbvc	r7, [r3], #-1139	; 0xfffffb8d
    332c:	00747261 	rsbseq	r7, r4, r1, ror #4
    3330:	4f524f4e 	svcmi	0x00524f4e
    3334:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    3338:	47707574 			; <UNDEFINED> instruction: 0x47707574
    333c:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    3340:	6f466d69 	svcvs	0x00466d69
    3344:	4f635272 	svcmi	0x00635272
    3348:	664c6373 			; <UNDEFINED> instruction: 0x664c6373
    334c:	61694249 	cmnvs	r9, r9, asr #4
    3350:	69725473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, lr}^
    3354:	6564006d 	strbvs	r0, [r4, #-109]!	; 0xffffff93
    3358:	4161746c 	cmnmi	r1, ip, ror #8
    335c:	73756a64 	cmnvc	r5, #100, 20	; 0x64000
    3360:	4f4e0074 	svcmi	0x004e0074
    3364:	5f4d4f52 	svcpl	0x004d4f52
    3368:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    336c:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    3370:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    3374:	58726f46 	ldmdapl	r2!, {r1, r2, r6, r8, r9, sl, fp, sp, lr}^
    3378:	4863736f 	stmdami	r3!, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
    337c:	6c744366 	ldclvs	3, cr4, [r4], #-408	; 0xfffffe68
    3380:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
    3384:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    3388:	52726f46 	rsbspl	r6, r2, #280	; 0x118
    338c:	45636461 	strbmi	r6, [r3, #-1121]!	; 0xfffffb9f
    3390:	66437478 			; <UNDEFINED> instruction: 0x66437478
    3394:	6c615667 	stclvs	6, cr5, [r1], #-412	; 0xfffffe64
    3398:	64006575 	strvs	r6, [r0], #-1397	; 0xfffffa8b
    339c:	61746c65 	cmnvs	r4, r5, ror #24
    33a0:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    33a4:	33697500 	cmncc	r9, #0, 10
    33a8:	736f5832 	cmnvc	pc, #3276800	; 0x320000
    33ac:	46664863 	strbtmi	r4, [r6], -r3, ror #16
    33b0:	53747361 	cmnpl	r4, #-2080374783	; 0x84000001
    33b4:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    33b8:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    33bc:	4f4e0065 	svcmi	0x004e0065
    33c0:	5f4d4f52 	svcpl	0x004d4f52
    33c4:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    33c8:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    33cc:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    33d0:	41726f46 	cmnmi	r2, r6, asr #30
    33d4:	6f63706d 	svcvs	0x0063706d
    33d8:	6854706d 	ldmdavs	r4, {r0, r2, r3, r5, r6, ip, sp, lr}^
    33dc:	4f4e0031 	svcmi	0x004e0031
    33e0:	5f4d4f52 	svcpl	0x004d4f52
    33e4:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    33e8:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    33ec:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    33f0:	41726f46 	cmnmi	r2, r6, asr #30
    33f4:	6f63706d 	svcvs	0x0063706d
    33f8:	6854706d 	ldmdavs	r4, {r0, r2, r3, r5, r6, ip, sp, lr}^
    33fc:	4f4e0032 	svcmi	0x004e0032
    3400:	5f4d4f52 	svcpl	0x004d4f52
    3404:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    3408:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    340c:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    3410:	41726f46 	cmnmi	r2, r6, asr #30
    3414:	68536364 	ldmdavs	r3, {r2, r5, r6, r8, r9, sp, lr}^
    3418:	66756256 			; <UNDEFINED> instruction: 0x66756256
    341c:	4e006e45 	cdpmi	14, 0, cr6, cr0, cr5, {2}
    3420:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 32ec <NOROM_OSCHF_AttemptToSwitchToXosc+0x1c>
    3424:	4944445f 	stmdbmi	r4, {r0, r1, r2, r3, r4, r6, sl, lr}^
    3428:	65523233 	ldrbvs	r3, [r2, #-563]	; 0xfffffdcd
    342c:	69725767 	ldmdbvs	r2!, {r0, r1, r2, r5, r6, r8, r9, sl, ip, lr}^
    3430:	66006574 			; <UNDEFINED> instruction: 0x66006574
    3434:	31676663 	cmncc	r7, r3, ror #12
    3438:	61746144 	cmnvs	r4, r4, asr #2
    343c:	69727400 	ldmdbvs	r2!, {sl, ip, sp, lr}^
    3440:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    3444:	734f6352 	movtvc	r6, #62290	; 0xf352
    3448:	49664c63 	stmdbmi	r6!, {r0, r1, r5, r6, sl, fp, lr}^
    344c:	73616942 	cmnvc	r1, #1081344	; 0x108000
    3450:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    3454:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    3458:	61740065 	cmnvs	r4, r5, rrx
    345c:	74656772 	strbtvc	r6, [r5], #-1906	; 0xfffff88e
    3460:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    3464:	524f4e00 	subpl	r4, pc, #0, 28
    3468:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    346c:	70757465 	rsbsvc	r7, r5, r5, ror #8
    3470:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    3474:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    3478:	6152726f 	cmpvs	r2, pc, ror #4
    347c:	78456364 	stmdavc	r5, {r2, r5, r6, r8, r9, sp, lr}^
    3480:	67664374 			; <UNDEFINED> instruction: 0x67664374
    3484:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    3488:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    348c:	2f2e2e2f 	svccs	0x002e2e2f
    3490:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    3494:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    3498:	65732f62 	ldrbvs	r2, [r3, #-3938]!	; 0xfffff09e
    349c:	5f707574 	svcpl	0x00707574
    34a0:	2e6d6f72 	mcrcs	15, 3, r6, cr13, cr2, {3}
    34a4:	75730063 	ldrbvc	r0, [r3, #-99]!	; 0xffffff9d
    34a8:	63655362 	cmnvs	r5, #-2013265919	; 0x88000001
    34ac:	00636e49 	rsbeq	r6, r3, r9, asr #28
    34b0:	4f524f4e 	svcmi	0x00524f4e
    34b4:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    34b8:	47707574 			; <UNDEFINED> instruction: 0x47707574
    34bc:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    34c0:	6f466d69 	svcvs	0x00466d69
    34c4:	4f635272 	svcmi	0x00635272
    34c8:	664c6373 			; <UNDEFINED> instruction: 0x664c6373
    34cc:	6e757452 	mrcvs	4, 3, r7, cr5, cr2, {2}
    34d0:	75744365 	ldrbvc	r4, [r4, #-869]!	; 0xfffffc9b
    34d4:	7254656e 	subsvc	r6, r4, #461373440	; 0x1b800000
    34d8:	4e006d69 	cdpmi	13, 0, cr6, cr0, cr9, {3}
    34dc:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 33a8 <NOROM_RFCSynthPowerDown+0x1c>
    34e0:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    34e4:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    34e8:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    34ec:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    34f0:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    34f4:	6552664c 	ldrbvs	r6, [r2, #-1612]	; 0xfffff9b4
    34f8:	616c7567 	cmnvs	ip, r7, ror #10
    34fc:	41726f74 	cmnmi	r2, r4, ror pc
    3500:	6d43646e 	cfstrdvs	mvd6, [r3, #-440]	; 0xfffffe48
    3504:	77727269 	ldrbvc	r7, [r2, -r9, ror #4]!
    3508:	74615272 	strbtvc	r5, [r1], #-626	; 0xfffffd8e
    350c:	75006f69 	strvc	r6, [r0, #-3945]	; 0xfffff097
    3510:	54323369 	ldrtpl	r3, [r2], #-873	; 0xfffffc97
    3514:	006d6972 	rsbeq	r6, sp, r2, ror r9
    3518:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    351c:	67695370 			; <UNDEFINED> instruction: 0x67695370
    3520:	7478456e 	ldrbtvc	r4, [r8], #-1390	; 0xfffffa92
    3524:	56646e65 	strbtpl	r6, [r4], -r5, ror #28
    3528:	54726464 	ldrbtpl	r6, [r2], #-1124	; 0xfffffb9c
    352c:	566d6972 			; <UNDEFINED> instruction: 0x566d6972
    3530:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    3534:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
    3538:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    353c:	41726f46 	cmnmi	r2, r6, asr #30
    3540:	68536364 	ldmdavs	r3, {r2, r5, r6, r8, r9, sp, lr}^
    3544:	66756256 			; <UNDEFINED> instruction: 0x66756256
    3548:	61566e45 	cmpvs	r6, r5, asr #28
    354c:	0065756c 	rsbeq	r7, r5, ip, ror #10
    3550:	4f524f4e 	svcmi	0x00524f4e
    3554:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    3558:	47707574 			; <UNDEFINED> instruction: 0x47707574
    355c:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    3560:	6f466d69 	svcvs	0x00466d69
    3564:	63644172 	cmnvs	r4, #-2147483620	; 0x8000001c
    3568:	6f4d6853 	svcvs	0x004d6853
    356c:	6e456564 	cdpvs	5, 4, cr6, cr5, cr4, {3}
    3570:	32336900 	eorscc	r6, r3, #0, 18
    3574:	6e676953 			; <UNDEFINED> instruction: 0x6e676953
    3578:	64566465 	ldrbvs	r6, [r6], #-1125	; 0xfffffb9b
    357c:	61567264 	cmpvs	r6, r4, ror #4
    3580:	6f6d006c 	svcvs	0x006d006c
    3584:	6f436564 	svcvs	0x00436564
    3588:	0031666e 	eorseq	r6, r1, lr, ror #12
    358c:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    3590:	67666346 	strbvs	r6, [r6, -r6, asr #6]!
    3594:	6c615631 	stclvs	6, cr5, [r1], #-196	; 0xffffff3c
    3598:	4e006575 	cfrshl64mi	mvdx0, mvdx5, r6
    359c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3468 <NOROM_RFCRfTrimRead+0x90>
    35a0:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    35a4:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    35a8:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    35ac:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    35b0:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    35b4:	62496648 	subvs	r6, r9, #72, 12	; 0x4800000
    35b8:	74736169 	ldrbtvc	r6, [r3], #-361	; 0xfffffe97
    35bc:	6d726568 	cfldr64vs	mvdx6, [r2, #-416]!	; 0xfffffe60
    35c0:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
    35c4:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    35c8:	41726f46 	cmnmi	r2, r6, asr #30
    35cc:	68536364 	ldmdavs	r3, {r2, r5, r6, r8, r9, sp, lr}^
    35d0:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    35d4:	61566e45 	cmpvs	r6, r5, asr #28
    35d8:	0065756c 	rsbeq	r7, r5, ip, ror #10
    35dc:	56323369 	ldrtpl	r3, [r2], -r9, ror #6
    35e0:	53726464 	cmnpl	r2, #100, 8	; 0x64000000
    35e4:	7065656c 	rsbvc	r6, r5, ip, ror #10
    35e8:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    35ec:	66636600 	strbtvs	r6, [r3], -r0, lsl #12
    35f0:	734f3167 	movtvc	r3, #61799	; 0xf167
    35f4:	6e6f4363 	cdpvs	3, 6, cr4, cr15, cr3, {3}
    35f8:	62640066 	rsbvs	r0, r4, #102	; 0x66
    35fc:	6f4c726c 	svcvs	0x004c726c
    3600:	6946706f 	stmdbvs	r6, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
    3604:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
    3608:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    360c:	6c6f5674 	stclvs	6, cr5, [pc], #-464	; 3444 <NOROM_RFCRfTrimRead+0x6c>
    3610:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
    3614:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    3618:	72740065 	rsbsvc	r0, r4, #101	; 0x65
    361c:	6f466d69 	svcvs	0x00466d69
    3620:	736f5872 	cmnvc	pc, #7471104	; 0x720000
    3624:	52664c63 	rsbpl	r4, r6, #25344	; 0x6300
    3628:	6c756765 	ldclvs	7, cr6, [r5], #-404	; 0xfffffe6c
    362c:	726f7461 	rsbvc	r7, pc, #1627389952	; 0x61000000
    3630:	43646e41 	cmnmi	r4, #1040	; 0x410
    3634:	7272696d 	rsbsvc	r6, r2, #1785856	; 0x1b4000
    3638:	61527277 	cmpvs	r2, r7, ror r2
    363c:	566f6974 			; <UNDEFINED> instruction: 0x566f6974
    3640:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    3644:	69626900 	stmdbvs	r2!, {r8, fp, sp, lr}^
    3648:	6e497361 	cdpvs	3, 4, cr7, cr9, cr1, {3}
    364c:	4e007469 	cdpmi	4, 0, cr7, cr0, cr9, {3}
    3650:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 351c <NOROM_RFCRfTrimRead+0x144>
    3654:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    3658:	65537075 	ldrbvs	r7, [r3, #-117]	; 0xffffff8b
    365c:	6e6f4174 	mcrvs	1, 3, r4, cr15, cr4, {3}
    3660:	53637452 	cmnpl	r3, #1375731712	; 0x52000000
    3664:	65536275 	ldrbvs	r6, [r3, #-629]	; 0xfffffd8b
    3668:	636e4963 	cmnvs	lr, #1622016	; 0x18c000
    366c:	524f4e00 	subpl	r4, pc, #0, 28
    3670:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    3674:	70757465 	rsbsvc	r7, r5, r5, ror #8
    3678:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    367c:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    3680:	6d41726f 	sfmvs	f7, 2, [r1, #-444]	; 0xfffffe44
    3684:	6d6f6370 	stclvs	3, cr6, [pc, #-448]!	; 34cc <NOROM_RFCRfTrimRead+0xf4>
    3688:	72744370 	rsbsvc	r4, r4, #112, 6	; 0xc0000001
    368c:	6975006c 	ldmdbvs	r5!, {r2, r3, r5, r6}^
    3690:	6f583233 	svcvs	0x00583233
    3694:	66486373 			; <UNDEFINED> instruction: 0x66486373
    3698:	00776f52 	rsbseq	r6, r7, r2, asr pc
    369c:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    36a0:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    36a4:	6f436648 	svcvs	0x00436648
    36a8:	4f4e006c 	svcmi	0x004e006c
    36ac:	5f4d4f52 	svcpl	0x004d4f52
    36b0:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    36b4:	74655370 	strbtvc	r5, [r5], #-880	; 0xfffffc90
    36b8:	72646456 	rsbvc	r6, r4, #1442840576	; 0x56000000
    36bc:	6576654c 	ldrbvs	r6, [r6, #-1356]!	; 0xfffffab4
    36c0:	656e006c 	strbvs	r0, [lr, #-108]!	; 0xffffff94
    36c4:	69725477 	ldmdbvs	r2!, {r0, r1, r2, r4, r5, r6, sl, ip, lr}^
    36c8:	7761526d 	strbvc	r5, [r1, -sp, ror #4]!
    36cc:	33697500 	cmncc	r9, #0, 10
    36d0:	69725432 	ldmdbvs	r2!, {r1, r4, r5, sl, ip, lr}^
    36d4:	6c61566d 	stclvs	6, cr5, [r1], #-436	; 0xfffffe4c
    36d8:	69006575 	stmdbvs	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
    36dc:	75433233 	strbvc	r3, [r3, #-563]	; 0xfffffdcd
    36e0:	6d6f7473 	cfstrdvs	mvd7, [pc, #-460]!	; 351c <NOROM_RFCRfTrimRead+0x144>
    36e4:	65447265 	strbvs	r7, [r4, #-613]	; 0xfffffd9b
    36e8:	4161746c 	cmnmi	r1, ip, ror #8
    36ec:	73756a64 	cmnvc	r5, #100, 20	; 0x64000
    36f0:	33690074 	cmncc	r9, #116	; 0x74
    36f4:	64645632 	strbtvs	r5, [r4], #-1586	; 0xfffff9ce
    36f8:	656c5372 	strbvs	r5, [ip, #-882]!	; 0xfffffc8e
    36fc:	65447065 	strbvs	r7, [r4, #-101]	; 0xffffff9b
    3700:	0061746c 	rsbeq	r7, r1, ip, ror #8
    3704:	72646476 	rsbvc	r6, r4, #1979711488	; 0x76000000
    3708:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    370c:	76746341 	ldrbtvc	r6, [r4], -r1, asr #6
    3710:	75630065 	strbvc	r0, [r3, #-101]!	; 0xffffff9b
    3714:	6d655472 	cfstrdvs	mvd5, [r5, #-456]!	; 0xfffffe38
    3718:	69640070 	stmdbvs	r4!, {r4, r5, r6}^
    371c:	64566666 	ldrbvs	r6, [r6], #-1638	; 0xfffff99a
    3720:	63417264 	movtvs	r7, #4708	; 0x1264
    3724:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
    3728:	65656c53 	strbvs	r6, [r5, #-3155]!	; 0xfffff3ad
    372c:	72700070 	rsbsvc	r0, r0, #112	; 0x70
    3730:	61526d63 	cmpvs	r2, r3, ror #26
    3734:	7465526d 	strbtvc	r5, [r5], #-621	; 0xfffffd93
    3738:	69746e65 	ldmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    373c:	6c006e6f 	stcvs	14, cr6, [r0], {111}	; 0x6f
    3740:	0064616f 	rsbeq	r6, r4, pc, ror #2
    3744:	4f524f4e 	svcmi	0x00524f4e
    3748:	79535f4d 	ldmdbvc	r3, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    374c:	72744373 	rsbsvc	r4, r4, #-872415231	; 0xcc000001
    3750:	6a64416c 	bvs	1913d08 <__ccfg+0x18f3d60>
    3754:	52747375 	rsbspl	r7, r4, #-738197503	; 0xd4000001
    3758:	61686365 	cmnvs	r8, r5, ror #6
    375c:	41656772 	smcmi	22130	; 0x5672
    3760:	72657466 	rsbvc	r7, r5, #1711276032	; 0x66000000
    3764:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
    3768:	776f4472 			; <UNDEFINED> instruction: 0x776f4472
    376c:	4f4e006e 	svcmi	0x004e006e
    3770:	5f4d4f52 	svcpl	0x004d4f52
    3774:	43737953 	cmnmi	r3, #1359872	; 0x14c000
    3778:	536c7274 	cmnpl	ip, #116, 4	; 0x40000007
    377c:	65527465 	ldrbvs	r7, [r2, #-1125]	; 0xfffffb9b
    3780:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
    3784:	65426567 	strbvs	r6, [r2, #-1383]	; 0xfffffa99
    3788:	65726f66 	ldrbvs	r6, [r2, #-3942]!	; 0xfffff09a
    378c:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
    3790:	776f4472 			; <UNDEFINED> instruction: 0x776f4472
    3794:	2f2e006e 	svccs	0x002e006e
    3798:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    379c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    37a0:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    37a4:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    37a8:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    37ac:	635f7379 	cmpvs	pc, #-469762047	; 0xe4000001
    37b0:	2e6c7274 	mcrcs	2, 3, r7, cr12, cr4, {3}
    37b4:	4f4e0063 	svcmi	0x004e0063
    37b8:	5f4d4f52 	svcpl	0x004d4f52
    37bc:	43737953 	cmnmi	r3, #1359872	; 0x14c000
    37c0:	526c7274 	rsbpl	r7, ip, #116, 4	; 0x40000007
    37c4:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    37c8:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    37cc:	65476563 	strbvs	r6, [r7, #-1379]	; 0xfffffa9d
    37d0:	69750074 	ldmdbvs	r5!, {r2, r4, r5, r6}^
    37d4:	6f443233 	svcvs	0x00443233
    37d8:	6e69616d 	powvsez	f6, f1, #5.0
    37dc:	65700073 	ldrbvs	r0, [r0, #-115]!	; 0xffffff8d
    37e0:	70004572 	andvc	r4, r0, r2, ror r5
    37e4:	6d655464 	cfstrdvs	mvd5, [r5, #-400]!	; 0xfffffe70
    37e8:	69750070 	ldmdbvs	r5!, {r4, r5, r6}^
    37ec:	75413233 	strbvc	r3, [r1, #-563]	; 0xfffffdcd
    37f0:	6f6c4378 	svcvs	0x006c4378
    37f4:	00736b63 	rsbseq	r6, r3, r3, ror #22
    37f8:	4d435250 	sfmmi	f5, 2, [r3, #-320]	; 0xfffffec0
    37fc:	616d6f44 	cmnvs	sp, r4, asr #30
    3800:	6e456e69 	cdpvs	14, 4, cr6, cr5, cr9, {3}
    3804:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    3808:	72657000 	rsbvc	r7, r5, #0
    380c:	656e004d 	strbvs	r0, [lr, #-77]!	; 0xffffffb3
    3810:	63655277 	cmnvs	r5, #1879048199	; 0x70000007
    3814:	67726168 	ldrbvs	r6, [r2, -r8, ror #2]!
    3818:	72655065 	rsbvc	r5, r5, #101	; 0x65
    381c:	00646f69 	rsbeq	r6, r4, r9, ror #30
    3820:	72646476 	rsbvc	r6, r4, #1979711488	; 0x76000000
    3824:	00706143 	rsbseq	r6, r0, r3, asr #2
    3828:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    382c:	00786449 	rsbseq	r6, r8, r9, asr #8
    3830:	74536470 	ldrbvc	r6, [r3], #-1136	; 0xfffffb90
    3834:	00657461 	rsbeq	r7, r5, r1, ror #8
    3838:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
    383c:	52747365 	rsbspl	r7, r4, #-1811939327	; 0x94000001
    3840:	61686365 	cmnvs	r8, r5, ror #6
    3844:	50656772 	rsbpl	r6, r5, r2, ror r7
    3848:	6f697265 	svcvs	0x00697265
    384c:	65640064 	strbvs	r0, [r4, #-100]!	; 0xffffff9c
    3850:	5661746c 	strbtpl	r7, [r1], -ip, ror #8
    3854:	53726464 	cmnpl	r2, #100, 8	; 0x64000000
    3858:	7065656c 	rsbvc	r6, r5, ip, ror #10
    385c:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    3860:	74616200 	strbtvc	r6, [r1], #-512	; 0xfffffe00
    3864:	65726854 	ldrbvs	r6, [r2, #-2132]!	; 0xfffff7ac
    3868:	6c6f6873 	stclvs	8, cr6, [pc], #-460	; 36a4 <TrimAfterColdResetWakeupFromShutDown+0x28>
    386c:	6f780064 	svcvs	0x00780064
    3870:	6f506373 	svcvs	0x00506373
    3874:	4d726577 	cfldr64mi	mvdx6, [r2, #-476]!	; 0xfffffe24
    3878:	0065646f 	rsbeq	r6, r5, pc, ror #8
    387c:	4d435250 	sfmmi	f5, 2, [r3, #-320]	; 0xfffffec0
    3880:	64616f4c 	strbtvs	r6, [r1], #-3916	; 0xfffff0b4
    3884:	00746547 	rsbseq	r6, r4, r7, asr #10
    3888:	66696873 			; <UNDEFINED> instruction: 0x66696873
    388c:	54646574 	strbtpl	r6, [r4], #-1396	; 0xfffffa8c
    3890:	00706d65 	rsbseq	r6, r0, r5, ror #26
    3894:	65446374 	strbvs	r6, [r4, #-884]	; 0xfffffc8c
    3898:	0061746c 	rsbeq	r7, r1, ip, ror #8
    389c:	75705f67 	ldrbvc	r5, [r0, #-3943]!	; 0xfffff099
    38a0:	4d323369 	ldcmi	3, cr3, [r2, #-420]!	; 0xfffffe5c
    38a4:	6c75646f 	cfldrdvs	mvd6, [r5], #-444	; 0xfffffe44
    38a8:	00474365 	subeq	r4, r7, r5, ror #6
    38ac:	53727563 	cmnpl	r2, #415236096	; 0x18c00000
    38b0:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    38b4:	6e6f6100 	powvse	f6, f7, f0
    38b8:	63737953 	cmnvs	r3, #1359872	; 0x14c000
    38bc:	77506c74 			; <UNDEFINED> instruction: 0x77506c74
    38c0:	6c746372 	ldclvs	3, cr6, [r4], #-456	; 0xfffffe38
    38c4:	54647000 	strbtpl	r7, [r4], #-0
    38c8:	00656d69 	rsbeq	r6, r5, r9, ror #26
    38cc:	4f524f4e 	svcmi	0x00524f4e
    38d0:	79535f4d 	ldmdbvc	r3, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    38d4:	72744373 	rsbsvc	r4, r4, #-872415231	; 0xcc000001
    38d8:	776f506c 	strbvc	r5, [pc, -ip, rrx]!
    38dc:	76457265 	strbvc	r7, [r5], -r5, ror #4
    38e0:	74797265 	ldrbtvc	r7, [r9], #-613	; 0xfffffd9b
    38e4:	676e6968 	strbvs	r6, [lr, -r8, ror #18]!
    38e8:	6f4c7000 	svcvs	0x004c7000
    38ec:	70756b6f 	rsbsvc	r6, r5, pc, ror #22
    38f0:	6c626154 	stfvse	f6, [r2], #-336	; 0xfffffeb0
    38f4:	64700065 	ldrbtvs	r0, [r0], #-101	; 0xffffff9b
    38f8:	68636552 	stmdavs	r3!, {r1, r4, r6, r8, sl, sp, lr}^
    38fc:	65677261 	strbvs	r7, [r7, #-609]!	; 0xfffffd9f
    3900:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    3904:	6100646f 	tstvs	r0, pc, ror #8
    3908:	61426e6f 	cmpvs	r2, pc, ror #28
    390c:	6e6f6d74 	mcrvs	13, 3, r6, cr15, cr4, {3}
    3910:	00746142 	rsbseq	r6, r4, r2, asr #2
    3914:	72646476 	rsbvc	r6, r4, #1979711488	; 0x76000000
    3918:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    391c:	65656c53 	strbvs	r6, [r5, #-3155]!	; 0xfffff3ad
    3920:	6f500070 	svcvs	0x00500070
    3924:	51726577 	cmnpl	r2, r7, ror r5
    3928:	476c6175 			; <UNDEFINED> instruction: 0x476c6175
    392c:	61626f6c 	cmnvs	r2, ip, ror #30
    3930:	745f736c 	ldrbvc	r7, [pc], #-876	; 3938 <NOROM_SetupGetTrimForAnabypassValue1+0x1c>
    3934:	524f4e00 	subpl	r4, pc, #0, 28
    3938:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    393c:	74437379 	strbvc	r7, [r3], #-889	; 0xfffffc87
    3940:	445f6c72 	ldrbmi	r6, [pc], #-3186	; 3948 <NOROM_SetupGetTrimForAnabypassValue1+0x2c>
    3944:	5f434443 	svcpl	0x00434443
    3948:	746c6f56 	strbtvc	r6, [ip], #-3926	; 0xfffff0aa
    394c:	43656761 	cmnmi	r5, #25427968	; 0x1840000
    3950:	69646e6f 	stmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    3954:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    3958:	6f436c61 	svcvs	0x00436c61
    395c:	6f72746e 	svcvs	0x0072746e
    3960:	6f70006c 	svcvs	0x0070006c
    3964:	51726577 	cmnpl	r2, r7, ror r5
    3968:	476c6175 			; <UNDEFINED> instruction: 0x476c6175
    396c:	61626f6c 	cmnvs	r2, ip, ror #30
    3970:	5000736c 	andpl	r7, r0, ip, ror #6
    3974:	4f544f52 	svcmi	0x00544f52
    3978:	424c4f43 	submi	r4, ip, #268	; 0x10c
    397c:	505f5449 	subspl	r5, pc, r9, asr #8
    3980:	72706f72 	rsbsvc	r6, r0, #456	; 0x1c8
    3984:	61746569 	cmnvs	r4, r9, ror #10
    3988:	50007972 	andpl	r7, r0, r2, ror r9
    398c:	414b4341 	cmpmi	fp, r1, asr #6
    3990:	345f4547 	ldrbcc	r4, [pc], #-1351	; 3998 <NOROM_SetupGetTrimForAmpcompTh2+0x8>
    3994:	43003478 	movwmi	r3, #1144	; 0x478
    3998:	5f504948 	svcpl	0x00504948
    399c:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
    39a0:	3243435f 	subcc	r4, r3, #2080374785	; 0x7c000001
    39a4:	00303436 	eorseq	r3, r0, r6, lsr r4
    39a8:	65666177 	strbvs	r6, [r6, #-375]!	; 0xfffffe89
    39ac:	00644972 	rsbeq	r4, r4, r2, ror r9
    39b0:	494d4146 	stmdbmi	sp, {r1, r2, r6, r8, lr}^
    39b4:	435f594c 	cmpmi	pc, #76, 18	; 0x130000
    39b8:	78363243 	ldmdavc	r6!, {r0, r1, r6, r9, ip, sp}
    39bc:	694c5f78 	stmdbvs	ip, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    39c0:	4f4e007a 	svcmi	0x004e007a
    39c4:	5f4d4f52 	svcpl	0x004d4f52
    39c8:	70696843 	rsbvc	r6, r9, r3, asr #16
    39cc:	6f666e49 	svcvs	0x00666e49
    39d0:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    39d4:	70696843 	rsbvc	r6, r9, r3, asr #16
    39d8:	696d6146 	stmdbvs	sp!, {r1, r2, r6, r8, sp, lr}^
    39dc:	4e00796c 	vmlsmi.f16	s14, s0, s25	; <UNPREDICTABLE>
    39e0:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 38ac <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x3c>
    39e4:	6968435f 	stmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    39e8:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    39ec:	65475f6f 	strbvs	r5, [r7, #-3951]	; 0xfffff091
    39f0:	63615074 	cmnvs	r1, #116	; 0x74
    39f4:	6567616b 	strbvs	r6, [r7, #-363]!	; 0xfffffe95
    39f8:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    39fc:	524f4e00 	subpl	r4, pc, #0, 28
    3a00:	435f4d4f 	cmpmi	pc, #5056	; 0x13c0
    3a04:	49706968 	ldmdbmi	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    3a08:	5f6f666e 	svcpl	0x006f666e
    3a0c:	48746547 	ldmdami	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
    3a10:	76655277 			; <UNDEFINED> instruction: 0x76655277
    3a14:	6f697369 	svcvs	0x00697369
    3a18:	6170006e 	cmnvs	r0, lr, rrx
    3a1c:	79546b63 	ldmdbvc	r4, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^
    3a20:	43006570 	movwmi	r6, #1392	; 0x570
    3a24:	54706968 	ldrbtpl	r6, [r0], #-2408	; 0xfffff698
    3a28:	5f657079 	svcpl	0x00657079
    3a2c:	77480074 	smlsldxvc	r0, r8, r4, r0
    3a30:	69766552 	ldmdbvs	r6!, {r1, r4, r6, r8, sl, sp, lr}^
    3a34:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
    3a38:	4300745f 	movwmi	r7, #1119	; 0x45f
    3a3c:	5f504948 	svcpl	0x00504948
    3a40:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
    3a44:	3143435f 	cmpcc	r3, pc, asr r3
    3a48:	00303133 	eorseq	r3, r0, r3, lsr r1
    3a4c:	70696843 	rsbvc	r6, r9, r3, asr #16
    3a50:	696d6146 	stmdbvs	sp!, {r1, r2, r6, r8, sp, lr}^
    3a54:	745f796c 	ldrbvc	r7, [pc], #-2412	; 3a5c <NOROM_SetupGetTrimForXoscHfCtl+0x8>
    3a58:	52776800 	rsbspl	r6, r7, #0, 16
    3a5c:	43007665 	movwmi	r7, #1637	; 0x665
    3a60:	5f504948 	svcpl	0x00504948
    3a64:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
    3a68:	3243435f 	subcc	r4, r3, #2080374785	; 0x7c000001
    3a6c:	00303536 	eorseq	r3, r0, r6, lsr r5
    3a70:	4b434150 	blmi	10d3fb8 <__ccfg+0x10b4010>
    3a74:	5f454741 	svcpl	0x00454741
    3a78:	50534357 	subspl	r4, r3, r7, asr r3
    3a7c:	6e696d00 	cdpvs	13, 6, cr6, cr9, cr0, {0}
    3a80:	6552726f 	ldrbvs	r7, [r2, #-623]	; 0xfffffd91
    3a84:	41460076 	hvcmi	24582	; 0x6006
    3a88:	594c494d 	stmdbpl	ip, {r0, r2, r3, r6, r8, fp, lr}^
    3a8c:	3243435f 	subcc	r4, r3, #2080374785	; 0x7c000001
    3a90:	5f787836 	svcpl	0x00787836
    3a94:	43003252 	movwmi	r3, #594	; 0x252
    3a98:	5f504948 	svcpl	0x00504948
    3a9c:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
    3aa0:	3143435f 	cmpcc	r3, pc, asr r3
    3aa4:	00303533 	eorseq	r3, r0, r3, lsr r5
    3aa8:	70696843 	rsbvc	r6, r9, r3, asr #16
    3aac:	6f666e49 	svcvs	0x00666e49
    3ab0:	6968435f 	stmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    3ab4:	6d614670 	stclvs	6, cr4, [r1, #-448]!	; 0xfffffe40
    3ab8:	49796c69 	ldmdbmi	r9!, {r0, r3, r5, r6, sl, fp, sp, lr}^
    3abc:	31434373 	hvccc	13363	; 0x3433
    3ac0:	00787833 	rsbseq	r7, r8, r3, lsr r8
    3ac4:	494d4146 	stmdbmi	sp, {r1, r2, r6, r8, lr}^
    3ac8:	555f594c 	ldrbpl	r5, [pc, #-2380]	; 3184 <vscan+0x384>
    3acc:	6f6e6b6e 	svcvs	0x006e6b6e
    3ad0:	43006e77 	movwmi	r6, #3703	; 0xe77
    3ad4:	5f504948 	svcpl	0x00504948
    3ad8:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
    3adc:	3243435f 	subcc	r4, r3, #2080374785	; 0x7c000001
    3ae0:	00303236 	eorseq	r3, r0, r6, lsr r2
    3ae4:	67666366 	strbvs	r6, [r6, -r6, ror #6]!
    3ae8:	76655231 			; <UNDEFINED> instruction: 0x76655231
    3aec:	4d414600 	stclmi	6, cr4, [r1, #-0]
    3af0:	5f594c49 	svcpl	0x00594c49
    3af4:	36324343 	ldrtcc	r4, [r2], -r3, asr #6
    3af8:	63007878 	movwvs	r7, #2168	; 0x878
    3afc:	46706968 	ldrbtmi	r6, [r0], -r8, ror #18
    3b00:	48006d61 	stmdami	r0, {r0, r5, r6, r8, sl, fp, sp, lr}
    3b04:	56455257 			; <UNDEFINED> instruction: 0x56455257
    3b08:	6b6e555f 	blvs	1b9908c <__ccfg+0x1b790e4>
    3b0c:	6e776f6e 	cdpvs	15, 7, cr6, cr7, cr14, {3}
    3b10:	66636600 	strbtvs	r6, [r3], -r0, lsl #12
    3b14:	72503167 	subsvc	r3, r0, #-1073741799	; 0xc0000019
    3b18:	636f746f 	cmnvs	pc, #1862270976	; 0x6f000000
    3b1c:	50006c6f 	andpl	r6, r0, pc, ror #24
    3b20:	6f746f72 	svcvs	0x00746f72
    3b24:	426c6f63 	rsbmi	r6, ip, #396	; 0x18c
    3b28:	65567469 	ldrbvs	r7, [r6, #-1129]	; 0xfffffb97
    3b2c:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
    3b30:	5000745f 	andpl	r7, r0, pc, asr r4
    3b34:	4f544f52 	svcmi	0x00544f52
    3b38:	424c4f43 	submi	r4, ip, #268	; 0x10c
    3b3c:	495f5449 	ldmdbmi	pc, {r0, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3b40:	5f454545 	svcpl	0x00454545
    3b44:	5f323038 	svcpl	0x00323038
    3b48:	345f3531 	ldrbcc	r3, [pc], #-1329	; 3b50 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x70>
    3b4c:	49484300 	stmdbmi	r8, {r8, r9, lr}^
    3b50:	59545f50 	ldmdbpl	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
    3b54:	555f4550 	ldrbpl	r4, [pc, #-1360]	; 360c <NOROM_RFCRTrim+0xe4>
    3b58:	6f6e6b6e 	svcvs	0x006e6b6e
    3b5c:	48006e77 	stmdami	r0, {r0, r1, r2, r4, r5, r6, r9, sl, fp, sp, lr}
    3b60:	56455257 			; <UNDEFINED> instruction: 0x56455257
    3b64:	325f325f 	subscc	r3, pc, #-268435451	; 0xf0000005
    3b68:	4d414600 	stclmi	6, cr4, [r1, #-0]
    3b6c:	5f594c49 	svcpl	0x00594c49
    3b70:	33314343 	teqcc	r1, #201326593	; 0xc000001
    3b74:	50007878 	andpl	r7, r0, r8, ror r8
    3b78:	414b4341 	cmpmi	fp, r1, asr #6
    3b7c:	375f4547 	ldrbcc	r4, [pc, -r7, asr #10]
    3b80:	50003778 	andpl	r3, r0, r8, ror r7
    3b84:	4f544f52 	svcmi	0x00544f52
    3b88:	5f4c4f43 	svcpl	0x004c4f43
    3b8c:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
    3b90:	006e776f 	rsbeq	r7, lr, pc, ror #14
    3b94:	45525748 	ldrbmi	r5, [r2, #-1864]	; 0xfffff8b8
    3b98:	5f325f56 	svcpl	0x00325f56
    3b9c:	4f4e0030 	svcmi	0x004e0030
    3ba0:	5f4d4f52 	svcpl	0x004d4f52
    3ba4:	70696843 	rsbvc	r6, r9, r3, asr #16
    3ba8:	6f666e49 	svcvs	0x00666e49
    3bac:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    3bb0:	70696843 	rsbvc	r6, r9, r3, asr #16
    3bb4:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    3bb8:	52574800 	subspl	r4, r7, #0, 16
    3bbc:	325f5645 	subscc	r5, pc, #72351744	; 0x4500000
    3bc0:	5000315f 	andpl	r3, r0, pc, asr r1
    3bc4:	4f544f52 	svcmi	0x00544f52
    3bc8:	424c4f43 	submi	r4, ip, #268	; 0x10c
    3bcc:	425f5449 	subsmi	r5, pc, #1224736768	; 0x49000000
    3bd0:	4600454c 	strmi	r4, [r0], -ip, asr #10
    3bd4:	4c494d41 	mcrrmi	13, 4, r4, r9, cr1
    3bd8:	43435f59 	movtmi	r5, #16217	; 0x3f59
    3bdc:	78783632 	ldmdavc	r8!, {r1, r4, r5, r9, sl, ip, sp}^
    3be0:	6167415f 	cmnvs	r7, pc, asr r1
    3be4:	52574800 	subspl	r4, r7, #0, 16
    3be8:	325f5645 	subscc	r5, pc, #72351744	; 0x4500000
    3bec:	6300335f 	movwvs	r3, #863	; 0x35f
    3bf0:	54706968 	ldrbtpl	r6, [r0], #-2408	; 0xfffff698
    3bf4:	00657079 	rsbeq	r7, r5, r9, ror r0
    3bf8:	50494843 	subpl	r4, r9, r3, asr #16
    3bfc:	5059545f 	subspl	r5, r9, pc, asr r4
    3c00:	55435f45 	strbpl	r5, [r3, #-3909]	; 0xfffff0bb
    3c04:	4d4f5453 	cfstrdmi	mvd5, [pc, #-332]	; 3ac0 <NOROM_SetupGetTrimForRcOscLfIBiasTrim+0x8>
    3c08:	4300305f 	movwmi	r3, #95	; 0x5f
    3c0c:	5f504948 	svcpl	0x00504948
    3c10:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
    3c14:	5355435f 	cmppl	r5, #2080374785	; 0x7c000001
    3c18:	5f4d4f54 	svcpl	0x004d4f54
    3c1c:	48430031 	stmdami	r3, {r0, r4, r5}^
    3c20:	545f5049 	ldrbpl	r5, [pc], #-73	; 3c28 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x38>
    3c24:	5f455059 	svcpl	0x00455059
    3c28:	36324343 	ldrtcc	r4, [r2], -r3, asr #6
    3c2c:	48003033 	stmdami	r0, {r0, r1, r4, r5, ip, sp}
    3c30:	56455257 			; <UNDEFINED> instruction: 0x56455257
    3c34:	305f315f 	subscc	r3, pc, pc, asr r1	; <UNPREDICTABLE>
    3c38:	43415000 	movtmi	r5, #4096	; 0x1000
    3c3c:	4547414b 	strbmi	r4, [r7, #-331]	; 0xfffffeb5
    3c40:	6b6e555f 	blvs	1b991c4 <__ccfg+0x1b7921c>
    3c44:	6e776f6e 	cdpvs	15, 7, cr6, cr7, cr14, {3}
    3c48:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    3c4c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    3c50:	2f2e2e2f 	svccs	0x002e2e2f
    3c54:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    3c58:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    3c5c:	68632f62 	stmdavs	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    3c60:	6e697069 	cdpvs	0, 6, cr7, cr9, cr9, {3}
    3c64:	632e6f66 			; <UNDEFINED> instruction: 0x632e6f66
    3c68:	66636600 	strbtvs	r6, [r3], -r0, lsl #12
    3c6c:	73553167 	cmpvc	r5, #-1073741799	; 0xc0000019
    3c70:	64497265 	strbvs	r7, [r9], #-613	; 0xfffffd9b
    3c74:	69684300 	stmdbvs	r8!, {r8, r9, lr}^
    3c78:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    3c7c:	65475f6f 	strbvs	r5, [r7, #-3951]	; 0xfffff091
    3c80:	76654474 			; <UNDEFINED> instruction: 0x76654474
    3c84:	49656369 	stmdbmi	r5!, {r0, r3, r5, r6, r8, r9, sp, lr}^
    3c88:	52774864 	rsbspl	r4, r7, #100, 16	; 0x640000
    3c8c:	6f437665 	svcvs	0x00437665
    3c90:	43006564 	movwmi	r6, #1380	; 0x564
    3c94:	49706968 	ldmdbmi	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    3c98:	5f6f666e 	svcpl	0x006f666e
    3c9c:	4d746547 	cfldr64mi	mvdx6, [r4, #-284]!	; 0xfffffee4
    3ca0:	726f6e69 	rsbvc	r6, pc, #1680	; 0x690
    3ca4:	65527748 	ldrbvs	r7, [r2, #-1864]	; 0xfffff8b8
    3ca8:	696d0076 	stmdbvs	sp!, {r1, r2, r4, r5, r6}^
    3cac:	48726f6e 	ldmdami	r2!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    3cb0:	76655277 			; <UNDEFINED> instruction: 0x76655277
    3cb4:	524f4e00 	subpl	r4, pc, #0, 28
    3cb8:	435f4d4f 	cmpmi	pc, #5056	; 0x13c0
    3cbc:	49706968 	ldmdbmi	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    3cc0:	5f6f666e 	svcpl	0x006f666e
    3cc4:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
    3cc8:	6f707075 	svcvs	0x00707075
    3ccc:	64657472 	strbtvs	r7, [r5], #-1138	; 0xfffffb8e
    3cd0:	746f7250 	strbtvc	r7, [pc], #-592	; 3cd8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x5c>
    3cd4:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 3b20 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x40>
    3cd8:	0056425f 	subseq	r4, r6, pc, asr r2
    3cdc:	4b434150 	blmi	10d4224 <__ccfg+0x10b427c>
    3ce0:	5f454741 	svcpl	0x00454741
    3ce4:	45464157 	strbmi	r4, [r6, #-343]	; 0xfffffea9
    3ce8:	41500052 	cmpmi	r0, r2, asr r0
    3cec:	47414b43 	strbmi	r4, [r1, -r3, asr #22]
    3cf0:	78355f45 	ldmdavc	r5!, {r0, r2, r6, r8, r9, sl, fp, ip, lr}
    3cf4:	61500035 	cmpvs	r0, r5, lsr r0
    3cf8:	67616b63 	strbvs	r6, [r1, -r3, ror #22]!
    3cfc:	70795465 	rsbsvc	r5, r9, r5, ror #8
    3d00:	00745f65 	rsbseq	r5, r4, r5, ror #30
    3d04:	70696843 	rsbvc	r6, r9, r3, asr #16
    3d08:	6f666e49 	svcvs	0x00666e49
    3d0c:	5277485f 	rsbspl	r4, r7, #6225920	; 0x5f0000
    3d10:	73697665 	cmnvc	r9, #105906176	; 0x6500000
    3d14:	496e6f69 	stmdbmi	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    3d18:	54475f73 	strbpl	r5, [r7], #-3955	; 0xfffff08d
    3d1c:	325f5145 	subscc	r5, pc, #1073741841	; 0x40000011
    3d20:	4300305f 	movwmi	r3, #95	; 0x5f
    3d24:	49706968 	ldmdbmi	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    3d28:	5f6f666e 	svcpl	0x006f666e
    3d2c:	55746547 	ldrbpl	r6, [r4, #-1351]!	; 0xfffffab9
    3d30:	49726573 	ldmdbmi	r2!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    3d34:	69750064 	ldmdbvs	r5!, {r2, r5, r6}^
    3d38:	65523233 	ldrbvs	r3, [r2, #-563]	; 0xfffffdcd
    3d3c:	4f4e0067 	svcmi	0x004e0067
    3d40:	5f4d4f52 	svcpl	0x004d4f52
    3d44:	31494444 	cmpcc	r9, r4, asr #8
    3d48:	74694236 	strbtvc	r4, [r9], #-566	; 0xfffffdca
    3d4c:	6c656966 			; <UNDEFINED> instruction: 0x6c656966
    3d50:	61655264 	cmnvs	r5, r4, ror #4
    3d54:	416e0064 	cmnmi	lr, r4, rrx
    3d58:	00726464 	rsbseq	r6, r2, r4, ror #8
    3d5c:	4f524f4e 	svcmi	0x00524f4e
    3d60:	44445f4d 	strbmi	r5, [r4], #-3917	; 0xfffff0b3
    3d64:	42363149 	eorsmi	r3, r6, #1073741842	; 0x40000012
    3d68:	65527469 	ldrbvs	r7, [r2, #-1129]	; 0xfffffb97
    3d6c:	6e006461 	cdpvs	4, 0, cr6, cr0, cr1, {3}
    3d70:	00746552 	rsbseq	r6, r4, r2, asr r5
    3d74:	41787541 	cmnmi	r8, r1, asr #10
    3d78:	64446964 	strbvs	r6, [r4], #-2404	; 0xfffff69c
    3d7c:	66615369 	strbtvs	r5, [r1], -r9, ror #6
    3d80:	69725765 	ldmdbvs	r2!, {r0, r2, r5, r6, r8, r9, sl, ip, lr}^
    3d84:	75006574 	strvc	r6, [r0, #-1396]	; 0xfffffa8c
    3d88:	44363169 	ldrtmi	r3, [r6], #-361	; 0xfffffe97
    3d8c:	00617461 	rsbeq	r7, r1, r1, ror #8
    3d90:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    3d94:	61447257 	cmpvs	r4, r7, asr r2
    3d98:	75006174 	strvc	r6, [r0, #-372]	; 0xfffffe8c
    3d9c:	44323369 	ldrtmi	r3, [r2], #-873	; 0xfffffc97
    3da0:	00617461 	rsbeq	r7, r1, r1, ror #8
    3da4:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    3da8:	66696853 			; <UNDEFINED> instruction: 0x66696853
    3dac:	4f4e0074 	svcmi	0x004e0074
    3db0:	5f4d4f52 	svcpl	0x004d4f52
    3db4:	31494444 	cmpcc	r9, r4, asr #8
    3db8:	74694236 	strbtvc	r4, [r9], #-566	; 0xfffffdca
    3dbc:	6c656966 			; <UNDEFINED> instruction: 0x6c656966
    3dc0:	69725764 	ldmdbvs	r2!, {r2, r5, r6, r8, r9, sl, ip, lr}^
    3dc4:	6e006574 	cfrshl64vs	mvdx0, mvdx4, r6
    3dc8:	61746144 	cmnvs	r4, r4, asr #2
    3dcc:	33697500 	cmncc	r9, #0, 10
    3dd0:	6c615632 	stclvs	6, cr5, [r1], #-200	; 0xffffff38
    3dd4:	78754100 	ldmdavc	r5!, {r8, lr}^
    3dd8:	44696441 	strbtmi	r6, [r9], #-1089	; 0xfffffbbf
    3ddc:	61536964 	cmpvs	r3, r4, ror #18
    3de0:	65526566 	ldrbvs	r6, [r2, #-1382]	; 0xfffffa9a
    3de4:	4e006461 	cdpmi	4, 0, cr6, cr0, cr1, {3}
    3de8:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3cb4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x38>
    3dec:	4944445f 	stmdbmi	r4, {r0, r1, r2, r3, r4, r6, sl, lr}^
    3df0:	69423631 	stmdbvs	r2, {r0, r4, r5, r9, sl, ip, sp}^
    3df4:	69725774 	ldmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, ip, lr}^
    3df8:	2e006574 	cfrshl64cs	mvdx0, mvdx4, r6
    3dfc:	2f2e2e2f 	svccs	0x002e2e2f
    3e00:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    3e04:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    3e08:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    3e0c:	2f62696c 	svccs	0x0062696c
    3e10:	2e696464 	cdpcs	4, 6, cr6, cr9, cr4, {3}
    3e14:	69750063 	ldmdbvs	r5!, {r0, r1, r5, r6}^
    3e18:	65523233 	ldrbvs	r3, [r2, #-563]	; 0xfffffdcd
    3e1c:	64644167 	strbtvs	r4, [r4], #-359	; 0xfffffe99
    3e20:	536e0072 	cmnpl	lr, #114	; 0x72
    3e24:	00657a69 	rsbeq	r7, r5, r9, ror #20
    3e28:	6e5f435f 	mrcvs	3, 2, r4, cr15, cr15, {2}
    3e2c:	72656d75 	rsbvc	r6, r5, #7488	; 0x1d40
    3e30:	6c5f6369 	mrrcvs	3, 6, r6, pc, cr9	; <UNPREDICTABLE>
    3e34:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
    3e38:	75630065 	strbvc	r0, [r3, #-101]!	; 0xffffff9b
    3e3c:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    3e40:	735f7963 	cmpvc	pc, #1622016	; 0x18c000
    3e44:	6f626d79 	svcvs	0x00626d79
    3e48:	7463006c 	strbtvc	r0, [r3], #-108	; 0xffffff94
    3e4c:	5f657079 	svcpl	0x00657079
    3e50:	00727470 	rsbseq	r7, r2, r0, ror r4
    3e54:	30747364 	rsbscc	r7, r4, r4, ror #6
    3e58:	696c6100 	stmdbvs	ip!, {r8, sp, lr}^
    3e5c:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
    3e60:	7473645f 	ldrbtvc	r6, [r3], #-1119	; 0xfffffba1
    3e64:	746e6900 	strbtvc	r6, [lr], #-2304	; 0xfffff700
    3e68:	735f6e5f 	cmpvc	pc, #1520	; 0x5f0
    3e6c:	625f7065 	subsvs	r7, pc, #101	; 0x65
    3e70:	70735f79 	rsbsvc	r5, r3, r9, ror pc
    3e74:	00656361 	rsbeq	r6, r5, r1, ror #6
    3e78:	6e6f636c 	cdpvs	3, 6, cr6, cr15, cr12, {3}
    3e7c:	6a630076 	bvs	18c405c <__ccfg+0x18a40b4>
    3e80:	616c5f6b 	cmnvs	ip, fp, ror #30
    3e84:	6c00676e 	stcvs	7, cr6, [r0], {110}	; 0x6e
    3e88:	756e5f63 	strbvc	r5, [lr, #-3939]!	; 0xfffff09d
    3e8c:	6972656d 	ldmdbvs	r2!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}^
    3e90:	00545f63 	subseq	r5, r4, r3, ror #30
    3e94:	745f435f 	ldrbvc	r4, [pc], #-863	; 3e9c <NOROM_SysCtrlSetRechargeBeforePowerDown+0xd0>
    3e98:	5f656d69 	svcpl	0x00656d69
    3e9c:	61636f6c 	cmnvs	r3, ip, ror #30
    3ea0:	6900656c 	stmdbvs	r0, {r2, r3, r5, r6, r8, sl, sp, lr}
    3ea4:	635f746e 	cmpvs	pc, #1845493760	; 0x6e000000
    3ea8:	5f727275 	svcpl	0x00727275
    3eac:	626d7973 	rsbvs	r7, sp, #1884160	; 0x1cc000
    3eb0:	6c006c6f 	stcvs	12, cr6, [r0], {111}	; 0x6f
    3eb4:	69745f63 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    3eb8:	545f656d 	ldrbpl	r6, [pc], #-1389	; 3ec0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xf4>
    3ebc:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    3ec0:	6769645f 			; <UNDEFINED> instruction: 0x6769645f
    3ec4:	00737469 	rsbseq	r7, r3, r9, ror #8
    3ec8:	635f435f 	cmpvs	pc, #2080374785	; 0x7c000001
    3ecc:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    3ed0:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
    3ed4:	00656c61 	rsbeq	r6, r5, r1, ror #24
    3ed8:	705f6d61 	subsvc	r6, pc, r1, ror #26
    3edc:	7265006d 	rsbvc	r0, r5, #109	; 0x6d
    3ee0:	5f645f61 	svcpl	0x00645f61
    3ee4:	6d665f74 	stclvs	15, cr5, [r6, #-464]!	; 0xfffffe30
    3ee8:	6f6e0074 	svcvs	0x006e0074
    3eec:	00727473 	rsbseq	r7, r2, r3, ror r4
    3ef0:	6d5f636c 	ldclvs	3, cr6, [pc, #-432]	; 3d48 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xcc>
    3ef4:	74656e6f 	strbtvc	r6, [r5], #-3695	; 0xfffff191
    3ef8:	5f797261 	svcpl	0x00797261
    3efc:	656d0054 	strbvs	r0, [sp, #-84]!	; 0xffffffac
    3f00:	67617373 			; <UNDEFINED> instruction: 0x67617373
    3f04:	6f635f65 	svcvs	0x00635f65
    3f08:	65736564 	ldrbvs	r6, [r3, #-1380]!	; 0xfffffa9c
    3f0c:	626d0074 	rsbvs	r0, sp, #116	; 0x74
    3f10:	63776f74 	cmnvs	r7, #116, 30	; 0x1d0
    3f14:	5f435f00 	svcpl	0x00435f00
    3f18:	7373656d 	cmnvc	r3, #457179136	; 0x1b400000
    3f1c:	73656761 	cmnvc	r5, #25427968	; 0x1840000
    3f20:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
    3f24:	00656c61 	rsbeq	r6, r5, r1, ror #24
    3f28:	5f746e69 	svcpl	0x00746e69
    3f2c:	69735f70 	ldmdbvs	r3!, {r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    3f30:	705f6e67 	subsvc	r6, pc, r7, ror #28
    3f34:	006e736f 	rsbeq	r7, lr, pc, ror #6
    3f38:	5f6e6f6d 	svcpl	0x006e6f6d
    3f3c:	756f7267 	strbvc	r7, [pc, #-615]!	; 3cdd <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x61>
    3f40:	676e6970 			; <UNDEFINED> instruction: 0x676e6970
    3f44:	665f5800 	ldrbvs	r5, [pc], -r0, lsl #16
    3f48:	6900746d 	stmdbvs	r0, {r0, r2, r3, r5, r6, sl, ip, sp, lr}
    3f4c:	705f746e 	subsvc	r7, pc, lr, ror #8
    3f50:	5f73635f 	svcpl	0x0073635f
    3f54:	63657270 	cmnvs	r5, #112, 4
    3f58:	73656465 	cmnvc	r5, #1694498816	; 0x65000000
    3f5c:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
    3f60:	6365645f 	cmnvs	r5, #1593835520	; 0x5f000000
    3f64:	6c616d69 	stclvs	13, cr6, [r1], #-420	; 0xfffffe5c
    3f68:	696f705f 	stmdbvs	pc!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^	; <UNPREDICTABLE>
    3f6c:	6300746e 	movwvs	r7, #1134	; 0x46e
    3f70:	746d665f 	strbtvc	r6, [sp], #-1631	; 0xfffff9a1
    3f74:	74616400 	strbtvc	r6, [r1], #-1024	; 0xfffffc00
    3f78:	6d665f65 	stclvs	15, cr5, [r6, #-404]!	; 0xfffffe6c
    3f7c:	656e0074 	strbvs	r0, [lr, #-116]!	; 0xffffff8c
    3f80:	69746167 	ldmdbvs	r4!, {r0, r1, r2, r5, r6, r8, sp, lr}^
    3f84:	735f6576 	cmpvc	pc, #494927872	; 0x1d800000
    3f88:	006e6769 	rsbeq	r6, lr, r9, ror #14
    3f8c:	635f626d 	cmpvs	pc, #-805306362	; 0xd0000006
    3f90:	6d5f7275 	lfmvs	f7, 2, [pc, #-468]	; 3dc4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x148>
    3f94:	77007861 	strvc	r7, [r0, -r1, ror #16]
    3f98:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
    3f9c:	7000745f 	andvc	r7, r0, pc, asr r4
    3fa0:	7469736f 	strbtvc	r7, [r9], #-879	; 0xfffffc91
    3fa4:	5f657669 	svcpl	0x00657669
    3fa8:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
    3fac:	79746300 	ldmdbvc	r4!, {r8, r9, sp, lr}^
    3fb0:	635f6570 	cmpvs	pc, #112, 10	; 0x1c000000
    3fb4:	7365646f 	cmnvc	r5, #1862270976	; 0x6f000000
    3fb8:	6c007465 	cfstrsvs	mvf7, [r0], {101}	; 0x65
    3fbc:	20676e6f 	rsbcs	r6, r7, pc, ror #28
    3fc0:	62756f64 	rsbsvs	r6, r5, #100, 30	; 0x190
    3fc4:	6e00656c 	cfsh32vs	mvfx6, mvfx0, #60
    3fc8:	7078656f 	rsbsvc	r6, r8, pc, ror #10
    3fcc:	5f780072 	svcpl	0x00780072
    3fd0:	00746d66 	rsbseq	r6, r4, r6, ror #26
    3fd4:	6f627573 	svcvs	0x00627573
    3fd8:	72617470 	rsbvc	r7, r1, #112, 8	; 0x70000000
    3fdc:	6e690067 	cdpvs	0, 6, cr0, cr9, cr7, {3}
    3fe0:	5f705f74 	svcpl	0x00705f74
    3fe4:	5f706573 	svcpl	0x00706573
    3fe8:	735f7962 	cmpvc	pc, #1605632	; 0x188000
    3fec:	65636170 	strbvs	r6, [r3, #-368]!	; 0xfffffe90
    3ff0:	746e6900 	strbtvc	r6, [lr], #-2304	; 0xfffff700
    3ff4:	635f6e5f 	cmpvs	pc, #1520	; 0x5f0
    3ff8:	72705f73 	rsbsvc	r5, r0, #460	; 0x1cc
    3ffc:	64656365 	strbtvs	r6, [r5], #-869	; 0xfffffc9b
    4000:	2e007365 	cdpcs	3, 0, cr7, cr0, cr5, {3}
    4004:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4008:	2f2e2e2f 	svccs	0x002e2e2f
    400c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4010:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4014:	2f2e2e2f 	svccs	0x002e2e2f
    4018:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    401c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4020:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    4024:	6d2f6362 	stcvs	3, cr6, [pc, #-392]!	; 3ea4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xd8>
    4028:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    402c:	612f656e 			; <UNDEFINED> instruction: 0x612f656e
    4030:	6d2f6d72 	stcvs	13, cr6, [pc, #-456]!	; 3e70 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xa4>
    4034:	70636d65 	rsbvc	r6, r3, r5, ror #26
    4038:	74732d79 	ldrbtvc	r2, [r3], #-3449	; 0xfffff287
    403c:	632e6275 			; <UNDEFINED> instruction: 0x632e6275
    4040:	5f646d00 	svcpl	0x00646d00
    4044:	6564726f 	strbvs	r7, [r4, #-623]!	; 0xfffffd91
    4048:	65790072 	ldrbvs	r0, [r9, #-114]!	; 0xffffff8e
    404c:	72747373 	rsbsvc	r7, r4, #-872415231	; 0xcc000001
    4050:	73657900 	cmnvc	r5, #0, 18
    4054:	72707865 	rsbsvc	r7, r0, #6619136	; 0x650000
    4058:	61726500 	cmnvs	r2, r0, lsl #10
    405c:	665f645f 			; <UNDEFINED> instruction: 0x665f645f
    4060:	6c00746d 	cfstrsvs	mvf7, [r0], {109}	; 0x6d
    4064:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
    4068:	5f657079 	svcpl	0x00657079
    406c:	72650054 	rsbvc	r0, r5, #84	; 0x54
    4070:	5f745f61 	svcpl	0x00745f61
    4074:	00746d66 	rsbseq	r6, r4, r6, ror #26
    4078:	6f746377 	svcvs	0x00746377
    407c:	6d00626d 	sfmvs	f6, 4, [r0, #-436]	; 0xfffffe4c
    4080:	745f6e6f 	ldrbvc	r6, [pc], #-3695	; 4088 <NOROM_ChipInfo_GetChipFamily+0x24>
    4084:	73756f68 	cmnvc	r5, #104, 30	; 0x1a0
    4088:	73646e61 	cmnvc	r4, #1552	; 0x610
    408c:	7065735f 	rsbvc	r7, r5, pc, asr r3
    4090:	706d6100 	rsbvc	r6, sp, r0, lsl #2
    4094:	6d665f6d 	stclvs	15, cr5, [r6, #-436]!	; 0xfffffe4c
    4098:	636c0074 	cmnvs	ip, #116	; 0x74
    409c:	73656d5f 	cmnvc	r5, #6080	; 0x17c0
    40a0:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
    40a4:	00545f73 	subseq	r5, r4, r3, ror pc
    40a8:	6b656577 	blvs	195d68c <__ccfg+0x193d6e4>
    40ac:	00796164 	rsbseq	r6, r9, r4, ror #2
    40b0:	6d5f435f 	ldclvs	3, cr4, [pc, #-380]	; 3f3c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x170>
    40b4:	74656e6f 	strbtvc	r6, [r5], #-3695	; 0xfffff191
    40b8:	5f797261 	svcpl	0x00797261
    40bc:	61636f6c 	cmnvs	r3, ip, ror #30
    40c0:	6300656c 	movwvs	r6, #1388	; 0x56c
    40c4:	67657461 	strbvs	r7, [r5, -r1, ror #8]!
    40c8:	6569726f 	strbvs	r7, [r9, #-623]!	; 0xfffffd91
    40cc:	6e690073 	mcrvs	0, 3, r0, cr9, cr3, {3}
    40d0:	5f6e5f74 	svcpl	0x006e5f74
    40d4:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
    40d8:	736f705f 	cmnvc	pc, #95	; 0x5f
    40dc:	6c61006e 	stclvs	0, cr0, [r1], #-440	; 0xfffffe48
    40e0:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
    40e4:	72735f64 	rsbsvc	r5, r3, #100, 30	; 0x190
    40e8:	4e470063 	cdpmi	0, 4, cr0, cr7, cr3, {3}
    40ec:	31432055 	qdaddcc	r2, r5, r3
    40f0:	2e382037 	mrccs	0, 1, r2, cr8, cr7, {1}
    40f4:	20312e33 	eorscs	r2, r1, r3, lsr lr
    40f8:	39313032 	ldmdbcc	r1!, {r1, r4, r5, ip, sp}
    40fc:	33303730 	teqcc	r0, #48, 14	; 0xc00000
    4100:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
    4104:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
    4108:	5b202965 	blpl	80e6a4 <__ccfg+0x7ee6fc>
    410c:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    4110:	72622d38 	rsbvc	r2, r2, #56, 26	; 0xe00
    4114:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
    4118:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
    411c:	6f697369 	svcvs	0x00697369
    4120:	3732206e 	ldrcc	r2, [r2, -lr, rrx]!
    4124:	37323033 			; <UNDEFINED> instruction: 0x37323033
    4128:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
    412c:	616f6c66 	cmnvs	pc, r6, ror #24
    4130:	62612d74 	rsbvs	r2, r1, #116, 26	; 0x1d00
    4134:	6f733d69 	svcvs	0x00733d69
    4138:	2d207466 	cfstrscs	mvf7, [r0, #-408]!	; 0xfffffe68
    413c:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
    4140:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
    4144:	6f6c666d 	svcvs	0x006c666d
    4148:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
    414c:	733d6962 	teqvc	sp, #1605632	; 0x188000
    4150:	2074666f 	rsbscs	r6, r4, pc, ror #12
    4154:	70636d2d 	rsbvc	r6, r3, sp, lsr #26
    4158:	72613d75 	rsbvc	r3, r1, #7488	; 0x1d40
    415c:	6474376d 	ldrbtvs	r3, [r4], #-1901	; 0xfffff893
    4160:	2d20696d 			; <UNDEFINED> instruction: 0x2d20696d
    4164:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
    4168:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
    416c:	7434766d 	ldrtvc	r7, [r4], #-1645	; 0xfffff993
    4170:	20672d20 	rsbcs	r2, r7, r0, lsr #26
    4174:	20324f2d 	eorscs	r4, r2, sp, lsr #30
    4178:	6f6e662d 	svcvs	0x006e662d
    417c:	6975622d 	ldmdbvs	r5!, {r0, r2, r3, r5, r9, sp, lr}^
    4180:	6e69746c 	cdpvs	4, 6, cr7, cr9, cr12, {3}
    4184:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    4188:	2f646c69 	svccs	0x00646c69
    418c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4190:	432d6269 			; <UNDEFINED> instruction: 0x432d6269
    4194:	79455656 	stmdbvc	r5, {r1, r2, r4, r6, r9, sl, ip, lr}^
    4198:	656e2f78 	strbvs	r2, [lr, #-3960]!	; 0xfffff088
    419c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    41a0:	332e332d 			; <UNDEFINED> instruction: 0x332e332d
    41a4:	622f302e 	eorvs	r3, pc, #46	; 0x2e
    41a8:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    41ac:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    41b0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    41b4:	61652d65 	cmnvs	r5, r5, ror #26
    41b8:	742f6962 	strtvc	r6, [pc], #-2402	; 41c0 <memcpy+0x5c>
    41bc:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
    41c0:	666f6e2f 	strbtvs	r6, [pc], -pc, lsr #28
    41c4:	656e2f70 	strbvs	r2, [lr, #-3952]!	; 0xfffff090
    41c8:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    41cc:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    41d0:	616d2f63 	cmnvs	sp, r3, ror #30
    41d4:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    41d8:	72612f65 	rsbvc	r2, r1, #404	; 0x194
    41dc:	656c006d 	strbvs	r0, [ip, #-109]!	; 0xffffff93
    41e0:	6900306e 	stmdbvs	r0, {r1, r2, r3, r5, r6, ip, sp}
    41e4:	665f746e 	ldrbvs	r7, [pc], -lr, ror #8
    41e8:	5f636172 	svcpl	0x00636172
    41ec:	69676964 	stmdbvs	r7!, {r2, r5, r6, r8, fp, sp, lr}^
    41f0:	73007374 	movwvc	r7, #884	; 0x374
    41f4:	00306372 	eorseq	r6, r0, r2, ror r3
    41f8:	5f746c61 	svcpl	0x00746c61
    41fc:	746e6f6d 	strbtvc	r6, [lr], #-3949	; 0xfffff093
    4200:	2e2e0068 	cdpcs	0, 2, cr0, cr14, cr8, {3}
    4204:	2f2e2e2f 	svccs	0x002e2e2f
    4208:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    420c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4210:	2f2e2e2f 	svccs	0x002e2e2f
    4214:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    4218:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    421c:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    4220:	732f6362 			; <UNDEFINED> instruction: 0x732f6362
    4224:	696c6474 	stmdbvs	ip!, {r2, r4, r5, r6, sl, sp, lr}^
    4228:	61722f62 	cmnvs	r2, r2, ror #30
    422c:	632e646e 			; <UNDEFINED> instruction: 0x632e646e
    4230:	61727300 	cmnvs	r2, r0, lsl #6
    4234:	2f00646e 	svccs	0x0000646e
    4238:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    423c:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    4240:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    4244:	5656432d 	ldrbpl	r4, [r6], -sp, lsr #6
    4248:	2f787945 	svccs	0x00787945
    424c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4250:	332d6269 			; <UNDEFINED> instruction: 0x332d6269
    4254:	302e332e 	eorcc	r3, lr, lr, lsr #6
    4258:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    425c:	612f646c 			; <UNDEFINED> instruction: 0x612f646c
    4260:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    4264:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    4268:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    426c:	7568742f 	strbvc	r7, [r8, #-1071]!	; 0xfffffbd1
    4270:	6e2f626d 	cdpvs	2, 2, cr6, cr15, cr13, {3}
    4274:	2f70666f 	svccs	0x0070666f
    4278:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    427c:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 40e0 <NOROM_ChipInfo_GetHwRevision+0x30>
    4280:	2f636269 	svccs	0x00636269
    4284:	6c647473 	cfstrdvs	mvd7, [r4], #-460	; 0xfffffe34
    4288:	5f006269 	svcpl	0x00006269
    428c:	6c796164 	ldfvse	f6, [r9], #-400	; 0xfffffe70
    4290:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    4294:	7a745f00 	bvc	1d1be9c <__ccfg+0x1cfbef4>
    4298:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
    429c:	65675f00 	strbvs	r5, [r7, #-3840]!	; 0xfffff100
    42a0:	6d697474 	cfstrdvs	mvd7, [r9, #-464]!	; 0xfffffe30
    42a4:	64666f65 	strbtvs	r6, [r6], #-3941	; 0xfffff09b
    42a8:	725f7961 	subsvc	r7, pc, #1589248	; 0x184000
    42ac:	735f5f00 	cmpvc	pc, #0, 30
    42b0:	63657375 	cmnvs	r5, #-738197503	; 0xd4000001
    42b4:	73646e6f 	cmnvc	r4, #1776	; 0x6f0
    42b8:	2e00745f 	cfmvsrcs	mvf0, r7
    42bc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    42c0:	2f2e2e2f 	svccs	0x002e2e2f
    42c4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    42c8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    42cc:	2f2e2e2f 	svccs	0x002e2e2f
    42d0:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    42d4:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 4138 <AuxAdiDdiSafeWrite.constprop.1+0x4>
    42d8:	2f636269 	svccs	0x00636269
    42dc:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    42e0:	6d69742f 	cfstrdvs	mvd7, [r9, #-188]!	; 0xffffff44
    42e4:	00632e65 	rsbeq	r2, r3, r5, ror #28
    42e8:	735f7674 	cmpvc	pc, #116, 12	; 0x7400000
    42ec:	2f006365 	svccs	0x00006365
    42f0:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    42f4:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    42f8:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    42fc:	5656432d 	ldrbpl	r4, [r6], -sp, lsr #6
    4300:	2f787945 	svccs	0x00787945
    4304:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4308:	332d6269 			; <UNDEFINED> instruction: 0x332d6269
    430c:	302e332e 	eorcc	r3, lr, lr, lsr #6
    4310:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    4314:	612f646c 			; <UNDEFINED> instruction: 0x612f646c
    4318:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    431c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    4320:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    4324:	7568742f 	strbvc	r7, [r8, #-1071]!	; 0xfffffbd1
    4328:	6e2f626d 	cdpvs	2, 2, cr6, cr15, cr13, {3}
    432c:	2f70666f 	svccs	0x0070666f
    4330:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4334:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 4198 <memcpy+0x34>
    4338:	2f636269 	svccs	0x00636269
    433c:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    4340:	69745f00 	ldmdbvs	r4!, {r8, r9, sl, fp, ip, lr}^
    4344:	6f7a656d 	svcvs	0x007a656d
    4348:	7400656e 	strvc	r6, [r0], #-1390	; 0xfffffa92
    434c:	73755f76 	cmnvc	r5, #472	; 0x1d8
    4350:	2e006365 	cdpcs	3, 0, cr6, cr0, cr5, {3}
    4354:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4358:	2f2e2e2f 	svccs	0x002e2e2f
    435c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4360:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4364:	2f2e2e2f 	svccs	0x002e2e2f
    4368:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    436c:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 41d0 <memcpy+0x6c>
    4370:	2f636269 	svccs	0x00636269
    4374:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    4378:	65672f74 	strbvs	r2, [r7, #-3956]!	; 0xfffff08c
    437c:	6d697474 	cfstrdvs	mvd7, [r9, #-464]!	; 0xfffffe30
    4380:	64666f65 	strbtvs	r6, [r6], #-3941	; 0xfffff09b
    4384:	2e727961 	vsubcs.f16	s15, s4, s3	; <UNPREDICTABLE>
    4388:	74700063 	ldrbtvc	r0, [r0], #-99	; 0xffffff9d
    438c:	7a656d69 	bvc	195f938 <__ccfg+0x193f990>
    4390:	00656e6f 	rsbeq	r6, r5, pc, ror #28
    4394:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    4398:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    439c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    43a0:	56432d62 	strbpl	r2, [r3], -r2, ror #26
    43a4:	78794556 	ldmdavc	r9!, {r1, r2, r4, r6, r8, sl, lr}^
    43a8:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    43ac:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    43b0:	2e332e33 	mrccs	14, 1, r2, cr3, cr3, {1}
    43b4:	75622f30 	strbvc	r2, [r2, #-3888]!	; 0xfffff0d0
    43b8:	2f646c69 	svccs	0x00646c69
    43bc:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    43c0:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    43c4:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    43c8:	68742f69 	ldmdavs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, sp}^
    43cc:	2f626d75 	svccs	0x00626d75
    43d0:	70666f6e 	rsbvc	r6, r6, lr, ror #30
    43d4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    43d8:	2f62696c 	svccs	0x0062696c
    43dc:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    43e0:	6565722f 	strbvs	r7, [r5, #-559]!	; 0xfffffdd1
    43e4:	7000746e 	andvc	r7, r0, lr, ror #8
    43e8:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    43ec:	006c6176 	rsbeq	r6, ip, r6, ror r1
    43f0:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
    43f4:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    43f8:	6164666f 	cmnvs	r4, pc, ror #12
    43fc:	6d690079 	stclvs	0, cr0, [r9, #-484]!	; 0xfffffe1c
    4400:	65727570 	ldrbvs	r7, [r2, #-1392]!	; 0xfffffa90
    4404:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
    4408:	2e2e0061 	cdpcs	0, 2, cr0, cr14, cr1, {3}
    440c:	2f2e2e2f 	svccs	0x002e2e2f
    4410:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4414:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4418:	2f2e2e2f 	svccs	0x002e2e2f
    441c:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    4420:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4424:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    4428:	722f6362 	eorvc	r6, pc, #-2013265919	; 0x88000001
    442c:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    4430:	706d692f 	rsbvc	r6, sp, pc, lsr #18
    4434:	2e657275 	mcrcs	2, 3, r7, cr5, cr5, {3}
    4438:	725f0063 	subsvc	r0, pc, #99	; 0x63
    443c:	616c6365 	cmnvs	ip, r5, ror #6
    4440:	725f6d69 	subsvc	r6, pc, #6720	; 0x1a40
    4444:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    4448:	69687400 	stmdbvs	r8!, {sl, ip, sp, lr}^
    444c:	656e6f73 	strbvs	r6, [lr, #-3955]!	; 0xfffff08d
    4450:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
    4454:	70756e61 	rsbsvc	r6, r5, r1, ror #28
    4458:	756c675f 	strbvc	r6, [ip, #-1887]!	; 0xfffff8a1
    445c:	2e2e0065 	cdpcs	0, 2, cr0, cr14, cr5, {3}
    4460:	2f2e2e2f 	svccs	0x002e2e2f
    4464:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4468:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    446c:	2f2e2e2f 	svccs	0x002e2e2f
    4470:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    4474:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4478:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    447c:	722f6362 	eorvc	r6, pc, #-2013265919	; 0x88000001
    4480:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    4484:	6565722f 	strbvs	r7, [r5, #-559]!	; 0xfffffdd1
    4488:	632e746e 			; <UNDEFINED> instruction: 0x632e746e
    448c:	72665f00 	rsbvc	r5, r6, #0, 30
    4490:	725f6565 	subsvc	r6, pc, #423624704	; 0x19400000
    4494:	78656e00 	stmdavc	r5!, {r9, sl, fp, sp, lr}^
    4498:	656e6f74 	strbvs	r6, [lr, #-3956]!	; 0xfffff08c
    449c:	52415400 	subpl	r5, r1, #0, 8
    44a0:	5f544547 	svcpl	0x00544547
    44a4:	5f555043 	svcpl	0x00555043
    44a8:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    44ac:	31617865 	cmncc	r1, r5, ror #16
    44b0:	726f6337 	rsbvc	r6, pc, #-603979776	; 0xdc000000
    44b4:	61786574 	cmnvs	r8, r4, ror r5
    44b8:	73690037 	cmnvc	r9, #55	; 0x37
    44bc:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    44c0:	70665f74 	rsbvc	r5, r6, r4, ror pc
    44c4:	6c62645f 	cfstrdvs	mvd6, [r2], #-380	; 0xfffffe84
    44c8:	6d726100 	ldfvse	f6, [r2, #-0]
    44cc:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    44d0:	77695f68 	strbvc	r5, [r9, -r8, ror #30]!
    44d4:	74786d6d 	ldrbtvc	r6, [r8], #-3437	; 0xfffff293
    44d8:	52415400 	subpl	r5, r1, #0, 8
    44dc:	5f544547 	svcpl	0x00544547
    44e0:	5f555043 	svcpl	0x00555043
    44e4:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    44e8:	326d7865 	rsbcc	r7, sp, #6619136	; 0x650000
    44ec:	52410033 	subpl	r0, r1, #51	; 0x33
    44f0:	51455f4d 	cmppl	r5, sp, asr #30
    44f4:	52415400 	subpl	r5, r1, #0, 8
    44f8:	5f544547 	svcpl	0x00544547
    44fc:	5f555043 	svcpl	0x00555043
    4500:	316d7261 	cmncc	sp, r1, ror #4
    4504:	74363531 	ldrtvc	r3, [r6], #-1329	; 0xfffffacf
    4508:	00736632 	rsbseq	r6, r3, r2, lsr r6
    450c:	5f617369 	svcpl	0x00617369
    4510:	5f746962 	svcpl	0x00746962
    4514:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    4518:	41540062 	cmpmi	r4, r2, rrx
    451c:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4520:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4524:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    4528:	61786574 	cmnvs	r8, r4, ror r5
    452c:	6f633735 	svcvs	0x00633735
    4530:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4534:	00333561 	eorseq	r3, r3, r1, ror #10
    4538:	756d5f5f 	strbvc	r5, [sp, #-3935]!	; 0xfffff0a1
    453c:	3369646c 	cmncc	r9, #108, 8	; 0x6c000000
    4540:	53414200 	movtpl	r4, #4608	; 0x1200
    4544:	52415f45 	subpl	r5, r1, #276	; 0x114
    4548:	385f4843 	ldmdacc	pc, {r0, r1, r6, fp, lr}^	; <UNPREDICTABLE>
    454c:	41425f4d 	cmpmi	r2, sp, asr #30
    4550:	54004553 	strpl	r4, [r0], #-1363	; 0xfffffaad
    4554:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4558:	50435f54 	subpl	r5, r3, r4, asr pc
    455c:	72615f55 	rsbvc	r5, r1, #340	; 0x154
    4560:	3031386d 	eorscc	r3, r1, sp, ror #16
    4564:	52415400 	subpl	r5, r1, #0, 8
    4568:	5f544547 	svcpl	0x00544547
    456c:	5f555043 	svcpl	0x00555043
    4570:	6e656778 	mcrvs	7, 3, r6, cr5, cr8, {3}
    4574:	41003165 	tstmi	r0, r5, ror #2
    4578:	505f4d52 	subspl	r4, pc, r2, asr sp	; <UNPREDICTABLE>
    457c:	415f5343 	cmpmi	pc, r3, asr #6
    4580:	53435041 	movtpl	r5, #12353	; 0x3041
    4584:	4d57495f 	vldrmi.16	s9, [r7, #-190]	; 0xffffff42	; <UNPREDICTABLE>
    4588:	0054584d 	subseq	r5, r4, sp, asr #16
    458c:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    4590:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    4594:	00305f48 	eorseq	r5, r0, r8, asr #30
    4598:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    459c:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    45a0:	00325f48 	eorseq	r5, r2, r8, asr #30
    45a4:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    45a8:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    45ac:	00335f48 	eorseq	r5, r3, r8, asr #30
    45b0:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    45b4:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    45b8:	00345f48 	eorseq	r5, r4, r8, asr #30
    45bc:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    45c0:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    45c4:	00365f48 	eorseq	r5, r6, r8, asr #30
    45c8:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    45cc:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    45d0:	00375f48 	eorseq	r5, r7, r8, asr #30
    45d4:	47524154 			; <UNDEFINED> instruction: 0x47524154
    45d8:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    45dc:	785f5550 	ldmdavc	pc, {r4, r6, r8, sl, ip, lr}^	; <UNPREDICTABLE>
    45e0:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    45e4:	69680065 	stmdbvs	r8!, {r0, r2, r5, r6}^
    45e8:	69006867 	stmdbvs	r0, {r0, r1, r2, r5, r6, fp, sp, lr}
    45ec:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    45f0:	705f7469 	subsvc	r7, pc, r9, ror #8
    45f4:	72646572 	rsbvc	r6, r4, #478150656	; 0x1c800000
    45f8:	54007365 	strpl	r7, [r0], #-869	; 0xfffffc9b
    45fc:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4600:	50435f54 	subpl	r5, r3, r4, asr pc
    4604:	6f635f55 	svcvs	0x00635f55
    4608:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    460c:	0033336d 	eorseq	r3, r3, sp, ror #6
    4610:	74495355 	strbvc	r5, [r9], #-853	; 0xfffffcab
    4614:	00657079 	rsbeq	r7, r5, r9, ror r0
    4618:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    461c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4620:	2f2e2e2f 	svccs	0x002e2e2f
    4624:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 4574 <CSWTCH.47+0x6d>
    4628:	63676269 	cmnvs	r7, #-1879048186	; 0x90000006
    462c:	696c2f63 	stmdbvs	ip!, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
    4630:	63636762 	cmnvs	r3, #25690112	; 0x1880000
    4634:	00632e32 	rsbeq	r2, r3, r2, lsr lr
    4638:	47524154 			; <UNDEFINED> instruction: 0x47524154
    463c:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4640:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    4644:	74376d72 	ldrtvc	r6, [r7], #-3442	; 0xfffff28e
    4648:	00696d64 	rsbeq	r6, r9, r4, ror #26
    464c:	5f617369 	svcpl	0x00617369
    4650:	69626f6e 	stmdbvs	r2!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    4654:	41540074 	cmpmi	r4, r4, ror r0
    4658:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    465c:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4660:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4664:	36373131 			; <UNDEFINED> instruction: 0x36373131
    4668:	73667a6a 	cmnvc	r6, #434176	; 0x6a000
    466c:	61736900 	cmnvs	r3, r0, lsl #18
    4670:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4674:	7066765f 	rsbvc	r7, r6, pc, asr r6
    4678:	41003276 	tstmi	r0, r6, ror r2
    467c:	505f4d52 	subspl	r4, pc, r2, asr sp	; <UNPREDICTABLE>
    4680:	555f5343 	ldrbpl	r5, [pc, #-835]	; 4345 <_gettimeofday+0x31>
    4684:	4f4e4b4e 	svcmi	0x004e4b4e
    4688:	54004e57 	strpl	r4, [r0], #-3671	; 0xfffff1a9
    468c:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4690:	50435f54 	subpl	r5, r3, r4, asr pc
    4694:	72615f55 	rsbvc	r5, r1, #340	; 0x154
    4698:	0065396d 	rsbeq	r3, r5, sp, ror #18
    469c:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    46a0:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    46a4:	54355f48 	ldrtpl	r5, [r5], #-3912	; 0xfffff0b8
    46a8:	61004a45 	tstvs	r0, r5, asr #20
    46ac:	635f6d72 	cmpvs	pc, #7296	; 0x1c80
    46b0:	6d736663 	ldclvs	6, cr6, [r3, #-396]!	; 0xfffffe74
    46b4:	6174735f 	cmnvs	r4, pc, asr r3
    46b8:	61006574 	tstvs	r0, r4, ror r5
    46bc:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    46c0:	35686372 	strbcc	r6, [r8, #-882]!	; 0xfffffc8e
    46c4:	75006574 	strvc	r6, [r0, #-1396]	; 0xfffffa8c
    46c8:	6570736e 	ldrbvs	r7, [r0, #-878]!	; 0xfffffc92
    46cc:	74735f63 	ldrbtvc	r5, [r3], #-3939	; 0xfffff09d
    46d0:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    46d4:	73690073 	cmnvc	r9, #115	; 0x73
    46d8:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    46dc:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
    46e0:	5f5f0063 	svcpl	0x005f0063
    46e4:	5f7a6c63 	svcpl	0x007a6c63
    46e8:	00626174 	rsbeq	r6, r2, r4, ror r1
    46ec:	5f4d5241 	svcpl	0x004d5241
    46f0:	61004356 	tstvs	r0, r6, asr r3
    46f4:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    46f8:	5f686372 	svcpl	0x00686372
    46fc:	61637378 	smcvs	14136	; 0x3738
    4700:	4100656c 	tstmi	r0, ip, ror #10
    4704:	4c5f4d52 	mrrcmi	13, 5, r4, pc, cr2	; <UNPREDICTABLE>
    4708:	57440045 	strbpl	r0, [r4, -r5, asr #32]
    470c:	6f696e75 	svcvs	0x00696e75
    4710:	5241006e 	subpl	r0, r1, #110	; 0x6e
    4714:	53565f4d 	cmppl	r6, #308	; 0x134
    4718:	4d524100 	ldfmie	f4, [r2, #-0]
    471c:	0045475f 	subeq	r4, r5, pc, asr r7
    4720:	5f6d7261 	svcpl	0x006d7261
    4724:	656e7574 	strbvs	r7, [lr, #-1396]!	; 0xfffffa8c
    4728:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
    472c:	61676e6f 	cmnvs	r7, pc, ror #28
    4730:	63006d72 	movwvs	r6, #3442	; 0xd72
    4734:	6c706d6f 	ldclvs	13, cr6, [r0], #-444	; 0xfffffe44
    4738:	66207865 	strtvs	r7, [r0], -r5, ror #16
    473c:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
    4740:	52415400 	subpl	r5, r1, #0, 8
    4744:	5f544547 	svcpl	0x00544547
    4748:	5f555043 	svcpl	0x00555043
    474c:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4750:	31617865 	cmncc	r1, r5, ror #16
    4754:	41540035 	cmpmi	r4, r5, lsr r0
    4758:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    475c:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4760:	3761665f 			; <UNDEFINED> instruction: 0x3761665f
    4764:	65743632 	ldrbvs	r3, [r4, #-1586]!	; 0xfffff9ce
    4768:	52415400 	subpl	r5, r1, #0, 8
    476c:	5f544547 	svcpl	0x00544547
    4770:	5f555043 	svcpl	0x00555043
    4774:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4778:	31617865 	cmncc	r1, r5, ror #16
    477c:	52410037 	subpl	r0, r1, #55	; 0x37
    4780:	54475f4d 	strbpl	r5, [r7], #-3917	; 0xfffff0b3
    4784:	52415400 	subpl	r5, r1, #0, 8
    4788:	5f544547 	svcpl	0x00544547
    478c:	5f555043 	svcpl	0x00555043
    4790:	766f656e 	strbtvc	r6, [pc], -lr, ror #10
    4794:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
    4798:	5400316e 	strpl	r3, [r0], #-366	; 0xfffffe92
    479c:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    47a0:	50435f54 	subpl	r5, r3, r4, asr pc
    47a4:	6f635f55 	svcvs	0x00635f55
    47a8:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    47ac:	00663472 	rsbeq	r3, r6, r2, ror r4
    47b0:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    47b4:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    47b8:	45375f48 	ldrmi	r5, [r7, #-3912]!	; 0xfffff0b8
    47bc:	4e47004d 	cdpmi	0, 4, cr0, cr7, cr13, {2}
    47c0:	31432055 	qdaddcc	r2, r5, r3
    47c4:	2e392037 	mrccs	0, 1, r2, cr9, cr7, {1}
    47c8:	20312e32 	eorscs	r2, r1, r2, lsr lr
    47cc:	39313032 	ldmdbcc	r1!, {r1, r4, r5, ip, sp}
    47d0:	35323031 	ldrcc	r3, [r2, #-49]!	; 0xffffffcf
    47d4:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
    47d8:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
    47dc:	5b202965 	blpl	80ed78 <__ccfg+0x7eedd0>
    47e0:	2f4d5241 	svccs	0x004d5241
    47e4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    47e8:	72622d39 	rsbvc	r2, r2, #3648	; 0xe40
    47ec:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
    47f0:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
    47f4:	6f697369 	svcvs	0x00697369
    47f8:	3732206e 	ldrcc	r2, [r2, -lr, rrx]!
    47fc:	39393537 	ldmdbcc	r9!, {r0, r1, r2, r4, r5, r8, sl, ip, sp}
    4800:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
    4804:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    4808:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
    480c:	616f6c66 	cmnvs	pc, r6, ror #24
    4810:	62612d74 	rsbvs	r2, r1, #116, 26	; 0x1d00
    4814:	6f733d69 	svcvs	0x00733d69
    4818:	2d207466 	cfstrscs	mvf7, [r0, #-408]!	; 0xfffffe68
    481c:	7570636d 	ldrbvc	r6, [r0, #-877]!	; 0xfffffc93
    4820:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
    4824:	6d647437 	cfstrdvs	mvd7, [r4, #-220]!	; 0xffffff24
    4828:	6d2d2069 	stcvs	0, cr2, [sp, #-420]!	; 0xfffffe5c
    482c:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    4830:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
    4834:	20743476 	rsbscs	r3, r4, r6, ror r4
    4838:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
    483c:	672d2067 	strvs	r2, [sp, -r7, rrx]!
    4840:	324f2d20 	subcc	r2, pc, #32, 26	; 0x800
    4844:	324f2d20 	subcc	r2, pc, #32, 26	; 0x800
    4848:	324f2d20 	subcc	r2, pc, #32, 26	; 0x800
    484c:	62662d20 	rsbvs	r2, r6, #32, 26	; 0x800
    4850:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    4854:	2d676e69 	stclcs	14, cr6, [r7, #-420]!	; 0xfffffe5c
    4858:	6762696c 	strbvs	r6, [r2, -ip, ror #18]!
    485c:	2d206363 	stccs	3, cr6, [r0, #-396]!	; 0xfffffe74
    4860:	2d6f6e66 	stclcs	14, cr6, [pc, #-408]!	; 46d0 <__button_list+0x26>
    4864:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
    4868:	72702d6b 	rsbsvc	r2, r0, #6848	; 0x1ac0
    486c:	6365746f 	cmnvs	r5, #1862270976	; 0x6f000000
    4870:	20726f74 	rsbscs	r6, r2, r4, ror pc
    4874:	6f6e662d 	svcvs	0x006e662d
    4878:	6c6e692d 			; <UNDEFINED> instruction: 0x6c6e692d
    487c:	20656e69 	rsbcs	r6, r5, r9, ror #28
    4880:	6976662d 	ldmdbvs	r6!, {r0, r2, r3, r5, r9, sl, sp, lr}^
    4884:	69626973 	stmdbvs	r2!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
    4888:	7974696c 	ldmdbvc	r4!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    488c:	6469683d 	strbtvs	r6, [r9], #-2109	; 0xfffff7c3
    4890:	006e6564 	rsbeq	r6, lr, r4, ror #10
    4894:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4898:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    489c:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    48a0:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    48a4:	32316178 	eorscc	r6, r1, #120, 2
    48a8:	73616800 	cmnvc	r1, #0, 16
    48ac:	6c617668 	stclvs	6, cr7, [r1], #-416	; 0xfffffe60
    48b0:	4200745f 	andmi	r7, r0, #1593835520	; 0x5f000000
    48b4:	5f455341 	svcpl	0x00455341
    48b8:	48435241 	stmdami	r3, {r0, r6, r9, ip, lr}^
    48bc:	5a4b365f 	bpl	12d2240 <__ccfg+0x12b2298>
    48c0:	61736900 	cmnvs	r3, r0, lsl #18
    48c4:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    48c8:	72610073 	rsbvc	r0, r1, #115	; 0x73
    48cc:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    48d0:	615f6863 	cmpvs	pc, r3, ror #16
    48d4:	685f6d72 	ldmdavs	pc, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    48d8:	76696477 			; <UNDEFINED> instruction: 0x76696477
    48dc:	6d726100 	ldfvse	f6, [r2, #-0]
    48e0:	7570665f 	ldrbvc	r6, [r0, #-1631]!	; 0xfffff9a1
    48e4:	7365645f 	cmnvc	r5, #1593835520	; 0x5f000000
    48e8:	73690063 	cmnvc	r9, #99	; 0x63
    48ec:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    48f0:	70665f74 	rsbvc	r5, r6, r4, ror pc
    48f4:	41003631 	tstmi	r0, r1, lsr r6
    48f8:	485f4d52 	ldmdami	pc, {r1, r4, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
    48fc:	73690049 	cmnvc	r9, #73	; 0x49
    4900:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    4904:	64615f74 	strbtvs	r5, [r1], #-3956	; 0xfffff08c
    4908:	54007669 	strpl	r7, [r0], #-1641	; 0xfffff997
    490c:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4910:	50435f54 	subpl	r5, r3, r4, asr pc
    4914:	72615f55 	rsbvc	r5, r1, #340	; 0x154
    4918:	3331316d 	teqcc	r1, #1073741851	; 0x4000001b
    491c:	00736a36 	rsbseq	r6, r3, r6, lsr sl
    4920:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4924:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4928:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    492c:	00386d72 	eorseq	r6, r8, r2, ror sp
    4930:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4934:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4938:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    493c:	00396d72 	eorseq	r6, r9, r2, ror sp
    4940:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4944:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4948:	665f5550 			; <UNDEFINED> instruction: 0x665f5550
    494c:	36323661 	ldrtcc	r3, [r2], -r1, ror #12
    4950:	6d726100 	ldfvse	f6, [r2, #-0]
    4954:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    4958:	6d635f68 	stclvs	15, cr5, [r3, #-416]!	; 0xfffffe60
    495c:	54006573 	strpl	r6, [r0], #-1395	; 0xfffffa8d
    4960:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4964:	50435f54 	subpl	r5, r3, r4, asr pc
    4968:	6f635f55 	svcvs	0x00635f55
    496c:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4970:	5400346d 	strpl	r3, [r0], #-1133	; 0xfffffb93
    4974:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4978:	50435f54 	subpl	r5, r3, r4, asr pc
    497c:	72615f55 	rsbvc	r5, r1, #340	; 0x154
    4980:	6530316d 	ldrvs	r3, [r0, #-365]!	; 0xfffffe93
    4984:	52415400 	subpl	r5, r1, #0, 8
    4988:	5f544547 	svcpl	0x00544547
    498c:	5f555043 	svcpl	0x00555043
    4990:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4994:	376d7865 	strbcc	r7, [sp, -r5, ror #16]!
    4998:	6d726100 	ldfvse	f6, [r2, #-0]
    499c:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
    49a0:	6f635f64 	svcvs	0x00635f64
    49a4:	41006564 	tstmi	r0, r4, ror #10
    49a8:	505f4d52 	subspl	r4, pc, r2, asr sp	; <UNPREDICTABLE>
    49ac:	415f5343 	cmpmi	pc, r3, asr #6
    49b0:	53435041 	movtpl	r5, #12353	; 0x3041
    49b4:	61736900 	cmnvs	r3, r0, lsl #18
    49b8:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    49bc:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    49c0:	325f3876 	subscc	r3, pc, #7733248	; 0x760000
    49c4:	53414200 	movtpl	r4, #4608	; 0x1200
    49c8:	52415f45 	subpl	r5, r1, #276	; 0x114
    49cc:	335f4843 	cmpcc	pc, #4390912	; 0x430000
    49d0:	4154004d 	cmpmi	r4, sp, asr #32
    49d4:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    49d8:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    49dc:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    49e0:	74303137 	ldrtvc	r3, [r0], #-311	; 0xfffffec9
    49e4:	6d726100 	ldfvse	f6, [r2, #-0]
    49e8:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    49ec:	77695f68 	strbvc	r5, [r9, -r8, ror #30]!
    49f0:	74786d6d 	ldrbtvc	r6, [r8], #-3437	; 0xfffff293
    49f4:	73690032 	cmnvc	r9, #50	; 0x32
    49f8:	756e5f61 	strbvc	r5, [lr, #-3937]!	; 0xfffff09f
    49fc:	69625f6d 	stmdbvs	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    4a00:	54007374 	strpl	r7, [r0], #-884	; 0xfffffc8c
    4a04:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4a08:	50435f54 	subpl	r5, r3, r4, asr pc
    4a0c:	6f635f55 	svcvs	0x00635f55
    4a10:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4a14:	6c70306d 	ldclvs	0, cr3, [r0], #-436	; 0xfffffe4c
    4a18:	6d737375 	ldclvs	3, cr7, [r3, #-468]!	; 0xfffffe2c
    4a1c:	6d6c6c61 	stclvs	12, cr6, [ip, #-388]!	; 0xfffffe7c
    4a20:	69746c75 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
    4a24:	00796c70 	rsbseq	r6, r9, r0, ror ip
    4a28:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4a2c:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4a30:	655f5550 	ldrbvs	r5, [pc, #-1360]	; 44e8 <_gettimeofday+0x1d4>
    4a34:	6f6e7978 	svcvs	0x006e7978
    4a38:	00316d73 	eorseq	r6, r1, r3, ror sp
    4a3c:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4a40:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4a44:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    4a48:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    4a4c:	32357278 	eorscc	r7, r5, #120, 4	; 0x80000007
    4a50:	61736900 	cmnvs	r3, r0, lsl #18
    4a54:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4a58:	6964745f 	stmdbvs	r4!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
    4a5c:	72700076 	rsbsvc	r0, r0, #118	; 0x76
    4a60:	72656665 	rsbvc	r6, r5, #105906176	; 0x6500000
    4a64:	6f656e5f 	svcvs	0x00656e5f
    4a68:	6f665f6e 	svcvs	0x00665f6e
    4a6c:	34365f72 	ldrtcc	r5, [r6], #-3954	; 0xfffff08e
    4a70:	73746962 	cmnvc	r4, #1605632	; 0x188000
    4a74:	61736900 	cmnvs	r3, r0, lsl #18
    4a78:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4a7c:	3170665f 	cmncc	r0, pc, asr r6
    4a80:	6c6d6636 	stclvs	6, cr6, [sp], #-216	; 0xffffff28
    4a84:	52415400 	subpl	r5, r1, #0, 8
    4a88:	5f544547 	svcpl	0x00544547
    4a8c:	5f555043 	svcpl	0x00555043
    4a90:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4a94:	33617865 	cmncc	r1, #6619136	; 0x650000
    4a98:	41540032 	cmpmi	r4, r2, lsr r0
    4a9c:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4aa0:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4aa4:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    4aa8:	61786574 	cmnvs	r8, r4, ror r5
    4aac:	69003533 	stmdbvs	r0, {r0, r1, r4, r5, r8, sl, ip, sp}
    4ab0:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4ab4:	665f7469 	ldrbvs	r7, [pc], -r9, ror #8
    4ab8:	63363170 	teqvs	r6, #112, 2
    4abc:	00766e6f 	rsbseq	r6, r6, pc, ror #28
    4ac0:	70736e75 	rsbsvc	r6, r3, r5, ror lr
    4ac4:	5f766365 	svcpl	0x00766365
    4ac8:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    4acc:	0073676e 	rsbseq	r6, r3, lr, ror #14
    4ad0:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4ad4:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4ad8:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    4adc:	31316d72 	teqcc	r1, r2, ror sp
    4ae0:	32743635 	rsbscc	r3, r4, #55574528	; 0x3500000
    4ae4:	41540073 	cmpmi	r4, r3, ror r0
    4ae8:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4aec:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4af0:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    4af4:	61786574 	cmnvs	r8, r4, ror r5
    4af8:	6f633537 	svcvs	0x00633537
    4afc:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4b00:	00353561 	eorseq	r3, r5, r1, ror #10
    4b04:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4b08:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4b0c:	665f5550 			; <UNDEFINED> instruction: 0x665f5550
    4b10:	36303661 	ldrtcc	r3, [r0], -r1, ror #12
    4b14:	54006574 	strpl	r6, [r0], #-1396	; 0xfffffa8c
    4b18:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4b1c:	50435f54 	subpl	r5, r3, r4, asr pc
    4b20:	72615f55 	rsbvc	r5, r1, #340	; 0x154
    4b24:	3632396d 	ldrtcc	r3, [r2], -sp, ror #18
    4b28:	00736a65 	rsbseq	r6, r3, r5, ror #20
    4b2c:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    4b30:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    4b34:	54345f48 	ldrtpl	r5, [r4], #-3912	; 0xfffff0b8
    4b38:	61736900 	cmnvs	r3, r0, lsl #18
    4b3c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4b40:	7972635f 	ldmdbvc	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sp, lr}^
    4b44:	006f7470 	rsbeq	r7, pc, r0, ror r4	; <UNPREDICTABLE>
    4b48:	5f6d7261 	svcpl	0x006d7261
    4b4c:	73676572 	cmnvc	r7, #478150656	; 0x1c800000
    4b50:	5f6e695f 	svcpl	0x006e695f
    4b54:	75716573 	ldrbvc	r6, [r1, #-1395]!	; 0xfffffa8d
    4b58:	65636e65 	strbvs	r6, [r3, #-3685]!	; 0xfffff19b
    4b5c:	61736900 	cmnvs	r3, r0, lsl #18
    4b60:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4b64:	0062735f 	rsbeq	r7, r2, pc, asr r3
    4b68:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    4b6c:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    4b70:	54355f48 	ldrtpl	r5, [r5], #-3912	; 0xfffff0b8
    4b74:	73690045 	cmnvc	r9, #69	; 0x45
    4b78:	65665f61 	strbvs	r5, [r6, #-3937]!	; 0xfffff09f
    4b7c:	72757461 	rsbsvc	r7, r5, #1627389952	; 0x61000000
    4b80:	73690065 	cmnvc	r9, #101	; 0x65
    4b84:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    4b88:	6d735f74 	ldclvs	15, cr5, [r3, #-464]!	; 0xfffffe30
    4b8c:	6d6c6c61 	stclvs	12, cr6, [ip, #-388]!	; 0xfffffe7c
    4b90:	61006c75 	tstvs	r0, r5, ror ip
    4b94:	6c5f6d72 	mrrcvs	13, 7, r6, pc, cr2	; <UNPREDICTABLE>
    4b98:	5f676e61 	svcpl	0x00676e61
    4b9c:	7074756f 	rsbsvc	r7, r4, pc, ror #10
    4ba0:	6f5f7475 	svcvs	0x005f7475
    4ba4:	63656a62 	cmnvs	r5, #401408	; 0x62000
    4ba8:	74615f74 	strbtvc	r5, [r1], #-3956	; 0xfffff08c
    4bac:	62697274 	rsbvs	r7, r9, #116, 4	; 0x40000007
    4bb0:	73657475 	cmnvc	r5, #1962934272	; 0x75000000
    4bb4:	6f6f685f 	svcvs	0x006f685f
    4bb8:	7369006b 	cmnvc	r9, #107	; 0x6b
    4bbc:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    4bc0:	70665f74 	rsbvc	r5, r6, r4, ror pc
    4bc4:	3233645f 	eorscc	r6, r3, #1593835520	; 0x5f000000
    4bc8:	4d524100 	ldfmie	f4, [r2, #-0]
    4bcc:	00454e5f 	subeq	r4, r5, pc, asr lr
    4bd0:	5f617369 	svcpl	0x00617369
    4bd4:	5f746962 	svcpl	0x00746962
    4bd8:	00386562 	eorseq	r6, r8, r2, ror #10
    4bdc:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4be0:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4be4:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    4be8:	31316d72 	teqcc	r1, r2, ror sp
    4bec:	7a6a3637 	bvc	1a924d0 <__ccfg+0x1a72528>
    4bf0:	72700073 	rsbsvc	r0, r0, #115	; 0x73
    4bf4:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
    4bf8:	5f726f73 	svcpl	0x00726f73
    4bfc:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    4c00:	6c6c6100 	stfvse	f6, [ip], #-0
    4c04:	7570665f 	ldrbvc	r6, [r0, #-1631]!	; 0xfffff9a1
    4c08:	72610073 	rsbvc	r0, r1, #115	; 0x73
    4c0c:	63705f6d 	cmnvs	r0, #436	; 0x1b4
    4c10:	41420073 	hvcmi	8195	; 0x2003
    4c14:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    4c18:	5f484352 	svcpl	0x00484352
    4c1c:	61005435 	tstvs	r0, r5, lsr r4
    4c20:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    4c24:	34686372 	strbtcc	r6, [r8], #-882	; 0xfffffc8e
    4c28:	41540074 	cmpmi	r4, r4, ror r0
    4c2c:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4c30:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4c34:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    4c38:	61786574 	cmnvs	r8, r4, ror r5
    4c3c:	6f633637 	svcvs	0x00633637
    4c40:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4c44:	00353561 	eorseq	r3, r5, r1, ror #10
    4c48:	5f6d7261 	svcpl	0x006d7261
    4c4c:	656e7574 	strbvs	r7, [lr, #-1396]!	; 0xfffffa8c
    4c50:	7562775f 	strbvc	r7, [r2, #-1887]!	; 0xfffff8a1
    4c54:	74680066 	strbtvc	r0, [r8], #-102	; 0xffffff9a
    4c58:	685f6261 	ldmdavs	pc, {r0, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
    4c5c:	00687361 	rsbeq	r7, r8, r1, ror #6
    4c60:	5f617369 	svcpl	0x00617369
    4c64:	5f746962 	svcpl	0x00746962
    4c68:	72697571 	rsbvc	r7, r9, #473956352	; 0x1c400000
    4c6c:	6f6e5f6b 	svcvs	0x006e5f6b
    4c70:	6c6f765f 	stclvs	6, cr7, [pc], #-380	; 4afc <patchGenfskRfe+0x3d8>
    4c74:	6c697461 	cfstrdvs	mvd7, [r9], #-388	; 0xfffffe7c
    4c78:	65635f65 	strbvs	r5, [r3, #-3941]!	; 0xfffff09b
    4c7c:	52415400 	subpl	r5, r1, #0, 8
    4c80:	5f544547 	svcpl	0x00544547
    4c84:	5f555043 	svcpl	0x00555043
    4c88:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4c8c:	306d7865 	rsbcc	r7, sp, r5, ror #16
    4c90:	52415400 	subpl	r5, r1, #0, 8
    4c94:	5f544547 	svcpl	0x00544547
    4c98:	5f555043 	svcpl	0x00555043
    4c9c:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4ca0:	316d7865 	cmncc	sp, r5, ror #16
    4ca4:	52415400 	subpl	r5, r1, #0, 8
    4ca8:	5f544547 	svcpl	0x00544547
    4cac:	5f555043 	svcpl	0x00555043
    4cb0:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4cb4:	336d7865 	cmncc	sp, #6619136	; 0x650000
    4cb8:	61736900 	cmnvs	r3, r0, lsl #18
    4cbc:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4cc0:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4cc4:	315f3876 	cmpcc	pc, r6, ror r8	; <UNPREDICTABLE>
    4cc8:	6d726100 	ldfvse	f6, [r2, #-0]
    4ccc:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    4cd0:	616e5f68 	cmnvs	lr, r8, ror #30
    4cd4:	6900656d 	stmdbvs	r0, {r0, r2, r3, r5, r6, r8, sl, sp, lr}
    4cd8:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4cdc:	615f7469 	cmpvs	pc, r9, ror #8
    4ce0:	38766d72 	ldmdacc	r6!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    4ce4:	6900335f 	stmdbvs	r0, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp}
    4ce8:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4cec:	615f7469 	cmpvs	pc, r9, ror #8
    4cf0:	38766d72 	ldmdacc	r6!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    4cf4:	6900345f 	stmdbvs	r0, {r0, r1, r2, r3, r4, r6, sl, ip, sp}
    4cf8:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4cfc:	615f7469 	cmpvs	pc, r9, ror #8
    4d00:	38766d72 	ldmdacc	r6!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    4d04:	5400355f 	strpl	r3, [r0], #-1375	; 0xfffffaa1
    4d08:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4d0c:	50435f54 	subpl	r5, r3, r4, asr pc
    4d10:	6f635f55 	svcvs	0x00635f55
    4d14:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4d18:	00333561 	eorseq	r3, r3, r1, ror #10
    4d1c:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4d20:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4d24:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    4d28:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    4d2c:	35356178 	ldrcc	r6, [r5, #-376]!	; 0xfffffe88
    4d30:	52415400 	subpl	r5, r1, #0, 8
    4d34:	5f544547 	svcpl	0x00544547
    4d38:	5f555043 	svcpl	0x00555043
    4d3c:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4d40:	35617865 	strbcc	r7, [r1, #-2149]!	; 0xfffff79b
    4d44:	41540037 	cmpmi	r4, r7, lsr r0
    4d48:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4d4c:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4d50:	63706d5f 	cmnvs	r0, #6080	; 0x17c0
    4d54:	0065726f 	rsbeq	r7, r5, pc, ror #4
    4d58:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4d5c:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4d60:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    4d64:	6e5f6d72 	mrcvs	13, 2, r6, cr15, cr2, {3}
    4d68:	00656e6f 	rsbeq	r6, r5, pc, ror #28
    4d6c:	5f6d7261 	svcpl	0x006d7261
    4d70:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    4d74:	746f6e5f 	strbtvc	r6, [pc], #-3679	; 4d7c <patchGenfskRfe+0x658>
    4d78:	4154006d 	cmpmi	r4, sp, rrx
    4d7c:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4d80:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4d84:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4d88:	36323031 			; <UNDEFINED> instruction: 0x36323031
    4d8c:	00736a65 	rsbseq	r6, r3, r5, ror #20
    4d90:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    4d94:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    4d98:	4a365f48 	bmi	d9cac0 <__ccfg+0xd7cb18>
    4d9c:	53414200 	movtpl	r4, #4608	; 0x1200
    4da0:	52415f45 	subpl	r5, r1, #276	; 0x114
    4da4:	365f4843 	ldrbcc	r4, [pc], -r3, asr #16
    4da8:	4142004b 	cmpmi	r2, fp, asr #32
    4dac:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    4db0:	5f484352 	svcpl	0x00484352
    4db4:	69004d36 	stmdbvs	r0, {r1, r2, r4, r5, r8, sl, fp, lr}
    4db8:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4dbc:	695f7469 	ldmdbvs	pc, {r0, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    4dc0:	786d6d77 	stmdavc	sp!, {r0, r1, r2, r4, r5, r6, r8, sl, fp, sp, lr}^
    4dc4:	41540074 	cmpmi	r4, r4, ror r0
    4dc8:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4dcc:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4dd0:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4dd4:	36333131 			; <UNDEFINED> instruction: 0x36333131
    4dd8:	0073666a 	rsbseq	r6, r3, sl, ror #12
    4ddc:	5f4d5241 	svcpl	0x004d5241
    4de0:	4100534c 	tstmi	r0, ip, asr #6
    4de4:	4c5f4d52 	mrrcmi	13, 5, r4, pc, cr2	; <UNPREDICTABLE>
    4de8:	41420054 	qdaddmi	r0, r4, r2
    4dec:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    4df0:	5f484352 	svcpl	0x00484352
    4df4:	41005a36 	tstmi	r0, r6, lsr sl
    4df8:	505f4d52 	subspl	r4, pc, r2, asr sp	; <UNPREDICTABLE>
    4dfc:	415f5343 	cmpmi	pc, r3, asr #6
    4e00:	53435041 	movtpl	r5, #12353	; 0x3041
    4e04:	5046565f 	subpl	r5, r6, pc, asr r6
    4e08:	52415400 	subpl	r5, r1, #0, 8
    4e0c:	5f544547 	svcpl	0x00544547
    4e10:	5f555043 	svcpl	0x00555043
    4e14:	6d6d7769 	stclvs	7, cr7, [sp, #-420]!	; 0xfffffe5c
    4e18:	00327478 	eorseq	r7, r2, r8, ror r4
    4e1c:	5f617369 	svcpl	0x00617369
    4e20:	5f746962 	svcpl	0x00746962
    4e24:	6e6f656e 	cdpvs	5, 6, cr6, cr15, cr14, {3}
    4e28:	6d726100 	ldfvse	f6, [r2, #-0]
    4e2c:	7570665f 	ldrbvc	r6, [r0, #-1631]!	; 0xfffff9a1
    4e30:	7474615f 	ldrbtvc	r6, [r4], #-351	; 0xfffffea1
    4e34:	73690072 	cmnvc	r9, #114	; 0x72
    4e38:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    4e3c:	72615f74 	rsbvc	r5, r1, #116, 30	; 0x1d0
    4e40:	6537766d 	ldrvs	r7, [r7, #-1645]!	; 0xfffff993
    4e44:	4154006d 	cmpmi	r4, sp, rrx
    4e48:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4e4c:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4e50:	3661665f 			; <UNDEFINED> instruction: 0x3661665f
    4e54:	65743632 	ldrbvs	r3, [r4, #-1586]!	; 0xfffff9ce
    4e58:	52415400 	subpl	r5, r1, #0, 8
    4e5c:	5f544547 	svcpl	0x00544547
    4e60:	5f555043 	svcpl	0x00555043
    4e64:	7672616d 	ldrbtvc	r6, [r2], -sp, ror #2
    4e68:	5f6c6c65 	svcpl	0x006c6c65
    4e6c:	00346a70 	eorseq	r6, r4, r0, ror sl
    4e70:	62617468 	rsbvs	r7, r1, #104, 8	; 0x68000000
    4e74:	7361685f 	cmnvc	r1, #6225920	; 0x5f0000
    4e78:	6f705f68 	svcvs	0x00705f68
    4e7c:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
    4e80:	72610072 	rsbvc	r0, r1, #114	; 0x72
    4e84:	75745f6d 	ldrbvc	r5, [r4, #-3949]!	; 0xfffff093
    4e88:	635f656e 	cmpvs	pc, #461373440	; 0x1b800000
    4e8c:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    4e90:	39615f78 	stmdbcc	r1!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    4e94:	61736900 	cmnvs	r3, r0, lsl #18
    4e98:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4e9c:	6d77695f 			; <UNDEFINED> instruction: 0x6d77695f
    4ea0:	3274786d 	rsbscc	r7, r4, #7143424	; 0x6d0000
    4ea4:	52415400 	subpl	r5, r1, #0, 8
    4ea8:	5f544547 	svcpl	0x00544547
    4eac:	5f555043 	svcpl	0x00555043
    4eb0:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4eb4:	37617865 	strbcc	r7, [r1, -r5, ror #16]!
    4eb8:	726f6332 	rsbvc	r6, pc, #-939524096	; 0xc8000000
    4ebc:	61786574 	cmnvs	r8, r4, ror r5
    4ec0:	69003335 	stmdbvs	r0, {r0, r2, r4, r5, r8, r9, ip, sp}
    4ec4:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4ec8:	745f7469 	ldrbvc	r7, [pc], #-1129	; 4ed0 <patchImageGenfsk+0xf8>
    4ecc:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
    4ed0:	41420032 	cmpmi	r2, r2, lsr r0
    4ed4:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    4ed8:	5f484352 	svcpl	0x00484352
    4edc:	69004137 	stmdbvs	r0, {r0, r1, r2, r4, r5, r8, lr}
    4ee0:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4ee4:	645f7469 	ldrbvs	r7, [pc], #-1129	; 4eec <patchImageGenfsk+0x114>
    4ee8:	7270746f 	rsbsvc	r7, r0, #1862270976	; 0x6f000000
    4eec:	6100646f 	tstvs	r0, pc, ror #8
    4ef0:	665f6d72 			; <UNDEFINED> instruction: 0x665f6d72
    4ef4:	5f363170 	svcpl	0x00363170
    4ef8:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    4efc:	646f6e5f 	strbtvs	r6, [pc], #-3679	; 4f04 <patchImageGenfsk+0x12c>
    4f00:	52410065 	subpl	r0, r1, #101	; 0x65
    4f04:	494d5f4d 	stmdbmi	sp, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    4f08:	6d726100 	ldfvse	f6, [r2, #-0]
    4f0c:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    4f10:	006b3668 	rsbeq	r3, fp, r8, ror #12
    4f14:	5f6d7261 	svcpl	0x006d7261
    4f18:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    4f1c:	42006d36 	andmi	r6, r0, #3456	; 0xd80
    4f20:	5f455341 	svcpl	0x00455341
    4f24:	48435241 	stmdami	r3, {r0, r6, r9, ip, lr}^
    4f28:	0052375f 	subseq	r3, r2, pc, asr r7
    4f2c:	6f705f5f 	svcvs	0x00705f5f
    4f30:	756f6370 	strbvc	r6, [pc, #-880]!	; 4bc8 <patchGenfskRfe+0x4a4>
    4f34:	745f746e 	ldrbvc	r7, [pc], #-1134	; 4f3c <patchImageGenfsk+0x164>
    4f38:	2f006261 	svccs	0x00006261
    4f3c:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    4f40:	63672f64 	cmnvs	r7, #100, 30	; 0x190
    4f44:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    4f48:	6f6e2d6d 	svcvs	0x006e2d6d
    4f4c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    4f50:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    4f54:	6b396c47 	blvs	e60078 <__ccfg+0xe400d0>
    4f58:	672f3954 			; <UNDEFINED> instruction: 0x672f3954
    4f5c:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    4f60:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    4f64:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    4f68:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    4f6c:	322d392d 	eorcc	r3, sp, #737280	; 0xb4000
    4f70:	2d393130 	ldfcss	f3, [r9, #-192]!	; 0xffffff40
    4f74:	622f3471 	eorvs	r3, pc, #1895825408	; 0x71000000
    4f78:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    4f7c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    4f80:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    4f84:	61652d65 	cmnvs	r5, r5, ror #26
    4f88:	742f6962 	strtvc	r6, [pc], #-2402	; 4f90 <patchImageGenfsk+0x1b8>
    4f8c:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
    4f90:	666f6e2f 	strbtvs	r6, [pc], -pc, lsr #28
    4f94:	696c2f70 	stmdbvs	ip!, {r4, r5, r6, r8, r9, sl, fp, sp}^
    4f98:	63636762 	cmnvs	r3, #25690112	; 0x1880000
    4f9c:	61736900 	cmnvs	r3, r0, lsl #18
    4fa0:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4fa4:	736d635f 	cmnvc	sp, #2080374785	; 0x7c000001
    4fa8:	41540065 	cmpmi	r4, r5, rrx
    4fac:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4fb0:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4fb4:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    4fb8:	61786574 	cmnvs	r8, r4, ror r5
    4fbc:	54003337 	strpl	r3, [r0], #-823	; 0xfffffcc9
    4fc0:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4fc4:	50435f54 	subpl	r5, r3, r4, asr pc
    4fc8:	65675f55 	strbvs	r5, [r7, #-3925]!	; 0xfffff0ab
    4fcc:	6972656e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
    4fd0:	61377663 	teqvs	r7, r3, ror #12
    4fd4:	52415400 	subpl	r5, r1, #0, 8
    4fd8:	5f544547 	svcpl	0x00544547
    4fdc:	5f555043 	svcpl	0x00555043
    4fe0:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4fe4:	37617865 	strbcc	r7, [r1, -r5, ror #16]!
    4fe8:	72610036 	rsbvc	r0, r1, #54	; 0x36
    4fec:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    4ff0:	6e5f6863 	cdpvs	8, 5, cr6, cr15, cr3, {3}
    4ff4:	6f765f6f 	svcvs	0x00765f6f
    4ff8:	6974616c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, sp, lr}^
    4ffc:	635f656c 	cmpvs	pc, #108, 10	; 0x1b000000
    5000:	41420065 	cmpmi	r2, r5, rrx
    5004:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    5008:	5f484352 	svcpl	0x00484352
    500c:	69004138 	stmdbvs	r0, {r3, r4, r5, r8, lr}
    5010:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    5014:	615f7469 	cmpvs	pc, r9, ror #8
    5018:	35766d72 	ldrbcc	r6, [r6, #-3442]!	; 0xfffff28e
    501c:	41420074 	hvcmi	8196	; 0x2004
    5020:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    5024:	5f484352 	svcpl	0x00484352
    5028:	54005238 	strpl	r5, [r0], #-568	; 0xfffffdc8
    502c:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    5030:	50435f54 	subpl	r5, r3, r4, asr pc
    5034:	6f635f55 	svcvs	0x00635f55
    5038:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    503c:	63333761 	teqvs	r3, #25427968	; 0x1840000
    5040:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    5044:	35336178 	ldrcc	r6, [r3, #-376]!	; 0xfffffe88
    5048:	4d524100 	ldfmie	f4, [r2, #-0]
    504c:	00564e5f 	subseq	r4, r6, pc, asr lr
    5050:	5f6d7261 	svcpl	0x006d7261
    5054:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    5058:	72610034 	rsbvc	r0, r1, #52	; 0x34
    505c:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    5060:	00366863 	eorseq	r6, r6, r3, ror #16
    5064:	5f6d7261 	svcpl	0x006d7261
    5068:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    506c:	72610037 	rsbvc	r0, r1, #55	; 0x37
    5070:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    5074:	00386863 	eorseq	r6, r8, r3, ror #16
    5078:	79744944 	ldmdbvc	r4!, {r2, r6, r8, fp, lr}^
    507c:	61006570 	tstvs	r0, r0, ror r5
    5080:	745f6d72 	ldrbvc	r6, [pc], #-3442	; 5088 <plug_null>
    5084:	5f656e75 	svcpl	0x00656e75
    5088:	61637378 	smcvs	14136	; 0x3738
    508c:	4400656c 	strmi	r6, [r0], #-1388	; 0xfffffa94
    5090:	72747357 	rsbsvc	r7, r4, #1543503873	; 0x5c000001
    5094:	00746375 	rsbseq	r6, r4, r5, ror r3
    5098:	696b616d 	stmdbvs	fp!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    509c:	635f676e 	cmpvs	pc, #28835840	; 0x1b80000
    50a0:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
    50a4:	6261745f 	rsbvs	r7, r1, #1593835520	; 0x5f000000
    50a8:	7400656c 	strvc	r6, [r0], #-1388	; 0xfffffa94
    50ac:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
    50b0:	6c61635f 	stclvs	3, cr6, [r1], #-380	; 0xfffffe84
    50b4:	69765f6c 	ldmdbvs	r6!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    50b8:	616c5f61 	cmnvs	ip, r1, ror #30
    50bc:	006c6562 	rsbeq	r6, ip, r2, ror #10
    50c0:	5f617369 	svcpl	0x00617369
    50c4:	5f746962 	svcpl	0x00746962
    50c8:	35767066 	ldrbcc	r7, [r6, #-102]!	; 0xffffff9a
    50cc:	61736900 	cmnvs	r3, r0, lsl #18
    50d0:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    50d4:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    50d8:	006b3676 	rsbeq	r3, fp, r6, ror r6
    50dc:	47524154 			; <UNDEFINED> instruction: 0x47524154
    50e0:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    50e4:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    50e8:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    50ec:	00376178 	eorseq	r6, r7, r8, ror r1
    50f0:	47524154 			; <UNDEFINED> instruction: 0x47524154
    50f4:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    50f8:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    50fc:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    5100:	00386178 	eorseq	r6, r8, r8, ror r1
    5104:	47524154 			; <UNDEFINED> instruction: 0x47524154
    5108:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    510c:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    5110:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    5114:	00396178 	eorseq	r6, r9, r8, ror r1
    5118:	5f4d5241 	svcpl	0x004d5241
    511c:	5f534350 	svcpl	0x00534350
    5120:	53435041 	movtpl	r5, #12353	; 0x3041
    5124:	4d524100 	ldfmie	f4, [r2, #-0]
    5128:	5343505f 	movtpl	r5, #12383	; 0x305f
    512c:	5054415f 	subspl	r4, r4, pc, asr r1
    5130:	63005343 	movwvs	r5, #835	; 0x343
    5134:	6c706d6f 	ldclvs	13, cr6, [r0], #-444	; 0xfffffe44
    5138:	64207865 	strtvs	r7, [r0], #-2149	; 0xfffff79b
    513c:	6c62756f 	cfstr64vs	mvdx7, [r2], #-444	; 0xfffffe44
    5140:	41540065 	cmpmi	r4, r5, rrx
    5144:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    5148:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    514c:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    5150:	61786574 	cmnvs	r8, r4, ror r5
    5154:	6f633337 	svcvs	0x00633337
    5158:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    515c:	00333561 	eorseq	r3, r3, r1, ror #10
    5160:	47524154 			; <UNDEFINED> instruction: 0x47524154
    5164:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    5168:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    516c:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    5170:	70306d78 	eorsvc	r6, r0, r8, ror sp
    5174:	0073756c 	rsbseq	r7, r3, ip, ror #10
    5178:	5f6d7261 	svcpl	0x006d7261
    517c:	69006363 	stmdbvs	r0, {r0, r1, r5, r6, r8, r9, sp, lr}
    5180:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    5184:	785f7469 	ldmdavc	pc, {r0, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    5188:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    518c:	645f0065 	ldrbvs	r0, [pc], #-101	; 5194 <__exidx_end+0xec>
    5190:	5f746e6f 	svcpl	0x00746e6f
    5194:	5f657375 	svcpl	0x00657375
    5198:	65657274 	strbvs	r7, [r5, #-628]!	; 0xfffffd8c
    519c:	7265685f 	rsbvc	r6, r5, #6225920	; 0x5f0000
    51a0:	54005f65 	strpl	r5, [r0], #-3941	; 0xfffff09b
    51a4:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    51a8:	50435f54 	subpl	r5, r3, r4, asr pc
    51ac:	72615f55 	rsbvc	r5, r1, #340	; 0x154
    51b0:	7430316d 	ldrtvc	r3, [r0], #-365	; 0xfffffe93
    51b4:	00696d64 	rsbeq	r6, r9, r4, ror #26
    51b8:	47524154 			; <UNDEFINED> instruction: 0x47524154
    51bc:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    51c0:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    51c4:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    51c8:	00356178 	eorseq	r6, r5, r8, ror r1
    51cc:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0xfffffe9e
    51d0:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    51d4:	65746968 	ldrbvs	r6, [r4, #-2408]!	; 0xfffff698
    51d8:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
    51dc:	72610065 	rsbvc	r0, r1, #101	; 0x65
    51e0:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    51e4:	635f6863 	cmpvs	pc, #6488064	; 0x630000
    51e8:	54006372 	strpl	r6, [r0], #-882	; 0xfffffc8e
    51ec:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    51f0:	50435f54 	subpl	r5, r3, r4, asr pc
    51f4:	6f635f55 	svcvs	0x00635f55
    51f8:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    51fc:	6d73316d 	ldfvse	f3, [r3, #-436]!	; 0xfffffe4c
    5200:	6d6c6c61 	stclvs	12, cr6, [ip, #-388]!	; 0xfffffe7c
    5204:	69746c75 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
    5208:	00796c70 	rsbseq	r6, r9, r0, ror ip
    520c:	5f6d7261 	svcpl	0x006d7261
    5210:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
    5214:	5f746e65 	svcpl	0x00746e65
    5218:	69006363 	stmdbvs	r0, {r0, r1, r5, r6, r8, r9, sp, lr}
    521c:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    5220:	635f7469 	cmpvs	pc, #1761607680	; 0x69000000
    5224:	32336372 	eorscc	r6, r3, #-939524095	; 0xc8000001
    5228:	4d524100 	ldfmie	f4, [r2, #-0]
    522c:	004c505f 	subeq	r5, ip, pc, asr r0
    5230:	5f617369 	svcpl	0x00617369
    5234:	5f746962 	svcpl	0x00746962
    5238:	76706676 			; <UNDEFINED> instruction: 0x76706676
    523c:	73690033 	cmnvc	r9, #51	; 0x33
    5240:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    5244:	66765f74 	uhsub16vs	r5, r6, r4
    5248:	00347670 	eorseq	r7, r4, r0, ror r6
    524c:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    5250:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    5254:	54365f48 	ldrtpl	r5, [r6], #-3912	; 0xfffff0b8
    5258:	41420032 	cmpmi	r2, r2, lsr r0
    525c:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    5260:	5f484352 	svcpl	0x00484352
    5264:	4d5f4d38 	ldclmi	13, cr4, [pc, #-224]	; 518c <__exidx_end+0xe4>
    5268:	004e4941 	subeq	r4, lr, r1, asr #18
    526c:	47524154 			; <UNDEFINED> instruction: 0x47524154
    5270:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    5274:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    5278:	74396d72 	ldrtvc	r6, [r9], #-3442	; 0xfffff28e
    527c:	00696d64 	rsbeq	r6, r9, r4, ror #26
    5280:	5f4d5241 	svcpl	0x004d5241
    5284:	42004c41 	andmi	r4, r0, #16640	; 0x4100
    5288:	5f455341 	svcpl	0x00455341
    528c:	48435241 	stmdami	r3, {r0, r6, r9, ip, lr}^
    5290:	004d375f 	subeq	r3, sp, pc, asr r7
    5294:	5f6d7261 	svcpl	0x006d7261
    5298:	67726174 			; <UNDEFINED> instruction: 0x67726174
    529c:	6c5f7465 	cfldrdvs	mvd7, [pc], {101}	; 0x65
    52a0:	6c656261 	sfmvs	f6, 2, [r5], #-388	; 0xfffffe7c
    52a4:	6d726100 	ldfvse	f6, [r2, #-0]
    52a8:	7261745f 	rsbvc	r7, r1, #1593835520	; 0x5f000000
    52ac:	5f746567 	svcpl	0x00746567
    52b0:	6e736e69 	cdpvs	14, 7, cr6, cr3, cr9, {3}
    52b4:	52415400 	subpl	r5, r1, #0, 8
    52b8:	5f544547 	svcpl	0x00544547
    52bc:	5f555043 	svcpl	0x00555043
    52c0:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    52c4:	35727865 	ldrbcc	r7, [r2, #-2149]!	; 0xfffff79b
    52c8:	52415400 	subpl	r5, r1, #0, 8
    52cc:	5f544547 	svcpl	0x00544547
    52d0:	5f555043 	svcpl	0x00555043
    52d4:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    52d8:	37727865 	ldrbcc	r7, [r2, -r5, ror #16]!
    52dc:	52415400 	subpl	r5, r1, #0, 8
    52e0:	5f544547 	svcpl	0x00544547
    52e4:	5f555043 	svcpl	0x00555043
    52e8:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    52ec:	38727865 	ldmdacc	r2!, {r0, r2, r5, r6, fp, ip, sp, lr}^
    52f0:	61736900 	cmnvs	r3, r0, lsl #18
    52f4:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    52f8:	61706c5f 	cmnvs	r0, pc, asr ip
    52fc:	73690065 	cmnvc	r9, #101	; 0x65
    5300:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    5304:	75715f74 	ldrbvc	r5, [r1, #-3956]!	; 0xfffff08c
    5308:	5f6b7269 	svcpl	0x006b7269
    530c:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
    5310:	007a6b36 	rsbseq	r6, sl, r6, lsr fp
    5314:	5f617369 	svcpl	0x00617369
    5318:	5f746962 	svcpl	0x00746962
    531c:	6d746f6e 	ldclvs	15, cr6, [r4, #-440]!	; 0xfffffe48
    5320:	61736900 	cmnvs	r3, r0, lsl #18
    5324:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    5328:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    532c:	69003476 	stmdbvs	r0, {r1, r2, r4, r5, r6, sl, ip, sp}
    5330:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    5334:	615f7469 	cmpvs	pc, r9, ror #8
    5338:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
    533c:	61736900 	cmnvs	r3, r0, lsl #18
    5340:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    5344:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    5348:	69003776 	stmdbvs	r0, {r1, r2, r4, r5, r6, r8, r9, sl, ip, sp}
    534c:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    5350:	615f7469 	cmpvs	pc, r9, ror #8
    5354:	38766d72 	ldmdacc	r6!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    5358:	6f645f00 	svcvs	0x00645f00
    535c:	755f746e 	ldrbvc	r7, [pc, #-1134]	; 4ef6 <patchImageGenfsk+0x11e>
    5360:	725f6573 	subsvc	r6, pc, #482344960	; 0x1cc00000
    5364:	685f7874 	ldmdavs	pc, {r2, r4, r5, r6, fp, ip, sp, lr}^	; <UNPREDICTABLE>
    5368:	5f657265 	svcpl	0x00657265
    536c:	49515500 	ldmdbmi	r1, {r8, sl, ip, lr}^
    5370:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    5374:	61736900 	cmnvs	r3, r0, lsl #18
    5378:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    537c:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    5380:	65743576 	ldrbvs	r3, [r4, #-1398]!	; 0xfffffa8a
    5384:	6d726100 	ldfvse	f6, [r2, #-0]
    5388:	6e75745f 	mrcvs	4, 3, r7, cr5, cr15, {2}
    538c:	72610065 	rsbvc	r0, r1, #101	; 0x65
    5390:	70635f6d 	rsbvc	r5, r3, sp, ror #30
    5394:	6e695f70 	mcrvs	15, 3, r5, cr9, cr0, {3}
    5398:	77726574 			; <UNDEFINED> instruction: 0x77726574
    539c:	006b726f 	rsbeq	r7, fp, pc, ror #4
    53a0:	47524154 			; <UNDEFINED> instruction: 0x47524154
    53a4:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    53a8:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    53ac:	32396d72 	eorscc	r6, r9, #7296	; 0x1c80
    53b0:	5f007430 	svcpl	0x00007430
    53b4:	0068755f 	rsbeq	r7, r8, pc, asr r5
    53b8:	62617468 	rsbvs	r7, r1, #104, 8	; 0x68000000
    53bc:	0071655f 	rsbseq	r6, r1, pc, asr r5
    53c0:	47524154 			; <UNDEFINED> instruction: 0x47524154
    53c4:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    53c8:	665f5550 			; <UNDEFINED> instruction: 0x665f5550
    53cc:	36323561 	ldrtcc	r3, [r2], -r1, ror #10
    53d0:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; 44d8 <_gettimeofday+0x1c4>
    53d4:	7261006c 	rsbvc	r0, r1, #108	; 0x6c
    53d8:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    53dc:	745f6863 	ldrbvc	r6, [pc], #-2147	; 53e4 <__exidx_end+0x33c>
    53e0:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
    53e4:	6477685f 	ldrbtvs	r6, [r7], #-2143	; 0xfffff7a1
    53e8:	68007669 	stmdavs	r0, {r0, r3, r5, r6, r9, sl, ip, sp, lr}
    53ec:	5f626174 	svcpl	0x00626174
    53f0:	705f7165 	subsvc	r7, pc, r5, ror #2
    53f4:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
    53f8:	61007265 	tstvs	r0, r5, ror #4
    53fc:	705f6d72 	subsvc	r6, pc, r2, ror sp	; <UNPREDICTABLE>
    5400:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
    5404:	73696765 	cmnvc	r9, #26476544	; 0x1940000
    5408:	00726574 	rsbseq	r6, r2, r4, ror r5
    540c:	47524154 			; <UNDEFINED> instruction: 0x47524154
    5410:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    5414:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    5418:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    541c:	73306d78 	teqvc	r0, #120, 26	; 0x1e00
    5420:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
    5424:	746c756d 	strbtvc	r7, [ip], #-1389	; 0xfffffa93
    5428:	796c7069 	stmdbvc	ip!, {r0, r3, r5, r6, ip, sp, lr}^
    542c:	52415400 	subpl	r5, r1, #0, 8
    5430:	5f544547 	svcpl	0x00544547
    5434:	5f555043 	svcpl	0x00555043
    5438:	6f63706d 	svcvs	0x0063706d
    543c:	6f6e6572 	svcvs	0x006e6572
    5440:	00706676 	rsbseq	r6, r0, r6, ror r6
    5444:	5f617369 	svcpl	0x00617369
    5448:	5f746962 	svcpl	0x00746962
    544c:	72697571 	rsbvc	r7, r9, #473956352	; 0x1c400000
    5450:	6d635f6b 	stclvs	15, cr5, [r3, #-428]!	; 0xfffffe54
    5454:	646c5f33 	strbtvs	r5, [ip], #-3891	; 0xfffff0cd
    5458:	41006472 	tstmi	r0, r2, ror r4
    545c:	435f4d52 	cmpmi	pc, #5248	; 0x1480
    5460:	72610043 	rsbvc	r0, r1, #67	; 0x43
    5464:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    5468:	5f386863 	svcpl	0x00386863
    546c:	72610032 	rsbvc	r0, r1, #50	; 0x32
    5470:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    5474:	5f386863 	svcpl	0x00386863
    5478:	72610033 	rsbvc	r0, r1, #51	; 0x33
    547c:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    5480:	5f386863 	svcpl	0x00386863
    5484:	41540034 	cmpmi	r4, r4, lsr r0
    5488:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    548c:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    5490:	706d665f 	rsbvc	r6, sp, pc, asr r6
    5494:	00363236 	eorseq	r3, r6, r6, lsr r2
    5498:	5f4d5241 	svcpl	0x004d5241
    549c:	61005343 	tstvs	r0, r3, asr #6
    54a0:	665f6d72 			; <UNDEFINED> instruction: 0x665f6d72
    54a4:	5f363170 	svcpl	0x00363170
    54a8:	74736e69 	ldrbtvc	r6, [r3], #-3689	; 0xfffff197
    54ac:	765f5f00 	ldrbvc	r5, [pc], -r0, lsl #30
    54b0:	72610068 	rsbvc	r0, r1, #104	; 0x68
    54b4:	61625f6d 	cmnvs	r2, sp, ror #30
    54b8:	615f6573 	cmpvs	pc, r3, ror r5	; <UNPREDICTABLE>
    54bc:	00686372 	rsbeq	r6, r8, r2, ror r3
    54c0:	6c765f5f 	ldclvs	15, cr5, [r6], #-380	; 0xfffffe84
    54c4:	52415400 	subpl	r5, r1, #0, 8
    54c8:	5f544547 	svcpl	0x00544547
    54cc:	5f555043 	svcpl	0x00555043
    54d0:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    54d4:	34727865 	ldrbtcc	r7, [r2], #-2149	; 0xfffff79b
    54d8:	52415400 	subpl	r5, r1, #0, 8
    54dc:	5f544547 	svcpl	0x00544547
    54e0:	5f555043 	svcpl	0x00555043
    54e4:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    54e8:	31617865 	cmncc	r1, r5, ror #16
    54ec:	726f6335 	rsbvc	r6, pc, #-738197504	; 0xd4000000
    54f0:	61786574 	cmnvs	r8, r4, ror r5
    54f4:	72610037 	rsbvc	r0, r1, #55	; 0x37
    54f8:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    54fc:	65376863 	ldrvs	r6, [r7, #-2147]!	; 0xfffff79d
    5500:	4154006d 	cmpmi	r4, sp, rrx
    5504:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    5508:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    550c:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    5510:	61786574 	cmnvs	r8, r4, ror r5
    5514:	61003237 	tstvs	r0, r7, lsr r2
    5518:	705f6d72 	subsvc	r6, pc, r2, ror sp	; <UNPREDICTABLE>
    551c:	645f7363 	ldrbvs	r7, [pc], #-867	; 5524 <__exidx_end+0x47c>
    5520:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    5524:	4100746c 	tstmi	r0, ip, ror #8
    5528:	505f4d52 	subspl	r4, pc, r2, asr sp	; <UNPREDICTABLE>
    552c:	415f5343 	cmpmi	pc, r3, asr #6
    5530:	53435041 	movtpl	r5, #12353	; 0x3041
    5534:	434f4c5f 	movtmi	r4, #64607	; 0xfc5f
    5538:	54004c41 	strpl	r4, [r0], #-3137	; 0xfffff3bf
    553c:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    5540:	50435f54 	subpl	r5, r3, r4, asr pc
    5544:	6f635f55 	svcvs	0x00635f55
    5548:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    554c:	00353761 	eorseq	r3, r5, r1, ror #14
    5550:	47524154 			; <UNDEFINED> instruction: 0x47524154
    5554:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    5558:	735f5550 	cmpvc	pc, #80, 10	; 0x14000000
    555c:	6e6f7274 	mcrvs	2, 3, r7, cr15, cr4, {3}
    5560:	6d726167 	ldfvse	f6, [r2, #-412]!	; 0xfffffe64
    5564:	6d726100 	ldfvse	f6, [r2, #-0]
    5568:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    556c:	68745f68 	ldmdavs	r4!, {r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    5570:	31626d75 	smccc	9941	; 0x26d5
    5574:	6d726100 	ldfvse	f6, [r2, #-0]
    5578:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    557c:	68745f68 	ldmdavs	r4!, {r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    5580:	32626d75 	rsbcc	r6, r2, #7488	; 0x1d40
    5584:	52415400 	subpl	r5, r1, #0, 8
    5588:	5f544547 	svcpl	0x00544547
    558c:	5f555043 	svcpl	0x00555043
    5590:	6d6d7769 	stclvs	7, cr7, [sp, #-420]!	; 0xfffffe5c
    5594:	61007478 	tstvs	r0, r8, ror r4
    5598:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    559c:	35686372 	strbcc	r6, [r8, #-882]!	; 0xfffffc8e
    55a0:	5f5f0074 	svcpl	0x005f0074
    55a4:	5f003078 	svcpl	0x00003078
    55a8:	0031785f 	eorseq	r7, r1, pc, asr r8
    55ac:	32785f5f 	rsbscc	r5, r8, #380	; 0x17c
    55b0:	785f5f00 	ldmdavc	pc, {r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
    55b4:	73690033 	cmnvc	r9, #51	; 0x33
    55b8:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    55bc:	706d5f74 	rsbvc	r5, sp, r4, ror pc
    55c0:	6d726100 	ldfvse	f6, [r2, #-0]
    55c4:	5f646c5f 	svcpl	0x00646c5f
    55c8:	65686373 	strbvs	r6, [r8, #-883]!	; 0xfffffc8d
    55cc:	72610064 	rsbvc	r0, r1, #100	; 0x64
    55d0:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    55d4:	5f386863 	svcpl	0x00386863
    55d8:	622f0031 	eorvs	r0, pc, #49	; 0x31
    55dc:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    55e0:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    55e4:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    55e8:	45565643 	ldrbmi	r5, [r6, #-1603]	; 0xfffff9bd
    55ec:	6e2f7879 	mcrvs	8, 1, r7, cr15, cr9, {3}
    55f0:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    55f4:	2e332d62 	cdpcs	13, 3, cr2, cr3, cr2, {3}
    55f8:	2f302e33 	svccs	0x00302e33
    55fc:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    5600:	72612f64 	rsbvc	r2, r1, #100, 30	; 0x190
    5604:	6f6e2d6d 	svcvs	0x006e2d6d
    5608:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    560c:	2f696261 	svccs	0x00696261
    5610:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    5614:	6f6e2f62 	svcvs	0x006e2f62
    5618:	6c2f7066 	stcvs	0, cr7, [pc], #-408	; 5488 <__exidx_end+0x3e0>
    561c:	6c676269 	sfmvs	f6, 2, [r7], #-420	; 0xfffffe5c
    5620:	2f73736f 	svccs	0x0073736f
    5624:	6e62696c 	vnmulvs.f16	s13, s4, s25	; <UNPREDICTABLE>
    5628:	7379736f 	cmnvc	r9, #-1140850687	; 0xbc000001
    562c:	79735f00 	ldmdbvc	r3!, {r8, r9, sl, fp, ip, lr}^
    5630:	72655f73 	rsbvc	r5, r5, #460	; 0x1cc
    5634:	73696c72 	cmnvc	r9, #29184	; 0x7200
    5638:	4e470074 	mcrmi	0, 2, r0, cr7, cr4, {3}
    563c:	31432055 	qdaddcc	r2, r5, r3
    5640:	2e382037 	mrccs	0, 1, r2, cr8, cr7, {1}
    5644:	20312e33 	eorscs	r2, r1, r3, lsr lr
    5648:	39313032 	ldmdbcc	r1!, {r1, r4, r5, ip, sp}
    564c:	33303730 	teqcc	r0, #48, 14	; 0xc00000
    5650:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
    5654:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
    5658:	5b202965 	blpl	80fbf4 <__ccfg+0x7efc4c>
    565c:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    5660:	72622d38 	rsbvc	r2, r2, #56, 26	; 0xe00
    5664:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
    5668:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
    566c:	6f697369 	svcvs	0x00697369
    5670:	3732206e 	ldrcc	r2, [r2, -lr, rrx]!
    5674:	37323033 			; <UNDEFINED> instruction: 0x37323033
    5678:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
    567c:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    5680:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
    5684:	616f6c66 	cmnvs	pc, r6, ror #24
    5688:	62612d74 	rsbvs	r2, r1, #116, 26	; 0x1d00
    568c:	6f733d69 	svcvs	0x00733d69
    5690:	2d207466 	cfstrscs	mvf7, [r0, #-408]!	; 0xfffffe68
    5694:	7570636d 	ldrbvc	r6, [r0, #-877]!	; 0xfffffc93
    5698:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
    569c:	6d647437 	cfstrdvs	mvd7, [r4, #-220]!	; 0xffffff24
    56a0:	6d2d2069 	stcvs	0, cr2, [sp, #-420]!	; 0xfffffe5c
    56a4:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    56a8:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
    56ac:	20743476 	rsbscs	r3, r4, r6, ror r4
    56b0:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
    56b4:	4f2d2067 	svcmi	0x002d2067
    56b8:	4f2d2032 	svcmi	0x002d2032
    56bc:	4f2d2032 	svcmi	0x002d2032
    56c0:	735f0032 	cmpvc	pc, #50	; 0x32
    56c4:	6e5f7379 	mrcvs	3, 2, r7, cr15, cr9, {3}
    56c8:	00727265 	rsbseq	r7, r2, r5, ror #4
    56cc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    56d0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    56d4:	2f2e2e2f 	svccs	0x002e2e2f
    56d8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    56dc:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
    56e0:	6f6c6762 	svcvs	0x006c6762
    56e4:	6c2f7373 	stcvs	3, cr7, [pc], #-460	; 5520 <__exidx_end+0x478>
    56e8:	6f6e6269 	svcvs	0x006e6269
    56ec:	2f737973 	svccs	0x00737973
    56f0:	74746567 	ldrbtvc	r6, [r4], #-1383	; 0xfffffa99
    56f4:	632e646f 			; <UNDEFINED> instruction: 0x632e646f
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__ccfg+0x10b0d7c>
   4:	35312820 	ldrcc	r2, [r1, #-2080]!	; 0xfffff7e0
   8:	322d393a 	eorcc	r3, sp, #950272	; 0xe8000
   c:	2d393130 	ldfcss	f3, [r9, #-192]!	; 0xffffff40
}
  10:	302d3471 	eorcc	r3, sp, r1, ror r4
  14:	6e756275 	mrcvs	2, 3, r6, cr5, cr5, {3}
  18:	29317574 	ldmdbcs	r1!, {r2, r4, r5, r6, r8, sl, ip, sp, lr}
  1c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  20:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  24:	31393130 	teqcc	r9, r0, lsr r1
  28:	20353230 	eorscs	r3, r5, r0, lsr r2
  2c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  30:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  34:	415b2029 	cmpmi	fp, r9, lsr #32
  38:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  3c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
			i = k;
  40:	6172622d 	cmnvs	r2, sp, lsr #4
				j->Next = k;
  44:	2068636e 	rsbcs	r6, r8, lr, ror #6
  48:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
}
  4c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  50:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  54:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
		release;
  58:	43434700 	movtmi	r4, #14080	; 0x3700
  5c:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
		b->length - b->u.pointers.head - b->u.pointers.tail;
  60:	5420554e 	strtpl	r5, [r0], #-1358	; 0xfffffab2
	b->u.pointers.tail =
  64:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
}
  68:	726f6620 	rsbvc	r6, pc, #32, 12	; 0x2000000
		return NULL;
  6c:	4d524120 	ldfmie	f4, [r2, #-128]	; 0xffffff80
  70:	626d4520 	rsbvs	r4, sp, #32, 10	; 0x8000000
  74:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
  78:	72502064 	subsvc	r2, r0, #100	; 0x64
  7c:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
  80:	73726f73 	cmnvc	r2, #460	; 0x1cc
  84:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  88:	20332e39 	eorscs	r2, r3, r9, lsr lr
  8c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
  90:	39323530 	ldmdbcc	r2!, {r4, r5, r8, sl, ip, sp}
  94:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  98:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  9c:	5b202965 	blpl	80a638 <__ccfg+0x7ea690>
  a0:	2f4d5241 	svccs	0x004d5241
  a4:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  a8:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  ac:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
  b0:	6172622d 	cmnvs	r2, sp, lsr #4
  b4:	2068636e 	rsbcs	r6, r8, lr, ror #6
  b8:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  bc:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  c0:	37323220 	ldrcc	r3, [r2, -r0, lsr #4]!
  c4:	5d373739 	ldcpl	7, cr3, [r7, #-228]!	; 0xffffff1c
char * assembleMessage(message * messagePtr) {
  c8:	43434700 	movtmi	r4, #14080	; 0x3700
  cc:	3128203a 			; <UNDEFINED> instruction: 0x3128203a
  d0:	2d383a35 	vldmdbcs	r8!, {s6-s58}
  d4:	39313032 	ldmdbcc	r1!, {r1, r4, r5, ip, sp}
  d8:	2d33712d 	ldfcss	f7, [r3, #-180]!	; 0xffffff4c
        p = (char*)umalloc(6);
  dc:	38202931 	stmdacc	r0!, {r0, r4, r5, r8, fp, sp}
  e0:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
    p[0] = messagePtr->senderGroupId;
  e4:	31303220 	teqcc	r0, r0, lsr #4
  e8:	30373039 	eorscc	r3, r7, r9, lsr r0
    p[2] = messagePtr->messageType;
  ec:	72282033 	eorvc	r2, r8, #51	; 0x33
    p[3] = messagePtr->requestNumber;
  f0:	61656c65 	cmnvs	r5, r5, ror #24
    p[4] = messagePtr->senderId;
  f4:	20296573 	eorcs	r6, r9, r3, ror r5
    p[5] = messagePtr->destinationId;
  f8:	6363675b 	cmnvs	r3, #23855104	; 0x16c0000
        p = (char*)umalloc(8);
  fc:	622d382d 	eorvs	r3, sp, #2949120	; 0x2d0000
 100:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
 104:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
        p[7] = 0x00;
 108:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
        break;
 10c:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
        p = (char*)umalloc(26);
 110:	32303337 	eorscc	r3, r0, #-603979776	; 0xdc000000
        strcpy(p + 6, messagePtr->messageRecord);
 114:	Address 0x0000000000000114 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002e41 	andeq	r2, r0, r1, asr #28
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000024 	andeq	r0, r0, r4, lsr #32
}
  10:	4d2d3705 	stcmi	7, cr3, [sp, #-20]!	; 0xffffffec
  14:	070a0600 	streq	r0, [sl, -r0, lsl #12]
  18:	0901084d 	stmdbeq	r1, {r0, r2, r3, r6, fp}
  1c:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
  20:	17011501 	strne	r1, [r1, -r1, lsl #10]
  24:	19011803 	stmdbne	r1, {r0, r1, fp, ip}
  28:	1e011a01 	vmlane.f32	s2, s2, s2
  2c:	Address 0x000000000000002c is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      10:	00000018 	andeq	r0, r0, r8, lsl r0
      14:	00000000 	andeq	r0, r0, r0
      18:	000000c8 	andeq	r0, r0, r8, asr #1
      1c:	0000006e 	andeq	r0, r0, lr, rrx
      20:	83100e41 	tsthi	r0, #1040	; 0x410
      24:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
      28:	00018e02 	andeq	r8, r1, r2, lsl #28
      2c:	0000000c 	andeq	r0, r0, ip
      30:	00000000 	andeq	r0, r0, r0
      34:	00000138 	andeq	r0, r0, r8, lsr r1
      38:	00000014 	andeq	r0, r0, r4, lsl r0
      3c:	00000028 	andeq	r0, r0, r8, lsr #32
			i = k;
      40:	00000000 	andeq	r0, r0, r0
				j->Next = k;
      44:	0000014c 	andeq	r0, r0, ip, asr #2
      48:	00000058 	andeq	r0, r0, r8, asr r0
}
      4c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
      50:	86038504 	strhi	r8, [r3], -r4, lsl #10
      54:	46018e02 	strmi	r8, [r1], -r2, lsl #28
      58:	c5c6ce0a 	strbgt	ip, [r6, #3594]	; 0xe0a
      5c:	42000ec4 	andmi	r0, r0, #196, 28	; 0xc40
		b->length - b->u.pointers.head - b->u.pointers.tail;
      60:	c6ce5c0b 	strbgt	r5, [lr], fp, lsl #24
	b->u.pointers.tail =
      64:	000ec4c5 	andeq	ip, lr, r5, asr #9
}
      68:	00000014 	andeq	r0, r0, r4, lsl r0
		return NULL;
      6c:	00000000 	andeq	r0, r0, r0
      70:	000001a4 	andeq	r0, r0, r4, lsr #3
      74:	00000018 	andeq	r0, r0, r8, lsl r0
      78:	8e100e41 	cdphi	14, 1, cr0, cr0, cr1, {2}
      7c:	040e4901 	streq	r4, [lr], #-2305	; 0xfffff6ff
      80:	0000001c 	andeq	r0, r0, ip, lsl r0
      84:	00000000 	andeq	r0, r0, r0
      88:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
      8c:	000000dc 	ldrdeq	r0, [r0], -ip
      90:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
      94:	02018e02 	andeq	r8, r1, #2, 28
      98:	0ec4ce52 	mcreq	14, 6, ip, cr4, cr2, {2}
      9c:	00000000 	andeq	r0, r0, r0
      a0:	0000000c 	andeq	r0, r0, ip
	...
      ac:	00000018 	andeq	r0, r0, r8, lsl r0
      b0:	0000000c 	andeq	r0, r0, ip
	...
      bc:	0000000c 	andeq	r0, r0, ip
      c0:	00000020 	andeq	r0, r0, r0, lsr #32
      c4:	00000000 	andeq	r0, r0, r0
char * assembleMessage(message * messagePtr) {
      c8:	00000298 	muleq	r0, r8, r2
      cc:	000002d4 	ldrdeq	r0, [r0], -r4
      d0:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
      d4:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
      d8:	200e4101 	andcs	r4, lr, r1, lsl #2
        p = (char*)umalloc(6);
      dc:	0e013403 	cdpeq	4, 0, cr3, cr1, cr3, {0}
      e0:	0000000c 	andeq	r0, r0, ip
    p[0] = messagePtr->senderGroupId;
      e4:	0000000c 	andeq	r0, r0, ip
      e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    p[2] = messagePtr->messageType;
      ec:	7c020001 	stcvc	0, cr0, [r2], {1}
    p[3] = messagePtr->requestNumber;
      f0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    p[4] = messagePtr->senderId;
      f4:	0000000c 	andeq	r0, r0, ip
    p[5] = messagePtr->destinationId;
      f8:	000000e4 	andeq	r0, r0, r4, ror #1
        p = (char*)umalloc(8);
      fc:	0000056c 	andeq	r0, r0, ip, ror #10
     100:	0000000c 	andeq	r0, r0, ip
     104:	00000018 	andeq	r0, r0, r8, lsl r0
        p[7] = 0x00;
     108:	000000e4 	andeq	r0, r0, r4, ror #1
        break;
     10c:	00000578 	andeq	r0, r0, r8, ror r5
        p = (char*)umalloc(26);
     110:	0000002c 	andeq	r0, r0, ip, lsr #32
        strcpy(p + 6, messagePtr->messageRecord);
     114:	47080e41 	strmi	r0, [r8, -r1, asr #28]
     118:	41000e0a 	tstmi	r0, sl, lsl #28
        strcpy(p + 8, messagePtr->messageRecord);
     11c:	0000000b 	andeq	r0, r0, fp
        p = (char*)umalloc(28);
     120:	00000018 	andeq	r0, r0, r8, lsl r0
     124:	000000e4 	andeq	r0, r0, r4, ror #1
     128:	000005a4 	andeq	r0, r0, r4, lsr #11
        p[7] = 0x00;
     12c:	0000002a 	andeq	r0, r0, sl, lsr #32
     130:	8e100e41 	cdphi	14, 1, cr0, cr0, cr1, {2}
        strcpy(p + 8, messagePtr->messageRecord);
     134:	0e0a4701 	cdpeq	7, 0, cr4, cr10, cr1, {0}
    switch(messageType) 
     138:	000b4204 	andeq	r4, fp, r4, lsl #4
int getPacketSize(char messageType) {
     13c:	00000018 	andeq	r0, r0, r8, lsl r0
     140:	000000e4 	andeq	r0, r0, r4, ror #1
}
     144:	000005d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     148:	0000003c 	andeq	r0, r0, ip, lsr r0
fsm transmitter (message * messagePtr) {
     14c:	83100e41 	tsthi	r0, #1040	; 0x410
     150:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     154:	00018e02 	andeq	r8, r1, r2, lsl #28
}
     158:	00000018 	andeq	r0, r0, r8, lsl r0
     15c:	000000e4 	andeq	r0, r0, r4, ror #1
fsm transmitter (message * messagePtr) {
     160:	0000060c 	andeq	r0, r0, ip, lsl #12
        char * assembledMessage = assembleMessage(messagePtr);
     164:	00000040 	andeq	r0, r0, r0, asr #32
     168:	83100e41 	tsthi	r0, #1040	; 0x410
     16c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
        spkt = tcv_wnp (Transmit_Message, sfd,  getPacketSize(messagePtr->messageType));
     170:	00018e02 	andeq	r8, r1, r2, lsl #28
     174:	00000014 	andeq	r0, r0, r4, lsl r0
     178:	000000e4 	andeq	r0, r0, r4, ror #1
     17c:	00000000 	andeq	r0, r0, r0
     180:	00000020 	andeq	r0, r0, r0, lsr #32
        spkt [0] = 0;
     184:	83080e42 	movwhi	r0, #36418	; 0x8e42
        strcpy(p, assembledMessage);
     188:	00018e02 	andeq	r8, r1, r2, lsl #28
        tcv_endp (spkt);
     18c:	00000014 	andeq	r0, r0, r4, lsl r0
     190:	000000e4 	andeq	r0, r0, r4, ror #1
}
     194:	0000064c 	andeq	r0, r0, ip, asr #12
        finish;
     198:	00000054 	andeq	r0, r0, r4, asr r0
     19c:	87080e42 	strhi	r0, [r8, -r2, asr #28]
     1a0:	00018e02 	andeq	r8, r1, r2, lsl #28
char randomNumber() {
     1a4:	00000014 	andeq	r0, r0, r4, lsl r0
   srand((unsigned) time(&t));
     1a8:	000000e4 	andeq	r0, r0, r4, ror #1
     1ac:	000006a0 	andeq	r0, r0, r0, lsr #13
   return (char)rand();
     1b0:	00000040 	andeq	r0, r0, r0, asr #32
}
     1b4:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     1b8:	00018e02 	andeq	r8, r1, r2, lsl #28
fsm find {
     1bc:	00000014 	andeq	r0, r0, r4, lsl r0
     1c0:	000000e4 	andeq	r0, r0, r4, ror #1
     1c4:	000006e0 	andeq	r0, r0, r0, ror #13
     1c8:	00000028 	andeq	r0, r0, r8, lsr #32
        i = 0;
     1cc:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
     1d0:	00018e02 	andeq	r8, r1, r2, lsl #28
        sendCount = 0;
     1d4:	00000014 	andeq	r0, r0, r4, lsl r0
        currentRequestNumber = randomNumber();
     1d8:	000000e4 	andeq	r0, r0, r4, ror #1
        messagePtr -> senderGroupId = groupId;
     1dc:	00000708 	andeq	r0, r0, r8, lsl #14
     1e0:	00000114 	andeq	r0, r0, r4, lsl r1
     1e4:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     1e8:	00018e02 	andeq	r8, r1, r2, lsl #28
        messagePtr -> requestNumber = currentRequestNumber;
     1ec:	0000001c 	andeq	r0, r0, ip, lsl r0
     1f0:	000000e4 	andeq	r0, r0, r4, ror #1
        messagePtr -> senderId = nodeId;
     1f4:	0000081c 	andeq	r0, r0, ip, lsl r8
     1f8:	00000050 	andeq	r0, r0, r0, asr r0
     1fc:	83180e41 	tsthi	r8, #1040	; 0x410
        if(sendCount == 2) {
     200:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     204:	87038604 	strhi	r8, [r3, -r4, lsl #12]
            proceed Display_Neighbours;
     208:	00018e02 	andeq	r8, r1, r2, lsl #28
        call transmitter(messagePtr, Wait);
     20c:	00000018 	andeq	r0, r0, r8, lsl r0
     210:	000000e4 	andeq	r0, r0, r4, ror #1
     214:	0000086c 	andeq	r0, r0, ip, ror #16
     218:	00000054 	andeq	r0, r0, r4, asr r0
     21c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     220:	86038504 	strhi	r8, [r3], -r4, lsl #10
        sendCount++;
     224:	00018e02 	andeq	r8, r1, r2, lsl #28
        delay(3*1024, Send_Discovery_Request);
     228:	0000000c 	andeq	r0, r0, ip
     22c:	000000e4 	andeq	r0, r0, r4, ror #1
     230:	000008c0 	andeq	r0, r0, r0, asr #17
        ser_outf(Display_Neighbours, "Neighbours:");
     234:	00000038 	andeq	r0, r0, r8, lsr r0
     238:	00000020 	andeq	r0, r0, r0, lsr #32
        if (neighbours[i] == 1) {
     23c:	000000e4 	andeq	r0, r0, r4, ror #1
     240:	000008f8 	strdeq	r0, [r0], -r8
     244:	00000110 	andeq	r0, r0, r0, lsl r1
            ser_outf(Display_Neighbour, " %d", i);
     248:	83200e43 			; <UNDEFINED> instruction: 0x83200e43
     24c:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
        i++;
     250:	87058606 	strhi	r8, [r5, -r6, lsl #12]
     254:	89038804 	stmdbhi	r3, {r2, fp, pc}
            proceed Display_Neighbour;
     258:	00018e02 	andeq	r8, r1, r2, lsl #28
     25c:	0000000c 	andeq	r0, r0, ip
}
     260:	000000e4 	andeq	r0, r0, r4, ror #1
        finish;
     264:	00000000 	andeq	r0, r0, r0
}
     268:	0000000c 	andeq	r0, r0, ip
     26c:	00000018 	andeq	r0, r0, r8, lsl r0
     270:	000000e4 	andeq	r0, r0, r4, ror #1
     274:	00000a08 	andeq	r0, r0, r8, lsl #20
     278:	000000c0 	andeq	r0, r0, r0, asr #1
     27c:	840c0e43 	strhi	r0, [ip], #-3651	; 0xfffff1bd
     280:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     284:	00000001 	andeq	r0, r0, r1
     288:	00000018 	andeq	r0, r0, r8, lsl r0
     28c:	000000e4 	andeq	r0, r0, r4, ror #1
     290:	00000ac8 	andeq	r0, r0, r8, asr #21
     294:	00000044 	andeq	r0, r0, r4, asr #32
fsm root {
     298:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     29c:	86038504 	strhi	r8, [r3], -r4, lsl #10
     2a0:	00018e02 	andeq	r8, r1, r2, lsl #28
     2a4:	0000001c 	andeq	r0, r0, ip, lsl r0
     2a8:	000000e4 	andeq	r0, r0, r4, ror #1
     2ac:	00000b0c 	andeq	r0, r0, ip, lsl #22
     2b0:	0000003c 	andeq	r0, r0, ip, lsr r0
     2b4:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
     2b8:	86048505 	strhi	r8, [r4], -r5, lsl #10
     2bc:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     2c0:	00000001 	andeq	r0, r0, r1
     2c4:	00000018 	andeq	r0, r0, r8, lsl r0
     2c8:	000000e4 	andeq	r0, r0, r4, ror #1
        recordCount = 0;
     2cc:	00000b48 	andeq	r0, r0, r8, asr #22
        nodeId = 1;
     2d0:	000000a4 	andeq	r0, r0, r4, lsr #1
     2d4:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
        groupId = 1;
     2d8:	86038504 	strhi	r8, [r3], -r4, lsl #10
     2dc:	00018e02 	andeq	r8, r1, r2, lsl #28
        messagePtr = (message *) umalloc(sizeof(message));
     2e0:	00000030 	andeq	r0, r0, r0, lsr r0
        phys_cc1350(0, MAX_PACKET_LENGTH);
     2e4:	000000e4 	andeq	r0, r0, r4, ror #1
     2e8:	00000bec 	andeq	r0, r0, ip, ror #23
     2ec:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
        tcv_plug(0, &plug_null);
     2f0:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
     2f4:	86078508 	strhi	r8, [r7], -r8, lsl #10
        sfd = tcv_open(WNONE, 0, 0);
     2f8:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
     2fc:	8a038904 	bhi	e2714 <__ccfg+0xc276c>
     300:	02018e02 	andeq	r8, r1, #2, 28
		tcv_control(sfd, PHYSOPT_ON, NULL);
     304:	cace0aa2 	bgt	ff382d94 <_estack+0xdf37dd94>
        sfd = tcv_open(WNONE, 0, 0);
     308:	c6c7c8c9 	strbgt	ip, [r7], r9, asr #17
		tcv_control(sfd, PHYSOPT_ON, NULL);
     30c:	000ec4c5 	andeq	ip, lr, r5, asr #9
		if (sfd < 0) {
     310:	00000b42 	andeq	r0, r0, r2, asr #22
			diag("Cannot open tcv interface");
     314:	0000000c 	andeq	r0, r0, ip
     318:	000000e4 	andeq	r0, r0, r4, ror #1
			halt();
     31c:	00000da4 	andeq	r0, r0, r4, lsr #27
        currentProtocol = IDLE;
     320:	00000024 	andeq	r0, r0, r4, lsr #32
     324:	0000000c 	andeq	r0, r0, ip
        ser_outf(Menu_Header, "\r\nGroup %d Device #%d (%d/%d records)\r\n", groupId, nodeId, recordCount, MAX_RECORDS);
     328:	000000e4 	andeq	r0, r0, r4, ror #1
     32c:	00000000 	andeq	r0, r0, r0
     330:	00000028 	andeq	r0, r0, r8, lsr #32
     334:	0000001c 	andeq	r0, r0, ip, lsl r0
     338:	000000e4 	andeq	r0, r0, r4, ror #1
     33c:	00000dc8 	andeq	r0, r0, r8, asr #27
        ser_outf(Options, menu);
     340:	00000258 	andeq	r0, r0, r8, asr r2
     344:	870c0e42 	strhi	r0, [ip, -r2, asr #28]
        ser_inf(Get_Choice, "%c", &choice);
     348:	8e028b03 	vmlahi.f64	d8, d2, d3
     34c:	180e4101 	stmdane	lr, {r0, r8, lr}
     350:	00070d42 	andeq	r0, r7, r2, asr #26
        switch (choice)
     354:	00000014 	andeq	r0, r0, r4, lsl r0
     358:	000000e4 	andeq	r0, r0, r4, ror #1
     35c:	00001020 	andeq	r1, r0, r0, lsr #32
     360:	00000030 	andeq	r0, r0, r0, lsr r0
     364:	83080e42 	movwhi	r0, #36418	; 0x8e42
     368:	00018e02 	andeq	r8, r1, r2, lsl #28
     36c:	00000018 	andeq	r0, r0, r8, lsl r0
     370:	000000e4 	andeq	r0, r0, r4, ror #1
     374:	00000000 	andeq	r0, r0, r0
     378:	0000005c 	andeq	r0, r0, ip, asr r0
     37c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     380:	86038504 	strhi	r8, [r3], -r4, lsl #10
        proceed Menu_Header;
     384:	00018e02 	andeq	r8, r1, r2, lsl #28
     388:	00000014 	andeq	r0, r0, r4, lsl r0
        ser_outf(Set_Group_ID, "New Group ID: ");
     38c:	000000e4 	andeq	r0, r0, r4, ror #1
     390:	00001050 	andeq	r1, r0, r0, asr r0
        ser_inf(Get_Group_ID, "%d", &groupId);
     394:	00000060 	andeq	r0, r0, r0, rrx
     398:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
        proceed Menu_Header;
     39c:	00018e02 	andeq	r8, r1, r2, lsl #28
     3a0:	0000000c 	andeq	r0, r0, ip
        ser_outf(Set_Node_ID, "New node ID (1-25):");
     3a4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     3a8:	7c020001 	stcvc	0, cr0, [r2], {1}
        ser_inf(Get_Node_ID, "%d", &nodeId);
     3ac:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     3b0:	00000018 	andeq	r0, r0, r8, lsl r0
     3b4:	000003a0 	andeq	r0, r0, r0, lsr #7
    if (node < 1 || node > 25) {
     3b8:	000010b0 	strheq	r1, [r0], -r0
     3bc:	0000003c 	andeq	r0, r0, ip, lsr r0
            proceed Set_Node_ID;
     3c0:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
        proceed Menu_Header;
     3c4:	86038504 	strhi	r8, [r3], -r4, lsl #10
     3c8:	00018e02 	andeq	r8, r1, r2, lsl #28
        call find(Menu_Header);
     3cc:	00000018 	andeq	r0, r0, r8, lsl r0
     3d0:	000003a0 	andeq	r0, r0, r0, lsr #7
     3d4:	000010ec 	andeq	r1, r0, ip, ror #1
     3d8:	00000080 	andeq	r0, r0, r0, lsl #1
     3dc:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
            proceed Set_Node_ID;
     3e0:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
            break;
     3e4:	00000001 	andeq	r0, r0, r1
            proceed Set_Node_ID;
     3e8:	0000000c 	andeq	r0, r0, ip
            proceed Find_Neighbours;
     3ec:	000003a0 	andeq	r0, r0, r0, lsr #7
            proceed Create_Record;
     3f0:	0000116c 	andeq	r1, r0, ip, ror #2
            proceed Delete_Record;
     3f4:	00000018 	andeq	r0, r0, r8, lsl r0
            proceed Retrieve_Record;
     3f8:	00000014 	andeq	r0, r0, r4, lsl r0
            diag("Reset Local Storage");
     3fc:	000003a0 	andeq	r0, r0, r0, lsr #7
            break;
     400:	00000000 	andeq	r0, r0, r0
            diag("Reset Local Storage");
     404:	00000024 	andeq	r0, r0, r4, lsr #32
        currentProtocol = CREATE_RECORD;
     408:	83080e41 	movwhi	r0, #36417	; 0x8e41
        ser_outf(Create_Record, "Receiver node ID (1-25):");
     40c:	00018e02 	andeq	r8, r1, r2, lsl #28
     410:	00000014 	andeq	r0, r0, r4, lsl r0
        ser_inf(Get_Receiver_Node, "%d", &receiverId);
     414:	000003a0 	andeq	r0, r0, r0, lsr #7
     418:	00001184 	andeq	r1, r0, r4, lsl #3
     41c:	00000010 	andeq	r0, r0, r0, lsl r0
    if (node < 1 || node > 25) {
     420:	83080e42 	movwhi	r0, #36418	; 0x8e42
     424:	00018e02 	andeq	r8, r1, r2, lsl #28
            proceed Create_Record;
     428:	00000014 	andeq	r0, r0, r4, lsl r0
     42c:	000003a0 	andeq	r0, r0, r0, lsr #7
        ser_in(Get_Message, messagePtr->messageRecord, RECORD_LENGTH);
     430:	00001194 	muleq	r0, r4, r1
     434:	0000002c 	andeq	r0, r0, ip, lsr #32
     438:	84080e45 	strhi	r0, [r8], #-3653	; 0xfffff1bb
        if(strlen(messagePtr->messageRecord) >= RECORD_LENGTH) {
     43c:	00018e02 	andeq	r8, r1, r2, lsl #28
     440:	00000014 	andeq	r0, r0, r4, lsl r0
     444:	000003a0 	andeq	r0, r0, r0, lsr #7
            messagePtr->messageRecord[RECORD_LENGTH - 1] = '/0';
     448:	00000000 	andeq	r0, r0, r0
        proceed Transmit_Message;
     44c:	0000004c 	andeq	r0, r0, ip, asr #32
            messagePtr->messageRecord[RECORD_LENGTH - 1] = '/0';
     450:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
        proceed Transmit_Message;
     454:	00018e02 	andeq	r8, r1, r2, lsl #28
        currentProtocol = DELETE_RECORD;
     458:	0000000c 	andeq	r0, r0, ip
        ser_outf(Retrieve_Record, "Delete Record from Neighbour:\n\r");
     45c:	000003a0 	andeq	r0, r0, r0, lsr #7
        currentProtocol = DELETE_RECORD;
     460:	000011c0 	andeq	r1, r0, r0, asr #3
        ser_outf(Retrieve_Record, "Delete Record from Neighbour:\n\r");
     464:	00000006 	andeq	r0, r0, r6
        proceed Get_Receiving_Node;
     468:	00000028 	andeq	r0, r0, r8, lsr #32
        currentProtocol = RETRIEVE_RECORD;
     46c:	000003a0 	andeq	r0, r0, r0, lsr #7
        ser_outf(Retrieve_Record, "Retrieve Record from Neighbour:\n\r");
     470:	000011c8 	andeq	r1, r0, r8, asr #3
        currentProtocol = RETRIEVE_RECORD;
     474:	000000cc 	andeq	r0, r0, ip, asr #1
        ser_outf(Retrieve_Record, "Retrieve Record from Neighbour:\n\r");
     478:	83180e41 	tsthi	r8, #1040	; 0x410
        ser_outf(Prompt_Recieving_Node, "Neighbour node ID (1-25):");
     47c:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     480:	87038604 	strhi	r8, [r3, -r4, lsl #12]
        ser_inf(Get_Receiving_Node, "%d", &receiverId);
     484:	02018e02 	andeq	r8, r1, #2, 28
     488:	c7ce0a59 			; <UNDEFINED> instruction: 0xc7ce0a59
     48c:	c3c4c5c6 	bicgt	ip, r4, #830472192	; 0x31800000
    if (node < 1 || node > 25) {
     490:	0b42000e 	bleq	10804d0 <__ccfg+0x1060528>
     494:	00000014 	andeq	r0, r0, r4, lsl r0
            proceed Prompt_Recieving_Node;
     498:	000003a0 	andeq	r0, r0, r0, lsr #7
        ser_outf(Prompt_Record_Index, "Record index:");
     49c:	00001294 	muleq	r0, r4, r2
     4a0:	00000014 	andeq	r0, r0, r4, lsl r0
        char desiredRecordIndex = -1;
     4a4:	83080e41 	movwhi	r0, #36417	; 0x8e41
        ser_inf(Get_Record_Index, "%d", &desiredRecordIndex);
     4a8:	00018e02 	andeq	r8, r1, r2, lsl #28
     4ac:	00000014 	andeq	r0, r0, r4, lsl r0
        char desiredRecordIndex = -1;
     4b0:	000003a0 	andeq	r0, r0, r0, lsr #7
        ser_inf(Get_Record_Index, "%d", &desiredRecordIndex);
     4b4:	000012a8 	andeq	r1, r0, r8, lsr #5
        messagePtr->recordIndex = desiredRecordIndex;
     4b8:	00000034 	andeq	r0, r0, r4, lsr r0
     4bc:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     4c0:	00018e02 	andeq	r8, r1, r2, lsl #28
        proceed Transmit_Message;
     4c4:	00000018 	andeq	r0, r0, r8, lsl r0
        messagePtr -> senderGroupId = groupId;
     4c8:	000003a0 	andeq	r0, r0, r0, lsr #7
     4cc:	000012dc 	ldrdeq	r1, [r0], -ip
     4d0:	00000034 	andeq	r0, r0, r4, lsr r0
        messagePtr -> messageType = currentProtocol;
     4d4:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     4d8:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
        messagePtr -> requestNumber = randomNumber();
     4dc:	00000001 	andeq	r0, r0, r1
        messagePtr -> senderId = nodeId;
     4e0:	00000018 	andeq	r0, r0, r8, lsl r0
     4e4:	000003a0 	andeq	r0, r0, r0, lsr #7
        call transmitter(messagePtr, Menu_Header);
     4e8:	00000000 	andeq	r0, r0, r0
        messagePtr -> destinationId = receiverId;
     4ec:	0000002c 	andeq	r0, r0, ip, lsr #32
     4f0:	83100e41 	tsthi	r0, #1040	; 0x410
        call transmitter(messagePtr, Menu_Header);
     4f4:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     4f8:	00018e02 	andeq	r8, r1, r2, lsl #28
     4fc:	00000014 	andeq	r0, r0, r4, lsl r0
     500:	000003a0 	andeq	r0, r0, r0, lsr #7
     504:	00001310 	andeq	r1, r0, r0, lsl r3
     508:	00000024 	andeq	r0, r0, r4, lsr #32
     50c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     510:	00018e02 	andeq	r8, r1, r2, lsl #28
     514:	00000018 	andeq	r0, r0, r8, lsl r0
     518:	000003a0 	andeq	r0, r0, r0, lsr #7
     51c:	00001334 	andeq	r1, r0, r4, lsr r3
     520:	00000038 	andeq	r0, r0, r8, lsr r0
     524:	83100e41 	tsthi	r0, #1040	; 0x410
     528:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     52c:	00018e02 	andeq	r8, r1, r2, lsl #28
     530:	0000000c 	andeq	r0, r0, ip
     534:	000003a0 	andeq	r0, r0, r0, lsr #7
     538:	00000000 	andeq	r0, r0, r0
     53c:	00000014 	andeq	r0, r0, r4, lsl r0
     540:	00000014 	andeq	r0, r0, r4, lsl r0
     544:	000003a0 	andeq	r0, r0, r0, lsr #7
     548:	00000000 	andeq	r0, r0, r0
     54c:	00000040 	andeq	r0, r0, r0, asr #32
     550:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     554:	00018e02 	andeq	r8, r1, r2, lsl #28
     558:	00000014 	andeq	r0, r0, r4, lsl r0
     55c:	000003a0 	andeq	r0, r0, r0, lsr #7
     560:	00000000 	andeq	r0, r0, r0
     564:	00000018 	andeq	r0, r0, r8, lsl r0
     568:	83080e41 	movwhi	r0, #36417	; 0x8e41
static void devinit_uart (int devnum) {
     56c:	00018e02 	andeq	r8, r1, r2, lsl #28
	adddevfunc (ioreq_uart_a, devnum);
     570:	0000000c 	andeq	r0, r0, ip
     574:	000003a0 	andeq	r0, r0, r0, lsr #7
void udelay (volatile word n) {
     578:	0000136c 	andeq	r1, r0, ip, ror #6
     57c:	00000024 	andeq	r0, r0, r4, lsr #32
	while (n) {
     580:	0000000c 	andeq	r0, r0, ip
     584:	000003a0 	andeq	r0, r0, r0, lsr #7
}
     588:	00000000 	andeq	r0, r0, r0
	while (n--);
     58c:	00000020 	andeq	r0, r0, r0, lsr #32
     590:	0000000c 	andeq	r0, r0, ip
     594:	000003a0 	andeq	r0, r0, r0, lsr #7
		n--;
     598:	00001390 	muleq	r0, r0, r3
     59c:	0000000e 	andeq	r0, r0, lr
     5a0:	0000000c 	andeq	r0, r0, ip
void mdelay (volatile word n) {
     5a4:	000003a0 	andeq	r0, r0, r0, lsr #7
     5a8:	0000139e 	muleq	r0, lr, r3
	while (n) {
     5ac:	00000010 	andeq	r0, r0, r0, lsl r0
     5b0:	0000000c 	andeq	r0, r0, ip
}
     5b4:	000003a0 	andeq	r0, r0, r0, lsr #7
		udelay (999);
     5b8:	00000000 	andeq	r0, r0, r0
     5bc:	0000001c 	andeq	r0, r0, ip, lsl r0
		n--;
     5c0:	0000000c 	andeq	r0, r0, ip
     5c4:	000003a0 	andeq	r0, r0, r0, lsr #7
     5c8:	00000000 	andeq	r0, r0, r0
     5cc:	00000010 	andeq	r0, r0, r0, lsl r0
void __pi_ondomain (lword d) {
     5d0:	0000000c 	andeq	r0, r0, ip
     5d4:	000003a0 	andeq	r0, r0, r0, lsr #7
		if (__pi_systat.effpdm > 1)
     5d8:	00000000 	andeq	r0, r0, r0
     5dc:	00000006 	andeq	r0, r0, r6
			__pi_systat.effpdm = 1;
     5e0:	0000000c 	andeq	r0, r0, ip
	PRCMPowerDomainOn (d);
     5e4:	000003a0 	andeq	r0, r0, r0, lsr #7
     5e8:	000013ae 	andeq	r1, r0, lr, lsr #7
     5ec:	00000014 	andeq	r0, r0, r4, lsl r0
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     5f0:	0000000c 	andeq	r0, r0, ip
     5f4:	000003a0 	andeq	r0, r0, r0, lsr #7
     5f8:	000013c2 	andeq	r1, r0, r2, asr #7
	__pi_systat.ondmns |= d;
     5fc:	0000000e 	andeq	r0, r0, lr
     600:	00000014 	andeq	r0, r0, r4, lsl r0
}
     604:	000003a0 	andeq	r0, r0, r0, lsr #7
     608:	000013d0 	ldrdeq	r1, [r0], -r0
void __pi_offdomain (lword d) {
     60c:	00000024 	andeq	r0, r0, r4, lsr #32
     610:	83080e41 	movwhi	r0, #36417	; 0x8e41
	PRCMPowerDomainOff (d);
     614:	00018e02 	andeq	r8, r1, r2, lsl #28
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     618:	00000020 	andeq	r0, r0, r0, lsr #32
     61c:	000003a0 	andeq	r0, r0, r0, lsr #7
     620:	000013f4 	strdeq	r1, [r0], -r4
	if (d & PRCM_DOMAIN_RFCORE) {
     624:	0000009c 	muleq	r0, ip, r0
     628:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     62c:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
     630:	87058606 	strhi	r8, [r5, -r6, lsl #12]
			__pi_systat.effpdm = __pi_systat.reqpdm;
     634:	89038804 	stmdbhi	r3, {r2, fp, pc}
     638:	00018e02 	andeq	r8, r1, r2, lsl #28
	__pi_systat.ondmns &= ~d;
     63c:	00000014 	andeq	r0, r0, r4, lsl r0
     640:	000003a0 	andeq	r0, r0, r0, lsr #7
}
     644:	00001490 	muleq	r0, r0, r4
     648:	00000050 	andeq	r0, r0, r0, asr r0
void __pi_syserror (word ec, const char *m) {
     64c:	83080e42 	movwhi	r0, #36418	; 0x8e42
	diag ("SYSERR: %x, %s", ec, m);
     650:	00018e02 	andeq	r8, r1, r2, lsl #28
     654:	00000014 	andeq	r0, r0, r4, lsl r0
  __ASM volatile ("cpsid i" : : : "memory");
     658:	000003a0 	andeq	r0, r0, r0, lsr #7
     65c:	000014e0 	andeq	r1, r0, r0, ror #9
     660:	00000048 	andeq	r0, r0, r8, asr #32
     664:	83080e41 	movwhi	r0, #36417	; 0x8e41
		all_leds_blink;
     668:	00018e02 	andeq	r8, r1, r2, lsl #28
     66c:	00000014 	andeq	r0, r0, r4, lsl r0
     670:	000003a0 	andeq	r0, r0, r0, lsr #7
     674:	00001528 	andeq	r1, r0, r8, lsr #10
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     678:	00000050 	andeq	r0, r0, r0, asr r0
     67c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     680:	00018e02 	andeq	r8, r1, r2, lsl #28
     684:	00000020 	andeq	r0, r0, r0, lsr #32
     688:	000003a0 	andeq	r0, r0, r0, lsr #7
     68c:	00000000 	andeq	r0, r0, r0
	while (1) {
     690:	00000058 	andeq	r0, r0, r8, asr r0
     694:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
     698:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
     69c:	87058606 	strhi	r8, [r5, -r6, lsl #12]
void tci_run_delay_timer () {
     6a0:	89038804 	stmdbhi	r3, {r2, fp, pc}
	setdel = __pi_mintk - __pi_old;
     6a4:	00018e02 	andeq	r8, r1, r2, lsl #28
     6a8:	00000018 	andeq	r0, r0, r8, lsl r0
     6ac:	000003a0 	andeq	r0, r0, r0, lsr #7
     6b0:	00001578 	andeq	r1, r0, r8, ror r5
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     6b4:	000000a8 	andeq	r0, r0, r8, lsr #1
     6b8:	83100e44 	tsthi	r0, #68, 28	; 0x440
     6bc:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     6c0:	00018e02 	andeq	r8, r1, r2, lsl #28
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     6c4:	00000018 	andeq	r0, r0, r8, lsl r0
	sti_tim;
     6c8:	000003a0 	andeq	r0, r0, r0, lsr #7
}
     6cc:	00001620 	andeq	r1, r0, r0, lsr #12
     6d0:	00000034 	andeq	r0, r0, r4, lsr r0
     6d4:	83100e41 	tsthi	r0, #1040	; 0x410
     6d8:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     6dc:	00018e02 	andeq	r8, r1, r2, lsl #28
	cli_aux;
     6e0:	0000000c 	andeq	r0, r0, ip
     6e4:	000003a0 	andeq	r0, r0, r0, lsr #7
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     6e8:	00001654 	andeq	r1, r0, r4, asr r6
     6ec:	00000018 	andeq	r0, r0, r8, lsl r0
     6f0:	00000014 	andeq	r0, r0, r4, lsl r0
     6f4:	000003a0 	andeq	r0, r0, r0, lsr #7
	sti_aux;
     6f8:	00000000 	andeq	r0, r0, r0
}
     6fc:	00000030 	andeq	r0, r0, r0, lsr r0
     700:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     704:	00018e02 	andeq	r8, r1, r2, lsl #28
void AONRTCIntHandler () {
     708:	00000014 	andeq	r0, r0, r4, lsl r0
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     70c:	000003a0 	andeq	r0, r0, r0, lsr #7
     710:	00000000 	andeq	r0, r0, r0
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     714:	00000038 	andeq	r0, r0, r8, lsr r0
		if (__pi_utims [0] == 0)
     718:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     71c:	00018e02 	andeq	r8, r1, r2, lsl #28
		if (*(__pi_utims [0])) {
     720:	00000040 	andeq	r0, r0, r0, asr #32
     724:	000003a0 	andeq	r0, r0, r0, lsr #7
			(*(__pi_utims [0]))--;
     728:	0000166c 	andeq	r1, r0, ip, ror #12
		if (__pi_utims [1] == 0)
     72c:	0000013c 	andeq	r0, r0, ip, lsr r1
		if (*(__pi_utims [1])) {
     730:	80100e41 	andshi	r0, r0, r1, asr #28
			aux_timer_inactive = 0;
     734:	82038104 	andhi	r8, r3, #4, 2
			(*(__pi_utims [1]))--;
     738:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
		if (__pi_utims [2] == 0)
     73c:	0b84380e 	bleq	fe10e77c <_estack+0xde10977c>
		if (*(__pi_utims [2])) {
     740:	09860a85 	stmibeq	r6, {r0, r2, r7, r9, fp}
			(*(__pi_utims [2]))--;
     744:	07880887 	streq	r0, [r8, r7, lsl #17]
		if (__pi_utims [3] != 0) {
     748:	058e0689 	streq	r0, [lr, #1673]	; 0x689
			if (*(__pi_utims [3])) {
     74c:	2c0e0a5e 			; <UNDEFINED> instruction: 0x2c0e0a5e
				aux_timer_inactive = 0;
     750:	c8c9ce42 	stmiagt	r9, {r1, r6, r9, sl, fp, lr, pc}^
				(*(__pi_utims [3]))--;
     754:	c4c5c6c7 	strbgt	ip, [r5], #1735	; 0x6c7
	if (__pi_systat.ledsts) {
     758:	c341100e 	movtgt	r1, #4110	; 0x100e
     75c:	0ec0c1c2 	acseqdm	f4, f2
		if (__pi_systat.ledblc++ == 0) {
     760:	000b4100 	andeq	r4, fp, r0, lsl #2
     764:	0000000c 	andeq	r0, r0, ip
			if (__pi_systat.ledblk) {
     768:	000003a0 	andeq	r0, r0, r0, lsr #7
     76c:	000017a8 	andeq	r1, r0, r8, lsr #15
     770:	00000024 	andeq	r0, r0, r4, lsr #32
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     774:	0000000c 	andeq	r0, r0, ip
     778:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
				if (__pi_systat.ledsts & 0x2)
     77c:	7c020001 	stcvc	0, cr0, [r2], {1}
     780:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     784:	00000014 	andeq	r0, r0, r4, lsl r0
				if (__pi_systat.ledsts & 0x4)
     788:	00000774 	andeq	r0, r0, r4, ror r7
				__pi_systat.ledblk = 0;
     78c:	000017cc 	andeq	r1, r0, ip, asr #15
     790:	00000016 	andeq	r0, r0, r6, lsl r0
			if (__pi_systat.fstblk)
     794:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     798:	00018e02 	andeq	r8, r1, r2, lsl #28
				__pi_systat.ledblc = 200;
     79c:	0000000c 	andeq	r0, r0, ip
	if (events & AON_RTC_EVFLAGS_CH0) {
     7a0:	00000774 	andeq	r0, r0, r4, ror r7
		cli_tim;
     7a4:	000017e2 	andeq	r1, r0, r2, ror #15
		__pi_new += setdel;
     7a8:	0000001a 	andeq	r0, r0, sl, lsl r0
     7ac:	00000018 	andeq	r0, r0, r8, lsl r0
		setdel = 0;
     7b0:	00000774 	andeq	r0, r0, r4, ror r7
		RISE_N_SHINE;
     7b4:	000017fc 	strdeq	r1, [r0], -ip
		__pi_new += setdel;
     7b8:	0000000e 	andeq	r0, r0, lr
		RISE_N_SHINE;
     7bc:	83080e41 	movwhi	r0, #36417	; 0x8e41
     7c0:	44018e02 	strmi	r8, [r1], #-3586	; 0xfffff1fe
		aux_timer_inactive = 1;
     7c4:	000ec3ce 	andeq	ip, lr, lr, asr #7
     7c8:	00000018 	andeq	r0, r0, r8, lsl r0
				if (__pi_systat.ledsts & 0x1)
     7cc:	00000774 	andeq	r0, r0, r4, ror r7
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     7d0:	0000180c 	andeq	r1, r0, ip, lsl #16
     7d4:	0000004c 	andeq	r0, r0, ip, asr #32
				if (__pi_systat.ledsts & 0x2)
     7d8:	83100e41 	tsthi	r0, #1040	; 0x410
     7dc:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     7e0:	00018e02 	andeq	r8, r1, r2, lsl #28
				if (__pi_systat.ledsts & 0x8)
     7e4:	00000020 	andeq	r0, r0, r0, lsr #32
				__pi_systat.ledblk = 1;
     7e8:	00000774 	andeq	r0, r0, r4, ror r7
     7ec:	00001858 	andeq	r1, r0, r8, asr r8
		if (aux_timer_inactive) {
     7f0:	0000008c 	andeq	r0, r0, ip, lsl #1
			cli_aux;
     7f4:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     7f8:	5f018e02 	svcpl	0x00018e02
     7fc:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     800:	560b4200 	strpl	r4, [fp], -r0, lsl #4
     804:	000ec4ce 	andeq	ip, lr, lr, asr #9
     808:	00000020 	andeq	r0, r0, r0, lsr #32
     80c:	00000774 	andeq	r0, r0, r4, ror r7
     810:	000018e4 	andeq	r1, r0, r4, ror #17
     814:	00000070 	andeq	r0, r0, r0, ror r0
     818:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
word tci_update_delay_ticks (Boolean force) {
     81c:	67018e02 	strvs	r8, [r1, -r2, lsl #28]
	cli_tim;
     820:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     824:	430b4200 	movwmi	r4, #45568	; 0xb200
	if (setdel) {
     828:	000ec4ce 	andeq	ip, lr, lr, asr #9
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     82c:	0000003c 	andeq	r0, r0, ip, lsr r0
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     830:	00000774 	andeq	r0, r0, r4, ror r7
     834:	00001954 	andeq	r1, r0, r4, asr r9
     838:	000000c0 	andeq	r0, r0, r0, asr #1
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     83c:	82080e41 	andhi	r0, r8, #1040	; 0x410
				AON_RTC_O_CH0CMP)) - gettav ());
     840:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
	return NO;
     844:	0a84300e 	beq	fe10c884 <_estack+0xde107884>
			setdel = 0;
     848:	08860985 	stmeq	r6, {r0, r2, r7, r8, fp}
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     84c:	06880787 	streq	r0, [r8], r7, lsl #15
     850:	048a0589 	streq	r0, [sl], #1417	; 0x589
}
     854:	0a6b038e 	beq	1ac1694 <__ccfg+0x1aa16ec>
		sti_tim;
     858:	ce42280e 	cdpgt	8, 4, cr2, cr2, cr14, {0}
		return YES;
     85c:	c7c8c9ca 	strbgt	ip, [r8, sl, asr #19]
     860:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
     864:	c2c34108 	sbcgt	r4, r3, #8, 2
     868:	0b41000e 	bleq	10408a8 <__ccfg+0x1020900>
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     86c:	0000001c 	andeq	r0, r0, ip, lsl r0
	UARTDisable (UART0_BASE);
     870:	00000774 	andeq	r0, r0, r4, ror r7
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     874:	00000000 	andeq	r0, r0, r0
	UARTDisable (UART0_BASE);
     878:	0000006c 	andeq	r0, r0, ip, rrx
	UARTConfigSetExpClk (UART0_BASE,
     87c:	83180e42 	tsthi	r8, #1056	; 0x420
     880:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     884:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     888:	00018e02 	andeq	r8, r1, r2, lsl #28
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     88c:	0000000c 	andeq	r0, r0, ip
     890:	00000774 	andeq	r0, r0, r4, ror r7
     894:	00001a14 	andeq	r1, r0, r4, lsl sl
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     898:	00000024 	andeq	r0, r0, r4, lsr #32
     89c:	00000018 	andeq	r0, r0, r8, lsl r0
     8a0:	00000774 	andeq	r0, r0, r4, ror r7
	urates [0] = rate;
     8a4:	00000000 	andeq	r0, r0, r0
}
     8a8:	00000080 	andeq	r0, r0, r0, lsl #1
     8ac:	83100e42 	tsthi	r0, #1056	; 0x420
     8b0:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     8b4:	00018e02 	andeq	r8, r1, r2, lsl #28
     8b8:	00000014 	andeq	r0, r0, r4, lsl r0
     8bc:	00000774 	andeq	r0, r0, r4, ror r7
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     8c0:	00000000 	andeq	r0, r0, r0
     8c4:	00000070 	andeq	r0, r0, r0, ror r0
     8c8:	83080e42 	movwhi	r0, #36418	; 0x8e42
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     8cc:	00018e02 	andeq	r8, r1, r2, lsl #28
     8d0:	00000018 	andeq	r0, r0, r8, lsl r0
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     8d4:	00000774 	andeq	r0, r0, r4, ror r7
     8d8:	00000000 	andeq	r0, r0, r0
	__pi_uart_setrate (urates [0], __pi_uart);
     8dc:	00000078 	andeq	r0, r0, r8, ror r0
     8e0:	83100e42 	tsthi	r0, #1056	; 0x420
     8e4:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     8e8:	00018e02 	andeq	r8, r1, r2, lsl #28
     8ec:	00000020 	andeq	r0, r0, r0, lsr #32
     8f0:	00000774 	andeq	r0, r0, r4, ror r7
     8f4:	00001a38 	andeq	r1, r0, r8, lsr sl
	switch (operation) {
     8f8:	000000bc 	strheq	r0, [r0], -ip
static int ioreq_uart_a (int operation, char *buf, int len) {
     8fc:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
     900:	86048505 	strhi	r8, [r4], -r5, lsl #10
     904:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     908:	0e0a6701 	cdpeq	7, 0, cr6, cr10, cr1, {0}
     90c:	000b4114 	andeq	r4, fp, r4, lsl r1
				*buf++ = uart_a_read;
     910:	00000018 	andeq	r0, r0, r8, lsl r0
     914:	00000774 	andeq	r0, r0, r4, ror r7
			while (len && uart_a_char_available) {
     918:	00000000 	andeq	r0, r0, r0
     91c:	0000003a 	andeq	r0, r0, sl, lsr r0
     920:	83100e41 	tsthi	r0, #1040	; 0x410
			if (len != operation) {
     924:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
}
     928:	00018e02 	andeq	r8, r1, r2, lsl #28
     92c:	00000018 	andeq	r0, r0, r8, lsl r0
			uart_a_disable_int;
     930:	00000774 	andeq	r0, r0, r4, ror r7
			if (uart_a_char_available) {
     934:	00000000 	andeq	r0, r0, r0
				*buf++ = uart_a_read;
     938:	00000038 	andeq	r0, r0, r8, lsr r0
			uart_a_disable_int;
     93c:	83100e41 	tsthi	r0, #1040	; 0x410
     940:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
			if (uart_a_char_available) {
     944:	00018e02 	andeq	r8, r1, r2, lsl #28
     948:	0000000c 	andeq	r0, r0, ip
				uart_a_enable_int;
     94c:	00000774 	andeq	r0, r0, r4, ror r7
     950:	00000000 	andeq	r0, r0, r0
				goto Redo_rx;
     954:	0000000a 	andeq	r0, r0, sl
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     958:	00000018 	andeq	r0, r0, r8, lsl r0
     95c:	00000774 	andeq	r0, r0, r4, ror r7
			return -2;
     960:	00001af4 	strdeq	r1, [r0], -r4
     964:	0000002c 	andeq	r0, r0, ip, lsr #32
				uart_a_write (*buf);
     968:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
     96c:	4c018e02 	stcmi	14, cr8, [r1], {2}
			while (len && uart_a_room_in_tx) {
     970:	000ec4ce 	andeq	ip, lr, lr, asr #9
     974:	0000001c 	andeq	r0, r0, ip, lsl r0
     978:	00000774 	andeq	r0, r0, r4, ror r7
			if (len != operation) {
     97c:	00001b20 	andeq	r1, r0, r0, lsr #22
			uart_a_disable_int;
     980:	00000060 	andeq	r0, r0, r0, rrx
     984:	83080e41 	movwhi	r0, #36417	; 0x8e41
			if (uart_a_room_in_tx) {
     988:	61018e02 	tstvs	r1, r2, lsl #28
     98c:	0ec3ce0a 	cdpeq	14, 12, cr12, cr3, cr10, {0}
				uart_a_enable_int;
     990:	000b4300 	andeq	r4, fp, r0, lsl #6
     994:	00000014 	andeq	r0, r0, r4, lsl r0
				*buf++ = uart_a_read;
     998:	00000774 	andeq	r0, r0, r4, ror r7
			if (uart_a_room_in_tx) {
     99c:	00000000 	andeq	r0, r0, r0
				uart_a_write (*buf);
     9a0:	00000040 	andeq	r0, r0, r0, asr #32
     9a4:	83080e42 	movwhi	r0, #36418	; 0x8e42
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     9a8:	00018e02 	andeq	r8, r1, r2, lsl #28
     9ac:	00000014 	andeq	r0, r0, r4, lsl r0
			uart_a_enable_int;
     9b0:	00000774 	andeq	r0, r0, r4, ror r7
     9b4:	00000000 	andeq	r0, r0, r0
     9b8:	0000002c 	andeq	r0, r0, ip, lsr #32
			return 0;
     9bc:	83080e42 	movwhi	r0, #36418	; 0x8e42
			if (len == UART_CNTRL_SETRATE) {
     9c0:	00018e02 	andeq	r8, r1, r2, lsl #28
				if (__pi_uart_setrate (*((word*)buf),
     9c4:	0000001c 	andeq	r0, r0, ip, lsl r0
     9c8:	00000774 	andeq	r0, r0, r4, ror r7
     9cc:	00000000 	andeq	r0, r0, r0
				syserror (EREQPAR, "uar");
     9d0:	0000003c 	andeq	r0, r0, ip, lsr r0
			syserror (ENOOPER, "uai");
     9d4:	83180e41 	tsthi	r8, #1040	; 0x410
			if (len == UART_CNTRL_GETRATE) {
     9d8:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
				return 1;
     9dc:	87038604 	strhi	r8, [r3, -r4, lsl #12]
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     9e0:	00018e02 	andeq	r8, r1, r2, lsl #28
			syserror (ENOOPER, "uai");
     9e4:	0000000c 	andeq	r0, r0, ip
     9e8:	00000774 	andeq	r0, r0, r4, ror r7
     9ec:	00000000 	andeq	r0, r0, r0
     9f0:	00000006 	andeq	r0, r0, r6
     9f4:	0000001c 	andeq	r0, r0, ip, lsl r0
     9f8:	00000774 	andeq	r0, r0, r4, ror r7
     9fc:	00001b80 	andeq	r1, r0, r0, lsl #23
     a00:	00000068 	andeq	r0, r0, r8, rrx
     a04:	83180e41 	tsthi	r8, #1040	; 0x410
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     a08:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
void UART0IntHandler () {
     a0c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     a10:	00018e02 	andeq	r8, r1, r2, lsl #28
     a14:	00000014 	andeq	r0, r0, r4, lsl r0
     a18:	00000774 	andeq	r0, r0, r4, ror r7
     a1c:	00001be8 	andeq	r1, r0, r8, ror #23
     a20:	00000050 	andeq	r0, r0, r0, asr r0
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     a24:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
     a28:	00018e02 	andeq	r8, r1, r2, lsl #28
		RISE_N_SHINE;
     a2c:	0000002c 	andeq	r0, r0, ip, lsr #32
     a30:	00000774 	andeq	r0, r0, r4, ror r7
		i_trigger (devevent (UART_A, READ));
     a34:	00001c38 	andeq	r1, r0, r8, lsr ip
     a38:	0000009c 	muleq	r0, ip, r0
     a3c:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
     a40:	86088509 	strhi	r8, [r8], -r9, lsl #10
     a44:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
     a48:	8a048905 	bhi	122e64 <__ccfg+0x102ebc>
     a4c:	8e028b03 	vmlahi.f64	d8, d2, d3
     a50:	380e4501 	stmdacc	lr, {r0, r8, sl, lr}
     a54:	240e0a56 	strcs	r0, [lr], #-2646	; 0xfffff5aa
     a58:	00000b42 	andeq	r0, r0, r2, asr #22
     a5c:	00000014 	andeq	r0, r0, r4, lsl r0
     a60:	00000774 	andeq	r0, r0, r4, ror r7
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     a64:	00001cd4 	ldrdeq	r1, [r0], -r4
     a68:	00000040 	andeq	r0, r0, r0, asr #32
     a6c:	83080e42 	movwhi	r0, #36418	; 0x8e42
		i_trigger (devevent (UART_A, WRITE));
     a70:	00018e02 	andeq	r8, r1, r2, lsl #28
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     a74:	00000014 	andeq	r0, r0, r4, lsl r0
     a78:	00000774 	andeq	r0, r0, r4, ror r7
		RISE_N_SHINE;
     a7c:	00001d14 	andeq	r1, r0, r4, lsl sp
     a80:	00000034 	andeq	r0, r0, r4, lsr r0
     a84:	83080e42 	movwhi	r0, #36418	; 0x8e42
		i_trigger (devevent (UART_A, WRITE));
     a88:	00018e02 	andeq	r8, r1, r2, lsl #28
     a8c:	00000018 	andeq	r0, r0, r8, lsl r0
     a90:	00000774 	andeq	r0, r0, r4, ror r7
     a94:	00001d48 	andeq	r1, r0, r8, asr #26
     a98:	0000003c 	andeq	r0, r0, ip, lsr r0
     a9c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     aa0:	57018e02 	strpl	r8, [r1, -r2, lsl #28]
     aa4:	000ec4ce 	andeq	ip, lr, lr, asr #9
     aa8:	00000018 	andeq	r0, r0, r8, lsl r0
     aac:	00000774 	andeq	r0, r0, r4, ror r7
     ab0:	00000000 	andeq	r0, r0, r0
}
     ab4:	0000003c 	andeq	r0, r0, ip, lsr r0
     ab8:	83100e42 	tsthi	r0, #1056	; 0x420
     abc:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     ac0:	00018e02 	andeq	r8, r1, r2, lsl #28
     ac4:	0000000c 	andeq	r0, r0, ip
void __buttons_setirq (int val) {
     ac8:	00000774 	andeq	r0, r0, r4, ror r7
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     acc:	00001d84 	andeq	r1, r0, r4, lsl #27
     ad0:	00000002 	andeq	r0, r0, r2
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     ad4:	0000000c 	andeq	r0, r0, ip
     ad8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     adc:	7c020001 	stcvc	0, cr0, [r2], {1}
		bn = BUTTON_GPIO (__button_list [i]);
     ae0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     ae4:	0000000c 	andeq	r0, r0, ip
     ae8:	00000ad4 	ldrdeq	r0, [r0], -r4
     aec:	00001d86 	andeq	r1, r0, r6, lsl #27
     af0:	00000002 	andeq	r0, r0, r2
     af4:	0000000c 	andeq	r0, r0, ip
     af8:	00000ad4 	ldrdeq	r0, [r0], -r4
}
     afc:	00001d88 	andeq	r1, r0, r8, lsl #27
     b00:	00000002 	andeq	r0, r0, r2
     b04:	0000000c 	andeq	r0, r0, ip
     b08:	00000ad4 	ldrdeq	r0, [r0], -r4
void __pinlist_setirq (int val) {
     b0c:	00001d8a 	andeq	r1, r0, sl, lsl #27
	for (i = 0; i < N_PINLIST; i++) {
     b10:	00000002 	andeq	r0, r0, r2
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     b14:	00000014 	andeq	r0, r0, r4, lsl r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     b18:	00000ad4 	ldrdeq	r0, [r0], -r4
	for (i = 0; i < N_PINLIST; i++) {
     b1c:	00001d8c 	andeq	r1, r0, ip, lsl #27
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     b20:	00000044 	andeq	r0, r0, r4, asr #32
     b24:	83080e41 	movwhi	r0, #36417	; 0x8e41
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     b28:	00018e02 	andeq	r8, r1, r2, lsl #28
     b2c:	0000000c 	andeq	r0, r0, ip
     b30:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	for (i = 0; i < N_PINLIST; i++) {
     b34:	7c020001 	stcvc	0, cr0, [r2], {1}
}
     b38:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     b3c:	0000000c 	andeq	r0, r0, ip
     b40:	00000b2c 	andeq	r0, r0, ip, lsr #22
     b44:	00000000 	andeq	r0, r0, r0
void GPIOIntHandler () {
     b48:	00000002 	andeq	r0, r0, r2
if (buttons_int) {
     b4c:	00000018 	andeq	r0, r0, r8, lsl r0
     b50:	00000b2c 	andeq	r0, r0, ip, lsr #22
	buttons_disable ();
     b54:	00000000 	andeq	r0, r0, r0
     b58:	00000058 	andeq	r0, r0, r8, asr r0
	i_trigger ((aword)&__button_list);
     b5c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     b60:	86038504 	strhi	r8, [r3], -r4, lsl #10
     b64:	00018e02 	andeq	r8, r1, r2, lsl #28
     b68:	0000000c 	andeq	r0, r0, ip
     b6c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     b70:	7c020001 	stcvc	0, cr0, [r2], {1}
     b74:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     b78:	0000002c 	andeq	r0, r0, ip, lsr #32
     b7c:	00000b68 	andeq	r0, r0, r8, ror #22
     b80:	00000000 	andeq	r0, r0, r0
     b84:	000000cc 	andeq	r0, r0, ip, asr #1
	RISE_N_SHINE;
     b88:	83100e42 	tsthi	r0, #1056	; 0x420
     b8c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     b90:	02018e02 	andeq	r8, r1, #2, 28
if (pin_sensor_int) {
     b94:	c5ce0a54 	strbgt	r0, [lr, #2644]	; 0xa54
     b98:	000ec3c4 	andeq	ip, lr, r4, asr #7
	i_trigger ((aword)(&__input_pins));
     b9c:	ce420b44 	vmlsgt.f64	d16, d2, d4
     ba0:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
     ba4:	00000000 	andeq	r0, r0, r0
     ba8:	00000024 	andeq	r0, r0, r4, lsr #32
     bac:	00000b68 	andeq	r0, r0, r8, ror #22
     bb0:	00000000 	andeq	r0, r0, r0
     bb4:	00000038 	andeq	r0, r0, r8, lsr r0
     bb8:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
     bbc:	44018e02 	strmi	r8, [r1], #-3586	; 0xfffff1fe
     bc0:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     bc4:	4a0b4300 	bmi	2d17cc <__ccfg+0x2b1824>
	__pinsen_disable_and_clear;
     bc8:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
	RISE_N_SHINE;
     bcc:	000b4300 	andeq	r4, fp, r0, lsl #6
     bd0:	0000000c 	andeq	r0, r0, ip
     bd4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
}
     bd8:	7c020001 	stcvc	0, cr0, [r2], {1}
     bdc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     be0:	00000018 	andeq	r0, r0, r8, lsl r0
     be4:	00000bd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     be8:	00001dd8 	ldrdeq	r1, [r0], -r8
void system_init () {
     bec:	00000034 	andeq	r0, r0, r4, lsr r0
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     bf0:	84100e45 	ldrhi	r0, [r0], #-3653	; 0xfffff1bb
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     bf4:	86038504 	strhi	r8, [r3], -r4, lsl #10
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     bf8:	00018e02 	andeq	r8, r1, r2, lsl #28
     bfc:	00000018 	andeq	r0, r0, r8, lsl r0
     c00:	00000bd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     c04:	00001e0c 	andeq	r1, r0, ip, lsl #28
     c08:	00000030 	andeq	r0, r0, r0, lsr r0
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     c0c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     c10:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     c14:	00000001 	andeq	r0, r0, r1
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     c18:	00000014 	andeq	r0, r0, r4, lsl r0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     c1c:	00000bd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     c20:	00001e3c 	andeq	r1, r0, ip, lsr lr
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     c24:	00000018 	andeq	r0, r0, r8, lsl r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     c28:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     c2c:	00018e02 	andeq	r8, r1, r2, lsl #28
		pin = (port_confs [i] >> 19) & 0x1f;
     c30:	0000001c 	andeq	r0, r0, ip, lsl r0
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     c34:	00000bd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
		pin = (port_confs [i] >> 19) & 0x1f;
     c38:	00001e54 	andeq	r1, r0, r4, asr lr
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     c3c:	00000054 	andeq	r0, r0, r4, asr r0
     c40:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
     c44:	86058506 	strhi	r8, [r5], -r6, lsl #10
     c48:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
		if (port_confs [i] & 0x80)
     c4c:	00018e02 	andeq	r8, r1, r2, lsl #28
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     c50:	0000001c 	andeq	r0, r0, ip, lsl r0
     c54:	00000bd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
		if (port_confs [i] & 0x40)
     c58:	00001ea8 	andeq	r1, r0, r8, lsr #29
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     c5c:	00000040 	andeq	r0, r0, r0, asr #32
     c60:	83180e41 	tsthi	r8, #1040	; 0x410
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     c64:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     c68:	87038604 	strhi	r8, [r3, -r4, lsl #12]
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     c6c:	00018e02 	andeq	r8, r1, r2, lsl #28
	all_leds_blink;
     c70:	00000014 	andeq	r0, r0, r4, lsl r0
     c74:	00000bd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     c78:	00001ee8 	andeq	r1, r0, r8, ror #29
     c7c:	00000024 	andeq	r0, r0, r4, lsr #32
     c80:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     c84:	00018e02 	andeq	r8, r1, r2, lsl #28
     c88:	00000014 	andeq	r0, r0, r4, lsl r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     c8c:	00000bd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     c90:	00001f0c 	andeq	r1, r0, ip, lsl #30
     c94:	00000014 	andeq	r0, r0, r4, lsl r0
     c98:	83080e41 	movwhi	r0, #36417	; 0x8e41
     c9c:	00018e02 	andeq	r8, r1, r2, lsl #28
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     ca0:	0000000c 	andeq	r0, r0, ip
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     ca4:	00000bd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     ca8:	00001f20 	andeq	r1, r0, r0, lsr #30
	IntEnable (INT_AON_RTC_COMB);
     cac:	00000014 	andeq	r0, r0, r4, lsl r0
     cb0:	0000001c 	andeq	r0, r0, ip, lsl r0
     cb4:	00000bd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	__pi_malloc_init ();
     cb8:	00000000 	andeq	r0, r0, r0
	IntEnable (INT_AON_GPIO_EDGE);
     cbc:	00000064 	andeq	r0, r0, r4, rrx
     cc0:	83180e41 	tsthi	r8, #1040	; 0x410
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     cc4:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     cc8:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     ccc:	00018e02 	andeq	r8, r1, r2, lsl #28
     cd0:	0000001c 	andeq	r0, r0, ip, lsl r0
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     cd4:	00000bd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     cd8:	00000000 	andeq	r0, r0, r0
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     cdc:	00000128 	andeq	r0, r0, r8, lsr #2
     ce0:	83180e41 	tsthi	r8, #1040	; 0x410
     ce4:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
	urates [0] = UART_RATE / 100;
     ce8:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     cec:	00018e02 	andeq	r8, r1, r2, lsl #28
	reinit_uart ();
     cf0:	00000024 	andeq	r0, r0, r4, lsr #32
	EXTRA_INITIALIZERS;
     cf4:	00000bd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     cf8:	00000000 	andeq	r0, r0, r0
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     cfc:	000000ec 	andeq	r0, r0, ip, ror #1
     d00:	83280e42 			; <UNDEFINED> instruction: 0x83280e42
     d04:	8509840a 	strhi	r8, [r9, #-1034]	; 0xfffffbf6
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     d08:	87078608 	strhi	r8, [r7, -r8, lsl #12]
     d0c:	89058806 	stmdbhi	r5, {r1, r2, fp, pc}
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     d10:	8b038a04 	blhi	e3528 <__ccfg+0xc3580>
     d14:	00018e02 	andeq	r8, r1, r2, lsl #28
			devinit [i] . init (devinit [i] . param);
     d18:	0000000c 	andeq	r0, r0, ip
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     d1c:	00000bd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     d20:	00000000 	andeq	r0, r0, r0
     d24:	00000002 	andeq	r0, r0, r2
	IntEnable (INT_UART0_COMB);
     d28:	0000000c 	andeq	r0, r0, ip
     d2c:	00000bd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
}
     d30:	00000000 	andeq	r0, r0, r0
	tci_run_auxiliary_timer ();
     d34:	00000004 	andeq	r0, r0, r4
		diag ("");
     d38:	0000000c 	andeq	r0, r0, ip
     d3c:	00000bd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     d40:	00000000 	andeq	r0, r0, r0
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     d44:	00000014 	andeq	r0, r0, r4, lsl r0
		diag ("Leftover RAM: %d bytes",
     d48:	00000018 	andeq	r0, r0, r8, lsl r0
     d4c:	00000bd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     d50:	00000000 	andeq	r0, r0, r0
     d54:	0000001a 	andeq	r0, r0, sl, lsl r0
     d58:	83080e41 	movwhi	r0, #36417	; 0x8e41
     d5c:	4a018e02 	bmi	6456c <__ccfg+0x445c4>
     d60:	000ec3ce 	andeq	ip, lr, lr, asr #7
     d64:	0000000c 	andeq	r0, r0, ip
     d68:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     d6c:	7c020001 	stcvc	0, cr0, [r2], {1}
     d70:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     d74:	0000001c 	andeq	r0, r0, ip, lsl r0
     d78:	00000d64 	andeq	r0, r0, r4, ror #26
     d7c:	00001f34 	andeq	r1, r0, r4, lsr pc
     d80:	00000078 	andeq	r0, r0, r8, ror r0
     d84:	83180e41 	tsthi	r8, #1040	; 0x410
     d88:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     d8c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     d90:	00018e02 	andeq	r8, r1, r2, lsl #28
     d94:	0000000c 	andeq	r0, r0, ip
     d98:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     d9c:	7c020001 	stcvc	0, cr0, [r2], {1}
     da0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
     da4:	00000030 	andeq	r0, r0, r0, lsr r0
     da8:	00000d94 	muleq	r0, r4, sp
     dac:	00001fac 	andeq	r1, r0, ip, lsr #31
     db0:	00000054 	andeq	r0, r0, r4, asr r0
     db4:	810c0e41 	tsthi	ip, r1, asr #28
     db8:	83028203 	movwhi	r8, #8707	; 0x2203
     dbc:	280e4101 	stmdacs	lr, {r0, r8, lr}
     dc0:	06850784 	streq	r0, [r5], r4, lsl #15
}
     dc4:	048e0586 	streq	r0, [lr], #1414	; 0x586
__attribute__ ((noreturn)) void __pi_release () {
     dc8:	421c0e61 	andsmi	r0, ip, #1552	; 0x610
     dcc:	c4c5c6ce 	strbgt	ip, [r5], #1742	; 0x6ce
     dd0:	c3410c0e 	movtgt	r0, #7182	; 0x1c0e
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     dd4:	000ec1c2 	andeq	ip, lr, r2, asr #3
	check_stack_overflow;
     dd8:	0000000c 	andeq	r0, r0, ip
     ddc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     de0:	7c020001 	stcvc	0, cr0, [r2], {1}
	update_n_wake (MAX_WORD, NO);
     de4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     de8:	00000030 	andeq	r0, r0, r0, lsr r0
     dec:	00000dd8 	ldrdeq	r0, [r0], -r8
	for_all_tasks (__pi_curr) {
     df0:	00002000 	andeq	r2, r0, r0
     df4:	00000060 	andeq	r0, r0, r0, rrx
     df8:	810c0e41 	tsthi	ip, r1, asr #28
  __ASM volatile ("cpsid i" : : : "memory");
     dfc:	83028203 	movwhi	r8, #8707	; 0x2203
	__SLEEP;
     e00:	200e4101 	andcs	r4, lr, r1, lsl #2
     e04:	05850684 	streq	r0, [r5, #1668]	; 0x684
     e08:	0a64048e 	beq	1902048 <__ccfg+0x18e20a0>
     e0c:	ce42180e 	cdpgt	8, 4, cr1, cr2, cr14, {0}
	system_event_count ++;
     e10:	0c0ec4c5 	cfstrseq	mvf12, [lr], {197}	; 0xc5
     e14:	c1c2c341 	bicgt	ip, r2, r1, asr #6
	switch (__pi_systat.effpdm) {
     e18:	0b41000e 	bleq	1040e58 <__ccfg+0x1020eb0>
     e1c:	0000000c 	andeq	r0, r0, ip
     e20:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     e24:	7c020001 	stcvc	0, cr0, [r2], {1}
			__WFI ();
     e28:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     e2c:	0000000c 	andeq	r0, r0, ip
     e30:	00000e1c 	andeq	r0, r0, ip, lsl lr
	check_stack_overflow;
     e34:	00002060 	andeq	r2, r0, r0, rrx
     e38:	00000020 	andeq	r0, r0, r0, lsr #32
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     e3c:	00000018 	andeq	r0, r0, r8, lsl r0
     e40:	00000e1c 	andeq	r0, r0, ip, lsl lr
			(__pi_curr->code) (tstate (__pi_curr));
     e44:	00002080 	andeq	r2, r0, r0, lsl #1
			goto Redo;
     e48:	00000190 	muleq	r0, r0, r1
	for_all_tasks (__pi_curr) {
     e4c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     e50:	86038504 	strhi	r8, [r3], -r4, lsl #10
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     e54:	00018e02 	andeq	r8, r1, r2, lsl #28
     e58:	00000018 	andeq	r0, r0, r8, lsl r0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     e5c:	00000e1c 	andeq	r0, r0, ip, lsl lr
     e60:	00002210 	andeq	r2, r0, r0, lsl r2
     e64:	00000048 	andeq	r0, r0, r8, asr #32
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     e68:	83100e41 	tsthi	r0, #1040	; 0x410
     e6c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     e70:	00018e02 	andeq	r8, r1, r2, lsl #28
     e74:	00000014 	andeq	r0, r0, r4, lsl r0
			__WFI ();
     e78:	00000e1c 	andeq	r0, r0, ip, lsl lr
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     e7c:	00002258 	andeq	r2, r0, r8, asr r2
     e80:	00000024 	andeq	r0, r0, r4, lsr #32
}
     e84:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     e88:	00018e02 	andeq	r8, r1, r2, lsl #28
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     e8c:	00000018 	andeq	r0, r0, r8, lsl r0
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     e90:	00000e1c 	andeq	r0, r0, ip, lsl lr
     e94:	0000227c 	andeq	r2, r0, ip, ror r2
			PRCMPowerDomainOff (__pi_systat.ondmns |
     e98:	0000005c 	andeq	r0, r0, ip, asr r0
     e9c:	83100e41 	tsthi	r0, #1040	; 0x410
     ea0:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     ea4:	00018e02 	andeq	r8, r1, r2, lsl #28
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ea8:	00000018 	andeq	r0, r0, r8, lsl r0
     eac:	00000e1c 	andeq	r0, r0, ip, lsl lr
     eb0:	000022d8 	ldrdeq	r2, [r0], -r8
     eb4:	00000038 	andeq	r0, r0, r8, lsr r0
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     eb8:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     ebc:	86038504 	strhi	r8, [r3], -r4, lsl #10
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     ec0:	00018e02 	andeq	r8, r1, r2, lsl #28
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     ec4:	00000028 	andeq	r0, r0, r8, lsr #32
     ec8:	00000e1c 	andeq	r0, r0, ip, lsl lr
     ecc:	00002310 	andeq	r2, r0, r0, lsl r3
     ed0:	00000180 	andeq	r0, r0, r0, lsl #3
     ed4:	84180e45 	ldrhi	r0, [r8], #-3653	; 0xfffff1bb
			SysCtrlSetRechargeBeforePowerDown
     ed8:	86058506 	strhi	r8, [r5], -r6, lsl #10
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     edc:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     ee0:	02018e02 	andeq	r8, r1, #2, 28
     ee4:	c7c8ce88 	strbgt	ip, [r8, r8, lsl #29]
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     ee8:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
     eec:	00000000 	andeq	r0, r0, r0
     ef0:	00000030 	andeq	r0, r0, r0, lsr r0
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     ef4:	00000e1c 	andeq	r0, r0, ip, lsl lr
     ef8:	00002490 	muleq	r0, r0, r4
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     efc:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     f00:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
     f04:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
     f08:	87058606 	strhi	r8, [r5, -r6, lsl #12]
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     f0c:	89038804 	stmdbhi	r3, {r2, fp, pc}
			while (!(AONWUCPowerStatusGet () &
     f10:	02018e02 	andeq	r8, r1, #2, 28
			PRCMPowerDomainOn (__pi_systat.ondmns);
     f14:	c9ce0a4d 	stmibgt	lr, {r0, r2, r3, r6, r9, fp}^
     f18:	c5c6c7c8 	strbgt	ip, [r6, #1992]	; 0x7c8
     f1c:	000ec3c4 	andeq	ip, lr, r4, asr #7
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     f20:	00000b46 	andeq	r0, r0, r6, asr #22
     f24:	00000020 	andeq	r0, r0, r0, lsr #32
     f28:	00000e1c 	andeq	r0, r0, ip, lsl lr
     f2c:	00002560 	andeq	r2, r0, r0, ror #10
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     f30:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     f34:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     f38:	86038504 	strhi	r8, [r3], -r4, lsl #10
     f3c:	02018e02 	andeq	r8, r1, #2, 28
			SysCtrlAdjustRechargeAfterPowerDown ();
     f40:	c5c6ced8 	strbgt	ip, [r6, #3800]	; 0xed8
			reinit_uart ();
     f44:	00000ec4 	andeq	r0, r0, r4, asr #29
     f48:	00000018 	andeq	r0, r0, r8, lsl r0
     f4c:	00000e1c 	andeq	r0, r0, ip, lsl lr
}
     f50:	00002750 	andeq	r2, r0, r0, asr r7
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     f54:	00000070 	andeq	r0, r0, r0, ror r0
     f58:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     f5c:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     f60:	00000001 	andeq	r0, r0, r1
     f64:	00000024 	andeq	r0, r0, r4, lsr #32
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     f68:	00000e1c 	andeq	r0, r0, ip, lsl lr
     f6c:	000027c0 	andeq	r2, r0, r0, asr #15
     f70:	00000174 	andeq	r0, r0, r4, ror r1
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     f74:	83280e42 			; <UNDEFINED> instruction: 0x83280e42
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     f78:	8509840a 	strhi	r8, [r9, #-1034]	; 0xfffffbf6
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     f7c:	87078608 	strhi	r8, [r7, -r8, lsl #12]
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     f80:	89058806 	stmdbhi	r5, {r1, r2, fp, pc}
     f84:	8b038a04 	blhi	e379c <__ccfg+0xc37f4>
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     f88:	00018e02 	andeq	r8, r1, r2, lsl #28
     f8c:	0000000c 	andeq	r0, r0, ip
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     f90:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     f94:	7c020001 	stcvc	0, cr0, [r2], {1}
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     f98:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     f9c:	00000014 	andeq	r0, r0, r4, lsl r0
			PRCMPowerDomainOff (
     fa0:	00000f8c 	andeq	r0, r0, ip, lsl #31
     fa4:	00002934 	andeq	r2, r0, r4, lsr r9
	__SLEEP;
     fa8:	00000024 	andeq	r0, r0, r4, lsr #32
     fac:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
  __ASM volatile ("cpsie i" : : : "memory");
     fb0:	00018e02 	andeq	r8, r1, r2, lsl #28
	goto Redo;
     fb4:	0000000c 	andeq	r0, r0, ip
     fb8:	00000f8c 	andeq	r0, r0, ip, lsl #31
     fbc:	00002958 	andeq	r2, r0, r8, asr r9
     fc0:	00000024 	andeq	r0, r0, r4, lsr #32
     fc4:	0000000c 	andeq	r0, r0, ip
     fc8:	00000f8c 	andeq	r0, r0, ip, lsl #31
     fcc:	0000297c 	andeq	r2, r0, ip, ror r9
     fd0:	00000008 	andeq	r0, r0, r8
     fd4:	0000000c 	andeq	r0, r0, ip
     fd8:	00000f8c 	andeq	r0, r0, ip, lsl #31
     fdc:	00002984 	andeq	r2, r0, r4, lsl #19
     fe0:	00000004 	andeq	r0, r0, r4
     fe4:	0000000c 	andeq	r0, r0, ip
     fe8:	00000f8c 	andeq	r0, r0, ip, lsl #31
     fec:	00002988 	andeq	r2, r0, r8, lsl #19
     ff0:	00000004 	andeq	r0, r0, r4
     ff4:	00000018 	andeq	r0, r0, r8, lsl r0
     ff8:	00000f8c 	andeq	r0, r0, ip, lsl #31
     ffc:	0000298c 	andeq	r2, r0, ip, lsl #19
    1000:	00000048 	andeq	r0, r0, r8, asr #32
    1004:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    1008:	86038504 	strhi	r8, [r3], -r4, lsl #10
    100c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1010:	0000000c 	andeq	r0, r0, ip
    1014:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1018:	7c020001 	stcvc	0, cr0, [r2], {1}
    101c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
	cli_tim;
    1020:	00000028 	andeq	r0, r0, r8, lsr #32
    1024:	00001010 	andeq	r1, r0, r0, lsl r0
    1028:	000029d4 	ldrdeq	r2, [r0], -r4
	diag ("PicOS halted");
    102c:	00000070 	andeq	r0, r0, r0, ror r0
	mdelay (500);
    1030:	84200e41 	strthi	r0, [r0], #-3649	; 0xfffff1bf
    1034:	86048505 	strhi	r8, [r4], -r5, lsl #10
	setpowermode (2);
    1038:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
	__PCB = NULL;
    103c:	0e0a4701 	cdpeq	7, 0, cr4, cr10, cr1, {0}
	release;
    1040:	c7ce4214 	bfigt	r4, r4, #4, #11
    1044:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
    1048:	000b4200 	andeq	r4, fp, r0, lsl #4
    104c:	0000000c 	andeq	r0, r0, ip
int main (void) {
    1050:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    1054:	7c020001 	stcvc	0, cr0, [r2], {1}
    1058:	000d0c0e 	andeq	r0, sp, lr, lsl #24
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    105c:	00000028 	andeq	r0, r0, r8, lsr #32
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    1060:	0000104c 	andeq	r1, r0, ip, asr #32
	system_init ();
    1064:	00002a44 	andeq	r2, r0, r4, asr #20
	tcv_init ();
    1068:	0000011c 	andeq	r0, r0, ip, lsl r1
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    106c:	84200e41 	strthi	r0, [r0], #-3649	; 0xfffff1bf
    1070:	86048505 	strhi	r8, [r4], -r5, lsl #10
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
    1074:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    1078:	0e7c0201 	cdpeq	2, 7, cr0, cr12, cr1, {0}
    107c:	c7ce4214 	bfigt	r4, r4, #4, #11
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    1080:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
    1084:	00000000 	andeq	r0, r0, r0
	delay (16, 0);
    1088:	0000000c 	andeq	r0, r0, ip
    108c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1090:	7c020001 	stcvc	0, cr0, [r2], {1}
	__pi_release ();
    1094:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1098:	0000000c 	andeq	r0, r0, ip
    109c:	00001088 	andeq	r1, r0, r8, lsl #1
    10a0:	00002b60 	andeq	r2, r0, r0, ror #22
    10a4:	00000020 	andeq	r0, r0, r0, lsr #32
    10a8:	00000028 	andeq	r0, r0, r8, lsr #32
    10ac:	00001088 	andeq	r1, r0, r8, lsl #1
static void killev (__pi_pcb_t *pid) {
    10b0:	00002b80 	andeq	r2, r0, r0, lsl #23
	wfun = (aword)(pid->code);
    10b4:	00000230 	andeq	r0, r0, r0, lsr r2
	for_all_tasks (i) {
    10b8:	84300e42 	ldrthi	r0, [r0], #-3650	; 0xfffff1be
		for (j = 0; j < nevents (i); j++) {
    10bc:	86078508 	strhi	r8, [r7], -r8, lsl #10
    10c0:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
    10c4:	8a038904 	bhi	e34dc <__ccfg+0xc3534>
			    || i->Events [j] . Event == wfun
    10c8:	02018e02 	andeq	r8, r1, #2, 28
		for (j = 0; j < nevents (i); j++) {
    10cc:	200e0a4f 	andcs	r0, lr, pc, asr #20
			if (i->Events [j] . Event == (aword)pid
    10d0:	00000b42 	andeq	r0, r0, r2, asr #22
    10d4:	0000001c 	andeq	r0, r0, ip, lsl r0
    10d8:	00001088 	andeq	r1, r0, r8, lsl #1
				wakeupev (i, j);
    10dc:	00002db0 			; <UNDEFINED> instruction: 0x00002db0
    10e0:	00000050 	andeq	r0, r0, r0, asr r0
	for_all_tasks (i) {
    10e4:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
}
    10e8:	86058506 	strhi	r8, [r5], -r6, lsl #10
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    10ec:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
static void qfree (aword *ch) {
    10f0:	00018e02 	andeq	r8, r1, r2, lsl #28
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    10f4:	0000000c 	andeq	r0, r0, ip
	cc = (aword*)(mpools + MA_NP);
    10f8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	m_setnextp (ch, chunk);
    10fc:	7c020001 	stcvc	0, cr0, [r2], {1}
	m_setnextp (cc, ch);
    1100:	000d0c0e 	andeq	r0, sp, lr, lsl #24
}
    1104:	00000020 	andeq	r0, r0, r0, lsr #32
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    1108:	000010f4 	strdeq	r1, [r0], -r4
    110c:	00002e00 	andeq	r2, r0, r0, lsl #28
    1110:	00000390 	muleq	r0, r0, r3
			m_setnextp (cc, m_nextp (chunk));
    1114:	841c0e43 	ldrhi	r0, [ip], #-3651	; 0xfffff1bd
			m_size (chunk) += m_hdrlen + m_size (ch);
    1118:	86068507 	strhi	r8, [r6], -r7, lsl #10
    111c:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
    1120:	8e028903 	vmlahi.f16	s16, s4, s6	; <UNPREDICTABLE>
    1124:	00000001 	andeq	r0, r0, r1
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    1128:	0000000c 	andeq	r0, r0, ip
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    112c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1130:	7c020001 	stcvc	0, cr0, [r2], {1}
    1134:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1138:	00000024 	andeq	r0, r0, r4, lsr #32
			m_size (ch) += m_hdrlen + m_size (chunk);
    113c:	00001128 	andeq	r1, r0, r8, lsr #2
    1140:	00003190 	muleq	r0, r0, r1
    1144:	00000028 	andeq	r0, r0, r8, lsr #32
    1148:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    114c:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1150:	4e018e02 	cdpmi	14, 0, cr8, cr1, cr2, {0}
			if (m_size (chunk) >= m_size (ch))
    1154:	c5c6ce0a 	strbgt	ip, [r6, #3594]	; 0xe0a
    1158:	42000ec4 	andmi	r0, r0, #196, 28	; 0xc40
    115c:	0000000b 	andeq	r0, r0, fp
		chunk = m_nextp (chunk))
    1160:	00000028 	andeq	r0, r0, r8, lsr #32
    1164:	00001128 	andeq	r1, r0, r8, lsr #2
    1168:	00000000 	andeq	r0, r0, r0
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    116c:	0000002c 	andeq	r0, r0, ip, lsr #32
	diag_wait (a);
    1170:	83180e41 	tsthi	r8, #1040	; 0x410
	diag_wchar (c, a);
    1174:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
    1178:	87038604 	strhi	r8, [r3, -r4, lsl #12]
}
    117c:	50018e02 	andpl	r8, r1, r2, lsl #28
    1180:	c6c7ce0a 	strbgt	ip, [r7], sl, lsl #28
	syserror (ESTATE, "state");
    1184:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
    1188:	000b4200 	andeq	r4, fp, r0, lsl #4
    118c:	0000000c 	andeq	r0, r0, ip
    1190:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	for (i = 0; i < MAX_UTIMERS; i++)
    1194:	7c020001 	stcvc	0, cr0, [r2], {1}
void utimer_add (address ut) {
    1198:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    119c:	0000000c 	andeq	r0, r0, ip
		if (__pi_utims [i] == NULL)
    11a0:	0000118c 	andeq	r1, r0, ip, lsl #3
	for (i = 0; i < MAX_UTIMERS; i++)
    11a4:	000031b8 			; <UNDEFINED> instruction: 0x000031b8
    11a8:	00000030 	andeq	r0, r0, r0, lsr r0
		syserror (ERESOURCE, "ut a");
    11ac:	0000000c 	andeq	r0, r0, ip
	__pi_utims [i] = ut;
    11b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
}
    11b4:	7c020001 	stcvc	0, cr0, [r2], {1}
    11b8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    11bc:	0000000c 	andeq	r0, r0, ip
	*t = v;
    11c0:	000011ac 	andeq	r1, r0, ip, lsr #3
	TCI_RUN_AUXILIARY_TIMER;
    11c4:	000031e8 	andeq	r3, r0, r8, ror #3
void update_n_wake (word min, Boolean force) {
    11c8:	00000020 	andeq	r0, r0, r0, lsr #32
	if (TCI_UPDATE_DELAY_TICKS (force))
    11cc:	0000000c 	andeq	r0, r0, ip
    11d0:	000011ac 	andeq	r1, r0, ip, lsr #3
    11d4:	00003208 	andeq	r3, r0, r8, lsl #4
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    11d8:	00000018 	andeq	r0, r0, r8, lsl r0
    11dc:	0000000c 	andeq	r0, r0, ip
    11e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    11e4:	7c020001 	stcvc	0, cr0, [r2], {1}
    11e8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    11ec:	0000000c 	andeq	r0, r0, ip
    11f0:	000011dc 	ldrdeq	r1, [r0], -ip
    11f4:	00003220 	andeq	r3, r0, r0, lsr #4
    11f8:	00000008 	andeq	r0, r0, r8
    11fc:	0000000c 	andeq	r0, r0, ip
    1200:	000011dc 	ldrdeq	r1, [r0], -ip
    1204:	00000000 	andeq	r0, r0, r0
    1208:	00000006 	andeq	r0, r0, r6
		for_all_tasks (i) {
    120c:	0000000c 	andeq	r0, r0, ip
	__pi_mintk = znew + min;
    1210:	000011dc 	ldrdeq	r1, [r0], -ip
    1214:	00003228 	andeq	r3, r0, r8, lsr #4
			if (!twaiting (i))
    1218:	00000008 	andeq	r0, r0, r8
    121c:	0000000c 	andeq	r0, r0, ip
			if (twakecnd (__pi_old, znew, i->Timer)) {
    1220:	000011dc 	ldrdeq	r1, [r0], -ip
    1224:	00000000 	andeq	r0, r0, r0
    1228:	00000006 	andeq	r0, r0, r6
    122c:	0000000c 	andeq	r0, r0, ip
    1230:	000011dc 	ldrdeq	r1, [r0], -ip
    1234:	00000000 	andeq	r0, r0, r0
    1238:	00000008 	andeq	r0, r0, r8
    123c:	0000000c 	andeq	r0, r0, ip
    1240:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1244:	7c020001 	stcvc	0, cr0, [r2], {1}
    1248:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    124c:	0000001c 	andeq	r0, r0, ip, lsl r0
				wakeuptm (i);
    1250:	0000123c 	andeq	r1, r0, ip, lsr r2
    1254:	00003230 	andeq	r3, r0, r0, lsr r2
		for_all_tasks (i) {
    1258:	0000005c 	andeq	r0, r0, ip, asr r0
				d = i->Timer - znew;
    125c:	84180e41 	ldrhi	r0, [r8], #-3649	; 0xfffff1bf
    1260:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1264:	67018e02 	strvs	r8, [r1, -r2, lsl #28]
		if ((word)(__pi_mintk - znew) < min) 
    1268:	0000100e 	andeq	r1, r0, lr
    126c:	00000014 	andeq	r0, r0, r4, lsl r0
    1270:	0000123c 	andeq	r1, r0, ip, lsr r2
	__pi_old = znew;
    1274:	0000328c 	andeq	r3, r0, ip, lsl #5
}
    1278:	0000002c 	andeq	r0, r0, ip, lsr #32
	TCI_RUN_DELAY_TIMER;
    127c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
}
    1280:	00018e02 	andeq	r8, r1, r2, lsl #28
    1284:	00000018 	andeq	r0, r0, r8, lsl r0
    1288:	0000123c 	andeq	r1, r0, ip, lsr r2
    128c:	00000000 	andeq	r0, r0, r0
    1290:	00000090 	muleq	r0, r0, r0
void proceed (word state) {
    1294:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
	prcdstate (__pi_curr, state);
    1298:	86038504 	strhi	r8, [r3], -r4, lsl #10
    129c:	00018e02 	andeq	r8, r1, r2, lsl #28
	release;
    12a0:	00000014 	andeq	r0, r0, r4, lsl r0
    12a4:	0000123c 	andeq	r1, r0, ip, lsr r2
void __pi_wait (aword event, word state) {
    12a8:	000032b8 			; <UNDEFINED> instruction: 0x000032b8
	sint j = nevents (__pi_curr);
    12ac:	00000018 	andeq	r0, r0, r8, lsl r0
	if (j >= MAX_EVENTS_PER_TASK)
    12b0:	83080e41 	movwhi	r0, #36417	; 0x8e41
    12b4:	00018e02 	andeq	r8, r1, r2, lsl #28
    12b8:	00000014 	andeq	r0, r0, r4, lsl r0
		syserror (ENEVENTS, "sw");
    12bc:	0000123c 	andeq	r1, r0, ip, lsr r2
    12c0:	000032d0 	ldrdeq	r3, [r0], -r0
	setestate (__pi_curr->Events [j], state, event);
    12c4:	00000060 	andeq	r0, r0, r0, rrx
	incwait (__pi_curr);
    12c8:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
	setestate (__pi_curr->Events [j], state, event);
    12cc:	00018e02 	andeq	r8, r1, r2, lsl #28
}
    12d0:	00000014 	andeq	r0, r0, r4, lsl r0
    12d4:	0000123c 	andeq	r1, r0, ip, lsr r2
    12d8:	00003330 	andeq	r3, r0, r0, lsr r3
void __pi_trigger (aword event) {
    12dc:	00000034 	andeq	r0, r0, r4, lsr r0
	for_all_tasks (i) {
    12e0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		for (j = 0; j < nevents (i); j++) {
    12e4:	00018e02 	andeq	r8, r1, r2, lsl #28
    12e8:	00000018 	andeq	r0, r0, r8, lsl r0
    12ec:	0000123c 	andeq	r1, r0, ip, lsr r2
    12f0:	00000000 	andeq	r0, r0, r0
			if (i->Events [j] . Event == event) {
    12f4:	00000038 	andeq	r0, r0, r8, lsr r0
    12f8:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
    12fc:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
				wakeupev (i, j);
    1300:	00000001 	andeq	r0, r0, r1
    1304:	0000000c 	andeq	r0, r0, ip
	for_all_tasks (i) {
    1308:	0000123c 	andeq	r1, r0, ip, lsr r2
}
    130c:	00000000 	andeq	r0, r0, r0
aword __pi_join (aword pid, word st) {
    1310:	0000000c 	andeq	r0, r0, ip
	for_all_tasks (i) {
    1314:	00000018 	andeq	r0, r0, r8, lsl r0
    1318:	0000123c 	andeq	r1, r0, ip, lsr r2
	return 0;
    131c:	00000000 	andeq	r0, r0, r0
		if ((aword)i == pid) {
    1320:	00000034 	andeq	r0, r0, r4, lsr r0
			__pi_wait (pid, st);
    1324:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
}
    1328:	86038504 	strhi	r8, [r3], -r4, lsl #10
	for_all_tasks (i) {
    132c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1330:	0000000c 	andeq	r0, r0, ip
void delay (word d, word state) {
    1334:	0000123c 	andeq	r1, r0, ip, lsr r2
	settstate (__pi_curr, state);
    1338:	00000000 	andeq	r0, r0, r0
    133c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1340:	0000000c 	andeq	r0, r0, ip
    1344:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	update_n_wake (d, YES);
    1348:	7c020001 	stcvc	0, cr0, [r2], {1}
    134c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1350:	0000000c 	andeq	r0, r0, ip
	__pi_curr->Timer = __pi_old + d;
    1354:	00001340 	andeq	r1, r0, r0, asr #6
	inctimer (__pi_curr);
    1358:	00000000 	andeq	r0, r0, r0
    135c:	00000014 	andeq	r0, r0, r4, lsl r0
    1360:	0000000c 	andeq	r0, r0, ip
}
    1364:	00001340 	andeq	r1, r0, r0, asr #6
    1368:	00003364 	andeq	r3, r0, r4, ror #6
	if (fun == NULL)
    136c:	00000028 	andeq	r0, r0, r8, lsr #32
		return (int) __pi_curr;
    1370:	0000000c 	andeq	r0, r0, ip
    1374:	00001340 	andeq	r1, r0, r0, asr #6
	for_all_tasks (i)
    1378:	0000338c 	andeq	r3, r0, ip, lsl #7
}
    137c:	0000004c 	andeq	r0, r0, ip, asr #32
		if (i->code == fun)
    1380:	0000000c 	andeq	r0, r0, ip
	for_all_tasks (i)
    1384:	00001340 	andeq	r1, r0, r0, asr #6
    1388:	000033d8 	ldrdeq	r3, [r0], -r8
    138c:	00000150 	andeq	r0, r0, r0, asr r1
int __pi_strlen (const char *s) {
    1390:	00000018 	andeq	r0, r0, r8, lsl r0
	for (i = 0; *(s+i) != '\0'; i++);
    1394:	00001340 	andeq	r1, r0, r0, asr #6
}
    1398:	00003528 	andeq	r3, r0, r8, lsr #10
	for (i = 0; *(s+i) != '\0'; i++);
    139c:	00000118 	andeq	r0, r0, r8, lsl r1
	while ((Boolean)(*d++ = *s++));
    13a0:	84100e43 	ldrhi	r0, [r0], #-3651	; 0xfffff1bd
    13a4:	86038504 	strhi	r8, [r3], -r4, lsl #10
    13a8:	00018e02 	andeq	r8, r1, r2, lsl #28
}
    13ac:	00000018 	andeq	r0, r0, r8, lsl r0
	while (n--)
    13b0:	00001340 	andeq	r1, r0, r0, asr #6
    13b4:	00003640 	andeq	r3, r0, r0, asr #12
		*dest++ = *src++;
    13b8:	00000020 	andeq	r0, r0, r0, lsr #32
    13bc:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    13c0:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
	while (n--)
    13c4:	00000001 	andeq	r0, r0, r1
}
    13c8:	00000014 	andeq	r0, r0, r4, lsl r0
		*dest++ = c;
    13cc:	00001340 	andeq	r1, r0, r0, asr #6
void adddevfunc (devreqfun_t rf, int loc) {
    13d0:	00000000 	andeq	r0, r0, r0
		syserror (EREQPAR, "addv");
    13d4:	00000060 	andeq	r0, r0, r0, rrx
		syserror (ERESOURCE, "addv");
    13d8:	83080e41 	movwhi	r0, #36417	; 0x8e41
	if (ioreq [loc] != NULL)
    13dc:	00018e02 	andeq	r8, r1, r2, lsl #28
    13e0:	0000000c 	andeq	r0, r0, ip
		syserror (ERESOURCE, "addv");
    13e4:	00001340 	andeq	r1, r0, r0, asr #6
	ioreq [loc] = rf;
    13e8:	00003660 	andeq	r3, r0, r0, ror #12
}
    13ec:	0000001c 	andeq	r0, r0, ip, lsl r0
    13f0:	0000000c 	andeq	r0, r0, ip
sint io (word retry, word dev, word operation, char *buf, word len) {
    13f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    13f8:	7c020001 	stcvc	0, cr0, [r2], {1}
    13fc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1400:	00000018 	andeq	r0, r0, r8, lsl r0
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1404:	000013f0 	strdeq	r1, [r0], -r0
    1408:	0000367c 	andeq	r3, r0, ip, ror r6
    140c:	000000d4 	ldrdeq	r0, [r0], -r4
		syserror (ENODEVICE, "io");
    1410:	83100e41 	tsthi	r0, #1040	; 0x410
    1414:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
	if (len == 0)
    1418:	00018e02 	andeq	r8, r1, r2, lsl #28
	ret = (ioreq [dev]) (operation, buf, len);
    141c:	00000014 	andeq	r0, r0, r4, lsl r0
    1420:	000013f0 	strdeq	r1, [r0], -r0
	if (ret >= 0)
    1424:	00003750 	andeq	r3, r0, r0, asr r7
	if (ret == -1) {
    1428:	000000a4 	andeq	r0, r0, r4, lsr #1
    142c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		if (retry == WNONE)
    1430:	00018e02 	andeq	r8, r1, r2, lsl #28
		iowait (dev, operation, retry);
    1434:	0000000c 	andeq	r0, r0, ip
    1438:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    143c:	7c020001 	stcvc	0, cr0, [r2], {1}
			release;
    1440:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1444:	00000018 	andeq	r0, r0, r8, lsl r0
		if (retry != WNONE) {
    1448:	00001434 	andeq	r1, r0, r4, lsr r4
    144c:	000037f4 	strdeq	r3, [r0], -r4
			iowait (dev, operation, retry);
    1450:	0000007c 	andeq	r0, r0, ip, ror r0
    1454:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
			(ioreq [dev]) (NONE, buf, len);
    1458:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    145c:	00000001 	andeq	r0, r0, r1
    1460:	00000014 	andeq	r0, r0, r4, lsl r0
		(ioreq [dev]) (NONE, buf, len);
    1464:	00001434 	andeq	r1, r0, r4, lsr r4
    1468:	00003870 	andeq	r3, r0, r0, ror r8
    146c:	000000ac 	andeq	r0, r0, ip, lsr #1
}
    1470:	84080e45 	strhi	r0, [r8], #-3653	; 0xfffff1bb
	if (retry != WNONE) {
    1474:	00018e02 	andeq	r8, r1, r2, lsl #28
		delay (-ret - 2, retry);
    1478:	0000000c 	andeq	r0, r0, ip
    147c:	00001434 	andeq	r1, r0, r4, lsr r4
    1480:	0000391c 	andeq	r3, r0, ip, lsl r9
    1484:	0000005c 	andeq	r0, r0, ip, asr r0
		release;
    1488:	0000000c 	andeq	r0, r0, ip
    148c:	00001434 	andeq	r1, r0, r4, lsr r4
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1490:	00003978 	andeq	r3, r0, r8, ror r9
    1494:	00000018 	andeq	r0, r0, r8, lsl r0
    1498:	0000000c 	andeq	r0, r0, ip
    149c:	00001434 	andeq	r1, r0, r4, lsr r4
    14a0:	00000000 	andeq	r0, r0, r0
		syserror (ERESOURCE, "mal1");
    14a4:	00000010 	andeq	r0, r0, r0, lsl r0
    14a8:	0000000c 	andeq	r0, r0, ip
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    14ac:	00001434 	andeq	r1, r0, r4, lsr r4
    14b0:	00003990 	muleq	r0, r0, r9
	m_magic (mpools [0]) = MALLOC_MAGIC;
    14b4:	00000010 	andeq	r0, r0, r0, lsl r0
	m_size (mpools [0]) = mlen - m_hdrlen;
    14b8:	0000000c 	andeq	r0, r0, ip
	m_magic (mpools [0]) = MALLOC_MAGIC;
    14bc:	00001434 	andeq	r1, r0, r4, lsr r4
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    14c0:	000039a0 	andeq	r3, r0, r0, lsr #19
    14c4:	00000014 	andeq	r0, r0, r4, lsl r0
}
    14c8:	00000018 	andeq	r0, r0, r8, lsl r0
    14cc:	00001434 	andeq	r1, r0, r4, lsr r4
    14d0:	000039b4 			; <UNDEFINED> instruction: 0x000039b4
    14d4:	00000064 	andeq	r0, r0, r4, rrx
    14d8:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    14dc:	86038504 	strhi	r8, [r3], -r4, lsl #10
void __pi_free (aword *ch) {
    14e0:	00018e02 	andeq	r8, r1, r2, lsl #28
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    14e4:	0000000c 	andeq	r0, r0, ip
    14e8:	00001434 	andeq	r1, r0, r4, lsr r4
		syserror (EMALLOC, "malg");
    14ec:	00003a18 	andeq	r3, r0, r8, lsl sl
    14f0:	00000014 	andeq	r0, r0, r4, lsl r0
	mcfree [MA_NP] += m_size (ch);
    14f4:	0000000c 	andeq	r0, r0, ip
		m_size (ch) ^= MALLOC_UMASK;
    14f8:	00001434 	andeq	r1, r0, r4, lsr r4
    14fc:	00003a2c 	andeq	r3, r0, ip, lsr #20
	mcfree [MA_NP] += m_size (ch);
    1500:	00000014 	andeq	r0, r0, r4, lsl r0
	QFREE;
    1504:	0000000c 	andeq	r0, r0, ip
	if (mevent [MA_NP] . nwait) {
    1508:	00001434 	andeq	r1, r0, r4, lsr r4
    150c:	00003a40 	andeq	r3, r0, r0, asr #20
		trigger ((aword)(&(mevent [MA_NP])));
    1510:	00000014 	andeq	r0, r0, r4, lsl r0
		mevent [MA_NP] . nwait --;
    1514:	0000000c 	andeq	r0, r0, ip
}
    1518:	00001434 	andeq	r1, r0, r4, lsr r4
    151c:	00003a54 	andeq	r3, r0, r4, asr sl
    1520:	00000028 	andeq	r0, r0, r8, lsr #32
    1524:	0000000c 	andeq	r0, r0, ip
void kill (aword pid) {
    1528:	00001434 	andeq	r1, r0, r4, lsr r4
		pid = (aword) __pi_curr;
    152c:	00003a7c 	andeq	r3, r0, ip, ror sl
	j = NULL;
    1530:	00000010 	andeq	r0, r0, r0, lsl r0
	for_all_tasks (i) {
    1534:	0000000c 	andeq	r0, r0, ip
	syserror (EREQPAR, "kpi");
    1538:	00001434 	andeq	r1, r0, r4, lsr r4
    153c:	00003a8c 	andeq	r3, r0, ip, lsl #21
		if ((aword)i == pid) {
    1540:	0000002c 	andeq	r0, r0, ip, lsr #32
    1544:	0000000c 	andeq	r0, r0, ip
				__PCB = i->Next;
    1548:	00001434 	andeq	r1, r0, r4, lsr r4
			killev (i);
    154c:	00003ab8 			; <UNDEFINED> instruction: 0x00003ab8
			ufree (i);
    1550:	00000014 	andeq	r0, r0, r4, lsl r0
			if (i == __pi_curr)
    1554:	0000000c 	andeq	r0, r0, ip
    1558:	00001434 	andeq	r1, r0, r4, lsr r4
				release;
    155c:	00003acc 	andeq	r3, r0, ip, asr #21
				j->Next = i->Next;
    1560:	00000014 	andeq	r0, r0, r4, lsl r0
    1564:	0000001c 	andeq	r0, r0, ip, lsl r0
    1568:	00001434 	andeq	r1, r0, r4, lsr r4
}
    156c:	00003ae0 	andeq	r3, r0, r0, ror #21
    1570:	00000110 	andeq	r0, r0, r0, lsl r1
    1574:	84180e41 	ldrhi	r0, [r8], #-3649	; 0xfffff1bf
	if (size < 8)
    1578:	86038504 	strhi	r8, [r3], -r4, lsl #10
		_size = 2;
    157c:	02018e02 	andeq	r8, r1, #2, 28
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1580:	00100e76 	andseq	r0, r0, r6, ror lr
		_size = (((aword)size) + 3) >> 2;
    1584:	00000018 	andeq	r0, r0, r8, lsl r0
		if (m_magic (chunk) != MALLOC_MAGIC)
    1588:	00001434 	andeq	r1, r0, r4, lsr r4
		_size = (((aword)size) + 3) >> 2;
    158c:	00003bf0 	strdeq	r3, [r0], -r0
		if (mevent [MA_NP] . nfail != 255)
    1590:	00000064 	andeq	r0, r0, r4, rrx
    1594:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
			mevent [MA_NP] . nfail ++;
    1598:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
		mnfree [MA_NP] = 0;
    159c:	00000001 	andeq	r0, r0, r1
    15a0:	0000000c 	andeq	r0, r0, ip
		if (m_magic (chunk) != MALLOC_MAGIC)
    15a4:	00001434 	andeq	r1, r0, r4, lsr r4
    15a8:	00003c54 	andeq	r3, r0, r4, asr ip
			syserror (EMALLOC, "malc");
    15ac:	00000028 	andeq	r0, r0, r8, lsr #32
    15b0:	00000014 	andeq	r0, r0, r4, lsl r0
		if (m_size (chunk) >= _size)
    15b4:	00001434 	andeq	r1, r0, r4, lsr r4
    15b8:	00003c7c 	andeq	r3, r0, ip, ror ip
		chunk = m_nextp (chunk)) {
    15bc:	00000150 	andeq	r0, r0, r0, asr r1
		m_setnextp (cc, m_nextp (chunk));
    15c0:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    15c4:	00018e02 	andeq	r8, r1, r2, lsl #28
    15c8:	0000000c 	andeq	r0, r0, ip
			m_size (chunk) = _size;
    15cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
			cc = chunk + _size + m_hdrlen;
    15d0:	7c020001 	stcvc	0, cr0, [r2], {1}
    15d4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    15d8:	0000001c 	andeq	r0, r0, ip, lsl r0
			QFREE;
    15dc:	000015c8 	andeq	r1, r0, r8, asr #11
		mevent [MA_NP] . nfail = 0;
    15e0:	00000000 	andeq	r0, r0, r0
		mcfree [MA_NP] -= m_size (chunk);
    15e4:	000000f4 	strdeq	r0, [r0], -r4
    15e8:	84180e44 	ldrhi	r0, [r8], #-3652	; 0xfffff1bc
    15ec:	86058506 	strhi	r8, [r5], -r6, lsl #10
    15f0:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
		m_size (chunk) |= MALLOC_UMASK;
    15f4:	00018e02 	andeq	r8, r1, r2, lsl #28
		if (mnfree [MA_NP] > mcfree [MA_NP])
    15f8:	00000028 	andeq	r0, r0, r8, lsr #32
		m_size (chunk) |= MALLOC_UMASK;
    15fc:	000015c8 	andeq	r1, r0, r8, asr #11
			mnfree [MA_NP] = mcfree [MA_NP];
    1600:	00003dcc 	andeq	r3, r0, ip, asr #27
}
    1604:	00000220 	andeq	r0, r0, r0, lsr #4
    1608:	84300e42 	ldrthi	r0, [r0], #-3650	; 0xfffff1be
    160c:	86088509 	strhi	r8, [r8], -r9, lsl #10
    1610:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
    1614:	8a048905 	bhi	123a30 <__ccfg+0x103a88>
    1618:	8e028b03 	vmlahi.f64	d8, d2, d3
    161c:	0eee0201 	cdpeq	2, 14, cr0, cr14, cr1, {0}
aword __pi_fork (fsmcode func, aword data) {
    1620:	00000024 	andeq	r0, r0, r4, lsr #32
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1624:	00000014 	andeq	r0, r0, r4, lsl r0
    1628:	000015c8 	andeq	r1, r0, r8, asr #11
    162c:	00003fec 	andeq	r3, r0, ip, ror #31
		if ((j = __PCB) == NULL)
    1630:	00000060 	andeq	r0, r0, r0, rrx
	i->Next = NULL;
    1634:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
	i->data = data;
    1638:	00018e02 	andeq	r8, r1, r2, lsl #28
		if ((j = __PCB) == NULL)
    163c:	00000014 	andeq	r0, r0, r4, lsl r0
}
    1640:	000015c8 	andeq	r1, r0, r8, asr #11
			for (; j->Next != NULL; j = j->Next);
    1644:	00000000 	andeq	r0, r0, r0
    1648:	00000078 	andeq	r0, r0, r8, ror r0
	return (aword) i;
    164c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1650:	00018e02 	andeq	r8, r1, r2, lsl #28
	if (mevent [MA_NP] . nwait != 255)
    1654:	0000000c 	andeq	r0, r0, ip
    1658:	000015c8 	andeq	r1, r0, r8, asr #11
    165c:	0000404c 	andeq	r4, r0, ip, asr #32
		mevent [MA_NP] . nwait ++;
    1660:	00000018 	andeq	r0, r0, r8, lsl r0
	wait ((aword)(&(mevent [MA_NP])), state);
    1664:	0000000c 	andeq	r0, r0, ip
    1668:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
void diag (const char *mess, ...) {
    166c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1670:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1674:	0000000c 	andeq	r0, r0, ip
	diag_disable_int (a, is);
    1678:	00001664 	andeq	r1, r0, r4, ror #12
    167c:	00000000 	andeq	r0, r0, r0
    1680:	00000010 	andeq	r0, r0, r0, lsl r0
				d = (bc == 16) ? 10000 : 1000000000;
    1684:	0000000c 	andeq	r0, r0, ip
	diag_disable_int (a, is);
    1688:	00001664 	andeq	r1, r0, r4, ror #12
	while (*mess != '\0') {
    168c:	00000000 	andeq	r0, r0, r0
	dgout ('\r');
    1690:	00000018 	andeq	r0, r0, r8, lsl r0
	dgout ('\n');
    1694:	0000000c 	andeq	r0, r0, ip
    1698:	00001664 	andeq	r1, r0, r4, ror #12
    169c:	00004064 	andeq	r4, r0, r4, rrx
	diag_wait (a);
    16a0:	0000004c 	andeq	r0, r0, ip, asr #32
	diag_enable_int (a, is);
    16a4:	00000014 	andeq	r0, r0, r4, lsl r0
    16a8:	00001664 	andeq	r1, r0, r4, ror #12
}
    16ac:	00000000 	andeq	r0, r0, r0
    16b0:	00000030 	andeq	r0, r0, r0, lsr r0
    16b4:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		if (*mess == '%') {
    16b8:	00018e02 	andeq	r8, r1, r2, lsl #28
    16bc:	00000018 	andeq	r0, r0, r8, lsl r0
			if (*mess == 'l') {
    16c0:	00001664 	andeq	r1, r0, r4, ror #12
    16c4:	000040b0 	strheq	r4, [r0], -r0
				mess++;
    16c8:	0000006c 	andeq	r0, r0, ip, rrx
				val = va_arg (ap, lword);
    16cc:	83100e41 	tsthi	r0, #1040	; 0x410
				bc = 32;
    16d0:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
				bc = 16;
    16d4:	00018e02 	andeq	r8, r1, r2, lsl #28
			switch (*mess) {
    16d8:	00000014 	andeq	r0, r0, r4, lsl r0
    16dc:	00001664 	andeq	r1, r0, r4, ror #12
    16e0:	0000411c 	andeq	r4, r0, ip, lsl r1
				dgout ('%');
    16e4:	00000016 	andeq	r0, r0, r6, lsl r0
    16e8:	83080e41 	movwhi	r0, #36417	; 0x8e41
				dgout (*mess);
    16ec:	00018e02 	andeq	r8, r1, r2, lsl #28
    16f0:	0000000c 	andeq	r0, r0, ip
			switch (*mess) {
    16f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
					v = __pi_hex_enc_table [
    16f8:	7c020001 	stcvc	0, cr0, [r2], {1}
					i += 4;
    16fc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1700:	00000024 	andeq	r0, r0, r4, lsr #32
					(val >> (bc - i)) & 0xf];
    1704:	000016f0 	strdeq	r1, [r0], -r0
					dgout (v);
    1708:	00004134 	andeq	r4, r0, r4, lsr r1
    170c:	00000028 	andeq	r0, r0, r8, lsr #32
				while (i < bc) {
    1710:	83100e41 	tsthi	r0, #1040	; 0x410
			mess++;
    1714:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
					d /= 10;
    1718:	4e018e02 	cdpmi	14, 0, cr8, cr1, cr2, {0}
				if ((val >> (bc - 1)) & 1) {
    171c:	c4c5ce0a 	strbgt	ip, [r5], #3594	; 0xe0a
    1720:	42000ec3 	andmi	r0, r0, #3120	; 0xc30
					dgout ('-');
    1724:	0000000b 	andeq	r0, r0, fp
    1728:	0000000c 	andeq	r0, r0, ip
						val |= 0xffff0000;
    172c:	000016f0 	strdeq	r1, [r0], -r0
    1730:	0000415c 	andeq	r4, r0, ip, asr r1
    1734:	00000008 	andeq	r0, r0, r8
				d = (bc == 16) ? 10000 : 1000000000;
    1738:	0000000c 	andeq	r0, r0, ip
    173c:	000016f0 	strdeq	r1, [r0], -r0
    1740:	00000000 	andeq	r0, r0, r0
					v = (word) (val / d);
    1744:	00000022 	andeq	r0, r0, r2, lsr #32
					if (v || d == 1) break;
    1748:	00000018 	andeq	r0, r0, r8, lsl r0
    174c:	000016f0 	strdeq	r1, [r0], -r0
					d /= 10;
    1750:	00000000 	andeq	r0, r0, r0
				d = (bc == 16) ? 10000 : 1000000000;
    1754:	0000002e 	andeq	r0, r0, lr, lsr #32
					dgout (v + '0');
    1758:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    175c:	54018e02 	strpl	r8, [r1], #-3586	; 0xfffff1fe
    1760:	000ec4ce 	andeq	ip, lr, lr, asr #9
					d /= 10;
    1764:	00000018 	andeq	r0, r0, r8, lsl r0
					val = val - (v * d);
    1768:	000016f0 	strdeq	r1, [r0], -r0
					if (d == 0) break;
    176c:	00000000 	andeq	r0, r0, r0
					v = (word) (val / d);
    1770:	00000034 	andeq	r0, r0, r4, lsr r0
    1774:	83100e41 	tsthi	r0, #1040	; 0x410
				if (bc == 16)
    1778:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
				d = (bc == 16) ? 10000 : 1000000000;
    177c:	00018e02 	andeq	r8, r1, r2, lsl #28
					val &= 0xffff;
    1780:	00000018 	andeq	r0, r0, r8, lsl r0
					dgout (*s);
    1784:	000016f0 	strdeq	r1, [r0], -r0
					s++;
    1788:	00000000 	andeq	r0, r0, r0
				while (*s != '\0') {
    178c:	00000040 	andeq	r0, r0, r0, asr #32
    1790:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
			dgout (*mess++);
    1794:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1798:	00018e02 	andeq	r8, r1, r2, lsl #28
    179c:	0000000c 	andeq	r0, r0, ip
    17a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    17a4:	7c020001 	stcvc	0, cr0, [r2], {1}
	__pi_seed = __pi_seed * 1103515245 + 12345;
    17a8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    17ac:	00000020 	andeq	r0, r0, r0, lsr #32
    17b0:	0000179c 	muleq	r0, ip, r7
    17b4:	00004164 	andeq	r4, r0, r4, ror #2
	^ entropy
    17b8:	000000aa 	andeq	r0, r0, sl, lsr #1
}
    17bc:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
    17c0:	86048505 	strhi	r8, [r4], -r5, lsl #10
    17c4:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    17c8:	180e4201 	stmdane	lr, {r0, r9, lr}
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    17cc:	00000688 	andeq	r0, r0, r8, lsl #13
	word cs = size + hblenb;
    17d0:	0000000c 	andeq	r0, r0, ip
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    17d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    17d8:	7c020001 	stcvc	0, cr0, [r2], {1}
	p -> length = size;
    17dc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
}
    17e0:	0000000c 	andeq	r0, r0, ip
	if (p->attributes.b.queued) {
    17e4:	000017d0 	ldrdeq	r1, [r0], -r0
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    17e8:	00004210 	andeq	r4, r0, r0, lsl r2
    17ec:	00000014 	andeq	r0, r0, r4, lsl r0
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    17f0:	00000014 	andeq	r0, r0, r4, lsl r0
		p->attributes.b.queued = 0;
    17f4:	000017d0 	ldrdeq	r1, [r0], -r0
    17f8:	00004224 	andeq	r4, r0, r4, lsr #4
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    17fc:	00000038 	andeq	r0, r0, r8, lsr r0
	deq (p);	// Remove from queue
    1800:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
}
    1804:	00018e02 	andeq	r8, r1, r2, lsl #28
	tfree ((address)p);
    1808:	0000000c 	andeq	r0, r0, ip
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    180c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1810:	7c020001 	stcvc	0, cr0, [r2], {1}
    1814:	000d0c0e 	andeq	r0, sp, lr, lsl #24
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1818:	00000018 	andeq	r0, r0, r8, lsl r0
    181c:	00001808 	andeq	r1, r0, r8, lsl #16
	if (q_empty (q))
    1820:	0000425c 	andeq	r4, r0, ip, asr r2
    1824:	00000038 	andeq	r0, r0, r8, lsr r0
		trigger (q);
    1828:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
	if (p->attributes.b.urgent) {
    182c:	42018e02 	andmi	r8, r1, #2, 28
		p->u.bqueue.next = q->next;
    1830:	0000180e 	andeq	r1, r0, lr, lsl #16
		p->u.bqueue.prev = q;
    1834:	0000000c 	andeq	r0, r0, ip
		q->next->prev = (qitem_t*) p;
    1838:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	p->attributes.b.queued = 1;
    183c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1840:	000d0c0e 	andeq	r0, sp, lr, lsl #24
}
    1844:	00000018 	andeq	r0, r0, r8, lsl r0
		p->u.bqueue.prev = q->prev;
    1848:	00001834 	andeq	r1, r0, r4, lsr r8
		q->prev->next = (qitem_t*) p;
    184c:	00004294 	muleq	r0, r4, r2
		q->prev = (qitem_t*) p;
    1850:	0000002c 	andeq	r0, r0, ip, lsr #32
    1854:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    1858:	86038504 	strhi	r8, [r3], -r4, lsl #10
	deq (p);	// Soft dequeue, timer and hook left intact
    185c:	00018e02 	andeq	r8, r1, r2, lsl #28
	switch (dv) {
    1860:	0000000c 	andeq	r0, r0, ip
    1864:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1868:	7c020001 	stcvc	0, cr0, [r2], {1}
    186c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
			p->attributes.b.urgent = 1;
    1870:	00000018 	andeq	r0, r0, r8, lsl r0
    1874:	00001860 	andeq	r1, r0, r0, ror #16
			verify_ses (p, "dispose ses");
    1878:	00000000 	andeq	r0, r0, r0
    187c:	0000001e 	andeq	r0, r0, lr, lsl r0
    1880:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    1884:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1888:	00018e02 	andeq	r8, r1, r2, lsl #28
			verify_phy (p, "dispose phy");
    188c:	00000018 	andeq	r0, r0, r8, lsl r0
    1890:	00001860 	andeq	r1, r0, r0, ror #16
}
    1894:	00000000 	andeq	r0, r0, r0
			enq (oqueues [p->attributes.b.phys], p);
    1898:	00000098 	muleq	r0, r8, r0
			p->attributes.b.urgent = 1;
    189c:	84100e43 	ldrhi	r0, [r0], #-3651	; 0xfffff1bd
    18a0:	86038504 	strhi	r8, [r3], -r4, lsl #10
			verify_phy (p, "dispose phy");
    18a4:	00018e02 	andeq	r8, r1, r2, lsl #28
    18a8:	0000000c 	andeq	r0, r0, ip
    18ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    18b0:	7c020001 	stcvc	0, cr0, [r2], {1}
    18b4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    18b8:	00000020 	andeq	r0, r0, r0, lsr #32
			enq (oqueues [p->attributes.b.phys], p);
    18bc:	000018a8 	andeq	r1, r0, r8, lsr #17
    18c0:	000042c0 	andeq	r4, r0, r0, asr #5
}
    18c4:	00000054 	andeq	r0, r0, r4, asr r0
			rlp (p);
    18c8:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
}
    18cc:	86048505 	strhi	r8, [r4], -r5, lsl #10
    18d0:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    18d4:	180e5301 	stmdane	lr, {r0, r8, r9, ip, lr}
    18d8:	00000688 	andeq	r0, r0, r8, lsl #13
    18dc:	0000000c 	andeq	r0, r0, ip
    18e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    18e4:	7c020001 	stcvc	0, cr0, [r2], {1}
	if (b->attributes.b.outgoing) {
    18e8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
	b = header (p);
    18ec:	0000000c 	andeq	r0, r0, ip
	if (b->attributes.b.outgoing) {
    18f0:	000018dc 	ldrdeq	r1, [r0], -ip
		verify_ses (b, "tcv02");
    18f4:	00004314 	andeq	r4, r0, r4, lsl r3
    18f8:	00000010 	andeq	r0, r0, r0, lsl r0

Disassembly of section .stab:

00000000 <.stab>:
   0:	00000001 	andeq	r0, r0, r1
   4:	00020000 	andeq	r0, r2, r0
   8:	0000004e 	andeq	r0, r0, lr, asr #32
   c:	0000000a 	andeq	r0, r0, sl
}
  10:	0000001e 	andeq	r0, r0, lr, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	00000040 	andeq	r0, r0, r0, asr #32
  1c:	00000001 	andeq	r0, r0, r1
  20:	00000000 	andeq	r0, r0, r0

Disassembly of section .stabstr:

00000000 <.stabstr>:
   0:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
   4:	2e646f74 	mcrcs	15, 3, r6, cr4, cr4, {3}
   8:	675f0063 	ldrbvs	r0, [pc, -r3, rrx]
   c:	69747465 	ldmdbvs	r4!, {r0, r2, r5, r6, sl, ip, sp, lr}^
  10:	666f656d 	strbtvs	r6, [pc], -sp, ror #10
  14:	20796164 	rsbscs	r6, r9, r4, ror #2
  18:	6e207369 	cdpvs	3, 2, cr7, cr0, cr9, {3}
  1c:	6920746f 	stmdbvs	r0!, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}
  20:	656c706d 	strbvs	r7, [ip, #-109]!	; 0xffffff93
  24:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
  28:	61206465 			; <UNDEFINED> instruction: 0x61206465
  2c:	7720646e 	strvc	r6, [r0, -lr, ror #8]!
  30:	206c6c69 	rsbcs	r6, ip, r9, ror #24
  34:	61776c61 	cmnvs	r7, r1, ror #24
  38:	66207379 			; <UNDEFINED> instruction: 0x66207379
  3c:	006c6961 	rsbeq	r6, ip, r1, ror #18
			i = k;
  40:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
				j->Next = k;
  44:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
  48:	6164666f 	cmnvs	r4, pc, ror #12
}
  4c:	Address 0x000000000000004c is out of bounds.

